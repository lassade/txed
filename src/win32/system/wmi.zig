//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (64)
//--------------------------------------------------------------------------------
pub const MI_FLAG_ANY = @as(u32, 127);
pub const MI_FLAG_VERSION = @as(u32, 469762048);
pub const MI_FLAG_ADOPT = @as(u32, 2147483648);
pub const MI_CHAR_TYPE = @as(u32, 2);
pub const MI_FLAG_CLASS = @as(u32, 1);
pub const MI_FLAG_METHOD = @as(u32, 2);
pub const MI_FLAG_PROPERTY = @as(u32, 4);
pub const MI_FLAG_PARAMETER = @as(u32, 8);
pub const MI_FLAG_ASSOCIATION = @as(u32, 16);
pub const MI_FLAG_INDICATION = @as(u32, 32);
pub const MI_FLAG_REFERENCE = @as(u32, 64);
pub const MI_FLAG_ENABLEOVERRIDE = @as(u32, 128);
pub const MI_FLAG_DISABLEOVERRIDE = @as(u32, 256);
pub const MI_FLAG_RESTRICTED = @as(u32, 512);
pub const MI_FLAG_TOSUBCLASS = @as(u32, 1024);
pub const MI_FLAG_TRANSLATABLE = @as(u32, 2048);
pub const MI_FLAG_KEY = @as(u32, 4096);
pub const MI_FLAG_IN = @as(u32, 8192);
pub const MI_FLAG_OUT = @as(u32, 16384);
pub const MI_FLAG_REQUIRED = @as(u32, 32768);
pub const MI_FLAG_STATIC = @as(u32, 65536);
pub const MI_FLAG_ABSTRACT = @as(u32, 131072);
pub const MI_FLAG_TERMINAL = @as(u32, 262144);
pub const MI_FLAG_EXPENSIVE = @as(u32, 524288);
pub const MI_FLAG_STREAM = @as(u32, 1048576);
pub const MI_FLAG_READONLY = @as(u32, 2097152);
pub const MI_FLAG_EXTENDED = @as(u32, 4096);
pub const MI_FLAG_NOT_MODIFIED = @as(u32, 33554432);
pub const MI_FLAG_NULL = @as(u32, 536870912);
pub const MI_FLAG_BORROW = @as(u32, 1073741824);
pub const MI_MODULE_FLAG_STANDARD_QUALIFIERS = @as(u32, 1);
pub const MI_MODULE_FLAG_DESCRIPTIONS = @as(u32, 2);
pub const MI_MODULE_FLAG_VALUES = @as(u32, 4);
pub const MI_MODULE_FLAG_MAPPING_STRINGS = @as(u32, 8);
pub const MI_MODULE_FLAG_BOOLEANS = @as(u32, 16);
pub const MI_MODULE_FLAG_CPLUSPLUS = @as(u32, 32);
pub const MI_MODULE_FLAG_LOCALIZED = @as(u32, 64);
pub const MI_MODULE_FLAG_FILTER_SUPPORT = @as(u32, 128);
pub const MI_MAX_LOCALE_SIZE = @as(u32, 128);
pub const MI_WRITEMESSAGE_CHANNEL_WARNING = @as(u32, 0);
pub const MI_WRITEMESSAGE_CHANNEL_VERBOSE = @as(u32, 1);
pub const MI_WRITEMESSAGE_CHANNEL_DEBUG = @as(u32, 2);
pub const MI_CALL_VERSION = @as(u32, 1);
pub const MI_OPERATIONFLAGS_MANUAL_ACK_RESULTS = @as(u32, 1);
pub const MI_OPERATIONFLAGS_NO_RTTI = @as(u32, 1024);
pub const MI_OPERATIONFLAGS_BASIC_RTTI = @as(u32, 2);
pub const MI_OPERATIONFLAGS_STANDARD_RTTI = @as(u32, 2048);
pub const MI_OPERATIONFLAGS_FULL_RTTI = @as(u32, 4);
pub const MI_OPERATIONFLAGS_DEFAULT_RTTI = @as(u32, 0);
pub const MI_OPERATIONFLAGS_LOCALIZED_QUALIFIERS = @as(u32, 8);
pub const MI_OPERATIONFLAGS_EXPENSIVE_PROPERTIES = @as(u32, 64);
pub const MI_OPERATIONFLAGS_POLYMORPHISM_SHALLOW = @as(u32, 128);
pub const MI_OPERATIONFLAGS_POLYMORPHISM_DEEP_BASE_PROPS_ONLY = @as(u32, 384);
pub const MI_OPERATIONFLAGS_REPORT_OPERATION_STARTED = @as(u32, 512);
pub const MI_SUBSCRIBE_BOOKMARK_OLDEST = "MI_SUBSCRIBE_BOOKMARK_OLDEST";
pub const MI_SUBSCRIBE_BOOKMARK_NEWEST = "MI_SUBSCRIBE_BOOKMARK_NEWEST";
pub const MI_SERIALIZER_FLAGS_CLASS_DEEP = @as(u32, 1);
pub const MI_SERIALIZER_FLAGS_INSTANCE_WITH_CLASS = @as(u32, 1);
pub const WBEMS_DISPID_DERIVATION = @as(u32, 23);
pub const WBEMS_DISPID_OBJECT_READY = @as(u32, 1);
pub const WBEMS_DISPID_COMPLETED = @as(u32, 2);
pub const WBEMS_DISPID_PROGRESS = @as(u32, 3);
pub const WBEMS_DISPID_OBJECT_PUT = @as(u32, 4);
pub const WBEMS_DISPID_CONNECTION_READY = @as(u32, 5);

//--------------------------------------------------------------------------------
// Section: Types (370)
//--------------------------------------------------------------------------------
pub const MI_Result = enum(i32) {
    OK = 0,
    FAILED = 1,
    ACCESS_DENIED = 2,
    INVALID_NAMESPACE = 3,
    INVALID_PARAMETER = 4,
    INVALID_CLASS = 5,
    NOT_FOUND = 6,
    NOT_SUPPORTED = 7,
    CLASS_HAS_CHILDREN = 8,
    CLASS_HAS_INSTANCES = 9,
    INVALID_SUPERCLASS = 10,
    ALREADY_EXISTS = 11,
    NO_SUCH_PROPERTY = 12,
    TYPE_MISMATCH = 13,
    QUERY_LANGUAGE_NOT_SUPPORTED = 14,
    INVALID_QUERY = 15,
    METHOD_NOT_AVAILABLE = 16,
    METHOD_NOT_FOUND = 17,
    NAMESPACE_NOT_EMPTY = 20,
    INVALID_ENUMERATION_CONTEXT = 21,
    INVALID_OPERATION_TIMEOUT = 22,
    PULL_HAS_BEEN_ABANDONED = 23,
    PULL_CANNOT_BE_ABANDONED = 24,
    FILTERED_ENUMERATION_NOT_SUPPORTED = 25,
    CONTINUATION_ON_ERROR_NOT_SUPPORTED = 26,
    SERVER_LIMITS_EXCEEDED = 27,
    SERVER_IS_SHUTTING_DOWN = 28,
};
pub const MI_RESULT_OK = MI_Result.OK;
pub const MI_RESULT_FAILED = MI_Result.FAILED;
pub const MI_RESULT_ACCESS_DENIED = MI_Result.ACCESS_DENIED;
pub const MI_RESULT_INVALID_NAMESPACE = MI_Result.INVALID_NAMESPACE;
pub const MI_RESULT_INVALID_PARAMETER = MI_Result.INVALID_PARAMETER;
pub const MI_RESULT_INVALID_CLASS = MI_Result.INVALID_CLASS;
pub const MI_RESULT_NOT_FOUND = MI_Result.NOT_FOUND;
pub const MI_RESULT_NOT_SUPPORTED = MI_Result.NOT_SUPPORTED;
pub const MI_RESULT_CLASS_HAS_CHILDREN = MI_Result.CLASS_HAS_CHILDREN;
pub const MI_RESULT_CLASS_HAS_INSTANCES = MI_Result.CLASS_HAS_INSTANCES;
pub const MI_RESULT_INVALID_SUPERCLASS = MI_Result.INVALID_SUPERCLASS;
pub const MI_RESULT_ALREADY_EXISTS = MI_Result.ALREADY_EXISTS;
pub const MI_RESULT_NO_SUCH_PROPERTY = MI_Result.NO_SUCH_PROPERTY;
pub const MI_RESULT_TYPE_MISMATCH = MI_Result.TYPE_MISMATCH;
pub const MI_RESULT_QUERY_LANGUAGE_NOT_SUPPORTED = MI_Result.QUERY_LANGUAGE_NOT_SUPPORTED;
pub const MI_RESULT_INVALID_QUERY = MI_Result.INVALID_QUERY;
pub const MI_RESULT_METHOD_NOT_AVAILABLE = MI_Result.METHOD_NOT_AVAILABLE;
pub const MI_RESULT_METHOD_NOT_FOUND = MI_Result.METHOD_NOT_FOUND;
pub const MI_RESULT_NAMESPACE_NOT_EMPTY = MI_Result.NAMESPACE_NOT_EMPTY;
pub const MI_RESULT_INVALID_ENUMERATION_CONTEXT = MI_Result.INVALID_ENUMERATION_CONTEXT;
pub const MI_RESULT_INVALID_OPERATION_TIMEOUT = MI_Result.INVALID_OPERATION_TIMEOUT;
pub const MI_RESULT_PULL_HAS_BEEN_ABANDONED = MI_Result.PULL_HAS_BEEN_ABANDONED;
pub const MI_RESULT_PULL_CANNOT_BE_ABANDONED = MI_Result.PULL_CANNOT_BE_ABANDONED;
pub const MI_RESULT_FILTERED_ENUMERATION_NOT_SUPPORTED = MI_Result.FILTERED_ENUMERATION_NOT_SUPPORTED;
pub const MI_RESULT_CONTINUATION_ON_ERROR_NOT_SUPPORTED = MI_Result.CONTINUATION_ON_ERROR_NOT_SUPPORTED;
pub const MI_RESULT_SERVER_LIMITS_EXCEEDED = MI_Result.SERVER_LIMITS_EXCEEDED;
pub const MI_RESULT_SERVER_IS_SHUTTING_DOWN = MI_Result.SERVER_IS_SHUTTING_DOWN;

pub const MI_ErrorCategory = enum(i32) {
    NOT_SPECIFIED = 0,
    OPEN_ERROR = 1,
    CLOS_EERROR = 2,
    DEVICE_ERROR = 3,
    DEADLOCK_DETECTED = 4,
    INVALID_ARGUMENT = 5,
    INVALID_DATA = 6,
    INVALID_OPERATION = 7,
    INVALID_RESULT = 8,
    INVALID_TYPE = 9,
    METADATA_ERROR = 10,
    NOT_IMPLEMENTED = 11,
    NOT_INSTALLED = 12,
    OBJECT_NOT_FOUND = 13,
    OPERATION_STOPPED = 14,
    OPERATION_TIMEOUT = 15,
    SYNTAX_ERROR = 16,
    PARSER_ERROR = 17,
    ACCESS_DENIED = 18,
    RESOURCE_BUSY = 19,
    RESOURCE_EXISTS = 20,
    RESOURCE_UNAVAILABLE = 21,
    READ_ERROR = 22,
    WRITE_ERROR = 23,
    FROM_STDERR = 24,
    SECURITY_ERROR = 25,
    PROTOCOL_ERROR = 26,
    CONNECTION_ERROR = 27,
    AUTHENTICATION_ERROR = 28,
    LIMITS_EXCEEDED = 29,
    QUOTA_EXCEEDED = 30,
    NOT_ENABLED = 31,
};
pub const MI_ERRORCATEGORY_NOT_SPECIFIED = MI_ErrorCategory.NOT_SPECIFIED;
pub const MI_ERRORCATEGORY_OPEN_ERROR = MI_ErrorCategory.OPEN_ERROR;
pub const MI_ERRORCATEGORY_CLOS_EERROR = MI_ErrorCategory.CLOS_EERROR;
pub const MI_ERRORCATEGORY_DEVICE_ERROR = MI_ErrorCategory.DEVICE_ERROR;
pub const MI_ERRORCATEGORY_DEADLOCK_DETECTED = MI_ErrorCategory.DEADLOCK_DETECTED;
pub const MI_ERRORCATEGORY_INVALID_ARGUMENT = MI_ErrorCategory.INVALID_ARGUMENT;
pub const MI_ERRORCATEGORY_INVALID_DATA = MI_ErrorCategory.INVALID_DATA;
pub const MI_ERRORCATEGORY_INVALID_OPERATION = MI_ErrorCategory.INVALID_OPERATION;
pub const MI_ERRORCATEGORY_INVALID_RESULT = MI_ErrorCategory.INVALID_RESULT;
pub const MI_ERRORCATEGORY_INVALID_TYPE = MI_ErrorCategory.INVALID_TYPE;
pub const MI_ERRORCATEGORY_METADATA_ERROR = MI_ErrorCategory.METADATA_ERROR;
pub const MI_ERRORCATEGORY_NOT_IMPLEMENTED = MI_ErrorCategory.NOT_IMPLEMENTED;
pub const MI_ERRORCATEGORY_NOT_INSTALLED = MI_ErrorCategory.NOT_INSTALLED;
pub const MI_ERRORCATEGORY_OBJECT_NOT_FOUND = MI_ErrorCategory.OBJECT_NOT_FOUND;
pub const MI_ERRORCATEGORY_OPERATION_STOPPED = MI_ErrorCategory.OPERATION_STOPPED;
pub const MI_ERRORCATEGORY_OPERATION_TIMEOUT = MI_ErrorCategory.OPERATION_TIMEOUT;
pub const MI_ERRORCATEGORY_SYNTAX_ERROR = MI_ErrorCategory.SYNTAX_ERROR;
pub const MI_ERRORCATEGORY_PARSER_ERROR = MI_ErrorCategory.PARSER_ERROR;
pub const MI_ERRORCATEGORY_ACCESS_DENIED = MI_ErrorCategory.ACCESS_DENIED;
pub const MI_ERRORCATEGORY_RESOURCE_BUSY = MI_ErrorCategory.RESOURCE_BUSY;
pub const MI_ERRORCATEGORY_RESOURCE_EXISTS = MI_ErrorCategory.RESOURCE_EXISTS;
pub const MI_ERRORCATEGORY_RESOURCE_UNAVAILABLE = MI_ErrorCategory.RESOURCE_UNAVAILABLE;
pub const MI_ERRORCATEGORY_READ_ERROR = MI_ErrorCategory.READ_ERROR;
pub const MI_ERRORCATEGORY_WRITE_ERROR = MI_ErrorCategory.WRITE_ERROR;
pub const MI_ERRORCATEGORY_FROM_STDERR = MI_ErrorCategory.FROM_STDERR;
pub const MI_ERRORCATEGORY_SECURITY_ERROR = MI_ErrorCategory.SECURITY_ERROR;
pub const MI_ERRORCATEGORY_PROTOCOL_ERROR = MI_ErrorCategory.PROTOCOL_ERROR;
pub const MI_ERRORCATEGORY_CONNECTION_ERROR = MI_ErrorCategory.CONNECTION_ERROR;
pub const MI_ERRORCATEGORY_AUTHENTICATION_ERROR = MI_ErrorCategory.AUTHENTICATION_ERROR;
pub const MI_ERRORCATEGORY_LIMITS_EXCEEDED = MI_ErrorCategory.LIMITS_EXCEEDED;
pub const MI_ERRORCATEGORY_QUOTA_EXCEEDED = MI_ErrorCategory.QUOTA_EXCEEDED;
pub const MI_ERRORCATEGORY_NOT_ENABLED = MI_ErrorCategory.NOT_ENABLED;

pub const MI_PromptType = enum(i32) {
    NORMAL = 0,
    CRITICAL = 1,
};
pub const MI_PROMPTTYPE_NORMAL = MI_PromptType.NORMAL;
pub const MI_PROMPTTYPE_CRITICAL = MI_PromptType.CRITICAL;

pub const MI_CallbackMode = enum(i32) {
    REPORT = 0,
    INQUIRE = 1,
    IGNORE = 2,
};
pub const MI_CALLBACKMODE_REPORT = MI_CallbackMode.REPORT;
pub const MI_CALLBACKMODE_INQUIRE = MI_CallbackMode.INQUIRE;
pub const MI_CALLBACKMODE_IGNORE = MI_CallbackMode.IGNORE;

pub const MI_ProviderArchitecture = enum(i32) {
    @"32BIT" = 0,
    @"64BIT" = 1,
};
pub const MI_PROVIDER_ARCHITECTURE_32BIT = MI_ProviderArchitecture.@"32BIT";
pub const MI_PROVIDER_ARCHITECTURE_64BIT = MI_ProviderArchitecture.@"64BIT";

pub const MI_Type = enum(i32) {
    BOOLEAN = 0,
    UINT8 = 1,
    SINT8 = 2,
    UINT16 = 3,
    SINT16 = 4,
    UINT32 = 5,
    SINT32 = 6,
    UINT64 = 7,
    SINT64 = 8,
    REAL32 = 9,
    REAL64 = 10,
    CHAR16 = 11,
    DATETIME = 12,
    STRING = 13,
    REFERENCE = 14,
    INSTANCE = 15,
    BOOLEANA = 16,
    UINT8A = 17,
    SINT8A = 18,
    UINT16A = 19,
    SINT16A = 20,
    UINT32A = 21,
    SINT32A = 22,
    UINT64A = 23,
    SINT64A = 24,
    REAL32A = 25,
    REAL64A = 26,
    CHAR16A = 27,
    DATETIMEA = 28,
    STRINGA = 29,
    REFERENCEA = 30,
    INSTANCEA = 31,
    // ARRAY = 16, this enum value conflicts with BOOLEANA
};
pub const MI_BOOLEAN = MI_Type.BOOLEAN;
pub const MI_UINT8 = MI_Type.UINT8;
pub const MI_SINT8 = MI_Type.SINT8;
pub const MI_UINT16 = MI_Type.UINT16;
pub const MI_SINT16 = MI_Type.SINT16;
pub const MI_UINT32 = MI_Type.UINT32;
pub const MI_SINT32 = MI_Type.SINT32;
pub const MI_UINT64 = MI_Type.UINT64;
pub const MI_SINT64 = MI_Type.SINT64;
pub const MI_REAL32 = MI_Type.REAL32;
pub const MI_REAL64 = MI_Type.REAL64;
pub const MI_CHAR16 = MI_Type.CHAR16;
pub const MI_DATETIME = MI_Type.DATETIME;
pub const MI_STRING = MI_Type.STRING;
pub const MI_REFERENCE = MI_Type.REFERENCE;
pub const MI_INSTANCE = MI_Type.INSTANCE;
pub const MI_BOOLEANA = MI_Type.BOOLEANA;
pub const MI_UINT8A = MI_Type.UINT8A;
pub const MI_SINT8A = MI_Type.SINT8A;
pub const MI_UINT16A = MI_Type.UINT16A;
pub const MI_SINT16A = MI_Type.SINT16A;
pub const MI_UINT32A = MI_Type.UINT32A;
pub const MI_SINT32A = MI_Type.SINT32A;
pub const MI_UINT64A = MI_Type.UINT64A;
pub const MI_SINT64A = MI_Type.SINT64A;
pub const MI_REAL32A = MI_Type.REAL32A;
pub const MI_REAL64A = MI_Type.REAL64A;
pub const MI_CHAR16A = MI_Type.CHAR16A;
pub const MI_DATETIMEA = MI_Type.DATETIMEA;
pub const MI_STRINGA = MI_Type.STRINGA;
pub const MI_REFERENCEA = MI_Type.REFERENCEA;
pub const MI_INSTANCEA = MI_Type.INSTANCEA;
pub const MI_ARRAY = MI_Type.BOOLEANA;

pub const MI_Timestamp = extern struct {
    year: u32,
    month: u32,
    day: u32,
    hour: u32,
    minute: u32,
    second: u32,
    microseconds: u32,
    utc: i32,
};

pub const MI_Interval = extern struct {
    days: u32,
    hours: u32,
    minutes: u32,
    seconds: u32,
    microseconds: u32,
    __padding1: u32,
    __padding2: u32,
    __padding3: u32,
};

pub const MI_Datetime = extern struct {
    isTimestamp: u32,
    u: extern union {
        timestamp: MI_Timestamp,
        interval: MI_Interval,
    },
};

pub const MI_BooleanA = extern struct {
    data: ?*u8,
    size: u32,
};

pub const MI_Uint8A = extern struct {
    data: ?*u8,
    size: u32,
};

pub const MI_Sint8A = extern struct {
    data: ?*i8,
    size: u32,
};

pub const MI_Uint16A = extern struct {
    data: ?*u16,
    size: u32,
};

pub const MI_Sint16A = extern struct {
    data: ?*i16,
    size: u32,
};

pub const MI_Uint32A = extern struct {
    data: ?*u32,
    size: u32,
};

pub const MI_Sint32A = extern struct {
    data: ?*i32,
    size: u32,
};

pub const MI_Uint64A = extern struct {
    data: ?*u64,
    size: u32,
};

pub const MI_Sint64A = extern struct {
    data: ?*i64,
    size: u32,
};

pub const MI_Real32A = extern struct {
    data: ?*f32,
    size: u32,
};

pub const MI_Real64A = extern struct {
    data: ?*f64,
    size: u32,
};

pub const MI_Char16A = extern struct {
    data: ?*u16,
    size: u32,
};

pub const MI_DatetimeA = extern struct {
    data: ?*MI_Datetime,
    size: u32,
};

pub const MI_StringA = extern struct {
    data: ?*?*u16,
    size: u32,
};

pub const MI_ReferenceA = extern struct {
    data: ?*?*MI_Instance,
    size: u32,
};

pub const MI_InstanceA = extern struct {
    data: ?*?*MI_Instance,
    size: u32,
};

pub const MI_Array = extern struct {
    data: ?*anyopaque,
    size: u32,
};

pub const MI_ConstBooleanA = extern struct {
    data: ?*const u8,
    size: u32,
};

pub const MI_ConstUint8A = extern struct {
    data: ?*const u8,
    size: u32,
};

pub const MI_ConstSint8A = extern struct {
    data: ?*const i8,
    size: u32,
};

pub const MI_ConstUint16A = extern struct {
    data: ?*const u16,
    size: u32,
};

pub const MI_ConstSint16A = extern struct {
    data: ?*const i16,
    size: u32,
};

pub const MI_ConstUint32A = extern struct {
    data: ?*const u32,
    size: u32,
};

pub const MI_ConstSint32A = extern struct {
    data: ?*const i32,
    size: u32,
};

pub const MI_ConstUint64A = extern struct {
    data: ?*const u64,
    size: u32,
};

pub const MI_ConstSint64A = extern struct {
    data: ?*const i64,
    size: u32,
};

pub const MI_ConstReal32A = extern struct {
    data: ?*const f32,
    size: u32,
};

pub const MI_ConstReal64A = extern struct {
    data: ?*const f64,
    size: u32,
};

pub const MI_ConstChar16A = extern struct {
    data: ?*const u16,
    size: u32,
};

pub const MI_ConstDatetimeA = extern struct {
    data: ?*const MI_Datetime,
    size: u32,
};

pub const MI_ConstStringA = extern struct {
    data: ?*const ?*u16,
    size: u32,
};

pub const MI_ConstReferenceA = extern struct {
    data: ?*const ?*MI_Instance,
    size: u32,
};

pub const MI_ConstInstanceA = extern struct {
    data: ?*const ?*MI_Instance,
    size: u32,
};

pub const MI_Value = extern union {
    boolean: u8,
    uint8: u8,
    sint8: i8,
    uint16: u16,
    sint16: i16,
    uint32: u32,
    sint32: i32,
    uint64: u64,
    sint64: i64,
    real32: f32,
    real64: f64,
    char16: u16,
    datetime: MI_Datetime,
    string: ?*u16,
    instance: ?*MI_Instance,
    reference: ?*MI_Instance,
    booleana: MI_BooleanA,
    uint8a: MI_Uint8A,
    sint8a: MI_Sint8A,
    uint16a: MI_Uint16A,
    sint16a: MI_Sint16A,
    uint32a: MI_Uint32A,
    sint32a: MI_Sint32A,
    uint64a: MI_Uint64A,
    sint64a: MI_Sint64A,
    real32a: MI_Real32A,
    real64a: MI_Real64A,
    char16a: MI_Char16A,
    datetimea: MI_DatetimeA,
    stringa: MI_StringA,
    referencea: MI_ReferenceA,
    instancea: MI_InstanceA,
    array: MI_Array,
};

pub const MI_BooleanField = extern struct {
    value: u8,
    exists: u8,
    flags: u8,
};

pub const MI_Sint8Field = extern struct {
    value: i8,
    exists: u8,
    flags: u8,
};

pub const MI_Uint8Field = extern struct {
    value: u8,
    exists: u8,
    flags: u8,
};

pub const MI_Sint16Field = extern struct {
    value: i16,
    exists: u8,
    flags: u8,
};

pub const MI_Uint16Field = extern struct {
    value: u16,
    exists: u8,
    flags: u8,
};

pub const MI_Sint32Field = extern struct {
    value: i32,
    exists: u8,
    flags: u8,
};

pub const MI_Uint32Field = extern struct {
    value: u32,
    exists: u8,
    flags: u8,
};

pub const MI_Sint64Field = extern struct {
    value: i64,
    exists: u8,
    flags: u8,
};

pub const MI_Uint64Field = extern struct {
    value: u64,
    exists: u8,
    flags: u8,
};

pub const MI_Real32Field = extern struct {
    value: f32,
    exists: u8,
    flags: u8,
};

pub const MI_Real64Field = extern struct {
    value: f64,
    exists: u8,
    flags: u8,
};

pub const MI_Char16Field = extern struct {
    value: u16,
    exists: u8,
    flags: u8,
};

pub const MI_DatetimeField = extern struct {
    value: MI_Datetime,
    exists: u8,
    flags: u8,
};

pub const MI_StringField = extern struct {
    value: ?*u16,
    exists: u8,
    flags: u8,
};

pub const MI_ReferenceField = extern struct {
    value: ?*MI_Instance,
    exists: u8,
    flags: u8,
};

pub const MI_InstanceField = extern struct {
    value: ?*MI_Instance,
    exists: u8,
    flags: u8,
};

pub const MI_BooleanAField = extern struct {
    value: MI_BooleanA,
    exists: u8,
    flags: u8,
};

pub const MI_Uint8AField = extern struct {
    value: MI_Uint8A,
    exists: u8,
    flags: u8,
};

pub const MI_Sint8AField = extern struct {
    value: MI_Sint8A,
    exists: u8,
    flags: u8,
};

pub const MI_Uint16AField = extern struct {
    value: MI_Uint16A,
    exists: u8,
    flags: u8,
};

pub const MI_Sint16AField = extern struct {
    value: MI_Sint16A,
    exists: u8,
    flags: u8,
};

pub const MI_Uint32AField = extern struct {
    value: MI_Uint32A,
    exists: u8,
    flags: u8,
};

pub const MI_Sint32AField = extern struct {
    value: MI_Sint32A,
    exists: u8,
    flags: u8,
};

pub const MI_Uint64AField = extern struct {
    value: MI_Uint64A,
    exists: u8,
    flags: u8,
};

pub const MI_Sint64AField = extern struct {
    value: MI_Sint64A,
    exists: u8,
    flags: u8,
};

pub const MI_Real32AField = extern struct {
    value: MI_Real32A,
    exists: u8,
    flags: u8,
};

pub const MI_Real64AField = extern struct {
    value: MI_Real64A,
    exists: u8,
    flags: u8,
};

pub const MI_Char16AField = extern struct {
    value: MI_Char16A,
    exists: u8,
    flags: u8,
};

pub const MI_DatetimeAField = extern struct {
    value: MI_DatetimeA,
    exists: u8,
    flags: u8,
};

pub const MI_StringAField = extern struct {
    value: MI_StringA,
    exists: u8,
    flags: u8,
};

pub const MI_ReferenceAField = extern struct {
    value: MI_ReferenceA,
    exists: u8,
    flags: u8,
};

pub const MI_InstanceAField = extern struct {
    value: MI_InstanceA,
    exists: u8,
    flags: u8,
};

pub const MI_ArrayField = extern struct {
    value: MI_Array,
    exists: u8,
    flags: u8,
};

pub const MI_ConstBooleanField = extern struct {
    value: u8,
    exists: u8,
    flags: u8,
};

pub const MI_ConstSint8Field = extern struct {
    value: i8,
    exists: u8,
    flags: u8,
};

pub const MI_ConstUint8Field = extern struct {
    value: u8,
    exists: u8,
    flags: u8,
};

pub const MI_ConstSint16Field = extern struct {
    value: i16,
    exists: u8,
    flags: u8,
};

pub const MI_ConstUint16Field = extern struct {
    value: u16,
    exists: u8,
    flags: u8,
};

pub const MI_ConstSint32Field = extern struct {
    value: i32,
    exists: u8,
    flags: u8,
};

pub const MI_ConstUint32Field = extern struct {
    value: u32,
    exists: u8,
    flags: u8,
};

pub const MI_ConstSint64Field = extern struct {
    value: i64,
    exists: u8,
    flags: u8,
};

pub const MI_ConstUint64Field = extern struct {
    value: u64,
    exists: u8,
    flags: u8,
};

pub const MI_ConstReal32Field = extern struct {
    value: f32,
    exists: u8,
    flags: u8,
};

pub const MI_ConstReal64Field = extern struct {
    value: f64,
    exists: u8,
    flags: u8,
};

pub const MI_ConstChar16Field = extern struct {
    value: u16,
    exists: u8,
    flags: u8,
};

pub const MI_ConstDatetimeField = extern struct {
    value: MI_Datetime,
    exists: u8,
    flags: u8,
};

pub const MI_ConstStringField = extern struct {
    value: ?*const u16,
    exists: u8,
    flags: u8,
};

pub const MI_ConstReferenceField = extern struct {
    value: ?*const MI_Instance,
    exists: u8,
    flags: u8,
};

pub const MI_ConstInstanceField = extern struct {
    value: ?*const MI_Instance,
    exists: u8,
    flags: u8,
};

pub const MI_ConstBooleanAField = extern struct {
    value: MI_ConstBooleanA,
    exists: u8,
    flags: u8,
};

pub const MI_ConstUint8AField = extern struct {
    value: MI_ConstUint8A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstSint8AField = extern struct {
    value: MI_ConstSint8A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstUint16AField = extern struct {
    value: MI_ConstUint16A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstSint16AField = extern struct {
    value: MI_ConstSint16A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstUint32AField = extern struct {
    value: MI_ConstUint32A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstSint32AField = extern struct {
    value: MI_ConstSint32A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstUint64AField = extern struct {
    value: MI_ConstUint64A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstSint64AField = extern struct {
    value: MI_ConstSint64A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstReal32AField = extern struct {
    value: MI_ConstReal32A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstReal64AField = extern struct {
    value: MI_ConstReal64A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstChar16AField = extern struct {
    value: MI_ConstChar16A,
    exists: u8,
    flags: u8,
};

pub const MI_ConstDatetimeAField = extern struct {
    value: MI_ConstDatetimeA,
    exists: u8,
    flags: u8,
};

pub const MI_ConstStringAField = extern struct {
    value: MI_ConstStringA,
    exists: u8,
    flags: u8,
};

pub const MI_ConstReferenceAField = extern struct {
    value: MI_ConstReferenceA,
    exists: u8,
    flags: u8,
};

pub const MI_ConstInstanceAField = extern struct {
    value: MI_ConstInstanceA,
    exists: u8,
    flags: u8,
};

pub const MI_ServerFT = extern struct {
    GetVersion: isize,
    GetSystemName: isize,
};

pub const MI_Server = extern struct {
    serverFT: ?*const MI_ServerFT,
    contextFT: ?*const MI_ContextFT,
    instanceFT: ?*const MI_InstanceFT,
    propertySetFT: ?*const MI_PropertySetFT,
    filterFT: ?*const MI_FilterFT,
};

pub const MI_FilterFT = extern struct {
    Evaluate: isize,
    GetExpression: isize,
};

pub const MI_Filter = extern struct {
    ft: ?*const MI_FilterFT,
    reserved: [3]isize,
};

pub const MI_PropertySetFT = extern struct {
    GetElementCount: isize,
    ContainsElement: isize,
    AddElement: isize,
    GetElementAt: isize,
    Clear: isize,
    Destruct: isize,
    Delete: isize,
    Clone: isize,
};

pub const MI_PropertySet = extern struct {
    ft: ?*const MI_PropertySetFT,
    reserved: [3]isize,
};

pub const MI_ObjectDecl = extern struct {
    flags: u32,
    code: u32,
    name: ?*const u16,
    qualifiers: ?*const ?*MI_Qualifier,
    numQualifiers: u32,
    properties: ?*const ?*MI_PropertyDecl,
    numProperties: u32,
    size: u32,
};

pub const MI_ClassDecl = extern struct {
    flags: u32,
    code: u32,
    name: ?*const u16,
    qualifiers: ?*const ?*MI_Qualifier,
    numQualifiers: u32,
    properties: ?*const ?*MI_PropertyDecl,
    numProperties: u32,
    size: u32,
    superClass: ?*const u16,
    superClassDecl: ?*const MI_ClassDecl,
    methods: ?*const ?*MI_MethodDecl,
    numMethods: u32,
    schema: ?*const MI_SchemaDecl,
    providerFT: ?*const MI_ProviderFT,
    owningClass: ?*MI_Class,
};

pub const MI_FeatureDecl = extern struct {
    flags: u32,
    code: u32,
    name: ?*const u16,
    qualifiers: ?*const ?*MI_Qualifier,
    numQualifiers: u32,
};

pub const MI_ParameterDecl = extern struct {
    flags: u32,
    code: u32,
    name: ?*const u16,
    qualifiers: ?*const ?*MI_Qualifier,
    numQualifiers: u32,
    type: u32,
    className: ?*const u16,
    subscript: u32,
    offset: u32,
};

pub const MI_PropertyDecl = extern struct {
    flags: u32,
    code: u32,
    name: ?*const u16,
    qualifiers: ?*const ?*MI_Qualifier,
    numQualifiers: u32,
    type: u32,
    className: ?*const u16,
    subscript: u32,
    offset: u32,
    origin: ?*const u16,
    propagator: ?*const u16,
    value: ?*const anyopaque,
};

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const MI_MethodDecl_Invoke = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

pub const MI_MethodDecl = extern struct {
    flags: u32,
    code: u32,
    name: ?*const u16,
    qualifiers: ?*const ?*MI_Qualifier,
    numQualifiers: u32,
    parameters: ?*const ?*MI_ParameterDecl,
    numParameters: u32,
    size: u32,
    returnType: u32,
    origin: ?*const u16,
    propagator: ?*const u16,
    schema: ?*const MI_SchemaDecl,
    function: ?MI_MethodDecl_Invoke,
};

pub const MI_QualifierDecl = extern struct {
    name: ?*const u16,
    type: u32,
    scope: u32,
    flavor: u32,
    subscript: u32,
    value: ?*const anyopaque,
};

pub const MI_Qualifier = extern struct {
    name: ?*const u16,
    type: u32,
    flavor: u32,
    value: ?*const anyopaque,
};

pub const MI_SchemaDecl = extern struct {
    qualifierDecls: ?*const ?*MI_QualifierDecl,
    numQualifierDecls: u32,
    classDecls: ?*const ?*MI_ClassDecl,
    numClassDecls: u32,
};

pub const MI_Module_Self = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const MI_ProviderFT_Load = *const fn (
    self: ?*?*anyopaque,
    self_module: ?*MI_Module_Self,
    context: ?*MI_Context,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_ProviderFT_Unload = *const fn (
    self: ?*anyopaque,
    context: ?*MI_Context,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const MI_ProviderFT_GetInstance = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

pub const MI_ProviderFT_EnumerateInstances = *const fn (
    self: ?*anyopaque,
    context: ?*MI_Context,
    name_space: ?*const u16,
    class_name: ?*const u16,
    property_set: ?*const MI_PropertySet,
    keys_only: u8,
    filter: ?*const MI_Filter,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const MI_ProviderFT_CreateInstance = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const MI_ProviderFT_ModifyInstance = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const MI_ProviderFT_DeleteInstance = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const MI_ProviderFT_AssociatorInstances = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const MI_ProviderFT_ReferenceInstances = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

pub const MI_ProviderFT_EnableIndications = *const fn (
    self: ?*anyopaque,
    indications_context: ?*MI_Context,
    name_space: ?*const u16,
    class_name: ?*const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_ProviderFT_DisableIndications = *const fn (
    self: ?*anyopaque,
    indications_context: ?*MI_Context,
    name_space: ?*const u16,
    class_name: ?*const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_ProviderFT_Subscribe = *const fn (
    self: ?*anyopaque,
    context: ?*MI_Context,
    name_space: ?*const u16,
    class_name: ?*const u16,
    filter: ?*const MI_Filter,
    bookmark: ?*const u16,
    subscription_i_d: u64,
    subscription_self: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_ProviderFT_Unsubscribe = *const fn (
    self: ?*anyopaque,
    context: ?*MI_Context,
    name_space: ?*const u16,
    class_name: ?*const u16,
    subscription_i_d: u64,
    subscription_self: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const MI_ProviderFT_Invoke = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

pub const MI_ProviderFT = extern struct {
    Load: ?MI_ProviderFT_Load,
    Unload: ?MI_ProviderFT_Unload,
    GetInstance: ?MI_ProviderFT_GetInstance,
    EnumerateInstances: ?MI_ProviderFT_EnumerateInstances,
    CreateInstance: ?MI_ProviderFT_CreateInstance,
    ModifyInstance: ?MI_ProviderFT_ModifyInstance,
    DeleteInstance: ?MI_ProviderFT_DeleteInstance,
    AssociatorInstances: ?MI_ProviderFT_AssociatorInstances,
    ReferenceInstances: ?MI_ProviderFT_ReferenceInstances,
    EnableIndications: ?MI_ProviderFT_EnableIndications,
    DisableIndications: ?MI_ProviderFT_DisableIndications,
    Subscribe: ?MI_ProviderFT_Subscribe,
    Unsubscribe: ?MI_ProviderFT_Unsubscribe,
    Invoke: ?MI_ProviderFT_Invoke,
};

pub const MI_Module_Load = *const fn (
    self: ?*?*MI_Module_Self,
    context: ?*MI_Context,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_Module_Unload = *const fn (
    self: ?*MI_Module_Self,
    context: ?*MI_Context,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_Module = extern struct {
    version: u32,
    generatorVersion: u32,
    flags: u32,
    charSize: u32,
    schemaDecl: ?*MI_SchemaDecl,
    Load: ?MI_Module_Load,
    Unload: ?MI_Module_Unload,
    dynamicProviderFT: ?*const MI_ProviderFT,
};

pub const MI_InstanceFT = extern struct {
    Clone: isize,
    Destruct: isize,
    Delete: isize,
    IsA: isize,
    GetClassNameA: isize,
    SetNameSpace: isize,
    GetNameSpace: isize,
    GetElementCount: isize,
    AddElement: isize,
    SetElement: isize,
    SetElementAt: isize,
    GetElement: isize,
    GetElementAt: isize,
    ClearElement: isize,
    ClearElementAt: isize,
    GetServerName: isize,
    SetServerName: isize,
    GetClass: isize,
};

pub const MI_InstanceExFT = extern struct {
    parent: MI_InstanceFT,
    Normalize: isize,
};

pub const MI_Instance = extern struct {
    ft: ?*const MI_InstanceFT,
    classDecl: ?*const MI_ClassDecl,
    serverName: ?*const u16,
    nameSpace: ?*const u16,
    reserved: [4]isize,
};

pub const MI_LocaleType = enum(i32) {
    REQUESTED_UI = 0,
    REQUESTED_DATA = 1,
    CLOSEST_UI = 2,
    CLOSEST_DATA = 3,
};
pub const MI_LOCALE_TYPE_REQUESTED_UI = MI_LocaleType.REQUESTED_UI;
pub const MI_LOCALE_TYPE_REQUESTED_DATA = MI_LocaleType.REQUESTED_DATA;
pub const MI_LOCALE_TYPE_CLOSEST_UI = MI_LocaleType.CLOSEST_UI;
pub const MI_LOCALE_TYPE_CLOSEST_DATA = MI_LocaleType.CLOSEST_DATA;

pub const MI_CancellationReason = enum(i32) {
    NONE = 0,
    TIMEOUT = 1,
    SHUTDOWN = 2,
    SERVICESTOP = 3,
};
pub const MI_REASON_NONE = MI_CancellationReason.NONE;
pub const MI_REASON_TIMEOUT = MI_CancellationReason.TIMEOUT;
pub const MI_REASON_SHUTDOWN = MI_CancellationReason.SHUTDOWN;
pub const MI_REASON_SERVICESTOP = MI_CancellationReason.SERVICESTOP;

pub const MI_CancelCallback = *const fn (
    reason: MI_CancellationReason,
    callback_data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_ContextFT = extern struct {
    PostResult: isize,
    PostInstance: isize,
    PostIndication: isize,
    ConstructInstance: isize,
    ConstructParameters: isize,
    NewInstance: isize,
    NewDynamicInstance: isize,
    NewParameters: isize,
    Canceled: isize,
    GetLocale: isize,
    RegisterCancel: isize,
    RequestUnload: isize,
    RefuseUnload: isize,
    GetLocalSession: isize,
    SetStringOption: isize,
    GetStringOption: isize,
    GetNumberOption: isize,
    GetCustomOption: isize,
    GetCustomOptionCount: isize,
    GetCustomOptionAt: isize,
    WriteMessage: isize,
    WriteProgress: isize,
    WriteStreamParameter: isize,
    WriteCimError: isize,
    PromptUser: isize,
    ShouldProcess: isize,
    ShouldContinue: isize,
    PostError: isize,
    PostCimError: isize,
    WriteError: isize,
};

pub const MI_Context = extern struct {
    ft: ?*const MI_ContextFT,
    reserved: [3]isize,
};

pub const MI_MainFunction = *const fn (
    server: ?*MI_Server,
) callconv(@import("std").os.windows.WINAPI) ?*MI_Module;

pub const MI_QualifierSetFT = extern struct {
    GetQualifierCount: isize,
    GetQualifierAt: isize,
    GetQualifier: isize,
};

pub const MI_QualifierSet = extern struct {
    reserved1: u64,
    reserved2: isize,
    ft: ?*const MI_QualifierSetFT,
};

pub const MI_ParameterSetFT = extern struct {
    GetMethodReturnType: isize,
    GetParameterCount: isize,
    GetParameterAt: isize,
    GetParameter: isize,
};

pub const MI_ParameterSet = extern struct {
    reserved1: u64,
    reserved2: isize,
    ft: ?*const MI_ParameterSetFT,
};

pub const MI_ClassFT = extern struct {
    GetClassNameA: isize,
    GetNameSpace: isize,
    GetServerName: isize,
    GetElementCount: isize,
    GetElement: isize,
    GetElementAt: isize,
    GetClassQualifierSet: isize,
    GetMethodCount: isize,
    GetMethodAt: isize,
    GetMethod: isize,
    GetParentClassName: isize,
    GetParentClass: isize,
    Delete: isize,
    Clone: isize,
};

pub const MI_Class = extern struct {
    ft: ?*const MI_ClassFT,
    classDecl: ?*const MI_ClassDecl,
    namespaceName: ?*const u16,
    serverName: ?*const u16,
    reserved: [4]isize,
};

pub const MI_OperationCallback_ResponseType = enum(i32) {
    No = 0,
    Yes = 1,
    NoToAll = 2,
    YesToAll = 3,
};
pub const MI_OperationCallback_ResponseType_No = MI_OperationCallback_ResponseType.No;
pub const MI_OperationCallback_ResponseType_Yes = MI_OperationCallback_ResponseType.Yes;
pub const MI_OperationCallback_ResponseType_NoToAll = MI_OperationCallback_ResponseType.NoToAll;
pub const MI_OperationCallback_ResponseType_YesToAll = MI_OperationCallback_ResponseType.YesToAll;

pub const MI_OperationCallback_PromptUser = *const fn (
    operation: ?*MI_Operation,
    callback_context: ?*anyopaque,
    message: ?*const u16,
    prompt_type: MI_PromptType,
    prompt_user_result: isize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_OperationCallback_WriteError = *const fn (
    operation: ?*MI_Operation,
    callback_context: ?*anyopaque,
    instance: ?*MI_Instance,
    write_error_result: isize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_OperationCallback_WriteMessage = *const fn (
    operation: ?*MI_Operation,
    callback_context: ?*anyopaque,
    channel: u32,
    message: ?*const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_OperationCallback_WriteProgress = *const fn (
    operation: ?*MI_Operation,
    callback_context: ?*anyopaque,
    activity: ?*const u16,
    current_operation: ?*const u16,
    status_description: ?*const u16,
    percentage_complete: u32,
    seconds_remaining: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_OperationCallback_Instance = *const fn (
    operation: ?*MI_Operation,
    callback_context: ?*anyopaque,
    instance: ?*const MI_Instance,
    more_results: u8,
    result_code: MI_Result,
    error_string: ?*const u16,
    error_details: ?*const MI_Instance,
    result_acknowledgement: isize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_OperationCallback_StreamedParameter = *const fn (
    operation: ?*MI_Operation,
    callback_context: ?*anyopaque,
    parameter_name: ?*const u16,
    result_type: MI_Type,
    result: ?*const MI_Value,
    result_acknowledgement: isize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_OperationCallback_Indication = *const fn (
    operation: ?*MI_Operation,
    callback_context: ?*anyopaque,
    instance: ?*const MI_Instance,
    bookmark: ?*const u16,
    machine_i_d: ?*const u16,
    more_results: u8,
    result_code: MI_Result,
    error_string: ?*const u16,
    error_details: ?*const MI_Instance,
    result_acknowledgement: isize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_OperationCallback_Class = *const fn (
    operation: ?*MI_Operation,
    callback_context: ?*anyopaque,
    class_result: ?*const MI_Class,
    more_results: u8,
    result_code: MI_Result,
    error_string: ?*const u16,
    error_details: ?*const MI_Instance,
    result_acknowledgement: isize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const MI_OperationCallbacks = extern struct {
    callbackContext: ?*anyopaque,
    promptUser: ?MI_OperationCallback_PromptUser,
    writeError: ?MI_OperationCallback_WriteError,
    writeMessage: ?MI_OperationCallback_WriteMessage,
    writeProgress: ?MI_OperationCallback_WriteProgress,
    instanceResult: ?MI_OperationCallback_Instance,
    indicationResult: ?MI_OperationCallback_Indication,
    classResult: ?MI_OperationCallback_Class,
    streamedParameterResult: ?MI_OperationCallback_StreamedParameter,
};

pub const MI_SessionCallbacks = extern struct {
    callbackContext: ?*anyopaque,
    writeMessage: isize,
    writeError: isize,
};

pub const MI_UsernamePasswordCreds = extern struct {
    domain: ?*const u16,
    username: ?*const u16,
    password: ?*const u16,
};

pub const MI_UserCredentials = extern struct {
    authenticationType: ?*const u16,
    credentials: extern union {
        usernamePassword: MI_UsernamePasswordCreds,
        certificateThumbprint: ?*const u16,
    },
};

pub const MI_SubscriptionDeliveryType = enum(i32) {
    ll = 1,
    sh = 2,
};
pub const MI_SubscriptionDeliveryType_Pull = MI_SubscriptionDeliveryType.ll;
pub const MI_SubscriptionDeliveryType_Push = MI_SubscriptionDeliveryType.sh;

pub const MI_SubscriptionDeliveryOptionsFT = extern struct {
    SetString: isize,
    SetNumber: isize,
    SetDateTime: isize,
    SetInterval: isize,
    AddCredentials: isize,
    Delete: isize,
    GetString: isize,
    GetNumber: isize,
    GetDateTime: isize,
    GetInterval: isize,
    GetOptionCount: isize,
    GetOptionAt: isize,
    GetOption: isize,
    GetCredentialsCount: isize,
    GetCredentialsAt: isize,
    GetCredentialsPasswordAt: isize,
    Clone: isize,
};

pub const MI_SubscriptionDeliveryOptions = extern struct {
    reserved1: u64,
    reserved2: isize,
    ft: ?*const MI_SubscriptionDeliveryOptionsFT,
};

pub const MI_Serializer = extern struct {
    reserved1: u64,
    reserved2: isize,
};

pub const MI_Deserializer = extern struct {
    reserved1: u64,
    reserved2: isize,
};

pub const MI_SerializerFT = extern struct {
    Close: isize,
    SerializeClass: isize,
    SerializeInstance: isize,
};

pub const MI_Deserializer_ClassObjectNeeded = *const fn (
    context: ?*anyopaque,
    server_name: ?*const u16,
    namespace_name: ?*const u16,
    class_name: ?*const u16,
    requested_class_object: ?*?*MI_Class,
) callconv(@import("std").os.windows.WINAPI) MI_Result;

pub const MI_DeserializerFT = extern struct {
    Close: isize,
    DeserializeClass: isize,
    Class_GetClassName: isize,
    Class_GetParentClassName: isize,
    DeserializeInstance: isize,
    Instance_GetClassName: isize,
};

pub const MI_ApplicationFT = extern struct {
    Close: isize,
    NewSession: isize,
    NewHostedProvider: isize,
    NewInstance: isize,
    NewDestinationOptions: isize,
    NewOperationOptions: isize,
    NewSubscriptionDeliveryOptions: isize,
    NewSerializer: isize,
    NewDeserializer: isize,
    NewInstanceFromClass: isize,
    NewClass: isize,
};

pub const MI_HostedProviderFT = extern struct {
    Close: isize,
    GetApplication: isize,
};

pub const MI_SessionFT = extern struct {
    Close: isize,
    GetApplication: isize,
    GetInstance: isize,
    ModifyInstance: isize,
    CreateInstance: isize,
    DeleteInstance: isize,
    Invoke: isize,
    EnumerateInstances: isize,
    QueryInstances: isize,
    AssociatorInstances: isize,
    ReferenceInstances: isize,
    Subscribe: isize,
    GetClass: isize,
    EnumerateClasses: isize,
    TestConnection: isize,
};

pub const MI_OperationFT = extern struct {
    Close: isize,
    Cancel: isize,
    GetSession: isize,
    GetInstance: isize,
    GetIndication: isize,
    GetClass: isize,
};

pub const MI_DestinationOptionsFT = extern struct {
    Delete: isize,
    SetString: isize,
    SetNumber: isize,
    AddCredentials: isize,
    GetString: isize,
    GetNumber: isize,
    GetOptionCount: isize,
    GetOptionAt: isize,
    GetOption: isize,
    GetCredentialsCount: isize,
    GetCredentialsAt: isize,
    GetCredentialsPasswordAt: isize,
    Clone: isize,
    SetInterval: isize,
    GetInterval: isize,
};

pub const MI_OperationOptionsFT = extern struct {
    Delete: isize,
    SetString: isize,
    SetNumber: isize,
    SetCustomOption: isize,
    GetString: isize,
    GetNumber: isize,
    GetOptionCount: isize,
    GetOptionAt: isize,
    GetOption: isize,
    GetEnabledChannels: isize,
    Clone: isize,
    SetInterval: isize,
    GetInterval: isize,
};

pub const MI_Application = extern struct {
    reserved1: u64,
    reserved2: isize,
    ft: ?*const MI_ApplicationFT,
};

pub const MI_Session = extern struct {
    reserved1: u64,
    reserved2: isize,
    ft: ?*const MI_SessionFT,
};

pub const MI_Operation = extern struct {
    reserved1: u64,
    reserved2: isize,
    ft: ?*const MI_OperationFT,
};

pub const MI_HostedProvider = extern struct {
    reserved1: u64,
    reserved2: isize,
    ft: ?*const MI_HostedProviderFT,
};

pub const MI_DestinationOptions = extern struct {
    reserved1: u64,
    reserved2: isize,
    ft: ?*const MI_DestinationOptionsFT,
};

pub const MI_OperationOptions = extern struct {
    reserved1: u64,
    reserved2: isize,
    ft: ?*const MI_OperationOptionsFT,
};

pub const MI_UtilitiesFT = extern struct {
    MapErrorToMiErrorCategory: isize,
    CimErrorFromErrorCode: isize,
};

pub const MI_ClientFT_V1 = extern struct {
    applicationFT: ?*const MI_ApplicationFT,
    sessionFT: ?*const MI_SessionFT,
    operationFT: ?*const MI_OperationFT,
    hostedProviderFT: ?*const MI_HostedProviderFT,
    serializerFT: ?*const MI_SerializerFT,
    deserializerFT: ?*const MI_DeserializerFT,
    subscribeDeliveryOptionsFT: ?*const MI_SubscriptionDeliveryOptionsFT,
    destinationOptionsFT: ?*const MI_DestinationOptionsFT,
    operationOptionsFT: ?*const MI_OperationOptionsFT,
    utilitiesFT: ?*const MI_UtilitiesFT,
};

pub const MI_DestinationOptions_ImpersonationType = enum(i32) {
    Default = 0,
    None = 1,
    Identify = 2,
    Impersonate = 3,
    Delegate = 4,
};
pub const MI_DestinationOptions_ImpersonationType_Default = MI_DestinationOptions_ImpersonationType.Default;
pub const MI_DestinationOptions_ImpersonationType_None = MI_DestinationOptions_ImpersonationType.None;
pub const MI_DestinationOptions_ImpersonationType_Identify = MI_DestinationOptions_ImpersonationType.Identify;
pub const MI_DestinationOptions_ImpersonationType_Impersonate = MI_DestinationOptions_ImpersonationType.Impersonate;
pub const MI_DestinationOptions_ImpersonationType_Delegate = MI_DestinationOptions_ImpersonationType.Delegate;

const CLSID_WbemDefPath_Value = Guid.initString("cf4cc405-e2c5-4ddd-b3ce-5e7582d8c9fa");
pub const CLSID_WbemDefPath = &CLSID_WbemDefPath_Value;

const CLSID_WbemQuery_Value = Guid.initString("eac8a024-21e2-4523-ad73-a71a0aa2f56a");
pub const CLSID_WbemQuery = &CLSID_WbemQuery_Value;

pub const WBEM_PATH_STATUS_FLAG = enum(i32) {
    ANON_LOCAL_MACHINE = 1,
    HAS_MACHINE_NAME = 2,
    IS_CLASS_REF = 4,
    IS_INST_REF = 8,
    HAS_SUBSCOPES = 16,
    IS_COMPOUND = 32,
    HAS_V2_REF_PATHS = 64,
    HAS_IMPLIED_KEY = 128,
    CONTAINS_SINGLETON = 256,
    V1_COMPLIANT = 512,
    V2_COMPLIANT = 1024,
    CIM_COMPLIANT = 2048,
    IS_SINGLETON = 4096,
    IS_PARENT = 8192,
    SERVER_NAMESPACE_ONLY = 16384,
    NATIVE_PATH = 32768,
    WMI_PATH = 65536,
    PATH_HAD_SERVER = 131072,
};
pub const WBEMPATH_INFO_ANON_LOCAL_MACHINE = WBEM_PATH_STATUS_FLAG.ANON_LOCAL_MACHINE;
pub const WBEMPATH_INFO_HAS_MACHINE_NAME = WBEM_PATH_STATUS_FLAG.HAS_MACHINE_NAME;
pub const WBEMPATH_INFO_IS_CLASS_REF = WBEM_PATH_STATUS_FLAG.IS_CLASS_REF;
pub const WBEMPATH_INFO_IS_INST_REF = WBEM_PATH_STATUS_FLAG.IS_INST_REF;
pub const WBEMPATH_INFO_HAS_SUBSCOPES = WBEM_PATH_STATUS_FLAG.HAS_SUBSCOPES;
pub const WBEMPATH_INFO_IS_COMPOUND = WBEM_PATH_STATUS_FLAG.IS_COMPOUND;
pub const WBEMPATH_INFO_HAS_V2_REF_PATHS = WBEM_PATH_STATUS_FLAG.HAS_V2_REF_PATHS;
pub const WBEMPATH_INFO_HAS_IMPLIED_KEY = WBEM_PATH_STATUS_FLAG.HAS_IMPLIED_KEY;
pub const WBEMPATH_INFO_CONTAINS_SINGLETON = WBEM_PATH_STATUS_FLAG.CONTAINS_SINGLETON;
pub const WBEMPATH_INFO_V1_COMPLIANT = WBEM_PATH_STATUS_FLAG.V1_COMPLIANT;
pub const WBEMPATH_INFO_V2_COMPLIANT = WBEM_PATH_STATUS_FLAG.V2_COMPLIANT;
pub const WBEMPATH_INFO_CIM_COMPLIANT = WBEM_PATH_STATUS_FLAG.CIM_COMPLIANT;
pub const WBEMPATH_INFO_IS_SINGLETON = WBEM_PATH_STATUS_FLAG.IS_SINGLETON;
pub const WBEMPATH_INFO_IS_PARENT = WBEM_PATH_STATUS_FLAG.IS_PARENT;
pub const WBEMPATH_INFO_SERVER_NAMESPACE_ONLY = WBEM_PATH_STATUS_FLAG.SERVER_NAMESPACE_ONLY;
pub const WBEMPATH_INFO_NATIVE_PATH = WBEM_PATH_STATUS_FLAG.NATIVE_PATH;
pub const WBEMPATH_INFO_WMI_PATH = WBEM_PATH_STATUS_FLAG.WMI_PATH;
pub const WBEMPATH_INFO_PATH_HAD_SERVER = WBEM_PATH_STATUS_FLAG.PATH_HAD_SERVER;

pub const WBEM_PATH_CREATE_FLAG = enum(i32) {
    CREATE_ACCEPT_RELATIVE = 1,
    CREATE_ACCEPT_ABSOLUTE = 2,
    CREATE_ACCEPT_ALL = 4,
    TREAT_SINGLE_IDENT_AS_NS = 8,
};
pub const WBEMPATH_CREATE_ACCEPT_RELATIVE = WBEM_PATH_CREATE_FLAG.CREATE_ACCEPT_RELATIVE;
pub const WBEMPATH_CREATE_ACCEPT_ABSOLUTE = WBEM_PATH_CREATE_FLAG.CREATE_ACCEPT_ABSOLUTE;
pub const WBEMPATH_CREATE_ACCEPT_ALL = WBEM_PATH_CREATE_FLAG.CREATE_ACCEPT_ALL;
pub const WBEMPATH_TREAT_SINGLE_IDENT_AS_NS = WBEM_PATH_CREATE_FLAG.TREAT_SINGLE_IDENT_AS_NS;

pub const WBEM_GET_TEXT_FLAGS = enum(i32) {
    COMPRESSED = 1,
    GET_RELATIVE_ONLY = 2,
    GET_SERVER_TOO = 4,
    GET_SERVER_AND_NAMESPACE_ONLY = 8,
    GET_NAMESPACE_ONLY = 16,
    GET_ORIGINAL = 32,
};
pub const WBEMPATH_COMPRESSED = WBEM_GET_TEXT_FLAGS.COMPRESSED;
pub const WBEMPATH_GET_RELATIVE_ONLY = WBEM_GET_TEXT_FLAGS.GET_RELATIVE_ONLY;
pub const WBEMPATH_GET_SERVER_TOO = WBEM_GET_TEXT_FLAGS.GET_SERVER_TOO;
pub const WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY = WBEM_GET_TEXT_FLAGS.GET_SERVER_AND_NAMESPACE_ONLY;
pub const WBEMPATH_GET_NAMESPACE_ONLY = WBEM_GET_TEXT_FLAGS.GET_NAMESPACE_ONLY;
pub const WBEMPATH_GET_ORIGINAL = WBEM_GET_TEXT_FLAGS.GET_ORIGINAL;

pub const WBEM_GET_KEY_FLAGS = enum(i32) {
    TEXT = 1,
    QUOTEDTEXT = 2,
};
pub const WBEMPATH_TEXT = WBEM_GET_KEY_FLAGS.TEXT;
pub const WBEMPATH_QUOTEDTEXT = WBEM_GET_KEY_FLAGS.QUOTEDTEXT;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemPathKeyList_Value = Guid.initString("9ae62877-7544-4bb0-aa26-a13824659ed6");
pub const IID_IWbemPathKeyList = &IID_IWbemPathKeyList_Value;
pub const IWbemPathKeyList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IWbemPathKeyList,
            pu_key_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKey: *const fn (
            self: *const IWbemPathKeyList,
            wsz_name: ?[*:0]const u16,
            u_flags: u32,
            u_cim_type: u32,
            p_key_val: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKey2: *const fn (
            self: *const IWbemPathKeyList,
            wsz_name: ?[*:0]const u16,
            u_flags: u32,
            u_cim_type: u32,
            p_key_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKey: *const fn (
            self: *const IWbemPathKeyList,
            u_key_ix: u32,
            u_flags: u32,
            pu_name_buf_size: ?*u32,
            psz_key_name: ?[*:0]u16,
            pu_key_val_buf_size: ?*u32,
            p_key_val: ?*anyopaque,
            pu_apparent_cim_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKey2: *const fn (
            self: *const IWbemPathKeyList,
            u_key_ix: u32,
            u_flags: u32,
            pu_name_buf_size: ?*u32,
            psz_key_name: ?[*:0]u16,
            p_key_value: ?*VARIANT,
            pu_apparent_cim_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveKey: *const fn (
            self: *const IWbemPathKeyList,
            wsz_name: ?[*:0]const u16,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllKeys: *const fn (
            self: *const IWbemPathKeyList,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeSingleton: *const fn (
            self: *const IWbemPathKeyList,
            b_set: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfo: *const fn (
            self: *const IWbemPathKeyList,
            u_requested_info: u32,
            pu_response: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText: *const fn (
            self: *const IWbemPathKeyList,
            l_flags: i32,
            pu_buff_length: ?*u32,
            psz_text: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, pu_key_count_: ?*u32) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IWbemPathKeyList, @ptrCast(self)), pu_key_count_);
            }
            pub inline fn setKey(self: *const T, wsz_name_: ?[*:0]const u16, u_flags_: u32, u_cim_type_: u32, p_key_val_: ?*anyopaque) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).SetKey(@as(*const IWbemPathKeyList, @ptrCast(self)), wsz_name_, u_flags_, u_cim_type_, p_key_val_);
            }
            pub inline fn setKey2(self: *const T, wsz_name_: ?[*:0]const u16, u_flags_: u32, u_cim_type_: u32, p_key_val_: ?*VARIANT) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).SetKey2(@as(*const IWbemPathKeyList, @ptrCast(self)), wsz_name_, u_flags_, u_cim_type_, p_key_val_);
            }
            pub inline fn getKey(self: *const T, u_key_ix_: u32, u_flags_: u32, pu_name_buf_size_: ?*u32, psz_key_name_: ?[*:0]u16, pu_key_val_buf_size_: ?*u32, p_key_val_: ?*anyopaque, pu_apparent_cim_type_: ?*u32) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).GetKey(@as(*const IWbemPathKeyList, @ptrCast(self)), u_key_ix_, u_flags_, pu_name_buf_size_, psz_key_name_, pu_key_val_buf_size_, p_key_val_, pu_apparent_cim_type_);
            }
            pub inline fn getKey2(self: *const T, u_key_ix_: u32, u_flags_: u32, pu_name_buf_size_: ?*u32, psz_key_name_: ?[*:0]u16, p_key_value_: ?*VARIANT, pu_apparent_cim_type_: ?*u32) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).GetKey2(@as(*const IWbemPathKeyList, @ptrCast(self)), u_key_ix_, u_flags_, pu_name_buf_size_, psz_key_name_, p_key_value_, pu_apparent_cim_type_);
            }
            pub inline fn removeKey(self: *const T, wsz_name_: ?[*:0]const u16, u_flags_: u32) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).RemoveKey(@as(*const IWbemPathKeyList, @ptrCast(self)), wsz_name_, u_flags_);
            }
            pub inline fn removeAllKeys(self: *const T, u_flags_: u32) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).RemoveAllKeys(@as(*const IWbemPathKeyList, @ptrCast(self)), u_flags_);
            }
            pub inline fn makeSingleton(self: *const T, b_set_: u8) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).MakeSingleton(@as(*const IWbemPathKeyList, @ptrCast(self)), b_set_);
            }
            pub inline fn getInfo(self: *const T, u_requested_info_: u32, pu_response_: ?*u64) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).GetInfo(@as(*const IWbemPathKeyList, @ptrCast(self)), u_requested_info_, pu_response_);
            }
            pub inline fn getText(self: *const T, l_flags_: i32, pu_buff_length_: ?*u32, psz_text_: [*:0]u16) HRESULT {
                return @as(*const IWbemPathKeyList.VTable, @ptrCast(self.vtable)).GetText(@as(*const IWbemPathKeyList, @ptrCast(self)), l_flags_, pu_buff_length_, psz_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemPath_Value = Guid.initString("3bc15af2-736c-477e-9e51-238af8667dcc");
pub const IID_IWbemPath = &IID_IWbemPath_Value;
pub const IWbemPath = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetText: *const fn (
            self: *const IWbemPath,
            u_mode: u32,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText: *const fn (
            self: *const IWbemPath,
            l_flags: i32,
            pu_buff_length: ?*u32,
            psz_text: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfo: *const fn (
            self: *const IWbemPath,
            u_requested_info: u32,
            pu_response: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetServer: *const fn (
            self: *const IWbemPath,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServer: *const fn (
            self: *const IWbemPath,
            pu_name_buf_length: ?*u32,
            p_name: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamespaceCount: *const fn (
            self: *const IWbemPath,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNamespaceAt: *const fn (
            self: *const IWbemPath,
            u_index: u32,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamespaceAt: *const fn (
            self: *const IWbemPath,
            u_index: u32,
            pu_name_buf_length: ?*u32,
            p_name: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveNamespaceAt: *const fn (
            self: *const IWbemPath,
            u_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllNamespaces: *const fn (
            self: *const IWbemPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScopeCount: *const fn (
            self: *const IWbemPath,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScope: *const fn (
            self: *const IWbemPath,
            u_index: u32,
            psz_class: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScopeFromText: *const fn (
            self: *const IWbemPath,
            u_index: u32,
            psz_text: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScope: *const fn (
            self: *const IWbemPath,
            u_index: u32,
            pu_class_name_buf_size: ?*u32,
            psz_class: [*:0]u16,
            p_key_list: ?*?*IWbemPathKeyList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScopeAsText: *const fn (
            self: *const IWbemPath,
            u_index: u32,
            pu_text_buf_size: ?*u32,
            psz_text: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveScope: *const fn (
            self: *const IWbemPath,
            u_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllScopes: *const fn (
            self: *const IWbemPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClassName: *const fn (
            self: *const IWbemPath,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClassName: *const fn (
            self: *const IWbemPath,
            pu_buff_length: ?*u32,
            psz_name: ?[*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyList: *const fn (
            self: *const IWbemPath,
            p_out: ?*?*IWbemPathKeyList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClassPart: *const fn (
            self: *const IWbemPath,
            l_flags: i32,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteClassPart: *const fn (
            self: *const IWbemPath,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRelative: *const fn (
            self: *const IWbemPath,
            wsz_machine: ?PWSTR,
            wsz_namespace: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsRelativeOrChild: *const fn (
            self: *const IWbemPath,
            wsz_machine: ?PWSTR,
            wsz_namespace: ?PWSTR,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsLocal: *const fn (
            self: *const IWbemPath,
            wsz_machine: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsSameClassName: *const fn (
            self: *const IWbemPath,
            wsz_class: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setText(self: *const T, u_mode_: u32, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).SetText(@as(*const IWbemPath, @ptrCast(self)), u_mode_, psz_path_);
            }
            pub inline fn getText(self: *const T, l_flags_: i32, pu_buff_length_: ?*u32, psz_text_: [*:0]u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetText(@as(*const IWbemPath, @ptrCast(self)), l_flags_, pu_buff_length_, psz_text_);
            }
            pub inline fn getInfo(self: *const T, u_requested_info_: u32, pu_response_: ?*u64) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetInfo(@as(*const IWbemPath, @ptrCast(self)), u_requested_info_, pu_response_);
            }
            pub inline fn setServer(self: *const T, name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).SetServer(@as(*const IWbemPath, @ptrCast(self)), name_);
            }
            pub inline fn getServer(self: *const T, pu_name_buf_length_: ?*u32, p_name_: [*:0]u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetServer(@as(*const IWbemPath, @ptrCast(self)), pu_name_buf_length_, p_name_);
            }
            pub inline fn getNamespaceCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetNamespaceCount(@as(*const IWbemPath, @ptrCast(self)), pu_count_);
            }
            pub inline fn setNamespaceAt(self: *const T, u_index_: u32, psz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).SetNamespaceAt(@as(*const IWbemPath, @ptrCast(self)), u_index_, psz_name_);
            }
            pub inline fn getNamespaceAt(self: *const T, u_index_: u32, pu_name_buf_length_: ?*u32, p_name_: [*:0]u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetNamespaceAt(@as(*const IWbemPath, @ptrCast(self)), u_index_, pu_name_buf_length_, p_name_);
            }
            pub inline fn removeNamespaceAt(self: *const T, u_index_: u32) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).RemoveNamespaceAt(@as(*const IWbemPath, @ptrCast(self)), u_index_);
            }
            pub inline fn removeAllNamespaces(self: *const T) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).RemoveAllNamespaces(@as(*const IWbemPath, @ptrCast(self)));
            }
            pub inline fn getScopeCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetScopeCount(@as(*const IWbemPath, @ptrCast(self)), pu_count_);
            }
            pub inline fn setScope(self: *const T, u_index_: u32, psz_class_: ?PWSTR) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).SetScope(@as(*const IWbemPath, @ptrCast(self)), u_index_, psz_class_);
            }
            pub inline fn setScopeFromText(self: *const T, u_index_: u32, psz_text_: ?PWSTR) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).SetScopeFromText(@as(*const IWbemPath, @ptrCast(self)), u_index_, psz_text_);
            }
            pub inline fn getScope(self: *const T, u_index_: u32, pu_class_name_buf_size_: ?*u32, psz_class_: [*:0]u16, p_key_list_: ?*?*IWbemPathKeyList) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetScope(@as(*const IWbemPath, @ptrCast(self)), u_index_, pu_class_name_buf_size_, psz_class_, p_key_list_);
            }
            pub inline fn getScopeAsText(self: *const T, u_index_: u32, pu_text_buf_size_: ?*u32, psz_text_: [*:0]u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetScopeAsText(@as(*const IWbemPath, @ptrCast(self)), u_index_, pu_text_buf_size_, psz_text_);
            }
            pub inline fn removeScope(self: *const T, u_index_: u32) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).RemoveScope(@as(*const IWbemPath, @ptrCast(self)), u_index_);
            }
            pub inline fn removeAllScopes(self: *const T) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).RemoveAllScopes(@as(*const IWbemPath, @ptrCast(self)));
            }
            pub inline fn setClassName(self: *const T, name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).SetClassName(@as(*const IWbemPath, @ptrCast(self)), name_);
            }
            pub inline fn getClassName(self: *const T, pu_buff_length_: ?*u32, psz_name_: ?[*:0]u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetClassName(@as(*const IWbemPath, @ptrCast(self)), pu_buff_length_, psz_name_);
            }
            pub inline fn getKeyList(self: *const T, p_out_: ?*?*IWbemPathKeyList) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).GetKeyList(@as(*const IWbemPath, @ptrCast(self)), p_out_);
            }
            pub inline fn createClassPart(self: *const T, l_flags_: i32, name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).CreateClassPart(@as(*const IWbemPath, @ptrCast(self)), l_flags_, name_);
            }
            pub inline fn deleteClassPart(self: *const T, l_flags_: i32) HRESULT {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).DeleteClassPart(@as(*const IWbemPath, @ptrCast(self)), l_flags_);
            }
            pub inline fn isRelative(self: *const T, wsz_machine_: ?PWSTR, wsz_namespace_: ?PWSTR) BOOL {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).IsRelative(@as(*const IWbemPath, @ptrCast(self)), wsz_machine_, wsz_namespace_);
            }
            pub inline fn isRelativeOrChild(self: *const T, wsz_machine_: ?PWSTR, wsz_namespace_: ?PWSTR, l_flags_: i32) BOOL {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).IsRelativeOrChild(@as(*const IWbemPath, @ptrCast(self)), wsz_machine_, wsz_namespace_, l_flags_);
            }
            pub inline fn isLocal(self: *const T, wsz_machine_: ?[*:0]const u16) BOOL {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).IsLocal(@as(*const IWbemPath, @ptrCast(self)), wsz_machine_);
            }
            pub inline fn isSameClassName(self: *const T, wsz_class_: ?[*:0]const u16) BOOL {
                return @as(*const IWbemPath.VTable, @ptrCast(self.vtable)).IsSameClassName(@as(*const IWbemPath, @ptrCast(self)), wsz_class_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemQuery_Value = Guid.initString("81166f58-dd98-11d3-a120-00105a1f515a");
pub const IID_IWbemQuery = &IID_IWbemQuery_Value;
pub const IWbemQuery = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Empty: *const fn (
            self: *const IWbemQuery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguageFeatures: *const fn (
            self: *const IWbemQuery,
            u_flags: u32,
            u_array_size: u32,
            pu_features: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TestLanguageFeatures: *const fn (
            self: *const IWbemQuery,
            u_flags: u32,
            u_array_size: ?*u32,
            pu_features: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Parse: *const fn (
            self: *const IWbemQuery,
            psz_lang: ?[*:0]const u16,
            psz_query: ?[*:0]const u16,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAnalysis: *const fn (
            self: *const IWbemQuery,
            u_analysis_type: u32,
            u_flags: u32,
            p_analysis: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeMemory: *const fn (
            self: *const IWbemQuery,
            p_mem: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQueryInfo: *const fn (
            self: *const IWbemQuery,
            u_analysis_type: u32,
            u_info_id: u32,
            u_buf_size: u32,
            p_dest_buf: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn empty(self: *const T) HRESULT {
                return @as(*const IWbemQuery.VTable, @ptrCast(self.vtable)).Empty(@as(*const IWbemQuery, @ptrCast(self)));
            }
            pub inline fn setLanguageFeatures(self: *const T, u_flags_: u32, u_array_size_: u32, pu_features_: ?*u32) HRESULT {
                return @as(*const IWbemQuery.VTable, @ptrCast(self.vtable)).SetLanguageFeatures(@as(*const IWbemQuery, @ptrCast(self)), u_flags_, u_array_size_, pu_features_);
            }
            pub inline fn testLanguageFeatures(self: *const T, u_flags_: u32, u_array_size_: ?*u32, pu_features_: ?*u32) HRESULT {
                return @as(*const IWbemQuery.VTable, @ptrCast(self.vtable)).TestLanguageFeatures(@as(*const IWbemQuery, @ptrCast(self)), u_flags_, u_array_size_, pu_features_);
            }
            pub inline fn parse(self: *const T, psz_lang_: ?[*:0]const u16, psz_query_: ?[*:0]const u16, u_flags_: u32) HRESULT {
                return @as(*const IWbemQuery.VTable, @ptrCast(self.vtable)).Parse(@as(*const IWbemQuery, @ptrCast(self)), psz_lang_, psz_query_, u_flags_);
            }
            pub inline fn getAnalysis(self: *const T, u_analysis_type_: u32, u_flags_: u32, p_analysis_: ?*?*anyopaque) HRESULT {
                return @as(*const IWbemQuery.VTable, @ptrCast(self.vtable)).GetAnalysis(@as(*const IWbemQuery, @ptrCast(self)), u_analysis_type_, u_flags_, p_analysis_);
            }
            pub inline fn freeMemory(self: *const T, p_mem_: ?*anyopaque) HRESULT {
                return @as(*const IWbemQuery.VTable, @ptrCast(self.vtable)).FreeMemory(@as(*const IWbemQuery, @ptrCast(self)), p_mem_);
            }
            pub inline fn getQueryInfo(self: *const T, u_analysis_type_: u32, u_info_id_: u32, u_buf_size_: u32, p_dest_buf_: ?*anyopaque) HRESULT {
                return @as(*const IWbemQuery.VTable, @ptrCast(self.vtable)).GetQueryInfo(@as(*const IWbemQuery, @ptrCast(self)), u_analysis_type_, u_info_id_, u_buf_size_, p_dest_buf_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMIQ_ANALYSIS_TYPE = enum(i32) {
    RPN_SEQUENCE = 1,
    ASSOC_QUERY = 2,
    PROP_ANALYSIS_MATRIX = 3,
    QUERY_TEXT = 4,
    RESERVED = 134217728,
};
pub const WMIQ_ANALYSIS_RPN_SEQUENCE = WMIQ_ANALYSIS_TYPE.RPN_SEQUENCE;
pub const WMIQ_ANALYSIS_ASSOC_QUERY = WMIQ_ANALYSIS_TYPE.ASSOC_QUERY;
pub const WMIQ_ANALYSIS_PROP_ANALYSIS_MATRIX = WMIQ_ANALYSIS_TYPE.PROP_ANALYSIS_MATRIX;
pub const WMIQ_ANALYSIS_QUERY_TEXT = WMIQ_ANALYSIS_TYPE.QUERY_TEXT;
pub const WMIQ_ANALYSIS_RESERVED = WMIQ_ANALYSIS_TYPE.RESERVED;

pub const WMIQ_RPN_TOKEN_FLAGS = enum(i32) {
    TOKEN_EXPRESSION = 1,
    TOKEN_AND = 2,
    TOKEN_OR = 3,
    TOKEN_NOT = 4,
    OP_UNDEFINED = 0,
    // OP_EQ = 1, this enum value conflicts with TOKEN_EXPRESSION
    // OP_NE = 2, this enum value conflicts with TOKEN_AND
    // OP_GE = 3, this enum value conflicts with TOKEN_OR
    // OP_LE = 4, this enum value conflicts with TOKEN_NOT
    OP_LT = 5,
    OP_GT = 6,
    OP_LIKE = 7,
    OP_ISA = 8,
    OP_ISNOTA = 9,
    OP_ISNULL = 10,
    OP_ISNOTNULL = 11,
    // LEFT_PROPERTY_NAME = 1, this enum value conflicts with TOKEN_EXPRESSION
    // RIGHT_PROPERTY_NAME = 2, this enum value conflicts with TOKEN_AND
    // CONST2 = 4, this enum value conflicts with TOKEN_NOT
    // CONST = 8, this enum value conflicts with OP_ISA
    RELOP = 16,
    LEFT_FUNCTION = 32,
    RIGHT_FUNCTION = 64,
    // GET_TOKEN_TYPE = 1, this enum value conflicts with TOKEN_EXPRESSION
    // GET_EXPR_SHAPE = 2, this enum value conflicts with TOKEN_AND
    // GET_LEFT_FUNCTION = 3, this enum value conflicts with TOKEN_OR
    // GET_RIGHT_FUNCTION = 4, this enum value conflicts with TOKEN_NOT
    // GET_RELOP = 5, this enum value conflicts with OP_LT
    // NEXT_TOKEN = 1, this enum value conflicts with TOKEN_EXPRESSION
    // FROM_UNARY = 1, this enum value conflicts with TOKEN_EXPRESSION
    // FROM_PATH = 2, this enum value conflicts with TOKEN_AND
    // FROM_CLASS_LIST = 4, this enum value conflicts with TOKEN_NOT
    // FROM_MULTIPLE = 8, this enum value conflicts with OP_ISA
};
pub const WMIQ_RPN_TOKEN_EXPRESSION = WMIQ_RPN_TOKEN_FLAGS.TOKEN_EXPRESSION;
pub const WMIQ_RPN_TOKEN_AND = WMIQ_RPN_TOKEN_FLAGS.TOKEN_AND;
pub const WMIQ_RPN_TOKEN_OR = WMIQ_RPN_TOKEN_FLAGS.TOKEN_OR;
pub const WMIQ_RPN_TOKEN_NOT = WMIQ_RPN_TOKEN_FLAGS.TOKEN_NOT;
pub const WMIQ_RPN_OP_UNDEFINED = WMIQ_RPN_TOKEN_FLAGS.OP_UNDEFINED;
pub const WMIQ_RPN_OP_EQ = WMIQ_RPN_TOKEN_FLAGS.TOKEN_EXPRESSION;
pub const WMIQ_RPN_OP_NE = WMIQ_RPN_TOKEN_FLAGS.TOKEN_AND;
pub const WMIQ_RPN_OP_GE = WMIQ_RPN_TOKEN_FLAGS.TOKEN_OR;
pub const WMIQ_RPN_OP_LE = WMIQ_RPN_TOKEN_FLAGS.TOKEN_NOT;
pub const WMIQ_RPN_OP_LT = WMIQ_RPN_TOKEN_FLAGS.OP_LT;
pub const WMIQ_RPN_OP_GT = WMIQ_RPN_TOKEN_FLAGS.OP_GT;
pub const WMIQ_RPN_OP_LIKE = WMIQ_RPN_TOKEN_FLAGS.OP_LIKE;
pub const WMIQ_RPN_OP_ISA = WMIQ_RPN_TOKEN_FLAGS.OP_ISA;
pub const WMIQ_RPN_OP_ISNOTA = WMIQ_RPN_TOKEN_FLAGS.OP_ISNOTA;
pub const WMIQ_RPN_OP_ISNULL = WMIQ_RPN_TOKEN_FLAGS.OP_ISNULL;
pub const WMIQ_RPN_OP_ISNOTNULL = WMIQ_RPN_TOKEN_FLAGS.OP_ISNOTNULL;
pub const WMIQ_RPN_LEFT_PROPERTY_NAME = WMIQ_RPN_TOKEN_FLAGS.TOKEN_EXPRESSION;
pub const WMIQ_RPN_RIGHT_PROPERTY_NAME = WMIQ_RPN_TOKEN_FLAGS.TOKEN_AND;
pub const WMIQ_RPN_CONST2 = WMIQ_RPN_TOKEN_FLAGS.TOKEN_NOT;
pub const WMIQ_RPN_CONST = WMIQ_RPN_TOKEN_FLAGS.OP_ISA;
pub const WMIQ_RPN_RELOP = WMIQ_RPN_TOKEN_FLAGS.RELOP;
pub const WMIQ_RPN_LEFT_FUNCTION = WMIQ_RPN_TOKEN_FLAGS.LEFT_FUNCTION;
pub const WMIQ_RPN_RIGHT_FUNCTION = WMIQ_RPN_TOKEN_FLAGS.RIGHT_FUNCTION;
pub const WMIQ_RPN_GET_TOKEN_TYPE = WMIQ_RPN_TOKEN_FLAGS.TOKEN_EXPRESSION;
pub const WMIQ_RPN_GET_EXPR_SHAPE = WMIQ_RPN_TOKEN_FLAGS.TOKEN_AND;
pub const WMIQ_RPN_GET_LEFT_FUNCTION = WMIQ_RPN_TOKEN_FLAGS.TOKEN_OR;
pub const WMIQ_RPN_GET_RIGHT_FUNCTION = WMIQ_RPN_TOKEN_FLAGS.TOKEN_NOT;
pub const WMIQ_RPN_GET_RELOP = WMIQ_RPN_TOKEN_FLAGS.OP_LT;
pub const WMIQ_RPN_NEXT_TOKEN = WMIQ_RPN_TOKEN_FLAGS.TOKEN_EXPRESSION;
pub const WMIQ_RPN_FROM_UNARY = WMIQ_RPN_TOKEN_FLAGS.TOKEN_EXPRESSION;
pub const WMIQ_RPN_FROM_PATH = WMIQ_RPN_TOKEN_FLAGS.TOKEN_AND;
pub const WMIQ_RPN_FROM_CLASS_LIST = WMIQ_RPN_TOKEN_FLAGS.TOKEN_NOT;
pub const WMIQ_RPN_FROM_MULTIPLE = WMIQ_RPN_TOKEN_FLAGS.OP_ISA;

pub const WMIQ_ASSOCQ_FLAGS = enum(i32) {
    ASSOCIATORS = 1,
    REFERENCES = 2,
    RESULTCLASS = 4,
    ASSOCCLASS = 8,
    ROLE = 16,
    RESULTROLE = 32,
    REQUIREDQUALIFIER = 64,
    REQUIREDASSOCQUALIFIER = 128,
    CLASSDEFSONLY = 256,
    KEYSONLY = 512,
    SCHEMAONLY = 1024,
    CLASSREFSONLY = 2048,
};
pub const WMIQ_ASSOCQ_ASSOCIATORS = WMIQ_ASSOCQ_FLAGS.ASSOCIATORS;
pub const WMIQ_ASSOCQ_REFERENCES = WMIQ_ASSOCQ_FLAGS.REFERENCES;
pub const WMIQ_ASSOCQ_RESULTCLASS = WMIQ_ASSOCQ_FLAGS.RESULTCLASS;
pub const WMIQ_ASSOCQ_ASSOCCLASS = WMIQ_ASSOCQ_FLAGS.ASSOCCLASS;
pub const WMIQ_ASSOCQ_ROLE = WMIQ_ASSOCQ_FLAGS.ROLE;
pub const WMIQ_ASSOCQ_RESULTROLE = WMIQ_ASSOCQ_FLAGS.RESULTROLE;
pub const WMIQ_ASSOCQ_REQUIREDQUALIFIER = WMIQ_ASSOCQ_FLAGS.REQUIREDQUALIFIER;
pub const WMIQ_ASSOCQ_REQUIREDASSOCQUALIFIER = WMIQ_ASSOCQ_FLAGS.REQUIREDASSOCQUALIFIER;
pub const WMIQ_ASSOCQ_CLASSDEFSONLY = WMIQ_ASSOCQ_FLAGS.CLASSDEFSONLY;
pub const WMIQ_ASSOCQ_KEYSONLY = WMIQ_ASSOCQ_FLAGS.KEYSONLY;
pub const WMIQ_ASSOCQ_SCHEMAONLY = WMIQ_ASSOCQ_FLAGS.SCHEMAONLY;
pub const WMIQ_ASSOCQ_CLASSREFSONLY = WMIQ_ASSOCQ_FLAGS.CLASSREFSONLY;

pub const SWbemQueryQualifiedName = extern struct {
    m_uVersion: u32,
    m_uTokenType: u32,
    m_uNameListSize: u32,
    m_ppszNameList: ?*?PWSTR,
    m_bArraysUsed: BOOL,
    m_pbArrayElUsed: ?*BOOL,
    m_puArrayIndex: ?*u32,
};

pub const SWbemRpnConst = extern union {
    m_pszStrVal: ?[*:0]const u16,
    m_bBoolVal: BOOL,
    m_lLongVal: i32,
    m_uLongVal: u32,
    m_dblVal: f64,
    m_lVal64: i64,
    m_uVal64: i64,
};

pub const SWbemRpnQueryToken = extern struct {
    m_uVersion: u32,
    m_uTokenType: u32,
    m_uSubexpressionShape: u32,
    m_uOperator: u32,
    m_pRightIdent: ?*SWbemQueryQualifiedName,
    m_pLeftIdent: ?*SWbemQueryQualifiedName,
    m_uConstApparentType: u32,
    m_Const: SWbemRpnConst,
    m_uConst2ApparentType: u32,
    m_Const2: SWbemRpnConst,
    m_pszRightFunc: ?[*:0]const u16,
    m_pszLeftFunc: ?[*:0]const u16,
};

pub const SWbemRpnTokenList = extern struct {
    m_uVersion: u32,
    m_uTokenType: u32,
    m_uNumTokens: u32,
};

pub const WMIQ_LANGUAGE_FEATURES = enum(i32) {
    @"1_BASIC_SELECT" = 1,
    @"2_CLASS_NAME_IN_QUERY" = 2,
    @"3_STRING_CASE_FUNCTIONS" = 3,
    @"4_PROP_TO_PROP_TESTS" = 4,
    @"5_COUNT_STAR" = 5,
    @"6_ORDER_BY" = 6,
    @"7_DISTINCT" = 7,
    @"8_ISA" = 8,
    @"9_THIS" = 9,
    @"10_COMPEX_SUBEXPRESSIONS" = 10,
    @"11_ALIASING" = 11,
    @"12_GROUP_BY_HAVING" = 12,
    @"13_WMI_WITHIN" = 13,
    @"14_SQL_WRITE_OPERATIONS" = 14,
    @"15_GO" = 15,
    @"16_SINGLE_LEVEL_TRANSACTIONS" = 16,
    @"17_QUALIFIED_NAMES" = 17,
    @"18_ASSOCIATONS" = 18,
    @"19_SYSTEM_PROPERTIES" = 19,
    @"20_EXTENDED_SYSTEM_PROPERTIES" = 20,
    @"21_SQL89_JOINS" = 21,
    @"22_SQL92_JOINS" = 22,
    @"23_SUBSELECTS" = 23,
    @"24_UMI_EXTENSIONS" = 24,
    @"25_DATEPART" = 25,
    @"26_LIKE" = 26,
    @"27_CIM_TEMPORAL_CONSTRUCTS" = 27,
    @"28_STANDARD_AGGREGATES" = 28,
    @"29_MULTI_LEVEL_ORDER_BY" = 29,
    @"30_WMI_PRAGMAS" = 30,
    @"31_QUALIFIER_TESTS" = 31,
    @"32_SP_EXECUTE" = 32,
    @"33_ARRAY_ACCESS" = 33,
    @"34_UNION" = 34,
    @"35_COMPLEX_SELECT_TARGET" = 35,
    @"36_REFERENCE_TESTS" = 36,
    @"37_SELECT_INTO" = 37,
    @"38_BASIC_DATETIME_TESTS" = 38,
    @"39_COUNT_COLUMN" = 39,
    @"40_BETWEEN" = 40,
    // _LAST = 40, this enum value conflicts with @"40_BETWEEN"
};
pub const WMIQ_LF1_BASIC_SELECT = WMIQ_LANGUAGE_FEATURES.@"1_BASIC_SELECT";
pub const WMIQ_LF2_CLASS_NAME_IN_QUERY = WMIQ_LANGUAGE_FEATURES.@"2_CLASS_NAME_IN_QUERY";
pub const WMIQ_LF3_STRING_CASE_FUNCTIONS = WMIQ_LANGUAGE_FEATURES.@"3_STRING_CASE_FUNCTIONS";
pub const WMIQ_LF4_PROP_TO_PROP_TESTS = WMIQ_LANGUAGE_FEATURES.@"4_PROP_TO_PROP_TESTS";
pub const WMIQ_LF5_COUNT_STAR = WMIQ_LANGUAGE_FEATURES.@"5_COUNT_STAR";
pub const WMIQ_LF6_ORDER_BY = WMIQ_LANGUAGE_FEATURES.@"6_ORDER_BY";
pub const WMIQ_LF7_DISTINCT = WMIQ_LANGUAGE_FEATURES.@"7_DISTINCT";
pub const WMIQ_LF8_ISA = WMIQ_LANGUAGE_FEATURES.@"8_ISA";
pub const WMIQ_LF9_THIS = WMIQ_LANGUAGE_FEATURES.@"9_THIS";
pub const WMIQ_LF10_COMPEX_SUBEXPRESSIONS = WMIQ_LANGUAGE_FEATURES.@"10_COMPEX_SUBEXPRESSIONS";
pub const WMIQ_LF11_ALIASING = WMIQ_LANGUAGE_FEATURES.@"11_ALIASING";
pub const WMIQ_LF12_GROUP_BY_HAVING = WMIQ_LANGUAGE_FEATURES.@"12_GROUP_BY_HAVING";
pub const WMIQ_LF13_WMI_WITHIN = WMIQ_LANGUAGE_FEATURES.@"13_WMI_WITHIN";
pub const WMIQ_LF14_SQL_WRITE_OPERATIONS = WMIQ_LANGUAGE_FEATURES.@"14_SQL_WRITE_OPERATIONS";
pub const WMIQ_LF15_GO = WMIQ_LANGUAGE_FEATURES.@"15_GO";
pub const WMIQ_LF16_SINGLE_LEVEL_TRANSACTIONS = WMIQ_LANGUAGE_FEATURES.@"16_SINGLE_LEVEL_TRANSACTIONS";
pub const WMIQ_LF17_QUALIFIED_NAMES = WMIQ_LANGUAGE_FEATURES.@"17_QUALIFIED_NAMES";
pub const WMIQ_LF18_ASSOCIATONS = WMIQ_LANGUAGE_FEATURES.@"18_ASSOCIATONS";
pub const WMIQ_LF19_SYSTEM_PROPERTIES = WMIQ_LANGUAGE_FEATURES.@"19_SYSTEM_PROPERTIES";
pub const WMIQ_LF20_EXTENDED_SYSTEM_PROPERTIES = WMIQ_LANGUAGE_FEATURES.@"20_EXTENDED_SYSTEM_PROPERTIES";
pub const WMIQ_LF21_SQL89_JOINS = WMIQ_LANGUAGE_FEATURES.@"21_SQL89_JOINS";
pub const WMIQ_LF22_SQL92_JOINS = WMIQ_LANGUAGE_FEATURES.@"22_SQL92_JOINS";
pub const WMIQ_LF23_SUBSELECTS = WMIQ_LANGUAGE_FEATURES.@"23_SUBSELECTS";
pub const WMIQ_LF24_UMI_EXTENSIONS = WMIQ_LANGUAGE_FEATURES.@"24_UMI_EXTENSIONS";
pub const WMIQ_LF25_DATEPART = WMIQ_LANGUAGE_FEATURES.@"25_DATEPART";
pub const WMIQ_LF26_LIKE = WMIQ_LANGUAGE_FEATURES.@"26_LIKE";
pub const WMIQ_LF27_CIM_TEMPORAL_CONSTRUCTS = WMIQ_LANGUAGE_FEATURES.@"27_CIM_TEMPORAL_CONSTRUCTS";
pub const WMIQ_LF28_STANDARD_AGGREGATES = WMIQ_LANGUAGE_FEATURES.@"28_STANDARD_AGGREGATES";
pub const WMIQ_LF29_MULTI_LEVEL_ORDER_BY = WMIQ_LANGUAGE_FEATURES.@"29_MULTI_LEVEL_ORDER_BY";
pub const WMIQ_LF30_WMI_PRAGMAS = WMIQ_LANGUAGE_FEATURES.@"30_WMI_PRAGMAS";
pub const WMIQ_LF31_QUALIFIER_TESTS = WMIQ_LANGUAGE_FEATURES.@"31_QUALIFIER_TESTS";
pub const WMIQ_LF32_SP_EXECUTE = WMIQ_LANGUAGE_FEATURES.@"32_SP_EXECUTE";
pub const WMIQ_LF33_ARRAY_ACCESS = WMIQ_LANGUAGE_FEATURES.@"33_ARRAY_ACCESS";
pub const WMIQ_LF34_UNION = WMIQ_LANGUAGE_FEATURES.@"34_UNION";
pub const WMIQ_LF35_COMPLEX_SELECT_TARGET = WMIQ_LANGUAGE_FEATURES.@"35_COMPLEX_SELECT_TARGET";
pub const WMIQ_LF36_REFERENCE_TESTS = WMIQ_LANGUAGE_FEATURES.@"36_REFERENCE_TESTS";
pub const WMIQ_LF37_SELECT_INTO = WMIQ_LANGUAGE_FEATURES.@"37_SELECT_INTO";
pub const WMIQ_LF38_BASIC_DATETIME_TESTS = WMIQ_LANGUAGE_FEATURES.@"38_BASIC_DATETIME_TESTS";
pub const WMIQ_LF39_COUNT_COLUMN = WMIQ_LANGUAGE_FEATURES.@"39_COUNT_COLUMN";
pub const WMIQ_LF40_BETWEEN = WMIQ_LANGUAGE_FEATURES.@"40_BETWEEN";
pub const WMIQ_LF_LAST = WMIQ_LANGUAGE_FEATURES.@"40_BETWEEN";

pub const WMIQ_RPNQ_FEATURE = enum(i32) {
    WHERE_CLAUSE_PRESENT = 1,
    QUERY_IS_CONJUNCTIVE = 2,
    QUERY_IS_DISJUNCTIVE = 4,
    PROJECTION = 8,
    FEATURE_SELECT_STAR = 16,
    EQUALITY_TESTS_ONLY = 32,
    COUNT_STAR = 64,
    QUALIFIED_NAMES_USED = 128,
    SYSPROP_CLASS_USED = 256,
    PROP_TO_PROP_TESTS = 512,
    ORDER_BY = 1024,
    ISA_USED = 2048,
    GROUP_BY_HAVING = 4096,
    ARRAY_ACCESS_USED = 8192,
};
pub const WMIQ_RPNF_WHERE_CLAUSE_PRESENT = WMIQ_RPNQ_FEATURE.WHERE_CLAUSE_PRESENT;
pub const WMIQ_RPNF_QUERY_IS_CONJUNCTIVE = WMIQ_RPNQ_FEATURE.QUERY_IS_CONJUNCTIVE;
pub const WMIQ_RPNF_QUERY_IS_DISJUNCTIVE = WMIQ_RPNQ_FEATURE.QUERY_IS_DISJUNCTIVE;
pub const WMIQ_RPNF_PROJECTION = WMIQ_RPNQ_FEATURE.PROJECTION;
pub const WMIQ_RPNF_FEATURE_SELECT_STAR = WMIQ_RPNQ_FEATURE.FEATURE_SELECT_STAR;
pub const WMIQ_RPNF_EQUALITY_TESTS_ONLY = WMIQ_RPNQ_FEATURE.EQUALITY_TESTS_ONLY;
pub const WMIQ_RPNF_COUNT_STAR = WMIQ_RPNQ_FEATURE.COUNT_STAR;
pub const WMIQ_RPNF_QUALIFIED_NAMES_USED = WMIQ_RPNQ_FEATURE.QUALIFIED_NAMES_USED;
pub const WMIQ_RPNF_SYSPROP_CLASS_USED = WMIQ_RPNQ_FEATURE.SYSPROP_CLASS_USED;
pub const WMIQ_RPNF_PROP_TO_PROP_TESTS = WMIQ_RPNQ_FEATURE.PROP_TO_PROP_TESTS;
pub const WMIQ_RPNF_ORDER_BY = WMIQ_RPNQ_FEATURE.ORDER_BY;
pub const WMIQ_RPNF_ISA_USED = WMIQ_RPNQ_FEATURE.ISA_USED;
pub const WMIQ_RPNF_GROUP_BY_HAVING = WMIQ_RPNQ_FEATURE.GROUP_BY_HAVING;
pub const WMIQ_RPNF_ARRAY_ACCESS_USED = WMIQ_RPNQ_FEATURE.ARRAY_ACCESS_USED;

pub const SWbemRpnEncodedQuery = extern struct {
    m_uVersion: u32,
    m_uTokenType: u32,
    m_uParsedFeatureMask: u64,
    m_uDetectedArraySize: u32,
    m_puDetectedFeatures: ?*u32,
    m_uSelectListSize: u32,
    m_ppSelectList: ?*?*SWbemQueryQualifiedName,
    m_uFromTargetType: u32,
    m_pszOptionalFromPath: ?[*:0]const u16,
    m_uFromListSize: u32,
    m_ppszFromList: ?*?PWSTR,
    m_uWhereClauseSize: u32,
    m_ppRpnWhereClause: ?*?*SWbemRpnQueryToken,
    m_dblWithinPolling: f64,
    m_dblWithinWindow: f64,
    m_uOrderByListSize: u32,
    m_ppszOrderByList: ?*?PWSTR,
    m_uOrderDirectionEl: ?*u32,
};

pub const SWbemAnalysisMatrix = extern struct {
    m_uVersion: u32,
    m_uMatrixType: u32,
    m_pszProperty: ?[*:0]const u16,
    m_uPropertyType: u32,
    m_uEntries: u32,
    m_pValues: ?*?*anyopaque,
    m_pbTruthTable: ?*BOOL,
};

pub const SWbemAnalysisMatrixList = extern struct {
    m_uVersion: u32,
    m_uMatrixType: u32,
    m_uNumMatrices: u32,
    m_pMatrices: ?*SWbemAnalysisMatrix,
};

pub const SWbemAssocQueryInf = extern struct {
    m_uVersion: u32,
    m_uAnalysisType: u32,
    m_uFeatureMask: u32,
    m_pPath: ?*IWbemPath,
    m_pszPath: ?PWSTR,
    m_pszQueryText: ?PWSTR,
    m_pszResultClass: ?PWSTR,
    m_pszAssocClass: ?PWSTR,
    m_pszRole: ?PWSTR,
    m_pszResultRole: ?PWSTR,
    m_pszRequiredQualifier: ?PWSTR,
    m_pszRequiredAssocQualifier: ?PWSTR,
};

const CLSID_WbemLocator_Value = Guid.initString("4590f811-1d3a-11d0-891f-00aa004b2e24");
pub const CLSID_WbemLocator = &CLSID_WbemLocator_Value;

const CLSID_WbemContext_Value = Guid.initString("674b6698-ee92-11d0-ad71-00c04fd8fdff");
pub const CLSID_WbemContext = &CLSID_WbemContext_Value;

const CLSID_UnsecuredApartment_Value = Guid.initString("49bd2028-1523-11d1-ad79-00c04fd8fdff");
pub const CLSID_UnsecuredApartment = &CLSID_UnsecuredApartment_Value;

const CLSID_WbemClassObject_Value = Guid.initString("9a653086-174f-11d2-b5f9-00104b703efd");
pub const CLSID_WbemClassObject = &CLSID_WbemClassObject_Value;

const CLSID_MofCompiler_Value = Guid.initString("6daf9757-2e37-11d2-aec9-00c04fb68820");
pub const CLSID_MofCompiler = &CLSID_MofCompiler_Value;

const CLSID_WbemStatusCodeText_Value = Guid.initString("eb87e1bd-3233-11d2-aec9-00c04fb68820");
pub const CLSID_WbemStatusCodeText = &CLSID_WbemStatusCodeText_Value;

const CLSID_WbemBackupRestore_Value = Guid.initString("c49e32c6-bc8b-11d2-85d4-00105a1f8304");
pub const CLSID_WbemBackupRestore = &CLSID_WbemBackupRestore_Value;

const CLSID_WbemRefresher_Value = Guid.initString("c71566f2-561e-11d1-ad87-00c04fd8fdff");
pub const CLSID_WbemRefresher = &CLSID_WbemRefresher_Value;

const CLSID_WbemObjectTextSrc_Value = Guid.initString("8d1c559d-84f0-4bb3-a7d5-56a7435a9ba6");
pub const CLSID_WbemObjectTextSrc = &CLSID_WbemObjectTextSrc_Value;

pub const WBEM_GENUS_TYPE = enum(i32) {
    CLASS = 1,
    INSTANCE = 2,
};
pub const WBEM_GENUS_CLASS = WBEM_GENUS_TYPE.CLASS;
pub const WBEM_GENUS_INSTANCE = WBEM_GENUS_TYPE.INSTANCE;

pub const WBEM_CHANGE_FLAG_TYPE = enum(i32) {
    FLAG_CREATE_OR_UPDATE = 0,
    FLAG_UPDATE_ONLY = 1,
    FLAG_CREATE_ONLY = 2,
    // FLAG_UPDATE_COMPATIBLE = 0, this enum value conflicts with FLAG_CREATE_OR_UPDATE
    FLAG_UPDATE_SAFE_MODE = 32,
    FLAG_UPDATE_FORCE_MODE = 64,
    MASK_UPDATE_MODE = 96,
    FLAG_ADVISORY = 65536,
};
pub const WBEM_FLAG_CREATE_OR_UPDATE = WBEM_CHANGE_FLAG_TYPE.FLAG_CREATE_OR_UPDATE;
pub const WBEM_FLAG_UPDATE_ONLY = WBEM_CHANGE_FLAG_TYPE.FLAG_UPDATE_ONLY;
pub const WBEM_FLAG_CREATE_ONLY = WBEM_CHANGE_FLAG_TYPE.FLAG_CREATE_ONLY;
pub const WBEM_FLAG_UPDATE_COMPATIBLE = WBEM_CHANGE_FLAG_TYPE.FLAG_CREATE_OR_UPDATE;
pub const WBEM_FLAG_UPDATE_SAFE_MODE = WBEM_CHANGE_FLAG_TYPE.FLAG_UPDATE_SAFE_MODE;
pub const WBEM_FLAG_UPDATE_FORCE_MODE = WBEM_CHANGE_FLAG_TYPE.FLAG_UPDATE_FORCE_MODE;
pub const WBEM_MASK_UPDATE_MODE = WBEM_CHANGE_FLAG_TYPE.MASK_UPDATE_MODE;
pub const WBEM_FLAG_ADVISORY = WBEM_CHANGE_FLAG_TYPE.FLAG_ADVISORY;

pub const WBEM_GENERIC_FLAG_TYPE = enum(i32) {
    FLAG_RETURN_IMMEDIATELY = 16,
    FLAG_RETURN_WBEM_COMPLETE = 0,
    // FLAG_BIDIRECTIONAL = 0, this enum value conflicts with FLAG_RETURN_WBEM_COMPLETE
    FLAG_FORWARD_ONLY = 32,
    FLAG_NO_ERROR_OBJECT = 64,
    // FLAG_RETURN_ERROR_OBJECT = 0, this enum value conflicts with FLAG_RETURN_WBEM_COMPLETE
    FLAG_SEND_STATUS = 128,
    // FLAG_DONT_SEND_STATUS = 0, this enum value conflicts with FLAG_RETURN_WBEM_COMPLETE
    FLAG_ENSURE_LOCATABLE = 256,
    FLAG_DIRECT_READ = 512,
    // FLAG_SEND_ONLY_SELECTED = 0, this enum value conflicts with FLAG_RETURN_WBEM_COMPLETE
    // RETURN_WHEN_COMPLETE = 0, this enum value conflicts with FLAG_RETURN_WBEM_COMPLETE
    // RETURN_IMMEDIATELY = 16, this enum value conflicts with FLAG_RETURN_IMMEDIATELY
    MASK_RESERVED_FLAGS = 126976,
    FLAG_USE_AMENDED_QUALIFIERS = 131072,
    FLAG_STRONG_VALIDATION = 1048576,
};
pub const WBEM_FLAG_RETURN_IMMEDIATELY = WBEM_GENERIC_FLAG_TYPE.FLAG_RETURN_IMMEDIATELY;
pub const WBEM_FLAG_RETURN_WBEM_COMPLETE = WBEM_GENERIC_FLAG_TYPE.FLAG_RETURN_WBEM_COMPLETE;
pub const WBEM_FLAG_BIDIRECTIONAL = WBEM_GENERIC_FLAG_TYPE.FLAG_RETURN_WBEM_COMPLETE;
pub const WBEM_FLAG_FORWARD_ONLY = WBEM_GENERIC_FLAG_TYPE.FLAG_FORWARD_ONLY;
pub const WBEM_FLAG_NO_ERROR_OBJECT = WBEM_GENERIC_FLAG_TYPE.FLAG_NO_ERROR_OBJECT;
pub const WBEM_FLAG_RETURN_ERROR_OBJECT = WBEM_GENERIC_FLAG_TYPE.FLAG_RETURN_WBEM_COMPLETE;
pub const WBEM_FLAG_SEND_STATUS = WBEM_GENERIC_FLAG_TYPE.FLAG_SEND_STATUS;
pub const WBEM_FLAG_DONT_SEND_STATUS = WBEM_GENERIC_FLAG_TYPE.FLAG_RETURN_WBEM_COMPLETE;
pub const WBEM_FLAG_ENSURE_LOCATABLE = WBEM_GENERIC_FLAG_TYPE.FLAG_ENSURE_LOCATABLE;
pub const WBEM_FLAG_DIRECT_READ = WBEM_GENERIC_FLAG_TYPE.FLAG_DIRECT_READ;
pub const WBEM_FLAG_SEND_ONLY_SELECTED = WBEM_GENERIC_FLAG_TYPE.FLAG_RETURN_WBEM_COMPLETE;
pub const WBEM_RETURN_WHEN_COMPLETE = WBEM_GENERIC_FLAG_TYPE.FLAG_RETURN_WBEM_COMPLETE;
pub const WBEM_RETURN_IMMEDIATELY = WBEM_GENERIC_FLAG_TYPE.FLAG_RETURN_IMMEDIATELY;
pub const WBEM_MASK_RESERVED_FLAGS = WBEM_GENERIC_FLAG_TYPE.MASK_RESERVED_FLAGS;
pub const WBEM_FLAG_USE_AMENDED_QUALIFIERS = WBEM_GENERIC_FLAG_TYPE.FLAG_USE_AMENDED_QUALIFIERS;
pub const WBEM_FLAG_STRONG_VALIDATION = WBEM_GENERIC_FLAG_TYPE.FLAG_STRONG_VALIDATION;

pub const WBEM_STATUS_TYPE = enum(i32) {
    COMPLETE = 0,
    REQUIREMENTS = 1,
    PROGRESS = 2,
    LOGGING_INFORMATION = 256,
    LOGGING_INFORMATION_PROVIDER = 512,
    LOGGING_INFORMATION_HOST = 1024,
    LOGGING_INFORMATION_REPOSITORY = 2048,
    LOGGING_INFORMATION_ESS = 4096,
};
pub const WBEM_STATUS_COMPLETE = WBEM_STATUS_TYPE.COMPLETE;
pub const WBEM_STATUS_REQUIREMENTS = WBEM_STATUS_TYPE.REQUIREMENTS;
pub const WBEM_STATUS_PROGRESS = WBEM_STATUS_TYPE.PROGRESS;
pub const WBEM_STATUS_LOGGING_INFORMATION = WBEM_STATUS_TYPE.LOGGING_INFORMATION;
pub const WBEM_STATUS_LOGGING_INFORMATION_PROVIDER = WBEM_STATUS_TYPE.LOGGING_INFORMATION_PROVIDER;
pub const WBEM_STATUS_LOGGING_INFORMATION_HOST = WBEM_STATUS_TYPE.LOGGING_INFORMATION_HOST;
pub const WBEM_STATUS_LOGGING_INFORMATION_REPOSITORY = WBEM_STATUS_TYPE.LOGGING_INFORMATION_REPOSITORY;
pub const WBEM_STATUS_LOGGING_INFORMATION_ESS = WBEM_STATUS_TYPE.LOGGING_INFORMATION_ESS;

pub const WBEM_TIMEOUT_TYPE = enum(i32) {
    NO_WAIT = 0,
    INFINITE = -1,
};
pub const WBEM_NO_WAIT = WBEM_TIMEOUT_TYPE.NO_WAIT;
pub const WBEM_INFINITE = WBEM_TIMEOUT_TYPE.INFINITE;

pub const WBEM_CONDITION_FLAG_TYPE = enum(i32) {
    FLAG_ALWAYS = 0,
    FLAG_ONLY_IF_TRUE = 1,
    FLAG_ONLY_IF_FALSE = 2,
    FLAG_ONLY_IF_IDENTICAL = 3,
    // MASK_PRIMARY_CONDITION = 3, this enum value conflicts with FLAG_ONLY_IF_IDENTICAL
    FLAG_KEYS_ONLY = 4,
    FLAG_REFS_ONLY = 8,
    FLAG_LOCAL_ONLY = 16,
    FLAG_PROPAGATED_ONLY = 32,
    FLAG_SYSTEM_ONLY = 48,
    FLAG_NONSYSTEM_ONLY = 64,
    MASK_CONDITION_ORIGIN = 112,
    FLAG_CLASS_OVERRIDES_ONLY = 256,
    FLAG_CLASS_LOCAL_AND_OVERRIDES = 512,
    MASK_CLASS_CONDITION = 768,
};
pub const WBEM_FLAG_ALWAYS = WBEM_CONDITION_FLAG_TYPE.FLAG_ALWAYS;
pub const WBEM_FLAG_ONLY_IF_TRUE = WBEM_CONDITION_FLAG_TYPE.FLAG_ONLY_IF_TRUE;
pub const WBEM_FLAG_ONLY_IF_FALSE = WBEM_CONDITION_FLAG_TYPE.FLAG_ONLY_IF_FALSE;
pub const WBEM_FLAG_ONLY_IF_IDENTICAL = WBEM_CONDITION_FLAG_TYPE.FLAG_ONLY_IF_IDENTICAL;
pub const WBEM_MASK_PRIMARY_CONDITION = WBEM_CONDITION_FLAG_TYPE.FLAG_ONLY_IF_IDENTICAL;
pub const WBEM_FLAG_KEYS_ONLY = WBEM_CONDITION_FLAG_TYPE.FLAG_KEYS_ONLY;
pub const WBEM_FLAG_REFS_ONLY = WBEM_CONDITION_FLAG_TYPE.FLAG_REFS_ONLY;
pub const WBEM_FLAG_LOCAL_ONLY = WBEM_CONDITION_FLAG_TYPE.FLAG_LOCAL_ONLY;
pub const WBEM_FLAG_PROPAGATED_ONLY = WBEM_CONDITION_FLAG_TYPE.FLAG_PROPAGATED_ONLY;
pub const WBEM_FLAG_SYSTEM_ONLY = WBEM_CONDITION_FLAG_TYPE.FLAG_SYSTEM_ONLY;
pub const WBEM_FLAG_NONSYSTEM_ONLY = WBEM_CONDITION_FLAG_TYPE.FLAG_NONSYSTEM_ONLY;
pub const WBEM_MASK_CONDITION_ORIGIN = WBEM_CONDITION_FLAG_TYPE.MASK_CONDITION_ORIGIN;
pub const WBEM_FLAG_CLASS_OVERRIDES_ONLY = WBEM_CONDITION_FLAG_TYPE.FLAG_CLASS_OVERRIDES_ONLY;
pub const WBEM_FLAG_CLASS_LOCAL_AND_OVERRIDES = WBEM_CONDITION_FLAG_TYPE.FLAG_CLASS_LOCAL_AND_OVERRIDES;
pub const WBEM_MASK_CLASS_CONDITION = WBEM_CONDITION_FLAG_TYPE.MASK_CLASS_CONDITION;

pub const WBEM_FLAVOR_TYPE = enum(i32) {
    DONT_PROPAGATE = 0,
    FLAG_PROPAGATE_TO_INSTANCE = 1,
    FLAG_PROPAGATE_TO_DERIVED_CLASS = 2,
    MASK_PROPAGATION = 15,
    // OVERRIDABLE = 0, this enum value conflicts with DONT_PROPAGATE
    NOT_OVERRIDABLE = 16,
    // MASK_PERMISSIONS = 16, this enum value conflicts with NOT_OVERRIDABLE
    // ORIGIN_LOCAL = 0, this enum value conflicts with DONT_PROPAGATE
    ORIGIN_PROPAGATED = 32,
    ORIGIN_SYSTEM = 64,
    MASK_ORIGIN = 96,
    // NOT_AMENDED = 0, this enum value conflicts with DONT_PROPAGATE
    AMENDED = 128,
    // MASK_AMENDED = 128, this enum value conflicts with AMENDED
};
pub const WBEM_FLAVOR_DONT_PROPAGATE = WBEM_FLAVOR_TYPE.DONT_PROPAGATE;
pub const WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE = WBEM_FLAVOR_TYPE.FLAG_PROPAGATE_TO_INSTANCE;
pub const WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS = WBEM_FLAVOR_TYPE.FLAG_PROPAGATE_TO_DERIVED_CLASS;
pub const WBEM_FLAVOR_MASK_PROPAGATION = WBEM_FLAVOR_TYPE.MASK_PROPAGATION;
pub const WBEM_FLAVOR_OVERRIDABLE = WBEM_FLAVOR_TYPE.DONT_PROPAGATE;
pub const WBEM_FLAVOR_NOT_OVERRIDABLE = WBEM_FLAVOR_TYPE.NOT_OVERRIDABLE;
pub const WBEM_FLAVOR_MASK_PERMISSIONS = WBEM_FLAVOR_TYPE.NOT_OVERRIDABLE;
pub const WBEM_FLAVOR_ORIGIN_LOCAL = WBEM_FLAVOR_TYPE.DONT_PROPAGATE;
pub const WBEM_FLAVOR_ORIGIN_PROPAGATED = WBEM_FLAVOR_TYPE.ORIGIN_PROPAGATED;
pub const WBEM_FLAVOR_ORIGIN_SYSTEM = WBEM_FLAVOR_TYPE.ORIGIN_SYSTEM;
pub const WBEM_FLAVOR_MASK_ORIGIN = WBEM_FLAVOR_TYPE.MASK_ORIGIN;
pub const WBEM_FLAVOR_NOT_AMENDED = WBEM_FLAVOR_TYPE.DONT_PROPAGATE;
pub const WBEM_FLAVOR_AMENDED = WBEM_FLAVOR_TYPE.AMENDED;
pub const WBEM_FLAVOR_MASK_AMENDED = WBEM_FLAVOR_TYPE.AMENDED;

pub const WBEM_QUERY_FLAG_TYPE = enum(i32) {
    DEEP = 0,
    SHALLOW = 1,
    PROTOTYPE = 2,
};
pub const WBEM_FLAG_DEEP = WBEM_QUERY_FLAG_TYPE.DEEP;
pub const WBEM_FLAG_SHALLOW = WBEM_QUERY_FLAG_TYPE.SHALLOW;
pub const WBEM_FLAG_PROTOTYPE = WBEM_QUERY_FLAG_TYPE.PROTOTYPE;

pub const WBEM_SECURITY_FLAGS = enum(i32) {
    ENABLE = 1,
    METHOD_EXECUTE = 2,
    FULL_WRITE_REP = 4,
    PARTIAL_WRITE_REP = 8,
    WRITE_PROVIDER = 16,
    REMOTE_ACCESS = 32,
    RIGHT_SUBSCRIBE = 64,
    RIGHT_PUBLISH = 128,
};
pub const WBEM_ENABLE = WBEM_SECURITY_FLAGS.ENABLE;
pub const WBEM_METHOD_EXECUTE = WBEM_SECURITY_FLAGS.METHOD_EXECUTE;
pub const WBEM_FULL_WRITE_REP = WBEM_SECURITY_FLAGS.FULL_WRITE_REP;
pub const WBEM_PARTIAL_WRITE_REP = WBEM_SECURITY_FLAGS.PARTIAL_WRITE_REP;
pub const WBEM_WRITE_PROVIDER = WBEM_SECURITY_FLAGS.WRITE_PROVIDER;
pub const WBEM_REMOTE_ACCESS = WBEM_SECURITY_FLAGS.REMOTE_ACCESS;
pub const WBEM_RIGHT_SUBSCRIBE = WBEM_SECURITY_FLAGS.RIGHT_SUBSCRIBE;
pub const WBEM_RIGHT_PUBLISH = WBEM_SECURITY_FLAGS.RIGHT_PUBLISH;

pub const WBEM_LIMITATION_FLAG_TYPE = enum(i32) {
    OBJECT_QUALIFIERS = 16,
    PROPERTY_QUALIFIERS = 32,
};
pub const WBEM_FLAG_EXCLUDE_OBJECT_QUALIFIERS = WBEM_LIMITATION_FLAG_TYPE.OBJECT_QUALIFIERS;
pub const WBEM_FLAG_EXCLUDE_PROPERTY_QUALIFIERS = WBEM_LIMITATION_FLAG_TYPE.PROPERTY_QUALIFIERS;

pub const WBEM_TEXT_FLAG_TYPE = enum(i32) {
    S = 1,
};
pub const WBEM_FLAG_NO_FLAVORS = WBEM_TEXT_FLAG_TYPE.S;

pub const WBEM_COMPARISON_FLAG = enum(i32) {
    COMPARISON_INCLUDE_ALL = 0,
    FLAG_IGNORE_QUALIFIERS = 1,
    FLAG_IGNORE_OBJECT_SOURCE = 2,
    FLAG_IGNORE_DEFAULT_VALUES = 4,
    FLAG_IGNORE_CLASS = 8,
    FLAG_IGNORE_CASE = 16,
    FLAG_IGNORE_FLAVOR = 32,
};
pub const WBEM_COMPARISON_INCLUDE_ALL = WBEM_COMPARISON_FLAG.COMPARISON_INCLUDE_ALL;
pub const WBEM_FLAG_IGNORE_QUALIFIERS = WBEM_COMPARISON_FLAG.FLAG_IGNORE_QUALIFIERS;
pub const WBEM_FLAG_IGNORE_OBJECT_SOURCE = WBEM_COMPARISON_FLAG.FLAG_IGNORE_OBJECT_SOURCE;
pub const WBEM_FLAG_IGNORE_DEFAULT_VALUES = WBEM_COMPARISON_FLAG.FLAG_IGNORE_DEFAULT_VALUES;
pub const WBEM_FLAG_IGNORE_CLASS = WBEM_COMPARISON_FLAG.FLAG_IGNORE_CLASS;
pub const WBEM_FLAG_IGNORE_CASE = WBEM_COMPARISON_FLAG.FLAG_IGNORE_CASE;
pub const WBEM_FLAG_IGNORE_FLAVOR = WBEM_COMPARISON_FLAG.FLAG_IGNORE_FLAVOR;

pub const WBEM_LOCKING = enum(i32) {
    D = 1,
};
pub const WBEM_FLAG_ALLOW_READ = WBEM_LOCKING.D;

pub const CIMTYPE_ENUMERATION = enum(i32) {
    ILLEGAL = 4095,
    EMPTY = 0,
    SINT8 = 16,
    UINT8 = 17,
    SINT16 = 2,
    UINT16 = 18,
    SINT32 = 3,
    UINT32 = 19,
    SINT64 = 20,
    UINT64 = 21,
    REAL32 = 4,
    REAL64 = 5,
    BOOLEAN = 11,
    STRING = 8,
    DATETIME = 101,
    REFERENCE = 102,
    CHAR16 = 103,
    OBJECT = 13,
    FLAG_ARRAY = 8192,
};
pub const CIM_ILLEGAL = CIMTYPE_ENUMERATION.ILLEGAL;
pub const CIM_EMPTY = CIMTYPE_ENUMERATION.EMPTY;
pub const CIM_SINT8 = CIMTYPE_ENUMERATION.SINT8;
pub const CIM_UINT8 = CIMTYPE_ENUMERATION.UINT8;
pub const CIM_SINT16 = CIMTYPE_ENUMERATION.SINT16;
pub const CIM_UINT16 = CIMTYPE_ENUMERATION.UINT16;
pub const CIM_SINT32 = CIMTYPE_ENUMERATION.SINT32;
pub const CIM_UINT32 = CIMTYPE_ENUMERATION.UINT32;
pub const CIM_SINT64 = CIMTYPE_ENUMERATION.SINT64;
pub const CIM_UINT64 = CIMTYPE_ENUMERATION.UINT64;
pub const CIM_REAL32 = CIMTYPE_ENUMERATION.REAL32;
pub const CIM_REAL64 = CIMTYPE_ENUMERATION.REAL64;
pub const CIM_BOOLEAN = CIMTYPE_ENUMERATION.BOOLEAN;
pub const CIM_STRING = CIMTYPE_ENUMERATION.STRING;
pub const CIM_DATETIME = CIMTYPE_ENUMERATION.DATETIME;
pub const CIM_REFERENCE = CIMTYPE_ENUMERATION.REFERENCE;
pub const CIM_CHAR16 = CIMTYPE_ENUMERATION.CHAR16;
pub const CIM_OBJECT = CIMTYPE_ENUMERATION.OBJECT;
pub const CIM_FLAG_ARRAY = CIMTYPE_ENUMERATION.FLAG_ARRAY;

pub const WBEM_BACKUP_RESTORE_FLAGS = enum(i32) {
    DEFAULT = 0,
    FORCE_SHUTDOWN = 1,
};
pub const WBEM_FLAG_BACKUP_RESTORE_DEFAULT = WBEM_BACKUP_RESTORE_FLAGS.DEFAULT;
pub const WBEM_FLAG_BACKUP_RESTORE_FORCE_SHUTDOWN = WBEM_BACKUP_RESTORE_FLAGS.FORCE_SHUTDOWN;

pub const WBEM_REFRESHER_FLAGS = enum(i32) {
    AUTO_RECONNECT = 0,
    NO_AUTO_RECONNECT = 1,
};
pub const WBEM_FLAG_REFRESH_AUTO_RECONNECT = WBEM_REFRESHER_FLAGS.AUTO_RECONNECT;
pub const WBEM_FLAG_REFRESH_NO_AUTO_RECONNECT = WBEM_REFRESHER_FLAGS.NO_AUTO_RECONNECT;

pub const WBEM_SHUTDOWN_FLAGS = enum(i32) {
    UNLOAD_COMPONENT = 1,
    WMI = 2,
    OS = 3,
};
pub const WBEM_SHUTDOWN_UNLOAD_COMPONENT = WBEM_SHUTDOWN_FLAGS.UNLOAD_COMPONENT;
pub const WBEM_SHUTDOWN_WMI = WBEM_SHUTDOWN_FLAGS.WMI;
pub const WBEM_SHUTDOWN_OS = WBEM_SHUTDOWN_FLAGS.OS;

pub const WBEMSTATUS_FORMAT = enum(i32) {
    EWLINE = 0,
    O_NEWLINE = 1,
};
pub const WBEMSTATUS_FORMAT_NEWLINE = WBEMSTATUS_FORMAT.EWLINE;
pub const WBEMSTATUS_FORMAT_NO_NEWLINE = WBEMSTATUS_FORMAT.O_NEWLINE;

pub const WBEM_LIMITS = enum(i32) {
    IDENTIFIER = 4096,
    QUERY = 16384,
    PATH = 8192,
    OBJECT_NESTING = 64,
    USER_PROPERTIES = 1024,
};
pub const WBEM_MAX_IDENTIFIER = WBEM_LIMITS.IDENTIFIER;
pub const WBEM_MAX_QUERY = WBEM_LIMITS.QUERY;
pub const WBEM_MAX_PATH = WBEM_LIMITS.PATH;
pub const WBEM_MAX_OBJECT_NESTING = WBEM_LIMITS.OBJECT_NESTING;
pub const WBEM_MAX_USER_PROPERTIES = WBEM_LIMITS.USER_PROPERTIES;

pub const WBEMSTATUS = enum(i32) {
    _NO_ERROR = 0,
    // _S_NO_ERROR = 0, this enum value conflicts with _NO_ERROR
    // _S_SAME = 0, this enum value conflicts with _NO_ERROR
    _S_FALSE = 1,
    _S_ALREADY_EXISTS = 262145,
    _S_RESET_TO_DEFAULT = 262146,
    _S_DIFFERENT = 262147,
    _S_TIMEDOUT = 262148,
    _S_NO_MORE_DATA = 262149,
    _S_OPERATION_CANCELLED = 262150,
    _S_PENDING = 262151,
    _S_DUPLICATE_OBJECTS = 262152,
    _S_ACCESS_DENIED = 262153,
    _S_PARTIAL_RESULTS = 262160,
    _S_SOURCE_NOT_AVAILABLE = 262167,
    _E_FAILED = -2147217407,
    _E_NOT_FOUND = -2147217406,
    _E_ACCESS_DENIED = -2147217405,
    _E_PROVIDER_FAILURE = -2147217404,
    _E_TYPE_MISMATCH = -2147217403,
    _E_OUT_OF_MEMORY = -2147217402,
    _E_INVALID_CONTEXT = -2147217401,
    _E_INVALID_PARAMETER = -2147217400,
    _E_NOT_AVAILABLE = -2147217399,
    _E_CRITICAL_ERROR = -2147217398,
    _E_INVALID_STREAM = -2147217397,
    _E_NOT_SUPPORTED = -2147217396,
    _E_INVALID_SUPERCLASS = -2147217395,
    _E_INVALID_NAMESPACE = -2147217394,
    _E_INVALID_OBJECT = -2147217393,
    _E_INVALID_CLASS = -2147217392,
    _E_PROVIDER_NOT_FOUND = -2147217391,
    _E_INVALID_PROVIDER_REGISTRATION = -2147217390,
    _E_PROVIDER_LOAD_FAILURE = -2147217389,
    _E_INITIALIZATION_FAILURE = -2147217388,
    _E_TRANSPORT_FAILURE = -2147217387,
    _E_INVALID_OPERATION = -2147217386,
    _E_INVALID_QUERY = -2147217385,
    _E_INVALID_QUERY_TYPE = -2147217384,
    _E_ALREADY_EXISTS = -2147217383,
    _E_OVERRIDE_NOT_ALLOWED = -2147217382,
    _E_PROPAGATED_QUALIFIER = -2147217381,
    _E_PROPAGATED_PROPERTY = -2147217380,
    _E_UNEXPECTED = -2147217379,
    _E_ILLEGAL_OPERATION = -2147217378,
    _E_CANNOT_BE_KEY = -2147217377,
    _E_INCOMPLETE_CLASS = -2147217376,
    _E_INVALID_SYNTAX = -2147217375,
    _E_NONDECORATED_OBJECT = -2147217374,
    _E_READ_ONLY = -2147217373,
    _E_PROVIDER_NOT_CAPABLE = -2147217372,
    _E_CLASS_HAS_CHILDREN = -2147217371,
    _E_CLASS_HAS_INSTANCES = -2147217370,
    _E_QUERY_NOT_IMPLEMENTED = -2147217369,
    _E_ILLEGAL_NULL = -2147217368,
    _E_INVALID_QUALIFIER_TYPE = -2147217367,
    _E_INVALID_PROPERTY_TYPE = -2147217366,
    _E_VALUE_OUT_OF_RANGE = -2147217365,
    _E_CANNOT_BE_SINGLETON = -2147217364,
    _E_INVALID_CIM_TYPE = -2147217363,
    _E_INVALID_METHOD = -2147217362,
    _E_INVALID_METHOD_PARAMETERS = -2147217361,
    _E_SYSTEM_PROPERTY = -2147217360,
    _E_INVALID_PROPERTY = -2147217359,
    _E_CALL_CANCELLED = -2147217358,
    _E_SHUTTING_DOWN = -2147217357,
    _E_PROPAGATED_METHOD = -2147217356,
    _E_UNSUPPORTED_PARAMETER = -2147217355,
    _E_MISSING_PARAMETER_ID = -2147217354,
    _E_INVALID_PARAMETER_ID = -2147217353,
    _E_NONCONSECUTIVE_PARAMETER_IDS = -2147217352,
    _E_PARAMETER_ID_ON_RETVAL = -2147217351,
    _E_INVALID_OBJECT_PATH = -2147217350,
    _E_OUT_OF_DISK_SPACE = -2147217349,
    _E_BUFFER_TOO_SMALL = -2147217348,
    _E_UNSUPPORTED_PUT_EXTENSION = -2147217347,
    _E_UNKNOWN_OBJECT_TYPE = -2147217346,
    _E_UNKNOWN_PACKET_TYPE = -2147217345,
    _E_MARSHAL_VERSION_MISMATCH = -2147217344,
    _E_MARSHAL_INVALID_SIGNATURE = -2147217343,
    _E_INVALID_QUALIFIER = -2147217342,
    _E_INVALID_DUPLICATE_PARAMETER = -2147217341,
    _E_TOO_MUCH_DATA = -2147217340,
    _E_SERVER_TOO_BUSY = -2147217339,
    _E_INVALID_FLAVOR = -2147217338,
    _E_CIRCULAR_REFERENCE = -2147217337,
    _E_UNSUPPORTED_CLASS_UPDATE = -2147217336,
    _E_CANNOT_CHANGE_KEY_INHERITANCE = -2147217335,
    _E_CANNOT_CHANGE_INDEX_INHERITANCE = -2147217328,
    _E_TOO_MANY_PROPERTIES = -2147217327,
    _E_UPDATE_TYPE_MISMATCH = -2147217326,
    _E_UPDATE_OVERRIDE_NOT_ALLOWED = -2147217325,
    _E_UPDATE_PROPAGATED_METHOD = -2147217324,
    _E_METHOD_NOT_IMPLEMENTED = -2147217323,
    _E_METHOD_DISABLED = -2147217322,
    _E_REFRESHER_BUSY = -2147217321,
    _E_UNPARSABLE_QUERY = -2147217320,
    _E_NOT_EVENT_CLASS = -2147217319,
    _E_MISSING_GROUP_WITHIN = -2147217318,
    _E_MISSING_AGGREGATION_LIST = -2147217317,
    _E_PROPERTY_NOT_AN_OBJECT = -2147217316,
    _E_AGGREGATING_BY_OBJECT = -2147217315,
    _E_UNINTERPRETABLE_PROVIDER_QUERY = -2147217313,
    _E_BACKUP_RESTORE_WINMGMT_RUNNING = -2147217312,
    _E_QUEUE_OVERFLOW = -2147217311,
    _E_PRIVILEGE_NOT_HELD = -2147217310,
    _E_INVALID_OPERATOR = -2147217309,
    _E_LOCAL_CREDENTIALS = -2147217308,
    _E_CANNOT_BE_ABSTRACT = -2147217307,
    _E_AMENDED_OBJECT = -2147217306,
    _E_CLIENT_TOO_SLOW = -2147217305,
    _E_NULL_SECURITY_DESCRIPTOR = -2147217304,
    _E_TIMED_OUT = -2147217303,
    _E_INVALID_ASSOCIATION = -2147217302,
    _E_AMBIGUOUS_OPERATION = -2147217301,
    _E_QUOTA_VIOLATION = -2147217300,
    _E_RESERVED_001 = -2147217299,
    _E_RESERVED_002 = -2147217298,
    _E_UNSUPPORTED_LOCALE = -2147217297,
    _E_HANDLE_OUT_OF_DATE = -2147217296,
    _E_CONNECTION_FAILED = -2147217295,
    _E_INVALID_HANDLE_REQUEST = -2147217294,
    _E_PROPERTY_NAME_TOO_WIDE = -2147217293,
    _E_CLASS_NAME_TOO_WIDE = -2147217292,
    _E_METHOD_NAME_TOO_WIDE = -2147217291,
    _E_QUALIFIER_NAME_TOO_WIDE = -2147217290,
    _E_RERUN_COMMAND = -2147217289,
    _E_DATABASE_VER_MISMATCH = -2147217288,
    _E_VETO_DELETE = -2147217287,
    _E_VETO_PUT = -2147217286,
    _E_INVALID_LOCALE = -2147217280,
    _E_PROVIDER_SUSPENDED = -2147217279,
    _E_SYNCHRONIZATION_REQUIRED = -2147217278,
    _E_NO_SCHEMA = -2147217277,
    _E_PROVIDER_ALREADY_REGISTERED = -2147217276,
    _E_PROVIDER_NOT_REGISTERED = -2147217275,
    _E_FATAL_TRANSPORT_ERROR = -2147217274,
    _E_ENCRYPTED_CONNECTION_REQUIRED = -2147217273,
    _E_PROVIDER_TIMED_OUT = -2147217272,
    _E_NO_KEY = -2147217271,
    _E_PROVIDER_DISABLED = -2147217270,
    ESS_E_REGISTRATION_TOO_BROAD = -2147213311,
    ESS_E_REGISTRATION_TOO_PRECISE = -2147213310,
    ESS_E_AUTHZ_NOT_PRIVILEGED = -2147213309,
    MOF_E_EXPECTED_QUALIFIER_NAME = -2147205119,
    MOF_E_EXPECTED_SEMI = -2147205118,
    MOF_E_EXPECTED_OPEN_BRACE = -2147205117,
    MOF_E_EXPECTED_CLOSE_BRACE = -2147205116,
    MOF_E_EXPECTED_CLOSE_BRACKET = -2147205115,
    MOF_E_EXPECTED_CLOSE_PAREN = -2147205114,
    MOF_E_ILLEGAL_CONSTANT_VALUE = -2147205113,
    MOF_E_EXPECTED_TYPE_IDENTIFIER = -2147205112,
    MOF_E_EXPECTED_OPEN_PAREN = -2147205111,
    MOF_E_UNRECOGNIZED_TOKEN = -2147205110,
    MOF_E_UNRECOGNIZED_TYPE = -2147205109,
    MOF_E_EXPECTED_PROPERTY_NAME = -2147205108,
    MOF_E_TYPEDEF_NOT_SUPPORTED = -2147205107,
    MOF_E_UNEXPECTED_ALIAS = -2147205106,
    MOF_E_UNEXPECTED_ARRAY_INIT = -2147205105,
    MOF_E_INVALID_AMENDMENT_SYNTAX = -2147205104,
    MOF_E_INVALID_DUPLICATE_AMENDMENT = -2147205103,
    MOF_E_INVALID_PRAGMA = -2147205102,
    MOF_E_INVALID_NAMESPACE_SYNTAX = -2147205101,
    MOF_E_EXPECTED_CLASS_NAME = -2147205100,
    MOF_E_TYPE_MISMATCH = -2147205099,
    MOF_E_EXPECTED_ALIAS_NAME = -2147205098,
    MOF_E_INVALID_CLASS_DECLARATION = -2147205097,
    MOF_E_INVALID_INSTANCE_DECLARATION = -2147205096,
    MOF_E_EXPECTED_DOLLAR = -2147205095,
    MOF_E_CIMTYPE_QUALIFIER = -2147205094,
    MOF_E_DUPLICATE_PROPERTY = -2147205093,
    MOF_E_INVALID_NAMESPACE_SPECIFICATION = -2147205092,
    MOF_E_OUT_OF_RANGE = -2147205091,
    MOF_E_INVALID_FILE = -2147205090,
    MOF_E_ALIASES_IN_EMBEDDED = -2147205089,
    MOF_E_NULL_ARRAY_ELEM = -2147205088,
    MOF_E_DUPLICATE_QUALIFIER = -2147205087,
    MOF_E_EXPECTED_FLAVOR_TYPE = -2147205086,
    MOF_E_INCOMPATIBLE_FLAVOR_TYPES = -2147205085,
    MOF_E_MULTIPLE_ALIASES = -2147205084,
    MOF_E_INCOMPATIBLE_FLAVOR_TYPES2 = -2147205083,
    MOF_E_NO_ARRAYS_RETURNED = -2147205082,
    MOF_E_MUST_BE_IN_OR_OUT = -2147205081,
    MOF_E_INVALID_FLAGS_SYNTAX = -2147205080,
    MOF_E_EXPECTED_BRACE_OR_BAD_TYPE = -2147205079,
    MOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE = -2147205078,
    MOF_E_UNSUPPORTED_CIMV22_DATA_TYPE = -2147205077,
    MOF_E_INVALID_DELETEINSTANCE_SYNTAX = -2147205076,
    MOF_E_INVALID_QUALIFIER_SYNTAX = -2147205075,
    MOF_E_QUALIFIER_USED_OUTSIDE_SCOPE = -2147205074,
    MOF_E_ERROR_CREATING_TEMP_FILE = -2147205073,
    MOF_E_ERROR_INVALID_INCLUDE_FILE = -2147205072,
    MOF_E_INVALID_DELETECLASS_SYNTAX = -2147205071,
};
pub const WBEM_NO_ERROR = WBEMSTATUS._NO_ERROR;
pub const WBEM_S_NO_ERROR = WBEMSTATUS._NO_ERROR;
pub const WBEM_S_SAME = WBEMSTATUS._NO_ERROR;
pub const WBEM_S_FALSE = WBEMSTATUS._S_FALSE;
pub const WBEM_S_ALREADY_EXISTS = WBEMSTATUS._S_ALREADY_EXISTS;
pub const WBEM_S_RESET_TO_DEFAULT = WBEMSTATUS._S_RESET_TO_DEFAULT;
pub const WBEM_S_DIFFERENT = WBEMSTATUS._S_DIFFERENT;
pub const WBEM_S_TIMEDOUT = WBEMSTATUS._S_TIMEDOUT;
pub const WBEM_S_NO_MORE_DATA = WBEMSTATUS._S_NO_MORE_DATA;
pub const WBEM_S_OPERATION_CANCELLED = WBEMSTATUS._S_OPERATION_CANCELLED;
pub const WBEM_S_PENDING = WBEMSTATUS._S_PENDING;
pub const WBEM_S_DUPLICATE_OBJECTS = WBEMSTATUS._S_DUPLICATE_OBJECTS;
pub const WBEM_S_ACCESS_DENIED = WBEMSTATUS._S_ACCESS_DENIED;
pub const WBEM_S_PARTIAL_RESULTS = WBEMSTATUS._S_PARTIAL_RESULTS;
pub const WBEM_S_SOURCE_NOT_AVAILABLE = WBEMSTATUS._S_SOURCE_NOT_AVAILABLE;
pub const WBEM_E_FAILED = WBEMSTATUS._E_FAILED;
pub const WBEM_E_NOT_FOUND = WBEMSTATUS._E_NOT_FOUND;
pub const WBEM_E_ACCESS_DENIED = WBEMSTATUS._E_ACCESS_DENIED;
pub const WBEM_E_PROVIDER_FAILURE = WBEMSTATUS._E_PROVIDER_FAILURE;
pub const WBEM_E_TYPE_MISMATCH = WBEMSTATUS._E_TYPE_MISMATCH;
pub const WBEM_E_OUT_OF_MEMORY = WBEMSTATUS._E_OUT_OF_MEMORY;
pub const WBEM_E_INVALID_CONTEXT = WBEMSTATUS._E_INVALID_CONTEXT;
pub const WBEM_E_INVALID_PARAMETER = WBEMSTATUS._E_INVALID_PARAMETER;
pub const WBEM_E_NOT_AVAILABLE = WBEMSTATUS._E_NOT_AVAILABLE;
pub const WBEM_E_CRITICAL_ERROR = WBEMSTATUS._E_CRITICAL_ERROR;
pub const WBEM_E_INVALID_STREAM = WBEMSTATUS._E_INVALID_STREAM;
pub const WBEM_E_NOT_SUPPORTED = WBEMSTATUS._E_NOT_SUPPORTED;
pub const WBEM_E_INVALID_SUPERCLASS = WBEMSTATUS._E_INVALID_SUPERCLASS;
pub const WBEM_E_INVALID_NAMESPACE = WBEMSTATUS._E_INVALID_NAMESPACE;
pub const WBEM_E_INVALID_OBJECT = WBEMSTATUS._E_INVALID_OBJECT;
pub const WBEM_E_INVALID_CLASS = WBEMSTATUS._E_INVALID_CLASS;
pub const WBEM_E_PROVIDER_NOT_FOUND = WBEMSTATUS._E_PROVIDER_NOT_FOUND;
pub const WBEM_E_INVALID_PROVIDER_REGISTRATION = WBEMSTATUS._E_INVALID_PROVIDER_REGISTRATION;
pub const WBEM_E_PROVIDER_LOAD_FAILURE = WBEMSTATUS._E_PROVIDER_LOAD_FAILURE;
pub const WBEM_E_INITIALIZATION_FAILURE = WBEMSTATUS._E_INITIALIZATION_FAILURE;
pub const WBEM_E_TRANSPORT_FAILURE = WBEMSTATUS._E_TRANSPORT_FAILURE;
pub const WBEM_E_INVALID_OPERATION = WBEMSTATUS._E_INVALID_OPERATION;
pub const WBEM_E_INVALID_QUERY = WBEMSTATUS._E_INVALID_QUERY;
pub const WBEM_E_INVALID_QUERY_TYPE = WBEMSTATUS._E_INVALID_QUERY_TYPE;
pub const WBEM_E_ALREADY_EXISTS = WBEMSTATUS._E_ALREADY_EXISTS;
pub const WBEM_E_OVERRIDE_NOT_ALLOWED = WBEMSTATUS._E_OVERRIDE_NOT_ALLOWED;
pub const WBEM_E_PROPAGATED_QUALIFIER = WBEMSTATUS._E_PROPAGATED_QUALIFIER;
pub const WBEM_E_PROPAGATED_PROPERTY = WBEMSTATUS._E_PROPAGATED_PROPERTY;
pub const WBEM_E_UNEXPECTED = WBEMSTATUS._E_UNEXPECTED;
pub const WBEM_E_ILLEGAL_OPERATION = WBEMSTATUS._E_ILLEGAL_OPERATION;
pub const WBEM_E_CANNOT_BE_KEY = WBEMSTATUS._E_CANNOT_BE_KEY;
pub const WBEM_E_INCOMPLETE_CLASS = WBEMSTATUS._E_INCOMPLETE_CLASS;
pub const WBEM_E_INVALID_SYNTAX = WBEMSTATUS._E_INVALID_SYNTAX;
pub const WBEM_E_NONDECORATED_OBJECT = WBEMSTATUS._E_NONDECORATED_OBJECT;
pub const WBEM_E_READ_ONLY = WBEMSTATUS._E_READ_ONLY;
pub const WBEM_E_PROVIDER_NOT_CAPABLE = WBEMSTATUS._E_PROVIDER_NOT_CAPABLE;
pub const WBEM_E_CLASS_HAS_CHILDREN = WBEMSTATUS._E_CLASS_HAS_CHILDREN;
pub const WBEM_E_CLASS_HAS_INSTANCES = WBEMSTATUS._E_CLASS_HAS_INSTANCES;
pub const WBEM_E_QUERY_NOT_IMPLEMENTED = WBEMSTATUS._E_QUERY_NOT_IMPLEMENTED;
pub const WBEM_E_ILLEGAL_NULL = WBEMSTATUS._E_ILLEGAL_NULL;
pub const WBEM_E_INVALID_QUALIFIER_TYPE = WBEMSTATUS._E_INVALID_QUALIFIER_TYPE;
pub const WBEM_E_INVALID_PROPERTY_TYPE = WBEMSTATUS._E_INVALID_PROPERTY_TYPE;
pub const WBEM_E_VALUE_OUT_OF_RANGE = WBEMSTATUS._E_VALUE_OUT_OF_RANGE;
pub const WBEM_E_CANNOT_BE_SINGLETON = WBEMSTATUS._E_CANNOT_BE_SINGLETON;
pub const WBEM_E_INVALID_CIM_TYPE = WBEMSTATUS._E_INVALID_CIM_TYPE;
pub const WBEM_E_INVALID_METHOD = WBEMSTATUS._E_INVALID_METHOD;
pub const WBEM_E_INVALID_METHOD_PARAMETERS = WBEMSTATUS._E_INVALID_METHOD_PARAMETERS;
pub const WBEM_E_SYSTEM_PROPERTY = WBEMSTATUS._E_SYSTEM_PROPERTY;
pub const WBEM_E_INVALID_PROPERTY = WBEMSTATUS._E_INVALID_PROPERTY;
pub const WBEM_E_CALL_CANCELLED = WBEMSTATUS._E_CALL_CANCELLED;
pub const WBEM_E_SHUTTING_DOWN = WBEMSTATUS._E_SHUTTING_DOWN;
pub const WBEM_E_PROPAGATED_METHOD = WBEMSTATUS._E_PROPAGATED_METHOD;
pub const WBEM_E_UNSUPPORTED_PARAMETER = WBEMSTATUS._E_UNSUPPORTED_PARAMETER;
pub const WBEM_E_MISSING_PARAMETER_ID = WBEMSTATUS._E_MISSING_PARAMETER_ID;
pub const WBEM_E_INVALID_PARAMETER_ID = WBEMSTATUS._E_INVALID_PARAMETER_ID;
pub const WBEM_E_NONCONSECUTIVE_PARAMETER_IDS = WBEMSTATUS._E_NONCONSECUTIVE_PARAMETER_IDS;
pub const WBEM_E_PARAMETER_ID_ON_RETVAL = WBEMSTATUS._E_PARAMETER_ID_ON_RETVAL;
pub const WBEM_E_INVALID_OBJECT_PATH = WBEMSTATUS._E_INVALID_OBJECT_PATH;
pub const WBEM_E_OUT_OF_DISK_SPACE = WBEMSTATUS._E_OUT_OF_DISK_SPACE;
pub const WBEM_E_BUFFER_TOO_SMALL = WBEMSTATUS._E_BUFFER_TOO_SMALL;
pub const WBEM_E_UNSUPPORTED_PUT_EXTENSION = WBEMSTATUS._E_UNSUPPORTED_PUT_EXTENSION;
pub const WBEM_E_UNKNOWN_OBJECT_TYPE = WBEMSTATUS._E_UNKNOWN_OBJECT_TYPE;
pub const WBEM_E_UNKNOWN_PACKET_TYPE = WBEMSTATUS._E_UNKNOWN_PACKET_TYPE;
pub const WBEM_E_MARSHAL_VERSION_MISMATCH = WBEMSTATUS._E_MARSHAL_VERSION_MISMATCH;
pub const WBEM_E_MARSHAL_INVALID_SIGNATURE = WBEMSTATUS._E_MARSHAL_INVALID_SIGNATURE;
pub const WBEM_E_INVALID_QUALIFIER = WBEMSTATUS._E_INVALID_QUALIFIER;
pub const WBEM_E_INVALID_DUPLICATE_PARAMETER = WBEMSTATUS._E_INVALID_DUPLICATE_PARAMETER;
pub const WBEM_E_TOO_MUCH_DATA = WBEMSTATUS._E_TOO_MUCH_DATA;
pub const WBEM_E_SERVER_TOO_BUSY = WBEMSTATUS._E_SERVER_TOO_BUSY;
pub const WBEM_E_INVALID_FLAVOR = WBEMSTATUS._E_INVALID_FLAVOR;
pub const WBEM_E_CIRCULAR_REFERENCE = WBEMSTATUS._E_CIRCULAR_REFERENCE;
pub const WBEM_E_UNSUPPORTED_CLASS_UPDATE = WBEMSTATUS._E_UNSUPPORTED_CLASS_UPDATE;
pub const WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE = WBEMSTATUS._E_CANNOT_CHANGE_KEY_INHERITANCE;
pub const WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE = WBEMSTATUS._E_CANNOT_CHANGE_INDEX_INHERITANCE;
pub const WBEM_E_TOO_MANY_PROPERTIES = WBEMSTATUS._E_TOO_MANY_PROPERTIES;
pub const WBEM_E_UPDATE_TYPE_MISMATCH = WBEMSTATUS._E_UPDATE_TYPE_MISMATCH;
pub const WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED = WBEMSTATUS._E_UPDATE_OVERRIDE_NOT_ALLOWED;
pub const WBEM_E_UPDATE_PROPAGATED_METHOD = WBEMSTATUS._E_UPDATE_PROPAGATED_METHOD;
pub const WBEM_E_METHOD_NOT_IMPLEMENTED = WBEMSTATUS._E_METHOD_NOT_IMPLEMENTED;
pub const WBEM_E_METHOD_DISABLED = WBEMSTATUS._E_METHOD_DISABLED;
pub const WBEM_E_REFRESHER_BUSY = WBEMSTATUS._E_REFRESHER_BUSY;
pub const WBEM_E_UNPARSABLE_QUERY = WBEMSTATUS._E_UNPARSABLE_QUERY;
pub const WBEM_E_NOT_EVENT_CLASS = WBEMSTATUS._E_NOT_EVENT_CLASS;
pub const WBEM_E_MISSING_GROUP_WITHIN = WBEMSTATUS._E_MISSING_GROUP_WITHIN;
pub const WBEM_E_MISSING_AGGREGATION_LIST = WBEMSTATUS._E_MISSING_AGGREGATION_LIST;
pub const WBEM_E_PROPERTY_NOT_AN_OBJECT = WBEMSTATUS._E_PROPERTY_NOT_AN_OBJECT;
pub const WBEM_E_AGGREGATING_BY_OBJECT = WBEMSTATUS._E_AGGREGATING_BY_OBJECT;
pub const WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY = WBEMSTATUS._E_UNINTERPRETABLE_PROVIDER_QUERY;
pub const WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING = WBEMSTATUS._E_BACKUP_RESTORE_WINMGMT_RUNNING;
pub const WBEM_E_QUEUE_OVERFLOW = WBEMSTATUS._E_QUEUE_OVERFLOW;
pub const WBEM_E_PRIVILEGE_NOT_HELD = WBEMSTATUS._E_PRIVILEGE_NOT_HELD;
pub const WBEM_E_INVALID_OPERATOR = WBEMSTATUS._E_INVALID_OPERATOR;
pub const WBEM_E_LOCAL_CREDENTIALS = WBEMSTATUS._E_LOCAL_CREDENTIALS;
pub const WBEM_E_CANNOT_BE_ABSTRACT = WBEMSTATUS._E_CANNOT_BE_ABSTRACT;
pub const WBEM_E_AMENDED_OBJECT = WBEMSTATUS._E_AMENDED_OBJECT;
pub const WBEM_E_CLIENT_TOO_SLOW = WBEMSTATUS._E_CLIENT_TOO_SLOW;
pub const WBEM_E_NULL_SECURITY_DESCRIPTOR = WBEMSTATUS._E_NULL_SECURITY_DESCRIPTOR;
pub const WBEM_E_TIMED_OUT = WBEMSTATUS._E_TIMED_OUT;
pub const WBEM_E_INVALID_ASSOCIATION = WBEMSTATUS._E_INVALID_ASSOCIATION;
pub const WBEM_E_AMBIGUOUS_OPERATION = WBEMSTATUS._E_AMBIGUOUS_OPERATION;
pub const WBEM_E_QUOTA_VIOLATION = WBEMSTATUS._E_QUOTA_VIOLATION;
pub const WBEM_E_RESERVED_001 = WBEMSTATUS._E_RESERVED_001;
pub const WBEM_E_RESERVED_002 = WBEMSTATUS._E_RESERVED_002;
pub const WBEM_E_UNSUPPORTED_LOCALE = WBEMSTATUS._E_UNSUPPORTED_LOCALE;
pub const WBEM_E_HANDLE_OUT_OF_DATE = WBEMSTATUS._E_HANDLE_OUT_OF_DATE;
pub const WBEM_E_CONNECTION_FAILED = WBEMSTATUS._E_CONNECTION_FAILED;
pub const WBEM_E_INVALID_HANDLE_REQUEST = WBEMSTATUS._E_INVALID_HANDLE_REQUEST;
pub const WBEM_E_PROPERTY_NAME_TOO_WIDE = WBEMSTATUS._E_PROPERTY_NAME_TOO_WIDE;
pub const WBEM_E_CLASS_NAME_TOO_WIDE = WBEMSTATUS._E_CLASS_NAME_TOO_WIDE;
pub const WBEM_E_METHOD_NAME_TOO_WIDE = WBEMSTATUS._E_METHOD_NAME_TOO_WIDE;
pub const WBEM_E_QUALIFIER_NAME_TOO_WIDE = WBEMSTATUS._E_QUALIFIER_NAME_TOO_WIDE;
pub const WBEM_E_RERUN_COMMAND = WBEMSTATUS._E_RERUN_COMMAND;
pub const WBEM_E_DATABASE_VER_MISMATCH = WBEMSTATUS._E_DATABASE_VER_MISMATCH;
pub const WBEM_E_VETO_DELETE = WBEMSTATUS._E_VETO_DELETE;
pub const WBEM_E_VETO_PUT = WBEMSTATUS._E_VETO_PUT;
pub const WBEM_E_INVALID_LOCALE = WBEMSTATUS._E_INVALID_LOCALE;
pub const WBEM_E_PROVIDER_SUSPENDED = WBEMSTATUS._E_PROVIDER_SUSPENDED;
pub const WBEM_E_SYNCHRONIZATION_REQUIRED = WBEMSTATUS._E_SYNCHRONIZATION_REQUIRED;
pub const WBEM_E_NO_SCHEMA = WBEMSTATUS._E_NO_SCHEMA;
pub const WBEM_E_PROVIDER_ALREADY_REGISTERED = WBEMSTATUS._E_PROVIDER_ALREADY_REGISTERED;
pub const WBEM_E_PROVIDER_NOT_REGISTERED = WBEMSTATUS._E_PROVIDER_NOT_REGISTERED;
pub const WBEM_E_FATAL_TRANSPORT_ERROR = WBEMSTATUS._E_FATAL_TRANSPORT_ERROR;
pub const WBEM_E_ENCRYPTED_CONNECTION_REQUIRED = WBEMSTATUS._E_ENCRYPTED_CONNECTION_REQUIRED;
pub const WBEM_E_PROVIDER_TIMED_OUT = WBEMSTATUS._E_PROVIDER_TIMED_OUT;
pub const WBEM_E_NO_KEY = WBEMSTATUS._E_NO_KEY;
pub const WBEM_E_PROVIDER_DISABLED = WBEMSTATUS._E_PROVIDER_DISABLED;
pub const WBEMESS_E_REGISTRATION_TOO_BROAD = WBEMSTATUS.ESS_E_REGISTRATION_TOO_BROAD;
pub const WBEMESS_E_REGISTRATION_TOO_PRECISE = WBEMSTATUS.ESS_E_REGISTRATION_TOO_PRECISE;
pub const WBEMESS_E_AUTHZ_NOT_PRIVILEGED = WBEMSTATUS.ESS_E_AUTHZ_NOT_PRIVILEGED;
pub const WBEMMOF_E_EXPECTED_QUALIFIER_NAME = WBEMSTATUS.MOF_E_EXPECTED_QUALIFIER_NAME;
pub const WBEMMOF_E_EXPECTED_SEMI = WBEMSTATUS.MOF_E_EXPECTED_SEMI;
pub const WBEMMOF_E_EXPECTED_OPEN_BRACE = WBEMSTATUS.MOF_E_EXPECTED_OPEN_BRACE;
pub const WBEMMOF_E_EXPECTED_CLOSE_BRACE = WBEMSTATUS.MOF_E_EXPECTED_CLOSE_BRACE;
pub const WBEMMOF_E_EXPECTED_CLOSE_BRACKET = WBEMSTATUS.MOF_E_EXPECTED_CLOSE_BRACKET;
pub const WBEMMOF_E_EXPECTED_CLOSE_PAREN = WBEMSTATUS.MOF_E_EXPECTED_CLOSE_PAREN;
pub const WBEMMOF_E_ILLEGAL_CONSTANT_VALUE = WBEMSTATUS.MOF_E_ILLEGAL_CONSTANT_VALUE;
pub const WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER = WBEMSTATUS.MOF_E_EXPECTED_TYPE_IDENTIFIER;
pub const WBEMMOF_E_EXPECTED_OPEN_PAREN = WBEMSTATUS.MOF_E_EXPECTED_OPEN_PAREN;
pub const WBEMMOF_E_UNRECOGNIZED_TOKEN = WBEMSTATUS.MOF_E_UNRECOGNIZED_TOKEN;
pub const WBEMMOF_E_UNRECOGNIZED_TYPE = WBEMSTATUS.MOF_E_UNRECOGNIZED_TYPE;
pub const WBEMMOF_E_EXPECTED_PROPERTY_NAME = WBEMSTATUS.MOF_E_EXPECTED_PROPERTY_NAME;
pub const WBEMMOF_E_TYPEDEF_NOT_SUPPORTED = WBEMSTATUS.MOF_E_TYPEDEF_NOT_SUPPORTED;
pub const WBEMMOF_E_UNEXPECTED_ALIAS = WBEMSTATUS.MOF_E_UNEXPECTED_ALIAS;
pub const WBEMMOF_E_UNEXPECTED_ARRAY_INIT = WBEMSTATUS.MOF_E_UNEXPECTED_ARRAY_INIT;
pub const WBEMMOF_E_INVALID_AMENDMENT_SYNTAX = WBEMSTATUS.MOF_E_INVALID_AMENDMENT_SYNTAX;
pub const WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT = WBEMSTATUS.MOF_E_INVALID_DUPLICATE_AMENDMENT;
pub const WBEMMOF_E_INVALID_PRAGMA = WBEMSTATUS.MOF_E_INVALID_PRAGMA;
pub const WBEMMOF_E_INVALID_NAMESPACE_SYNTAX = WBEMSTATUS.MOF_E_INVALID_NAMESPACE_SYNTAX;
pub const WBEMMOF_E_EXPECTED_CLASS_NAME = WBEMSTATUS.MOF_E_EXPECTED_CLASS_NAME;
pub const WBEMMOF_E_TYPE_MISMATCH = WBEMSTATUS.MOF_E_TYPE_MISMATCH;
pub const WBEMMOF_E_EXPECTED_ALIAS_NAME = WBEMSTATUS.MOF_E_EXPECTED_ALIAS_NAME;
pub const WBEMMOF_E_INVALID_CLASS_DECLARATION = WBEMSTATUS.MOF_E_INVALID_CLASS_DECLARATION;
pub const WBEMMOF_E_INVALID_INSTANCE_DECLARATION = WBEMSTATUS.MOF_E_INVALID_INSTANCE_DECLARATION;
pub const WBEMMOF_E_EXPECTED_DOLLAR = WBEMSTATUS.MOF_E_EXPECTED_DOLLAR;
pub const WBEMMOF_E_CIMTYPE_QUALIFIER = WBEMSTATUS.MOF_E_CIMTYPE_QUALIFIER;
pub const WBEMMOF_E_DUPLICATE_PROPERTY = WBEMSTATUS.MOF_E_DUPLICATE_PROPERTY;
pub const WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION = WBEMSTATUS.MOF_E_INVALID_NAMESPACE_SPECIFICATION;
pub const WBEMMOF_E_OUT_OF_RANGE = WBEMSTATUS.MOF_E_OUT_OF_RANGE;
pub const WBEMMOF_E_INVALID_FILE = WBEMSTATUS.MOF_E_INVALID_FILE;
pub const WBEMMOF_E_ALIASES_IN_EMBEDDED = WBEMSTATUS.MOF_E_ALIASES_IN_EMBEDDED;
pub const WBEMMOF_E_NULL_ARRAY_ELEM = WBEMSTATUS.MOF_E_NULL_ARRAY_ELEM;
pub const WBEMMOF_E_DUPLICATE_QUALIFIER = WBEMSTATUS.MOF_E_DUPLICATE_QUALIFIER;
pub const WBEMMOF_E_EXPECTED_FLAVOR_TYPE = WBEMSTATUS.MOF_E_EXPECTED_FLAVOR_TYPE;
pub const WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES = WBEMSTATUS.MOF_E_INCOMPATIBLE_FLAVOR_TYPES;
pub const WBEMMOF_E_MULTIPLE_ALIASES = WBEMSTATUS.MOF_E_MULTIPLE_ALIASES;
pub const WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2 = WBEMSTATUS.MOF_E_INCOMPATIBLE_FLAVOR_TYPES2;
pub const WBEMMOF_E_NO_ARRAYS_RETURNED = WBEMSTATUS.MOF_E_NO_ARRAYS_RETURNED;
pub const WBEMMOF_E_MUST_BE_IN_OR_OUT = WBEMSTATUS.MOF_E_MUST_BE_IN_OR_OUT;
pub const WBEMMOF_E_INVALID_FLAGS_SYNTAX = WBEMSTATUS.MOF_E_INVALID_FLAGS_SYNTAX;
pub const WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE = WBEMSTATUS.MOF_E_EXPECTED_BRACE_OR_BAD_TYPE;
pub const WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE = WBEMSTATUS.MOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE;
pub const WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE = WBEMSTATUS.MOF_E_UNSUPPORTED_CIMV22_DATA_TYPE;
pub const WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX = WBEMSTATUS.MOF_E_INVALID_DELETEINSTANCE_SYNTAX;
pub const WBEMMOF_E_INVALID_QUALIFIER_SYNTAX = WBEMSTATUS.MOF_E_INVALID_QUALIFIER_SYNTAX;
pub const WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE = WBEMSTATUS.MOF_E_QUALIFIER_USED_OUTSIDE_SCOPE;
pub const WBEMMOF_E_ERROR_CREATING_TEMP_FILE = WBEMSTATUS.MOF_E_ERROR_CREATING_TEMP_FILE;
pub const WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE = WBEMSTATUS.MOF_E_ERROR_INVALID_INCLUDE_FILE;
pub const WBEMMOF_E_INVALID_DELETECLASS_SYNTAX = WBEMSTATUS.MOF_E_INVALID_DELETECLASS_SYNTAX;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemClassObject_Value = Guid.initString("dc12a681-737f-11cf-884d-00aa004b2e24");
pub const IID_IWbemClassObject = &IID_IWbemClassObject_Value;
pub const IWbemClassObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetQualifierSet: *const fn (
            self: *const IWbemClassObject,
            pp_qual_set: ?*?*IWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Get: *const fn (
            self: *const IWbemClassObject,
            wsz_name: ?[*:0]const u16,
            l_flags: i32,
            p_val: ?*VARIANT,
            p_type: ?*i32,
            pl_flavor: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Put: *const fn (
            self: *const IWbemClassObject,
            wsz_name: ?[*:0]const u16,
            l_flags: i32,
            p_val: ?*VARIANT,
            type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IWbemClassObject,
            wsz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNames: *const fn (
            self: *const IWbemClassObject,
            wsz_qualifier_name: ?[*:0]const u16,
            l_flags: i32,
            p_qualifier_val: ?*VARIANT,
            p_names: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginEnumeration: *const fn (
            self: *const IWbemClassObject,
            l_enum_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IWbemClassObject,
            l_flags: i32,
            str_name: ?*?BSTR,
            p_val: ?*VARIANT,
            p_type: ?*i32,
            pl_flavor: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndEnumeration: *const fn (
            self: *const IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyQualifierSet: *const fn (
            self: *const IWbemClassObject,
            wsz_property: ?[*:0]const u16,
            pp_qual_set: ?*?*IWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IWbemClassObject,
            pp_copy: ?*?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectText: *const fn (
            self: *const IWbemClassObject,
            l_flags: i32,
            pstr_object_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SpawnDerivedClass: *const fn (
            self: *const IWbemClassObject,
            l_flags: i32,
            pp_new_class: ?*?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SpawnInstance: *const fn (
            self: *const IWbemClassObject,
            l_flags: i32,
            pp_new_instance: ?*?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareTo: *const fn (
            self: *const IWbemClassObject,
            l_flags: i32,
            p_compare_to: ?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyOrigin: *const fn (
            self: *const IWbemClassObject,
            wsz_name: ?[*:0]const u16,
            pstr_class_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InheritsFrom: *const fn (
            self: *const IWbemClassObject,
            str_ancestor: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethod: *const fn (
            self: *const IWbemClassObject,
            wsz_name: ?[*:0]const u16,
            l_flags: i32,
            pp_in_signature: ?*?*IWbemClassObject,
            pp_out_signature: ?*?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutMethod: *const fn (
            self: *const IWbemClassObject,
            wsz_name: ?[*:0]const u16,
            l_flags: i32,
            p_in_signature: ?*IWbemClassObject,
            p_out_signature: ?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMethod: *const fn (
            self: *const IWbemClassObject,
            wsz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginMethodEnumeration: *const fn (
            self: *const IWbemClassObject,
            l_enum_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextMethod: *const fn (
            self: *const IWbemClassObject,
            l_flags: i32,
            pstr_name: ?*?BSTR,
            pp_in_signature: ?*?*IWbemClassObject,
            pp_out_signature: ?*?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndMethodEnumeration: *const fn (
            self: *const IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethodQualifierSet: *const fn (
            self: *const IWbemClassObject,
            wsz_method: ?[*:0]const u16,
            pp_qual_set: ?*?*IWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethodOrigin: *const fn (
            self: *const IWbemClassObject,
            wsz_method_name: ?[*:0]const u16,
            pstr_class_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getQualifierSet(self: *const T, pp_qual_set_: ?*?*IWbemQualifierSet) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).GetQualifierSet(@as(*const IWbemClassObject, @ptrCast(self)), pp_qual_set_);
            }
            pub inline fn get(self: *const T, wsz_name_: ?[*:0]const u16, l_flags_: i32, p_val_: ?*VARIANT, p_type_: ?*i32, pl_flavor_: ?*i32) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).Get(@as(*const IWbemClassObject, @ptrCast(self)), wsz_name_, l_flags_, p_val_, p_type_, pl_flavor_);
            }
            pub inline fn put(self: *const T, wsz_name_: ?[*:0]const u16, l_flags_: i32, p_val_: ?*VARIANT, type_: i32) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).Put(@as(*const IWbemClassObject, @ptrCast(self)), wsz_name_, l_flags_, p_val_, type_);
            }
            pub inline fn delete(self: *const T, wsz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).Delete(@as(*const IWbemClassObject, @ptrCast(self)), wsz_name_);
            }
            pub inline fn getNames(self: *const T, wsz_qualifier_name_: ?[*:0]const u16, l_flags_: i32, p_qualifier_val_: ?*VARIANT, p_names_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).GetNames(@as(*const IWbemClassObject, @ptrCast(self)), wsz_qualifier_name_, l_flags_, p_qualifier_val_, p_names_);
            }
            pub inline fn beginEnumeration(self: *const T, l_enum_flags_: i32) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).BeginEnumeration(@as(*const IWbemClassObject, @ptrCast(self)), l_enum_flags_);
            }
            pub inline fn next(self: *const T, l_flags_: i32, str_name_: ?*?BSTR, p_val_: ?*VARIANT, p_type_: ?*i32, pl_flavor_: ?*i32) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).Next(@as(*const IWbemClassObject, @ptrCast(self)), l_flags_, str_name_, p_val_, p_type_, pl_flavor_);
            }
            pub inline fn endEnumeration(self: *const T) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).EndEnumeration(@as(*const IWbemClassObject, @ptrCast(self)));
            }
            pub inline fn getPropertyQualifierSet(self: *const T, wsz_property_: ?[*:0]const u16, pp_qual_set_: ?*?*IWbemQualifierSet) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).GetPropertyQualifierSet(@as(*const IWbemClassObject, @ptrCast(self)), wsz_property_, pp_qual_set_);
            }
            pub inline fn clone(self: *const T, pp_copy_: ?*?*IWbemClassObject) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).Clone(@as(*const IWbemClassObject, @ptrCast(self)), pp_copy_);
            }
            pub inline fn getObjectText(self: *const T, l_flags_: i32, pstr_object_text_: ?*?BSTR) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).GetObjectText(@as(*const IWbemClassObject, @ptrCast(self)), l_flags_, pstr_object_text_);
            }
            pub inline fn spawnDerivedClass(self: *const T, l_flags_: i32, pp_new_class_: ?*?*IWbemClassObject) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).SpawnDerivedClass(@as(*const IWbemClassObject, @ptrCast(self)), l_flags_, pp_new_class_);
            }
            pub inline fn spawnInstance(self: *const T, l_flags_: i32, pp_new_instance_: ?*?*IWbemClassObject) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).SpawnInstance(@as(*const IWbemClassObject, @ptrCast(self)), l_flags_, pp_new_instance_);
            }
            pub inline fn compareTo(self: *const T, l_flags_: i32, p_compare_to_: ?*IWbemClassObject) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).CompareTo(@as(*const IWbemClassObject, @ptrCast(self)), l_flags_, p_compare_to_);
            }
            pub inline fn getPropertyOrigin(self: *const T, wsz_name_: ?[*:0]const u16, pstr_class_name_: ?*?BSTR) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).GetPropertyOrigin(@as(*const IWbemClassObject, @ptrCast(self)), wsz_name_, pstr_class_name_);
            }
            pub inline fn inheritsFrom(self: *const T, str_ancestor_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).InheritsFrom(@as(*const IWbemClassObject, @ptrCast(self)), str_ancestor_);
            }
            pub inline fn getMethod(self: *const T, wsz_name_: ?[*:0]const u16, l_flags_: i32, pp_in_signature_: ?*?*IWbemClassObject, pp_out_signature_: ?*?*IWbemClassObject) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).GetMethod(@as(*const IWbemClassObject, @ptrCast(self)), wsz_name_, l_flags_, pp_in_signature_, pp_out_signature_);
            }
            pub inline fn putMethod(self: *const T, wsz_name_: ?[*:0]const u16, l_flags_: i32, p_in_signature_: ?*IWbemClassObject, p_out_signature_: ?*IWbemClassObject) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).PutMethod(@as(*const IWbemClassObject, @ptrCast(self)), wsz_name_, l_flags_, p_in_signature_, p_out_signature_);
            }
            pub inline fn deleteMethod(self: *const T, wsz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).DeleteMethod(@as(*const IWbemClassObject, @ptrCast(self)), wsz_name_);
            }
            pub inline fn beginMethodEnumeration(self: *const T, l_enum_flags_: i32) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).BeginMethodEnumeration(@as(*const IWbemClassObject, @ptrCast(self)), l_enum_flags_);
            }
            pub inline fn nextMethod(self: *const T, l_flags_: i32, pstr_name_: ?*?BSTR, pp_in_signature_: ?*?*IWbemClassObject, pp_out_signature_: ?*?*IWbemClassObject) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).NextMethod(@as(*const IWbemClassObject, @ptrCast(self)), l_flags_, pstr_name_, pp_in_signature_, pp_out_signature_);
            }
            pub inline fn endMethodEnumeration(self: *const T) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).EndMethodEnumeration(@as(*const IWbemClassObject, @ptrCast(self)));
            }
            pub inline fn getMethodQualifierSet(self: *const T, wsz_method_: ?[*:0]const u16, pp_qual_set_: ?*?*IWbemQualifierSet) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).GetMethodQualifierSet(@as(*const IWbemClassObject, @ptrCast(self)), wsz_method_, pp_qual_set_);
            }
            pub inline fn getMethodOrigin(self: *const T, wsz_method_name_: ?[*:0]const u16, pstr_class_name_: ?*?BSTR) HRESULT {
                return @as(*const IWbemClassObject.VTable, @ptrCast(self.vtable)).GetMethodOrigin(@as(*const IWbemClassObject, @ptrCast(self)), wsz_method_name_, pstr_class_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemObjectAccess_Value = Guid.initString("49353c9a-516b-11d1-aea6-00c04fb68820");
pub const IID_IWbemObjectAccess = &IID_IWbemObjectAccess_Value;
pub const IWbemObjectAccess = extern struct {
    pub const VTable = extern struct {
        base: IWbemClassObject.VTable,
        GetPropertyHandle: *const fn (
            self: *const IWbemObjectAccess,
            wsz_property_name: ?[*:0]const u16,
            p_type: ?*i32,
            pl_handle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePropertyValue: *const fn (
            self: *const IWbemObjectAccess,
            l_handle: i32,
            l_num_bytes: i32,
            a_data: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadPropertyValue: *const fn (
            self: *const IWbemObjectAccess,
            l_handle: i32,
            l_buffer_size: i32,
            pl_num_bytes: ?*i32,
            a_data: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadDWORD: *const fn (
            self: *const IWbemObjectAccess,
            l_handle: i32,
            pdw: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteDWORD: *const fn (
            self: *const IWbemObjectAccess,
            l_handle: i32,
            dw: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadQWORD: *const fn (
            self: *const IWbemObjectAccess,
            l_handle: i32,
            pqw: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteQWORD: *const fn (
            self: *const IWbemObjectAccess,
            l_handle: i32,
            pw: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyInfoByHandle: *const fn (
            self: *const IWbemObjectAccess,
            l_handle: i32,
            pstr_name: ?*?BSTR,
            p_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: *const fn (
            self: *const IWbemObjectAccess,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: *const fn (
            self: *const IWbemObjectAccess,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWbemClassObject.MethodMixin(T);
            pub inline fn getPropertyHandle(self: *const T, wsz_property_name_: ?[*:0]const u16, p_type_: ?*i32, pl_handle_: ?*i32) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).GetPropertyHandle(@as(*const IWbemObjectAccess, @ptrCast(self)), wsz_property_name_, p_type_, pl_handle_);
            }
            pub inline fn writePropertyValue(self: *const T, l_handle_: i32, l_num_bytes_: i32, a_data_: [*:0]const u8) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).WritePropertyValue(@as(*const IWbemObjectAccess, @ptrCast(self)), l_handle_, l_num_bytes_, a_data_);
            }
            pub inline fn readPropertyValue(self: *const T, l_handle_: i32, l_buffer_size_: i32, pl_num_bytes_: ?*i32, a_data_: [*:0]u8) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).ReadPropertyValue(@as(*const IWbemObjectAccess, @ptrCast(self)), l_handle_, l_buffer_size_, pl_num_bytes_, a_data_);
            }
            pub inline fn readDWORD(self: *const T, l_handle_: i32, pdw_: ?*u32) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).ReadDWORD(@as(*const IWbemObjectAccess, @ptrCast(self)), l_handle_, pdw_);
            }
            pub inline fn writeDWORD(self: *const T, l_handle_: i32, dw_: u32) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).WriteDWORD(@as(*const IWbemObjectAccess, @ptrCast(self)), l_handle_, dw_);
            }
            pub inline fn readQWORD(self: *const T, l_handle_: i32, pqw_: ?*u64) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).ReadQWORD(@as(*const IWbemObjectAccess, @ptrCast(self)), l_handle_, pqw_);
            }
            pub inline fn writeQWORD(self: *const T, l_handle_: i32, pw_: u64) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).WriteQWORD(@as(*const IWbemObjectAccess, @ptrCast(self)), l_handle_, pw_);
            }
            pub inline fn getPropertyInfoByHandle(self: *const T, l_handle_: i32, pstr_name_: ?*?BSTR, p_type_: ?*i32) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).GetPropertyInfoByHandle(@as(*const IWbemObjectAccess, @ptrCast(self)), l_handle_, pstr_name_, p_type_);
            }
            pub inline fn lock(self: *const T, l_flags_: i32) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).Lock(@as(*const IWbemObjectAccess, @ptrCast(self)), l_flags_);
            }
            pub inline fn unlock(self: *const T, l_flags_: i32) HRESULT {
                return @as(*const IWbemObjectAccess.VTable, @ptrCast(self.vtable)).Unlock(@as(*const IWbemObjectAccess, @ptrCast(self)), l_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemQualifierSet_Value = Guid.initString("dc12a680-737f-11cf-884d-00aa004b2e24");
pub const IID_IWbemQualifierSet = &IID_IWbemQualifierSet_Value;
pub const IWbemQualifierSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Get: *const fn (
            self: *const IWbemQualifierSet,
            wsz_name: ?[*:0]const u16,
            l_flags: i32,
            p_val: ?*VARIANT,
            pl_flavor: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Put: *const fn (
            self: *const IWbemQualifierSet,
            wsz_name: ?[*:0]const u16,
            p_val: ?*VARIANT,
            l_flavor: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IWbemQualifierSet,
            wsz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNames: *const fn (
            self: *const IWbemQualifierSet,
            l_flags: i32,
            p_names: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginEnumeration: *const fn (
            self: *const IWbemQualifierSet,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IWbemQualifierSet,
            l_flags: i32,
            pstr_name: ?*?BSTR,
            p_val: ?*VARIANT,
            pl_flavor: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndEnumeration: *const fn (
            self: *const IWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn get(self: *const T, wsz_name_: ?[*:0]const u16, l_flags_: i32, p_val_: ?*VARIANT, pl_flavor_: ?*i32) HRESULT {
                return @as(*const IWbemQualifierSet.VTable, @ptrCast(self.vtable)).Get(@as(*const IWbemQualifierSet, @ptrCast(self)), wsz_name_, l_flags_, p_val_, pl_flavor_);
            }
            pub inline fn put(self: *const T, wsz_name_: ?[*:0]const u16, p_val_: ?*VARIANT, l_flavor_: i32) HRESULT {
                return @as(*const IWbemQualifierSet.VTable, @ptrCast(self.vtable)).Put(@as(*const IWbemQualifierSet, @ptrCast(self)), wsz_name_, p_val_, l_flavor_);
            }
            pub inline fn delete(self: *const T, wsz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemQualifierSet.VTable, @ptrCast(self.vtable)).Delete(@as(*const IWbemQualifierSet, @ptrCast(self)), wsz_name_);
            }
            pub inline fn getNames(self: *const T, l_flags_: i32, p_names_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IWbemQualifierSet.VTable, @ptrCast(self.vtable)).GetNames(@as(*const IWbemQualifierSet, @ptrCast(self)), l_flags_, p_names_);
            }
            pub inline fn beginEnumeration(self: *const T, l_flags_: i32) HRESULT {
                return @as(*const IWbemQualifierSet.VTable, @ptrCast(self.vtable)).BeginEnumeration(@as(*const IWbemQualifierSet, @ptrCast(self)), l_flags_);
            }
            pub inline fn next(self: *const T, l_flags_: i32, pstr_name_: ?*?BSTR, p_val_: ?*VARIANT, pl_flavor_: ?*i32) HRESULT {
                return @as(*const IWbemQualifierSet.VTable, @ptrCast(self.vtable)).Next(@as(*const IWbemQualifierSet, @ptrCast(self)), l_flags_, pstr_name_, p_val_, pl_flavor_);
            }
            pub inline fn endEnumeration(self: *const T) HRESULT {
                return @as(*const IWbemQualifierSet.VTable, @ptrCast(self.vtable)).EndEnumeration(@as(*const IWbemQualifierSet, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemServices_Value = Guid.initString("9556dc99-828c-11cf-a37e-00aa003240c7");
pub const IID_IWbemServices = &IID_IWbemServices_Value;
pub const IWbemServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OpenNamespace: *const fn (
            self: *const IWbemServices,
            str_namespace: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_working_namespace: ?*?*IWbemServices,
            pp_result: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncCall: *const fn (
            self: *const IWbemServices,
            p_sink: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryObjectSink: *const fn (
            self: *const IWbemServices,
            l_flags: i32,
            pp_response_handler: ?*?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn (
            self: *const IWbemServices,
            str_object_path: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_object: ?*?*IWbemClassObject,
            pp_call_result: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectAsync: *const fn (
            self: *const IWbemServices,
            str_object_path: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutClass: *const fn (
            self: *const IWbemServices,
            p_object: ?*IWbemClassObject,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_call_result: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutClassAsync: *const fn (
            self: *const IWbemServices,
            p_object: ?*IWbemClassObject,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteClass: *const fn (
            self: *const IWbemServices,
            str_class: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_call_result: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteClassAsync: *const fn (
            self: *const IWbemServices,
            str_class: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClassEnum: *const fn (
            self: *const IWbemServices,
            str_superclass: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_enum: ?*?*IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClassEnumAsync: *const fn (
            self: *const IWbemServices,
            str_superclass: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutInstance: *const fn (
            self: *const IWbemServices,
            p_inst: ?*IWbemClassObject,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_call_result: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutInstanceAsync: *const fn (
            self: *const IWbemServices,
            p_inst: ?*IWbemClassObject,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteInstance: *const fn (
            self: *const IWbemServices,
            str_object_path: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_call_result: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteInstanceAsync: *const fn (
            self: *const IWbemServices,
            str_object_path: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstanceEnum: *const fn (
            self: *const IWbemServices,
            str_filter: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_enum: ?*?*IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstanceEnumAsync: *const fn (
            self: *const IWbemServices,
            str_filter: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecQuery: *const fn (
            self: *const IWbemServices,
            str_query_language: ?BSTR,
            str_query: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_enum: ?*?*IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecQueryAsync: *const fn (
            self: *const IWbemServices,
            str_query_language: ?BSTR,
            str_query: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecNotificationQuery: *const fn (
            self: *const IWbemServices,
            str_query_language: ?BSTR,
            str_query: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_enum: ?*?*IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecNotificationQueryAsync: *const fn (
            self: *const IWbemServices,
            str_query_language: ?BSTR,
            str_query: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethod: *const fn (
            self: *const IWbemServices,
            str_object_path: ?BSTR,
            str_method_name: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_in_params: ?*IWbemClassObject,
            pp_out_params: ?*?*IWbemClassObject,
            pp_call_result: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethodAsync: *const fn (
            self: *const IWbemServices,
            str_object_path: ?BSTR,
            str_method_name: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_in_params: ?*IWbemClassObject,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn openNamespace(self: *const T, str_namespace_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_working_namespace_: ?*?*IWbemServices, pp_result_: ?*?*IWbemCallResult) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).OpenNamespace(@as(*const IWbemServices, @ptrCast(self)), str_namespace_, l_flags_, p_ctx_, pp_working_namespace_, pp_result_);
            }
            pub inline fn cancelAsyncCall(self: *const T, p_sink_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).CancelAsyncCall(@as(*const IWbemServices, @ptrCast(self)), p_sink_);
            }
            pub inline fn queryObjectSink(self: *const T, l_flags_: i32, pp_response_handler_: ?*?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).QueryObjectSink(@as(*const IWbemServices, @ptrCast(self)), l_flags_, pp_response_handler_);
            }
            pub inline fn getObject(self: *const T, str_object_path_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_object_: ?*?*IWbemClassObject, pp_call_result_: ?*?*IWbemCallResult) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).GetObject(@as(*const IWbemServices, @ptrCast(self)), str_object_path_, l_flags_, p_ctx_, pp_object_, pp_call_result_);
            }
            pub inline fn getObjectAsync(self: *const T, str_object_path_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).GetObjectAsync(@as(*const IWbemServices, @ptrCast(self)), str_object_path_, l_flags_, p_ctx_, p_response_handler_);
            }
            pub inline fn putClass(self: *const T, p_object_: ?*IWbemClassObject, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_call_result_: ?*?*IWbemCallResult) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).PutClass(@as(*const IWbemServices, @ptrCast(self)), p_object_, l_flags_, p_ctx_, pp_call_result_);
            }
            pub inline fn putClassAsync(self: *const T, p_object_: ?*IWbemClassObject, l_flags_: i32, p_ctx_: ?*IWbemContext, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).PutClassAsync(@as(*const IWbemServices, @ptrCast(self)), p_object_, l_flags_, p_ctx_, p_response_handler_);
            }
            pub inline fn deleteClass(self: *const T, str_class_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_call_result_: ?*?*IWbemCallResult) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).DeleteClass(@as(*const IWbemServices, @ptrCast(self)), str_class_, l_flags_, p_ctx_, pp_call_result_);
            }
            pub inline fn deleteClassAsync(self: *const T, str_class_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).DeleteClassAsync(@as(*const IWbemServices, @ptrCast(self)), str_class_, l_flags_, p_ctx_, p_response_handler_);
            }
            pub inline fn createClassEnum(self: *const T, str_superclass_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_enum_: ?*?*IEnumWbemClassObject) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).CreateClassEnum(@as(*const IWbemServices, @ptrCast(self)), str_superclass_, l_flags_, p_ctx_, pp_enum_);
            }
            pub inline fn createClassEnumAsync(self: *const T, str_superclass_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).CreateClassEnumAsync(@as(*const IWbemServices, @ptrCast(self)), str_superclass_, l_flags_, p_ctx_, p_response_handler_);
            }
            pub inline fn putInstance(self: *const T, p_inst_: ?*IWbemClassObject, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_call_result_: ?*?*IWbemCallResult) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).PutInstance(@as(*const IWbemServices, @ptrCast(self)), p_inst_, l_flags_, p_ctx_, pp_call_result_);
            }
            pub inline fn putInstanceAsync(self: *const T, p_inst_: ?*IWbemClassObject, l_flags_: i32, p_ctx_: ?*IWbemContext, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).PutInstanceAsync(@as(*const IWbemServices, @ptrCast(self)), p_inst_, l_flags_, p_ctx_, p_response_handler_);
            }
            pub inline fn deleteInstance(self: *const T, str_object_path_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_call_result_: ?*?*IWbemCallResult) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).DeleteInstance(@as(*const IWbemServices, @ptrCast(self)), str_object_path_, l_flags_, p_ctx_, pp_call_result_);
            }
            pub inline fn deleteInstanceAsync(self: *const T, str_object_path_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).DeleteInstanceAsync(@as(*const IWbemServices, @ptrCast(self)), str_object_path_, l_flags_, p_ctx_, p_response_handler_);
            }
            pub inline fn createInstanceEnum(self: *const T, str_filter_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_enum_: ?*?*IEnumWbemClassObject) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).CreateInstanceEnum(@as(*const IWbemServices, @ptrCast(self)), str_filter_, l_flags_, p_ctx_, pp_enum_);
            }
            pub inline fn createInstanceEnumAsync(self: *const T, str_filter_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).CreateInstanceEnumAsync(@as(*const IWbemServices, @ptrCast(self)), str_filter_, l_flags_, p_ctx_, p_response_handler_);
            }
            pub inline fn execQuery(self: *const T, str_query_language_: ?BSTR, str_query_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_enum_: ?*?*IEnumWbemClassObject) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).ExecQuery(@as(*const IWbemServices, @ptrCast(self)), str_query_language_, str_query_, l_flags_, p_ctx_, pp_enum_);
            }
            pub inline fn execQueryAsync(self: *const T, str_query_language_: ?BSTR, str_query_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).ExecQueryAsync(@as(*const IWbemServices, @ptrCast(self)), str_query_language_, str_query_, l_flags_, p_ctx_, p_response_handler_);
            }
            pub inline fn execNotificationQuery(self: *const T, str_query_language_: ?BSTR, str_query_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_enum_: ?*?*IEnumWbemClassObject) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).ExecNotificationQuery(@as(*const IWbemServices, @ptrCast(self)), str_query_language_, str_query_, l_flags_, p_ctx_, pp_enum_);
            }
            pub inline fn execNotificationQueryAsync(self: *const T, str_query_language_: ?BSTR, str_query_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).ExecNotificationQueryAsync(@as(*const IWbemServices, @ptrCast(self)), str_query_language_, str_query_, l_flags_, p_ctx_, p_response_handler_);
            }
            pub inline fn execMethod(self: *const T, str_object_path_: ?BSTR, str_method_name_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_in_params_: ?*IWbemClassObject, pp_out_params_: ?*?*IWbemClassObject, pp_call_result_: ?*?*IWbemCallResult) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).ExecMethod(@as(*const IWbemServices, @ptrCast(self)), str_object_path_, str_method_name_, l_flags_, p_ctx_, p_in_params_, pp_out_params_, pp_call_result_);
            }
            pub inline fn execMethodAsync(self: *const T, str_object_path_: ?BSTR, str_method_name_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_in_params_: ?*IWbemClassObject, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemServices.VTable, @ptrCast(self.vtable)).ExecMethodAsync(@as(*const IWbemServices, @ptrCast(self)), str_object_path_, str_method_name_, l_flags_, p_ctx_, p_in_params_, p_response_handler_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemLocator_Value = Guid.initString("dc12a687-737f-11cf-884d-00aa004b2e24");
pub const IID_IWbemLocator = &IID_IWbemLocator_Value;
pub const IWbemLocator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectServer: *const fn (
            self: *const IWbemLocator,
            str_network_resource: ?BSTR,
            str_user: ?BSTR,
            str_password: ?BSTR,
            str_locale: ?BSTR,
            l_security_flags: i32,
            str_authority: ?BSTR,
            p_ctx: ?*IWbemContext,
            pp_namespace: ?*?*IWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn connectServer(self: *const T, str_network_resource_: ?BSTR, str_user_: ?BSTR, str_password_: ?BSTR, str_locale_: ?BSTR, l_security_flags_: i32, str_authority_: ?BSTR, p_ctx_: ?*IWbemContext, pp_namespace_: ?*?*IWbemServices) HRESULT {
                return @as(*const IWbemLocator.VTable, @ptrCast(self.vtable)).ConnectServer(@as(*const IWbemLocator, @ptrCast(self)), str_network_resource_, str_user_, str_password_, str_locale_, l_security_flags_, str_authority_, p_ctx_, pp_namespace_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemObjectSink_Value = Guid.initString("7c857801-7381-11cf-884d-00aa004b2e24");
pub const IID_IWbemObjectSink = &IID_IWbemObjectSink_Value;
pub const IWbemObjectSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Indicate: *const fn (
            self: *const IWbemObjectSink,
            l_object_count: i32,
            ap_obj_array: [*]?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatus: *const fn (
            self: *const IWbemObjectSink,
            l_flags: i32,
            h_result: HRESULT,
            str_param: ?BSTR,
            p_obj_param: ?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn indicate(self: *const T, l_object_count_: i32, ap_obj_array_: [*]?*IWbemClassObject) HRESULT {
                return @as(*const IWbemObjectSink.VTable, @ptrCast(self.vtable)).Indicate(@as(*const IWbemObjectSink, @ptrCast(self)), l_object_count_, ap_obj_array_);
            }
            pub inline fn setStatus(self: *const T, l_flags_: i32, h_result_: HRESULT, str_param_: ?BSTR, p_obj_param_: ?*IWbemClassObject) HRESULT {
                return @as(*const IWbemObjectSink.VTable, @ptrCast(self.vtable)).SetStatus(@as(*const IWbemObjectSink, @ptrCast(self)), l_flags_, h_result_, str_param_, p_obj_param_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumWbemClassObject_Value = Guid.initString("027947e1-d731-11ce-a357-000000000001");
pub const IID_IEnumWbemClassObject = &IID_IEnumWbemClassObject_Value;
pub const IEnumWbemClassObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: *const fn (
            self: *const IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IEnumWbemClassObject,
            l_timeout: i32,
            u_count: u32,
            ap_objects: [*]?*IWbemClassObject,
            pu_returned: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextAsync: *const fn (
            self: *const IEnumWbemClassObject,
            u_count: u32,
            p_sink: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumWbemClassObject,
            pp_enum: ?*?*IEnumWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumWbemClassObject,
            l_timeout: i32,
            n_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumWbemClassObject.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumWbemClassObject, @ptrCast(self)));
            }
            pub inline fn next(self: *const T, l_timeout_: i32, u_count_: u32, ap_objects_: [*]?*IWbemClassObject, pu_returned_: ?*u32) HRESULT {
                return @as(*const IEnumWbemClassObject.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumWbemClassObject, @ptrCast(self)), l_timeout_, u_count_, ap_objects_, pu_returned_);
            }
            pub inline fn nextAsync(self: *const T, u_count_: u32, p_sink_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IEnumWbemClassObject.VTable, @ptrCast(self.vtable)).NextAsync(@as(*const IEnumWbemClassObject, @ptrCast(self)), u_count_, p_sink_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumWbemClassObject) HRESULT {
                return @as(*const IEnumWbemClassObject.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumWbemClassObject, @ptrCast(self)), pp_enum_);
            }
            pub inline fn skip(self: *const T, l_timeout_: i32, n_count_: u32) HRESULT {
                return @as(*const IEnumWbemClassObject.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumWbemClassObject, @ptrCast(self)), l_timeout_, n_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemCallResult_Value = Guid.initString("44aca675-e8fc-11d0-a07c-00c04fb68820");
pub const IID_IWbemCallResult = &IID_IWbemCallResult_Value;
pub const IWbemCallResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResultObject: *const fn (
            self: *const IWbemCallResult,
            l_timeout: i32,
            pp_result_object: ?*?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResultString: *const fn (
            self: *const IWbemCallResult,
            l_timeout: i32,
            pstr_result_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResultServices: *const fn (
            self: *const IWbemCallResult,
            l_timeout: i32,
            pp_services: ?*?*IWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCallStatus: *const fn (
            self: *const IWbemCallResult,
            l_timeout: i32,
            pl_status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getResultObject(self: *const T, l_timeout_: i32, pp_result_object_: ?*?*IWbemClassObject) HRESULT {
                return @as(*const IWbemCallResult.VTable, @ptrCast(self.vtable)).GetResultObject(@as(*const IWbemCallResult, @ptrCast(self)), l_timeout_, pp_result_object_);
            }
            pub inline fn getResultString(self: *const T, l_timeout_: i32, pstr_result_string_: ?*?BSTR) HRESULT {
                return @as(*const IWbemCallResult.VTable, @ptrCast(self.vtable)).GetResultString(@as(*const IWbemCallResult, @ptrCast(self)), l_timeout_, pstr_result_string_);
            }
            pub inline fn getResultServices(self: *const T, l_timeout_: i32, pp_services_: ?*?*IWbemServices) HRESULT {
                return @as(*const IWbemCallResult.VTable, @ptrCast(self.vtable)).GetResultServices(@as(*const IWbemCallResult, @ptrCast(self)), l_timeout_, pp_services_);
            }
            pub inline fn getCallStatus(self: *const T, l_timeout_: i32, pl_status_: ?*i32) HRESULT {
                return @as(*const IWbemCallResult.VTable, @ptrCast(self.vtable)).GetCallStatus(@as(*const IWbemCallResult, @ptrCast(self)), l_timeout_, pl_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemContext_Value = Guid.initString("44aca674-e8fc-11d0-a07c-00c04fb68820");
pub const IID_IWbemContext = &IID_IWbemContext_Value;
pub const IWbemContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Clone: *const fn (
            self: *const IWbemContext,
            pp_new_copy: ?*?*IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNames: *const fn (
            self: *const IWbemContext,
            l_flags: i32,
            p_names: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginEnumeration: *const fn (
            self: *const IWbemContext,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IWbemContext,
            l_flags: i32,
            pstr_name: ?*?BSTR,
            p_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndEnumeration: *const fn (
            self: *const IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn (
            self: *const IWbemContext,
            wsz_name: ?[*:0]const u16,
            l_flags: i32,
            p_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IWbemContext,
            wsz_name: ?[*:0]const u16,
            l_flags: i32,
            p_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteValue: *const fn (
            self: *const IWbemContext,
            wsz_name: ?[*:0]const u16,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAll: *const fn (
            self: *const IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn clone(self: *const T, pp_new_copy_: ?*?*IWbemContext) HRESULT {
                return @as(*const IWbemContext.VTable, @ptrCast(self.vtable)).Clone(@as(*const IWbemContext, @ptrCast(self)), pp_new_copy_);
            }
            pub inline fn getNames(self: *const T, l_flags_: i32, p_names_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IWbemContext.VTable, @ptrCast(self.vtable)).GetNames(@as(*const IWbemContext, @ptrCast(self)), l_flags_, p_names_);
            }
            pub inline fn beginEnumeration(self: *const T, l_flags_: i32) HRESULT {
                return @as(*const IWbemContext.VTable, @ptrCast(self.vtable)).BeginEnumeration(@as(*const IWbemContext, @ptrCast(self)), l_flags_);
            }
            pub inline fn next(self: *const T, l_flags_: i32, pstr_name_: ?*?BSTR, p_value_: ?*VARIANT) HRESULT {
                return @as(*const IWbemContext.VTable, @ptrCast(self.vtable)).Next(@as(*const IWbemContext, @ptrCast(self)), l_flags_, pstr_name_, p_value_);
            }
            pub inline fn endEnumeration(self: *const T) HRESULT {
                return @as(*const IWbemContext.VTable, @ptrCast(self.vtable)).EndEnumeration(@as(*const IWbemContext, @ptrCast(self)));
            }
            pub inline fn setValue(self: *const T, wsz_name_: ?[*:0]const u16, l_flags_: i32, p_value_: ?*VARIANT) HRESULT {
                return @as(*const IWbemContext.VTable, @ptrCast(self.vtable)).SetValue(@as(*const IWbemContext, @ptrCast(self)), wsz_name_, l_flags_, p_value_);
            }
            pub inline fn getValue(self: *const T, wsz_name_: ?[*:0]const u16, l_flags_: i32, p_value_: ?*VARIANT) HRESULT {
                return @as(*const IWbemContext.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IWbemContext, @ptrCast(self)), wsz_name_, l_flags_, p_value_);
            }
            pub inline fn deleteValue(self: *const T, wsz_name_: ?[*:0]const u16, l_flags_: i32) HRESULT {
                return @as(*const IWbemContext.VTable, @ptrCast(self.vtable)).DeleteValue(@as(*const IWbemContext, @ptrCast(self)), wsz_name_, l_flags_);
            }
            pub inline fn deleteAll(self: *const T) HRESULT {
                return @as(*const IWbemContext.VTable, @ptrCast(self.vtable)).DeleteAll(@as(*const IWbemContext, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUnsecuredApartment_Value = Guid.initString("1cfaba8c-1523-11d1-ad79-00c04fd8fdff");
pub const IID_IUnsecuredApartment = &IID_IUnsecuredApartment_Value;
pub const IUnsecuredApartment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateObjectStub: *const fn (
            self: *const IUnsecuredApartment,
            p_object: ?*IUnknown,
            pp_stub: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createObjectStub(self: *const T, p_object_: ?*IUnknown, pp_stub_: ?*?*IUnknown) HRESULT {
                return @as(*const IUnsecuredApartment.VTable, @ptrCast(self.vtable)).CreateObjectStub(@as(*const IUnsecuredApartment, @ptrCast(self)), p_object_, pp_stub_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWbemUnsecuredApartment_Value = Guid.initString("31739d04-3471-4cf4-9a7c-57a44ae71956");
pub const IID_IWbemUnsecuredApartment = &IID_IWbemUnsecuredApartment_Value;
pub const IWbemUnsecuredApartment = extern struct {
    pub const VTable = extern struct {
        base: IUnsecuredApartment.VTable,
        CreateSinkStub: *const fn (
            self: *const IWbemUnsecuredApartment,
            p_sink: ?*IWbemObjectSink,
            dw_flags: u32,
            wsz_reserved: ?[*:0]const u16,
            pp_stub: ?*?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnsecuredApartment.MethodMixin(T);
            pub inline fn createSinkStub(self: *const T, p_sink_: ?*IWbemObjectSink, dw_flags_: u32, wsz_reserved_: ?[*:0]const u16, pp_stub_: ?*?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemUnsecuredApartment.VTable, @ptrCast(self.vtable)).CreateSinkStub(@as(*const IWbemUnsecuredApartment, @ptrCast(self)), p_sink_, dw_flags_, wsz_reserved_, pp_stub_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemStatusCodeText_Value = Guid.initString("eb87e1bc-3233-11d2-aec9-00c04fb68820");
pub const IID_IWbemStatusCodeText = &IID_IWbemStatusCodeText_Value;
pub const IWbemStatusCodeText = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetErrorCodeText: *const fn (
            self: *const IWbemStatusCodeText,
            h_res: HRESULT,
            locale_id: u32,
            l_flags: i32,
            message_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFacilityCodeText: *const fn (
            self: *const IWbemStatusCodeText,
            h_res: HRESULT,
            locale_id: u32,
            l_flags: i32,
            message_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getErrorCodeText(self: *const T, h_res_: HRESULT, locale_id_: u32, l_flags_: i32, message_text_: ?*?BSTR) HRESULT {
                return @as(*const IWbemStatusCodeText.VTable, @ptrCast(self.vtable)).GetErrorCodeText(@as(*const IWbemStatusCodeText, @ptrCast(self)), h_res_, locale_id_, l_flags_, message_text_);
            }
            pub inline fn getFacilityCodeText(self: *const T, h_res_: HRESULT, locale_id_: u32, l_flags_: i32, message_text_: ?*?BSTR) HRESULT {
                return @as(*const IWbemStatusCodeText.VTable, @ptrCast(self.vtable)).GetFacilityCodeText(@as(*const IWbemStatusCodeText, @ptrCast(self)), h_res_, locale_id_, l_flags_, message_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemBackupRestore_Value = Guid.initString("c49e32c7-bc8b-11d2-85d4-00105a1f8304");
pub const IID_IWbemBackupRestore = &IID_IWbemBackupRestore_Value;
pub const IWbemBackupRestore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Backup: *const fn (
            self: *const IWbemBackupRestore,
            str_backup_to_file: ?[*:0]const u16,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: *const fn (
            self: *const IWbemBackupRestore,
            str_restore_from_file: ?[*:0]const u16,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn backup(self: *const T, str_backup_to_file_: ?[*:0]const u16, l_flags_: i32) HRESULT {
                return @as(*const IWbemBackupRestore.VTable, @ptrCast(self.vtable)).Backup(@as(*const IWbemBackupRestore, @ptrCast(self)), str_backup_to_file_, l_flags_);
            }
            pub inline fn restore(self: *const T, str_restore_from_file_: ?[*:0]const u16, l_flags_: i32) HRESULT {
                return @as(*const IWbemBackupRestore.VTable, @ptrCast(self.vtable)).Restore(@as(*const IWbemBackupRestore, @ptrCast(self)), str_restore_from_file_, l_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemBackupRestoreEx_Value = Guid.initString("a359dec5-e813-4834-8a2a-ba7f1d777d76");
pub const IID_IWbemBackupRestoreEx = &IID_IWbemBackupRestoreEx_Value;
pub const IWbemBackupRestoreEx = extern struct {
    pub const VTable = extern struct {
        base: IWbemBackupRestore.VTable,
        Pause: *const fn (
            self: *const IWbemBackupRestoreEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IWbemBackupRestoreEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWbemBackupRestore.MethodMixin(T);
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IWbemBackupRestoreEx.VTable, @ptrCast(self.vtable)).Pause(@as(*const IWbemBackupRestoreEx, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IWbemBackupRestoreEx.VTable, @ptrCast(self.vtable)).Resume(@as(*const IWbemBackupRestoreEx, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemRefresher_Value = Guid.initString("49353c99-516b-11d1-aea6-00c04fb68820");
pub const IID_IWbemRefresher = &IID_IWbemRefresher_Value;
pub const IWbemRefresher = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Refresh: *const fn (
            self: *const IWbemRefresher,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn refresh(self: *const T, l_flags_: i32) HRESULT {
                return @as(*const IWbemRefresher.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IWbemRefresher, @ptrCast(self)), l_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemHiPerfEnum_Value = Guid.initString("2705c288-79ae-11d2-b348-00105a1f8177");
pub const IID_IWbemHiPerfEnum = &IID_IWbemHiPerfEnum_Value;
pub const IWbemHiPerfEnum = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddObjects: *const fn (
            self: *const IWbemHiPerfEnum,
            l_flags: i32,
            u_num_objects: u32,
            ap_ids: [*]i32,
            ap_obj: [*]?*IWbemObjectAccess,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveObjects: *const fn (
            self: *const IWbemHiPerfEnum,
            l_flags: i32,
            u_num_objects: u32,
            ap_ids: [*]i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjects: *const fn (
            self: *const IWbemHiPerfEnum,
            l_flags: i32,
            u_num_objects: u32,
            ap_obj: [*]?*IWbemObjectAccess,
            pu_returned: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: *const fn (
            self: *const IWbemHiPerfEnum,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addObjects(self: *const T, l_flags_: i32, u_num_objects_: u32, ap_ids_: [*]i32, ap_obj_: [*]?*IWbemObjectAccess) HRESULT {
                return @as(*const IWbemHiPerfEnum.VTable, @ptrCast(self.vtable)).AddObjects(@as(*const IWbemHiPerfEnum, @ptrCast(self)), l_flags_, u_num_objects_, ap_ids_, ap_obj_);
            }
            pub inline fn removeObjects(self: *const T, l_flags_: i32, u_num_objects_: u32, ap_ids_: [*]i32) HRESULT {
                return @as(*const IWbemHiPerfEnum.VTable, @ptrCast(self.vtable)).RemoveObjects(@as(*const IWbemHiPerfEnum, @ptrCast(self)), l_flags_, u_num_objects_, ap_ids_);
            }
            pub inline fn getObjects(self: *const T, l_flags_: i32, u_num_objects_: u32, ap_obj_: [*]?*IWbemObjectAccess, pu_returned_: ?*u32) HRESULT {
                return @as(*const IWbemHiPerfEnum.VTable, @ptrCast(self.vtable)).GetObjects(@as(*const IWbemHiPerfEnum, @ptrCast(self)), l_flags_, u_num_objects_, ap_obj_, pu_returned_);
            }
            pub inline fn removeAll(self: *const T, l_flags_: i32) HRESULT {
                return @as(*const IWbemHiPerfEnum.VTable, @ptrCast(self.vtable)).RemoveAll(@as(*const IWbemHiPerfEnum, @ptrCast(self)), l_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemConfigureRefresher_Value = Guid.initString("49353c92-516b-11d1-aea6-00c04fb68820");
pub const IID_IWbemConfigureRefresher = &IID_IWbemConfigureRefresher_Value;
pub const IWbemConfigureRefresher = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddObjectByPath: *const fn (
            self: *const IWbemConfigureRefresher,
            p_namespace: ?*IWbemServices,
            wsz_path: ?[*:0]const u16,
            l_flags: i32,
            p_context: ?*IWbemContext,
            pp_refreshable: ?*?*IWbemClassObject,
            pl_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddObjectByTemplate: *const fn (
            self: *const IWbemConfigureRefresher,
            p_namespace: ?*IWbemServices,
            p_template: ?*IWbemClassObject,
            l_flags: i32,
            p_context: ?*IWbemContext,
            pp_refreshable: ?*?*IWbemClassObject,
            pl_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRefresher: *const fn (
            self: *const IWbemConfigureRefresher,
            p_refresher: ?*IWbemRefresher,
            l_flags: i32,
            pl_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IWbemConfigureRefresher,
            l_id: i32,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEnum: *const fn (
            self: *const IWbemConfigureRefresher,
            p_namespace: ?*IWbemServices,
            wsz_class_name: ?[*:0]const u16,
            l_flags: i32,
            p_context: ?*IWbemContext,
            pp_enum: ?*?*IWbemHiPerfEnum,
            pl_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addObjectByPath(self: *const T, p_namespace_: ?*IWbemServices, wsz_path_: ?[*:0]const u16, l_flags_: i32, p_context_: ?*IWbemContext, pp_refreshable_: ?*?*IWbemClassObject, pl_id_: ?*i32) HRESULT {
                return @as(*const IWbemConfigureRefresher.VTable, @ptrCast(self.vtable)).AddObjectByPath(@as(*const IWbemConfigureRefresher, @ptrCast(self)), p_namespace_, wsz_path_, l_flags_, p_context_, pp_refreshable_, pl_id_);
            }
            pub inline fn addObjectByTemplate(self: *const T, p_namespace_: ?*IWbemServices, p_template_: ?*IWbemClassObject, l_flags_: i32, p_context_: ?*IWbemContext, pp_refreshable_: ?*?*IWbemClassObject, pl_id_: ?*i32) HRESULT {
                return @as(*const IWbemConfigureRefresher.VTable, @ptrCast(self.vtable)).AddObjectByTemplate(@as(*const IWbemConfigureRefresher, @ptrCast(self)), p_namespace_, p_template_, l_flags_, p_context_, pp_refreshable_, pl_id_);
            }
            pub inline fn addRefresher(self: *const T, p_refresher_: ?*IWbemRefresher, l_flags_: i32, pl_id_: ?*i32) HRESULT {
                return @as(*const IWbemConfigureRefresher.VTable, @ptrCast(self.vtable)).AddRefresher(@as(*const IWbemConfigureRefresher, @ptrCast(self)), p_refresher_, l_flags_, pl_id_);
            }
            pub inline fn remove(self: *const T, l_id_: i32, l_flags_: i32) HRESULT {
                return @as(*const IWbemConfigureRefresher.VTable, @ptrCast(self.vtable)).Remove(@as(*const IWbemConfigureRefresher, @ptrCast(self)), l_id_, l_flags_);
            }
            pub inline fn addEnum(self: *const T, p_namespace_: ?*IWbemServices, wsz_class_name_: ?[*:0]const u16, l_flags_: i32, p_context_: ?*IWbemContext, pp_enum_: ?*?*IWbemHiPerfEnum, pl_id_: ?*i32) HRESULT {
                return @as(*const IWbemConfigureRefresher.VTable, @ptrCast(self.vtable)).AddEnum(@as(*const IWbemConfigureRefresher, @ptrCast(self)), p_namespace_, wsz_class_name_, l_flags_, p_context_, pp_enum_, pl_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemObjectSinkEx_Value = Guid.initString("e7d35cfa-348b-485e-b524-252725d697ca");
pub const IID_IWbemObjectSinkEx = &IID_IWbemObjectSinkEx_Value;
pub const IWbemObjectSinkEx = extern struct {
    pub const VTable = extern struct {
        base: IWbemObjectSink.VTable,
        WriteMessage: *const fn (
            self: *const IWbemObjectSinkEx,
            u_channel: u32,
            str_message: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteError: *const fn (
            self: *const IWbemObjectSinkEx,
            p_obj_error: ?*IWbemClassObject,
            pu_returned: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PromptUser: *const fn (
            self: *const IWbemObjectSinkEx,
            str_message: ?BSTR,
            u_prompt_type: u8,
            pu_returned: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteProgress: *const fn (
            self: *const IWbemObjectSinkEx,
            str_activity: ?BSTR,
            str_current_operation: ?BSTR,
            str_status_description: ?BSTR,
            u_percent_complete: u32,
            u_seconds_remaining: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteStreamParameter: *const fn (
            self: *const IWbemObjectSinkEx,
            str_name: ?BSTR,
            vt_value: ?*VARIANT,
            ul_type: u32,
            ul_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWbemObjectSink.MethodMixin(T);
            pub inline fn writeMessage(self: *const T, u_channel_: u32, str_message_: ?BSTR) HRESULT {
                return @as(*const IWbemObjectSinkEx.VTable, @ptrCast(self.vtable)).WriteMessage(@as(*const IWbemObjectSinkEx, @ptrCast(self)), u_channel_, str_message_);
            }
            pub inline fn writeError(self: *const T, p_obj_error_: ?*IWbemClassObject, pu_returned_: ?*u8) HRESULT {
                return @as(*const IWbemObjectSinkEx.VTable, @ptrCast(self.vtable)).WriteError(@as(*const IWbemObjectSinkEx, @ptrCast(self)), p_obj_error_, pu_returned_);
            }
            pub inline fn promptUser(self: *const T, str_message_: ?BSTR, u_prompt_type_: u8, pu_returned_: ?*u8) HRESULT {
                return @as(*const IWbemObjectSinkEx.VTable, @ptrCast(self.vtable)).PromptUser(@as(*const IWbemObjectSinkEx, @ptrCast(self)), str_message_, u_prompt_type_, pu_returned_);
            }
            pub inline fn writeProgress(self: *const T, str_activity_: ?BSTR, str_current_operation_: ?BSTR, str_status_description_: ?BSTR, u_percent_complete_: u32, u_seconds_remaining_: u32) HRESULT {
                return @as(*const IWbemObjectSinkEx.VTable, @ptrCast(self.vtable)).WriteProgress(@as(*const IWbemObjectSinkEx, @ptrCast(self)), str_activity_, str_current_operation_, str_status_description_, u_percent_complete_, u_seconds_remaining_);
            }
            pub inline fn writeStreamParameter(self: *const T, str_name_: ?BSTR, vt_value_: ?*VARIANT, ul_type_: u32, ul_flags_: u32) HRESULT {
                return @as(*const IWbemObjectSinkEx.VTable, @ptrCast(self.vtable)).WriteStreamParameter(@as(*const IWbemObjectSinkEx, @ptrCast(self)), str_name_, vt_value_, ul_type_, ul_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemShutdown_Value = Guid.initString("b7b31df9-d515-11d3-a11c-00105a1f515a");
pub const IID_IWbemShutdown = &IID_IWbemShutdown_Value;
pub const IWbemShutdown = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Shutdown: *const fn (
            self: *const IWbemShutdown,
            u_reason: i32,
            u_max_milliseconds: u32,
            p_ctx: ?*IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn shutdown(self: *const T, u_reason_: i32, u_max_milliseconds_: u32, p_ctx_: ?*IWbemContext) HRESULT {
                return @as(*const IWbemShutdown.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const IWbemShutdown, @ptrCast(self)), u_reason_, u_max_milliseconds_, p_ctx_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMI_OBJ_TEXT = enum(i32) {
    CIM_DTD_2_0 = 1,
    WMI_DTD_2_0 = 2,
    WMI_EXT1 = 3,
    WMI_EXT2 = 4,
    WMI_EXT3 = 5,
    WMI_EXT4 = 6,
    WMI_EXT5 = 7,
    WMI_EXT6 = 8,
    WMI_EXT7 = 9,
    WMI_EXT8 = 10,
    WMI_EXT9 = 11,
    WMI_EXT10 = 12,
    LAST = 13,
};
pub const WMI_OBJ_TEXT_CIM_DTD_2_0 = WMI_OBJ_TEXT.CIM_DTD_2_0;
pub const WMI_OBJ_TEXT_WMI_DTD_2_0 = WMI_OBJ_TEXT.WMI_DTD_2_0;
pub const WMI_OBJ_TEXT_WMI_EXT1 = WMI_OBJ_TEXT.WMI_EXT1;
pub const WMI_OBJ_TEXT_WMI_EXT2 = WMI_OBJ_TEXT.WMI_EXT2;
pub const WMI_OBJ_TEXT_WMI_EXT3 = WMI_OBJ_TEXT.WMI_EXT3;
pub const WMI_OBJ_TEXT_WMI_EXT4 = WMI_OBJ_TEXT.WMI_EXT4;
pub const WMI_OBJ_TEXT_WMI_EXT5 = WMI_OBJ_TEXT.WMI_EXT5;
pub const WMI_OBJ_TEXT_WMI_EXT6 = WMI_OBJ_TEXT.WMI_EXT6;
pub const WMI_OBJ_TEXT_WMI_EXT7 = WMI_OBJ_TEXT.WMI_EXT7;
pub const WMI_OBJ_TEXT_WMI_EXT8 = WMI_OBJ_TEXT.WMI_EXT8;
pub const WMI_OBJ_TEXT_WMI_EXT9 = WMI_OBJ_TEXT.WMI_EXT9;
pub const WMI_OBJ_TEXT_WMI_EXT10 = WMI_OBJ_TEXT.WMI_EXT10;
pub const WMI_OBJ_TEXT_LAST = WMI_OBJ_TEXT.LAST;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemObjectTextSrc_Value = Guid.initString("bfbf883a-cad7-11d3-a11b-00105a1f515a");
pub const IID_IWbemObjectTextSrc = &IID_IWbemObjectTextSrc_Value;
pub const IWbemObjectTextSrc = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetText: *const fn (
            self: *const IWbemObjectTextSrc,
            l_flags: i32,
            p_obj: ?*IWbemClassObject,
            u_obj_text_format: u32,
            p_ctx: ?*IWbemContext,
            str_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFromText: *const fn (
            self: *const IWbemObjectTextSrc,
            l_flags: i32,
            str_text: ?BSTR,
            u_obj_text_format: u32,
            p_ctx: ?*IWbemContext,
            p_new_obj: ?*?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getText(self: *const T, l_flags_: i32, p_obj_: ?*IWbemClassObject, u_obj_text_format_: u32, p_ctx_: ?*IWbemContext, str_text_: ?*?BSTR) HRESULT {
                return @as(*const IWbemObjectTextSrc.VTable, @ptrCast(self.vtable)).GetText(@as(*const IWbemObjectTextSrc, @ptrCast(self)), l_flags_, p_obj_, u_obj_text_format_, p_ctx_, str_text_);
            }
            pub inline fn createFromText(self: *const T, l_flags_: i32, str_text_: ?BSTR, u_obj_text_format_: u32, p_ctx_: ?*IWbemContext, p_new_obj_: ?*?*IWbemClassObject) HRESULT {
                return @as(*const IWbemObjectTextSrc.VTable, @ptrCast(self.vtable)).CreateFromText(@as(*const IWbemObjectTextSrc, @ptrCast(self)), l_flags_, str_text_, u_obj_text_format_, p_ctx_, p_new_obj_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WBEM_COMPILE_STATUS_INFO = extern struct {
    lPhaseError: i32,
    hRes: HRESULT,
    ObjectNum: i32,
    FirstLine: i32,
    LastLine: i32,
    dwOutFlags: u32,
};

pub const WBEM_COMPILER_OPTIONS = enum(i32) {
    CHECK_ONLY = 1,
    AUTORECOVER = 2,
    WMI_CHECK = 4,
    CONSOLE_PRINT = 8,
    DONT_ADD_TO_LIST = 16,
    SPLIT_FILES = 32,
    STORE_FILE = 256,
};
pub const WBEM_FLAG_CHECK_ONLY = WBEM_COMPILER_OPTIONS.CHECK_ONLY;
pub const WBEM_FLAG_AUTORECOVER = WBEM_COMPILER_OPTIONS.AUTORECOVER;
pub const WBEM_FLAG_WMI_CHECK = WBEM_COMPILER_OPTIONS.WMI_CHECK;
pub const WBEM_FLAG_CONSOLE_PRINT = WBEM_COMPILER_OPTIONS.CONSOLE_PRINT;
pub const WBEM_FLAG_DONT_ADD_TO_LIST = WBEM_COMPILER_OPTIONS.DONT_ADD_TO_LIST;
pub const WBEM_FLAG_SPLIT_FILES = WBEM_COMPILER_OPTIONS.SPLIT_FILES;
pub const WBEM_FLAG_STORE_FILE = WBEM_COMPILER_OPTIONS.STORE_FILE;

pub const WBEM_CONNECT_OPTIONS = enum(i32) {
    REPOSITORY_ONLY = 64,
    USE_MAX_WAIT = 128,
    PROVIDERS = 256,
};
pub const WBEM_FLAG_CONNECT_REPOSITORY_ONLY = WBEM_CONNECT_OPTIONS.REPOSITORY_ONLY;
pub const WBEM_FLAG_CONNECT_USE_MAX_WAIT = WBEM_CONNECT_OPTIONS.USE_MAX_WAIT;
pub const WBEM_FLAG_CONNECT_PROVIDERS = WBEM_CONNECT_OPTIONS.PROVIDERS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMofCompiler_Value = Guid.initString("6daf974e-2e37-11d2-aec9-00c04fb68820");
pub const IID_IMofCompiler = &IID_IMofCompiler_Value;
pub const IMofCompiler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CompileFile: *const fn (
            self: *const IMofCompiler,
            file_name: ?PWSTR,
            server_and_namespace: ?PWSTR,
            user: ?PWSTR,
            authority: ?PWSTR,
            password: ?PWSTR,
            l_option_flags: i32,
            l_class_flags: i32,
            l_instance_flags: i32,
            p_info: ?*WBEM_COMPILE_STATUS_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompileBuffer: *const fn (
            self: *const IMofCompiler,
            buff_size: i32,
            // TODO: what to do with BytesParamIndex 0?
            p_buffer: ?*u8,
            server_and_namespace: ?PWSTR,
            user: ?PWSTR,
            authority: ?PWSTR,
            password: ?PWSTR,
            l_option_flags: i32,
            l_class_flags: i32,
            l_instance_flags: i32,
            p_info: ?*WBEM_COMPILE_STATUS_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBMOF: *const fn (
            self: *const IMofCompiler,
            text_file_name: ?PWSTR,
            b_m_o_f_file_name: ?PWSTR,
            server_and_namespace: ?PWSTR,
            l_option_flags: i32,
            l_class_flags: i32,
            l_instance_flags: i32,
            p_info: ?*WBEM_COMPILE_STATUS_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn compileFile(self: *const T, file_name_: ?PWSTR, server_and_namespace_: ?PWSTR, user_: ?PWSTR, authority_: ?PWSTR, password_: ?PWSTR, l_option_flags_: i32, l_class_flags_: i32, l_instance_flags_: i32, p_info_: ?*WBEM_COMPILE_STATUS_INFO) HRESULT {
                return @as(*const IMofCompiler.VTable, @ptrCast(self.vtable)).CompileFile(@as(*const IMofCompiler, @ptrCast(self)), file_name_, server_and_namespace_, user_, authority_, password_, l_option_flags_, l_class_flags_, l_instance_flags_, p_info_);
            }
            pub inline fn compileBuffer(self: *const T, buff_size_: i32, p_buffer_: ?*u8, server_and_namespace_: ?PWSTR, user_: ?PWSTR, authority_: ?PWSTR, password_: ?PWSTR, l_option_flags_: i32, l_class_flags_: i32, l_instance_flags_: i32, p_info_: ?*WBEM_COMPILE_STATUS_INFO) HRESULT {
                return @as(*const IMofCompiler.VTable, @ptrCast(self.vtable)).CompileBuffer(@as(*const IMofCompiler, @ptrCast(self)), buff_size_, p_buffer_, server_and_namespace_, user_, authority_, password_, l_option_flags_, l_class_flags_, l_instance_flags_, p_info_);
            }
            pub inline fn createBMOF(self: *const T, text_file_name_: ?PWSTR, b_m_o_f_file_name_: ?PWSTR, server_and_namespace_: ?PWSTR, l_option_flags_: i32, l_class_flags_: i32, l_instance_flags_: i32, p_info_: ?*WBEM_COMPILE_STATUS_INFO) HRESULT {
                return @as(*const IMofCompiler.VTable, @ptrCast(self.vtable)).CreateBMOF(@as(*const IMofCompiler, @ptrCast(self)), text_file_name_, b_m_o_f_file_name_, server_and_namespace_, l_option_flags_, l_class_flags_, l_instance_flags_, p_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WBEM_UNSECAPP_FLAG_TYPE = enum(i32) {
    DEFAULT_CHECK_ACCESS = 0,
    CHECK_ACCESS = 1,
    DONT_CHECK_ACCESS = 2,
};
pub const WBEM_FLAG_UNSECAPP_DEFAULT_CHECK_ACCESS = WBEM_UNSECAPP_FLAG_TYPE.DEFAULT_CHECK_ACCESS;
pub const WBEM_FLAG_UNSECAPP_CHECK_ACCESS = WBEM_UNSECAPP_FLAG_TYPE.CHECK_ACCESS;
pub const WBEM_FLAG_UNSECAPP_DONT_CHECK_ACCESS = WBEM_UNSECAPP_FLAG_TYPE.DONT_CHECK_ACCESS;

pub const WBEM_INFORMATION_FLAG_TYPE = enum(i32) {
    SHORT_NAME = 1,
    LONG_NAME = 2,
};
pub const WBEM_FLAG_SHORT_NAME = WBEM_INFORMATION_FLAG_TYPE.SHORT_NAME;
pub const WBEM_FLAG_LONG_NAME = WBEM_INFORMATION_FLAG_TYPE.LONG_NAME;

const CLSID_WbemAdministrativeLocator_Value = Guid.initString("cb8555cc-9128-11d1-ad9b-00c04fd8fdff");
pub const CLSID_WbemAdministrativeLocator = &CLSID_WbemAdministrativeLocator_Value;

const CLSID_WbemAuthenticatedLocator_Value = Guid.initString("cd184336-9128-11d1-ad9b-00c04fd8fdff");
pub const CLSID_WbemAuthenticatedLocator = &CLSID_WbemAuthenticatedLocator_Value;

const CLSID_WbemUnauthenticatedLocator_Value = Guid.initString("443e7b79-de31-11d2-b340-00104bcc4b4a");
pub const CLSID_WbemUnauthenticatedLocator = &CLSID_WbemUnauthenticatedLocator_Value;

const CLSID_WbemDecoupledRegistrar_Value = Guid.initString("4cfc7932-0f9d-4bef-9c32-8ea2a6b56fcb");
pub const CLSID_WbemDecoupledRegistrar = &CLSID_WbemDecoupledRegistrar_Value;

const CLSID_WbemDecoupledBasicEventProvider_Value = Guid.initString("f5f75737-2843-4f22-933d-c76a97cda62f");
pub const CLSID_WbemDecoupledBasicEventProvider = &CLSID_WbemDecoupledBasicEventProvider_Value;

pub const WBEM_PROVIDER_REQUIREMENTS_TYPE = enum(i32) {
    START_POSTFILTER = 0,
    STOP_POSTFILTER = 1,
    RECHECK_SUBSCRIPTIONS = 2,
};
pub const WBEM_REQUIREMENTS_START_POSTFILTER = WBEM_PROVIDER_REQUIREMENTS_TYPE.START_POSTFILTER;
pub const WBEM_REQUIREMENTS_STOP_POSTFILTER = WBEM_PROVIDER_REQUIREMENTS_TYPE.STOP_POSTFILTER;
pub const WBEM_REQUIREMENTS_RECHECK_SUBSCRIPTIONS = WBEM_PROVIDER_REQUIREMENTS_TYPE.RECHECK_SUBSCRIPTIONS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemPropertyProvider_Value = Guid.initString("ce61e841-65bc-11d0-b6bd-00aa003240c7");
pub const IID_IWbemPropertyProvider = &IID_IWbemPropertyProvider_Value;
pub const IWbemPropertyProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProperty: *const fn (
            self: *const IWbemPropertyProvider,
            l_flags: i32,
            str_locale: ?BSTR,
            str_class_mapping: ?BSTR,
            str_inst_mapping: ?BSTR,
            str_prop_mapping: ?BSTR,
            pv_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutProperty: *const fn (
            self: *const IWbemPropertyProvider,
            l_flags: i32,
            str_locale: ?BSTR,
            str_class_mapping: ?BSTR,
            str_inst_mapping: ?BSTR,
            str_prop_mapping: ?BSTR,
            pv_value: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getProperty(self: *const T, l_flags_: i32, str_locale_: ?BSTR, str_class_mapping_: ?BSTR, str_inst_mapping_: ?BSTR, str_prop_mapping_: ?BSTR, pv_value_: ?*VARIANT) HRESULT {
                return @as(*const IWbemPropertyProvider.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IWbemPropertyProvider, @ptrCast(self)), l_flags_, str_locale_, str_class_mapping_, str_inst_mapping_, str_prop_mapping_, pv_value_);
            }
            pub inline fn putProperty(self: *const T, l_flags_: i32, str_locale_: ?BSTR, str_class_mapping_: ?BSTR, str_inst_mapping_: ?BSTR, str_prop_mapping_: ?BSTR, pv_value_: ?*const VARIANT) HRESULT {
                return @as(*const IWbemPropertyProvider.VTable, @ptrCast(self.vtable)).PutProperty(@as(*const IWbemPropertyProvider, @ptrCast(self)), l_flags_, str_locale_, str_class_mapping_, str_inst_mapping_, str_prop_mapping_, pv_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemUnboundObjectSink_Value = Guid.initString("e246107b-b06e-11d0-ad61-00c04fd8fdff");
pub const IID_IWbemUnboundObjectSink = &IID_IWbemUnboundObjectSink_Value;
pub const IWbemUnboundObjectSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IndicateToConsumer: *const fn (
            self: *const IWbemUnboundObjectSink,
            p_logical_consumer: ?*IWbemClassObject,
            l_num_objects: i32,
            ap_objects: [*]?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn indicateToConsumer(self: *const T, p_logical_consumer_: ?*IWbemClassObject, l_num_objects_: i32, ap_objects_: [*]?*IWbemClassObject) HRESULT {
                return @as(*const IWbemUnboundObjectSink.VTable, @ptrCast(self.vtable)).IndicateToConsumer(@as(*const IWbemUnboundObjectSink, @ptrCast(self)), p_logical_consumer_, l_num_objects_, ap_objects_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemEventProvider_Value = Guid.initString("e245105b-b06e-11d0-ad61-00c04fd8fdff");
pub const IID_IWbemEventProvider = &IID_IWbemEventProvider_Value;
pub const IWbemEventProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ProvideEvents: *const fn (
            self: *const IWbemEventProvider,
            p_sink: ?*IWbemObjectSink,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn provideEvents(self: *const T, p_sink_: ?*IWbemObjectSink, l_flags_: i32) HRESULT {
                return @as(*const IWbemEventProvider.VTable, @ptrCast(self.vtable)).ProvideEvents(@as(*const IWbemEventProvider, @ptrCast(self)), p_sink_, l_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemEventProviderQuerySink_Value = Guid.initString("580acaf8-fa1c-11d0-ad72-00c04fd8fdff");
pub const IID_IWbemEventProviderQuerySink = &IID_IWbemEventProviderQuerySink_Value;
pub const IWbemEventProviderQuerySink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NewQuery: *const fn (
            self: *const IWbemEventProviderQuerySink,
            dw_id: u32,
            wsz_query_language: ?*u16,
            wsz_query: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelQuery: *const fn (
            self: *const IWbemEventProviderQuerySink,
            dw_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn newQuery(self: *const T, dw_id_: u32, wsz_query_language_: ?*u16, wsz_query_: ?*u16) HRESULT {
                return @as(*const IWbemEventProviderQuerySink.VTable, @ptrCast(self.vtable)).NewQuery(@as(*const IWbemEventProviderQuerySink, @ptrCast(self)), dw_id_, wsz_query_language_, wsz_query_);
            }
            pub inline fn cancelQuery(self: *const T, dw_id_: u32) HRESULT {
                return @as(*const IWbemEventProviderQuerySink.VTable, @ptrCast(self.vtable)).CancelQuery(@as(*const IWbemEventProviderQuerySink, @ptrCast(self)), dw_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemEventProviderSecurity_Value = Guid.initString("631f7d96-d993-11d2-b339-00105a1f4aaf");
pub const IID_IWbemEventProviderSecurity = &IID_IWbemEventProviderSecurity_Value;
pub const IWbemEventProviderSecurity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AccessCheck: *const fn (
            self: *const IWbemEventProviderSecurity,
            wsz_query_language: ?*u16,
            wsz_query: ?*u16,
            l_sid_length: i32,
            p_sid: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn accessCheck(self: *const T, wsz_query_language_: ?*u16, wsz_query_: ?*u16, l_sid_length_: i32, p_sid_: [*:0]const u8) HRESULT {
                return @as(*const IWbemEventProviderSecurity.VTable, @ptrCast(self.vtable)).AccessCheck(@as(*const IWbemEventProviderSecurity, @ptrCast(self)), wsz_query_language_, wsz_query_, l_sid_length_, p_sid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemEventConsumerProvider_Value = Guid.initString("e246107a-b06e-11d0-ad61-00c04fd8fdff");
pub const IID_IWbemEventConsumerProvider = &IID_IWbemEventConsumerProvider_Value;
pub const IWbemEventConsumerProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindConsumer: *const fn (
            self: *const IWbemEventConsumerProvider,
            p_logical_consumer: ?*IWbemClassObject,
            pp_consumer: ?*?*IWbemUnboundObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findConsumer(self: *const T, p_logical_consumer_: ?*IWbemClassObject, pp_consumer_: ?*?*IWbemUnboundObjectSink) HRESULT {
                return @as(*const IWbemEventConsumerProvider.VTable, @ptrCast(self.vtable)).FindConsumer(@as(*const IWbemEventConsumerProvider, @ptrCast(self)), p_logical_consumer_, pp_consumer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemProviderInitSink_Value = Guid.initString("1be41571-91dd-11d1-aeb2-00c04fb68820");
pub const IID_IWbemProviderInitSink = &IID_IWbemProviderInitSink_Value;
pub const IWbemProviderInitSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetStatus: *const fn (
            self: *const IWbemProviderInitSink,
            l_status: i32,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setStatus(self: *const T, l_status_: i32, l_flags_: i32) HRESULT {
                return @as(*const IWbemProviderInitSink.VTable, @ptrCast(self.vtable)).SetStatus(@as(*const IWbemProviderInitSink, @ptrCast(self)), l_status_, l_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemProviderInit_Value = Guid.initString("1be41572-91dd-11d1-aeb2-00c04fb68820");
pub const IID_IWbemProviderInit = &IID_IWbemProviderInit_Value;
pub const IWbemProviderInit = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IWbemProviderInit,
            wsz_user: ?PWSTR,
            l_flags: i32,
            wsz_namespace: ?PWSTR,
            wsz_locale: ?PWSTR,
            p_namespace: ?*IWbemServices,
            p_ctx: ?*IWbemContext,
            p_init_sink: ?*IWbemProviderInitSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, wsz_user_: ?PWSTR, l_flags_: i32, wsz_namespace_: ?PWSTR, wsz_locale_: ?PWSTR, p_namespace_: ?*IWbemServices, p_ctx_: ?*IWbemContext, p_init_sink_: ?*IWbemProviderInitSink) HRESULT {
                return @as(*const IWbemProviderInit.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWbemProviderInit, @ptrCast(self)), wsz_user_, l_flags_, wsz_namespace_, wsz_locale_, p_namespace_, p_ctx_, p_init_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemHiPerfProvider_Value = Guid.initString("49353c93-516b-11d1-aea6-00c04fb68820");
pub const IID_IWbemHiPerfProvider = &IID_IWbemHiPerfProvider_Value;
pub const IWbemHiPerfProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryInstances: *const fn (
            self: *const IWbemHiPerfProvider,
            p_namespace: ?*IWbemServices,
            wsz_class: ?PWSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            p_sink: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRefresher: *const fn (
            self: *const IWbemHiPerfProvider,
            p_namespace: ?*IWbemServices,
            l_flags: i32,
            pp_refresher: ?*?*IWbemRefresher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRefreshableObject: *const fn (
            self: *const IWbemHiPerfProvider,
            p_namespace: ?*IWbemServices,
            p_template: ?*IWbemObjectAccess,
            p_refresher: ?*IWbemRefresher,
            l_flags: i32,
            p_context: ?*IWbemContext,
            pp_refreshable: ?*?*IWbemObjectAccess,
            pl_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopRefreshing: *const fn (
            self: *const IWbemHiPerfProvider,
            p_refresher: ?*IWbemRefresher,
            l_id: i32,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRefreshableEnum: *const fn (
            self: *const IWbemHiPerfProvider,
            p_namespace: ?*IWbemServices,
            wsz_class: ?[*:0]const u16,
            p_refresher: ?*IWbemRefresher,
            l_flags: i32,
            p_context: ?*IWbemContext,
            p_hi_perf_enum: ?*IWbemHiPerfEnum,
            pl_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjects: *const fn (
            self: *const IWbemHiPerfProvider,
            p_namespace: ?*IWbemServices,
            l_num_objects: i32,
            ap_obj: [*]?*IWbemObjectAccess,
            l_flags: i32,
            p_context: ?*IWbemContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryInstances(self: *const T, p_namespace_: ?*IWbemServices, wsz_class_: ?PWSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, p_sink_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemHiPerfProvider.VTable, @ptrCast(self.vtable)).QueryInstances(@as(*const IWbemHiPerfProvider, @ptrCast(self)), p_namespace_, wsz_class_, l_flags_, p_ctx_, p_sink_);
            }
            pub inline fn createRefresher(self: *const T, p_namespace_: ?*IWbemServices, l_flags_: i32, pp_refresher_: ?*?*IWbemRefresher) HRESULT {
                return @as(*const IWbemHiPerfProvider.VTable, @ptrCast(self.vtable)).CreateRefresher(@as(*const IWbemHiPerfProvider, @ptrCast(self)), p_namespace_, l_flags_, pp_refresher_);
            }
            pub inline fn createRefreshableObject(self: *const T, p_namespace_: ?*IWbemServices, p_template_: ?*IWbemObjectAccess, p_refresher_: ?*IWbemRefresher, l_flags_: i32, p_context_: ?*IWbemContext, pp_refreshable_: ?*?*IWbemObjectAccess, pl_id_: ?*i32) HRESULT {
                return @as(*const IWbemHiPerfProvider.VTable, @ptrCast(self.vtable)).CreateRefreshableObject(@as(*const IWbemHiPerfProvider, @ptrCast(self)), p_namespace_, p_template_, p_refresher_, l_flags_, p_context_, pp_refreshable_, pl_id_);
            }
            pub inline fn stopRefreshing(self: *const T, p_refresher_: ?*IWbemRefresher, l_id_: i32, l_flags_: i32) HRESULT {
                return @as(*const IWbemHiPerfProvider.VTable, @ptrCast(self.vtable)).StopRefreshing(@as(*const IWbemHiPerfProvider, @ptrCast(self)), p_refresher_, l_id_, l_flags_);
            }
            pub inline fn createRefreshableEnum(self: *const T, p_namespace_: ?*IWbemServices, wsz_class_: ?[*:0]const u16, p_refresher_: ?*IWbemRefresher, l_flags_: i32, p_context_: ?*IWbemContext, p_hi_perf_enum_: ?*IWbemHiPerfEnum, pl_id_: ?*i32) HRESULT {
                return @as(*const IWbemHiPerfProvider.VTable, @ptrCast(self.vtable)).CreateRefreshableEnum(@as(*const IWbemHiPerfProvider, @ptrCast(self)), p_namespace_, wsz_class_, p_refresher_, l_flags_, p_context_, p_hi_perf_enum_, pl_id_);
            }
            pub inline fn getObjects(self: *const T, p_namespace_: ?*IWbemServices, l_num_objects_: i32, ap_obj_: [*]?*IWbemObjectAccess, l_flags_: i32, p_context_: ?*IWbemContext) HRESULT {
                return @as(*const IWbemHiPerfProvider.VTable, @ptrCast(self.vtable)).GetObjects(@as(*const IWbemHiPerfProvider, @ptrCast(self)), p_namespace_, l_num_objects_, ap_obj_, l_flags_, p_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemDecoupledRegistrar_Value = Guid.initString("1005cbcf-e64f-4646-bcd3-3a089d8a84b4");
pub const IID_IWbemDecoupledRegistrar = &IID_IWbemDecoupledRegistrar_Value;
pub const IWbemDecoupledRegistrar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Register: *const fn (
            self: *const IWbemDecoupledRegistrar,
            a__flags: i32,
            a__context: ?*IWbemContext,
            a__user: ?[*:0]const u16,
            a__locale: ?[*:0]const u16,
            a__scope: ?[*:0]const u16,
            a__registration: ?[*:0]const u16,
            p_i_unknown: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnRegister: *const fn (
            self: *const IWbemDecoupledRegistrar,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn register(self: *const T, a__flags_: i32, a__context_: ?*IWbemContext, a__user_: ?[*:0]const u16, a__locale_: ?[*:0]const u16, a__scope_: ?[*:0]const u16, a__registration_: ?[*:0]const u16, p_i_unknown_: ?*IUnknown) HRESULT {
                return @as(*const IWbemDecoupledRegistrar.VTable, @ptrCast(self.vtable)).Register(@as(*const IWbemDecoupledRegistrar, @ptrCast(self)), a__flags_, a__context_, a__user_, a__locale_, a__scope_, a__registration_, p_i_unknown_);
            }
            pub inline fn unRegister(self: *const T) HRESULT {
                return @as(*const IWbemDecoupledRegistrar.VTable, @ptrCast(self.vtable)).UnRegister(@as(*const IWbemDecoupledRegistrar, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemProviderIdentity_Value = Guid.initString("631f7d97-d993-11d2-b339-00105a1f4aaf");
pub const IID_IWbemProviderIdentity = &IID_IWbemProviderIdentity_Value;
pub const IWbemProviderIdentity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetRegistrationObject: *const fn (
            self: *const IWbemProviderIdentity,
            l_flags: i32,
            p_prov_reg: ?*IWbemClassObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setRegistrationObject(self: *const T, l_flags_: i32, p_prov_reg_: ?*IWbemClassObject) HRESULT {
                return @as(*const IWbemProviderIdentity.VTable, @ptrCast(self.vtable)).SetRegistrationObject(@as(*const IWbemProviderIdentity, @ptrCast(self)), l_flags_, p_prov_reg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WBEM_EXTRA_RETURN_CODES = enum(i32) {
    S_INITIALIZED = 0,
    S_LIMITED_SERVICE = 274433,
    S_INDIRECTLY_UPDATED = 274434,
    S_SUBJECT_TO_SDS = 274435,
    E_RETRY_LATER = -2147209215,
    E_RESOURCE_CONTENTION = -2147209214,
};
pub const WBEM_S_INITIALIZED = WBEM_EXTRA_RETURN_CODES.S_INITIALIZED;
pub const WBEM_S_LIMITED_SERVICE = WBEM_EXTRA_RETURN_CODES.S_LIMITED_SERVICE;
pub const WBEM_S_INDIRECTLY_UPDATED = WBEM_EXTRA_RETURN_CODES.S_INDIRECTLY_UPDATED;
pub const WBEM_S_SUBJECT_TO_SDS = WBEM_EXTRA_RETURN_CODES.S_SUBJECT_TO_SDS;
pub const WBEM_E_RETRY_LATER = WBEM_EXTRA_RETURN_CODES.E_RETRY_LATER;
pub const WBEM_E_RESOURCE_CONTENTION = WBEM_EXTRA_RETURN_CODES.E_RESOURCE_CONTENTION;

pub const WBEM_PROVIDER_FLAGS = enum(i32) {
    E = 65536,
};
pub const WBEM_FLAG_OWNER_UPDATE = WBEM_PROVIDER_FLAGS.E;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemDecoupledBasicEventProvider_Value = Guid.initString("86336d20-ca11-4786-9ef1-bc8a946b42fc");
pub const IID_IWbemDecoupledBasicEventProvider = &IID_IWbemDecoupledBasicEventProvider_Value;
pub const IWbemDecoupledBasicEventProvider = extern struct {
    pub const VTable = extern struct {
        base: IWbemDecoupledRegistrar.VTable,
        GetSink: *const fn (
            self: *const IWbemDecoupledBasicEventProvider,
            a__flags: i32,
            a__context: ?*IWbemContext,
            a__sink: ?*?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetService: *const fn (
            self: *const IWbemDecoupledBasicEventProvider,
            a__flags: i32,
            a__context: ?*IWbemContext,
            a__service: ?*?*IWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWbemDecoupledRegistrar.MethodMixin(T);
            pub inline fn getSink(self: *const T, a__flags_: i32, a__context_: ?*IWbemContext, a__sink_: ?*?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemDecoupledBasicEventProvider.VTable, @ptrCast(self.vtable)).GetSink(@as(*const IWbemDecoupledBasicEventProvider, @ptrCast(self)), a__flags_, a__context_, a__sink_);
            }
            pub inline fn getService(self: *const T, a__flags_: i32, a__context_: ?*IWbemContext, a__service_: ?*?*IWbemServices) HRESULT {
                return @as(*const IWbemDecoupledBasicEventProvider.VTable, @ptrCast(self.vtable)).GetService(@as(*const IWbemDecoupledBasicEventProvider, @ptrCast(self)), a__flags_, a__context_, a__service_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WBEM_BATCH_TYPE = enum(i32) {
    BATCH_IF_NEEDED = 0,
    MUST_BATCH = 1,
    MUST_NOT_BATCH = 2,
};
pub const WBEM_FLAG_BATCH_IF_NEEDED = WBEM_BATCH_TYPE.BATCH_IF_NEEDED;
pub const WBEM_FLAG_MUST_BATCH = WBEM_BATCH_TYPE.MUST_BATCH;
pub const WBEM_FLAG_MUST_NOT_BATCH = WBEM_BATCH_TYPE.MUST_NOT_BATCH;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWbemEventSink_Value = Guid.initString("3ae0080a-7e3a-4366-bf89-0feedc931659");
pub const IID_IWbemEventSink = &IID_IWbemEventSink_Value;
pub const IWbemEventSink = extern struct {
    pub const VTable = extern struct {
        base: IWbemObjectSink.VTable,
        SetSinkSecurity: *const fn (
            self: *const IWbemEventSink,
            l_s_d_length: i32,
            p_s_d: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsActive: *const fn (
            self: *const IWbemEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestrictedSink: *const fn (
            self: *const IWbemEventSink,
            l_num_queries: i32,
            awsz_queries: [*]const ?[*:0]const u16,
            p_callback: ?*IUnknown,
            pp_sink: ?*?*IWbemEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBatchingParameters: *const fn (
            self: *const IWbemEventSink,
            l_flags: i32,
            dw_max_buffer_size: u32,
            dw_max_send_latency: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWbemObjectSink.MethodMixin(T);
            pub inline fn setSinkSecurity(self: *const T, l_s_d_length_: i32, p_s_d_: [*:0]u8) HRESULT {
                return @as(*const IWbemEventSink.VTable, @ptrCast(self.vtable)).SetSinkSecurity(@as(*const IWbemEventSink, @ptrCast(self)), l_s_d_length_, p_s_d_);
            }
            pub inline fn isActive(self: *const T) HRESULT {
                return @as(*const IWbemEventSink.VTable, @ptrCast(self.vtable)).IsActive(@as(*const IWbemEventSink, @ptrCast(self)));
            }
            pub inline fn getRestrictedSink(self: *const T, l_num_queries_: i32, awsz_queries_: [*]const ?[*:0]const u16, p_callback_: ?*IUnknown, pp_sink_: ?*?*IWbemEventSink) HRESULT {
                return @as(*const IWbemEventSink.VTable, @ptrCast(self.vtable)).GetRestrictedSink(@as(*const IWbemEventSink, @ptrCast(self)), l_num_queries_, awsz_queries_, p_callback_, pp_sink_);
            }
            pub inline fn setBatchingParameters(self: *const T, l_flags_: i32, dw_max_buffer_size_: u32, dw_max_send_latency_: u32) HRESULT {
                return @as(*const IWbemEventSink.VTable, @ptrCast(self.vtable)).SetBatchingParameters(@as(*const IWbemEventSink, @ptrCast(self)), l_flags_, dw_max_buffer_size_, dw_max_send_latency_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_SWbemLocator_Value = Guid.initString("76a64158-cb41-11d1-8b02-00600806d9b6");
pub const CLSID_SWbemLocator = &CLSID_SWbemLocator_Value;

const CLSID_SWbemNamedValueSet_Value = Guid.initString("9aed384e-ce8b-11d1-8b05-00600806d9b6");
pub const CLSID_SWbemNamedValueSet = &CLSID_SWbemNamedValueSet_Value;

const CLSID_SWbemObjectPath_Value = Guid.initString("5791bc26-ce9c-11d1-97bf-0000f81e849c");
pub const CLSID_SWbemObjectPath = &CLSID_SWbemObjectPath_Value;

const CLSID_SWbemLastError_Value = Guid.initString("c2feeeac-cfcd-11d1-8b05-00600806d9b6");
pub const CLSID_SWbemLastError = &CLSID_SWbemLastError_Value;

const CLSID_SWbemSink_Value = Guid.initString("75718c9a-f029-11d1-a1ac-00c04fb6c223");
pub const CLSID_SWbemSink = &CLSID_SWbemSink_Value;

const CLSID_SWbemDateTime_Value = Guid.initString("47dfbe54-cf76-11d3-b38f-00105a1f473a");
pub const CLSID_SWbemDateTime = &CLSID_SWbemDateTime_Value;

const CLSID_SWbemRefresher_Value = Guid.initString("d269bf5c-d9c1-11d3-b38f-00105a1f473a");
pub const CLSID_SWbemRefresher = &CLSID_SWbemRefresher_Value;

const CLSID_SWbemServices_Value = Guid.initString("04b83d63-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemServices = &CLSID_SWbemServices_Value;

const CLSID_SWbemServicesEx_Value = Guid.initString("62e522dc-8cf3-40a8-8b2e-37d595651e40");
pub const CLSID_SWbemServicesEx = &CLSID_SWbemServicesEx_Value;

const CLSID_SWbemObject_Value = Guid.initString("04b83d62-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemObject = &CLSID_SWbemObject_Value;

const CLSID_SWbemObjectEx_Value = Guid.initString("d6bdafb2-9435-491f-bb87-6aa0f0bc31a2");
pub const CLSID_SWbemObjectEx = &CLSID_SWbemObjectEx_Value;

const CLSID_SWbemObjectSet_Value = Guid.initString("04b83d61-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemObjectSet = &CLSID_SWbemObjectSet_Value;

const CLSID_SWbemNamedValue_Value = Guid.initString("04b83d60-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemNamedValue = &CLSID_SWbemNamedValue_Value;

const CLSID_SWbemQualifier_Value = Guid.initString("04b83d5f-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemQualifier = &CLSID_SWbemQualifier_Value;

const CLSID_SWbemQualifierSet_Value = Guid.initString("04b83d5e-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemQualifierSet = &CLSID_SWbemQualifierSet_Value;

const CLSID_SWbemProperty_Value = Guid.initString("04b83d5d-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemProperty = &CLSID_SWbemProperty_Value;

const CLSID_SWbemPropertySet_Value = Guid.initString("04b83d5c-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemPropertySet = &CLSID_SWbemPropertySet_Value;

const CLSID_SWbemMethod_Value = Guid.initString("04b83d5b-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemMethod = &CLSID_SWbemMethod_Value;

const CLSID_SWbemMethodSet_Value = Guid.initString("04b83d5a-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemMethodSet = &CLSID_SWbemMethodSet_Value;

const CLSID_SWbemEventSource_Value = Guid.initString("04b83d58-21ae-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemEventSource = &CLSID_SWbemEventSource_Value;

const CLSID_SWbemSecurity_Value = Guid.initString("b54d66e9-2287-11d2-8b33-00600806d9b6");
pub const CLSID_SWbemSecurity = &CLSID_SWbemSecurity_Value;

const CLSID_SWbemPrivilege_Value = Guid.initString("26ee67bc-5804-11d2-8b4a-00600806d9b6");
pub const CLSID_SWbemPrivilege = &CLSID_SWbemPrivilege_Value;

const CLSID_SWbemPrivilegeSet_Value = Guid.initString("26ee67be-5804-11d2-8b4a-00600806d9b6");
pub const CLSID_SWbemPrivilegeSet = &CLSID_SWbemPrivilegeSet_Value;

const CLSID_SWbemRefreshableItem_Value = Guid.initString("8c6854bc-de4b-11d3-b390-00105a1f473a");
pub const CLSID_SWbemRefreshableItem = &CLSID_SWbemRefreshableItem_Value;

pub const WbemChangeFlagEnum = enum(i32) {
    CreateOrUpdate = 0,
    UpdateOnly = 1,
    CreateOnly = 2,
    // UpdateCompatible = 0, this enum value conflicts with CreateOrUpdate
    UpdateSafeMode = 32,
    UpdateForceMode = 64,
    StrongValidation = 128,
    Advisory = 65536,
};
pub const wbemChangeFlagCreateOrUpdate = WbemChangeFlagEnum.CreateOrUpdate;
pub const wbemChangeFlagUpdateOnly = WbemChangeFlagEnum.UpdateOnly;
pub const wbemChangeFlagCreateOnly = WbemChangeFlagEnum.CreateOnly;
pub const wbemChangeFlagUpdateCompatible = WbemChangeFlagEnum.CreateOrUpdate;
pub const wbemChangeFlagUpdateSafeMode = WbemChangeFlagEnum.UpdateSafeMode;
pub const wbemChangeFlagUpdateForceMode = WbemChangeFlagEnum.UpdateForceMode;
pub const wbemChangeFlagStrongValidation = WbemChangeFlagEnum.StrongValidation;
pub const wbemChangeFlagAdvisory = WbemChangeFlagEnum.Advisory;

pub const WbemFlagEnum = enum(i32) {
    ReturnImmediately = 16,
    ReturnWhenComplete = 0,
    // Bidirectional = 0, this enum value conflicts with ReturnWhenComplete
    ForwardOnly = 32,
    NoErrorObject = 64,
    // ReturnErrorObject = 0, this enum value conflicts with ReturnWhenComplete
    SendStatus = 128,
    // DontSendStatus = 0, this enum value conflicts with ReturnWhenComplete
    EnsureLocatable = 256,
    DirectRead = 512,
    // SendOnlySelected = 0, this enum value conflicts with ReturnWhenComplete
    UseAmendedQualifiers = 131072,
    // GetDefault = 0, this enum value conflicts with ReturnWhenComplete
    SpawnInstance = 1,
    // UseCurrentTime = 1, this enum value conflicts with SpawnInstance
};
pub const wbemFlagReturnImmediately = WbemFlagEnum.ReturnImmediately;
pub const wbemFlagReturnWhenComplete = WbemFlagEnum.ReturnWhenComplete;
pub const wbemFlagBidirectional = WbemFlagEnum.ReturnWhenComplete;
pub const wbemFlagForwardOnly = WbemFlagEnum.ForwardOnly;
pub const wbemFlagNoErrorObject = WbemFlagEnum.NoErrorObject;
pub const wbemFlagReturnErrorObject = WbemFlagEnum.ReturnWhenComplete;
pub const wbemFlagSendStatus = WbemFlagEnum.SendStatus;
pub const wbemFlagDontSendStatus = WbemFlagEnum.ReturnWhenComplete;
pub const wbemFlagEnsureLocatable = WbemFlagEnum.EnsureLocatable;
pub const wbemFlagDirectRead = WbemFlagEnum.DirectRead;
pub const wbemFlagSendOnlySelected = WbemFlagEnum.ReturnWhenComplete;
pub const wbemFlagUseAmendedQualifiers = WbemFlagEnum.UseAmendedQualifiers;
pub const wbemFlagGetDefault = WbemFlagEnum.ReturnWhenComplete;
pub const wbemFlagSpawnInstance = WbemFlagEnum.SpawnInstance;
pub const wbemFlagUseCurrentTime = WbemFlagEnum.SpawnInstance;

pub const WbemQueryFlagEnum = enum(i32) {
    Deep = 0,
    Shallow = 1,
    Prototype = 2,
};
pub const wbemQueryFlagDeep = WbemQueryFlagEnum.Deep;
pub const wbemQueryFlagShallow = WbemQueryFlagEnum.Shallow;
pub const wbemQueryFlagPrototype = WbemQueryFlagEnum.Prototype;

pub const WbemTextFlagEnum = enum(i32) {
    s = 1,
};
pub const wbemTextFlagNoFlavors = WbemTextFlagEnum.s;

pub const WbemTimeout = enum(i32) {
    e = -1,
};
pub const wbemTimeoutInfinite = WbemTimeout.e;

pub const WbemComparisonFlagEnum = enum(i32) {
    ncludeAll = 0,
    gnoreQualifiers = 1,
    gnoreObjectSource = 2,
    gnoreDefaultValues = 4,
    gnoreClass = 8,
    gnoreCase = 16,
    gnoreFlavor = 32,
};
pub const wbemComparisonFlagIncludeAll = WbemComparisonFlagEnum.ncludeAll;
pub const wbemComparisonFlagIgnoreQualifiers = WbemComparisonFlagEnum.gnoreQualifiers;
pub const wbemComparisonFlagIgnoreObjectSource = WbemComparisonFlagEnum.gnoreObjectSource;
pub const wbemComparisonFlagIgnoreDefaultValues = WbemComparisonFlagEnum.gnoreDefaultValues;
pub const wbemComparisonFlagIgnoreClass = WbemComparisonFlagEnum.gnoreClass;
pub const wbemComparisonFlagIgnoreCase = WbemComparisonFlagEnum.gnoreCase;
pub const wbemComparisonFlagIgnoreFlavor = WbemComparisonFlagEnum.gnoreFlavor;

pub const WbemCimtypeEnum = enum(i32) {
    Sint8 = 16,
    Uint8 = 17,
    Sint16 = 2,
    Uint16 = 18,
    Sint32 = 3,
    Uint32 = 19,
    Sint64 = 20,
    Uint64 = 21,
    Real32 = 4,
    Real64 = 5,
    Boolean = 11,
    String = 8,
    Datetime = 101,
    Reference = 102,
    Char16 = 103,
    Object = 13,
};
pub const wbemCimtypeSint8 = WbemCimtypeEnum.Sint8;
pub const wbemCimtypeUint8 = WbemCimtypeEnum.Uint8;
pub const wbemCimtypeSint16 = WbemCimtypeEnum.Sint16;
pub const wbemCimtypeUint16 = WbemCimtypeEnum.Uint16;
pub const wbemCimtypeSint32 = WbemCimtypeEnum.Sint32;
pub const wbemCimtypeUint32 = WbemCimtypeEnum.Uint32;
pub const wbemCimtypeSint64 = WbemCimtypeEnum.Sint64;
pub const wbemCimtypeUint64 = WbemCimtypeEnum.Uint64;
pub const wbemCimtypeReal32 = WbemCimtypeEnum.Real32;
pub const wbemCimtypeReal64 = WbemCimtypeEnum.Real64;
pub const wbemCimtypeBoolean = WbemCimtypeEnum.Boolean;
pub const wbemCimtypeString = WbemCimtypeEnum.String;
pub const wbemCimtypeDatetime = WbemCimtypeEnum.Datetime;
pub const wbemCimtypeReference = WbemCimtypeEnum.Reference;
pub const wbemCimtypeChar16 = WbemCimtypeEnum.Char16;
pub const wbemCimtypeObject = WbemCimtypeEnum.Object;

pub const WbemErrorEnum = enum(i32) {
    NoErr = 0,
    ErrFailed = -2147217407,
    ErrNotFound = -2147217406,
    ErrAccessDenied = -2147217405,
    ErrProviderFailure = -2147217404,
    ErrTypeMismatch = -2147217403,
    ErrOutOfMemory = -2147217402,
    ErrInvalidContext = -2147217401,
    ErrInvalidParameter = -2147217400,
    ErrNotAvailable = -2147217399,
    ErrCriticalError = -2147217398,
    ErrInvalidStream = -2147217397,
    ErrNotSupported = -2147217396,
    ErrInvalidSuperclass = -2147217395,
    ErrInvalidNamespace = -2147217394,
    ErrInvalidObject = -2147217393,
    ErrInvalidClass = -2147217392,
    ErrProviderNotFound = -2147217391,
    ErrInvalidProviderRegistration = -2147217390,
    ErrProviderLoadFailure = -2147217389,
    ErrInitializationFailure = -2147217388,
    ErrTransportFailure = -2147217387,
    ErrInvalidOperation = -2147217386,
    ErrInvalidQuery = -2147217385,
    ErrInvalidQueryType = -2147217384,
    ErrAlreadyExists = -2147217383,
    ErrOverrideNotAllowed = -2147217382,
    ErrPropagatedQualifier = -2147217381,
    ErrPropagatedProperty = -2147217380,
    ErrUnexpected = -2147217379,
    ErrIllegalOperation = -2147217378,
    ErrCannotBeKey = -2147217377,
    ErrIncompleteClass = -2147217376,
    ErrInvalidSyntax = -2147217375,
    ErrNondecoratedObject = -2147217374,
    ErrReadOnly = -2147217373,
    ErrProviderNotCapable = -2147217372,
    ErrClassHasChildren = -2147217371,
    ErrClassHasInstances = -2147217370,
    ErrQueryNotImplemented = -2147217369,
    ErrIllegalNull = -2147217368,
    ErrInvalidQualifierType = -2147217367,
    ErrInvalidPropertyType = -2147217366,
    ErrValueOutOfRange = -2147217365,
    ErrCannotBeSingleton = -2147217364,
    ErrInvalidCimType = -2147217363,
    ErrInvalidMethod = -2147217362,
    ErrInvalidMethodParameters = -2147217361,
    ErrSystemProperty = -2147217360,
    ErrInvalidProperty = -2147217359,
    ErrCallCancelled = -2147217358,
    ErrShuttingDown = -2147217357,
    ErrPropagatedMethod = -2147217356,
    ErrUnsupportedParameter = -2147217355,
    ErrMissingParameter = -2147217354,
    ErrInvalidParameterId = -2147217353,
    ErrNonConsecutiveParameterIds = -2147217352,
    ErrParameterIdOnRetval = -2147217351,
    ErrInvalidObjectPath = -2147217350,
    ErrOutOfDiskSpace = -2147217349,
    ErrBufferTooSmall = -2147217348,
    ErrUnsupportedPutExtension = -2147217347,
    ErrUnknownObjectType = -2147217346,
    ErrUnknownPacketType = -2147217345,
    ErrMarshalVersionMismatch = -2147217344,
    ErrMarshalInvalidSignature = -2147217343,
    ErrInvalidQualifier = -2147217342,
    ErrInvalidDuplicateParameter = -2147217341,
    ErrTooMuchData = -2147217340,
    ErrServerTooBusy = -2147217339,
    ErrInvalidFlavor = -2147217338,
    ErrCircularReference = -2147217337,
    ErrUnsupportedClassUpdate = -2147217336,
    ErrCannotChangeKeyInheritance = -2147217335,
    ErrCannotChangeIndexInheritance = -2147217328,
    ErrTooManyProperties = -2147217327,
    ErrUpdateTypeMismatch = -2147217326,
    ErrUpdateOverrideNotAllowed = -2147217325,
    ErrUpdatePropagatedMethod = -2147217324,
    ErrMethodNotImplemented = -2147217323,
    ErrMethodDisabled = -2147217322,
    ErrRefresherBusy = -2147217321,
    ErrUnparsableQuery = -2147217320,
    ErrNotEventClass = -2147217319,
    ErrMissingGroupWithin = -2147217318,
    ErrMissingAggregationList = -2147217317,
    ErrPropertyNotAnObject = -2147217316,
    ErrAggregatingByObject = -2147217315,
    ErrUninterpretableProviderQuery = -2147217313,
    ErrBackupRestoreWinmgmtRunning = -2147217312,
    ErrQueueOverflow = -2147217311,
    ErrPrivilegeNotHeld = -2147217310,
    ErrInvalidOperator = -2147217309,
    ErrLocalCredentials = -2147217308,
    ErrCannotBeAbstract = -2147217307,
    ErrAmendedObject = -2147217306,
    ErrClientTooSlow = -2147217305,
    ErrNullSecurityDescriptor = -2147217304,
    ErrTimeout = -2147217303,
    ErrInvalidAssociation = -2147217302,
    ErrAmbiguousOperation = -2147217301,
    ErrQuotaViolation = -2147217300,
    ErrTransactionConflict = -2147217299,
    ErrForcedRollback = -2147217298,
    ErrUnsupportedLocale = -2147217297,
    ErrHandleOutOfDate = -2147217296,
    ErrConnectionFailed = -2147217295,
    ErrInvalidHandleRequest = -2147217294,
    ErrPropertyNameTooWide = -2147217293,
    ErrClassNameTooWide = -2147217292,
    ErrMethodNameTooWide = -2147217291,
    ErrQualifierNameTooWide = -2147217290,
    ErrRerunCommand = -2147217289,
    ErrDatabaseVerMismatch = -2147217288,
    ErrVetoPut = -2147217287,
    ErrVetoDelete = -2147217286,
    ErrInvalidLocale = -2147217280,
    ErrProviderSuspended = -2147217279,
    ErrSynchronizationRequired = -2147217278,
    ErrNoSchema = -2147217277,
    ErrProviderAlreadyRegistered = -2147217276,
    ErrProviderNotRegistered = -2147217275,
    ErrFatalTransportError = -2147217274,
    ErrEncryptedConnectionRequired = -2147217273,
    ErrRegistrationTooBroad = -2147213311,
    ErrRegistrationTooPrecise = -2147213310,
    ErrTimedout = -2147209215,
    ErrResetToDefault = -2147209214,
};
pub const wbemNoErr = WbemErrorEnum.NoErr;
pub const wbemErrFailed = WbemErrorEnum.ErrFailed;
pub const wbemErrNotFound = WbemErrorEnum.ErrNotFound;
pub const wbemErrAccessDenied = WbemErrorEnum.ErrAccessDenied;
pub const wbemErrProviderFailure = WbemErrorEnum.ErrProviderFailure;
pub const wbemErrTypeMismatch = WbemErrorEnum.ErrTypeMismatch;
pub const wbemErrOutOfMemory = WbemErrorEnum.ErrOutOfMemory;
pub const wbemErrInvalidContext = WbemErrorEnum.ErrInvalidContext;
pub const wbemErrInvalidParameter = WbemErrorEnum.ErrInvalidParameter;
pub const wbemErrNotAvailable = WbemErrorEnum.ErrNotAvailable;
pub const wbemErrCriticalError = WbemErrorEnum.ErrCriticalError;
pub const wbemErrInvalidStream = WbemErrorEnum.ErrInvalidStream;
pub const wbemErrNotSupported = WbemErrorEnum.ErrNotSupported;
pub const wbemErrInvalidSuperclass = WbemErrorEnum.ErrInvalidSuperclass;
pub const wbemErrInvalidNamespace = WbemErrorEnum.ErrInvalidNamespace;
pub const wbemErrInvalidObject = WbemErrorEnum.ErrInvalidObject;
pub const wbemErrInvalidClass = WbemErrorEnum.ErrInvalidClass;
pub const wbemErrProviderNotFound = WbemErrorEnum.ErrProviderNotFound;
pub const wbemErrInvalidProviderRegistration = WbemErrorEnum.ErrInvalidProviderRegistration;
pub const wbemErrProviderLoadFailure = WbemErrorEnum.ErrProviderLoadFailure;
pub const wbemErrInitializationFailure = WbemErrorEnum.ErrInitializationFailure;
pub const wbemErrTransportFailure = WbemErrorEnum.ErrTransportFailure;
pub const wbemErrInvalidOperation = WbemErrorEnum.ErrInvalidOperation;
pub const wbemErrInvalidQuery = WbemErrorEnum.ErrInvalidQuery;
pub const wbemErrInvalidQueryType = WbemErrorEnum.ErrInvalidQueryType;
pub const wbemErrAlreadyExists = WbemErrorEnum.ErrAlreadyExists;
pub const wbemErrOverrideNotAllowed = WbemErrorEnum.ErrOverrideNotAllowed;
pub const wbemErrPropagatedQualifier = WbemErrorEnum.ErrPropagatedQualifier;
pub const wbemErrPropagatedProperty = WbemErrorEnum.ErrPropagatedProperty;
pub const wbemErrUnexpected = WbemErrorEnum.ErrUnexpected;
pub const wbemErrIllegalOperation = WbemErrorEnum.ErrIllegalOperation;
pub const wbemErrCannotBeKey = WbemErrorEnum.ErrCannotBeKey;
pub const wbemErrIncompleteClass = WbemErrorEnum.ErrIncompleteClass;
pub const wbemErrInvalidSyntax = WbemErrorEnum.ErrInvalidSyntax;
pub const wbemErrNondecoratedObject = WbemErrorEnum.ErrNondecoratedObject;
pub const wbemErrReadOnly = WbemErrorEnum.ErrReadOnly;
pub const wbemErrProviderNotCapable = WbemErrorEnum.ErrProviderNotCapable;
pub const wbemErrClassHasChildren = WbemErrorEnum.ErrClassHasChildren;
pub const wbemErrClassHasInstances = WbemErrorEnum.ErrClassHasInstances;
pub const wbemErrQueryNotImplemented = WbemErrorEnum.ErrQueryNotImplemented;
pub const wbemErrIllegalNull = WbemErrorEnum.ErrIllegalNull;
pub const wbemErrInvalidQualifierType = WbemErrorEnum.ErrInvalidQualifierType;
pub const wbemErrInvalidPropertyType = WbemErrorEnum.ErrInvalidPropertyType;
pub const wbemErrValueOutOfRange = WbemErrorEnum.ErrValueOutOfRange;
pub const wbemErrCannotBeSingleton = WbemErrorEnum.ErrCannotBeSingleton;
pub const wbemErrInvalidCimType = WbemErrorEnum.ErrInvalidCimType;
pub const wbemErrInvalidMethod = WbemErrorEnum.ErrInvalidMethod;
pub const wbemErrInvalidMethodParameters = WbemErrorEnum.ErrInvalidMethodParameters;
pub const wbemErrSystemProperty = WbemErrorEnum.ErrSystemProperty;
pub const wbemErrInvalidProperty = WbemErrorEnum.ErrInvalidProperty;
pub const wbemErrCallCancelled = WbemErrorEnum.ErrCallCancelled;
pub const wbemErrShuttingDown = WbemErrorEnum.ErrShuttingDown;
pub const wbemErrPropagatedMethod = WbemErrorEnum.ErrPropagatedMethod;
pub const wbemErrUnsupportedParameter = WbemErrorEnum.ErrUnsupportedParameter;
pub const wbemErrMissingParameter = WbemErrorEnum.ErrMissingParameter;
pub const wbemErrInvalidParameterId = WbemErrorEnum.ErrInvalidParameterId;
pub const wbemErrNonConsecutiveParameterIds = WbemErrorEnum.ErrNonConsecutiveParameterIds;
pub const wbemErrParameterIdOnRetval = WbemErrorEnum.ErrParameterIdOnRetval;
pub const wbemErrInvalidObjectPath = WbemErrorEnum.ErrInvalidObjectPath;
pub const wbemErrOutOfDiskSpace = WbemErrorEnum.ErrOutOfDiskSpace;
pub const wbemErrBufferTooSmall = WbemErrorEnum.ErrBufferTooSmall;
pub const wbemErrUnsupportedPutExtension = WbemErrorEnum.ErrUnsupportedPutExtension;
pub const wbemErrUnknownObjectType = WbemErrorEnum.ErrUnknownObjectType;
pub const wbemErrUnknownPacketType = WbemErrorEnum.ErrUnknownPacketType;
pub const wbemErrMarshalVersionMismatch = WbemErrorEnum.ErrMarshalVersionMismatch;
pub const wbemErrMarshalInvalidSignature = WbemErrorEnum.ErrMarshalInvalidSignature;
pub const wbemErrInvalidQualifier = WbemErrorEnum.ErrInvalidQualifier;
pub const wbemErrInvalidDuplicateParameter = WbemErrorEnum.ErrInvalidDuplicateParameter;
pub const wbemErrTooMuchData = WbemErrorEnum.ErrTooMuchData;
pub const wbemErrServerTooBusy = WbemErrorEnum.ErrServerTooBusy;
pub const wbemErrInvalidFlavor = WbemErrorEnum.ErrInvalidFlavor;
pub const wbemErrCircularReference = WbemErrorEnum.ErrCircularReference;
pub const wbemErrUnsupportedClassUpdate = WbemErrorEnum.ErrUnsupportedClassUpdate;
pub const wbemErrCannotChangeKeyInheritance = WbemErrorEnum.ErrCannotChangeKeyInheritance;
pub const wbemErrCannotChangeIndexInheritance = WbemErrorEnum.ErrCannotChangeIndexInheritance;
pub const wbemErrTooManyProperties = WbemErrorEnum.ErrTooManyProperties;
pub const wbemErrUpdateTypeMismatch = WbemErrorEnum.ErrUpdateTypeMismatch;
pub const wbemErrUpdateOverrideNotAllowed = WbemErrorEnum.ErrUpdateOverrideNotAllowed;
pub const wbemErrUpdatePropagatedMethod = WbemErrorEnum.ErrUpdatePropagatedMethod;
pub const wbemErrMethodNotImplemented = WbemErrorEnum.ErrMethodNotImplemented;
pub const wbemErrMethodDisabled = WbemErrorEnum.ErrMethodDisabled;
pub const wbemErrRefresherBusy = WbemErrorEnum.ErrRefresherBusy;
pub const wbemErrUnparsableQuery = WbemErrorEnum.ErrUnparsableQuery;
pub const wbemErrNotEventClass = WbemErrorEnum.ErrNotEventClass;
pub const wbemErrMissingGroupWithin = WbemErrorEnum.ErrMissingGroupWithin;
pub const wbemErrMissingAggregationList = WbemErrorEnum.ErrMissingAggregationList;
pub const wbemErrPropertyNotAnObject = WbemErrorEnum.ErrPropertyNotAnObject;
pub const wbemErrAggregatingByObject = WbemErrorEnum.ErrAggregatingByObject;
pub const wbemErrUninterpretableProviderQuery = WbemErrorEnum.ErrUninterpretableProviderQuery;
pub const wbemErrBackupRestoreWinmgmtRunning = WbemErrorEnum.ErrBackupRestoreWinmgmtRunning;
pub const wbemErrQueueOverflow = WbemErrorEnum.ErrQueueOverflow;
pub const wbemErrPrivilegeNotHeld = WbemErrorEnum.ErrPrivilegeNotHeld;
pub const wbemErrInvalidOperator = WbemErrorEnum.ErrInvalidOperator;
pub const wbemErrLocalCredentials = WbemErrorEnum.ErrLocalCredentials;
pub const wbemErrCannotBeAbstract = WbemErrorEnum.ErrCannotBeAbstract;
pub const wbemErrAmendedObject = WbemErrorEnum.ErrAmendedObject;
pub const wbemErrClientTooSlow = WbemErrorEnum.ErrClientTooSlow;
pub const wbemErrNullSecurityDescriptor = WbemErrorEnum.ErrNullSecurityDescriptor;
pub const wbemErrTimeout = WbemErrorEnum.ErrTimeout;
pub const wbemErrInvalidAssociation = WbemErrorEnum.ErrInvalidAssociation;
pub const wbemErrAmbiguousOperation = WbemErrorEnum.ErrAmbiguousOperation;
pub const wbemErrQuotaViolation = WbemErrorEnum.ErrQuotaViolation;
pub const wbemErrTransactionConflict = WbemErrorEnum.ErrTransactionConflict;
pub const wbemErrForcedRollback = WbemErrorEnum.ErrForcedRollback;
pub const wbemErrUnsupportedLocale = WbemErrorEnum.ErrUnsupportedLocale;
pub const wbemErrHandleOutOfDate = WbemErrorEnum.ErrHandleOutOfDate;
pub const wbemErrConnectionFailed = WbemErrorEnum.ErrConnectionFailed;
pub const wbemErrInvalidHandleRequest = WbemErrorEnum.ErrInvalidHandleRequest;
pub const wbemErrPropertyNameTooWide = WbemErrorEnum.ErrPropertyNameTooWide;
pub const wbemErrClassNameTooWide = WbemErrorEnum.ErrClassNameTooWide;
pub const wbemErrMethodNameTooWide = WbemErrorEnum.ErrMethodNameTooWide;
pub const wbemErrQualifierNameTooWide = WbemErrorEnum.ErrQualifierNameTooWide;
pub const wbemErrRerunCommand = WbemErrorEnum.ErrRerunCommand;
pub const wbemErrDatabaseVerMismatch = WbemErrorEnum.ErrDatabaseVerMismatch;
pub const wbemErrVetoPut = WbemErrorEnum.ErrVetoPut;
pub const wbemErrVetoDelete = WbemErrorEnum.ErrVetoDelete;
pub const wbemErrInvalidLocale = WbemErrorEnum.ErrInvalidLocale;
pub const wbemErrProviderSuspended = WbemErrorEnum.ErrProviderSuspended;
pub const wbemErrSynchronizationRequired = WbemErrorEnum.ErrSynchronizationRequired;
pub const wbemErrNoSchema = WbemErrorEnum.ErrNoSchema;
pub const wbemErrProviderAlreadyRegistered = WbemErrorEnum.ErrProviderAlreadyRegistered;
pub const wbemErrProviderNotRegistered = WbemErrorEnum.ErrProviderNotRegistered;
pub const wbemErrFatalTransportError = WbemErrorEnum.ErrFatalTransportError;
pub const wbemErrEncryptedConnectionRequired = WbemErrorEnum.ErrEncryptedConnectionRequired;
pub const wbemErrRegistrationTooBroad = WbemErrorEnum.ErrRegistrationTooBroad;
pub const wbemErrRegistrationTooPrecise = WbemErrorEnum.ErrRegistrationTooPrecise;
pub const wbemErrTimedout = WbemErrorEnum.ErrTimedout;
pub const wbemErrResetToDefault = WbemErrorEnum.ErrResetToDefault;

pub const WbemAuthenticationLevelEnum = enum(i32) {
    Default = 0,
    None = 1,
    Connect = 2,
    Call = 3,
    Pkt = 4,
    PktIntegrity = 5,
    PktPrivacy = 6,
};
pub const wbemAuthenticationLevelDefault = WbemAuthenticationLevelEnum.Default;
pub const wbemAuthenticationLevelNone = WbemAuthenticationLevelEnum.None;
pub const wbemAuthenticationLevelConnect = WbemAuthenticationLevelEnum.Connect;
pub const wbemAuthenticationLevelCall = WbemAuthenticationLevelEnum.Call;
pub const wbemAuthenticationLevelPkt = WbemAuthenticationLevelEnum.Pkt;
pub const wbemAuthenticationLevelPktIntegrity = WbemAuthenticationLevelEnum.PktIntegrity;
pub const wbemAuthenticationLevelPktPrivacy = WbemAuthenticationLevelEnum.PktPrivacy;

pub const WbemImpersonationLevelEnum = enum(i32) {
    Anonymous = 1,
    Identify = 2,
    Impersonate = 3,
    Delegate = 4,
};
pub const wbemImpersonationLevelAnonymous = WbemImpersonationLevelEnum.Anonymous;
pub const wbemImpersonationLevelIdentify = WbemImpersonationLevelEnum.Identify;
pub const wbemImpersonationLevelImpersonate = WbemImpersonationLevelEnum.Impersonate;
pub const wbemImpersonationLevelDelegate = WbemImpersonationLevelEnum.Delegate;

pub const WbemPrivilegeEnum = enum(i32) {
    CreateToken = 1,
    PrimaryToken = 2,
    LockMemory = 3,
    IncreaseQuota = 4,
    MachineAccount = 5,
    Tcb = 6,
    Security = 7,
    TakeOwnership = 8,
    LoadDriver = 9,
    SystemProfile = 10,
    Systemtime = 11,
    ProfileSingleProcess = 12,
    IncreaseBasePriority = 13,
    CreatePagefile = 14,
    CreatePermanent = 15,
    Backup = 16,
    Restore = 17,
    Shutdown = 18,
    Debug = 19,
    Audit = 20,
    SystemEnvironment = 21,
    ChangeNotify = 22,
    RemoteShutdown = 23,
    Undock = 24,
    SyncAgent = 25,
    EnableDelegation = 26,
    ManageVolume = 27,
};
pub const wbemPrivilegeCreateToken = WbemPrivilegeEnum.CreateToken;
pub const wbemPrivilegePrimaryToken = WbemPrivilegeEnum.PrimaryToken;
pub const wbemPrivilegeLockMemory = WbemPrivilegeEnum.LockMemory;
pub const wbemPrivilegeIncreaseQuota = WbemPrivilegeEnum.IncreaseQuota;
pub const wbemPrivilegeMachineAccount = WbemPrivilegeEnum.MachineAccount;
pub const wbemPrivilegeTcb = WbemPrivilegeEnum.Tcb;
pub const wbemPrivilegeSecurity = WbemPrivilegeEnum.Security;
pub const wbemPrivilegeTakeOwnership = WbemPrivilegeEnum.TakeOwnership;
pub const wbemPrivilegeLoadDriver = WbemPrivilegeEnum.LoadDriver;
pub const wbemPrivilegeSystemProfile = WbemPrivilegeEnum.SystemProfile;
pub const wbemPrivilegeSystemtime = WbemPrivilegeEnum.Systemtime;
pub const wbemPrivilegeProfileSingleProcess = WbemPrivilegeEnum.ProfileSingleProcess;
pub const wbemPrivilegeIncreaseBasePriority = WbemPrivilegeEnum.IncreaseBasePriority;
pub const wbemPrivilegeCreatePagefile = WbemPrivilegeEnum.CreatePagefile;
pub const wbemPrivilegeCreatePermanent = WbemPrivilegeEnum.CreatePermanent;
pub const wbemPrivilegeBackup = WbemPrivilegeEnum.Backup;
pub const wbemPrivilegeRestore = WbemPrivilegeEnum.Restore;
pub const wbemPrivilegeShutdown = WbemPrivilegeEnum.Shutdown;
pub const wbemPrivilegeDebug = WbemPrivilegeEnum.Debug;
pub const wbemPrivilegeAudit = WbemPrivilegeEnum.Audit;
pub const wbemPrivilegeSystemEnvironment = WbemPrivilegeEnum.SystemEnvironment;
pub const wbemPrivilegeChangeNotify = WbemPrivilegeEnum.ChangeNotify;
pub const wbemPrivilegeRemoteShutdown = WbemPrivilegeEnum.RemoteShutdown;
pub const wbemPrivilegeUndock = WbemPrivilegeEnum.Undock;
pub const wbemPrivilegeSyncAgent = WbemPrivilegeEnum.SyncAgent;
pub const wbemPrivilegeEnableDelegation = WbemPrivilegeEnum.EnableDelegation;
pub const wbemPrivilegeManageVolume = WbemPrivilegeEnum.ManageVolume;

pub const WbemObjectTextFormatEnum = enum(i32) {
    CIMDTD20 = 1,
    WMIDTD20 = 2,
};
pub const wbemObjectTextFormatCIMDTD20 = WbemObjectTextFormatEnum.CIMDTD20;
pub const wbemObjectTextFormatWMIDTD20 = WbemObjectTextFormatEnum.WMIDTD20;

pub const WbemConnectOptionsEnum = enum(i32) {
    t = 128,
};
pub const wbemConnectFlagUseMaxWait = WbemConnectOptionsEnum.t;

const IID_ISWbemServices_Value = Guid.initString("76a6415c-cb41-11d1-8b02-00600806d9b6");
pub const IID_ISWbemServices = &IID_ISWbemServices_Value;
pub const ISWbemServices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Get: *const fn (
            self: *const ISWbemServices,
            str_object_path: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAsync: *const fn (
            self: *const ISWbemServices,
            obj_wbem_sink: ?*IDispatch,
            str_object_path: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const ISWbemServices,
            str_object_path: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAsync: *const fn (
            self: *const ISWbemServices,
            obj_wbem_sink: ?*IDispatch,
            str_object_path: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstancesOf: *const fn (
            self: *const ISWbemServices,
            str_class: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstancesOfAsync: *const fn (
            self: *const ISWbemServices,
            obj_wbem_sink: ?*IDispatch,
            str_class: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubclassesOf: *const fn (
            self: *const ISWbemServices,
            str_superclass: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubclassesOfAsync: *const fn (
            self: *const ISWbemServices,
            obj_wbem_sink: ?*IDispatch,
            str_superclass: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecQuery: *const fn (
            self: *const ISWbemServices,
            str_query: ?BSTR,
            str_query_language: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecQueryAsync: *const fn (
            self: *const ISWbemServices,
            obj_wbem_sink: ?*IDispatch,
            str_query: ?BSTR,
            str_query_language: ?BSTR,
            l_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssociatorsOf: *const fn (
            self: *const ISWbemServices,
            str_object_path: ?BSTR,
            str_assoc_class: ?BSTR,
            str_result_class: ?BSTR,
            str_result_role: ?BSTR,
            str_role: ?BSTR,
            b_classes_only: i16,
            b_schema_only: i16,
            str_required_assoc_qualifier: ?BSTR,
            str_required_qualifier: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssociatorsOfAsync: *const fn (
            self: *const ISWbemServices,
            obj_wbem_sink: ?*IDispatch,
            str_object_path: ?BSTR,
            str_assoc_class: ?BSTR,
            str_result_class: ?BSTR,
            str_result_role: ?BSTR,
            str_role: ?BSTR,
            b_classes_only: i16,
            b_schema_only: i16,
            str_required_assoc_qualifier: ?BSTR,
            str_required_qualifier: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReferencesTo: *const fn (
            self: *const ISWbemServices,
            str_object_path: ?BSTR,
            str_result_class: ?BSTR,
            str_role: ?BSTR,
            b_classes_only: i16,
            b_schema_only: i16,
            str_required_qualifier: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReferencesToAsync: *const fn (
            self: *const ISWbemServices,
            obj_wbem_sink: ?*IDispatch,
            str_object_path: ?BSTR,
            str_result_class: ?BSTR,
            str_role: ?BSTR,
            b_classes_only: i16,
            b_schema_only: i16,
            str_required_qualifier: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecNotificationQuery: *const fn (
            self: *const ISWbemServices,
            str_query: ?BSTR,
            str_query_language: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_event_source: ?*?*ISWbemEventSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecNotificationQueryAsync: *const fn (
            self: *const ISWbemServices,
            obj_wbem_sink: ?*IDispatch,
            str_query: ?BSTR,
            str_query_language: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethod: *const fn (
            self: *const ISWbemServices,
            str_object_path: ?BSTR,
            str_method_name: ?BSTR,
            obj_wbem_in_parameters: ?*IDispatch,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_out_parameters: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethodAsync: *const fn (
            self: *const ISWbemServices,
            obj_wbem_sink: ?*IDispatch,
            str_object_path: ?BSTR,
            str_method_name: ?BSTR,
            obj_wbem_in_parameters: ?*IDispatch,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemServices,
            obj_wbem_security: ?*?*ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn get(self: *const T, str_object_path_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).Get(@as(*const ISWbemServices, @ptrCast(self)), str_object_path_, i_flags_, obj_wbem_named_value_set_, obj_wbem_object_);
            }
            pub inline fn getAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_object_path_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).GetAsync(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_sink_, str_object_path_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn delete(self: *const T, str_object_path_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).Delete(@as(*const ISWbemServices, @ptrCast(self)), str_object_path_, i_flags_, obj_wbem_named_value_set_);
            }
            pub inline fn deleteAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_object_path_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).DeleteAsync(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_sink_, str_object_path_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn instancesOf(self: *const T, str_class_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).InstancesOf(@as(*const ISWbemServices, @ptrCast(self)), str_class_, i_flags_, obj_wbem_named_value_set_, obj_wbem_object_set_);
            }
            pub inline fn instancesOfAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_class_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).InstancesOfAsync(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_sink_, str_class_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn subclassesOf(self: *const T, str_superclass_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).SubclassesOf(@as(*const ISWbemServices, @ptrCast(self)), str_superclass_, i_flags_, obj_wbem_named_value_set_, obj_wbem_object_set_);
            }
            pub inline fn subclassesOfAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_superclass_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).SubclassesOfAsync(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_sink_, str_superclass_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn execQuery(self: *const T, str_query_: ?BSTR, str_query_language_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).ExecQuery(@as(*const ISWbemServices, @ptrCast(self)), str_query_, str_query_language_, i_flags_, obj_wbem_named_value_set_, obj_wbem_object_set_);
            }
            pub inline fn execQueryAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_query_: ?BSTR, str_query_language_: ?BSTR, l_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).ExecQueryAsync(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_sink_, str_query_, str_query_language_, l_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn associatorsOf(self: *const T, str_object_path_: ?BSTR, str_assoc_class_: ?BSTR, str_result_class_: ?BSTR, str_result_role_: ?BSTR, str_role_: ?BSTR, b_classes_only_: i16, b_schema_only_: i16, str_required_assoc_qualifier_: ?BSTR, str_required_qualifier_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).AssociatorsOf(@as(*const ISWbemServices, @ptrCast(self)), str_object_path_, str_assoc_class_, str_result_class_, str_result_role_, str_role_, b_classes_only_, b_schema_only_, str_required_assoc_qualifier_, str_required_qualifier_, i_flags_, obj_wbem_named_value_set_, obj_wbem_object_set_);
            }
            pub inline fn associatorsOfAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_object_path_: ?BSTR, str_assoc_class_: ?BSTR, str_result_class_: ?BSTR, str_result_role_: ?BSTR, str_role_: ?BSTR, b_classes_only_: i16, b_schema_only_: i16, str_required_assoc_qualifier_: ?BSTR, str_required_qualifier_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).AssociatorsOfAsync(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_sink_, str_object_path_, str_assoc_class_, str_result_class_, str_result_role_, str_role_, b_classes_only_, b_schema_only_, str_required_assoc_qualifier_, str_required_qualifier_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn referencesTo(self: *const T, str_object_path_: ?BSTR, str_result_class_: ?BSTR, str_role_: ?BSTR, b_classes_only_: i16, b_schema_only_: i16, str_required_qualifier_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).ReferencesTo(@as(*const ISWbemServices, @ptrCast(self)), str_object_path_, str_result_class_, str_role_, b_classes_only_, b_schema_only_, str_required_qualifier_, i_flags_, obj_wbem_named_value_set_, obj_wbem_object_set_);
            }
            pub inline fn referencesToAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_object_path_: ?BSTR, str_result_class_: ?BSTR, str_role_: ?BSTR, b_classes_only_: i16, b_schema_only_: i16, str_required_qualifier_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).ReferencesToAsync(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_sink_, str_object_path_, str_result_class_, str_role_, b_classes_only_, b_schema_only_, str_required_qualifier_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn execNotificationQuery(self: *const T, str_query_: ?BSTR, str_query_language_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_event_source_: ?*?*ISWbemEventSource) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).ExecNotificationQuery(@as(*const ISWbemServices, @ptrCast(self)), str_query_, str_query_language_, i_flags_, obj_wbem_named_value_set_, obj_wbem_event_source_);
            }
            pub inline fn execNotificationQueryAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_query_: ?BSTR, str_query_language_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).ExecNotificationQueryAsync(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_sink_, str_query_, str_query_language_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn execMethod(self: *const T, str_object_path_: ?BSTR, str_method_name_: ?BSTR, obj_wbem_in_parameters_: ?*IDispatch, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_out_parameters_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).ExecMethod(@as(*const ISWbemServices, @ptrCast(self)), str_object_path_, str_method_name_, obj_wbem_in_parameters_, i_flags_, obj_wbem_named_value_set_, obj_wbem_out_parameters_);
            }
            pub inline fn execMethodAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_object_path_: ?BSTR, str_method_name_: ?BSTR, obj_wbem_in_parameters_: ?*IDispatch, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).ExecMethodAsync(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_sink_, str_object_path_, str_method_name_, obj_wbem_in_parameters_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn getSecurity(self: *const T, obj_wbem_security_: ?*?*ISWbemSecurity) HRESULT {
                return @as(*const ISWbemServices.VTable, @ptrCast(self.vtable)).get_Security_(@as(*const ISWbemServices, @ptrCast(self)), obj_wbem_security_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemLocator_Value = Guid.initString("76a6415b-cb41-11d1-8b02-00600806d9b6");
pub const IID_ISWbemLocator = &IID_ISWbemLocator_Value;
pub const ISWbemLocator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ConnectServer: *const fn (
            self: *const ISWbemLocator,
            str_server: ?BSTR,
            str_namespace: ?BSTR,
            str_user: ?BSTR,
            str_password: ?BSTR,
            str_locale: ?BSTR,
            str_authority: ?BSTR,
            i_security_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_services: ?*?*ISWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemLocator,
            obj_wbem_security: ?*?*ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn connectServer(self: *const T, str_server_: ?BSTR, str_namespace_: ?BSTR, str_user_: ?BSTR, str_password_: ?BSTR, str_locale_: ?BSTR, str_authority_: ?BSTR, i_security_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_services_: ?*?*ISWbemServices) HRESULT {
                return @as(*const ISWbemLocator.VTable, @ptrCast(self.vtable)).ConnectServer(@as(*const ISWbemLocator, @ptrCast(self)), str_server_, str_namespace_, str_user_, str_password_, str_locale_, str_authority_, i_security_flags_, obj_wbem_named_value_set_, obj_wbem_services_);
            }
            pub inline fn getSecurity(self: *const T, obj_wbem_security_: ?*?*ISWbemSecurity) HRESULT {
                return @as(*const ISWbemLocator.VTable, @ptrCast(self.vtable)).get_Security_(@as(*const ISWbemLocator, @ptrCast(self)), obj_wbem_security_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemObject_Value = Guid.initString("76a6415a-cb41-11d1-8b02-00600806d9b6");
pub const IID_ISWbemObject = &IID_ISWbemObject_Value;
pub const ISWbemObject = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Put_: *const fn (
            self: *const ISWbemObject,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_path: ?*?*ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutAsync_: *const fn (
            self: *const ISWbemObject,
            obj_wbem_sink: ?*IDispatch,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete_: *const fn (
            self: *const ISWbemObject,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAsync_: *const fn (
            self: *const ISWbemObject,
            obj_wbem_sink: ?*IDispatch,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Instances_: *const fn (
            self: *const ISWbemObject,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstancesAsync_: *const fn (
            self: *const ISWbemObject,
            obj_wbem_sink: ?*IDispatch,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Subclasses_: *const fn (
            self: *const ISWbemObject,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubclassesAsync_: *const fn (
            self: *const ISWbemObject,
            obj_wbem_sink: ?*IDispatch,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Associators_: *const fn (
            self: *const ISWbemObject,
            str_assoc_class: ?BSTR,
            str_result_class: ?BSTR,
            str_result_role: ?BSTR,
            str_role: ?BSTR,
            b_classes_only: i16,
            b_schema_only: i16,
            str_required_assoc_qualifier: ?BSTR,
            str_required_qualifier: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssociatorsAsync_: *const fn (
            self: *const ISWbemObject,
            obj_wbem_sink: ?*IDispatch,
            str_assoc_class: ?BSTR,
            str_result_class: ?BSTR,
            str_result_role: ?BSTR,
            str_role: ?BSTR,
            b_classes_only: i16,
            b_schema_only: i16,
            str_required_assoc_qualifier: ?BSTR,
            str_required_qualifier: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        References_: *const fn (
            self: *const ISWbemObject,
            str_result_class: ?BSTR,
            str_role: ?BSTR,
            b_classes_only: i16,
            b_schema_only: i16,
            str_required_qualifier: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReferencesAsync_: *const fn (
            self: *const ISWbemObject,
            obj_wbem_sink: ?*IDispatch,
            str_result_class: ?BSTR,
            str_role: ?BSTR,
            b_classes_only: i16,
            b_schema_only: i16,
            str_required_qualifier: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethod_: *const fn (
            self: *const ISWbemObject,
            str_method_name: ?BSTR,
            obj_wbem_in_parameters: ?*IDispatch,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_out_parameters: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecMethodAsync_: *const fn (
            self: *const ISWbemObject,
            obj_wbem_sink: ?*IDispatch,
            str_method_name: ?BSTR,
            obj_wbem_in_parameters: ?*IDispatch,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone_: *const fn (
            self: *const ISWbemObject,
            obj_wbem_object: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectText_: *const fn (
            self: *const ISWbemObject,
            i_flags: i32,
            str_object_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SpawnDerivedClass_: *const fn (
            self: *const ISWbemObject,
            i_flags: i32,
            obj_wbem_object: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SpawnInstance_: *const fn (
            self: *const ISWbemObject,
            i_flags: i32,
            obj_wbem_object: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareTo_: *const fn (
            self: *const ISWbemObject,
            obj_wbem_object: ?*IDispatch,
            i_flags: i32,
            b_result: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Qualifiers_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObject,
            obj_wbem_qualifier_set: ?*?*ISWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObject,
            obj_wbem_property_set: ?*?*ISWbemPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Methods_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObject,
            obj_wbem_method_set: ?*?*ISWbemMethodSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Derivation_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObject,
            str_class_name_array: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObject,
            obj_wbem_object_path: ?*?*ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObject,
            obj_wbem_security: ?*?*ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn put(self: *const T, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_path_: ?*?*ISWbemObjectPath) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).Put_(@as(*const ISWbemObject, @ptrCast(self)), i_flags_, obj_wbem_named_value_set_, obj_wbem_object_path_);
            }
            pub inline fn putAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).PutAsync_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_sink_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn delete(self: *const T, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).Delete_(@as(*const ISWbemObject, @ptrCast(self)), i_flags_, obj_wbem_named_value_set_);
            }
            pub inline fn deleteAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).DeleteAsync_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_sink_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn instances(self: *const T, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).Instances_(@as(*const ISWbemObject, @ptrCast(self)), i_flags_, obj_wbem_named_value_set_, obj_wbem_object_set_);
            }
            pub inline fn instancesAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).InstancesAsync_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_sink_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn subclasses(self: *const T, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).Subclasses_(@as(*const ISWbemObject, @ptrCast(self)), i_flags_, obj_wbem_named_value_set_, obj_wbem_object_set_);
            }
            pub inline fn subclassesAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).SubclassesAsync_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_sink_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn associators(self: *const T, str_assoc_class_: ?BSTR, str_result_class_: ?BSTR, str_result_role_: ?BSTR, str_role_: ?BSTR, b_classes_only_: i16, b_schema_only_: i16, str_required_assoc_qualifier_: ?BSTR, str_required_qualifier_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).Associators_(@as(*const ISWbemObject, @ptrCast(self)), str_assoc_class_, str_result_class_, str_result_role_, str_role_, b_classes_only_, b_schema_only_, str_required_assoc_qualifier_, str_required_qualifier_, i_flags_, obj_wbem_named_value_set_, obj_wbem_object_set_);
            }
            pub inline fn associatorsAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_assoc_class_: ?BSTR, str_result_class_: ?BSTR, str_result_role_: ?BSTR, str_role_: ?BSTR, b_classes_only_: i16, b_schema_only_: i16, str_required_assoc_qualifier_: ?BSTR, str_required_qualifier_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).AssociatorsAsync_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_sink_, str_assoc_class_, str_result_class_, str_result_role_, str_role_, b_classes_only_, b_schema_only_, str_required_assoc_qualifier_, str_required_qualifier_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn references(self: *const T, str_result_class_: ?BSTR, str_role_: ?BSTR, b_classes_only_: i16, b_schema_only_: i16, str_required_qualifier_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).References_(@as(*const ISWbemObject, @ptrCast(self)), str_result_class_, str_role_, b_classes_only_, b_schema_only_, str_required_qualifier_, i_flags_, obj_wbem_named_value_set_, obj_wbem_object_set_);
            }
            pub inline fn referencesAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_result_class_: ?BSTR, str_role_: ?BSTR, b_classes_only_: i16, b_schema_only_: i16, str_required_qualifier_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).ReferencesAsync_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_sink_, str_result_class_, str_role_, b_classes_only_, b_schema_only_, str_required_qualifier_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn execMethod(self: *const T, str_method_name_: ?BSTR, obj_wbem_in_parameters_: ?*IDispatch, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_out_parameters_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).ExecMethod_(@as(*const ISWbemObject, @ptrCast(self)), str_method_name_, obj_wbem_in_parameters_, i_flags_, obj_wbem_named_value_set_, obj_wbem_out_parameters_);
            }
            pub inline fn execMethodAsync(self: *const T, obj_wbem_sink_: ?*IDispatch, str_method_name_: ?BSTR, obj_wbem_in_parameters_: ?*IDispatch, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).ExecMethodAsync_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_sink_, str_method_name_, obj_wbem_in_parameters_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
            pub inline fn clone(self: *const T, obj_wbem_object_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).Clone_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_object_);
            }
            pub inline fn getObjectText(self: *const T, i_flags_: i32, str_object_text_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).GetObjectText_(@as(*const ISWbemObject, @ptrCast(self)), i_flags_, str_object_text_);
            }
            pub inline fn spawnDerivedClass(self: *const T, i_flags_: i32, obj_wbem_object_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).SpawnDerivedClass_(@as(*const ISWbemObject, @ptrCast(self)), i_flags_, obj_wbem_object_);
            }
            pub inline fn spawnInstance(self: *const T, i_flags_: i32, obj_wbem_object_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).SpawnInstance_(@as(*const ISWbemObject, @ptrCast(self)), i_flags_, obj_wbem_object_);
            }
            pub inline fn compareTo(self: *const T, obj_wbem_object_: ?*IDispatch, i_flags_: i32, b_result_: ?*i16) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).CompareTo_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_object_, i_flags_, b_result_);
            }
            pub inline fn getQualifiers(self: *const T, obj_wbem_qualifier_set_: ?*?*ISWbemQualifierSet) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).get_Qualifiers_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_qualifier_set_);
            }
            pub inline fn getProperties(self: *const T, obj_wbem_property_set_: ?*?*ISWbemPropertySet) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).get_Properties_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_property_set_);
            }
            pub inline fn getMethods(self: *const T, obj_wbem_method_set_: ?*?*ISWbemMethodSet) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).get_Methods_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_method_set_);
            }
            pub inline fn getDerivation(self: *const T, str_class_name_array_: ?*VARIANT) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).get_Derivation_(@as(*const ISWbemObject, @ptrCast(self)), str_class_name_array_);
            }
            pub inline fn getPath(self: *const T, obj_wbem_object_path_: ?*?*ISWbemObjectPath) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).get_Path_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_object_path_);
            }
            pub inline fn getSecurity(self: *const T, obj_wbem_security_: ?*?*ISWbemSecurity) HRESULT {
                return @as(*const ISWbemObject.VTable, @ptrCast(self.vtable)).get_Security_(@as(*const ISWbemObject, @ptrCast(self)), obj_wbem_security_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemObjectSet_Value = Guid.initString("76a6415f-cb41-11d1-8b02-00600806d9b6");
pub const IID_ISWbemObjectSet = &IID_ISWbemObjectSet_Value;
pub const ISWbemObjectSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectSet,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const ISWbemObjectSet,
            str_object_path: ?BSTR,
            i_flags: i32,
            obj_wbem_object: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectSet,
            i_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectSet,
            obj_wbem_security: ?*?*ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemIndex: *const fn (
            self: *const ISWbemObjectSet,
            l_index: i32,
            obj_wbem_object: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ISWbemObjectSet.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISWbemObjectSet, @ptrCast(self)), p_unk_);
            }
            pub inline fn item(self: *const T, str_object_path_: ?BSTR, i_flags_: i32, obj_wbem_object_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemObjectSet.VTable, @ptrCast(self.vtable)).Item(@as(*const ISWbemObjectSet, @ptrCast(self)), str_object_path_, i_flags_, obj_wbem_object_);
            }
            pub inline fn getCount(self: *const T, i_count_: ?*i32) HRESULT {
                return @as(*const ISWbemObjectSet.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISWbemObjectSet, @ptrCast(self)), i_count_);
            }
            pub inline fn getSecurity(self: *const T, obj_wbem_security_: ?*?*ISWbemSecurity) HRESULT {
                return @as(*const ISWbemObjectSet.VTable, @ptrCast(self.vtable)).get_Security_(@as(*const ISWbemObjectSet, @ptrCast(self)), obj_wbem_security_);
            }
            pub inline fn itemIndex(self: *const T, l_index_: i32, obj_wbem_object_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemObjectSet.VTable, @ptrCast(self.vtable)).ItemIndex(@as(*const ISWbemObjectSet, @ptrCast(self)), l_index_, obj_wbem_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemNamedValue_Value = Guid.initString("76a64164-cb41-11d1-8b02-00600806d9b6");
pub const IID_ISWbemNamedValue = &IID_ISWbemNamedValue_Value;
pub const ISWbemNamedValue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemNamedValue,
            var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemNamedValue,
            var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemNamedValue,
            str_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getValue(self: *const T, var_value_: ?*VARIANT) HRESULT {
                return @as(*const ISWbemNamedValue.VTable, @ptrCast(self.vtable)).get_Value(@as(*const ISWbemNamedValue, @ptrCast(self)), var_value_);
            }
            pub inline fn putValue(self: *const T, var_value_: ?*VARIANT) HRESULT {
                return @as(*const ISWbemNamedValue.VTable, @ptrCast(self.vtable)).put_Value(@as(*const ISWbemNamedValue, @ptrCast(self)), var_value_);
            }
            pub inline fn getName(self: *const T, str_name_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemNamedValue.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ISWbemNamedValue, @ptrCast(self)), str_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemNamedValueSet_Value = Guid.initString("cf2376ea-ce8c-11d1-8b05-00600806d9b6");
pub const IID_ISWbemNamedValueSet = &IID_ISWbemNamedValueSet_Value;
pub const ISWbemNamedValueSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemNamedValueSet,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const ISWbemNamedValueSet,
            str_name: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value: ?*?*ISWbemNamedValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemNamedValueSet,
            i_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ISWbemNamedValueSet,
            str_name: ?BSTR,
            var_value: ?*VARIANT,
            i_flags: i32,
            obj_wbem_named_value: ?*?*ISWbemNamedValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ISWbemNamedValueSet,
            str_name: ?BSTR,
            i_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const ISWbemNamedValueSet,
            obj_wbem_named_value_set: ?*?*ISWbemNamedValueSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAll: *const fn (
            self: *const ISWbemNamedValueSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ISWbemNamedValueSet.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISWbemNamedValueSet, @ptrCast(self)), p_unk_);
            }
            pub inline fn item(self: *const T, str_name_: ?BSTR, i_flags_: i32, obj_wbem_named_value_: ?*?*ISWbemNamedValue) HRESULT {
                return @as(*const ISWbemNamedValueSet.VTable, @ptrCast(self.vtable)).Item(@as(*const ISWbemNamedValueSet, @ptrCast(self)), str_name_, i_flags_, obj_wbem_named_value_);
            }
            pub inline fn getCount(self: *const T, i_count_: ?*i32) HRESULT {
                return @as(*const ISWbemNamedValueSet.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISWbemNamedValueSet, @ptrCast(self)), i_count_);
            }
            pub inline fn add(self: *const T, str_name_: ?BSTR, var_value_: ?*VARIANT, i_flags_: i32, obj_wbem_named_value_: ?*?*ISWbemNamedValue) HRESULT {
                return @as(*const ISWbemNamedValueSet.VTable, @ptrCast(self.vtable)).Add(@as(*const ISWbemNamedValueSet, @ptrCast(self)), str_name_, var_value_, i_flags_, obj_wbem_named_value_);
            }
            pub inline fn remove(self: *const T, str_name_: ?BSTR, i_flags_: i32) HRESULT {
                return @as(*const ISWbemNamedValueSet.VTable, @ptrCast(self.vtable)).Remove(@as(*const ISWbemNamedValueSet, @ptrCast(self)), str_name_, i_flags_);
            }
            pub inline fn clone(self: *const T, obj_wbem_named_value_set_: ?*?*ISWbemNamedValueSet) HRESULT {
                return @as(*const ISWbemNamedValueSet.VTable, @ptrCast(self.vtable)).Clone(@as(*const ISWbemNamedValueSet, @ptrCast(self)), obj_wbem_named_value_set_);
            }
            pub inline fn deleteAll(self: *const T) HRESULT {
                return @as(*const ISWbemNamedValueSet.VTable, @ptrCast(self.vtable)).DeleteAll(@as(*const ISWbemNamedValueSet, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemQualifier_Value = Guid.initString("79b05932-d3b7-11d1-8b06-00600806d9b6");
pub const IID_ISWbemQualifier = &IID_ISWbemQualifier_Value;
pub const ISWbemQualifier = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            str_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLocal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            b_is_local: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropagatesToSubclass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            b_propagates_to_subclass: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PropagatesToSubclass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            b_propagates_to_subclass: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropagatesToInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            b_propagates_to_instance: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PropagatesToInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            b_propagates_to_instance: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOverridable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            b_is_overridable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsOverridable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            b_is_overridable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAmended: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifier,
            b_is_amended: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getValue(self: *const T, var_value_: ?*VARIANT) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).get_Value(@as(*const ISWbemQualifier, @ptrCast(self)), var_value_);
            }
            pub inline fn putValue(self: *const T, var_value_: ?*VARIANT) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).put_Value(@as(*const ISWbemQualifier, @ptrCast(self)), var_value_);
            }
            pub inline fn getName(self: *const T, str_name_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ISWbemQualifier, @ptrCast(self)), str_name_);
            }
            pub inline fn getIsLocal(self: *const T, b_is_local_: ?*i16) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).get_IsLocal(@as(*const ISWbemQualifier, @ptrCast(self)), b_is_local_);
            }
            pub inline fn getPropagatesToSubclass(self: *const T, b_propagates_to_subclass_: ?*i16) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).get_PropagatesToSubclass(@as(*const ISWbemQualifier, @ptrCast(self)), b_propagates_to_subclass_);
            }
            pub inline fn putPropagatesToSubclass(self: *const T, b_propagates_to_subclass_: i16) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).put_PropagatesToSubclass(@as(*const ISWbemQualifier, @ptrCast(self)), b_propagates_to_subclass_);
            }
            pub inline fn getPropagatesToInstance(self: *const T, b_propagates_to_instance_: ?*i16) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).get_PropagatesToInstance(@as(*const ISWbemQualifier, @ptrCast(self)), b_propagates_to_instance_);
            }
            pub inline fn putPropagatesToInstance(self: *const T, b_propagates_to_instance_: i16) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).put_PropagatesToInstance(@as(*const ISWbemQualifier, @ptrCast(self)), b_propagates_to_instance_);
            }
            pub inline fn getIsOverridable(self: *const T, b_is_overridable_: ?*i16) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).get_IsOverridable(@as(*const ISWbemQualifier, @ptrCast(self)), b_is_overridable_);
            }
            pub inline fn putIsOverridable(self: *const T, b_is_overridable_: i16) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).put_IsOverridable(@as(*const ISWbemQualifier, @ptrCast(self)), b_is_overridable_);
            }
            pub inline fn getIsAmended(self: *const T, b_is_amended_: ?*i16) HRESULT {
                return @as(*const ISWbemQualifier.VTable, @ptrCast(self.vtable)).get_IsAmended(@as(*const ISWbemQualifier, @ptrCast(self)), b_is_amended_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemQualifierSet_Value = Guid.initString("9b16ed16-d3df-11d1-8b08-00600806d9b6");
pub const IID_ISWbemQualifierSet = &IID_ISWbemQualifierSet_Value;
pub const ISWbemQualifierSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifierSet,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const ISWbemQualifierSet,
            name: ?BSTR,
            i_flags: i32,
            obj_wbem_qualifier: ?*?*ISWbemQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemQualifierSet,
            i_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ISWbemQualifierSet,
            str_name: ?BSTR,
            var_val: ?*VARIANT,
            b_propagates_to_subclass: i16,
            b_propagates_to_instance: i16,
            b_is_overridable: i16,
            i_flags: i32,
            obj_wbem_qualifier: ?*?*ISWbemQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ISWbemQualifierSet,
            str_name: ?BSTR,
            i_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ISWbemQualifierSet.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISWbemQualifierSet, @ptrCast(self)), p_unk_);
            }
            pub inline fn item(self: *const T, name_: ?BSTR, i_flags_: i32, obj_wbem_qualifier_: ?*?*ISWbemQualifier) HRESULT {
                return @as(*const ISWbemQualifierSet.VTable, @ptrCast(self.vtable)).Item(@as(*const ISWbemQualifierSet, @ptrCast(self)), name_, i_flags_, obj_wbem_qualifier_);
            }
            pub inline fn getCount(self: *const T, i_count_: ?*i32) HRESULT {
                return @as(*const ISWbemQualifierSet.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISWbemQualifierSet, @ptrCast(self)), i_count_);
            }
            pub inline fn add(self: *const T, str_name_: ?BSTR, var_val_: ?*VARIANT, b_propagates_to_subclass_: i16, b_propagates_to_instance_: i16, b_is_overridable_: i16, i_flags_: i32, obj_wbem_qualifier_: ?*?*ISWbemQualifier) HRESULT {
                return @as(*const ISWbemQualifierSet.VTable, @ptrCast(self.vtable)).Add(@as(*const ISWbemQualifierSet, @ptrCast(self)), str_name_, var_val_, b_propagates_to_subclass_, b_propagates_to_instance_, b_is_overridable_, i_flags_, obj_wbem_qualifier_);
            }
            pub inline fn remove(self: *const T, str_name_: ?BSTR, i_flags_: i32) HRESULT {
                return @as(*const ISWbemQualifierSet.VTable, @ptrCast(self.vtable)).Remove(@as(*const ISWbemQualifierSet, @ptrCast(self)), str_name_, i_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemProperty_Value = Guid.initString("1a388f98-d4ba-11d1-8b09-00600806d9b6");
pub const IID_ISWbemProperty = &IID_ISWbemProperty_Value;
pub const ISWbemProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemProperty,
            var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemProperty,
            var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemProperty,
            str_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLocal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemProperty,
            b_is_local: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Origin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemProperty,
            str_origin: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CIMType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemProperty,
            i_cim_type: ?*WbemCimtypeEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Qualifiers_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemProperty,
            obj_wbem_qualifier_set: ?*?*ISWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsArray: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemProperty,
            b_is_array: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getValue(self: *const T, var_value_: ?*VARIANT) HRESULT {
                return @as(*const ISWbemProperty.VTable, @ptrCast(self.vtable)).get_Value(@as(*const ISWbemProperty, @ptrCast(self)), var_value_);
            }
            pub inline fn putValue(self: *const T, var_value_: ?*VARIANT) HRESULT {
                return @as(*const ISWbemProperty.VTable, @ptrCast(self.vtable)).put_Value(@as(*const ISWbemProperty, @ptrCast(self)), var_value_);
            }
            pub inline fn getName(self: *const T, str_name_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemProperty.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ISWbemProperty, @ptrCast(self)), str_name_);
            }
            pub inline fn getIsLocal(self: *const T, b_is_local_: ?*i16) HRESULT {
                return @as(*const ISWbemProperty.VTable, @ptrCast(self.vtable)).get_IsLocal(@as(*const ISWbemProperty, @ptrCast(self)), b_is_local_);
            }
            pub inline fn getOrigin(self: *const T, str_origin_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemProperty.VTable, @ptrCast(self.vtable)).get_Origin(@as(*const ISWbemProperty, @ptrCast(self)), str_origin_);
            }
            pub inline fn getCIMType(self: *const T, i_cim_type_: ?*WbemCimtypeEnum) HRESULT {
                return @as(*const ISWbemProperty.VTable, @ptrCast(self.vtable)).get_CIMType(@as(*const ISWbemProperty, @ptrCast(self)), i_cim_type_);
            }
            pub inline fn getQualifiers(self: *const T, obj_wbem_qualifier_set_: ?*?*ISWbemQualifierSet) HRESULT {
                return @as(*const ISWbemProperty.VTable, @ptrCast(self.vtable)).get_Qualifiers_(@as(*const ISWbemProperty, @ptrCast(self)), obj_wbem_qualifier_set_);
            }
            pub inline fn getIsArray(self: *const T, b_is_array_: ?*i16) HRESULT {
                return @as(*const ISWbemProperty.VTable, @ptrCast(self.vtable)).get_IsArray(@as(*const ISWbemProperty, @ptrCast(self)), b_is_array_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemPropertySet_Value = Guid.initString("dea0a7b2-d4ba-11d1-8b09-00600806d9b6");
pub const IID_ISWbemPropertySet = &IID_ISWbemPropertySet_Value;
pub const ISWbemPropertySet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemPropertySet,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const ISWbemPropertySet,
            str_name: ?BSTR,
            i_flags: i32,
            obj_wbem_property: ?*?*ISWbemProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemPropertySet,
            i_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ISWbemPropertySet,
            str_name: ?BSTR,
            i_c_i_m_type: WbemCimtypeEnum,
            b_is_array: i16,
            i_flags: i32,
            obj_wbem_property: ?*?*ISWbemProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ISWbemPropertySet,
            str_name: ?BSTR,
            i_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ISWbemPropertySet.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISWbemPropertySet, @ptrCast(self)), p_unk_);
            }
            pub inline fn item(self: *const T, str_name_: ?BSTR, i_flags_: i32, obj_wbem_property_: ?*?*ISWbemProperty) HRESULT {
                return @as(*const ISWbemPropertySet.VTable, @ptrCast(self.vtable)).Item(@as(*const ISWbemPropertySet, @ptrCast(self)), str_name_, i_flags_, obj_wbem_property_);
            }
            pub inline fn getCount(self: *const T, i_count_: ?*i32) HRESULT {
                return @as(*const ISWbemPropertySet.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISWbemPropertySet, @ptrCast(self)), i_count_);
            }
            pub inline fn add(self: *const T, str_name_: ?BSTR, i_c_i_m_type_: WbemCimtypeEnum, b_is_array_: i16, i_flags_: i32, obj_wbem_property_: ?*?*ISWbemProperty) HRESULT {
                return @as(*const ISWbemPropertySet.VTable, @ptrCast(self.vtable)).Add(@as(*const ISWbemPropertySet, @ptrCast(self)), str_name_, i_c_i_m_type_, b_is_array_, i_flags_, obj_wbem_property_);
            }
            pub inline fn remove(self: *const T, str_name_: ?BSTR, i_flags_: i32) HRESULT {
                return @as(*const ISWbemPropertySet.VTable, @ptrCast(self.vtable)).Remove(@as(*const ISWbemPropertySet, @ptrCast(self)), str_name_, i_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemMethod_Value = Guid.initString("422e8e90-d955-11d1-8b09-00600806d9b6");
pub const IID_ISWbemMethod = &IID_ISWbemMethod_Value;
pub const ISWbemMethod = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemMethod,
            str_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Origin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemMethod,
            str_origin: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InParameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemMethod,
            obj_wbem_in_parameters: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutParameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemMethod,
            obj_wbem_out_parameters: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Qualifiers_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemMethod,
            obj_wbem_qualifier_set: ?*?*ISWbemQualifierSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, str_name_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemMethod.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ISWbemMethod, @ptrCast(self)), str_name_);
            }
            pub inline fn getOrigin(self: *const T, str_origin_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemMethod.VTable, @ptrCast(self.vtable)).get_Origin(@as(*const ISWbemMethod, @ptrCast(self)), str_origin_);
            }
            pub inline fn getInParameters(self: *const T, obj_wbem_in_parameters_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemMethod.VTable, @ptrCast(self.vtable)).get_InParameters(@as(*const ISWbemMethod, @ptrCast(self)), obj_wbem_in_parameters_);
            }
            pub inline fn getOutParameters(self: *const T, obj_wbem_out_parameters_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemMethod.VTable, @ptrCast(self.vtable)).get_OutParameters(@as(*const ISWbemMethod, @ptrCast(self)), obj_wbem_out_parameters_);
            }
            pub inline fn getQualifiers(self: *const T, obj_wbem_qualifier_set_: ?*?*ISWbemQualifierSet) HRESULT {
                return @as(*const ISWbemMethod.VTable, @ptrCast(self.vtable)).get_Qualifiers_(@as(*const ISWbemMethod, @ptrCast(self)), obj_wbem_qualifier_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemMethodSet_Value = Guid.initString("c93ba292-d955-11d1-8b09-00600806d9b6");
pub const IID_ISWbemMethodSet = &IID_ISWbemMethodSet_Value;
pub const ISWbemMethodSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemMethodSet,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const ISWbemMethodSet,
            str_name: ?BSTR,
            i_flags: i32,
            obj_wbem_method: ?*?*ISWbemMethod,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemMethodSet,
            i_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ISWbemMethodSet.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISWbemMethodSet, @ptrCast(self)), p_unk_);
            }
            pub inline fn item(self: *const T, str_name_: ?BSTR, i_flags_: i32, obj_wbem_method_: ?*?*ISWbemMethod) HRESULT {
                return @as(*const ISWbemMethodSet.VTable, @ptrCast(self.vtable)).Item(@as(*const ISWbemMethodSet, @ptrCast(self)), str_name_, i_flags_, obj_wbem_method_);
            }
            pub inline fn getCount(self: *const T, i_count_: ?*i32) HRESULT {
                return @as(*const ISWbemMethodSet.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISWbemMethodSet, @ptrCast(self)), i_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemEventSource_Value = Guid.initString("27d54d92-0ebe-11d2-8b22-00600806d9b6");
pub const IID_ISWbemEventSource = &IID_ISWbemEventSource_Value;
pub const ISWbemEventSource = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        NextEvent: *const fn (
            self: *const ISWbemEventSource,
            i_timeout_ms: i32,
            obj_wbem_object: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemEventSource,
            obj_wbem_security: ?*?*ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn nextEvent(self: *const T, i_timeout_ms_: i32, obj_wbem_object_: ?*?*ISWbemObject) HRESULT {
                return @as(*const ISWbemEventSource.VTable, @ptrCast(self.vtable)).NextEvent(@as(*const ISWbemEventSource, @ptrCast(self)), i_timeout_ms_, obj_wbem_object_);
            }
            pub inline fn getSecurity(self: *const T, obj_wbem_security_: ?*?*ISWbemSecurity) HRESULT {
                return @as(*const ISWbemEventSource.VTable, @ptrCast(self.vtable)).get_Security_(@as(*const ISWbemEventSource, @ptrCast(self)), obj_wbem_security_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemObjectPath_Value = Guid.initString("5791bc27-ce9c-11d1-97bf-0000f81e849c");
pub const IID_ISWbemObjectPath = &IID_ISWbemObjectPath_Value;
pub const ISWbemObjectPath = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RelPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_rel_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RelPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_rel_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Server: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_server: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Server: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Namespace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_namespace: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Namespace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_namespace: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentNamespace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_parent_namespace: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_display_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_class: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Class: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_class: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsClass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            b_is_class: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAsClass: *const fn (
            self: *const ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsSingleton: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            b_is_singleton: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAsSingleton: *const fn (
            self: *const ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Keys: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            obj_wbem_named_value_set: ?*?*ISWbemNamedValueSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            obj_wbem_security: ?*?*ISWbemSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Locale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_locale: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Locale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_locale: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_authority: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectPath,
            str_authority: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPath(self: *const T, str_path_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_Path(@as(*const ISWbemObjectPath, @ptrCast(self)), str_path_);
            }
            pub inline fn putPath(self: *const T, str_path_: ?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).put_Path(@as(*const ISWbemObjectPath, @ptrCast(self)), str_path_);
            }
            pub inline fn getRelPath(self: *const T, str_rel_path_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_RelPath(@as(*const ISWbemObjectPath, @ptrCast(self)), str_rel_path_);
            }
            pub inline fn putRelPath(self: *const T, str_rel_path_: ?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).put_RelPath(@as(*const ISWbemObjectPath, @ptrCast(self)), str_rel_path_);
            }
            pub inline fn getServer(self: *const T, str_server_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_Server(@as(*const ISWbemObjectPath, @ptrCast(self)), str_server_);
            }
            pub inline fn putServer(self: *const T, str_server_: ?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).put_Server(@as(*const ISWbemObjectPath, @ptrCast(self)), str_server_);
            }
            pub inline fn getNamespace(self: *const T, str_namespace_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_Namespace(@as(*const ISWbemObjectPath, @ptrCast(self)), str_namespace_);
            }
            pub inline fn putNamespace(self: *const T, str_namespace_: ?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).put_Namespace(@as(*const ISWbemObjectPath, @ptrCast(self)), str_namespace_);
            }
            pub inline fn getParentNamespace(self: *const T, str_parent_namespace_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_ParentNamespace(@as(*const ISWbemObjectPath, @ptrCast(self)), str_parent_namespace_);
            }
            pub inline fn getDisplayName(self: *const T, str_display_name_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const ISWbemObjectPath, @ptrCast(self)), str_display_name_);
            }
            pub inline fn putDisplayName(self: *const T, str_display_name_: ?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).put_DisplayName(@as(*const ISWbemObjectPath, @ptrCast(self)), str_display_name_);
            }
            pub inline fn getClass(self: *const T, str_class_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_Class(@as(*const ISWbemObjectPath, @ptrCast(self)), str_class_);
            }
            pub inline fn putClass(self: *const T, str_class_: ?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).put_Class(@as(*const ISWbemObjectPath, @ptrCast(self)), str_class_);
            }
            pub inline fn getIsClass(self: *const T, b_is_class_: ?*i16) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_IsClass(@as(*const ISWbemObjectPath, @ptrCast(self)), b_is_class_);
            }
            pub inline fn setAsClass(self: *const T) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).SetAsClass(@as(*const ISWbemObjectPath, @ptrCast(self)));
            }
            pub inline fn getIsSingleton(self: *const T, b_is_singleton_: ?*i16) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_IsSingleton(@as(*const ISWbemObjectPath, @ptrCast(self)), b_is_singleton_);
            }
            pub inline fn setAsSingleton(self: *const T) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).SetAsSingleton(@as(*const ISWbemObjectPath, @ptrCast(self)));
            }
            pub inline fn getKeys(self: *const T, obj_wbem_named_value_set_: ?*?*ISWbemNamedValueSet) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_Keys(@as(*const ISWbemObjectPath, @ptrCast(self)), obj_wbem_named_value_set_);
            }
            pub inline fn getSecurity(self: *const T, obj_wbem_security_: ?*?*ISWbemSecurity) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_Security_(@as(*const ISWbemObjectPath, @ptrCast(self)), obj_wbem_security_);
            }
            pub inline fn getLocale(self: *const T, str_locale_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_Locale(@as(*const ISWbemObjectPath, @ptrCast(self)), str_locale_);
            }
            pub inline fn putLocale(self: *const T, str_locale_: ?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).put_Locale(@as(*const ISWbemObjectPath, @ptrCast(self)), str_locale_);
            }
            pub inline fn getAuthority(self: *const T, str_authority_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).get_Authority(@as(*const ISWbemObjectPath, @ptrCast(self)), str_authority_);
            }
            pub inline fn putAuthority(self: *const T, str_authority_: ?BSTR) HRESULT {
                return @as(*const ISWbemObjectPath.VTable, @ptrCast(self.vtable)).put_Authority(@as(*const ISWbemObjectPath, @ptrCast(self)), str_authority_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemLastError_Value = Guid.initString("d962db84-d4bb-11d1-8b09-00600806d9b6");
pub const IID_ISWbemLastError = &IID_ISWbemLastError_Value;
pub const ISWbemLastError = extern struct {
    pub const VTable = extern struct {
        base: ISWbemObject.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISWbemObject.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemSinkEvents_Value = Guid.initString("75718ca0-f029-11d1-a1ac-00c04fb6c223");
pub const IID_ISWbemSinkEvents = &IID_ISWbemSinkEvents_Value;
pub const ISWbemSinkEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemSink_Value = Guid.initString("75718c9f-f029-11d1-a1ac-00c04fb6c223");
pub const IID_ISWbemSink = &IID_ISWbemSink_Value;
pub const ISWbemSink = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Cancel: *const fn (
            self: *const ISWbemSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const ISWbemSink.VTable, @ptrCast(self.vtable)).Cancel(@as(*const ISWbemSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemSecurity_Value = Guid.initString("b54d66e6-2287-11d2-8b33-00600806d9b6");
pub const IID_ISWbemSecurity = &IID_ISWbemSecurity_Value;
pub const ISWbemSecurity = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImpersonationLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemSecurity,
            i_impersonation_level: ?*WbemImpersonationLevelEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ImpersonationLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemSecurity,
            i_impersonation_level: WbemImpersonationLevelEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemSecurity,
            i_authentication_level: ?*WbemAuthenticationLevelEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemSecurity,
            i_authentication_level: WbemAuthenticationLevelEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Privileges: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemSecurity,
            obj_wbem_privilege_set: ?*?*ISWbemPrivilegeSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getImpersonationLevel(self: *const T, i_impersonation_level_: ?*WbemImpersonationLevelEnum) HRESULT {
                return @as(*const ISWbemSecurity.VTable, @ptrCast(self.vtable)).get_ImpersonationLevel(@as(*const ISWbemSecurity, @ptrCast(self)), i_impersonation_level_);
            }
            pub inline fn putImpersonationLevel(self: *const T, i_impersonation_level_: WbemImpersonationLevelEnum) HRESULT {
                return @as(*const ISWbemSecurity.VTable, @ptrCast(self.vtable)).put_ImpersonationLevel(@as(*const ISWbemSecurity, @ptrCast(self)), i_impersonation_level_);
            }
            pub inline fn getAuthenticationLevel(self: *const T, i_authentication_level_: ?*WbemAuthenticationLevelEnum) HRESULT {
                return @as(*const ISWbemSecurity.VTable, @ptrCast(self.vtable)).get_AuthenticationLevel(@as(*const ISWbemSecurity, @ptrCast(self)), i_authentication_level_);
            }
            pub inline fn putAuthenticationLevel(self: *const T, i_authentication_level_: WbemAuthenticationLevelEnum) HRESULT {
                return @as(*const ISWbemSecurity.VTable, @ptrCast(self.vtable)).put_AuthenticationLevel(@as(*const ISWbemSecurity, @ptrCast(self)), i_authentication_level_);
            }
            pub inline fn getPrivileges(self: *const T, obj_wbem_privilege_set_: ?*?*ISWbemPrivilegeSet) HRESULT {
                return @as(*const ISWbemSecurity.VTable, @ptrCast(self.vtable)).get_Privileges(@as(*const ISWbemSecurity, @ptrCast(self)), obj_wbem_privilege_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemPrivilege_Value = Guid.initString("26ee67bd-5804-11d2-8b4a-00600806d9b6");
pub const IID_ISWbemPrivilege = &IID_ISWbemPrivilege_Value;
pub const ISWbemPrivilege = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemPrivilege,
            b_is_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemPrivilege,
            b_is_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemPrivilege,
            str_display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemPrivilege,
            str_display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Identifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemPrivilege,
            i_privilege: ?*WbemPrivilegeEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIsEnabled(self: *const T, b_is_enabled_: ?*i16) HRESULT {
                return @as(*const ISWbemPrivilege.VTable, @ptrCast(self.vtable)).get_IsEnabled(@as(*const ISWbemPrivilege, @ptrCast(self)), b_is_enabled_);
            }
            pub inline fn putIsEnabled(self: *const T, b_is_enabled_: i16) HRESULT {
                return @as(*const ISWbemPrivilege.VTable, @ptrCast(self.vtable)).put_IsEnabled(@as(*const ISWbemPrivilege, @ptrCast(self)), b_is_enabled_);
            }
            pub inline fn getName(self: *const T, str_display_name_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemPrivilege.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ISWbemPrivilege, @ptrCast(self)), str_display_name_);
            }
            pub inline fn getDisplayName(self: *const T, str_display_name_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemPrivilege.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const ISWbemPrivilege, @ptrCast(self)), str_display_name_);
            }
            pub inline fn getIdentifier(self: *const T, i_privilege_: ?*WbemPrivilegeEnum) HRESULT {
                return @as(*const ISWbemPrivilege.VTable, @ptrCast(self.vtable)).get_Identifier(@as(*const ISWbemPrivilege, @ptrCast(self)), i_privilege_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemPrivilegeSet_Value = Guid.initString("26ee67bf-5804-11d2-8b4a-00600806d9b6");
pub const IID_ISWbemPrivilegeSet = &IID_ISWbemPrivilegeSet_Value;
pub const ISWbemPrivilegeSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemPrivilegeSet,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const ISWbemPrivilegeSet,
            i_privilege: WbemPrivilegeEnum,
            obj_wbem_privilege: ?*?*ISWbemPrivilege,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemPrivilegeSet,
            i_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ISWbemPrivilegeSet,
            i_privilege: WbemPrivilegeEnum,
            b_is_enabled: i16,
            obj_wbem_privilege: ?*?*ISWbemPrivilege,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ISWbemPrivilegeSet,
            i_privilege: WbemPrivilegeEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAll: *const fn (
            self: *const ISWbemPrivilegeSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAsString: *const fn (
            self: *const ISWbemPrivilegeSet,
            str_privilege: ?BSTR,
            b_is_enabled: i16,
            obj_wbem_privilege: ?*?*ISWbemPrivilege,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ISWbemPrivilegeSet.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISWbemPrivilegeSet, @ptrCast(self)), p_unk_);
            }
            pub inline fn item(self: *const T, i_privilege_: WbemPrivilegeEnum, obj_wbem_privilege_: ?*?*ISWbemPrivilege) HRESULT {
                return @as(*const ISWbemPrivilegeSet.VTable, @ptrCast(self.vtable)).Item(@as(*const ISWbemPrivilegeSet, @ptrCast(self)), i_privilege_, obj_wbem_privilege_);
            }
            pub inline fn getCount(self: *const T, i_count_: ?*i32) HRESULT {
                return @as(*const ISWbemPrivilegeSet.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISWbemPrivilegeSet, @ptrCast(self)), i_count_);
            }
            pub inline fn add(self: *const T, i_privilege_: WbemPrivilegeEnum, b_is_enabled_: i16, obj_wbem_privilege_: ?*?*ISWbemPrivilege) HRESULT {
                return @as(*const ISWbemPrivilegeSet.VTable, @ptrCast(self.vtable)).Add(@as(*const ISWbemPrivilegeSet, @ptrCast(self)), i_privilege_, b_is_enabled_, obj_wbem_privilege_);
            }
            pub inline fn remove(self: *const T, i_privilege_: WbemPrivilegeEnum) HRESULT {
                return @as(*const ISWbemPrivilegeSet.VTable, @ptrCast(self.vtable)).Remove(@as(*const ISWbemPrivilegeSet, @ptrCast(self)), i_privilege_);
            }
            pub inline fn deleteAll(self: *const T) HRESULT {
                return @as(*const ISWbemPrivilegeSet.VTable, @ptrCast(self.vtable)).DeleteAll(@as(*const ISWbemPrivilegeSet, @ptrCast(self)));
            }
            pub inline fn addAsString(self: *const T, str_privilege_: ?BSTR, b_is_enabled_: i16, obj_wbem_privilege_: ?*?*ISWbemPrivilege) HRESULT {
                return @as(*const ISWbemPrivilegeSet.VTable, @ptrCast(self.vtable)).AddAsString(@as(*const ISWbemPrivilegeSet, @ptrCast(self)), str_privilege_, b_is_enabled_, obj_wbem_privilege_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemServicesEx_Value = Guid.initString("d2f68443-85dc-427e-91d8-366554cc754c");
pub const IID_ISWbemServicesEx = &IID_ISWbemServicesEx_Value;
pub const ISWbemServicesEx = extern struct {
    pub const VTable = extern struct {
        base: ISWbemServices.VTable,
        Put: *const fn (
            self: *const ISWbemServicesEx,
            obj_wbem_object: ?*ISWbemObjectEx,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_object_path: ?*?*ISWbemObjectPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutAsync: *const fn (
            self: *const ISWbemServicesEx,
            obj_wbem_sink: ?*ISWbemSink,
            obj_wbem_object: ?*ISWbemObjectEx,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_async_context: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISWbemServices.MethodMixin(T);
            pub inline fn put(self: *const T, obj_wbem_object_: ?*ISWbemObjectEx, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_object_path_: ?*?*ISWbemObjectPath) HRESULT {
                return @as(*const ISWbemServicesEx.VTable, @ptrCast(self.vtable)).Put(@as(*const ISWbemServicesEx, @ptrCast(self)), obj_wbem_object_, i_flags_, obj_wbem_named_value_set_, obj_wbem_object_path_);
            }
            pub inline fn putAsync(self: *const T, obj_wbem_sink_: ?*ISWbemSink, obj_wbem_object_: ?*ISWbemObjectEx, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_async_context_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemServicesEx.VTable, @ptrCast(self.vtable)).PutAsync(@as(*const ISWbemServicesEx, @ptrCast(self)), obj_wbem_sink_, obj_wbem_object_, i_flags_, obj_wbem_named_value_set_, obj_wbem_async_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemObjectEx_Value = Guid.initString("269ad56a-8a67-4129-bc8c-0506dcfe9880");
pub const IID_ISWbemObjectEx = &IID_ISWbemObjectEx_Value;
pub const ISWbemObjectEx = extern struct {
    pub const VTable = extern struct {
        base: ISWbemObject.VTable,
        Refresh_: *const fn (
            self: *const ISWbemObjectEx,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SystemProperties_: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemObjectEx,
            obj_wbem_property_set: ?*?*ISWbemPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText_: *const fn (
            self: *const ISWbemObjectEx,
            i_object_text_format: WbemObjectTextFormatEnum,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            bs_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFromText_: *const fn (
            self: *const ISWbemObjectEx,
            bs_text: ?BSTR,
            i_object_text_format: WbemObjectTextFormatEnum,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISWbemObject.MethodMixin(T);
            pub inline fn refresh(self: *const T, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObjectEx.VTable, @ptrCast(self.vtable)).Refresh_(@as(*const ISWbemObjectEx, @ptrCast(self)), i_flags_, obj_wbem_named_value_set_);
            }
            pub inline fn getSystemProperties(self: *const T, obj_wbem_property_set_: ?*?*ISWbemPropertySet) HRESULT {
                return @as(*const ISWbemObjectEx.VTable, @ptrCast(self.vtable)).get_SystemProperties_(@as(*const ISWbemObjectEx, @ptrCast(self)), obj_wbem_property_set_);
            }
            pub inline fn getText(self: *const T, i_object_text_format_: WbemObjectTextFormatEnum, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, bs_text_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemObjectEx.VTable, @ptrCast(self.vtable)).GetText_(@as(*const ISWbemObjectEx, @ptrCast(self)), i_object_text_format_, i_flags_, obj_wbem_named_value_set_, bs_text_);
            }
            pub inline fn setFromText(self: *const T, bs_text_: ?BSTR, i_object_text_format_: WbemObjectTextFormatEnum, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch) HRESULT {
                return @as(*const ISWbemObjectEx.VTable, @ptrCast(self.vtable)).SetFromText_(@as(*const ISWbemObjectEx, @ptrCast(self)), bs_text_, i_object_text_format_, i_flags_, obj_wbem_named_value_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemDateTime_Value = Guid.initString("5e97458a-cf77-11d3-b38f-00105a1f473a");
pub const IID_ISWbemDateTime = &IID_ISWbemDateTime_Value;
pub const ISWbemDateTime = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            str_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Year: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_year: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Year: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_year: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_YearSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_year_specified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_YearSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_year_specified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Month: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_month: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Month: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_month: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonthSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_month_specified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonthSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_month_specified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Day: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_day: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Day: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_day: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaySpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_day_specified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaySpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_day_specified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hours: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_hours: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Hours: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_hours: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HoursSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_hours_specified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HoursSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_hours_specified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Minutes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_minutes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Minutes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_minutes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinutesSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_minutes_specified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinutesSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_minutes_specified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Seconds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_seconds: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Seconds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_seconds: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecondsSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_seconds_specified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecondsSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_seconds_specified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Microseconds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_microseconds: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Microseconds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_microseconds: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MicrosecondsSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_microseconds_specified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MicrosecondsSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_microseconds_specified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UTC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_u_t_c: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UTC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            i_u_t_c: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UTCSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_u_t_c_specified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UTCSpecified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_u_t_c_specified: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_is_interval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemDateTime,
            b_is_interval: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVarDate: *const fn (
            self: *const ISWbemDateTime,
            b_is_local: i16,
            d_var_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVarDate: *const fn (
            self: *const ISWbemDateTime,
            d_var_date: f64,
            b_is_local: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTime: *const fn (
            self: *const ISWbemDateTime,
            b_is_local: i16,
            str_file_time: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileTime: *const fn (
            self: *const ISWbemDateTime,
            str_file_time: ?BSTR,
            b_is_local: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getValue(self: *const T, str_value_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_Value(@as(*const ISWbemDateTime, @ptrCast(self)), str_value_);
            }
            pub inline fn putValue(self: *const T, str_value_: ?BSTR) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_Value(@as(*const ISWbemDateTime, @ptrCast(self)), str_value_);
            }
            pub inline fn getYear(self: *const T, i_year_: ?*i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_Year(@as(*const ISWbemDateTime, @ptrCast(self)), i_year_);
            }
            pub inline fn putYear(self: *const T, i_year_: i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_Year(@as(*const ISWbemDateTime, @ptrCast(self)), i_year_);
            }
            pub inline fn getYearSpecified(self: *const T, b_year_specified_: ?*i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_YearSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_year_specified_);
            }
            pub inline fn putYearSpecified(self: *const T, b_year_specified_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_YearSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_year_specified_);
            }
            pub inline fn getMonth(self: *const T, i_month_: ?*i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_Month(@as(*const ISWbemDateTime, @ptrCast(self)), i_month_);
            }
            pub inline fn putMonth(self: *const T, i_month_: i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_Month(@as(*const ISWbemDateTime, @ptrCast(self)), i_month_);
            }
            pub inline fn getMonthSpecified(self: *const T, b_month_specified_: ?*i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_MonthSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_month_specified_);
            }
            pub inline fn putMonthSpecified(self: *const T, b_month_specified_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_MonthSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_month_specified_);
            }
            pub inline fn getDay(self: *const T, i_day_: ?*i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_Day(@as(*const ISWbemDateTime, @ptrCast(self)), i_day_);
            }
            pub inline fn putDay(self: *const T, i_day_: i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_Day(@as(*const ISWbemDateTime, @ptrCast(self)), i_day_);
            }
            pub inline fn getDaySpecified(self: *const T, b_day_specified_: ?*i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_DaySpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_day_specified_);
            }
            pub inline fn putDaySpecified(self: *const T, b_day_specified_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_DaySpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_day_specified_);
            }
            pub inline fn getHours(self: *const T, i_hours_: ?*i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_Hours(@as(*const ISWbemDateTime, @ptrCast(self)), i_hours_);
            }
            pub inline fn putHours(self: *const T, i_hours_: i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_Hours(@as(*const ISWbemDateTime, @ptrCast(self)), i_hours_);
            }
            pub inline fn getHoursSpecified(self: *const T, b_hours_specified_: ?*i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_HoursSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_hours_specified_);
            }
            pub inline fn putHoursSpecified(self: *const T, b_hours_specified_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_HoursSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_hours_specified_);
            }
            pub inline fn getMinutes(self: *const T, i_minutes_: ?*i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_Minutes(@as(*const ISWbemDateTime, @ptrCast(self)), i_minutes_);
            }
            pub inline fn putMinutes(self: *const T, i_minutes_: i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_Minutes(@as(*const ISWbemDateTime, @ptrCast(self)), i_minutes_);
            }
            pub inline fn getMinutesSpecified(self: *const T, b_minutes_specified_: ?*i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_MinutesSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_minutes_specified_);
            }
            pub inline fn putMinutesSpecified(self: *const T, b_minutes_specified_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_MinutesSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_minutes_specified_);
            }
            pub inline fn getSeconds(self: *const T, i_seconds_: ?*i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_Seconds(@as(*const ISWbemDateTime, @ptrCast(self)), i_seconds_);
            }
            pub inline fn putSeconds(self: *const T, i_seconds_: i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_Seconds(@as(*const ISWbemDateTime, @ptrCast(self)), i_seconds_);
            }
            pub inline fn getSecondsSpecified(self: *const T, b_seconds_specified_: ?*i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_SecondsSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_seconds_specified_);
            }
            pub inline fn putSecondsSpecified(self: *const T, b_seconds_specified_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_SecondsSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_seconds_specified_);
            }
            pub inline fn getMicroseconds(self: *const T, i_microseconds_: ?*i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_Microseconds(@as(*const ISWbemDateTime, @ptrCast(self)), i_microseconds_);
            }
            pub inline fn putMicroseconds(self: *const T, i_microseconds_: i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_Microseconds(@as(*const ISWbemDateTime, @ptrCast(self)), i_microseconds_);
            }
            pub inline fn getMicrosecondsSpecified(self: *const T, b_microseconds_specified_: ?*i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_MicrosecondsSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_microseconds_specified_);
            }
            pub inline fn putMicrosecondsSpecified(self: *const T, b_microseconds_specified_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_MicrosecondsSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_microseconds_specified_);
            }
            pub inline fn getUTC(self: *const T, i_u_t_c_: ?*i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_UTC(@as(*const ISWbemDateTime, @ptrCast(self)), i_u_t_c_);
            }
            pub inline fn putUTC(self: *const T, i_u_t_c_: i32) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_UTC(@as(*const ISWbemDateTime, @ptrCast(self)), i_u_t_c_);
            }
            pub inline fn getUTCSpecified(self: *const T, b_u_t_c_specified_: ?*i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_UTCSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_u_t_c_specified_);
            }
            pub inline fn putUTCSpecified(self: *const T, b_u_t_c_specified_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_UTCSpecified(@as(*const ISWbemDateTime, @ptrCast(self)), b_u_t_c_specified_);
            }
            pub inline fn getIsInterval(self: *const T, b_is_interval_: ?*i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).get_IsInterval(@as(*const ISWbemDateTime, @ptrCast(self)), b_is_interval_);
            }
            pub inline fn putIsInterval(self: *const T, b_is_interval_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).put_IsInterval(@as(*const ISWbemDateTime, @ptrCast(self)), b_is_interval_);
            }
            pub inline fn getVarDate(self: *const T, b_is_local_: i16, d_var_date_: ?*f64) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).GetVarDate(@as(*const ISWbemDateTime, @ptrCast(self)), b_is_local_, d_var_date_);
            }
            pub inline fn setVarDate(self: *const T, d_var_date_: f64, b_is_local_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).SetVarDate(@as(*const ISWbemDateTime, @ptrCast(self)), d_var_date_, b_is_local_);
            }
            pub inline fn getFileTime(self: *const T, b_is_local_: i16, str_file_time_: ?*?BSTR) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).GetFileTime(@as(*const ISWbemDateTime, @ptrCast(self)), b_is_local_, str_file_time_);
            }
            pub inline fn setFileTime(self: *const T, str_file_time_: ?BSTR, b_is_local_: i16) HRESULT {
                return @as(*const ISWbemDateTime.VTable, @ptrCast(self.vtable)).SetFileTime(@as(*const ISWbemDateTime, @ptrCast(self)), str_file_time_, b_is_local_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemRefresher_Value = Guid.initString("14d8250e-d9c2-11d3-b38f-00105a1f473a");
pub const IID_ISWbemRefresher = &IID_ISWbemRefresher_Value;
pub const ISWbemRefresher = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemRefresher,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const ISWbemRefresher,
            i_index: i32,
            obj_wbem_refreshable_item: ?*?*ISWbemRefreshableItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemRefresher,
            i_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ISWbemRefresher,
            obj_wbem_services: ?*ISWbemServicesEx,
            bs_instance_path: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_refreshable_item: ?*?*ISWbemRefreshableItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEnum: *const fn (
            self: *const ISWbemRefresher,
            obj_wbem_services: ?*ISWbemServicesEx,
            bs_class_name: ?BSTR,
            i_flags: i32,
            obj_wbem_named_value_set: ?*IDispatch,
            obj_wbem_refreshable_item: ?*?*ISWbemRefreshableItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ISWbemRefresher,
            i_index: i32,
            i_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const ISWbemRefresher,
            i_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoReconnect: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemRefresher,
            b_count: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoReconnect: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemRefresher,
            b_count: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAll: *const fn (
            self: *const ISWbemRefresher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISWbemRefresher, @ptrCast(self)), p_unk_);
            }
            pub inline fn item(self: *const T, i_index_: i32, obj_wbem_refreshable_item_: ?*?*ISWbemRefreshableItem) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).Item(@as(*const ISWbemRefresher, @ptrCast(self)), i_index_, obj_wbem_refreshable_item_);
            }
            pub inline fn getCount(self: *const T, i_count_: ?*i32) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISWbemRefresher, @ptrCast(self)), i_count_);
            }
            pub inline fn add(self: *const T, obj_wbem_services_: ?*ISWbemServicesEx, bs_instance_path_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_refreshable_item_: ?*?*ISWbemRefreshableItem) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).Add(@as(*const ISWbemRefresher, @ptrCast(self)), obj_wbem_services_, bs_instance_path_, i_flags_, obj_wbem_named_value_set_, obj_wbem_refreshable_item_);
            }
            pub inline fn addEnum(self: *const T, obj_wbem_services_: ?*ISWbemServicesEx, bs_class_name_: ?BSTR, i_flags_: i32, obj_wbem_named_value_set_: ?*IDispatch, obj_wbem_refreshable_item_: ?*?*ISWbemRefreshableItem) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).AddEnum(@as(*const ISWbemRefresher, @ptrCast(self)), obj_wbem_services_, bs_class_name_, i_flags_, obj_wbem_named_value_set_, obj_wbem_refreshable_item_);
            }
            pub inline fn remove(self: *const T, i_index_: i32, i_flags_: i32) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).Remove(@as(*const ISWbemRefresher, @ptrCast(self)), i_index_, i_flags_);
            }
            pub inline fn refresh(self: *const T, i_flags_: i32) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).Refresh(@as(*const ISWbemRefresher, @ptrCast(self)), i_flags_);
            }
            pub inline fn getAutoReconnect(self: *const T, b_count_: ?*i16) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).get_AutoReconnect(@as(*const ISWbemRefresher, @ptrCast(self)), b_count_);
            }
            pub inline fn putAutoReconnect(self: *const T, b_count_: i16) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).put_AutoReconnect(@as(*const ISWbemRefresher, @ptrCast(self)), b_count_);
            }
            pub inline fn deleteAll(self: *const T) HRESULT {
                return @as(*const ISWbemRefresher.VTable, @ptrCast(self.vtable)).DeleteAll(@as(*const ISWbemRefresher, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISWbemRefreshableItem_Value = Guid.initString("5ad4bf92-daab-11d3-b38f-00105a1f473a");
pub const IID_ISWbemRefreshableItem = &IID_ISWbemRefreshableItem_Value;
pub const ISWbemRefreshableItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Index: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemRefreshableItem,
            i_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Refresher: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemRefreshableItem,
            obj_wbem_refresher: ?*?*ISWbemRefresher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsSet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemRefreshableItem,
            b_is_set: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Object: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemRefreshableItem,
            obj_wbem_object: ?*?*ISWbemObjectEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectSet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISWbemRefreshableItem,
            obj_wbem_object_set: ?*?*ISWbemObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ISWbemRefreshableItem,
            i_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIndex(self: *const T, i_index_: ?*i32) HRESULT {
                return @as(*const ISWbemRefreshableItem.VTable, @ptrCast(self.vtable)).get_Index(@as(*const ISWbemRefreshableItem, @ptrCast(self)), i_index_);
            }
            pub inline fn getRefresher(self: *const T, obj_wbem_refresher_: ?*?*ISWbemRefresher) HRESULT {
                return @as(*const ISWbemRefreshableItem.VTable, @ptrCast(self.vtable)).get_Refresher(@as(*const ISWbemRefreshableItem, @ptrCast(self)), obj_wbem_refresher_);
            }
            pub inline fn getIsSet(self: *const T, b_is_set_: ?*i16) HRESULT {
                return @as(*const ISWbemRefreshableItem.VTable, @ptrCast(self.vtable)).get_IsSet(@as(*const ISWbemRefreshableItem, @ptrCast(self)), b_is_set_);
            }
            pub inline fn getObject(self: *const T, obj_wbem_object_: ?*?*ISWbemObjectEx) HRESULT {
                return @as(*const ISWbemRefreshableItem.VTable, @ptrCast(self.vtable)).get_Object(@as(*const ISWbemRefreshableItem, @ptrCast(self)), obj_wbem_object_);
            }
            pub inline fn getObjectSet(self: *const T, obj_wbem_object_set_: ?*?*ISWbemObjectSet) HRESULT {
                return @as(*const ISWbemRefreshableItem.VTable, @ptrCast(self.vtable)).get_ObjectSet(@as(*const ISWbemRefreshableItem, @ptrCast(self)), obj_wbem_object_set_);
            }
            pub inline fn remove(self: *const T, i_flags_: i32) HRESULT {
                return @as(*const ISWbemRefreshableItem.VTable, @ptrCast(self.vtable)).Remove(@as(*const ISWbemRefreshableItem, @ptrCast(self)), i_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_WMIExtension_Value = Guid.initString("f0975afe-5c7f-11d2-8b74-00104b2afb41");
pub const CLSID_WMIExtension = &CLSID_WMIExtension_Value;

const IID_IWMIExtension_Value = Guid.initString("adc1f06e-5c7e-11d2-8b74-00104b2afb41");
pub const IID_IWMIExtension = &IID_IWMIExtension_Value;
pub const IWMIExtension = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WMIObjectPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMIExtension,
            str_w_m_i_object_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWMIObject: *const fn (
            self: *const IWMIExtension,
            obj_w_m_i_object: ?*?*ISWbemObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWMIServices: *const fn (
            self: *const IWMIExtension,
            obj_w_m_i_services: ?*?*ISWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getWMIObjectPath(self: *const T, str_w_m_i_object_path_: ?*?BSTR) HRESULT {
                return @as(*const IWMIExtension.VTable, @ptrCast(self.vtable)).get_WMIObjectPath(@as(*const IWMIExtension, @ptrCast(self)), str_w_m_i_object_path_);
            }
            pub inline fn getWMIObject(self: *const T, obj_w_m_i_object_: ?*?*ISWbemObject) HRESULT {
                return @as(*const IWMIExtension.VTable, @ptrCast(self.vtable)).GetWMIObject(@as(*const IWMIExtension, @ptrCast(self)), obj_w_m_i_object_);
            }
            pub inline fn getWMIServices(self: *const T, obj_w_m_i_services_: ?*?*ISWbemServices) HRESULT {
                return @as(*const IWMIExtension.VTable, @ptrCast(self.vtable)).GetWMIServices(@as(*const IWMIExtension, @ptrCast(self)), obj_w_m_i_services_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_WbemLevel1Login_Value = Guid.initString("8bc3f05e-d86b-11d0-a075-00c04fb68820");
pub const CLSID_WbemLevel1Login = &CLSID_WbemLevel1Login_Value;

const CLSID_WbemLocalAddrRes_Value = Guid.initString("a1044801-8f7e-11d1-9e7c-00c04fc324a8");
pub const CLSID_WbemLocalAddrRes = &CLSID_WbemLocalAddrRes_Value;

const CLSID_WbemUninitializedClassObject_Value = Guid.initString("7a0227f6-7108-11d1-ad90-00c04fd8fdff");
pub const CLSID_WbemUninitializedClassObject = &CLSID_WbemUninitializedClassObject_Value;

const CLSID_WbemDCOMTransport_Value = Guid.initString("f7ce2e13-8c90-11d1-9e7b-00c04fc324a8");
pub const CLSID_WbemDCOMTransport = &CLSID_WbemDCOMTransport_Value;

pub const tag_WBEM_LOGIN_TYPE = enum(i32) {
    FLAG_INPROC_LOGIN = 0,
    FLAG_LOCAL_LOGIN = 1,
    FLAG_REMOTE_LOGIN = 2,
    AUTHENTICATION_METHOD_MASK = 15,
    FLAG_USE_MULTIPLE_CHALLENGES = 16,
};
pub const WBEM_FLAG_INPROC_LOGIN = tag_WBEM_LOGIN_TYPE.FLAG_INPROC_LOGIN;
pub const WBEM_FLAG_LOCAL_LOGIN = tag_WBEM_LOGIN_TYPE.FLAG_LOCAL_LOGIN;
pub const WBEM_FLAG_REMOTE_LOGIN = tag_WBEM_LOGIN_TYPE.FLAG_REMOTE_LOGIN;
pub const WBEM_AUTHENTICATION_METHOD_MASK = tag_WBEM_LOGIN_TYPE.AUTHENTICATION_METHOD_MASK;
pub const WBEM_FLAG_USE_MULTIPLE_CHALLENGES = tag_WBEM_LOGIN_TYPE.FLAG_USE_MULTIPLE_CHALLENGES;

const IID_IWbemTransport_Value = Guid.initString("553fe584-2156-11d0-b6ae-00aa003240c7");
pub const IID_IWbemTransport = &IID_IWbemTransport_Value;
pub const IWbemTransport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IWbemTransport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T) HRESULT {
                return @as(*const IWbemTransport.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWbemTransport, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemLevel1Login_Value = Guid.initString("f309ad18-d86a-11d0-a075-00c04fb68820");
pub const IID_IWbemLevel1Login = &IID_IWbemLevel1Login_Value;
pub const IWbemLevel1Login = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EstablishPosition: *const fn (
            self: *const IWbemLevel1Login,
            wsz_locale_list: ?PWSTR,
            dw_num_locales: u32,
            reserved: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestChallenge: *const fn (
            self: *const IWbemLevel1Login,
            wsz_network_resource: ?PWSTR,
            wsz_user: ?PWSTR,
            nonce: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WBEMLogin: *const fn (
            self: *const IWbemLevel1Login,
            wsz_preferred_locale: ?PWSTR,
            access_token: ?*u8,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_namespace: ?*?*IWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NTLMLogin: *const fn (
            self: *const IWbemLevel1Login,
            wsz_network_resource: ?PWSTR,
            wsz_preferred_locale: ?PWSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            pp_namespace: ?*?*IWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn establishPosition(self: *const T, wsz_locale_list_: ?PWSTR, dw_num_locales_: u32, reserved_: ?*u32) HRESULT {
                return @as(*const IWbemLevel1Login.VTable, @ptrCast(self.vtable)).EstablishPosition(@as(*const IWbemLevel1Login, @ptrCast(self)), wsz_locale_list_, dw_num_locales_, reserved_);
            }
            pub inline fn requestChallenge(self: *const T, wsz_network_resource_: ?PWSTR, wsz_user_: ?PWSTR, nonce_: ?*u8) HRESULT {
                return @as(*const IWbemLevel1Login.VTable, @ptrCast(self.vtable)).RequestChallenge(@as(*const IWbemLevel1Login, @ptrCast(self)), wsz_network_resource_, wsz_user_, nonce_);
            }
            pub inline fn wbemLogin(self: *const T, wsz_preferred_locale_: ?PWSTR, access_token_: ?*u8, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_namespace_: ?*?*IWbemServices) HRESULT {
                return @as(*const IWbemLevel1Login.VTable, @ptrCast(self.vtable)).WBEMLogin(@as(*const IWbemLevel1Login, @ptrCast(self)), wsz_preferred_locale_, access_token_, l_flags_, p_ctx_, pp_namespace_);
            }
            pub inline fn ntlmLogin(self: *const T, wsz_network_resource_: ?PWSTR, wsz_preferred_locale_: ?PWSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, pp_namespace_: ?*?*IWbemServices) HRESULT {
                return @as(*const IWbemLevel1Login.VTable, @ptrCast(self.vtable)).NTLMLogin(@as(*const IWbemLevel1Login, @ptrCast(self)), wsz_network_resource_, wsz_preferred_locale_, l_flags_, p_ctx_, pp_namespace_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemConnectorLogin_Value = Guid.initString("d8ec9cb1-b135-4f10-8b1b-c7188bb0d186");
pub const IID_IWbemConnectorLogin = &IID_IWbemConnectorLogin_Value;
pub const IWbemConnectorLogin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectorLogin: *const fn (
            self: *const IWbemConnectorLogin,
            wsz_network_resource: ?PWSTR,
            wsz_preferred_locale: ?PWSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            riid: ?*const Guid,
            p_interface: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn connectorLogin(self: *const T, wsz_network_resource_: ?PWSTR, wsz_preferred_locale_: ?PWSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, riid_: ?*const Guid, p_interface_: ?*?*anyopaque) HRESULT {
                return @as(*const IWbemConnectorLogin.VTable, @ptrCast(self.vtable)).ConnectorLogin(@as(*const IWbemConnectorLogin, @ptrCast(self)), wsz_network_resource_, wsz_preferred_locale_, l_flags_, p_ctx_, riid_, p_interface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemAddressResolution_Value = Guid.initString("f7ce2e12-8c90-11d1-9e7b-00c04fc324a8");
pub const IID_IWbemAddressResolution = &IID_IWbemAddressResolution_Value;
pub const IWbemAddressResolution = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Resolve: *const fn (
            self: *const IWbemAddressResolution,
            wsz_namespace_path: ?PWSTR,
            wsz_address_type: ?PWSTR,
            pdw_address_length: ?*u32,
            pab_binary_address: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn resolve(self: *const T, wsz_namespace_path_: ?PWSTR, wsz_address_type_: ?PWSTR, pdw_address_length_: ?*u32, pab_binary_address_: ?*?*u8) HRESULT {
                return @as(*const IWbemAddressResolution.VTable, @ptrCast(self.vtable)).Resolve(@as(*const IWbemAddressResolution, @ptrCast(self)), wsz_namespace_path_, wsz_address_type_, pdw_address_length_, pab_binary_address_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemClientTransport_Value = Guid.initString("f7ce2e11-8c90-11d1-9e7b-00c04fc324a8");
pub const IID_IWbemClientTransport = &IID_IWbemClientTransport_Value;
pub const IWbemClientTransport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectServer: *const fn (
            self: *const IWbemClientTransport,
            str_address_type: ?BSTR,
            dw_binary_address_length: u32,
            ab_binary_address: [*:0]u8,
            str_network_resource: ?BSTR,
            str_user: ?BSTR,
            str_password: ?BSTR,
            str_locale: ?BSTR,
            l_security_flags: i32,
            str_authority: ?BSTR,
            p_ctx: ?*IWbemContext,
            pp_namespace: ?*?*IWbemServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn connectServer(self: *const T, str_address_type_: ?BSTR, dw_binary_address_length_: u32, ab_binary_address_: [*:0]u8, str_network_resource_: ?BSTR, str_user_: ?BSTR, str_password_: ?BSTR, str_locale_: ?BSTR, l_security_flags_: i32, str_authority_: ?BSTR, p_ctx_: ?*IWbemContext, pp_namespace_: ?*?*IWbemServices) HRESULT {
                return @as(*const IWbemClientTransport.VTable, @ptrCast(self.vtable)).ConnectServer(@as(*const IWbemClientTransport, @ptrCast(self)), str_address_type_, dw_binary_address_length_, ab_binary_address_, str_network_resource_, str_user_, str_password_, str_locale_, l_security_flags_, str_authority_, p_ctx_, pp_namespace_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemClientConnectionTransport_Value = Guid.initString("a889c72a-fcc1-4a9e-af61-ed071333fb5b");
pub const IID_IWbemClientConnectionTransport = &IID_IWbemClientConnectionTransport_Value;
pub const IWbemClientConnectionTransport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn (
            self: *const IWbemClientConnectionTransport,
            str_address_type: ?BSTR,
            dw_binary_address_length: u32,
            ab_binary_address: [*:0]u8,
            str_object: ?BSTR,
            str_user: ?BSTR,
            str_password: ?BSTR,
            str_locale: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            riid: ?*const Guid,
            p_interface: ?*?*anyopaque,
            p_call_res: ?*?*IWbemCallResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenAsync: *const fn (
            self: *const IWbemClientConnectionTransport,
            str_address_type: ?BSTR,
            dw_binary_address_length: u32,
            ab_binary_address: [*:0]u8,
            str_object: ?BSTR,
            str_user: ?BSTR,
            str_password: ?BSTR,
            str_locale: ?BSTR,
            l_flags: i32,
            p_ctx: ?*IWbemContext,
            riid: ?*const Guid,
            p_response_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IWbemClientConnectionTransport,
            l_flags: i32,
            p_handler: ?*IWbemObjectSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn open(self: *const T, str_address_type_: ?BSTR, dw_binary_address_length_: u32, ab_binary_address_: [*:0]u8, str_object_: ?BSTR, str_user_: ?BSTR, str_password_: ?BSTR, str_locale_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, riid_: ?*const Guid, p_interface_: ?*?*anyopaque, p_call_res_: ?*?*IWbemCallResult) HRESULT {
                return @as(*const IWbemClientConnectionTransport.VTable, @ptrCast(self.vtable)).Open(@as(*const IWbemClientConnectionTransport, @ptrCast(self)), str_address_type_, dw_binary_address_length_, ab_binary_address_, str_object_, str_user_, str_password_, str_locale_, l_flags_, p_ctx_, riid_, p_interface_, p_call_res_);
            }
            pub inline fn openAsync(self: *const T, str_address_type_: ?BSTR, dw_binary_address_length_: u32, ab_binary_address_: [*:0]u8, str_object_: ?BSTR, str_user_: ?BSTR, str_password_: ?BSTR, str_locale_: ?BSTR, l_flags_: i32, p_ctx_: ?*IWbemContext, riid_: ?*const Guid, p_response_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemClientConnectionTransport.VTable, @ptrCast(self.vtable)).OpenAsync(@as(*const IWbemClientConnectionTransport, @ptrCast(self)), str_address_type_, dw_binary_address_length_, ab_binary_address_, str_object_, str_user_, str_password_, str_locale_, l_flags_, p_ctx_, riid_, p_response_handler_);
            }
            pub inline fn cancel(self: *const T, l_flags_: i32, p_handler_: ?*IWbemObjectSink) HRESULT {
                return @as(*const IWbemClientConnectionTransport.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IWbemClientConnectionTransport, @ptrCast(self)), l_flags_, p_handler_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWbemConstructClassObject_Value = Guid.initString("9ef76194-70d5-11d1-ad90-00c04fd8fdff");
pub const IID_IWbemConstructClassObject = &IID_IWbemConstructClassObject_Value;
pub const IWbemConstructClassObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetInheritanceChain: *const fn (
            self: *const IWbemConstructClassObject,
            l_num_antecedents: i32,
            // TODO: what to do with BytesParamIndex 0?
            awsz_antecedents: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPropertyOrigin: *const fn (
            self: *const IWbemConstructClassObject,
            wsz_property_name: ?[*:0]const u16,
            l_origin_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMethodOrigin: *const fn (
            self: *const IWbemConstructClassObject,
            wsz_method_name: ?[*:0]const u16,
            l_origin_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetServerNamespace: *const fn (
            self: *const IWbemConstructClassObject,
            wsz_server: ?[*:0]const u16,
            wsz_namespace: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setInheritanceChain(self: *const T, l_num_antecedents_: i32, awsz_antecedents_: ?*?PWSTR) HRESULT {
                return @as(*const IWbemConstructClassObject.VTable, @ptrCast(self.vtable)).SetInheritanceChain(@as(*const IWbemConstructClassObject, @ptrCast(self)), l_num_antecedents_, awsz_antecedents_);
            }
            pub inline fn setPropertyOrigin(self: *const T, wsz_property_name_: ?[*:0]const u16, l_origin_index_: i32) HRESULT {
                return @as(*const IWbemConstructClassObject.VTable, @ptrCast(self.vtable)).SetPropertyOrigin(@as(*const IWbemConstructClassObject, @ptrCast(self)), wsz_property_name_, l_origin_index_);
            }
            pub inline fn setMethodOrigin(self: *const T, wsz_method_name_: ?[*:0]const u16, l_origin_index_: i32) HRESULT {
                return @as(*const IWbemConstructClassObject.VTable, @ptrCast(self.vtable)).SetMethodOrigin(@as(*const IWbemConstructClassObject, @ptrCast(self)), wsz_method_name_, l_origin_index_);
            }
            pub inline fn setServerNamespace(self: *const T, wsz_server_: ?[*:0]const u16, wsz_namespace_: ?[*:0]const u16) HRESULT {
                return @as(*const IWbemConstructClassObject.VTable, @ptrCast(self.vtable)).SetServerNamespace(@as(*const IWbemConstructClassObject, @ptrCast(self)), wsz_server_, wsz_namespace_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (1)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "mi" fn MI_Application_InitializeV1(
    flags: u32,
    application_i_d: ?*const u16,
    extended_error: ?*?*MI_Instance,
    application: ?*MI_Application,
) callconv(@import("std").os.windows.WINAPI) MI_Result;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "MI_ProviderFT_Load")) {
        _ = MI_ProviderFT_Load;
    }
    if (@hasDecl(@This(), "MI_ProviderFT_Unload")) {
        _ = MI_ProviderFT_Unload;
    }
    if (@hasDecl(@This(), "MI_ProviderFT_EnumerateInstances")) {
        _ = MI_ProviderFT_EnumerateInstances;
    }
    if (@hasDecl(@This(), "MI_ProviderFT_EnableIndications")) {
        _ = MI_ProviderFT_EnableIndications;
    }
    if (@hasDecl(@This(), "MI_ProviderFT_DisableIndications")) {
        _ = MI_ProviderFT_DisableIndications;
    }
    if (@hasDecl(@This(), "MI_ProviderFT_Subscribe")) {
        _ = MI_ProviderFT_Subscribe;
    }
    if (@hasDecl(@This(), "MI_ProviderFT_Unsubscribe")) {
        _ = MI_ProviderFT_Unsubscribe;
    }
    if (@hasDecl(@This(), "MI_Module_Load")) {
        _ = MI_Module_Load;
    }
    if (@hasDecl(@This(), "MI_Module_Unload")) {
        _ = MI_Module_Unload;
    }
    if (@hasDecl(@This(), "MI_CancelCallback")) {
        _ = MI_CancelCallback;
    }
    if (@hasDecl(@This(), "MI_MainFunction")) {
        _ = MI_MainFunction;
    }
    if (@hasDecl(@This(), "MI_OperationCallback_PromptUser")) {
        _ = MI_OperationCallback_PromptUser;
    }
    if (@hasDecl(@This(), "MI_OperationCallback_WriteError")) {
        _ = MI_OperationCallback_WriteError;
    }
    if (@hasDecl(@This(), "MI_OperationCallback_WriteMessage")) {
        _ = MI_OperationCallback_WriteMessage;
    }
    if (@hasDecl(@This(), "MI_OperationCallback_WriteProgress")) {
        _ = MI_OperationCallback_WriteProgress;
    }
    if (@hasDecl(@This(), "MI_OperationCallback_Instance")) {
        _ = MI_OperationCallback_Instance;
    }
    if (@hasDecl(@This(), "MI_OperationCallback_StreamedParameter")) {
        _ = MI_OperationCallback_StreamedParameter;
    }
    if (@hasDecl(@This(), "MI_OperationCallback_Indication")) {
        _ = MI_OperationCallback_Indication;
    }
    if (@hasDecl(@This(), "MI_OperationCallback_Class")) {
        _ = MI_OperationCallback_Class;
    }
    if (@hasDecl(@This(), "MI_Deserializer_ClassObjectNeeded")) {
        _ = MI_Deserializer_ClassObjectNeeded;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
