//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (197)
//--------------------------------------------------------------------------------
pub const WDS_CLI_TRANSFER_ASYNCHRONOUS = @as(u32, 1);
pub const WDS_CLI_NO_SPARSE_FILE = @as(u32, 2);
pub const PXE_DHCP_SERVER_PORT = @as(u32, 67);
pub const PXE_DHCP_CLIENT_PORT = @as(u32, 68);
pub const PXE_SERVER_PORT = @as(u32, 4011);
pub const PXE_DHCPV6_SERVER_PORT = @as(u32, 547);
pub const PXE_DHCPV6_CLIENT_PORT = @as(u32, 546);
pub const PXE_DHCP_FILE_SIZE = @as(u32, 128);
pub const PXE_DHCP_SERVER_SIZE = @as(u32, 64);
pub const PXE_DHCP_HWAADR_SIZE = @as(u32, 16);
pub const PXE_DHCP_MAGIC_COOKIE_SIZE = @as(u32, 4);
pub const PXE_REG_INDEX_TOP = @as(u32, 0);
pub const PXE_REG_INDEX_BOTTOM = @as(u32, 4294967295);
pub const PXE_CALLBACK_RECV_REQUEST = @as(u32, 0);
pub const PXE_CALLBACK_SHUTDOWN = @as(u32, 1);
pub const PXE_CALLBACK_SERVICE_CONTROL = @as(u32, 2);
pub const PXE_CALLBACK_MAX = @as(u32, 3);
pub const PXE_GSI_TRACE_ENABLED = @as(u32, 1);
pub const PXE_GSI_SERVER_DUID = @as(u32, 2);
pub const PXE_MAX_ADDRESS = @as(u32, 16);
pub const PXE_ADDR_BROADCAST = @as(u32, 1);
pub const PXE_ADDR_USE_PORT = @as(u32, 2);
pub const PXE_ADDR_USE_ADDR = @as(u32, 4);
pub const PXE_ADDR_USE_DHCP_RULES = @as(u32, 8);
pub const PXE_DHCPV6_RELAY_HOP_COUNT_LIMIT = @as(u32, 32);
pub const PXE_BA_NBP = @as(u32, 1);
pub const PXE_BA_CUSTOM = @as(u32, 2);
pub const PXE_BA_IGNORE = @as(u32, 3);
pub const PXE_BA_REJECTED = @as(u32, 4);
pub const PXE_TRACE_VERBOSE = @as(u32, 65536);
pub const PXE_TRACE_INFO = @as(u32, 131072);
pub const PXE_TRACE_WARNING = @as(u32, 262144);
pub const PXE_TRACE_ERROR = @as(u32, 524288);
pub const PXE_TRACE_FATAL = @as(u32, 1048576);
pub const PXE_PROV_ATTR_FILTER = @as(u32, 0);
pub const PXE_PROV_ATTR_FILTER_IPV6 = @as(u32, 1);
pub const PXE_PROV_ATTR_IPV6_CAPABLE = @as(u32, 2);
pub const PXE_PROV_FILTER_ALL = @as(u32, 0);
pub const PXE_PROV_FILTER_DHCP_ONLY = @as(u32, 1);
pub const PXE_PROV_FILTER_PXE_ONLY = @as(u32, 2);
pub const MC_SERVER_CURRENT_VERSION = @as(u32, 1);
pub const TRANSPORTPROVIDER_CURRENT_VERSION = @as(u32, 1);
pub const WDS_MC_TRACE_VERBOSE = @as(u32, 65536);
pub const WDS_MC_TRACE_INFO = @as(u32, 131072);
pub const WDS_MC_TRACE_WARNING = @as(u32, 262144);
pub const WDS_MC_TRACE_ERROR = @as(u32, 524288);
pub const WDS_MC_TRACE_FATAL = @as(u32, 1048576);
pub const WDS_TRANSPORTCLIENT_CURRENT_API_VERSION = @as(u32, 1);
pub const WDS_TRANSPORTCLIENT_PROTOCOL_MULTICAST = @as(u32, 1);
pub const WDS_TRANSPORTCLIENT_NO_CACHE = @as(u32, 0);
pub const WDS_TRANSPORTCLIENT_STATUS_IN_PROGRESS = @as(u32, 1);
pub const WDS_TRANSPORTCLIENT_STATUS_SUCCESS = @as(u32, 2);
pub const WDS_TRANSPORTCLIENT_STATUS_FAILURE = @as(u32, 3);
pub const WDSTRANSPORT_RESOURCE_UTILIZATION_UNKNOWN = @as(u32, 255);
pub const WDSBP_PK_TYPE_DHCP = @as(u32, 1);
pub const WDSBP_PK_TYPE_WDSNBP = @as(u32, 2);
pub const WDSBP_PK_TYPE_BCD = @as(u32, 4);
pub const WDSBP_PK_TYPE_DHCPV6 = @as(u32, 8);
pub const WDSBP_OPT_TYPE_NONE = @as(u32, 0);
pub const WDSBP_OPT_TYPE_BYTE = @as(u32, 1);
pub const WDSBP_OPT_TYPE_USHORT = @as(u32, 2);
pub const WDSBP_OPT_TYPE_ULONG = @as(u32, 3);
pub const WDSBP_OPT_TYPE_WSTR = @as(u32, 4);
pub const WDSBP_OPT_TYPE_STR = @as(u32, 5);
pub const WDSBP_OPT_TYPE_IP4 = @as(u32, 6);
pub const WDSBP_OPT_TYPE_IP6 = @as(u32, 7);
pub const WDSBP_OPTVAL_ACTION_APPROVAL = @as(u32, 1);
pub const WDSBP_OPTVAL_ACTION_REFERRAL = @as(u32, 3);
pub const WDSBP_OPTVAL_ACTION_ABORT = @as(u32, 5);
pub const WDSBP_OPTVAL_PXE_PROMPT_OPTIN = @as(u32, 1);
pub const WDSBP_OPTVAL_PXE_PROMPT_NOPROMPT = @as(u32, 2);
pub const WDSBP_OPTVAL_PXE_PROMPT_OPTOUT = @as(u32, 3);
pub const WDSBP_OPTVAL_NBP_VER_7 = @as(u32, 1792);
pub const WDSBP_OPTVAL_NBP_VER_8 = @as(u32, 2048);
pub const FACILITY_WDSMCSERVER = @as(u32, 289);
pub const FACILITY_WDSMCCLIENT = @as(u32, 290);
pub const WDSMCSERVER_CATEGORY = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1));
pub const WDSMCCLIENT_CATEGORY = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2));
pub const WDSMCS_E_SESSION_SHUTDOWN_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801664));
pub const WDSMCS_E_REQCALLBACKS_NOT_REG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801663));
pub const WDSMCS_E_INCOMPATIBLE_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801662));
pub const WDSMCS_E_CONTENT_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801661));
pub const WDSMCS_E_CLIENT_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801660));
pub const WDSMCS_E_NAMESPACE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801659));
pub const WDSMCS_E_CONTENT_PROVIDER_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801658));
pub const WDSMCS_E_NAMESPACE_ALREADY_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801657));
pub const WDSMCS_E_NAMESPACE_SHUTDOWN_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801656));
pub const WDSMCS_E_NAMESPACE_ALREADY_STARTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801655));
pub const WDSMCS_E_NS_START_FAILED_NO_CLIENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801654));
pub const WDSMCS_E_START_TIME_IN_PAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801653));
pub const WDSMCS_E_PACKET_NOT_HASHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801652));
pub const WDSMCS_E_PACKET_NOT_SIGNED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801651));
pub const WDSMCS_E_PACKET_HAS_SECURITY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801650));
pub const WDSMCS_E_PACKET_NOT_CHECKSUMED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801649));
pub const WDSMCS_E_CLIENT_DOESNOT_SUPPORT_SECURITY_MODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801648));
pub const EVT_WDSMCS_S_PARAMETERS_READ = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1092682240));
pub const EVT_WDSMCS_E_PARAMETERS_READ_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801407));
pub const EVT_WDSMCS_E_DUPLICATE_MULTICAST_ADDR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801406));
pub const EVT_WDSMCS_E_NON_WDS_DUPLICATE_MULTICAST_ADDR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801405));
pub const EVT_WDSMCS_E_CP_DLL_LOAD_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801328));
pub const EVT_WDSMCS_E_CP_INIT_FUNC_MISSING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801327));
pub const EVT_WDSMCS_E_CP_INIT_FUNC_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801326));
pub const EVT_WDSMCS_E_CP_INCOMPATIBLE_SERVER_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801325));
pub const EVT_WDSMCS_E_CP_CALLBACKS_NOT_REG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801324));
pub const EVT_WDSMCS_E_CP_SHUTDOWN_FUNC_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801323));
pub const EVT_WDSMCS_E_CP_MEMORY_LEAK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801322));
pub const EVT_WDSMCS_E_CP_OPEN_INSTANCE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801321));
pub const EVT_WDSMCS_E_CP_CLOSE_INSTANCE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801320));
pub const EVT_WDSMCS_E_CP_OPEN_CONTENT_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801319));
pub const EVT_WDSMCS_W_CP_DLL_LOAD_FAILED_NOT_CRITICAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2128543142));
pub const EVT_WDSMCS_E_CP_DLL_LOAD_FAILED_CRITICAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801317));
pub const EVT_WDSMCS_E_NSREG_START_TIME_IN_PAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801152));
pub const EVT_WDSMCS_E_NSREG_CONTENT_PROVIDER_NOT_REG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801151));
pub const EVT_WDSMCS_E_NSREG_NAMESPACE_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801150));
pub const EVT_WDSMCS_E_NSREG_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054801149));
pub const WDSTPC_E_CALLBACKS_NOT_REG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735616));
pub const WDSTPC_E_ALREADY_COMPLETED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735615));
pub const WDSTPC_E_ALREADY_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735614));
pub const WDSTPC_E_UNKNOWN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735613));
pub const WDSTPC_E_NOT_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735612));
pub const WDSTPC_E_KICKED_POLICY_NOT_MET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735611));
pub const WDSTPC_E_KICKED_FALLBACK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735610));
pub const WDSTPC_E_KICKED_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735609));
pub const WDSTPC_E_KICKED_UNKNOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735608));
pub const WDSTPC_E_MULTISTREAM_NOT_ENABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735607));
pub const WDSTPC_E_ALREADY_IN_LOWEST_SESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735606));
pub const WDSTPC_E_CLIENT_DEMOTE_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735605));
pub const WDSTPC_E_NO_IP4_INTERFACE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735604));
pub const WDSTPTC_E_WIM_APPLY_REQUIRES_REFERENCE_IMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1054735603));
pub const FACILITY_WDSTPTMGMT = @as(u32, 272);
pub const WDSTPTMGMT_CATEGORY = @import("../zig.zig").typedConst(HRESULT, @as(i32, 1));
pub const WDSTPTMGMT_E_INVALID_PROPERTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915776));
pub const WDSTPTMGMT_E_INVALID_OPERATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915775));
pub const WDSTPTMGMT_E_INVALID_CLASS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915774));
pub const WDSTPTMGMT_E_CONTENT_PROVIDER_ALREADY_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915773));
pub const WDSTPTMGMT_E_CONTENT_PROVIDER_NOT_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915772));
pub const WDSTPTMGMT_E_INVALID_CONTENT_PROVIDER_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915771));
pub const WDSTPTMGMT_E_TRANSPORT_SERVER_ROLE_NOT_CONFIGURED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915770));
pub const WDSTPTMGMT_E_NAMESPACE_ALREADY_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915769));
pub const WDSTPTMGMT_E_NAMESPACE_NOT_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915768));
pub const WDSTPTMGMT_E_CANNOT_REINITIALIZE_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915767));
pub const WDSTPTMGMT_E_INVALID_NAMESPACE_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915766));
pub const WDSTPTMGMT_E_INVALID_NAMESPACE_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915765));
pub const WDSTPTMGMT_E_NAMESPACE_READ_ONLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915764));
pub const WDSTPTMGMT_E_INVALID_NAMESPACE_START_TIME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915763));
pub const WDSTPTMGMT_E_INVALID_DIAGNOSTICS_COMPONENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915762));
pub const WDSTPTMGMT_E_CANNOT_REFRESH_DIRTY_OBJECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915761));
pub const WDSTPTMGMT_E_INVALID_SERVICE_IP_ADDRESS_RANGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915760));
pub const WDSTPTMGMT_E_INVALID_SERVICE_PORT_RANGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915759));
pub const WDSTPTMGMT_E_INVALID_NAMESPACE_START_PARAMETERS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915758));
pub const WDSTPTMGMT_E_TRANSPORT_SERVER_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915757));
pub const WDSTPTMGMT_E_NAMESPACE_NOT_ON_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915756));
pub const WDSTPTMGMT_E_NAMESPACE_REMOVED_FROM_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915755));
pub const WDSTPTMGMT_E_INVALID_IP_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915754));
pub const WDSTPTMGMT_E_INVALID_IPV4_MULTICAST_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915753));
pub const WDSTPTMGMT_E_INVALID_IPV6_MULTICAST_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915752));
pub const WDSTPTMGMT_E_IPV6_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915751));
pub const WDSTPTMGMT_E_INVALID_IPV6_MULTICAST_ADDRESS_SOURCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915750));
pub const WDSTPTMGMT_E_INVALID_MULTISTREAM_STREAM_COUNT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915749));
pub const WDSTPTMGMT_E_INVALID_AUTO_DISCONNECT_THRESHOLD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915748));
pub const WDSTPTMGMT_E_MULTICAST_SESSION_POLICY_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915747));
pub const WDSTPTMGMT_E_INVALID_SLOW_CLIENT_HANDLING_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915746));
pub const WDSTPTMGMT_E_NETWORK_PROFILES_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915745));
pub const WDSTPTMGMT_E_UDP_PORT_POLICY_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915744));
pub const WDSTPTMGMT_E_TFTP_MAX_BLOCKSIZE_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915743));
pub const WDSTPTMGMT_E_TFTP_VAR_WINDOW_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915742));
pub const WDSTPTMGMT_E_INVALID_TFTP_MAX_BLOCKSIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1055915741));
pub const WdsCliFlagEnumFilterVersion = @as(i32, 1);
pub const WdsCliFlagEnumFilterFirmware = @as(i32, 2);
pub const WDS_LOG_TYPE_CLIENT_ERROR = @as(i32, 1);
pub const WDS_LOG_TYPE_CLIENT_STARTED = @as(i32, 2);
pub const WDS_LOG_TYPE_CLIENT_FINISHED = @as(i32, 3);
pub const WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED = @as(i32, 4);
pub const WDS_LOG_TYPE_CLIENT_APPLY_STARTED = @as(i32, 5);
pub const WDS_LOG_TYPE_CLIENT_APPLY_FINISHED = @as(i32, 6);
pub const WDS_LOG_TYPE_CLIENT_GENERIC_MESSAGE = @as(i32, 7);
pub const WDS_LOG_TYPE_CLIENT_UNATTEND_MODE = @as(i32, 8);
pub const WDS_LOG_TYPE_CLIENT_TRANSFER_START = @as(i32, 9);
pub const WDS_LOG_TYPE_CLIENT_TRANSFER_END = @as(i32, 10);
pub const WDS_LOG_TYPE_CLIENT_TRANSFER_DOWNGRADE = @as(i32, 11);
pub const WDS_LOG_TYPE_CLIENT_DOMAINJOINERROR = @as(i32, 12);
pub const WDS_LOG_TYPE_CLIENT_POST_ACTIONS_START = @as(i32, 13);
pub const WDS_LOG_TYPE_CLIENT_POST_ACTIONS_END = @as(i32, 14);
pub const WDS_LOG_TYPE_CLIENT_APPLY_STARTED_2 = @as(i32, 15);
pub const WDS_LOG_TYPE_CLIENT_APPLY_FINISHED_2 = @as(i32, 16);
pub const WDS_LOG_TYPE_CLIENT_DOMAINJOINERROR_2 = @as(i32, 17);
pub const WDS_LOG_TYPE_CLIENT_DRIVER_PACKAGE_NOT_ACCESSIBLE = @as(i32, 18);
pub const WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_START = @as(i32, 19);
pub const WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_END = @as(i32, 20);
pub const WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_FAILURE = @as(i32, 21);
pub const WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED2 = @as(i32, 22);
pub const WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED3 = @as(i32, 23);
pub const WDS_LOG_TYPE_CLIENT_MAX_CODE = @as(i32, 24);
pub const WDS_LOG_LEVEL_DISABLED = @as(i32, 0);
pub const WDS_LOG_LEVEL_ERROR = @as(i32, 1);
pub const WDS_LOG_LEVEL_WARNING = @as(i32, 2);
pub const WDS_LOG_LEVEL_INFO = @as(i32, 3);

//--------------------------------------------------------------------------------
// Section: Types (89)
//--------------------------------------------------------------------------------
pub const CPU_ARCHITECTURE = enum(u32) {
    AMD64 = 9,
    IA64 = 6,
    INTEL = 0,
};
pub const CPU_ARCHITECTURE_AMD64 = CPU_ARCHITECTURE.AMD64;
pub const CPU_ARCHITECTURE_IA64 = CPU_ARCHITECTURE.IA64;
pub const CPU_ARCHITECTURE_INTEL = CPU_ARCHITECTURE.INTEL;

pub const PFN_WDS_CLI_CALLBACK_MESSAGE_ID = enum(u32) {
    START = 0,
    COMPLETE = 1,
    PROGRESS = 2,
    TEXT = 3,
};
// TODO: enum 'PFN_WDS_CLI_CALLBACK_MESSAGE_ID' has known issues with its value aliases

pub const WDS_TRANSPORTCLIENT_REQUEST_AUTH_LEVEL = enum(u32) {
    AUTH = 1,
    NO_AUTH = 2,
};
pub const WDS_TRANSPORTCLIENT_AUTH = WDS_TRANSPORTCLIENT_REQUEST_AUTH_LEVEL.AUTH;
pub const WDS_TRANSPORTCLIENT_NO_AUTH = WDS_TRANSPORTCLIENT_REQUEST_AUTH_LEVEL.NO_AUTH;

pub const WDS_CLI_CRED = extern struct {
    pwszUserName: ?[*:0]const u16,
    pwszDomain: ?[*:0]const u16,
    pwszPassword: ?[*:0]const u16,
};

pub const PFN_WdsCliTraceFunction = *const fn (
    pwsz_format: ?[*:0]const u16,
    params: ?*i8,
) callconv(@import("std").os.windows.WINAPI) void;

pub const WDS_CLI_IMAGE_TYPE = enum(i32) {
    UNKNOWN = 0,
    WIM = 1,
    VHD = 2,
    VHDX = 3,
};
pub const WDS_CLI_IMAGE_TYPE_UNKNOWN = WDS_CLI_IMAGE_TYPE.UNKNOWN;
pub const WDS_CLI_IMAGE_TYPE_WIM = WDS_CLI_IMAGE_TYPE.WIM;
pub const WDS_CLI_IMAGE_TYPE_VHD = WDS_CLI_IMAGE_TYPE.VHD;
pub const WDS_CLI_IMAGE_TYPE_VHDX = WDS_CLI_IMAGE_TYPE.VHDX;

pub const WDS_CLI_FIRMWARE_TYPE = enum(i32) {
    UNKNOWN = 0,
    BIOS = 1,
    EFI = 2,
};
pub const WDS_CLI_FIRMWARE_UNKNOWN = WDS_CLI_FIRMWARE_TYPE.UNKNOWN;
pub const WDS_CLI_FIRMWARE_BIOS = WDS_CLI_FIRMWARE_TYPE.BIOS;
pub const WDS_CLI_FIRMWARE_EFI = WDS_CLI_FIRMWARE_TYPE.EFI;

pub const WDS_CLI_IMAGE_PARAM_TYPE = enum(i32) {
    UNKNOWN = 0,
    SPARSE_FILE = 1,
    SUPPORTED_FIRMWARES = 2,
};
pub const WDS_CLI_IMAGE_PARAM_UNKNOWN = WDS_CLI_IMAGE_PARAM_TYPE.UNKNOWN;
pub const WDS_CLI_IMAGE_PARAM_SPARSE_FILE = WDS_CLI_IMAGE_PARAM_TYPE.SPARSE_FILE;
pub const WDS_CLI_IMAGE_PARAM_SUPPORTED_FIRMWARES = WDS_CLI_IMAGE_PARAM_TYPE.SUPPORTED_FIRMWARES;

pub const PFN_WdsCliCallback = *const fn (
    dw_message_id: PFN_WDS_CLI_CALLBACK_MESSAGE_ID,
    w_param: WPARAM,
    l_param: LPARAM,
    pv_user_data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PXE_DHCP_OPTION = extern struct {
    OptionType: u8,
    OptionLength: u8,
    OptionValue: [1]u8,
};

pub const PXE_DHCP_MESSAGE = extern struct {
    Operation: u8 align(1),
    HardwareAddressType: u8 align(1),
    HardwareAddressLength: u8 align(1),
    HopCount: u8 align(1),
    TransactionID: u32 align(1),
    SecondsSinceBoot: u16 align(1),
    Reserved: u16 align(1),
    ClientIpAddress: u32 align(1),
    YourIpAddress: u32 align(1),
    BootstrapServerAddress: u32 align(1),
    RelayAgentIpAddress: u32 align(1),
    HardwareAddress: [16]u8 align(1),
    HostName: [64]u8 align(1),
    BootFileName: [128]u8 align(1),
    Anonymous: extern union {
        bMagicCookie: [4]u8 align(1),
        uMagicCookie: u32 align(1),
    } align(1),
    Option: PXE_DHCP_OPTION align(1),
};

pub const PXE_DHCPV6_OPTION = extern struct {
    OptionCode: u16 align(1),
    DataLength: u16 align(1),
    Data: [1]u8 align(1),
};

pub const PXE_DHCPV6_MESSAGE_HEADER = extern struct {
    MessageType: u8,
    Message: [1]u8,
};

pub const PXE_DHCPV6_MESSAGE = extern struct {
    MessageType: u8,
    TransactionIDByte1: u8,
    TransactionIDByte2: u8,
    TransactionIDByte3: u8,
    Options: [1]PXE_DHCPV6_OPTION,
};

pub const PXE_DHCPV6_RELAY_MESSAGE = extern struct {
    MessageType: u8,
    HopCount: u8,
    LinkAddress: [16]u8,
    PeerAddress: [16]u8,
    Options: [1]PXE_DHCPV6_OPTION,
};

pub const PXE_PROVIDER = extern struct {
    uSizeOfStruct: u32,
    pwszName: ?PWSTR,
    pwszFilePath: ?PWSTR,
    bIsCritical: BOOL,
    uIndex: u32,
};

pub const PXE_ADDRESS = extern struct {
    uFlags: u32,
    Anonymous: extern union {
        bAddress: [16]u8,
        uIpAddress: u32,
    },
    uAddrLen: u32,
    uPort: u16,
};

pub const PXE_DHCPV6_NESTED_RELAY_MESSAGE = extern struct {
    pRelayMessage: ?*PXE_DHCPV6_RELAY_MESSAGE,
    cbRelayMessage: u32,
    pInterfaceIdOption: ?*anyopaque,
    cbInterfaceIdOption: u16,
};

pub const TRANSPORTPROVIDER_CALLBACK_ID = enum(i32) {
    CREATE_INSTANCE = 0,
    COMPARE_CONTENT = 1,
    OPEN_CONTENT = 2,
    USER_ACCESS_CHECK = 3,
    GET_CONTENT_SIZE = 4,
    READ_CONTENT = 5,
    CLOSE_CONTENT = 6,
    CLOSE_INSTANCE = 7,
    SHUTDOWN = 8,
    DUMP_STATE = 9,
    REFRESH_SETTINGS = 10,
    GET_CONTENT_METADATA = 11,
    MAX_CALLBACKS = 12,
};
pub const WDS_TRANSPORTPROVIDER_CREATE_INSTANCE = TRANSPORTPROVIDER_CALLBACK_ID.CREATE_INSTANCE;
pub const WDS_TRANSPORTPROVIDER_COMPARE_CONTENT = TRANSPORTPROVIDER_CALLBACK_ID.COMPARE_CONTENT;
pub const WDS_TRANSPORTPROVIDER_OPEN_CONTENT = TRANSPORTPROVIDER_CALLBACK_ID.OPEN_CONTENT;
pub const WDS_TRANSPORTPROVIDER_USER_ACCESS_CHECK = TRANSPORTPROVIDER_CALLBACK_ID.USER_ACCESS_CHECK;
pub const WDS_TRANSPORTPROVIDER_GET_CONTENT_SIZE = TRANSPORTPROVIDER_CALLBACK_ID.GET_CONTENT_SIZE;
pub const WDS_TRANSPORTPROVIDER_READ_CONTENT = TRANSPORTPROVIDER_CALLBACK_ID.READ_CONTENT;
pub const WDS_TRANSPORTPROVIDER_CLOSE_CONTENT = TRANSPORTPROVIDER_CALLBACK_ID.CLOSE_CONTENT;
pub const WDS_TRANSPORTPROVIDER_CLOSE_INSTANCE = TRANSPORTPROVIDER_CALLBACK_ID.CLOSE_INSTANCE;
pub const WDS_TRANSPORTPROVIDER_SHUTDOWN = TRANSPORTPROVIDER_CALLBACK_ID.SHUTDOWN;
pub const WDS_TRANSPORTPROVIDER_DUMP_STATE = TRANSPORTPROVIDER_CALLBACK_ID.DUMP_STATE;
pub const WDS_TRANSPORTPROVIDER_REFRESH_SETTINGS = TRANSPORTPROVIDER_CALLBACK_ID.REFRESH_SETTINGS;
pub const WDS_TRANSPORTPROVIDER_GET_CONTENT_METADATA = TRANSPORTPROVIDER_CALLBACK_ID.GET_CONTENT_METADATA;
pub const WDS_TRANSPORTPROVIDER_MAX_CALLBACKS = TRANSPORTPROVIDER_CALLBACK_ID.MAX_CALLBACKS;

pub const WDS_TRANSPORTPROVIDER_INIT_PARAMS = extern struct {
    ulLength: u32,
    ulMcServerVersion: u32,
    hRegistryKey: ?HKEY,
    hProvider: ?HANDLE,
};

pub const WDS_TRANSPORTPROVIDER_SETTINGS = extern struct {
    ulLength: u32,
    ulProviderVersion: u32,
};

pub const TRANSPORTCLIENT_CALLBACK_ID = enum(i32) {
    SESSION_START = 0,
    RECEIVE_CONTENTS = 1,
    SESSION_COMPLETE = 2,
    RECEIVE_METADATA = 3,
    SESSION_STARTEX = 4,
    SESSION_NEGOTIATE = 5,
    MAX_CALLBACKS = 6,
};
pub const WDS_TRANSPORTCLIENT_SESSION_START = TRANSPORTCLIENT_CALLBACK_ID.SESSION_START;
pub const WDS_TRANSPORTCLIENT_RECEIVE_CONTENTS = TRANSPORTCLIENT_CALLBACK_ID.RECEIVE_CONTENTS;
pub const WDS_TRANSPORTCLIENT_SESSION_COMPLETE = TRANSPORTCLIENT_CALLBACK_ID.SESSION_COMPLETE;
pub const WDS_TRANSPORTCLIENT_RECEIVE_METADATA = TRANSPORTCLIENT_CALLBACK_ID.RECEIVE_METADATA;
pub const WDS_TRANSPORTCLIENT_SESSION_STARTEX = TRANSPORTCLIENT_CALLBACK_ID.SESSION_STARTEX;
pub const WDS_TRANSPORTCLIENT_SESSION_NEGOTIATE = TRANSPORTCLIENT_CALLBACK_ID.SESSION_NEGOTIATE;
pub const WDS_TRANSPORTCLIENT_MAX_CALLBACKS = TRANSPORTCLIENT_CALLBACK_ID.MAX_CALLBACKS;

pub const TRANSPORTCLIENT_SESSION_INFO = extern struct {
    ulStructureLength: u32,
    ullFileSize: ULARGE_INTEGER,
    ulBlockSize: u32,
};

pub const PFN_WdsTransportClientSessionStart = *const fn (
    h_session_key: ?HANDLE,
    p_caller_data: ?*anyopaque,
    ull_file_size: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_WdsTransportClientSessionStartEx = *const fn (
    h_session_key: ?HANDLE,
    p_caller_data: ?*anyopaque,
    info: ?*TRANSPORTCLIENT_SESSION_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_WdsTransportClientReceiveMetadata = *const fn (
    h_session_key: ?HANDLE,
    p_caller_data: ?*anyopaque,
    // TODO: what to do with BytesParamIndex 3?
    p_metadata: ?*anyopaque,
    ul_size: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_WdsTransportClientReceiveContents = *const fn (
    h_session_key: ?HANDLE,
    p_caller_data: ?*anyopaque,
    // TODO: what to do with BytesParamIndex 3?
    p_contents: ?*anyopaque,
    ul_size: u32,
    pull_content_offset: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_WdsTransportClientSessionComplete = *const fn (
    h_session_key: ?HANDLE,
    p_caller_data: ?*anyopaque,
    dw_error: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_WdsTransportClientSessionNegotiate = *const fn (
    h_session_key: ?HANDLE,
    p_caller_data: ?*anyopaque,
    p_info: ?*TRANSPORTCLIENT_SESSION_INFO,
    h_negotiate_key: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const WDS_TRANSPORTCLIENT_REQUEST = extern struct {
    ulLength: u32,
    ulApiVersion: u32,
    ulAuthLevel: WDS_TRANSPORTCLIENT_REQUEST_AUTH_LEVEL,
    pwszServer: ?[*:0]const u16,
    pwszNamespace: ?[*:0]const u16,
    pwszObjectName: ?[*:0]const u16,
    ulCacheSize: u32,
    ulProtocol: u32,
    pvProtocolData: ?*anyopaque,
    ulProtocolDataLength: u32,
};

pub const WDS_TRANSPORTCLIENT_CALLBACKS = extern struct {
    SessionStart: ?PFN_WdsTransportClientSessionStart,
    SessionStartEx: ?PFN_WdsTransportClientSessionStartEx,
    ReceiveContents: ?PFN_WdsTransportClientReceiveContents,
    ReceiveMetadata: ?PFN_WdsTransportClientReceiveMetadata,
    SessionComplete: ?PFN_WdsTransportClientSessionComplete,
    SessionNegotiate: ?PFN_WdsTransportClientSessionNegotiate,
};

const CLSID_WdsTransportCacheable_Value = Guid.initString("70590b16-f146-46bd-bd9d-4aaa90084bf5");
pub const CLSID_WdsTransportCacheable = &CLSID_WdsTransportCacheable_Value;

const CLSID_WdsTransportCollection_Value = Guid.initString("c7f18b09-391e-436e-b10b-c3ef46f2c34f");
pub const CLSID_WdsTransportCollection = &CLSID_WdsTransportCollection_Value;

const CLSID_WdsTransportManager_Value = Guid.initString("f21523f6-837c-4a58-af99-8a7e27f8ff59");
pub const CLSID_WdsTransportManager = &CLSID_WdsTransportManager_Value;

const CLSID_WdsTransportServer_Value = Guid.initString("ea19b643-4adf-4413-942c-14f379118760");
pub const CLSID_WdsTransportServer = &CLSID_WdsTransportServer_Value;

const CLSID_WdsTransportSetupManager_Value = Guid.initString("c7beeaad-9f04-4923-9f0c-fbf52bc7590f");
pub const CLSID_WdsTransportSetupManager = &CLSID_WdsTransportSetupManager_Value;

const CLSID_WdsTransportConfigurationManager_Value = Guid.initString("8743f674-904c-47ca-8512-35fe98f6b0ac");
pub const CLSID_WdsTransportConfigurationManager = &CLSID_WdsTransportConfigurationManager_Value;

const CLSID_WdsTransportNamespaceManager_Value = Guid.initString("f08cdb63-85de-4a28-a1a9-5ca3e7efda73");
pub const CLSID_WdsTransportNamespaceManager = &CLSID_WdsTransportNamespaceManager_Value;

const CLSID_WdsTransportServicePolicy_Value = Guid.initString("65aceadc-2f0b-4f43-9f4d-811865d8cead");
pub const CLSID_WdsTransportServicePolicy = &CLSID_WdsTransportServicePolicy_Value;

const CLSID_WdsTransportDiagnosticsPolicy_Value = Guid.initString("eb3333e1-a7ad-46f5-80d6-6b740204e509");
pub const CLSID_WdsTransportDiagnosticsPolicy = &CLSID_WdsTransportDiagnosticsPolicy_Value;

const CLSID_WdsTransportMulticastSessionPolicy_Value = Guid.initString("3c6bc3f4-6418-472a-b6f1-52d457195437");
pub const CLSID_WdsTransportMulticastSessionPolicy = &CLSID_WdsTransportMulticastSessionPolicy_Value;

const CLSID_WdsTransportNamespace_Value = Guid.initString("d8385768-0732-4ec1-95ea-16da581908a1");
pub const CLSID_WdsTransportNamespace = &CLSID_WdsTransportNamespace_Value;

const CLSID_WdsTransportNamespaceAutoCast_Value = Guid.initString("b091f5a8-6a99-478d-b23b-09e8fee04574");
pub const CLSID_WdsTransportNamespaceAutoCast = &CLSID_WdsTransportNamespaceAutoCast_Value;

const CLSID_WdsTransportNamespaceScheduledCast_Value = Guid.initString("badc1897-7025-44eb-9108-fb61c4055792");
pub const CLSID_WdsTransportNamespaceScheduledCast = &CLSID_WdsTransportNamespaceScheduledCast_Value;

const CLSID_WdsTransportNamespaceScheduledCastManualStart_Value = Guid.initString("d3e1a2aa-caac-460e-b98a-47f9f318a1fa");
pub const CLSID_WdsTransportNamespaceScheduledCastManualStart = &CLSID_WdsTransportNamespaceScheduledCastManualStart_Value;

const CLSID_WdsTransportNamespaceScheduledCastAutoStart_Value = Guid.initString("a1107052-122c-4b81-9b7c-386e6855383f");
pub const CLSID_WdsTransportNamespaceScheduledCastAutoStart = &CLSID_WdsTransportNamespaceScheduledCastAutoStart_Value;

const CLSID_WdsTransportContent_Value = Guid.initString("0a891fe7-4a3f-4c65-b6f2-1467619679ea");
pub const CLSID_WdsTransportContent = &CLSID_WdsTransportContent_Value;

const CLSID_WdsTransportSession_Value = Guid.initString("749ac4e0-67bc-4743-bfe5-cacb1f26f57f");
pub const CLSID_WdsTransportSession = &CLSID_WdsTransportSession_Value;

const CLSID_WdsTransportClient_Value = Guid.initString("66d2c5e9-0ff6-49ec-9733-dafb1e01df1c");
pub const CLSID_WdsTransportClient = &CLSID_WdsTransportClient_Value;

const CLSID_WdsTransportTftpClient_Value = Guid.initString("50343925-7c5c-4c8c-96c4-ad9fa5005fba");
pub const CLSID_WdsTransportTftpClient = &CLSID_WdsTransportTftpClient_Value;

const CLSID_WdsTransportTftpManager_Value = Guid.initString("c8e9dca2-3241-4e4d-b806-bc74019dfeda");
pub const CLSID_WdsTransportTftpManager = &CLSID_WdsTransportTftpManager_Value;

const CLSID_WdsTransportContentProvider_Value = Guid.initString("e0be741f-5a75-4eb9-8a2d-5e189b45f327");
pub const CLSID_WdsTransportContentProvider = &CLSID_WdsTransportContentProvider_Value;

pub const WDSTRANSPORT_FEATURE_FLAGS = enum(i32) {
    AdminPack = 1,
    TransportServer = 2,
    DeploymentServer = 4,
};
pub const WdsTptFeatureAdminPack = WDSTRANSPORT_FEATURE_FLAGS.AdminPack;
pub const WdsTptFeatureTransportServer = WDSTRANSPORT_FEATURE_FLAGS.TransportServer;
pub const WdsTptFeatureDeploymentServer = WDSTRANSPORT_FEATURE_FLAGS.DeploymentServer;

pub const WDSTRANSPORT_PROTOCOL_FLAGS = enum(i32) {
    Unicast = 1,
    Multicast = 2,
};
pub const WdsTptProtocolUnicast = WDSTRANSPORT_PROTOCOL_FLAGS.Unicast;
pub const WdsTptProtocolMulticast = WDSTRANSPORT_PROTOCOL_FLAGS.Multicast;

pub const WDSTRANSPORT_NAMESPACE_TYPE = enum(i32) {
    Unknown = 0,
    AutoCast = 1,
    ScheduledCastManualStart = 2,
    ScheduledCastAutoStart = 3,
};
pub const WdsTptNamespaceTypeUnknown = WDSTRANSPORT_NAMESPACE_TYPE.Unknown;
pub const WdsTptNamespaceTypeAutoCast = WDSTRANSPORT_NAMESPACE_TYPE.AutoCast;
pub const WdsTptNamespaceTypeScheduledCastManualStart = WDSTRANSPORT_NAMESPACE_TYPE.ScheduledCastManualStart;
pub const WdsTptNamespaceTypeScheduledCastAutoStart = WDSTRANSPORT_NAMESPACE_TYPE.ScheduledCastAutoStart;

pub const WDSTRANSPORT_DISCONNECT_TYPE = enum(i32) {
    Unknown = 0,
    Fallback = 1,
    Abort = 2,
};
pub const WdsTptDisconnectUnknown = WDSTRANSPORT_DISCONNECT_TYPE.Unknown;
pub const WdsTptDisconnectFallback = WDSTRANSPORT_DISCONNECT_TYPE.Fallback;
pub const WdsTptDisconnectAbort = WDSTRANSPORT_DISCONNECT_TYPE.Abort;

pub const WDSTRANSPORT_SERVICE_NOTIFICATION = enum(i32) {
    Unknown = 0,
    ReadSettings = 1,
};
pub const WdsTptServiceNotifyUnknown = WDSTRANSPORT_SERVICE_NOTIFICATION.Unknown;
pub const WdsTptServiceNotifyReadSettings = WDSTRANSPORT_SERVICE_NOTIFICATION.ReadSettings;

pub const WDSTRANSPORT_IP_ADDRESS_TYPE = enum(i32) {
    Unknown = 0,
    Ipv4 = 1,
    Ipv6 = 2,
};
pub const WdsTptIpAddressUnknown = WDSTRANSPORT_IP_ADDRESS_TYPE.Unknown;
pub const WdsTptIpAddressIpv4 = WDSTRANSPORT_IP_ADDRESS_TYPE.Ipv4;
pub const WdsTptIpAddressIpv6 = WDSTRANSPORT_IP_ADDRESS_TYPE.Ipv6;

pub const WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE = enum(i32) {
    Unknown = 0,
    Dhcp = 1,
    Range = 2,
};
pub const WdsTptIpAddressSourceUnknown = WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE.Unknown;
pub const WdsTptIpAddressSourceDhcp = WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE.Dhcp;
pub const WdsTptIpAddressSourceRange = WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE.Range;

pub const WDSTRANSPORT_NETWORK_PROFILE_TYPE = enum(i32) {
    Unknown = 0,
    Custom = 1,
    @"10Mbps" = 2,
    @"100Mbps" = 3,
    @"1Gbps" = 4,
};
pub const WdsTptNetworkProfileUnknown = WDSTRANSPORT_NETWORK_PROFILE_TYPE.Unknown;
pub const WdsTptNetworkProfileCustom = WDSTRANSPORT_NETWORK_PROFILE_TYPE.Custom;
pub const WdsTptNetworkProfile10Mbps = WDSTRANSPORT_NETWORK_PROFILE_TYPE.@"10Mbps";
pub const WdsTptNetworkProfile100Mbps = WDSTRANSPORT_NETWORK_PROFILE_TYPE.@"100Mbps";
pub const WdsTptNetworkProfile1Gbps = WDSTRANSPORT_NETWORK_PROFILE_TYPE.@"1Gbps";

pub const WDSTRANSPORT_DIAGNOSTICS_COMPONENT_FLAGS = enum(i32) {
    Pxe = 1,
    Tftp = 2,
    ImageServer = 4,
    Multicast = 8,
};
pub const WdsTptDiagnosticsComponentPxe = WDSTRANSPORT_DIAGNOSTICS_COMPONENT_FLAGS.Pxe;
pub const WdsTptDiagnosticsComponentTftp = WDSTRANSPORT_DIAGNOSTICS_COMPONENT_FLAGS.Tftp;
pub const WdsTptDiagnosticsComponentImageServer = WDSTRANSPORT_DIAGNOSTICS_COMPONENT_FLAGS.ImageServer;
pub const WdsTptDiagnosticsComponentMulticast = WDSTRANSPORT_DIAGNOSTICS_COMPONENT_FLAGS.Multicast;

pub const WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE = enum(i32) {
    Unknown = 0,
    None = 1,
    AutoDisconnect = 2,
    Multistream = 3,
};
pub const WdsTptSlowClientHandlingUnknown = WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE.Unknown;
pub const WdsTptSlowClientHandlingNone = WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE.None;
pub const WdsTptSlowClientHandlingAutoDisconnect = WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE.AutoDisconnect;
pub const WdsTptSlowClientHandlingMultistream = WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE.Multistream;

pub const WDSTRANSPORT_UDP_PORT_POLICY = enum(i32) {
    Dynamic = 0,
    Fixed = 1,
};
pub const WdsTptUdpPortPolicyDynamic = WDSTRANSPORT_UDP_PORT_POLICY.Dynamic;
pub const WdsTptUdpPortPolicyFixed = WDSTRANSPORT_UDP_PORT_POLICY.Fixed;

pub const WDSTRANSPORT_TFTP_CAPABILITY = enum(i32) {
    MaximumBlockSize = 1,
    VariableWindow = 2,
};
pub const WdsTptTftpCapMaximumBlockSize = WDSTRANSPORT_TFTP_CAPABILITY.MaximumBlockSize;
pub const WdsTptTftpCapVariableWindow = WDSTRANSPORT_TFTP_CAPABILITY.VariableWindow;

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportCacheable_Value = Guid.initString("46ad894b-0bab-47dc-84b2-7b553f1d8f80");
pub const IID_IWdsTransportCacheable = &IID_IWdsTransportCacheable_Value;
pub const IWdsTransportCacheable = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Dirty: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportCacheable,
            pb_dirty: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Discard: *const fn (
            self: *const IWdsTransportCacheable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IWdsTransportCacheable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IWdsTransportCacheable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDirty(self: *const T, pb_dirty_: ?*i16) HRESULT {
                return @as(*const IWdsTransportCacheable.VTable, @ptrCast(self.vtable)).get_Dirty(@as(*const IWdsTransportCacheable, @ptrCast(self)), pb_dirty_);
            }
            pub inline fn discard(self: *const T) HRESULT {
                return @as(*const IWdsTransportCacheable.VTable, @ptrCast(self.vtable)).Discard(@as(*const IWdsTransportCacheable, @ptrCast(self)));
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IWdsTransportCacheable.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IWdsTransportCacheable, @ptrCast(self)));
            }
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IWdsTransportCacheable.VTable, @ptrCast(self.vtable)).Commit(@as(*const IWdsTransportCacheable, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportCollection_Value = Guid.initString("b8ba4b1a-2ff4-43ab-996c-b2b10a91a6eb");
pub const IID_IWdsTransportCollection = &IID_IWdsTransportCollection_Value;
pub const IWdsTransportCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportCollection,
            pul_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportCollection,
            ul_index: u32,
            pp_val: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportCollection,
            pp_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pul_count_: ?*u32) HRESULT {
                return @as(*const IWdsTransportCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IWdsTransportCollection, @ptrCast(self)), pul_count_);
            }
            pub inline fn getItem(self: *const T, ul_index_: u32, pp_val_: ?*?*IDispatch) HRESULT {
                return @as(*const IWdsTransportCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IWdsTransportCollection, @ptrCast(self)), ul_index_, pp_val_);
            }
            pub inline fn getNewEnum(self: *const T, pp_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IWdsTransportCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IWdsTransportCollection, @ptrCast(self)), pp_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportManager_Value = Guid.initString("5b0d35f5-1b13-4afd-b878-6526dc340b5d");
pub const IID_IWdsTransportManager = &IID_IWdsTransportManager_Value;
pub const IWdsTransportManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetWdsTransportServer: *const fn (
            self: *const IWdsTransportManager,
            bsz_server_name: ?BSTR,
            pp_wds_transport_server: ?*?*IWdsTransportServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getWdsTransportServer(self: *const T, bsz_server_name_: ?BSTR, pp_wds_transport_server_: ?*?*IWdsTransportServer) HRESULT {
                return @as(*const IWdsTransportManager.VTable, @ptrCast(self.vtable)).GetWdsTransportServer(@as(*const IWdsTransportManager, @ptrCast(self)), bsz_server_name_, pp_wds_transport_server_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportServer_Value = Guid.initString("09ccd093-830d-4344-a30a-73ae8e8fca90");
pub const IID_IWdsTransportServer = &IID_IWdsTransportServer_Value;
pub const IWdsTransportServer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServer,
            pbsz_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SetupManager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServer,
            pp_wds_transport_setup_manager: ?*?*IWdsTransportSetupManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConfigurationManager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServer,
            pp_wds_transport_configuration_manager: ?*?*IWdsTransportConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NamespaceManager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServer,
            pp_wds_transport_namespace_manager: ?*?*IWdsTransportNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisconnectClient: *const fn (
            self: *const IWdsTransportServer,
            ul_client_id: u32,
            disconnection_type: WDSTRANSPORT_DISCONNECT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbsz_name_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportServer.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IWdsTransportServer, @ptrCast(self)), pbsz_name_);
            }
            pub inline fn getSetupManager(self: *const T, pp_wds_transport_setup_manager_: ?*?*IWdsTransportSetupManager) HRESULT {
                return @as(*const IWdsTransportServer.VTable, @ptrCast(self.vtable)).get_SetupManager(@as(*const IWdsTransportServer, @ptrCast(self)), pp_wds_transport_setup_manager_);
            }
            pub inline fn getConfigurationManager(self: *const T, pp_wds_transport_configuration_manager_: ?*?*IWdsTransportConfigurationManager) HRESULT {
                return @as(*const IWdsTransportServer.VTable, @ptrCast(self.vtable)).get_ConfigurationManager(@as(*const IWdsTransportServer, @ptrCast(self)), pp_wds_transport_configuration_manager_);
            }
            pub inline fn getNamespaceManager(self: *const T, pp_wds_transport_namespace_manager_: ?*?*IWdsTransportNamespaceManager) HRESULT {
                return @as(*const IWdsTransportServer.VTable, @ptrCast(self.vtable)).get_NamespaceManager(@as(*const IWdsTransportServer, @ptrCast(self)), pp_wds_transport_namespace_manager_);
            }
            pub inline fn disconnectClient(self: *const T, ul_client_id_: u32, disconnection_type_: WDSTRANSPORT_DISCONNECT_TYPE) HRESULT {
                return @as(*const IWdsTransportServer.VTable, @ptrCast(self.vtable)).DisconnectClient(@as(*const IWdsTransportServer, @ptrCast(self)), ul_client_id_, disconnection_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWdsTransportServer2_Value = Guid.initString("256e999f-6df4-4538-81b9-857b9ab8fb47");
pub const IID_IWdsTransportServer2 = &IID_IWdsTransportServer2_Value;
pub const IWdsTransportServer2 = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportServer.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TftpManager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServer2,
            pp_wds_transport_tftp_manager: ?*?*IWdsTransportTftpManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportServer.MethodMixin(T);
            pub inline fn getTftpManager(self: *const T, pp_wds_transport_tftp_manager_: ?*?*IWdsTransportTftpManager) HRESULT {
                return @as(*const IWdsTransportServer2.VTable, @ptrCast(self.vtable)).get_TftpManager(@as(*const IWdsTransportServer2, @ptrCast(self)), pp_wds_transport_tftp_manager_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportSetupManager_Value = Guid.initString("f7238425-efa8-40a4-aef9-c98d969c0b75");
pub const IID_IWdsTransportSetupManager = &IID_IWdsTransportSetupManager_Value;
pub const IWdsTransportSetupManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSetupManager,
            pull_version: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InstalledFeatures: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSetupManager,
            pul_installed_features: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocols: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSetupManager,
            pul_protocols: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterContentProvider: *const fn (
            self: *const IWdsTransportSetupManager,
            bsz_name: ?BSTR,
            bsz_description: ?BSTR,
            bsz_file_path: ?BSTR,
            bsz_initialization_routine: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeregisterContentProvider: *const fn (
            self: *const IWdsTransportSetupManager,
            bsz_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getVersion(self: *const T, pull_version_: ?*u64) HRESULT {
                return @as(*const IWdsTransportSetupManager.VTable, @ptrCast(self.vtable)).get_Version(@as(*const IWdsTransportSetupManager, @ptrCast(self)), pull_version_);
            }
            pub inline fn getInstalledFeatures(self: *const T, pul_installed_features_: ?*u32) HRESULT {
                return @as(*const IWdsTransportSetupManager.VTable, @ptrCast(self.vtable)).get_InstalledFeatures(@as(*const IWdsTransportSetupManager, @ptrCast(self)), pul_installed_features_);
            }
            pub inline fn getProtocols(self: *const T, pul_protocols_: ?*u32) HRESULT {
                return @as(*const IWdsTransportSetupManager.VTable, @ptrCast(self.vtable)).get_Protocols(@as(*const IWdsTransportSetupManager, @ptrCast(self)), pul_protocols_);
            }
            pub inline fn registerContentProvider(self: *const T, bsz_name_: ?BSTR, bsz_description_: ?BSTR, bsz_file_path_: ?BSTR, bsz_initialization_routine_: ?BSTR) HRESULT {
                return @as(*const IWdsTransportSetupManager.VTable, @ptrCast(self.vtable)).RegisterContentProvider(@as(*const IWdsTransportSetupManager, @ptrCast(self)), bsz_name_, bsz_description_, bsz_file_path_, bsz_initialization_routine_);
            }
            pub inline fn deregisterContentProvider(self: *const T, bsz_name_: ?BSTR) HRESULT {
                return @as(*const IWdsTransportSetupManager.VTable, @ptrCast(self.vtable)).DeregisterContentProvider(@as(*const IWdsTransportSetupManager, @ptrCast(self)), bsz_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWdsTransportSetupManager2_Value = Guid.initString("02be79da-7e9e-4366-8b6e-2aa9a91be47f");
pub const IID_IWdsTransportSetupManager2 = &IID_IWdsTransportSetupManager2_Value;
pub const IWdsTransportSetupManager2 = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportSetupManager.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TftpCapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSetupManager2,
            pul_tftp_capabilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContentProviders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSetupManager2,
            pp_provider_collection: ?*?*IWdsTransportCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportSetupManager.MethodMixin(T);
            pub inline fn getTftpCapabilities(self: *const T, pul_tftp_capabilities_: ?*u32) HRESULT {
                return @as(*const IWdsTransportSetupManager2.VTable, @ptrCast(self.vtable)).get_TftpCapabilities(@as(*const IWdsTransportSetupManager2, @ptrCast(self)), pul_tftp_capabilities_);
            }
            pub inline fn getContentProviders(self: *const T, pp_provider_collection_: ?*?*IWdsTransportCollection) HRESULT {
                return @as(*const IWdsTransportSetupManager2.VTable, @ptrCast(self.vtable)).get_ContentProviders(@as(*const IWdsTransportSetupManager2, @ptrCast(self)), pp_provider_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportConfigurationManager_Value = Guid.initString("84cc4779-42dd-4792-891e-1321d6d74b44");
pub const IID_IWdsTransportConfigurationManager = &IID_IWdsTransportConfigurationManager_Value;
pub const IWdsTransportConfigurationManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServicePolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportConfigurationManager,
            pp_wds_transport_service_policy: ?*?*IWdsTransportServicePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DiagnosticsPolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportConfigurationManager,
            pp_wds_transport_diagnostics_policy: ?*?*IWdsTransportDiagnosticsPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WdsTransportServicesRunning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportConfigurationManager,
            b_realtime_status: i16,
            pb_services_running: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableWdsTransportServices: *const fn (
            self: *const IWdsTransportConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableWdsTransportServices: *const fn (
            self: *const IWdsTransportConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartWdsTransportServices: *const fn (
            self: *const IWdsTransportConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopWdsTransportServices: *const fn (
            self: *const IWdsTransportConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestartWdsTransportServices: *const fn (
            self: *const IWdsTransportConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyWdsTransportServices: *const fn (
            self: *const IWdsTransportConfigurationManager,
            service_notification: WDSTRANSPORT_SERVICE_NOTIFICATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getServicePolicy(self: *const T, pp_wds_transport_service_policy_: ?*?*IWdsTransportServicePolicy) HRESULT {
                return @as(*const IWdsTransportConfigurationManager.VTable, @ptrCast(self.vtable)).get_ServicePolicy(@as(*const IWdsTransportConfigurationManager, @ptrCast(self)), pp_wds_transport_service_policy_);
            }
            pub inline fn getDiagnosticsPolicy(self: *const T, pp_wds_transport_diagnostics_policy_: ?*?*IWdsTransportDiagnosticsPolicy) HRESULT {
                return @as(*const IWdsTransportConfigurationManager.VTable, @ptrCast(self.vtable)).get_DiagnosticsPolicy(@as(*const IWdsTransportConfigurationManager, @ptrCast(self)), pp_wds_transport_diagnostics_policy_);
            }
            pub inline fn getWdsTransportServicesRunning(self: *const T, b_realtime_status_: i16, pb_services_running_: ?*i16) HRESULT {
                return @as(*const IWdsTransportConfigurationManager.VTable, @ptrCast(self.vtable)).get_WdsTransportServicesRunning(@as(*const IWdsTransportConfigurationManager, @ptrCast(self)), b_realtime_status_, pb_services_running_);
            }
            pub inline fn enableWdsTransportServices(self: *const T) HRESULT {
                return @as(*const IWdsTransportConfigurationManager.VTable, @ptrCast(self.vtable)).EnableWdsTransportServices(@as(*const IWdsTransportConfigurationManager, @ptrCast(self)));
            }
            pub inline fn disableWdsTransportServices(self: *const T) HRESULT {
                return @as(*const IWdsTransportConfigurationManager.VTable, @ptrCast(self.vtable)).DisableWdsTransportServices(@as(*const IWdsTransportConfigurationManager, @ptrCast(self)));
            }
            pub inline fn startWdsTransportServices(self: *const T) HRESULT {
                return @as(*const IWdsTransportConfigurationManager.VTable, @ptrCast(self.vtable)).StartWdsTransportServices(@as(*const IWdsTransportConfigurationManager, @ptrCast(self)));
            }
            pub inline fn stopWdsTransportServices(self: *const T) HRESULT {
                return @as(*const IWdsTransportConfigurationManager.VTable, @ptrCast(self.vtable)).StopWdsTransportServices(@as(*const IWdsTransportConfigurationManager, @ptrCast(self)));
            }
            pub inline fn restartWdsTransportServices(self: *const T) HRESULT {
                return @as(*const IWdsTransportConfigurationManager.VTable, @ptrCast(self.vtable)).RestartWdsTransportServices(@as(*const IWdsTransportConfigurationManager, @ptrCast(self)));
            }
            pub inline fn notifyWdsTransportServices(self: *const T, service_notification_: WDSTRANSPORT_SERVICE_NOTIFICATION) HRESULT {
                return @as(*const IWdsTransportConfigurationManager.VTable, @ptrCast(self.vtable)).NotifyWdsTransportServices(@as(*const IWdsTransportConfigurationManager, @ptrCast(self)), service_notification_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportConfigurationManager2_Value = Guid.initString("d0d85caf-a153-4f1d-a9dd-96f431c50717");
pub const IID_IWdsTransportConfigurationManager2 = &IID_IWdsTransportConfigurationManager2_Value;
pub const IWdsTransportConfigurationManager2 = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportConfigurationManager.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MulticastSessionPolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportConfigurationManager2,
            pp_wds_transport_multicast_session_policy: ?*?*IWdsTransportMulticastSessionPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportConfigurationManager.MethodMixin(T);
            pub inline fn getMulticastSessionPolicy(self: *const T, pp_wds_transport_multicast_session_policy_: ?*?*IWdsTransportMulticastSessionPolicy) HRESULT {
                return @as(*const IWdsTransportConfigurationManager2.VTable, @ptrCast(self.vtable)).get_MulticastSessionPolicy(@as(*const IWdsTransportConfigurationManager2, @ptrCast(self)), pp_wds_transport_multicast_session_policy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportNamespaceManager_Value = Guid.initString("3e22d9f6-3777-4d98-83e1-f98696717ba3");
pub const IID_IWdsTransportNamespaceManager = &IID_IWdsTransportNamespaceManager_Value;
pub const IWdsTransportNamespaceManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateNamespace: *const fn (
            self: *const IWdsTransportNamespaceManager,
            namespace_type: WDSTRANSPORT_NAMESPACE_TYPE,
            bsz_namespace_name: ?BSTR,
            bsz_content_provider: ?BSTR,
            bsz_configuration: ?BSTR,
            pp_wds_transport_namespace: ?*?*IWdsTransportNamespace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetrieveNamespace: *const fn (
            self: *const IWdsTransportNamespaceManager,
            bsz_namespace_name: ?BSTR,
            pp_wds_transport_namespace: ?*?*IWdsTransportNamespace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetrieveNamespaces: *const fn (
            self: *const IWdsTransportNamespaceManager,
            bsz_content_provider: ?BSTR,
            bsz_namespace_name: ?BSTR,
            b_include_tombstones: i16,
            pp_wds_transport_namespaces: ?*?*IWdsTransportCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createNamespace(self: *const T, namespace_type_: WDSTRANSPORT_NAMESPACE_TYPE, bsz_namespace_name_: ?BSTR, bsz_content_provider_: ?BSTR, bsz_configuration_: ?BSTR, pp_wds_transport_namespace_: ?*?*IWdsTransportNamespace) HRESULT {
                return @as(*const IWdsTransportNamespaceManager.VTable, @ptrCast(self.vtable)).CreateNamespace(@as(*const IWdsTransportNamespaceManager, @ptrCast(self)), namespace_type_, bsz_namespace_name_, bsz_content_provider_, bsz_configuration_, pp_wds_transport_namespace_);
            }
            pub inline fn retrieveNamespace(self: *const T, bsz_namespace_name_: ?BSTR, pp_wds_transport_namespace_: ?*?*IWdsTransportNamespace) HRESULT {
                return @as(*const IWdsTransportNamespaceManager.VTable, @ptrCast(self.vtable)).RetrieveNamespace(@as(*const IWdsTransportNamespaceManager, @ptrCast(self)), bsz_namespace_name_, pp_wds_transport_namespace_);
            }
            pub inline fn retrieveNamespaces(self: *const T, bsz_content_provider_: ?BSTR, bsz_namespace_name_: ?BSTR, b_include_tombstones_: i16, pp_wds_transport_namespaces_: ?*?*IWdsTransportCollection) HRESULT {
                return @as(*const IWdsTransportNamespaceManager.VTable, @ptrCast(self.vtable)).RetrieveNamespaces(@as(*const IWdsTransportNamespaceManager, @ptrCast(self)), bsz_content_provider_, bsz_namespace_name_, b_include_tombstones_, pp_wds_transport_namespaces_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWdsTransportTftpManager_Value = Guid.initString("1327a7c8-ae8a-4fb3-8150-136227c37e9a");
pub const IID_IWdsTransportTftpManager = &IID_IWdsTransportTftpManager_Value;
pub const IWdsTransportTftpManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        RetrieveTftpClients: *const fn (
            self: *const IWdsTransportTftpManager,
            pp_wds_transport_tftp_clients: ?*?*IWdsTransportCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn retrieveTftpClients(self: *const T, pp_wds_transport_tftp_clients_: ?*?*IWdsTransportCollection) HRESULT {
                return @as(*const IWdsTransportTftpManager.VTable, @ptrCast(self.vtable)).RetrieveTftpClients(@as(*const IWdsTransportTftpManager, @ptrCast(self)), pp_wds_transport_tftp_clients_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportServicePolicy_Value = Guid.initString("b9468578-9f2b-48cc-b27a-a60799c2750c");
pub const IID_IWdsTransportServicePolicy = &IID_IWdsTransportServicePolicy_Value;
pub const IWdsTransportServicePolicy = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportCacheable.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpAddressSource: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            address_type: WDSTRANSPORT_IP_ADDRESS_TYPE,
            p_source_type: ?*WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpAddressSource: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            address_type: WDSTRANSPORT_IP_ADDRESS_TYPE,
            source_type: WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartIpAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            address_type: WDSTRANSPORT_IP_ADDRESS_TYPE,
            pbsz_start_ip_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartIpAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            address_type: WDSTRANSPORT_IP_ADDRESS_TYPE,
            bsz_start_ip_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EndIpAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            address_type: WDSTRANSPORT_IP_ADDRESS_TYPE,
            pbsz_end_ip_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EndIpAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            address_type: WDSTRANSPORT_IP_ADDRESS_TYPE,
            bsz_end_ip_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            pul_start_port: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            ul_start_port: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EndPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            pul_end_port: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EndPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            ul_end_port: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkProfile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            p_profile_type: ?*WDSTRANSPORT_NETWORK_PROFILE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkProfile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy,
            profile_type: WDSTRANSPORT_NETWORK_PROFILE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportCacheable.MethodMixin(T);
            pub inline fn getIpAddressSource(self: *const T, address_type_: WDSTRANSPORT_IP_ADDRESS_TYPE, p_source_type_: ?*WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).get_IpAddressSource(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), address_type_, p_source_type_);
            }
            pub inline fn putIpAddressSource(self: *const T, address_type_: WDSTRANSPORT_IP_ADDRESS_TYPE, source_type_: WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).put_IpAddressSource(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), address_type_, source_type_);
            }
            pub inline fn getStartIpAddress(self: *const T, address_type_: WDSTRANSPORT_IP_ADDRESS_TYPE, pbsz_start_ip_address_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).get_StartIpAddress(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), address_type_, pbsz_start_ip_address_);
            }
            pub inline fn putStartIpAddress(self: *const T, address_type_: WDSTRANSPORT_IP_ADDRESS_TYPE, bsz_start_ip_address_: ?BSTR) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).put_StartIpAddress(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), address_type_, bsz_start_ip_address_);
            }
            pub inline fn getEndIpAddress(self: *const T, address_type_: WDSTRANSPORT_IP_ADDRESS_TYPE, pbsz_end_ip_address_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).get_EndIpAddress(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), address_type_, pbsz_end_ip_address_);
            }
            pub inline fn putEndIpAddress(self: *const T, address_type_: WDSTRANSPORT_IP_ADDRESS_TYPE, bsz_end_ip_address_: ?BSTR) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).put_EndIpAddress(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), address_type_, bsz_end_ip_address_);
            }
            pub inline fn getStartPort(self: *const T, pul_start_port_: ?*u32) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).get_StartPort(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), pul_start_port_);
            }
            pub inline fn putStartPort(self: *const T, ul_start_port_: u32) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).put_StartPort(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), ul_start_port_);
            }
            pub inline fn getEndPort(self: *const T, pul_end_port_: ?*u32) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).get_EndPort(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), pul_end_port_);
            }
            pub inline fn putEndPort(self: *const T, ul_end_port_: u32) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).put_EndPort(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), ul_end_port_);
            }
            pub inline fn getNetworkProfile(self: *const T, p_profile_type_: ?*WDSTRANSPORT_NETWORK_PROFILE_TYPE) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).get_NetworkProfile(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), p_profile_type_);
            }
            pub inline fn putNetworkProfile(self: *const T, profile_type_: WDSTRANSPORT_NETWORK_PROFILE_TYPE) HRESULT {
                return @as(*const IWdsTransportServicePolicy.VTable, @ptrCast(self.vtable)).put_NetworkProfile(@as(*const IWdsTransportServicePolicy, @ptrCast(self)), profile_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWdsTransportServicePolicy2_Value = Guid.initString("65c19e5c-aa7e-4b91-8944-91e0e5572797");
pub const IID_IWdsTransportServicePolicy2 = &IID_IWdsTransportServicePolicy2_Value;
pub const IWdsTransportServicePolicy2 = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportServicePolicy.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UdpPortPolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy2,
            p_udp_port_policy: ?*WDSTRANSPORT_UDP_PORT_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UdpPortPolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy2,
            udp_port_policy: WDSTRANSPORT_UDP_PORT_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TftpMaximumBlockSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy2,
            pul_tftp_maximum_block_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TftpMaximumBlockSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy2,
            ul_tftp_maximum_block_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableTftpVariableWindowExtension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy2,
            pb_enable_tftp_variable_window_extension: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableTftpVariableWindowExtension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportServicePolicy2,
            b_enable_tftp_variable_window_extension: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportServicePolicy.MethodMixin(T);
            pub inline fn getUdpPortPolicy(self: *const T, p_udp_port_policy_: ?*WDSTRANSPORT_UDP_PORT_POLICY) HRESULT {
                return @as(*const IWdsTransportServicePolicy2.VTable, @ptrCast(self.vtable)).get_UdpPortPolicy(@as(*const IWdsTransportServicePolicy2, @ptrCast(self)), p_udp_port_policy_);
            }
            pub inline fn putUdpPortPolicy(self: *const T, udp_port_policy_: WDSTRANSPORT_UDP_PORT_POLICY) HRESULT {
                return @as(*const IWdsTransportServicePolicy2.VTable, @ptrCast(self.vtable)).put_UdpPortPolicy(@as(*const IWdsTransportServicePolicy2, @ptrCast(self)), udp_port_policy_);
            }
            pub inline fn getTftpMaximumBlockSize(self: *const T, pul_tftp_maximum_block_size_: ?*u32) HRESULT {
                return @as(*const IWdsTransportServicePolicy2.VTable, @ptrCast(self.vtable)).get_TftpMaximumBlockSize(@as(*const IWdsTransportServicePolicy2, @ptrCast(self)), pul_tftp_maximum_block_size_);
            }
            pub inline fn putTftpMaximumBlockSize(self: *const T, ul_tftp_maximum_block_size_: u32) HRESULT {
                return @as(*const IWdsTransportServicePolicy2.VTable, @ptrCast(self.vtable)).put_TftpMaximumBlockSize(@as(*const IWdsTransportServicePolicy2, @ptrCast(self)), ul_tftp_maximum_block_size_);
            }
            pub inline fn getEnableTftpVariableWindowExtension(self: *const T, pb_enable_tftp_variable_window_extension_: ?*i16) HRESULT {
                return @as(*const IWdsTransportServicePolicy2.VTable, @ptrCast(self.vtable)).get_EnableTftpVariableWindowExtension(@as(*const IWdsTransportServicePolicy2, @ptrCast(self)), pb_enable_tftp_variable_window_extension_);
            }
            pub inline fn putEnableTftpVariableWindowExtension(self: *const T, b_enable_tftp_variable_window_extension_: i16) HRESULT {
                return @as(*const IWdsTransportServicePolicy2.VTable, @ptrCast(self.vtable)).put_EnableTftpVariableWindowExtension(@as(*const IWdsTransportServicePolicy2, @ptrCast(self)), b_enable_tftp_variable_window_extension_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportDiagnosticsPolicy_Value = Guid.initString("13b33efc-7856-4f61-9a59-8de67b6b87b6");
pub const IID_IWdsTransportDiagnosticsPolicy = &IID_IWdsTransportDiagnosticsPolicy_Value;
pub const IWdsTransportDiagnosticsPolicy = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportCacheable.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportDiagnosticsPolicy,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportDiagnosticsPolicy,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Components: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportDiagnosticsPolicy,
            pul_components: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Components: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportDiagnosticsPolicy,
            ul_components: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportCacheable.MethodMixin(T);
            pub inline fn getEnabled(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWdsTransportDiagnosticsPolicy.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IWdsTransportDiagnosticsPolicy, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putEnabled(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWdsTransportDiagnosticsPolicy.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IWdsTransportDiagnosticsPolicy, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getComponents(self: *const T, pul_components_: ?*u32) HRESULT {
                return @as(*const IWdsTransportDiagnosticsPolicy.VTable, @ptrCast(self.vtable)).get_Components(@as(*const IWdsTransportDiagnosticsPolicy, @ptrCast(self)), pul_components_);
            }
            pub inline fn putComponents(self: *const T, ul_components_: u32) HRESULT {
                return @as(*const IWdsTransportDiagnosticsPolicy.VTable, @ptrCast(self.vtable)).put_Components(@as(*const IWdsTransportDiagnosticsPolicy, @ptrCast(self)), ul_components_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportMulticastSessionPolicy_Value = Guid.initString("4e5753cf-68ec-4504-a951-4a003266606b");
pub const IID_IWdsTransportMulticastSessionPolicy = &IID_IWdsTransportMulticastSessionPolicy_Value;
pub const IWdsTransportMulticastSessionPolicy = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportCacheable.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SlowClientHandling: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportMulticastSessionPolicy,
            p_slow_client_handling: ?*WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SlowClientHandling: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportMulticastSessionPolicy,
            slow_client_handling: WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoDisconnectThreshold: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportMulticastSessionPolicy,
            pul_threshold: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoDisconnectThreshold: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportMulticastSessionPolicy,
            ul_threshold: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MultistreamStreamCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportMulticastSessionPolicy,
            pul_stream_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MultistreamStreamCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportMulticastSessionPolicy,
            ul_stream_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SlowClientFallback: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportMulticastSessionPolicy,
            pb_client_fallback: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SlowClientFallback: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportMulticastSessionPolicy,
            b_client_fallback: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportCacheable.MethodMixin(T);
            pub inline fn getSlowClientHandling(self: *const T, p_slow_client_handling_: ?*WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE) HRESULT {
                return @as(*const IWdsTransportMulticastSessionPolicy.VTable, @ptrCast(self.vtable)).get_SlowClientHandling(@as(*const IWdsTransportMulticastSessionPolicy, @ptrCast(self)), p_slow_client_handling_);
            }
            pub inline fn putSlowClientHandling(self: *const T, slow_client_handling_: WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE) HRESULT {
                return @as(*const IWdsTransportMulticastSessionPolicy.VTable, @ptrCast(self.vtable)).put_SlowClientHandling(@as(*const IWdsTransportMulticastSessionPolicy, @ptrCast(self)), slow_client_handling_);
            }
            pub inline fn getAutoDisconnectThreshold(self: *const T, pul_threshold_: ?*u32) HRESULT {
                return @as(*const IWdsTransportMulticastSessionPolicy.VTable, @ptrCast(self.vtable)).get_AutoDisconnectThreshold(@as(*const IWdsTransportMulticastSessionPolicy, @ptrCast(self)), pul_threshold_);
            }
            pub inline fn putAutoDisconnectThreshold(self: *const T, ul_threshold_: u32) HRESULT {
                return @as(*const IWdsTransportMulticastSessionPolicy.VTable, @ptrCast(self.vtable)).put_AutoDisconnectThreshold(@as(*const IWdsTransportMulticastSessionPolicy, @ptrCast(self)), ul_threshold_);
            }
            pub inline fn getMultistreamStreamCount(self: *const T, pul_stream_count_: ?*u32) HRESULT {
                return @as(*const IWdsTransportMulticastSessionPolicy.VTable, @ptrCast(self.vtable)).get_MultistreamStreamCount(@as(*const IWdsTransportMulticastSessionPolicy, @ptrCast(self)), pul_stream_count_);
            }
            pub inline fn putMultistreamStreamCount(self: *const T, ul_stream_count_: u32) HRESULT {
                return @as(*const IWdsTransportMulticastSessionPolicy.VTable, @ptrCast(self.vtable)).put_MultistreamStreamCount(@as(*const IWdsTransportMulticastSessionPolicy, @ptrCast(self)), ul_stream_count_);
            }
            pub inline fn getSlowClientFallback(self: *const T, pb_client_fallback_: ?*i16) HRESULT {
                return @as(*const IWdsTransportMulticastSessionPolicy.VTable, @ptrCast(self.vtable)).get_SlowClientFallback(@as(*const IWdsTransportMulticastSessionPolicy, @ptrCast(self)), pb_client_fallback_);
            }
            pub inline fn putSlowClientFallback(self: *const T, b_client_fallback_: i16) HRESULT {
                return @as(*const IWdsTransportMulticastSessionPolicy.VTable, @ptrCast(self.vtable)).put_SlowClientFallback(@as(*const IWdsTransportMulticastSessionPolicy, @ptrCast(self)), b_client_fallback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportNamespace_Value = Guid.initString("fa561f57-fbef-4ed3-b056-127cb1b33b84");
pub const IID_IWdsTransportNamespace = &IID_IWdsTransportNamespace_Value;
pub const IWdsTransportNamespace = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            p_type: ?*WDSTRANSPORT_NAMESPACE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            pul_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            pbsz_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            bsz_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            pbsz_friendly_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            bsz_friendly_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            pbsz_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            bsz_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContentProvider: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            pbsz_content_provider: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ContentProvider: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            bsz_content_provider: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Configuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            pbsz_configuration: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Configuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            bsz_configuration: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Registered: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            pb_registered: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tombstoned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            pb_tombstoned: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TombstoneTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            p_tombstone_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionStarted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespace,
            pb_transmission_started: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Register: *const fn (
            self: *const IWdsTransportNamespace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deregister: *const fn (
            self: *const IWdsTransportNamespace,
            b_terminate_sessions: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IWdsTransportNamespace,
            pp_wds_transport_namespace_clone: ?*?*IWdsTransportNamespace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IWdsTransportNamespace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetrieveContents: *const fn (
            self: *const IWdsTransportNamespace,
            pp_wds_transport_contents: ?*?*IWdsTransportCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getType(self: *const T, p_type_: ?*WDSTRANSPORT_NAMESPACE_TYPE) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IWdsTransportNamespace, @ptrCast(self)), p_type_);
            }
            pub inline fn getId(self: *const T, pul_id_: ?*u32) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IWdsTransportNamespace, @ptrCast(self)), pul_id_);
            }
            pub inline fn getName(self: *const T, pbsz_name_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IWdsTransportNamespace, @ptrCast(self)), pbsz_name_);
            }
            pub inline fn putName(self: *const T, bsz_name_: ?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IWdsTransportNamespace, @ptrCast(self)), bsz_name_);
            }
            pub inline fn getFriendlyName(self: *const T, pbsz_friendly_name_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_FriendlyName(@as(*const IWdsTransportNamespace, @ptrCast(self)), pbsz_friendly_name_);
            }
            pub inline fn putFriendlyName(self: *const T, bsz_friendly_name_: ?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).put_FriendlyName(@as(*const IWdsTransportNamespace, @ptrCast(self)), bsz_friendly_name_);
            }
            pub inline fn getDescription(self: *const T, pbsz_description_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IWdsTransportNamespace, @ptrCast(self)), pbsz_description_);
            }
            pub inline fn putDescription(self: *const T, bsz_description_: ?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IWdsTransportNamespace, @ptrCast(self)), bsz_description_);
            }
            pub inline fn getContentProvider(self: *const T, pbsz_content_provider_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_ContentProvider(@as(*const IWdsTransportNamespace, @ptrCast(self)), pbsz_content_provider_);
            }
            pub inline fn putContentProvider(self: *const T, bsz_content_provider_: ?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).put_ContentProvider(@as(*const IWdsTransportNamespace, @ptrCast(self)), bsz_content_provider_);
            }
            pub inline fn getConfiguration(self: *const T, pbsz_configuration_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_Configuration(@as(*const IWdsTransportNamespace, @ptrCast(self)), pbsz_configuration_);
            }
            pub inline fn putConfiguration(self: *const T, bsz_configuration_: ?BSTR) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).put_Configuration(@as(*const IWdsTransportNamespace, @ptrCast(self)), bsz_configuration_);
            }
            pub inline fn getRegistered(self: *const T, pb_registered_: ?*i16) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_Registered(@as(*const IWdsTransportNamespace, @ptrCast(self)), pb_registered_);
            }
            pub inline fn getTombstoned(self: *const T, pb_tombstoned_: ?*i16) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_Tombstoned(@as(*const IWdsTransportNamespace, @ptrCast(self)), pb_tombstoned_);
            }
            pub inline fn getTombstoneTime(self: *const T, p_tombstone_time_: ?*f64) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_TombstoneTime(@as(*const IWdsTransportNamespace, @ptrCast(self)), p_tombstone_time_);
            }
            pub inline fn getTransmissionStarted(self: *const T, pb_transmission_started_: ?*i16) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).get_TransmissionStarted(@as(*const IWdsTransportNamespace, @ptrCast(self)), pb_transmission_started_);
            }
            pub inline fn register(self: *const T) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).Register(@as(*const IWdsTransportNamespace, @ptrCast(self)));
            }
            pub inline fn deregister(self: *const T, b_terminate_sessions_: i16) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).Deregister(@as(*const IWdsTransportNamespace, @ptrCast(self)), b_terminate_sessions_);
            }
            pub inline fn clone(self: *const T, pp_wds_transport_namespace_clone_: ?*?*IWdsTransportNamespace) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).Clone(@as(*const IWdsTransportNamespace, @ptrCast(self)), pp_wds_transport_namespace_clone_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IWdsTransportNamespace, @ptrCast(self)));
            }
            pub inline fn retrieveContents(self: *const T, pp_wds_transport_contents_: ?*?*IWdsTransportCollection) HRESULT {
                return @as(*const IWdsTransportNamespace.VTable, @ptrCast(self.vtable)).RetrieveContents(@as(*const IWdsTransportNamespace, @ptrCast(self)), pp_wds_transport_contents_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportNamespaceAutoCast_Value = Guid.initString("ad931a72-c4bd-4c41-8fbc-59c9c748df9e");
pub const IID_IWdsTransportNamespaceAutoCast = &IID_IWdsTransportNamespaceAutoCast_Value;
pub const IWdsTransportNamespaceAutoCast = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportNamespace.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportNamespace.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportNamespaceScheduledCast_Value = Guid.initString("3840cecf-d76c-416e-a4cc-31c741d2874b");
pub const IID_IWdsTransportNamespaceScheduledCast = &IID_IWdsTransportNamespaceScheduledCast_Value;
pub const IWdsTransportNamespaceScheduledCast = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportNamespace.VTable,
        StartTransmission: *const fn (
            self: *const IWdsTransportNamespaceScheduledCast,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportNamespace.MethodMixin(T);
            pub inline fn startTransmission(self: *const T) HRESULT {
                return @as(*const IWdsTransportNamespaceScheduledCast.VTable, @ptrCast(self.vtable)).StartTransmission(@as(*const IWdsTransportNamespaceScheduledCast, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportNamespaceScheduledCastManualStart_Value = Guid.initString("013e6e4c-e6a7-4fb5-b7ff-d9f5da805c31");
pub const IID_IWdsTransportNamespaceScheduledCastManualStart = &IID_IWdsTransportNamespaceScheduledCastManualStart_Value;
pub const IWdsTransportNamespaceScheduledCastManualStart = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportNamespaceScheduledCast.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportNamespaceScheduledCast.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportNamespaceScheduledCastAutoStart_Value = Guid.initString("d606af3d-ea9c-4219-961e-7491d618d9b9");
pub const IID_IWdsTransportNamespaceScheduledCastAutoStart = &IID_IWdsTransportNamespaceScheduledCastAutoStart_Value;
pub const IWdsTransportNamespaceScheduledCastAutoStart = extern struct {
    pub const VTable = extern struct {
        base: IWdsTransportNamespaceScheduledCast.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinimumClients: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespaceScheduledCastAutoStart,
            pul_minimum_clients: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinimumClients: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespaceScheduledCastAutoStart,
            ul_minimum_clients: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespaceScheduledCastAutoStart,
            p_start_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportNamespaceScheduledCastAutoStart,
            start_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWdsTransportNamespaceScheduledCast.MethodMixin(T);
            pub inline fn getMinimumClients(self: *const T, pul_minimum_clients_: ?*u32) HRESULT {
                return @as(*const IWdsTransportNamespaceScheduledCastAutoStart.VTable, @ptrCast(self.vtable)).get_MinimumClients(@as(*const IWdsTransportNamespaceScheduledCastAutoStart, @ptrCast(self)), pul_minimum_clients_);
            }
            pub inline fn putMinimumClients(self: *const T, ul_minimum_clients_: u32) HRESULT {
                return @as(*const IWdsTransportNamespaceScheduledCastAutoStart.VTable, @ptrCast(self.vtable)).put_MinimumClients(@as(*const IWdsTransportNamespaceScheduledCastAutoStart, @ptrCast(self)), ul_minimum_clients_);
            }
            pub inline fn getStartTime(self: *const T, p_start_time_: ?*f64) HRESULT {
                return @as(*const IWdsTransportNamespaceScheduledCastAutoStart.VTable, @ptrCast(self.vtable)).get_StartTime(@as(*const IWdsTransportNamespaceScheduledCastAutoStart, @ptrCast(self)), p_start_time_);
            }
            pub inline fn putStartTime(self: *const T, start_time_: f64) HRESULT {
                return @as(*const IWdsTransportNamespaceScheduledCastAutoStart.VTable, @ptrCast(self.vtable)).put_StartTime(@as(*const IWdsTransportNamespaceScheduledCastAutoStart, @ptrCast(self)), start_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportContent_Value = Guid.initString("d405d711-0296-4ab4-a860-ac7d32e65798");
pub const IID_IWdsTransportContent = &IID_IWdsTransportContent_Value;
pub const IWdsTransportContent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Namespace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportContent,
            pp_wds_transport_namespace: ?*?*IWdsTransportNamespace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportContent,
            pul_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportContent,
            pbsz_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetrieveSessions: *const fn (
            self: *const IWdsTransportContent,
            pp_wds_transport_sessions: ?*?*IWdsTransportCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: *const fn (
            self: *const IWdsTransportContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNamespace(self: *const T, pp_wds_transport_namespace_: ?*?*IWdsTransportNamespace) HRESULT {
                return @as(*const IWdsTransportContent.VTable, @ptrCast(self.vtable)).get_Namespace(@as(*const IWdsTransportContent, @ptrCast(self)), pp_wds_transport_namespace_);
            }
            pub inline fn getId(self: *const T, pul_id_: ?*u32) HRESULT {
                return @as(*const IWdsTransportContent.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IWdsTransportContent, @ptrCast(self)), pul_id_);
            }
            pub inline fn getName(self: *const T, pbsz_name_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportContent.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IWdsTransportContent, @ptrCast(self)), pbsz_name_);
            }
            pub inline fn retrieveSessions(self: *const T, pp_wds_transport_sessions_: ?*?*IWdsTransportCollection) HRESULT {
                return @as(*const IWdsTransportContent.VTable, @ptrCast(self.vtable)).RetrieveSessions(@as(*const IWdsTransportContent, @ptrCast(self)), pp_wds_transport_sessions_);
            }
            pub inline fn terminate(self: *const T) HRESULT {
                return @as(*const IWdsTransportContent.VTable, @ptrCast(self.vtable)).Terminate(@as(*const IWdsTransportContent, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportSession_Value = Guid.initString("f4efea88-65b1-4f30-a4b9-2793987796fb");
pub const IID_IWdsTransportSession = &IID_IWdsTransportSession_Value;
pub const IWdsTransportSession = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Content: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSession,
            pp_wds_transport_content: ?*?*IWdsTransportContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSession,
            pul_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkInterfaceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSession,
            pbsz_network_interface_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkInterfaceAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSession,
            pbsz_network_interface_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransferRate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSession,
            pul_transfer_rate: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MasterClientId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportSession,
            pul_master_client_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetrieveClients: *const fn (
            self: *const IWdsTransportSession,
            pp_wds_transport_clients: ?*?*IWdsTransportCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: *const fn (
            self: *const IWdsTransportSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getContent(self: *const T, pp_wds_transport_content_: ?*?*IWdsTransportContent) HRESULT {
                return @as(*const IWdsTransportSession.VTable, @ptrCast(self.vtable)).get_Content(@as(*const IWdsTransportSession, @ptrCast(self)), pp_wds_transport_content_);
            }
            pub inline fn getId(self: *const T, pul_id_: ?*u32) HRESULT {
                return @as(*const IWdsTransportSession.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IWdsTransportSession, @ptrCast(self)), pul_id_);
            }
            pub inline fn getNetworkInterfaceName(self: *const T, pbsz_network_interface_name_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportSession.VTable, @ptrCast(self.vtable)).get_NetworkInterfaceName(@as(*const IWdsTransportSession, @ptrCast(self)), pbsz_network_interface_name_);
            }
            pub inline fn getNetworkInterfaceAddress(self: *const T, pbsz_network_interface_address_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportSession.VTable, @ptrCast(self.vtable)).get_NetworkInterfaceAddress(@as(*const IWdsTransportSession, @ptrCast(self)), pbsz_network_interface_address_);
            }
            pub inline fn getTransferRate(self: *const T, pul_transfer_rate_: ?*u32) HRESULT {
                return @as(*const IWdsTransportSession.VTable, @ptrCast(self.vtable)).get_TransferRate(@as(*const IWdsTransportSession, @ptrCast(self)), pul_transfer_rate_);
            }
            pub inline fn getMasterClientId(self: *const T, pul_master_client_id_: ?*u32) HRESULT {
                return @as(*const IWdsTransportSession.VTable, @ptrCast(self.vtable)).get_MasterClientId(@as(*const IWdsTransportSession, @ptrCast(self)), pul_master_client_id_);
            }
            pub inline fn retrieveClients(self: *const T, pp_wds_transport_clients_: ?*?*IWdsTransportCollection) HRESULT {
                return @as(*const IWdsTransportSession.VTable, @ptrCast(self.vtable)).RetrieveClients(@as(*const IWdsTransportSession, @ptrCast(self)), pp_wds_transport_clients_);
            }
            pub inline fn terminate(self: *const T) HRESULT {
                return @as(*const IWdsTransportSession.VTable, @ptrCast(self.vtable)).Terminate(@as(*const IWdsTransportSession, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWdsTransportClient_Value = Guid.initString("b5dbc93a-cabe-46ca-837f-3e44e93c6545");
pub const IID_IWdsTransportClient = &IID_IWdsTransportClient_Value;
pub const IWdsTransportClient = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pp_wds_transport_session: ?*?*IWdsTransportSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pul_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pbsz_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MacAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pbsz_mac_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pbsz_ip_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PercentCompletion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pul_percent_completion: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JoinDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pul_join_duration: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CpuUtilization: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pul_cpu_utilization: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MemoryUtilization: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pul_memory_utilization: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkUtilization: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pul_network_utilization: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserIdentity: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportClient,
            pbsz_user_identity: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const IWdsTransportClient,
            disconnection_type: WDSTRANSPORT_DISCONNECT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_wds_transport_session_: ?*?*IWdsTransportSession) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IWdsTransportClient, @ptrCast(self)), pp_wds_transport_session_);
            }
            pub inline fn getId(self: *const T, pul_id_: ?*u32) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IWdsTransportClient, @ptrCast(self)), pul_id_);
            }
            pub inline fn getName(self: *const T, pbsz_name_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IWdsTransportClient, @ptrCast(self)), pbsz_name_);
            }
            pub inline fn getMacAddress(self: *const T, pbsz_mac_address_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_MacAddress(@as(*const IWdsTransportClient, @ptrCast(self)), pbsz_mac_address_);
            }
            pub inline fn getIpAddress(self: *const T, pbsz_ip_address_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_IpAddress(@as(*const IWdsTransportClient, @ptrCast(self)), pbsz_ip_address_);
            }
            pub inline fn getPercentCompletion(self: *const T, pul_percent_completion_: ?*u32) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_PercentCompletion(@as(*const IWdsTransportClient, @ptrCast(self)), pul_percent_completion_);
            }
            pub inline fn getJoinDuration(self: *const T, pul_join_duration_: ?*u32) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_JoinDuration(@as(*const IWdsTransportClient, @ptrCast(self)), pul_join_duration_);
            }
            pub inline fn getCpuUtilization(self: *const T, pul_cpu_utilization_: ?*u32) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_CpuUtilization(@as(*const IWdsTransportClient, @ptrCast(self)), pul_cpu_utilization_);
            }
            pub inline fn getMemoryUtilization(self: *const T, pul_memory_utilization_: ?*u32) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_MemoryUtilization(@as(*const IWdsTransportClient, @ptrCast(self)), pul_memory_utilization_);
            }
            pub inline fn getNetworkUtilization(self: *const T, pul_network_utilization_: ?*u32) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_NetworkUtilization(@as(*const IWdsTransportClient, @ptrCast(self)), pul_network_utilization_);
            }
            pub inline fn getUserIdentity(self: *const T, pbsz_user_identity_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).get_UserIdentity(@as(*const IWdsTransportClient, @ptrCast(self)), pbsz_user_identity_);
            }
            pub inline fn disconnect(self: *const T, disconnection_type_: WDSTRANSPORT_DISCONNECT_TYPE) HRESULT {
                return @as(*const IWdsTransportClient.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IWdsTransportClient, @ptrCast(self)), disconnection_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWdsTransportTftpClient_Value = Guid.initString("b022d3ae-884d-4d85-b146-53320e76ef62");
pub const IID_IWdsTransportTftpClient = &IID_IWdsTransportTftpClient_Value;
pub const IWdsTransportTftpClient = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportTftpClient,
            pbsz_file_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportTftpClient,
            pbsz_ip_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Timeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportTftpClient,
            pul_timeout: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentFileOffset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportTftpClient,
            pul64_current_offset: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportTftpClient,
            pul64_file_size: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BlockSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportTftpClient,
            pul_block_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WindowSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportTftpClient,
            pul_window_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFileName(self: *const T, pbsz_file_name_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportTftpClient.VTable, @ptrCast(self.vtable)).get_FileName(@as(*const IWdsTransportTftpClient, @ptrCast(self)), pbsz_file_name_);
            }
            pub inline fn getIpAddress(self: *const T, pbsz_ip_address_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportTftpClient.VTable, @ptrCast(self.vtable)).get_IpAddress(@as(*const IWdsTransportTftpClient, @ptrCast(self)), pbsz_ip_address_);
            }
            pub inline fn getTimeout(self: *const T, pul_timeout_: ?*u32) HRESULT {
                return @as(*const IWdsTransportTftpClient.VTable, @ptrCast(self.vtable)).get_Timeout(@as(*const IWdsTransportTftpClient, @ptrCast(self)), pul_timeout_);
            }
            pub inline fn getCurrentFileOffset(self: *const T, pul64_current_offset_: ?*u64) HRESULT {
                return @as(*const IWdsTransportTftpClient.VTable, @ptrCast(self.vtable)).get_CurrentFileOffset(@as(*const IWdsTransportTftpClient, @ptrCast(self)), pul64_current_offset_);
            }
            pub inline fn getFileSize(self: *const T, pul64_file_size_: ?*u64) HRESULT {
                return @as(*const IWdsTransportTftpClient.VTable, @ptrCast(self.vtable)).get_FileSize(@as(*const IWdsTransportTftpClient, @ptrCast(self)), pul64_file_size_);
            }
            pub inline fn getBlockSize(self: *const T, pul_block_size_: ?*u32) HRESULT {
                return @as(*const IWdsTransportTftpClient.VTable, @ptrCast(self.vtable)).get_BlockSize(@as(*const IWdsTransportTftpClient, @ptrCast(self)), pul_block_size_);
            }
            pub inline fn getWindowSize(self: *const T, pul_window_size_: ?*u32) HRESULT {
                return @as(*const IWdsTransportTftpClient.VTable, @ptrCast(self.vtable)).get_WindowSize(@as(*const IWdsTransportTftpClient, @ptrCast(self)), pul_window_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWdsTransportContentProvider_Value = Guid.initString("b9489f24-f219-4acf-aad7-265c7c08a6ae");
pub const IID_IWdsTransportContentProvider = &IID_IWdsTransportContentProvider_Value;
pub const IWdsTransportContentProvider = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportContentProvider,
            pbsz_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportContentProvider,
            pbsz_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FilePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportContentProvider,
            pbsz_file_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InitializationRoutine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWdsTransportContentProvider,
            pbsz_initialization_routine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbsz_name_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportContentProvider.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IWdsTransportContentProvider, @ptrCast(self)), pbsz_name_);
            }
            pub inline fn getDescription(self: *const T, pbsz_description_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportContentProvider.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IWdsTransportContentProvider, @ptrCast(self)), pbsz_description_);
            }
            pub inline fn getFilePath(self: *const T, pbsz_file_path_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportContentProvider.VTable, @ptrCast(self.vtable)).get_FilePath(@as(*const IWdsTransportContentProvider, @ptrCast(self)), pbsz_file_path_);
            }
            pub inline fn getInitializationRoutine(self: *const T, pbsz_initialization_routine_: ?*?BSTR) HRESULT {
                return @as(*const IWdsTransportContentProvider.VTable, @ptrCast(self.vtable)).get_InitializationRoutine(@as(*const IWdsTransportContentProvider, @ptrCast(self)), pbsz_initialization_routine_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (94)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliClose(
    handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliRegisterTrace(
    pfn: ?PFN_WdsCliTraceFunction,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wdsclientapi" fn WdsCliFreeStringArray(
    ppwsz_array: ?[*]?PWSTR,
    ul_count: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliFindFirstImage(
    h_session: ?HANDLE,
    ph_find_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliFindNextImage(
    handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetEnumerationFlags(
    handle: ?HANDLE,
    pdw_flags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageHandleFromFindHandle(
    find_handle: ?HANDLE,
    ph_image_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageHandleFromTransferHandle(
    h_transfer: ?HANDLE,
    ph_image_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliCreateSession(
    pwsz_server: ?PWSTR,
    p_cred: ?*WDS_CLI_CRED,
    ph_session: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliAuthorizeSession(
    h_session: ?HANDLE,
    p_cred: ?*WDS_CLI_CRED,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliInitializeLog(
    h_session: ?HANDLE,
    ul_client_architecture: CPU_ARCHITECTURE,
    pwsz_client_id: ?PWSTR,
    pwsz_client_address: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliLog(
    h_session: ?HANDLE,
    ul_log_level: u32,
    ul_message_code: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageName(
    h_ifh: ?HANDLE,
    ppwsz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageDescription(
    h_ifh: ?HANDLE,
    ppwsz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "wdsclientapi" fn WdsCliGetImageType(
    h_ifh: ?HANDLE,
    p_image_type: ?*WDS_CLI_IMAGE_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "wdsclientapi" fn WdsCliGetImageFiles(
    h_ifh: ?HANDLE,
    pppwsz_files: ?*?*?PWSTR,
    pdw_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageLanguage(
    h_ifh: ?HANDLE,
    ppwsz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageLanguages(
    h_ifh: ?HANDLE,
    pppsz_values: ?*?*?*i8,
    pdw_num_values: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageVersion(
    h_ifh: ?HANDLE,
    ppwsz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImagePath(
    h_ifh: ?HANDLE,
    ppwsz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageIndex(
    h_ifh: ?HANDLE,
    pdw_value: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageArchitecture(
    h_ifh: ?HANDLE,
    pdw_value: ?*CPU_ARCHITECTURE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageLastModifiedTime(
    h_ifh: ?HANDLE,
    pp_sys_time_value: ?*?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageSize(
    h_ifh: ?HANDLE,
    pull_value: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageHalName(
    h_ifh: ?HANDLE,
    ppwsz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageGroup(
    h_ifh: ?HANDLE,
    ppwsz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetImageNamespace(
    h_ifh: ?HANDLE,
    ppwsz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "wdsclientapi" fn WdsCliGetImageParameter(
    h_ifh: ?HANDLE,
    param_type: WDS_CLI_IMAGE_PARAM_TYPE,
    // TODO: what to do with BytesParamIndex 3?
    p_response: ?*anyopaque,
    u_response_len: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliGetTransferSize(
    h_ifh: ?HANDLE,
    pull_value: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "wdsclientapi" fn WdsCliSetTransferBufferSize(
    ul_size_in_bytes: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliTransferImage(
    h_image: ?HANDLE,
    pwsz_local_path: ?PWSTR,
    dw_flags: u32,
    dw_reserved: u32,
    pfn_wds_cli_callback: ?PFN_WdsCliCallback,
    pv_user_data: ?*anyopaque,
    ph_transfer: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliTransferFile(
    pwsz_server: ?[*:0]const u16,
    pwsz_namespace: ?[*:0]const u16,
    pwsz_remote_file_path: ?[*:0]const u16,
    pwsz_local_file_path: ?[*:0]const u16,
    dw_flags: u32,
    dw_reserved: u32,
    pfn_wds_cli_callback: ?PFN_WdsCliCallback,
    pv_user_data: ?*anyopaque,
    ph_transfer: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliCancelTransfer(
    h_transfer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsclientapi" fn WdsCliWaitForTransfer(
    h_transfer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wdsclientapi" fn WdsCliObtainDriverPackages(
    h_image: ?HANDLE,
    ppwsz_server_name: ?*?PWSTR,
    pppwsz_driver_packages: ?*?*?PWSTR,
    pul_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdsclientapi" fn WdsCliObtainDriverPackagesEx(
    h_session: ?HANDLE,
    pwsz_machine_info: ?PWSTR,
    ppwsz_server_name: ?*?PWSTR,
    pppwsz_driver_packages: ?*?*?PWSTR,
    pul_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdsclientapi" fn WdsCliGetDriverQueryXml(
    pwsz_win_dir_path: ?PWSTR,
    ppwsz_driver_query: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeProviderRegister(
    psz_provider_name: ?[*:0]const u16,
    psz_module_path: ?[*:0]const u16,
    index: u32,
    b_is_critical: BOOL,
    ph_provider_key: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeProviderUnRegister(
    psz_provider_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeProviderQueryIndex(
    psz_provider_name: ?[*:0]const u16,
    pu_index: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeProviderEnumFirst(
    ph_enum: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeProviderEnumNext(
    h_enum: ?HANDLE,
    pp_provider: ?*?*PXE_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeProviderEnumClose(
    h_enum: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeProviderFreeInfo(
    p_provider: ?*PXE_PROVIDER,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeRegisterCallback(
    h_provider: ?HANDLE,
    callback_type: u32,
    p_callback_function: ?*anyopaque,
    p_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeSendReply(
    h_client_request: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    p_packet: ?*anyopaque,
    u_packet_len: u32,
    p_address: ?*PXE_ADDRESS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeAsyncRecvDone(
    h_client_request: ?HANDLE,
    action: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeTrace(
    h_provider: ?HANDLE,
    severity: u32,
    psz_format: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wdspxe" fn PxeTraceV(
    h_provider: ?HANDLE,
    severity: u32,
    psz_format: ?[*:0]const u16,
    params: ?*i8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxePacketAllocate(
    h_provider: ?HANDLE,
    h_client_request: ?HANDLE,
    u_size: u32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxePacketFree(
    h_provider: ?HANDLE,
    h_client_request: ?HANDLE,
    p_packet: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeProviderSetAttribute(
    h_provider: ?HANDLE,
    attribute: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_parameter_buffer: ?*anyopaque,
    u_param_len: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeDhcpInitialize(
    // TODO: what to do with BytesParamIndex 1?
    p_recv_packet: ?*anyopaque,
    u_recv_packet_len: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_reply_packet: ?*anyopaque,
    u_max_reply_packet_len: u32,
    pu_reply_packet_len: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdspxe" fn PxeDhcpv6Initialize(
    // TODO: what to do with BytesParamIndex 1?
    p_request: ?*anyopaque,
    cb_request: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_reply: ?*anyopaque,
    cb_reply: u32,
    pcb_reply_used: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeDhcpAppendOption(
    // TODO: what to do with BytesParamIndex 1?
    p_reply_packet: ?*anyopaque,
    u_max_reply_packet_len: u32,
    pu_reply_packet_len: ?*u32,
    b_option: u8,
    b_option_len: u8,
    // TODO: what to do with BytesParamIndex 4?
    p_value: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdspxe" fn PxeDhcpv6AppendOption(
    // TODO: what to do with BytesParamIndex 1?
    p_reply: ?*anyopaque,
    cb_reply: u32,
    pcb_reply_used: ?*u32,
    w_option_type: u16,
    cb_option: u16,
    // TODO: what to do with BytesParamIndex 4?
    p_option: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeDhcpAppendOptionRaw(
    // TODO: what to do with BytesParamIndex 1?
    p_reply_packet: ?*anyopaque,
    u_max_reply_packet_len: u32,
    pu_reply_packet_len: ?*u32,
    u_buffer_len: u16,
    // TODO: what to do with BytesParamIndex 3?
    p_buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdspxe" fn PxeDhcpv6AppendOptionRaw(
    // TODO: what to do with BytesParamIndex 1?
    p_reply: ?*anyopaque,
    cb_reply: u32,
    pcb_reply_used: ?*u32,
    cb_buffer: u16,
    // TODO: what to do with BytesParamIndex 3?
    p_buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeDhcpIsValid(
    // TODO: what to do with BytesParamIndex 1?
    p_packet: ?*anyopaque,
    u_packet_len: u32,
    b_request_packet: BOOL,
    pb_pxe_option_present: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdspxe" fn PxeDhcpv6IsValid(
    // TODO: what to do with BytesParamIndex 1?
    p_packet: ?*anyopaque,
    u_packet_len: u32,
    b_request_packet: BOOL,
    pb_pxe_option_present: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeDhcpGetOptionValue(
    // TODO: what to do with BytesParamIndex 1?
    p_packet: ?*anyopaque,
    u_packet_len: u32,
    u_instance: u32,
    b_option: u8,
    pb_option_len: ?*u8,
    pp_option_value: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdspxe" fn PxeDhcpv6GetOptionValue(
    // TODO: what to do with BytesParamIndex 1?
    p_packet: ?*anyopaque,
    u_packet_len: u32,
    u_instance: u32,
    w_option: u16,
    pw_option_len: ?*u16,
    pp_option_value: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeDhcpGetVendorOptionValue(
    // TODO: what to do with BytesParamIndex 1?
    p_packet: ?*anyopaque,
    u_packet_len: u32,
    b_option: u8,
    u_instance: u32,
    pb_option_len: ?*u8,
    pp_option_value: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdspxe" fn PxeDhcpv6GetVendorOptionValue(
    // TODO: what to do with BytesParamIndex 1?
    p_packet: ?*anyopaque,
    u_packet_len: u32,
    dw_enterprise_number: u32,
    w_option: u16,
    u_instance: u32,
    pw_option_len: ?*u16,
    pp_option_value: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdspxe" fn PxeDhcpv6ParseRelayForw(
    // TODO: what to do with BytesParamIndex 1?
    p_relay_forw_packet: ?*anyopaque,
    u_relay_forw_packet_len: u32,
    p_relay_messages: [*]PXE_DHCPV6_NESTED_RELAY_MESSAGE,
    n_relay_messages: u32,
    pn_relay_messages: ?*u32,
    pp_inner_packet: ?*?*u8,
    pcb_inner_packet: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdspxe" fn PxeDhcpv6CreateRelayRepl(
    p_relay_messages: [*]PXE_DHCPV6_NESTED_RELAY_MESSAGE,
    n_relay_messages: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_inner_packet: ?*u8,
    cb_inner_packet: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_reply_buffer: ?*anyopaque,
    cb_reply_buffer: u32,
    pcb_reply_buffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdspxe" fn PxeGetServerInfo(
    u_info_type: u32,
    // TODO: what to do with BytesParamIndex 2?
    p_buffer: ?*anyopaque,
    u_buffer_len: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdspxe" fn PxeGetServerInfoEx(
    u_info_type: u32,
    // TODO: what to do with BytesParamIndex 2?
    p_buffer: ?*anyopaque,
    u_buffer_len: u32,
    pu_buffer_used: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdsmc" fn WdsTransportServerRegisterCallback(
    h_provider: ?HANDLE,
    callback_id: TRANSPORTPROVIDER_CALLBACK_ID,
    pfn_callback: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdsmc" fn WdsTransportServerCompleteRead(
    h_provider: ?HANDLE,
    ul_bytes_read: u32,
    pv_user_data: ?*anyopaque,
    h_read_result: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdsmc" fn WdsTransportServerTrace(
    h_provider: ?HANDLE,
    severity: u32,
    pwsz_format: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdsmc" fn WdsTransportServerTraceV(
    h_provider: ?HANDLE,
    severity: u32,
    pwsz_format: ?[*:0]const u16,
    params: ?*i8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdsmc" fn WdsTransportServerAllocateBuffer(
    h_provider: ?HANDLE,
    ul_buffer_size: u32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windowsServer2008'
pub extern "wdsmc" fn WdsTransportServerFreeBuffer(
    h_provider: ?HANDLE,
    pv_buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientInitialize() callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientInitializeSession(
    p_session_request: ?*WDS_TRANSPORTCLIENT_REQUEST,
    p_caller_data: ?*anyopaque,
    h_session_key: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientRegisterCallback(
    h_session_key: ?HANDLE,
    callback_id: TRANSPORTCLIENT_CALLBACK_ID,
    pfn_callback: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientStartSession(
    h_session_key: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientCompleteReceive(
    h_session_key: ?HANDLE,
    ul_size: u32,
    pull_offset: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientCancelSession(
    h_session_key: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wdstptc" fn WdsTransportClientCancelSessionEx(
    h_session_key: ?HANDLE,
    dw_error_code: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientWaitForCompletion(
    h_session_key: ?HANDLE,
    u_timeout: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientQueryStatus(
    h_session_key: ?HANDLE,
    pu_status: ?*u32,
    pu_error_code: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientCloseSession(
    h_session_key: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientAddRefBuffer(
    pv_buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientReleaseBuffer(
    pv_buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdstptc" fn WdsTransportClientShutdown() callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsbp" fn WdsBpParseInitialize(
    // TODO: what to do with BytesParamIndex 1?
    p_packet: ?*anyopaque,
    u_packet_len: u32,
    pb_packet_type: ?*u8,
    ph_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wdsbp" fn WdsBpParseInitializev6(
    // TODO: what to do with BytesParamIndex 1?
    p_packet: ?*anyopaque,
    u_packet_len: u32,
    pb_packet_type: ?*u8,
    ph_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsbp" fn WdsBpInitialize(
    b_packet_type: u8,
    ph_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsbp" fn WdsBpCloseHandle(
    h_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsbp" fn WdsBpQueryOption(
    h_handle: ?HANDLE,
    u_option: u32,
    u_value_len: u32,
    // TODO: what to do with BytesParamIndex 2?
    p_value: ?*anyopaque,
    pu_bytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsbp" fn WdsBpAddOption(
    h_handle: ?HANDLE,
    u_option: u32,
    u_value_len: u32,
    // TODO: what to do with BytesParamIndex 2?
    p_value: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wdsbp" fn WdsBpGetOptionBuffer(
    h_handle: ?HANDLE,
    u_buffer_len: u32,
    // TODO: what to do with BytesParamIndex 1?
    p_buffer: ?*anyopaque,
    pu_bytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (13)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HANDLE = @import("../foundation.zig").HANDLE;
const HKEY = @import("../system/registry.zig").HKEY;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const LPARAM = @import("../foundation.zig").LPARAM;
const PWSTR = @import("../foundation.zig").PWSTR;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const ULARGE_INTEGER = @import("../foundation.zig").ULARGE_INTEGER;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFN_WdsCliTraceFunction")) {
        _ = PFN_WdsCliTraceFunction;
    }
    if (@hasDecl(@This(), "PFN_WdsCliCallback")) {
        _ = PFN_WdsCliCallback;
    }
    if (@hasDecl(@This(), "PFN_WdsTransportClientSessionStart")) {
        _ = PFN_WdsTransportClientSessionStart;
    }
    if (@hasDecl(@This(), "PFN_WdsTransportClientSessionStartEx")) {
        _ = PFN_WdsTransportClientSessionStartEx;
    }
    if (@hasDecl(@This(), "PFN_WdsTransportClientReceiveMetadata")) {
        _ = PFN_WdsTransportClientReceiveMetadata;
    }
    if (@hasDecl(@This(), "PFN_WdsTransportClientReceiveContents")) {
        _ = PFN_WdsTransportClientReceiveContents;
    }
    if (@hasDecl(@This(), "PFN_WdsTransportClientSessionComplete")) {
        _ = PFN_WdsTransportClientSessionComplete;
    }
    if (@hasDecl(@This(), "PFN_WdsTransportClientSessionNegotiate")) {
        _ = PFN_WdsTransportClientSessionNegotiate;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
