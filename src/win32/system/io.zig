//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (3)
//--------------------------------------------------------------------------------
pub const OVERLAPPED = extern struct {
    Internal: usize,
    InternalHigh: usize,
    Anonymous: extern union {
        Anonymous: extern struct {
            Offset: u32,
            OffsetHigh: u32,
        },
        Pointer: ?*anyopaque,
    },
    hEvent: ?HANDLE,
};

pub const OVERLAPPED_ENTRY = extern struct {
    lpCompletionKey: usize,
    lpOverlapped: ?*OVERLAPPED,
    Internal: usize,
    dwNumberOfBytesTransferred: u32,
};

pub const LPOVERLAPPED_COMPLETION_ROUTINE = *const fn (
    dw_error_code: u32,
    dw_number_of_bytes_transfered: u32,
    lp_overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) void;

//--------------------------------------------------------------------------------
// Section: Functions (11)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn CreateIoCompletionPort(
    file_handle: ?HANDLE,
    existing_completion_port: ?HANDLE,
    completion_key: usize,
    number_of_concurrent_threads: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetQueuedCompletionStatus(
    completion_port: ?HANDLE,
    lp_number_of_bytes_transferred: ?*u32,
    lp_completion_key: ?*usize,
    lp_overlapped: ?*?*OVERLAPPED,
    dw_milliseconds: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn GetQueuedCompletionStatusEx(
    completion_port: ?HANDLE,
    lp_completion_port_entries: [*]OVERLAPPED_ENTRY,
    ul_count: u32,
    ul_num_entries_removed: ?*u32,
    dw_milliseconds: u32,
    f_alertable: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn PostQueuedCompletionStatus(
    completion_port: ?HANDLE,
    dw_number_of_bytes_transferred: u32,
    dw_completion_key: usize,
    lp_overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn DeviceIoControl(
    h_device: ?HANDLE,
    dw_io_control_code: u32,
    // TODO: what to do with BytesParamIndex 3?
    lp_in_buffer: ?*anyopaque,
    n_in_buffer_size: u32,
    // TODO: what to do with BytesParamIndex 5?
    lp_out_buffer: ?*anyopaque,
    n_out_buffer_size: u32,
    lp_bytes_returned: ?*u32,
    lp_overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetOverlappedResult(
    h_file: ?HANDLE,
    lp_overlapped: ?*OVERLAPPED,
    lp_number_of_bytes_transferred: ?*u32,
    b_wait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn CancelIoEx(
    h_file: ?HANDLE,
    lp_overlapped: ?*OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn CancelIo(
    h_file: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "kernel32" fn GetOverlappedResultEx(
    h_file: ?HANDLE,
    lp_overlapped: ?*OVERLAPPED,
    lp_number_of_bytes_transferred: ?*u32,
    dw_milliseconds: u32,
    b_alertable: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn CancelSynchronousIo(
    h_thread: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn BindIoCompletionCallback(
    file_handle: ?HANDLE,
    function: ?LPOVERLAPPED_COMPLETION_ROUTINE,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (2)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "LPOVERLAPPED_COMPLETION_ROUTINE")) {
        _ = LPOVERLAPPED_COMPLETION_ROUTINE;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
