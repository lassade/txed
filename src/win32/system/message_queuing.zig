//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (218)
//--------------------------------------------------------------------------------
pub const PRLT = @as(u32, 0);
pub const PRLE = @as(u32, 1);
pub const PRGT = @as(u32, 2);
pub const PRGE = @as(u32, 3);
pub const PREQ = @as(u32, 4);
pub const PRNE = @as(u32, 5);
pub const QUERY_SORTASCEND = @as(u32, 0);
pub const QUERY_SORTDESCEND = @as(u32, 1);
pub const MQ_MOVE_ACCESS = @as(u32, 4);
pub const MQ_ACTION_RECEIVE = @as(u32, 0);
pub const MQ_ACTION_PEEK_CURRENT = @as(u32, 2147483648);
pub const MQ_ACTION_PEEK_NEXT = @as(u32, 2147483649);
pub const MQ_LOOKUP_PEEK_CURRENT = @as(u32, 1073741840);
pub const MQ_LOOKUP_PEEK_NEXT = @as(u32, 1073741841);
pub const MQ_LOOKUP_PEEK_PREV = @as(u32, 1073741842);
pub const MQ_LOOKUP_PEEK_FIRST = @as(u32, 1073741844);
pub const MQ_LOOKUP_PEEK_LAST = @as(u32, 1073741848);
pub const MQ_LOOKUP_RECEIVE_CURRENT = @as(u32, 1073741856);
pub const MQ_LOOKUP_RECEIVE_NEXT = @as(u32, 1073741857);
pub const MQ_LOOKUP_RECEIVE_PREV = @as(u32, 1073741858);
pub const MQ_LOOKUP_RECEIVE_FIRST = @as(u32, 1073741860);
pub const MQ_LOOKUP_RECEIVE_LAST = @as(u32, 1073741864);
pub const MQ_LOOKUP_RECEIVE_ALLOW_PEEK = @as(u32, 1073742112);
pub const PROPID_M_BASE = @as(u32, 0);
pub const PROPID_M_CLASS = @as(u32, 1);
pub const PROPID_M_MSGID = @as(u32, 2);
pub const PROPID_M_CORRELATIONID = @as(u32, 3);
pub const PROPID_M_PRIORITY = @as(u32, 4);
pub const PROPID_M_DELIVERY = @as(u32, 5);
pub const PROPID_M_ACKNOWLEDGE = @as(u32, 6);
pub const PROPID_M_JOURNAL = @as(u32, 7);
pub const PROPID_M_APPSPECIFIC = @as(u32, 8);
pub const PROPID_M_BODY = @as(u32, 9);
pub const PROPID_M_BODY_SIZE = @as(u32, 10);
pub const PROPID_M_LABEL = @as(u32, 11);
pub const PROPID_M_LABEL_LEN = @as(u32, 12);
pub const PROPID_M_TIME_TO_REACH_QUEUE = @as(u32, 13);
pub const PROPID_M_TIME_TO_BE_RECEIVED = @as(u32, 14);
pub const PROPID_M_RESP_QUEUE = @as(u32, 15);
pub const PROPID_M_RESP_QUEUE_LEN = @as(u32, 16);
pub const PROPID_M_ADMIN_QUEUE = @as(u32, 17);
pub const PROPID_M_ADMIN_QUEUE_LEN = @as(u32, 18);
pub const PROPID_M_VERSION = @as(u32, 19);
pub const PROPID_M_SENDERID = @as(u32, 20);
pub const PROPID_M_SENDERID_LEN = @as(u32, 21);
pub const PROPID_M_SENDERID_TYPE = @as(u32, 22);
pub const PROPID_M_PRIV_LEVEL = @as(u32, 23);
pub const PROPID_M_AUTH_LEVEL = @as(u32, 24);
pub const PROPID_M_AUTHENTICATED = @as(u32, 25);
pub const PROPID_M_HASH_ALG = @as(u32, 26);
pub const PROPID_M_ENCRYPTION_ALG = @as(u32, 27);
pub const PROPID_M_SENDER_CERT = @as(u32, 28);
pub const PROPID_M_SENDER_CERT_LEN = @as(u32, 29);
pub const PROPID_M_SRC_MACHINE_ID = @as(u32, 30);
pub const PROPID_M_SENTTIME = @as(u32, 31);
pub const PROPID_M_ARRIVEDTIME = @as(u32, 32);
pub const PROPID_M_DEST_QUEUE = @as(u32, 33);
pub const PROPID_M_DEST_QUEUE_LEN = @as(u32, 34);
pub const PROPID_M_EXTENSION = @as(u32, 35);
pub const PROPID_M_EXTENSION_LEN = @as(u32, 36);
pub const PROPID_M_SECURITY_CONTEXT = @as(u32, 37);
pub const PROPID_M_CONNECTOR_TYPE = @as(u32, 38);
pub const PROPID_M_XACT_STATUS_QUEUE = @as(u32, 39);
pub const PROPID_M_XACT_STATUS_QUEUE_LEN = @as(u32, 40);
pub const PROPID_M_TRACE = @as(u32, 41);
pub const PROPID_M_BODY_TYPE = @as(u32, 42);
pub const PROPID_M_DEST_SYMM_KEY = @as(u32, 43);
pub const PROPID_M_DEST_SYMM_KEY_LEN = @as(u32, 44);
pub const PROPID_M_SIGNATURE = @as(u32, 45);
pub const PROPID_M_SIGNATURE_LEN = @as(u32, 46);
pub const PROPID_M_PROV_TYPE = @as(u32, 47);
pub const PROPID_M_PROV_NAME = @as(u32, 48);
pub const PROPID_M_PROV_NAME_LEN = @as(u32, 49);
pub const PROPID_M_FIRST_IN_XACT = @as(u32, 50);
pub const PROPID_M_LAST_IN_XACT = @as(u32, 51);
pub const PROPID_M_XACTID = @as(u32, 52);
pub const PROPID_M_AUTHENTICATED_EX = @as(u32, 53);
pub const PROPID_M_RESP_FORMAT_NAME = @as(u32, 54);
pub const PROPID_M_RESP_FORMAT_NAME_LEN = @as(u32, 55);
pub const PROPID_M_DEST_FORMAT_NAME = @as(u32, 58);
pub const PROPID_M_DEST_FORMAT_NAME_LEN = @as(u32, 59);
pub const PROPID_M_LOOKUPID = @as(u32, 60);
pub const PROPID_M_SOAP_ENVELOPE = @as(u32, 61);
pub const PROPID_M_SOAP_ENVELOPE_LEN = @as(u32, 62);
pub const PROPID_M_COMPOUND_MESSAGE = @as(u32, 63);
pub const PROPID_M_COMPOUND_MESSAGE_SIZE = @as(u32, 64);
pub const PROPID_M_SOAP_HEADER = @as(u32, 65);
pub const PROPID_M_SOAP_BODY = @as(u32, 66);
pub const PROPID_M_DEADLETTER_QUEUE = @as(u32, 67);
pub const PROPID_M_DEADLETTER_QUEUE_LEN = @as(u32, 68);
pub const PROPID_M_ABORT_COUNT = @as(u32, 69);
pub const PROPID_M_MOVE_COUNT = @as(u32, 70);
pub const PROPID_M_LAST_MOVE_TIME = @as(u32, 75);
pub const PROPID_M_MSGID_SIZE = @as(u32, 20);
pub const PROPID_M_CORRELATIONID_SIZE = @as(u32, 20);
pub const PROPID_M_XACTID_SIZE = @as(u32, 20);
pub const MQMSG_PRIV_LEVEL_BODY_AES = @as(u32, 5);
pub const MQMSG_AUTHENTICATED_QM_MESSAGE = @as(u32, 11);
pub const MQMSG_NOT_FIRST_IN_XACT = @as(u32, 0);
pub const MQMSG_FIRST_IN_XACT = @as(u32, 1);
pub const MQMSG_NOT_LAST_IN_XACT = @as(u32, 0);
pub const MQMSG_LAST_IN_XACT = @as(u32, 1);
pub const PROPID_Q_BASE = @as(u32, 100);
pub const PROPID_Q_INSTANCE = @as(u32, 101);
pub const PROPID_Q_TYPE = @as(u32, 102);
pub const PROPID_Q_PATHNAME = @as(u32, 103);
pub const PROPID_Q_JOURNAL = @as(u32, 104);
pub const PROPID_Q_QUOTA = @as(u32, 105);
pub const PROPID_Q_BASEPRIORITY = @as(u32, 106);
pub const PROPID_Q_JOURNAL_QUOTA = @as(u32, 107);
pub const PROPID_Q_LABEL = @as(u32, 108);
pub const PROPID_Q_CREATE_TIME = @as(u32, 109);
pub const PROPID_Q_MODIFY_TIME = @as(u32, 110);
pub const PROPID_Q_AUTHENTICATE = @as(u32, 111);
pub const PROPID_Q_PRIV_LEVEL = @as(u32, 112);
pub const PROPID_Q_TRANSACTION = @as(u32, 113);
pub const PROPID_Q_PATHNAME_DNS = @as(u32, 124);
pub const PROPID_Q_MULTICAST_ADDRESS = @as(u32, 125);
pub const PROPID_Q_ADS_PATH = @as(u32, 126);
pub const PROPID_QM_BASE = @as(u32, 200);
pub const PROPID_QM_SITE_ID = @as(u32, 201);
pub const PROPID_QM_MACHINE_ID = @as(u32, 202);
pub const PROPID_QM_PATHNAME = @as(u32, 203);
pub const PROPID_QM_CONNECTION = @as(u32, 204);
pub const PROPID_QM_ENCRYPTION_PK = @as(u32, 205);
pub const PROPID_QM_ENCRYPTION_PK_BASE = @as(u32, 231);
pub const PROPID_QM_ENCRYPTION_PK_ENHANCED = @as(u32, 232);
pub const PROPID_QM_PATHNAME_DNS = @as(u32, 233);
pub const PROPID_QM_ENCRYPTION_PK_AES = @as(u32, 244);
pub const PROPID_PC_BASE = @as(u32, 5800);
pub const PROPID_PC_VERSION = @as(u32, 5801);
pub const PROPID_PC_DS_ENABLED = @as(u32, 5802);
pub const PROPID_MGMT_MSMQ_BASE = @as(u32, 0);
pub const PROPID_MGMT_MSMQ_ACTIVEQUEUES = @as(u32, 1);
pub const PROPID_MGMT_MSMQ_PRIVATEQ = @as(u32, 2);
pub const PROPID_MGMT_MSMQ_DSSERVER = @as(u32, 3);
pub const PROPID_MGMT_MSMQ_CONNECTED = @as(u32, 4);
pub const PROPID_MGMT_MSMQ_TYPE = @as(u32, 5);
pub const PROPID_MGMT_MSMQ_BYTES_IN_ALL_QUEUES = @as(u32, 6);
pub const MSMQ_CONNECTED = "CONNECTED";
pub const MSMQ_DISCONNECTED = "DISCONNECTED";
pub const PROPID_MGMT_QUEUE_BASE = @as(u32, 0);
pub const PROPID_MGMT_QUEUE_PATHNAME = @as(u32, 1);
pub const PROPID_MGMT_QUEUE_FORMATNAME = @as(u32, 2);
pub const PROPID_MGMT_QUEUE_TYPE = @as(u32, 3);
pub const PROPID_MGMT_QUEUE_LOCATION = @as(u32, 4);
pub const PROPID_MGMT_QUEUE_XACT = @as(u32, 5);
pub const PROPID_MGMT_QUEUE_FOREIGN = @as(u32, 6);
pub const PROPID_MGMT_QUEUE_MESSAGE_COUNT = @as(u32, 7);
pub const PROPID_MGMT_QUEUE_BYTES_IN_QUEUE = @as(u32, 8);
pub const PROPID_MGMT_QUEUE_JOURNAL_MESSAGE_COUNT = @as(u32, 9);
pub const PROPID_MGMT_QUEUE_BYTES_IN_JOURNAL = @as(u32, 10);
pub const PROPID_MGMT_QUEUE_STATE = @as(u32, 11);
pub const PROPID_MGMT_QUEUE_NEXTHOPS = @as(u32, 12);
pub const PROPID_MGMT_QUEUE_EOD_LAST_ACK = @as(u32, 13);
pub const PROPID_MGMT_QUEUE_EOD_LAST_ACK_TIME = @as(u32, 14);
pub const PROPID_MGMT_QUEUE_EOD_LAST_ACK_COUNT = @as(u32, 15);
pub const PROPID_MGMT_QUEUE_EOD_FIRST_NON_ACK = @as(u32, 16);
pub const PROPID_MGMT_QUEUE_EOD_LAST_NON_ACK = @as(u32, 17);
pub const PROPID_MGMT_QUEUE_EOD_NEXT_SEQ = @as(u32, 18);
pub const PROPID_MGMT_QUEUE_EOD_NO_READ_COUNT = @as(u32, 19);
pub const PROPID_MGMT_QUEUE_EOD_NO_ACK_COUNT = @as(u32, 20);
pub const PROPID_MGMT_QUEUE_EOD_RESEND_TIME = @as(u32, 21);
pub const PROPID_MGMT_QUEUE_EOD_RESEND_INTERVAL = @as(u32, 22);
pub const PROPID_MGMT_QUEUE_EOD_RESEND_COUNT = @as(u32, 23);
pub const PROPID_MGMT_QUEUE_EOD_SOURCE_INFO = @as(u32, 24);
pub const PROPID_MGMT_QUEUE_CONNECTION_HISTORY = @as(u32, 25);
pub const PROPID_MGMT_QUEUE_SUBQUEUE_COUNT = @as(u32, 26);
pub const PROPID_MGMT_QUEUE_SUBQUEUE_NAMES = @as(u32, 27);
pub const PROPID_MGMT_QUEUE_USED_QUOTA = @as(u32, 8);
pub const PROPID_MGMT_QUEUE_JOURNAL_USED_QUOTA = @as(u32, 10);
pub const MGMT_QUEUE_TYPE_PUBLIC = "PUBLIC";
pub const MGMT_QUEUE_TYPE_PRIVATE = "PRIVATE";
pub const MGMT_QUEUE_TYPE_MACHINE = "MACHINE";
pub const MGMT_QUEUE_TYPE_CONNECTOR = "CONNECTOR";
pub const MGMT_QUEUE_TYPE_MULTICAST = "MULTICAST";
pub const MGMT_QUEUE_STATE_LOCAL = "LOCAL CONNECTION";
pub const MGMT_QUEUE_STATE_NONACTIVE = "INACTIVE";
pub const MGMT_QUEUE_STATE_WAITING = "WAITING";
pub const MGMT_QUEUE_STATE_NEED_VALIDATE = "NEED VALIDATION";
pub const MGMT_QUEUE_STATE_ONHOLD = "ONHOLD";
pub const MGMT_QUEUE_STATE_CONNECTED = "CONNECTED";
pub const MGMT_QUEUE_STATE_DISCONNECTING = "DISCONNECTING";
pub const MGMT_QUEUE_STATE_DISCONNECTED = "DISCONNECTED";
pub const MGMT_QUEUE_STATE_LOCKED = "LOCKED";
pub const MGMT_QUEUE_LOCAL_LOCATION = "LOCAL";
pub const MGMT_QUEUE_REMOTE_LOCATION = "REMOTE";
pub const MGMT_QUEUE_UNKNOWN_TYPE = "UNKNOWN";
pub const MGMT_QUEUE_CORRECT_TYPE = "YES";
pub const MGMT_QUEUE_INCORRECT_TYPE = "NO";
pub const MGMT_QUEUE_TRANSACTIONAL_TYPE = "YES";
pub const MGMT_QUEUE_NOT_TRANSACTIONAL_TYPE = "NO";
pub const MGMT_QUEUE_FOREIGN_TYPE = "YES";
pub const MGMT_QUEUE_NOT_FOREIGN_TYPE = "NO";
pub const MO_MACHINE_TOKEN = "MACHINE";
pub const MO_QUEUE_TOKEN = "QUEUE";
pub const MACHINE_ACTION_CONNECT = "CONNECT";
pub const MACHINE_ACTION_DISCONNECT = "DISCONNECT";
pub const MACHINE_ACTION_TIDY = "TIDY";
pub const QUEUE_ACTION_PAUSE = "PAUSE";
pub const QUEUE_ACTION_RESUME = "RESUME";
pub const QUEUE_ACTION_EOD_RESEND = "EOD_RESEND";
pub const LONG_LIVED = @as(u32, 4294967294);
pub const MQSEC_DELETE_MESSAGE = @as(u32, 1);
pub const MQSEC_PEEK_MESSAGE = @as(u32, 2);
pub const MQSEC_WRITE_MESSAGE = @as(u32, 4);
pub const MQSEC_DELETE_JOURNAL_MESSAGE = @as(u32, 8);
pub const MQSEC_SET_QUEUE_PROPERTIES = @as(u32, 16);
pub const MQSEC_GET_QUEUE_PROPERTIES = @as(u32, 32);
pub const MQSEC_DELETE_QUEUE = @as(u32, 65536);
pub const MQSEC_CHANGE_QUEUE_PERMISSIONS = @as(u32, 262144);
pub const MQSEC_TAKE_QUEUE_OWNERSHIP = @as(u32, 524288);
pub const MQSEC_QUEUE_GENERIC_EXECUTE = @as(u32, 0);
pub const MQ_OK = @import("../zig.zig").typedConst(HRESULT, @as(i32, 0));
pub const MQ_ERROR_RESOLVE_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072824167));
pub const MQ_ERROR_TOO_MANY_PROPERTIES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072824166));
pub const MQ_ERROR_MESSAGE_NOT_AUTHENTICATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072824165));
pub const MQ_ERROR_MESSAGE_LOCKED_UNDER_TRANSACTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1072824164));

//--------------------------------------------------------------------------------
// Section: Types (89)
//--------------------------------------------------------------------------------
const CLSID_MSMQQuery_Value = Guid.initString("d7d6e073-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQQuery = &CLSID_MSMQQuery_Value;

const CLSID_MSMQMessage_Value = Guid.initString("d7d6e075-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQMessage = &CLSID_MSMQMessage_Value;

const CLSID_MSMQQueue_Value = Guid.initString("d7d6e079-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQQueue = &CLSID_MSMQQueue_Value;

const CLSID_MSMQEvent_Value = Guid.initString("d7d6e07a-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQEvent = &CLSID_MSMQEvent_Value;

const CLSID_MSMQQueueInfo_Value = Guid.initString("d7d6e07c-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQQueueInfo = &CLSID_MSMQQueueInfo_Value;

const CLSID_MSMQQueueInfos_Value = Guid.initString("d7d6e07e-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQQueueInfos = &CLSID_MSMQQueueInfos_Value;

const CLSID_MSMQTransaction_Value = Guid.initString("d7d6e080-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQTransaction = &CLSID_MSMQTransaction_Value;

const CLSID_MSMQCoordinatedTransactionDispenser_Value = Guid.initString("d7d6e082-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQCoordinatedTransactionDispenser = &CLSID_MSMQCoordinatedTransactionDispenser_Value;

const CLSID_MSMQTransactionDispenser_Value = Guid.initString("d7d6e084-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQTransactionDispenser = &CLSID_MSMQTransactionDispenser_Value;

const CLSID_MSMQApplication_Value = Guid.initString("d7d6e086-dccd-11d0-aa4b-0060970debae");
pub const CLSID_MSMQApplication = &CLSID_MSMQApplication_Value;

const CLSID_MSMQDestination_Value = Guid.initString("eba96b18-2168-11d3-898c-00e02c074f6b");
pub const CLSID_MSMQDestination = &CLSID_MSMQDestination_Value;

const CLSID_MSMQCollection_Value = Guid.initString("f72b9031-2f0c-43e8-924e-e6052cdc493f");
pub const CLSID_MSMQCollection = &CLSID_MSMQCollection_Value;

const CLSID_MSMQManagement_Value = Guid.initString("39ce96fe-f4c5-4484-a143-4c2d5d324229");
pub const CLSID_MSMQManagement = &CLSID_MSMQManagement_Value;

const CLSID_MSMQOutgoingQueueManagement_Value = Guid.initString("0188401c-247a-4fed-99c6-bf14119d7055");
pub const CLSID_MSMQOutgoingQueueManagement = &CLSID_MSMQOutgoingQueueManagement_Value;

const CLSID_MSMQQueueManagement_Value = Guid.initString("33b6d07e-f27d-42fa-b2d7-bf82e11e9374");
pub const CLSID_MSMQQueueManagement = &CLSID_MSMQQueueManagement_Value;

pub const MQCALG = enum(i32) {
    MD2 = 32769,
    MD4 = 32770,
    MD5 = 32771,
    SHA = 32772,
    // SHA1 = 32772, this enum value conflicts with SHA
    MAC = 32773,
    RSA_SIGN = 9216,
    DSS_SIGN = 8704,
    RSA_KEYX = 41984,
    DES = 26113,
    RC2 = 26114,
    RC4 = 26625,
    SEAL = 26626,
};
pub const MQMSG_CALG_MD2 = MQCALG.MD2;
pub const MQMSG_CALG_MD4 = MQCALG.MD4;
pub const MQMSG_CALG_MD5 = MQCALG.MD5;
pub const MQMSG_CALG_SHA = MQCALG.SHA;
pub const MQMSG_CALG_SHA1 = MQCALG.SHA;
pub const MQMSG_CALG_MAC = MQCALG.MAC;
pub const MQMSG_CALG_RSA_SIGN = MQCALG.RSA_SIGN;
pub const MQMSG_CALG_DSS_SIGN = MQCALG.DSS_SIGN;
pub const MQMSG_CALG_RSA_KEYX = MQCALG.RSA_KEYX;
pub const MQMSG_CALG_DES = MQCALG.DES;
pub const MQMSG_CALG_RC2 = MQCALG.RC2;
pub const MQMSG_CALG_RC4 = MQCALG.RC4;
pub const MQMSG_CALG_SEAL = MQCALG.SEAL;

pub const MQTRANSACTION = enum(i32) {
    NO_TRANSACTION = 0,
    MTS_TRANSACTION = 1,
    XA_TRANSACTION = 2,
    SINGLE_MESSAGE = 3,
};
pub const MQ_NO_TRANSACTION = MQTRANSACTION.NO_TRANSACTION;
pub const MQ_MTS_TRANSACTION = MQTRANSACTION.MTS_TRANSACTION;
pub const MQ_XA_TRANSACTION = MQTRANSACTION.XA_TRANSACTION;
pub const MQ_SINGLE_MESSAGE = MQTRANSACTION.SINGLE_MESSAGE;

pub const RELOPS = enum(i32) {
    NOP = 0,
    EQ = 1,
    NEQ = 2,
    LT = 3,
    GT = 4,
    LE = 5,
    GE = 6,
};
pub const REL_NOP = RELOPS.NOP;
pub const REL_EQ = RELOPS.EQ;
pub const REL_NEQ = RELOPS.NEQ;
pub const REL_LT = RELOPS.LT;
pub const REL_GT = RELOPS.GT;
pub const REL_LE = RELOPS.LE;
pub const REL_GE = RELOPS.GE;

pub const MQCERT_REGISTER = enum(i32) {
    ALWAYS = 1,
    IF_NOT_EXIST = 2,
};
pub const MQCERT_REGISTER_ALWAYS = MQCERT_REGISTER.ALWAYS;
pub const MQCERT_REGISTER_IF_NOT_EXIST = MQCERT_REGISTER.IF_NOT_EXIST;

pub const MQMSGCURSOR = enum(i32) {
    FIRST = 0,
    CURRENT = 1,
    NEXT = 2,
};
pub const MQMSG_FIRST = MQMSGCURSOR.FIRST;
pub const MQMSG_CURRENT = MQMSGCURSOR.CURRENT;
pub const MQMSG_NEXT = MQMSGCURSOR.NEXT;

pub const MQMSGCLASS = enum(i32) {
    NORMAL = 0,
    REPORT = 1,
    ACK_REACH_QUEUE = 2,
    ACK_RECEIVE = 16384,
    NACK_BAD_DST_Q = 32768,
    NACK_PURGED = 32769,
    NACK_REACH_QUEUE_TIMEOUT = 32770,
    NACK_Q_EXCEED_QUOTA = 32771,
    NACK_ACCESS_DENIED = 32772,
    NACK_HOP_COUNT_EXCEEDED = 32773,
    NACK_BAD_SIGNATURE = 32774,
    NACK_BAD_ENCRYPTION = 32775,
    NACK_COULD_NOT_ENCRYPT = 32776,
    NACK_NOT_TRANSACTIONAL_Q = 32777,
    NACK_NOT_TRANSACTIONAL_MSG = 32778,
    NACK_UNSUPPORTED_CRYPTO_PROVIDER = 32779,
    NACK_SOURCE_COMPUTER_GUID_CHANGED = 32780,
    NACK_Q_DELETED = 49152,
    NACK_Q_PURGED = 49153,
    NACK_RECEIVE_TIMEOUT = 49154,
    NACK_RECEIVE_TIMEOUT_AT_SENDER = 49155,
};
pub const MQMSG_CLASS_NORMAL = MQMSGCLASS.NORMAL;
pub const MQMSG_CLASS_REPORT = MQMSGCLASS.REPORT;
pub const MQMSG_CLASS_ACK_REACH_QUEUE = MQMSGCLASS.ACK_REACH_QUEUE;
pub const MQMSG_CLASS_ACK_RECEIVE = MQMSGCLASS.ACK_RECEIVE;
pub const MQMSG_CLASS_NACK_BAD_DST_Q = MQMSGCLASS.NACK_BAD_DST_Q;
pub const MQMSG_CLASS_NACK_PURGED = MQMSGCLASS.NACK_PURGED;
pub const MQMSG_CLASS_NACK_REACH_QUEUE_TIMEOUT = MQMSGCLASS.NACK_REACH_QUEUE_TIMEOUT;
pub const MQMSG_CLASS_NACK_Q_EXCEED_QUOTA = MQMSGCLASS.NACK_Q_EXCEED_QUOTA;
pub const MQMSG_CLASS_NACK_ACCESS_DENIED = MQMSGCLASS.NACK_ACCESS_DENIED;
pub const MQMSG_CLASS_NACK_HOP_COUNT_EXCEEDED = MQMSGCLASS.NACK_HOP_COUNT_EXCEEDED;
pub const MQMSG_CLASS_NACK_BAD_SIGNATURE = MQMSGCLASS.NACK_BAD_SIGNATURE;
pub const MQMSG_CLASS_NACK_BAD_ENCRYPTION = MQMSGCLASS.NACK_BAD_ENCRYPTION;
pub const MQMSG_CLASS_NACK_COULD_NOT_ENCRYPT = MQMSGCLASS.NACK_COULD_NOT_ENCRYPT;
pub const MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_Q = MQMSGCLASS.NACK_NOT_TRANSACTIONAL_Q;
pub const MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_MSG = MQMSGCLASS.NACK_NOT_TRANSACTIONAL_MSG;
pub const MQMSG_CLASS_NACK_UNSUPPORTED_CRYPTO_PROVIDER = MQMSGCLASS.NACK_UNSUPPORTED_CRYPTO_PROVIDER;
pub const MQMSG_CLASS_NACK_SOURCE_COMPUTER_GUID_CHANGED = MQMSGCLASS.NACK_SOURCE_COMPUTER_GUID_CHANGED;
pub const MQMSG_CLASS_NACK_Q_DELETED = MQMSGCLASS.NACK_Q_DELETED;
pub const MQMSG_CLASS_NACK_Q_PURGED = MQMSGCLASS.NACK_Q_PURGED;
pub const MQMSG_CLASS_NACK_RECEIVE_TIMEOUT = MQMSGCLASS.NACK_RECEIVE_TIMEOUT;
pub const MQMSG_CLASS_NACK_RECEIVE_TIMEOUT_AT_SENDER = MQMSGCLASS.NACK_RECEIVE_TIMEOUT_AT_SENDER;

pub const MQMSGDELIVERY = enum(i32) {
    EXPRESS = 0,
    RECOVERABLE = 1,
};
pub const MQMSG_DELIVERY_EXPRESS = MQMSGDELIVERY.EXPRESS;
pub const MQMSG_DELIVERY_RECOVERABLE = MQMSGDELIVERY.RECOVERABLE;

pub const MQMSGACKNOWLEDGEMENT = enum(i32) {
    NONE = 0,
    POS_ARRIVAL = 1,
    POS_RECEIVE = 2,
    NEG_ARRIVAL = 4,
    NEG_RECEIVE = 8,
    // NACK_REACH_QUEUE = 4, this enum value conflicts with NEG_ARRIVAL
    FULL_REACH_QUEUE = 5,
    NACK_RECEIVE = 12,
    FULL_RECEIVE = 14,
};
pub const MQMSG_ACKNOWLEDGMENT_NONE = MQMSGACKNOWLEDGEMENT.NONE;
pub const MQMSG_ACKNOWLEDGMENT_POS_ARRIVAL = MQMSGACKNOWLEDGEMENT.POS_ARRIVAL;
pub const MQMSG_ACKNOWLEDGMENT_POS_RECEIVE = MQMSGACKNOWLEDGEMENT.POS_RECEIVE;
pub const MQMSG_ACKNOWLEDGMENT_NEG_ARRIVAL = MQMSGACKNOWLEDGEMENT.NEG_ARRIVAL;
pub const MQMSG_ACKNOWLEDGMENT_NEG_RECEIVE = MQMSGACKNOWLEDGEMENT.NEG_RECEIVE;
pub const MQMSG_ACKNOWLEDGMENT_NACK_REACH_QUEUE = MQMSGACKNOWLEDGEMENT.NEG_ARRIVAL;
pub const MQMSG_ACKNOWLEDGMENT_FULL_REACH_QUEUE = MQMSGACKNOWLEDGEMENT.FULL_REACH_QUEUE;
pub const MQMSG_ACKNOWLEDGMENT_NACK_RECEIVE = MQMSGACKNOWLEDGEMENT.NACK_RECEIVE;
pub const MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE = MQMSGACKNOWLEDGEMENT.FULL_RECEIVE;

pub const MQMSGJOURNAL = enum(i32) {
    JOURNAL_NONE = 0,
    DEADLETTER = 1,
    JOURNAL = 2,
};
pub const MQMSG_JOURNAL_NONE = MQMSGJOURNAL.JOURNAL_NONE;
pub const MQMSG_DEADLETTER = MQMSGJOURNAL.DEADLETTER;
pub const MQMSG_JOURNAL = MQMSGJOURNAL.JOURNAL;

pub const MQMSGTRACE = enum(i32) {
    TRACE_NONE = 0,
    SEND_ROUTE_TO_REPORT_QUEUE = 1,
};
pub const MQMSG_TRACE_NONE = MQMSGTRACE.TRACE_NONE;
pub const MQMSG_SEND_ROUTE_TO_REPORT_QUEUE = MQMSGTRACE.SEND_ROUTE_TO_REPORT_QUEUE;

pub const MQMSGSENDERIDTYPE = enum(i32) {
    NONE = 0,
    SID = 1,
};
pub const MQMSG_SENDERID_TYPE_NONE = MQMSGSENDERIDTYPE.NONE;
pub const MQMSG_SENDERID_TYPE_SID = MQMSGSENDERIDTYPE.SID;

pub const MQMSGPRIVLEVEL = enum(i32) {
    NONE = 0,
    BODY_BASE = 1,
    BODY_ENHANCED = 3,
};
pub const MQMSG_PRIV_LEVEL_NONE = MQMSGPRIVLEVEL.NONE;
pub const MQMSG_PRIV_LEVEL_BODY_BASE = MQMSGPRIVLEVEL.BODY_BASE;
pub const MQMSG_PRIV_LEVEL_BODY_ENHANCED = MQMSGPRIVLEVEL.BODY_ENHANCED;

pub const MQMSGAUTHLEVEL = enum(i32) {
    NONE = 0,
    ALWAYS = 1,
    MSMQ10 = 2,
    // SIG10 = 2, this enum value conflicts with MSMQ10
    MSMQ20 = 4,
    // SIG20 = 4, this enum value conflicts with MSMQ20
    SIG30 = 8,
};
pub const MQMSG_AUTH_LEVEL_NONE = MQMSGAUTHLEVEL.NONE;
pub const MQMSG_AUTH_LEVEL_ALWAYS = MQMSGAUTHLEVEL.ALWAYS;
pub const MQMSG_AUTH_LEVEL_MSMQ10 = MQMSGAUTHLEVEL.MSMQ10;
pub const MQMSG_AUTH_LEVEL_SIG10 = MQMSGAUTHLEVEL.MSMQ10;
pub const MQMSG_AUTH_LEVEL_MSMQ20 = MQMSGAUTHLEVEL.MSMQ20;
pub const MQMSG_AUTH_LEVEL_SIG20 = MQMSGAUTHLEVEL.MSMQ20;
pub const MQMSG_AUTH_LEVEL_SIG30 = MQMSGAUTHLEVEL.SIG30;

pub const MQMSGIDSIZE = enum(i32) {
    MSGID_SIZE = 20,
    // CORRELATIONID_SIZE = 20, this enum value conflicts with MSGID_SIZE
    // XACTID_SIZE = 20, this enum value conflicts with MSGID_SIZE
};
pub const MQMSG_MSGID_SIZE = MQMSGIDSIZE.MSGID_SIZE;
pub const MQMSG_CORRELATIONID_SIZE = MQMSGIDSIZE.MSGID_SIZE;
pub const MQMSG_XACTID_SIZE = MQMSGIDSIZE.MSGID_SIZE;

pub const MQMSGMAX = enum(i32) {
    N = 249,
};
pub const MQ_MAX_MSG_LABEL_LEN = MQMSGMAX.N;

pub const MQMSGAUTHENTICATION = enum(i32) {
    ION_NOT_REQUESTED = 0,
    ION_REQUESTED = 1,
    // ED_SIG10 = 1, this enum value conflicts with ION_REQUESTED
    ION_REQUESTED_EX = 3,
    // ED_SIG20 = 3, this enum value conflicts with ION_REQUESTED_EX
    ED_SIG30 = 5,
    ED_SIGXML = 9,
};
pub const MQMSG_AUTHENTICATION_NOT_REQUESTED = MQMSGAUTHENTICATION.ION_NOT_REQUESTED;
pub const MQMSG_AUTHENTICATION_REQUESTED = MQMSGAUTHENTICATION.ION_REQUESTED;
pub const MQMSG_AUTHENTICATED_SIG10 = MQMSGAUTHENTICATION.ION_REQUESTED;
pub const MQMSG_AUTHENTICATION_REQUESTED_EX = MQMSGAUTHENTICATION.ION_REQUESTED_EX;
pub const MQMSG_AUTHENTICATED_SIG20 = MQMSGAUTHENTICATION.ION_REQUESTED_EX;
pub const MQMSG_AUTHENTICATED_SIG30 = MQMSGAUTHENTICATION.ED_SIG30;
pub const MQMSG_AUTHENTICATED_SIGXML = MQMSGAUTHENTICATION.ED_SIGXML;

pub const MQSHARE = enum(i32) {
    NONE = 0,
    RECEIVE_SHARE = 1,
};
pub const MQ_DENY_NONE = MQSHARE.NONE;
pub const MQ_DENY_RECEIVE_SHARE = MQSHARE.RECEIVE_SHARE;

pub const MQACCESS = enum(i32) {
    RECEIVE_ACCESS = 1,
    SEND_ACCESS = 2,
    PEEK_ACCESS = 32,
    ADMIN_ACCESS = 128,
};
pub const MQ_RECEIVE_ACCESS = MQACCESS.RECEIVE_ACCESS;
pub const MQ_SEND_ACCESS = MQACCESS.SEND_ACCESS;
pub const MQ_PEEK_ACCESS = MQACCESS.PEEK_ACCESS;
pub const MQ_ADMIN_ACCESS = MQACCESS.ADMIN_ACCESS;

pub const MQJOURNAL = enum(i32) {
    _NONE = 0,
    L = 1,
};
pub const MQ_JOURNAL_NONE = MQJOURNAL._NONE;
pub const MQ_JOURNAL = MQJOURNAL.L;

pub const MQTRANSACTIONAL = enum(i32) {
    _NONE = 0,
    L = 1,
};
pub const MQ_TRANSACTIONAL_NONE = MQTRANSACTIONAL._NONE;
pub const MQ_TRANSACTIONAL = MQTRANSACTIONAL.L;

pub const MQAUTHENTICATE = enum(i32) {
    _NONE = 0,
    E = 1,
};
pub const MQ_AUTHENTICATE_NONE = MQAUTHENTICATE._NONE;
pub const MQ_AUTHENTICATE = MQAUTHENTICATE.E;

pub const MQPRIVLEVEL = enum(i32) {
    NONE = 0,
    OPTIONAL = 1,
    BODY = 2,
};
pub const MQ_PRIV_LEVEL_NONE = MQPRIVLEVEL.NONE;
pub const MQ_PRIV_LEVEL_OPTIONAL = MQPRIVLEVEL.OPTIONAL;
pub const MQ_PRIV_LEVEL_BODY = MQPRIVLEVEL.BODY;

pub const MQPRIORITY = enum(i32) {
    IN_PRIORITY = 0,
    AX_PRIORITY = 7,
};
pub const MQ_MIN_PRIORITY = MQPRIORITY.IN_PRIORITY;
pub const MQ_MAX_PRIORITY = MQPRIORITY.AX_PRIORITY;

pub const MQMAX = enum(i32) {
    NAME_LEN = 124,
    // LABEL_LEN = 124, this enum value conflicts with NAME_LEN
};
pub const MQ_MAX_Q_NAME_LEN = MQMAX.NAME_LEN;
pub const MQ_MAX_Q_LABEL_LEN = MQMAX.NAME_LEN;

pub const QUEUE_TYPE = enum(i32) {
    PUBLIC = 0,
    PRIVATE = 1,
    MACHINE = 2,
    CONNECTOR = 3,
    MULTICAST = 4,
};
pub const MQ_TYPE_PUBLIC = QUEUE_TYPE.PUBLIC;
pub const MQ_TYPE_PRIVATE = QUEUE_TYPE.PRIVATE;
pub const MQ_TYPE_MACHINE = QUEUE_TYPE.MACHINE;
pub const MQ_TYPE_CONNECTOR = QUEUE_TYPE.CONNECTOR;
pub const MQ_TYPE_MULTICAST = QUEUE_TYPE.MULTICAST;

pub const FOREIGN_STATUS = enum(i32) {
    FOREIGN = 0,
    NOT_FOREIGN = 1,
    UNKNOWN = 2,
};
pub const MQ_STATUS_FOREIGN = FOREIGN_STATUS.FOREIGN;
pub const MQ_STATUS_NOT_FOREIGN = FOREIGN_STATUS.NOT_FOREIGN;
pub const MQ_STATUS_UNKNOWN = FOREIGN_STATUS.UNKNOWN;

pub const XACT_STATUS = enum(i32) {
    XACT = 0,
    NOT_XACT = 1,
    UNKNOWN = 2,
};
pub const MQ_XACT_STATUS_XACT = XACT_STATUS.XACT;
pub const MQ_XACT_STATUS_NOT_XACT = XACT_STATUS.NOT_XACT;
pub const MQ_XACT_STATUS_UNKNOWN = XACT_STATUS.UNKNOWN;

pub const QUEUE_STATE = enum(i32) {
    LOCAL_CONNECTION = 0,
    DISCONNECTED = 1,
    WAITING = 2,
    NEEDVALIDATE = 3,
    ONHOLD = 4,
    NONACTIVE = 5,
    CONNECTED = 6,
    DISCONNECTING = 7,
    LOCKED = 8,
};
pub const MQ_QUEUE_STATE_LOCAL_CONNECTION = QUEUE_STATE.LOCAL_CONNECTION;
pub const MQ_QUEUE_STATE_DISCONNECTED = QUEUE_STATE.DISCONNECTED;
pub const MQ_QUEUE_STATE_WAITING = QUEUE_STATE.WAITING;
pub const MQ_QUEUE_STATE_NEEDVALIDATE = QUEUE_STATE.NEEDVALIDATE;
pub const MQ_QUEUE_STATE_ONHOLD = QUEUE_STATE.ONHOLD;
pub const MQ_QUEUE_STATE_NONACTIVE = QUEUE_STATE.NONACTIVE;
pub const MQ_QUEUE_STATE_CONNECTED = QUEUE_STATE.CONNECTED;
pub const MQ_QUEUE_STATE_DISCONNECTING = QUEUE_STATE.DISCONNECTING;
pub const MQ_QUEUE_STATE_LOCKED = QUEUE_STATE.LOCKED;

pub const MQDEFAULT = enum(i32) {
    M_PRIORITY = 3,
    M_DELIVERY = 0,
    // M_ACKNOWLEDGE = 0, this enum value conflicts with M_DELIVERY
    // M_JOURNAL = 0, this enum value conflicts with M_DELIVERY
    // M_APPSPECIFIC = 0, this enum value conflicts with M_DELIVERY
    // M_PRIV_LEVEL = 0, this enum value conflicts with M_DELIVERY
    // M_AUTH_LEVEL = 0, this enum value conflicts with M_DELIVERY
    M_SENDERID_TYPE = 1,
    // Q_JOURNAL = 0, this enum value conflicts with M_DELIVERY
    // Q_BASEPRIORITY = 0, this enum value conflicts with M_DELIVERY
    Q_QUOTA = -1,
    // Q_JOURNAL_QUOTA = -1, this enum value conflicts with Q_QUOTA
    // Q_TRANSACTION = 0, this enum value conflicts with M_DELIVERY
    // Q_AUTHENTICATE = 0, this enum value conflicts with M_DELIVERY
    // Q_PRIV_LEVEL = 1, this enum value conflicts with M_SENDERID_TYPE
    // M_LOOKUPID = 0, this enum value conflicts with M_DELIVERY
};
pub const DEFAULT_M_PRIORITY = MQDEFAULT.M_PRIORITY;
pub const DEFAULT_M_DELIVERY = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_ACKNOWLEDGE = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_JOURNAL = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_APPSPECIFIC = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_PRIV_LEVEL = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_AUTH_LEVEL = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_M_SENDERID_TYPE = MQDEFAULT.M_SENDERID_TYPE;
pub const DEFAULT_Q_JOURNAL = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_Q_BASEPRIORITY = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_Q_QUOTA = MQDEFAULT.Q_QUOTA;
pub const DEFAULT_Q_JOURNAL_QUOTA = MQDEFAULT.Q_QUOTA;
pub const DEFAULT_Q_TRANSACTION = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_Q_AUTHENTICATE = MQDEFAULT.M_DELIVERY;
pub const DEFAULT_Q_PRIV_LEVEL = MQDEFAULT.M_SENDERID_TYPE;
pub const DEFAULT_M_LOOKUPID = MQDEFAULT.M_DELIVERY;

pub const MQERROR = enum(i32) {
    ERROR = -1072824319,
    ERROR_PROPERTY = -1072824318,
    ERROR_QUEUE_NOT_FOUND = -1072824317,
    ERROR_QUEUE_NOT_ACTIVE = -1072824316,
    ERROR_QUEUE_EXISTS = -1072824315,
    ERROR_INVALID_PARAMETER = -1072824314,
    ERROR_INVALID_HANDLE = -1072824313,
    ERROR_OPERATION_CANCELLED = -1072824312,
    ERROR_SHARING_VIOLATION = -1072824311,
    ERROR_SERVICE_NOT_AVAILABLE = -1072824309,
    ERROR_MACHINE_NOT_FOUND = -1072824307,
    ERROR_ILLEGAL_SORT = -1072824304,
    ERROR_ILLEGAL_USER = -1072824303,
    ERROR_NO_DS = -1072824301,
    ERROR_ILLEGAL_QUEUE_PATHNAME = -1072824300,
    ERROR_ILLEGAL_PROPERTY_VALUE = -1072824296,
    ERROR_ILLEGAL_PROPERTY_VT = -1072824295,
    ERROR_BUFFER_OVERFLOW = -1072824294,
    ERROR_IO_TIMEOUT = -1072824293,
    ERROR_ILLEGAL_CURSOR_ACTION = -1072824292,
    ERROR_MESSAGE_ALREADY_RECEIVED = -1072824291,
    ERROR_ILLEGAL_FORMATNAME = -1072824290,
    ERROR_FORMATNAME_BUFFER_TOO_SMALL = -1072824289,
    ERROR_UNSUPPORTED_FORMATNAME_OPERATION = -1072824288,
    ERROR_ILLEGAL_SECURITY_DESCRIPTOR = -1072824287,
    ERROR_SENDERID_BUFFER_TOO_SMALL = -1072824286,
    ERROR_SECURITY_DESCRIPTOR_TOO_SMALL = -1072824285,
    ERROR_CANNOT_IMPERSONATE_CLIENT = -1072824284,
    ERROR_ACCESS_DENIED = -1072824283,
    ERROR_PRIVILEGE_NOT_HELD = -1072824282,
    ERROR_INSUFFICIENT_RESOURCES = -1072824281,
    ERROR_USER_BUFFER_TOO_SMALL = -1072824280,
    ERROR_MESSAGE_STORAGE_FAILED = -1072824278,
    ERROR_SENDER_CERT_BUFFER_TOO_SMALL = -1072824277,
    ERROR_INVALID_CERTIFICATE = -1072824276,
    ERROR_CORRUPTED_INTERNAL_CERTIFICATE = -1072824275,
    ERROR_INTERNAL_USER_CERT_EXIST = -1072824274,
    ERROR_NO_INTERNAL_USER_CERT = -1072824273,
    ERROR_CORRUPTED_SECURITY_DATA = -1072824272,
    ERROR_CORRUPTED_PERSONAL_CERT_STORE = -1072824271,
    ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION = -1072824269,
    ERROR_BAD_SECURITY_CONTEXT = -1072824267,
    ERROR_COULD_NOT_GET_USER_SID = -1072824266,
    ERROR_COULD_NOT_GET_ACCOUNT_INFO = -1072824265,
    ERROR_ILLEGAL_MQCOLUMNS = -1072824264,
    ERROR_ILLEGAL_PROPID = -1072824263,
    ERROR_ILLEGAL_RELATION = -1072824262,
    ERROR_ILLEGAL_PROPERTY_SIZE = -1072824261,
    ERROR_ILLEGAL_RESTRICTION_PROPID = -1072824260,
    ERROR_ILLEGAL_MQQUEUEPROPS = -1072824259,
    ERROR_PROPERTY_NOTALLOWED = -1072824258,
    ERROR_INSUFFICIENT_PROPERTIES = -1072824257,
    ERROR_MACHINE_EXISTS = -1072824256,
    ERROR_ILLEGAL_MQQMPROPS = -1072824255,
    ERROR_DS_IS_FULL = -1072824254,
    ERROR_DS_ERROR = -1072824253,
    ERROR_INVALID_OWNER = -1072824252,
    ERROR_UNSUPPORTED_ACCESS_MODE = -1072824251,
    ERROR_RESULT_BUFFER_TOO_SMALL = -1072824250,
    ERROR_DELETE_CN_IN_USE = -1072824248,
    ERROR_NO_RESPONSE_FROM_OBJECT_SERVER = -1072824247,
    ERROR_OBJECT_SERVER_NOT_AVAILABLE = -1072824246,
    ERROR_QUEUE_NOT_AVAILABLE = -1072824245,
    ERROR_DTC_CONNECT = -1072824244,
    ERROR_TRANSACTION_IMPORT = -1072824242,
    ERROR_TRANSACTION_USAGE = -1072824240,
    ERROR_TRANSACTION_SEQUENCE = -1072824239,
    ERROR_MISSING_CONNECTOR_TYPE = -1072824235,
    ERROR_STALE_HANDLE = -1072824234,
    ERROR_TRANSACTION_ENLIST = -1072824232,
    ERROR_QUEUE_DELETED = -1072824230,
    ERROR_ILLEGAL_CONTEXT = -1072824229,
    ERROR_ILLEGAL_SORT_PROPID = -1072824228,
    ERROR_LABEL_TOO_LONG = -1072824227,
    ERROR_LABEL_BUFFER_TOO_SMALL = -1072824226,
    ERROR_MQIS_SERVER_EMPTY = -1072824225,
    ERROR_MQIS_READONLY_MODE = -1072824224,
    ERROR_SYMM_KEY_BUFFER_TOO_SMALL = -1072824223,
    ERROR_SIGNATURE_BUFFER_TOO_SMALL = -1072824222,
    ERROR_PROV_NAME_BUFFER_TOO_SMALL = -1072824221,
    ERROR_ILLEGAL_OPERATION = -1072824220,
    ERROR_WRITE_NOT_ALLOWED = -1072824219,
    ERROR_WKS_CANT_SERVE_CLIENT = -1072824218,
    ERROR_DEPEND_WKS_LICENSE_OVERFLOW = -1072824217,
    CORRUPTED_QUEUE_WAS_DELETED = -1072824216,
    ERROR_REMOTE_MACHINE_NOT_AVAILABLE = -1072824215,
    ERROR_UNSUPPORTED_OPERATION = -1072824214,
    ERROR_ENCRYPTION_PROVIDER_NOT_SUPPORTED = -1072824213,
    ERROR_CANNOT_SET_CRYPTO_SEC_DESCR = -1072824212,
    ERROR_CERTIFICATE_NOT_PROVIDED = -1072824211,
    ERROR_Q_DNS_PROPERTY_NOT_SUPPORTED = -1072824210,
    ERROR_CANT_CREATE_CERT_STORE = -1072824209,
    // ERROR_CANNOT_CREATE_CERT_STORE = -1072824209, this enum value conflicts with ERROR_CANT_CREATE_CERT_STORE
    ERROR_CANT_OPEN_CERT_STORE = -1072824208,
    // ERROR_CANNOT_OPEN_CERT_STORE = -1072824208, this enum value conflicts with ERROR_CANT_OPEN_CERT_STORE
    ERROR_ILLEGAL_ENTERPRISE_OPERATION = -1072824207,
    ERROR_CANNOT_GRANT_ADD_GUID = -1072824206,
    ERROR_CANNOT_LOAD_MSMQOCM = -1072824205,
    ERROR_NO_ENTRY_POINT_MSMQOCM = -1072824204,
    ERROR_NO_MSMQ_SERVERS_ON_DC = -1072824203,
    ERROR_CANNOT_JOIN_DOMAIN = -1072824202,
    ERROR_CANNOT_CREATE_ON_GC = -1072824201,
    ERROR_GUID_NOT_MATCHING = -1072824200,
    ERROR_PUBLIC_KEY_NOT_FOUND = -1072824199,
    ERROR_PUBLIC_KEY_DOES_NOT_EXIST = -1072824198,
    ERROR_ILLEGAL_MQPRIVATEPROPS = -1072824197,
    ERROR_NO_GC_IN_DOMAIN = -1072824196,
    ERROR_NO_MSMQ_SERVERS_ON_GC = -1072824195,
    ERROR_CANNOT_GET_DN = -1072824194,
    ERROR_CANNOT_HASH_DATA_EX = -1072824193,
    ERROR_CANNOT_SIGN_DATA_EX = -1072824192,
    ERROR_CANNOT_CREATE_HASH_EX = -1072824191,
    ERROR_FAIL_VERIFY_SIGNATURE_EX = -1072824190,
    ERROR_CANNOT_DELETE_PSC_OBJECTS = -1072824189,
    ERROR_NO_MQUSER_OU = -1072824188,
    ERROR_CANNOT_LOAD_MQAD = -1072824187,
    ERROR_CANNOT_LOAD_MQDSSRV = -1072824186,
    ERROR_PROPERTIES_CONFLICT = -1072824185,
    ERROR_MESSAGE_NOT_FOUND = -1072824184,
    ERROR_CANT_RESOLVE_SITES = -1072824183,
    ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS = -1072824182,
    ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER = -1072824181,
    ERROR_NOT_A_CORRECT_OBJECT_CLASS = -1072824180,
    ERROR_MULTI_SORT_KEYS = -1072824179,
    ERROR_GC_NEEDED = -1072824178,
    ERROR_DS_BIND_ROOT_FOREST = -1072824177,
    ERROR_DS_LOCAL_USER = -1072824176,
    ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED = -1072824175,
    ERROR_BAD_XML_FORMAT = -1072824174,
    ERROR_UNSUPPORTED_CLASS = -1072824173,
    ERROR_UNINITIALIZED_OBJECT = -1072824172,
    ERROR_CANNOT_CREATE_PSC_OBJECTS = -1072824171,
    ERROR_CANNOT_UPDATE_PSC_OBJECTS = -1072824170,
};
pub const MQ_ERROR = MQERROR.ERROR;
pub const MQ_ERROR_PROPERTY = MQERROR.ERROR_PROPERTY;
pub const MQ_ERROR_QUEUE_NOT_FOUND = MQERROR.ERROR_QUEUE_NOT_FOUND;
pub const MQ_ERROR_QUEUE_NOT_ACTIVE = MQERROR.ERROR_QUEUE_NOT_ACTIVE;
pub const MQ_ERROR_QUEUE_EXISTS = MQERROR.ERROR_QUEUE_EXISTS;
pub const MQ_ERROR_INVALID_PARAMETER = MQERROR.ERROR_INVALID_PARAMETER;
pub const MQ_ERROR_INVALID_HANDLE = MQERROR.ERROR_INVALID_HANDLE;
pub const MQ_ERROR_OPERATION_CANCELLED = MQERROR.ERROR_OPERATION_CANCELLED;
pub const MQ_ERROR_SHARING_VIOLATION = MQERROR.ERROR_SHARING_VIOLATION;
pub const MQ_ERROR_SERVICE_NOT_AVAILABLE = MQERROR.ERROR_SERVICE_NOT_AVAILABLE;
pub const MQ_ERROR_MACHINE_NOT_FOUND = MQERROR.ERROR_MACHINE_NOT_FOUND;
pub const MQ_ERROR_ILLEGAL_SORT = MQERROR.ERROR_ILLEGAL_SORT;
pub const MQ_ERROR_ILLEGAL_USER = MQERROR.ERROR_ILLEGAL_USER;
pub const MQ_ERROR_NO_DS = MQERROR.ERROR_NO_DS;
pub const MQ_ERROR_ILLEGAL_QUEUE_PATHNAME = MQERROR.ERROR_ILLEGAL_QUEUE_PATHNAME;
pub const MQ_ERROR_ILLEGAL_PROPERTY_VALUE = MQERROR.ERROR_ILLEGAL_PROPERTY_VALUE;
pub const MQ_ERROR_ILLEGAL_PROPERTY_VT = MQERROR.ERROR_ILLEGAL_PROPERTY_VT;
pub const MQ_ERROR_BUFFER_OVERFLOW = MQERROR.ERROR_BUFFER_OVERFLOW;
pub const MQ_ERROR_IO_TIMEOUT = MQERROR.ERROR_IO_TIMEOUT;
pub const MQ_ERROR_ILLEGAL_CURSOR_ACTION = MQERROR.ERROR_ILLEGAL_CURSOR_ACTION;
pub const MQ_ERROR_MESSAGE_ALREADY_RECEIVED = MQERROR.ERROR_MESSAGE_ALREADY_RECEIVED;
pub const MQ_ERROR_ILLEGAL_FORMATNAME = MQERROR.ERROR_ILLEGAL_FORMATNAME;
pub const MQ_ERROR_FORMATNAME_BUFFER_TOO_SMALL = MQERROR.ERROR_FORMATNAME_BUFFER_TOO_SMALL;
pub const MQ_ERROR_UNSUPPORTED_FORMATNAME_OPERATION = MQERROR.ERROR_UNSUPPORTED_FORMATNAME_OPERATION;
pub const MQ_ERROR_ILLEGAL_SECURITY_DESCRIPTOR = MQERROR.ERROR_ILLEGAL_SECURITY_DESCRIPTOR;
pub const MQ_ERROR_SENDERID_BUFFER_TOO_SMALL = MQERROR.ERROR_SENDERID_BUFFER_TOO_SMALL;
pub const MQ_ERROR_SECURITY_DESCRIPTOR_TOO_SMALL = MQERROR.ERROR_SECURITY_DESCRIPTOR_TOO_SMALL;
pub const MQ_ERROR_CANNOT_IMPERSONATE_CLIENT = MQERROR.ERROR_CANNOT_IMPERSONATE_CLIENT;
pub const MQ_ERROR_ACCESS_DENIED = MQERROR.ERROR_ACCESS_DENIED;
pub const MQ_ERROR_PRIVILEGE_NOT_HELD = MQERROR.ERROR_PRIVILEGE_NOT_HELD;
pub const MQ_ERROR_INSUFFICIENT_RESOURCES = MQERROR.ERROR_INSUFFICIENT_RESOURCES;
pub const MQ_ERROR_USER_BUFFER_TOO_SMALL = MQERROR.ERROR_USER_BUFFER_TOO_SMALL;
pub const MQ_ERROR_MESSAGE_STORAGE_FAILED = MQERROR.ERROR_MESSAGE_STORAGE_FAILED;
pub const MQ_ERROR_SENDER_CERT_BUFFER_TOO_SMALL = MQERROR.ERROR_SENDER_CERT_BUFFER_TOO_SMALL;
pub const MQ_ERROR_INVALID_CERTIFICATE = MQERROR.ERROR_INVALID_CERTIFICATE;
pub const MQ_ERROR_CORRUPTED_INTERNAL_CERTIFICATE = MQERROR.ERROR_CORRUPTED_INTERNAL_CERTIFICATE;
pub const MQ_ERROR_INTERNAL_USER_CERT_EXIST = MQERROR.ERROR_INTERNAL_USER_CERT_EXIST;
pub const MQ_ERROR_NO_INTERNAL_USER_CERT = MQERROR.ERROR_NO_INTERNAL_USER_CERT;
pub const MQ_ERROR_CORRUPTED_SECURITY_DATA = MQERROR.ERROR_CORRUPTED_SECURITY_DATA;
pub const MQ_ERROR_CORRUPTED_PERSONAL_CERT_STORE = MQERROR.ERROR_CORRUPTED_PERSONAL_CERT_STORE;
pub const MQ_ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION = MQERROR.ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION;
pub const MQ_ERROR_BAD_SECURITY_CONTEXT = MQERROR.ERROR_BAD_SECURITY_CONTEXT;
pub const MQ_ERROR_COULD_NOT_GET_USER_SID = MQERROR.ERROR_COULD_NOT_GET_USER_SID;
pub const MQ_ERROR_COULD_NOT_GET_ACCOUNT_INFO = MQERROR.ERROR_COULD_NOT_GET_ACCOUNT_INFO;
pub const MQ_ERROR_ILLEGAL_MQCOLUMNS = MQERROR.ERROR_ILLEGAL_MQCOLUMNS;
pub const MQ_ERROR_ILLEGAL_PROPID = MQERROR.ERROR_ILLEGAL_PROPID;
pub const MQ_ERROR_ILLEGAL_RELATION = MQERROR.ERROR_ILLEGAL_RELATION;
pub const MQ_ERROR_ILLEGAL_PROPERTY_SIZE = MQERROR.ERROR_ILLEGAL_PROPERTY_SIZE;
pub const MQ_ERROR_ILLEGAL_RESTRICTION_PROPID = MQERROR.ERROR_ILLEGAL_RESTRICTION_PROPID;
pub const MQ_ERROR_ILLEGAL_MQQUEUEPROPS = MQERROR.ERROR_ILLEGAL_MQQUEUEPROPS;
pub const MQ_ERROR_PROPERTY_NOTALLOWED = MQERROR.ERROR_PROPERTY_NOTALLOWED;
pub const MQ_ERROR_INSUFFICIENT_PROPERTIES = MQERROR.ERROR_INSUFFICIENT_PROPERTIES;
pub const MQ_ERROR_MACHINE_EXISTS = MQERROR.ERROR_MACHINE_EXISTS;
pub const MQ_ERROR_ILLEGAL_MQQMPROPS = MQERROR.ERROR_ILLEGAL_MQQMPROPS;
pub const MQ_ERROR_DS_IS_FULL = MQERROR.ERROR_DS_IS_FULL;
pub const MQ_ERROR_DS_ERROR = MQERROR.ERROR_DS_ERROR;
pub const MQ_ERROR_INVALID_OWNER = MQERROR.ERROR_INVALID_OWNER;
pub const MQ_ERROR_UNSUPPORTED_ACCESS_MODE = MQERROR.ERROR_UNSUPPORTED_ACCESS_MODE;
pub const MQ_ERROR_RESULT_BUFFER_TOO_SMALL = MQERROR.ERROR_RESULT_BUFFER_TOO_SMALL;
pub const MQ_ERROR_DELETE_CN_IN_USE = MQERROR.ERROR_DELETE_CN_IN_USE;
pub const MQ_ERROR_NO_RESPONSE_FROM_OBJECT_SERVER = MQERROR.ERROR_NO_RESPONSE_FROM_OBJECT_SERVER;
pub const MQ_ERROR_OBJECT_SERVER_NOT_AVAILABLE = MQERROR.ERROR_OBJECT_SERVER_NOT_AVAILABLE;
pub const MQ_ERROR_QUEUE_NOT_AVAILABLE = MQERROR.ERROR_QUEUE_NOT_AVAILABLE;
pub const MQ_ERROR_DTC_CONNECT = MQERROR.ERROR_DTC_CONNECT;
pub const MQ_ERROR_TRANSACTION_IMPORT = MQERROR.ERROR_TRANSACTION_IMPORT;
pub const MQ_ERROR_TRANSACTION_USAGE = MQERROR.ERROR_TRANSACTION_USAGE;
pub const MQ_ERROR_TRANSACTION_SEQUENCE = MQERROR.ERROR_TRANSACTION_SEQUENCE;
pub const MQ_ERROR_MISSING_CONNECTOR_TYPE = MQERROR.ERROR_MISSING_CONNECTOR_TYPE;
pub const MQ_ERROR_STALE_HANDLE = MQERROR.ERROR_STALE_HANDLE;
pub const MQ_ERROR_TRANSACTION_ENLIST = MQERROR.ERROR_TRANSACTION_ENLIST;
pub const MQ_ERROR_QUEUE_DELETED = MQERROR.ERROR_QUEUE_DELETED;
pub const MQ_ERROR_ILLEGAL_CONTEXT = MQERROR.ERROR_ILLEGAL_CONTEXT;
pub const MQ_ERROR_ILLEGAL_SORT_PROPID = MQERROR.ERROR_ILLEGAL_SORT_PROPID;
pub const MQ_ERROR_LABEL_TOO_LONG = MQERROR.ERROR_LABEL_TOO_LONG;
pub const MQ_ERROR_LABEL_BUFFER_TOO_SMALL = MQERROR.ERROR_LABEL_BUFFER_TOO_SMALL;
pub const MQ_ERROR_MQIS_SERVER_EMPTY = MQERROR.ERROR_MQIS_SERVER_EMPTY;
pub const MQ_ERROR_MQIS_READONLY_MODE = MQERROR.ERROR_MQIS_READONLY_MODE;
pub const MQ_ERROR_SYMM_KEY_BUFFER_TOO_SMALL = MQERROR.ERROR_SYMM_KEY_BUFFER_TOO_SMALL;
pub const MQ_ERROR_SIGNATURE_BUFFER_TOO_SMALL = MQERROR.ERROR_SIGNATURE_BUFFER_TOO_SMALL;
pub const MQ_ERROR_PROV_NAME_BUFFER_TOO_SMALL = MQERROR.ERROR_PROV_NAME_BUFFER_TOO_SMALL;
pub const MQ_ERROR_ILLEGAL_OPERATION = MQERROR.ERROR_ILLEGAL_OPERATION;
pub const MQ_ERROR_WRITE_NOT_ALLOWED = MQERROR.ERROR_WRITE_NOT_ALLOWED;
pub const MQ_ERROR_WKS_CANT_SERVE_CLIENT = MQERROR.ERROR_WKS_CANT_SERVE_CLIENT;
pub const MQ_ERROR_DEPEND_WKS_LICENSE_OVERFLOW = MQERROR.ERROR_DEPEND_WKS_LICENSE_OVERFLOW;
pub const MQ_CORRUPTED_QUEUE_WAS_DELETED = MQERROR.CORRUPTED_QUEUE_WAS_DELETED;
pub const MQ_ERROR_REMOTE_MACHINE_NOT_AVAILABLE = MQERROR.ERROR_REMOTE_MACHINE_NOT_AVAILABLE;
pub const MQ_ERROR_UNSUPPORTED_OPERATION = MQERROR.ERROR_UNSUPPORTED_OPERATION;
pub const MQ_ERROR_ENCRYPTION_PROVIDER_NOT_SUPPORTED = MQERROR.ERROR_ENCRYPTION_PROVIDER_NOT_SUPPORTED;
pub const MQ_ERROR_CANNOT_SET_CRYPTO_SEC_DESCR = MQERROR.ERROR_CANNOT_SET_CRYPTO_SEC_DESCR;
pub const MQ_ERROR_CERTIFICATE_NOT_PROVIDED = MQERROR.ERROR_CERTIFICATE_NOT_PROVIDED;
pub const MQ_ERROR_Q_DNS_PROPERTY_NOT_SUPPORTED = MQERROR.ERROR_Q_DNS_PROPERTY_NOT_SUPPORTED;
pub const MQ_ERROR_CANT_CREATE_CERT_STORE = MQERROR.ERROR_CANT_CREATE_CERT_STORE;
pub const MQ_ERROR_CANNOT_CREATE_CERT_STORE = MQERROR.ERROR_CANT_CREATE_CERT_STORE;
pub const MQ_ERROR_CANT_OPEN_CERT_STORE = MQERROR.ERROR_CANT_OPEN_CERT_STORE;
pub const MQ_ERROR_CANNOT_OPEN_CERT_STORE = MQERROR.ERROR_CANT_OPEN_CERT_STORE;
pub const MQ_ERROR_ILLEGAL_ENTERPRISE_OPERATION = MQERROR.ERROR_ILLEGAL_ENTERPRISE_OPERATION;
pub const MQ_ERROR_CANNOT_GRANT_ADD_GUID = MQERROR.ERROR_CANNOT_GRANT_ADD_GUID;
pub const MQ_ERROR_CANNOT_LOAD_MSMQOCM = MQERROR.ERROR_CANNOT_LOAD_MSMQOCM;
pub const MQ_ERROR_NO_ENTRY_POINT_MSMQOCM = MQERROR.ERROR_NO_ENTRY_POINT_MSMQOCM;
pub const MQ_ERROR_NO_MSMQ_SERVERS_ON_DC = MQERROR.ERROR_NO_MSMQ_SERVERS_ON_DC;
pub const MQ_ERROR_CANNOT_JOIN_DOMAIN = MQERROR.ERROR_CANNOT_JOIN_DOMAIN;
pub const MQ_ERROR_CANNOT_CREATE_ON_GC = MQERROR.ERROR_CANNOT_CREATE_ON_GC;
pub const MQ_ERROR_GUID_NOT_MATCHING = MQERROR.ERROR_GUID_NOT_MATCHING;
pub const MQ_ERROR_PUBLIC_KEY_NOT_FOUND = MQERROR.ERROR_PUBLIC_KEY_NOT_FOUND;
pub const MQ_ERROR_PUBLIC_KEY_DOES_NOT_EXIST = MQERROR.ERROR_PUBLIC_KEY_DOES_NOT_EXIST;
pub const MQ_ERROR_ILLEGAL_MQPRIVATEPROPS = MQERROR.ERROR_ILLEGAL_MQPRIVATEPROPS;
pub const MQ_ERROR_NO_GC_IN_DOMAIN = MQERROR.ERROR_NO_GC_IN_DOMAIN;
pub const MQ_ERROR_NO_MSMQ_SERVERS_ON_GC = MQERROR.ERROR_NO_MSMQ_SERVERS_ON_GC;
pub const MQ_ERROR_CANNOT_GET_DN = MQERROR.ERROR_CANNOT_GET_DN;
pub const MQ_ERROR_CANNOT_HASH_DATA_EX = MQERROR.ERROR_CANNOT_HASH_DATA_EX;
pub const MQ_ERROR_CANNOT_SIGN_DATA_EX = MQERROR.ERROR_CANNOT_SIGN_DATA_EX;
pub const MQ_ERROR_CANNOT_CREATE_HASH_EX = MQERROR.ERROR_CANNOT_CREATE_HASH_EX;
pub const MQ_ERROR_FAIL_VERIFY_SIGNATURE_EX = MQERROR.ERROR_FAIL_VERIFY_SIGNATURE_EX;
pub const MQ_ERROR_CANNOT_DELETE_PSC_OBJECTS = MQERROR.ERROR_CANNOT_DELETE_PSC_OBJECTS;
pub const MQ_ERROR_NO_MQUSER_OU = MQERROR.ERROR_NO_MQUSER_OU;
pub const MQ_ERROR_CANNOT_LOAD_MQAD = MQERROR.ERROR_CANNOT_LOAD_MQAD;
pub const MQ_ERROR_CANNOT_LOAD_MQDSSRV = MQERROR.ERROR_CANNOT_LOAD_MQDSSRV;
pub const MQ_ERROR_PROPERTIES_CONFLICT = MQERROR.ERROR_PROPERTIES_CONFLICT;
pub const MQ_ERROR_MESSAGE_NOT_FOUND = MQERROR.ERROR_MESSAGE_NOT_FOUND;
pub const MQ_ERROR_CANT_RESOLVE_SITES = MQERROR.ERROR_CANT_RESOLVE_SITES;
pub const MQ_ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS = MQERROR.ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS;
pub const MQ_ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER = MQERROR.ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER;
pub const MQ_ERROR_NOT_A_CORRECT_OBJECT_CLASS = MQERROR.ERROR_NOT_A_CORRECT_OBJECT_CLASS;
pub const MQ_ERROR_MULTI_SORT_KEYS = MQERROR.ERROR_MULTI_SORT_KEYS;
pub const MQ_ERROR_GC_NEEDED = MQERROR.ERROR_GC_NEEDED;
pub const MQ_ERROR_DS_BIND_ROOT_FOREST = MQERROR.ERROR_DS_BIND_ROOT_FOREST;
pub const MQ_ERROR_DS_LOCAL_USER = MQERROR.ERROR_DS_LOCAL_USER;
pub const MQ_ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED = MQERROR.ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED;
pub const MQ_ERROR_BAD_XML_FORMAT = MQERROR.ERROR_BAD_XML_FORMAT;
pub const MQ_ERROR_UNSUPPORTED_CLASS = MQERROR.ERROR_UNSUPPORTED_CLASS;
pub const MQ_ERROR_UNINITIALIZED_OBJECT = MQERROR.ERROR_UNINITIALIZED_OBJECT;
pub const MQ_ERROR_CANNOT_CREATE_PSC_OBJECTS = MQERROR.ERROR_CANNOT_CREATE_PSC_OBJECTS;
pub const MQ_ERROR_CANNOT_UPDATE_PSC_OBJECTS = MQERROR.ERROR_CANNOT_UPDATE_PSC_OBJECTS;

pub const MQWARNING = enum(i32) {
    PROPERTY = 1074659329,
    ILLEGAL_PROPERTY = 1074659330,
    PROPERTY_IGNORED = 1074659331,
    UNSUPPORTED_PROPERTY = 1074659332,
    DUPLICATE_PROPERTY = 1074659333,
    OPERATION_PENDING = 1074659334,
    FORMATNAME_BUFFER_TOO_SMALL = 1074659337,
    INTERNAL_USER_CERT_EXIST = 1074659338,
    OWNER_IGNORED = 1074659339,
};
pub const MQ_INFORMATION_PROPERTY = MQWARNING.PROPERTY;
pub const MQ_INFORMATION_ILLEGAL_PROPERTY = MQWARNING.ILLEGAL_PROPERTY;
pub const MQ_INFORMATION_PROPERTY_IGNORED = MQWARNING.PROPERTY_IGNORED;
pub const MQ_INFORMATION_UNSUPPORTED_PROPERTY = MQWARNING.UNSUPPORTED_PROPERTY;
pub const MQ_INFORMATION_DUPLICATE_PROPERTY = MQWARNING.DUPLICATE_PROPERTY;
pub const MQ_INFORMATION_OPERATION_PENDING = MQWARNING.OPERATION_PENDING;
pub const MQ_INFORMATION_FORMATNAME_BUFFER_TOO_SMALL = MQWARNING.FORMATNAME_BUFFER_TOO_SMALL;
pub const MQ_INFORMATION_INTERNAL_USER_CERT_EXIST = MQWARNING.INTERNAL_USER_CERT_EXIST;
pub const MQ_INFORMATION_OWNER_IGNORED = MQWARNING.OWNER_IGNORED;

const IID_IMSMQQuery_Value = Guid.initString("d7d6e072-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQQuery = &IID_IMSMQQuery_Value;
pub const IMSMQQuery = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        LookupQueue: *const fn (
            self: *const IMSMQQuery,
            queue_guid: ?*VARIANT,
            service_type_guid: ?*VARIANT,
            label: ?*VARIANT,
            create_time: ?*VARIANT,
            modify_time: ?*VARIANT,
            rel_service_type: ?*VARIANT,
            rel_label: ?*VARIANT,
            rel_create_time: ?*VARIANT,
            rel_modify_time: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn lookupQueue(self: *const T, queue_guid_: ?*VARIANT, service_type_guid_: ?*VARIANT, label_: ?*VARIANT, create_time_: ?*VARIANT, modify_time_: ?*VARIANT, rel_service_type_: ?*VARIANT, rel_label_: ?*VARIANT, rel_create_time_: ?*VARIANT, rel_modify_time_: ?*VARIANT, ppqinfos_: ?*?*IMSMQQueueInfos) HRESULT {
                return @as(*const IMSMQQuery.VTable, @ptrCast(self.vtable)).LookupQueue(@as(*const IMSMQQuery, @ptrCast(self)), queue_guid_, service_type_guid_, label_, create_time_, modify_time_, rel_service_type_, rel_label_, rel_create_time_, rel_modify_time_, ppqinfos_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueueInfo_Value = Guid.initString("d7d6e07b-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQQueueInfo = &IID_IMSMQQueueInfo_Value;
pub const IMSMQQueueInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pbstr_guid_queue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pbstr_guid_service_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            bstr_guid_service_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pbstr_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            bstr_label: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pbstr_path_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            bstr_path_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pbstr_format_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            bstr_format_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pis_transactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pl_priv_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            l_priv_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pl_journal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            l_journal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Quota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pl_quota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Quota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            l_quota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BasePriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pl_base_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BasePriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            l_base_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pvar_create_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pvar_modify_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authenticate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pl_authenticate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authenticate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            l_authenticate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalQuota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pl_journal_quota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JournalQuota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            l_journal_quota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo,
            pis_world_readable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IMSMQQueueInfo,
            is_transactional: ?*VARIANT,
            is_world_readable: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IMSMQQueueInfo,
            access: i32,
            share_mode: i32,
            ppq: ?*?*IMSMQQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getQueueGuid(self: *const T, pbstr_guid_queue_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_QueueGuid(@as(*const IMSMQQueueInfo, @ptrCast(self)), pbstr_guid_queue_);
            }
            pub inline fn getServiceTypeGuid(self: *const T, pbstr_guid_service_type_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_ServiceTypeGuid(@as(*const IMSMQQueueInfo, @ptrCast(self)), pbstr_guid_service_type_);
            }
            pub inline fn putServiceTypeGuid(self: *const T, bstr_guid_service_type_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_ServiceTypeGuid(@as(*const IMSMQQueueInfo, @ptrCast(self)), bstr_guid_service_type_);
            }
            pub inline fn getLabel(self: *const T, pbstr_label_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_Label(@as(*const IMSMQQueueInfo, @ptrCast(self)), pbstr_label_);
            }
            pub inline fn putLabel(self: *const T, bstr_label_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_Label(@as(*const IMSMQQueueInfo, @ptrCast(self)), bstr_label_);
            }
            pub inline fn getPathName(self: *const T, pbstr_path_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_PathName(@as(*const IMSMQQueueInfo, @ptrCast(self)), pbstr_path_name_);
            }
            pub inline fn putPathName(self: *const T, bstr_path_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_PathName(@as(*const IMSMQQueueInfo, @ptrCast(self)), bstr_path_name_);
            }
            pub inline fn getFormatName(self: *const T, pbstr_format_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_FormatName(@as(*const IMSMQQueueInfo, @ptrCast(self)), pbstr_format_name_);
            }
            pub inline fn putFormatName(self: *const T, bstr_format_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_FormatName(@as(*const IMSMQQueueInfo, @ptrCast(self)), bstr_format_name_);
            }
            pub inline fn getIsTransactional(self: *const T, pis_transactional_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_IsTransactional(@as(*const IMSMQQueueInfo, @ptrCast(self)), pis_transactional_);
            }
            pub inline fn getPrivLevel(self: *const T, pl_priv_level_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_PrivLevel(@as(*const IMSMQQueueInfo, @ptrCast(self)), pl_priv_level_);
            }
            pub inline fn putPrivLevel(self: *const T, l_priv_level_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_PrivLevel(@as(*const IMSMQQueueInfo, @ptrCast(self)), l_priv_level_);
            }
            pub inline fn getJournal(self: *const T, pl_journal_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_Journal(@as(*const IMSMQQueueInfo, @ptrCast(self)), pl_journal_);
            }
            pub inline fn putJournal(self: *const T, l_journal_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_Journal(@as(*const IMSMQQueueInfo, @ptrCast(self)), l_journal_);
            }
            pub inline fn getQuota(self: *const T, pl_quota_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_Quota(@as(*const IMSMQQueueInfo, @ptrCast(self)), pl_quota_);
            }
            pub inline fn putQuota(self: *const T, l_quota_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_Quota(@as(*const IMSMQQueueInfo, @ptrCast(self)), l_quota_);
            }
            pub inline fn getBasePriority(self: *const T, pl_base_priority_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_BasePriority(@as(*const IMSMQQueueInfo, @ptrCast(self)), pl_base_priority_);
            }
            pub inline fn putBasePriority(self: *const T, l_base_priority_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_BasePriority(@as(*const IMSMQQueueInfo, @ptrCast(self)), l_base_priority_);
            }
            pub inline fn getCreateTime(self: *const T, pvar_create_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_CreateTime(@as(*const IMSMQQueueInfo, @ptrCast(self)), pvar_create_time_);
            }
            pub inline fn getModifyTime(self: *const T, pvar_modify_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_ModifyTime(@as(*const IMSMQQueueInfo, @ptrCast(self)), pvar_modify_time_);
            }
            pub inline fn getAuthenticate(self: *const T, pl_authenticate_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_Authenticate(@as(*const IMSMQQueueInfo, @ptrCast(self)), pl_authenticate_);
            }
            pub inline fn putAuthenticate(self: *const T, l_authenticate_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_Authenticate(@as(*const IMSMQQueueInfo, @ptrCast(self)), l_authenticate_);
            }
            pub inline fn getJournalQuota(self: *const T, pl_journal_quota_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_JournalQuota(@as(*const IMSMQQueueInfo, @ptrCast(self)), pl_journal_quota_);
            }
            pub inline fn putJournalQuota(self: *const T, l_journal_quota_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).put_JournalQuota(@as(*const IMSMQQueueInfo, @ptrCast(self)), l_journal_quota_);
            }
            pub inline fn getIsWorldReadable(self: *const T, pis_world_readable_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).get_IsWorldReadable(@as(*const IMSMQQueueInfo, @ptrCast(self)), pis_world_readable_);
            }
            pub inline fn create(self: *const T, is_transactional_: ?*VARIANT, is_world_readable_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).Create(@as(*const IMSMQQueueInfo, @ptrCast(self)), is_transactional_, is_world_readable_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).Delete(@as(*const IMSMQQueueInfo, @ptrCast(self)));
            }
            pub inline fn open(self: *const T, access_: i32, share_mode_: i32, ppq_: ?*?*IMSMQQueue) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).Open(@as(*const IMSMQQueueInfo, @ptrCast(self)), access_, share_mode_, ppq_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IMSMQQueueInfo, @ptrCast(self)));
            }
            pub inline fn update(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo.VTable, @ptrCast(self.vtable)).Update(@as(*const IMSMQQueueInfo, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueueInfo2_Value = Guid.initString("fd174a80-89cf-11d2-b0f2-00e02c074f6b");
pub const IID_IMSMQQueueInfo2 = &IID_IMSMQQueueInfo2_Value;
pub const IMSMQQueueInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pbstr_guid_queue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pbstr_guid_service_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            bstr_guid_service_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pbstr_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            bstr_label: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pbstr_path_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            bstr_path_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pbstr_format_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            bstr_format_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pis_transactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pl_priv_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            l_priv_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pl_journal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            l_journal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Quota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pl_quota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Quota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            l_quota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BasePriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pl_base_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BasePriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            l_base_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pvar_create_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pvar_modify_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authenticate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pl_authenticate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authenticate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            l_authenticate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalQuota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pl_journal_quota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JournalQuota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            l_journal_quota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pis_world_readable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IMSMQQueueInfo2,
            is_transactional: ?*VARIANT,
            is_world_readable: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IMSMQQueueInfo2,
            access: i32,
            share_mode: i32,
            ppq: ?*?*IMSMQQueue2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathNameDNS: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pbstr_path_name_d_n_s: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            pvar_security: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo2,
            var_security: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getQueueGuid(self: *const T, pbstr_guid_queue_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_QueueGuid(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pbstr_guid_queue_);
            }
            pub inline fn getServiceTypeGuid(self: *const T, pbstr_guid_service_type_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_ServiceTypeGuid(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pbstr_guid_service_type_);
            }
            pub inline fn putServiceTypeGuid(self: *const T, bstr_guid_service_type_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_ServiceTypeGuid(@as(*const IMSMQQueueInfo2, @ptrCast(self)), bstr_guid_service_type_);
            }
            pub inline fn getLabel(self: *const T, pbstr_label_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_Label(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pbstr_label_);
            }
            pub inline fn putLabel(self: *const T, bstr_label_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_Label(@as(*const IMSMQQueueInfo2, @ptrCast(self)), bstr_label_);
            }
            pub inline fn getPathName(self: *const T, pbstr_path_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_PathName(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pbstr_path_name_);
            }
            pub inline fn putPathName(self: *const T, bstr_path_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_PathName(@as(*const IMSMQQueueInfo2, @ptrCast(self)), bstr_path_name_);
            }
            pub inline fn getFormatName(self: *const T, pbstr_format_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_FormatName(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pbstr_format_name_);
            }
            pub inline fn putFormatName(self: *const T, bstr_format_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_FormatName(@as(*const IMSMQQueueInfo2, @ptrCast(self)), bstr_format_name_);
            }
            pub inline fn getIsTransactional(self: *const T, pis_transactional_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_IsTransactional(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pis_transactional_);
            }
            pub inline fn getPrivLevel(self: *const T, pl_priv_level_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_PrivLevel(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pl_priv_level_);
            }
            pub inline fn putPrivLevel(self: *const T, l_priv_level_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_PrivLevel(@as(*const IMSMQQueueInfo2, @ptrCast(self)), l_priv_level_);
            }
            pub inline fn getJournal(self: *const T, pl_journal_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_Journal(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pl_journal_);
            }
            pub inline fn putJournal(self: *const T, l_journal_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_Journal(@as(*const IMSMQQueueInfo2, @ptrCast(self)), l_journal_);
            }
            pub inline fn getQuota(self: *const T, pl_quota_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_Quota(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pl_quota_);
            }
            pub inline fn putQuota(self: *const T, l_quota_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_Quota(@as(*const IMSMQQueueInfo2, @ptrCast(self)), l_quota_);
            }
            pub inline fn getBasePriority(self: *const T, pl_base_priority_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_BasePriority(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pl_base_priority_);
            }
            pub inline fn putBasePriority(self: *const T, l_base_priority_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_BasePriority(@as(*const IMSMQQueueInfo2, @ptrCast(self)), l_base_priority_);
            }
            pub inline fn getCreateTime(self: *const T, pvar_create_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_CreateTime(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pvar_create_time_);
            }
            pub inline fn getModifyTime(self: *const T, pvar_modify_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_ModifyTime(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pvar_modify_time_);
            }
            pub inline fn getAuthenticate(self: *const T, pl_authenticate_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_Authenticate(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pl_authenticate_);
            }
            pub inline fn putAuthenticate(self: *const T, l_authenticate_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_Authenticate(@as(*const IMSMQQueueInfo2, @ptrCast(self)), l_authenticate_);
            }
            pub inline fn getJournalQuota(self: *const T, pl_journal_quota_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_JournalQuota(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pl_journal_quota_);
            }
            pub inline fn putJournalQuota(self: *const T, l_journal_quota_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_JournalQuota(@as(*const IMSMQQueueInfo2, @ptrCast(self)), l_journal_quota_);
            }
            pub inline fn getIsWorldReadable(self: *const T, pis_world_readable_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_IsWorldReadable(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pis_world_readable_);
            }
            pub inline fn create(self: *const T, is_transactional_: ?*VARIANT, is_world_readable_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).Create(@as(*const IMSMQQueueInfo2, @ptrCast(self)), is_transactional_, is_world_readable_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).Delete(@as(*const IMSMQQueueInfo2, @ptrCast(self)));
            }
            pub inline fn open(self: *const T, access_: i32, share_mode_: i32, ppq_: ?*?*IMSMQQueue2) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).Open(@as(*const IMSMQQueueInfo2, @ptrCast(self)), access_, share_mode_, ppq_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IMSMQQueueInfo2, @ptrCast(self)));
            }
            pub inline fn update(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).Update(@as(*const IMSMQQueueInfo2, @ptrCast(self)));
            }
            pub inline fn getPathNameDNS(self: *const T, pbstr_path_name_d_n_s_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_PathNameDNS(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pbstr_path_name_d_n_s_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQueueInfo2, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn getSecurity(self: *const T, pvar_security_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).get_Security(@as(*const IMSMQQueueInfo2, @ptrCast(self)), pvar_security_);
            }
            pub inline fn putSecurity(self: *const T, var_security_: VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo2.VTable, @ptrCast(self.vtable)).put_Security(@as(*const IMSMQQueueInfo2, @ptrCast(self)), var_security_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueueInfo3_Value = Guid.initString("eba96b1d-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfo3 = &IID_IMSMQQueueInfo3_Value;
pub const IMSMQQueueInfo3 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pbstr_guid_queue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pbstr_guid_service_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            bstr_guid_service_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pbstr_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            bstr_label: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pbstr_path_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            bstr_path_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pbstr_format_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            bstr_format_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pis_transactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pl_priv_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            l_priv_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pl_journal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            l_journal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Quota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pl_quota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Quota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            l_quota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BasePriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pl_base_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BasePriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            l_base_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pvar_create_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pvar_modify_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authenticate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pl_authenticate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authenticate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            l_authenticate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalQuota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pl_journal_quota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JournalQuota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            l_journal_quota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pis_world_readable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IMSMQQueueInfo3,
            is_transactional: ?*VARIANT,
            is_world_readable: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IMSMQQueueInfo3,
            access: i32,
            share_mode: i32,
            ppq: ?*?*IMSMQQueue3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathNameDNS: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pbstr_path_name_d_n_s: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pvar_security: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            var_security: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pis_transactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pis_world_readable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MulticastAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pbstr_multicast_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MulticastAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            bstr_multicast_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ADsPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo3,
            pbstr_a_ds_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getQueueGuid(self: *const T, pbstr_guid_queue_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_QueueGuid(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pbstr_guid_queue_);
            }
            pub inline fn getServiceTypeGuid(self: *const T, pbstr_guid_service_type_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_ServiceTypeGuid(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pbstr_guid_service_type_);
            }
            pub inline fn putServiceTypeGuid(self: *const T, bstr_guid_service_type_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_ServiceTypeGuid(@as(*const IMSMQQueueInfo3, @ptrCast(self)), bstr_guid_service_type_);
            }
            pub inline fn getLabel(self: *const T, pbstr_label_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_Label(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pbstr_label_);
            }
            pub inline fn putLabel(self: *const T, bstr_label_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_Label(@as(*const IMSMQQueueInfo3, @ptrCast(self)), bstr_label_);
            }
            pub inline fn getPathName(self: *const T, pbstr_path_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_PathName(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pbstr_path_name_);
            }
            pub inline fn putPathName(self: *const T, bstr_path_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_PathName(@as(*const IMSMQQueueInfo3, @ptrCast(self)), bstr_path_name_);
            }
            pub inline fn getFormatName(self: *const T, pbstr_format_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_FormatName(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pbstr_format_name_);
            }
            pub inline fn putFormatName(self: *const T, bstr_format_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_FormatName(@as(*const IMSMQQueueInfo3, @ptrCast(self)), bstr_format_name_);
            }
            pub inline fn getIsTransactional(self: *const T, pis_transactional_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_IsTransactional(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pis_transactional_);
            }
            pub inline fn getPrivLevel(self: *const T, pl_priv_level_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_PrivLevel(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pl_priv_level_);
            }
            pub inline fn putPrivLevel(self: *const T, l_priv_level_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_PrivLevel(@as(*const IMSMQQueueInfo3, @ptrCast(self)), l_priv_level_);
            }
            pub inline fn getJournal(self: *const T, pl_journal_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_Journal(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pl_journal_);
            }
            pub inline fn putJournal(self: *const T, l_journal_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_Journal(@as(*const IMSMQQueueInfo3, @ptrCast(self)), l_journal_);
            }
            pub inline fn getQuota(self: *const T, pl_quota_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_Quota(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pl_quota_);
            }
            pub inline fn putQuota(self: *const T, l_quota_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_Quota(@as(*const IMSMQQueueInfo3, @ptrCast(self)), l_quota_);
            }
            pub inline fn getBasePriority(self: *const T, pl_base_priority_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_BasePriority(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pl_base_priority_);
            }
            pub inline fn putBasePriority(self: *const T, l_base_priority_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_BasePriority(@as(*const IMSMQQueueInfo3, @ptrCast(self)), l_base_priority_);
            }
            pub inline fn getCreateTime(self: *const T, pvar_create_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_CreateTime(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pvar_create_time_);
            }
            pub inline fn getModifyTime(self: *const T, pvar_modify_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_ModifyTime(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pvar_modify_time_);
            }
            pub inline fn getAuthenticate(self: *const T, pl_authenticate_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_Authenticate(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pl_authenticate_);
            }
            pub inline fn putAuthenticate(self: *const T, l_authenticate_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_Authenticate(@as(*const IMSMQQueueInfo3, @ptrCast(self)), l_authenticate_);
            }
            pub inline fn getJournalQuota(self: *const T, pl_journal_quota_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_JournalQuota(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pl_journal_quota_);
            }
            pub inline fn putJournalQuota(self: *const T, l_journal_quota_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_JournalQuota(@as(*const IMSMQQueueInfo3, @ptrCast(self)), l_journal_quota_);
            }
            pub inline fn getIsWorldReadable(self: *const T, pis_world_readable_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_IsWorldReadable(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pis_world_readable_);
            }
            pub inline fn create(self: *const T, is_transactional_: ?*VARIANT, is_world_readable_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).Create(@as(*const IMSMQQueueInfo3, @ptrCast(self)), is_transactional_, is_world_readable_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).Delete(@as(*const IMSMQQueueInfo3, @ptrCast(self)));
            }
            pub inline fn open(self: *const T, access_: i32, share_mode_: i32, ppq_: ?*?*IMSMQQueue3) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).Open(@as(*const IMSMQQueueInfo3, @ptrCast(self)), access_, share_mode_, ppq_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IMSMQQueueInfo3, @ptrCast(self)));
            }
            pub inline fn update(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).Update(@as(*const IMSMQQueueInfo3, @ptrCast(self)));
            }
            pub inline fn getPathNameDNS(self: *const T, pbstr_path_name_d_n_s_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_PathNameDNS(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pbstr_path_name_d_n_s_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQueueInfo3, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn getSecurity(self: *const T, pvar_security_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_Security(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pvar_security_);
            }
            pub inline fn putSecurity(self: *const T, var_security_: VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_Security(@as(*const IMSMQQueueInfo3, @ptrCast(self)), var_security_);
            }
            pub inline fn getIsTransactional2(self: *const T, pis_transactional_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_IsTransactional2(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pis_transactional_);
            }
            pub inline fn getIsWorldReadable2(self: *const T, pis_world_readable_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_IsWorldReadable2(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pis_world_readable_);
            }
            pub inline fn getMulticastAddress(self: *const T, pbstr_multicast_address_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_MulticastAddress(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pbstr_multicast_address_);
            }
            pub inline fn putMulticastAddress(self: *const T, bstr_multicast_address_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).put_MulticastAddress(@as(*const IMSMQQueueInfo3, @ptrCast(self)), bstr_multicast_address_);
            }
            pub inline fn getADsPath(self: *const T, pbstr_a_ds_path_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo3.VTable, @ptrCast(self.vtable)).get_ADsPath(@as(*const IMSMQQueueInfo3, @ptrCast(self)), pbstr_a_ds_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueueInfo4_Value = Guid.initString("eba96b21-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfo4 = &IID_IMSMQQueueInfo4_Value;
pub const IMSMQQueueInfo4 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pbstr_guid_queue: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pbstr_guid_service_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            bstr_guid_service_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pbstr_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            bstr_label: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pbstr_path_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            bstr_path_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pbstr_format_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            bstr_format_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pis_transactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pl_priv_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            l_priv_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pl_journal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            l_journal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Quota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pl_quota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Quota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            l_quota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BasePriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pl_base_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BasePriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            l_base_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pvar_create_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pvar_modify_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authenticate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pl_authenticate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authenticate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            l_authenticate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalQuota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pl_journal_quota: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JournalQuota: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            l_journal_quota: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pis_world_readable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IMSMQQueueInfo4,
            is_transactional: ?*VARIANT,
            is_world_readable: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IMSMQQueueInfo4,
            access: i32,
            share_mode: i32,
            ppq: ?*?*IMSMQQueue4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathNameDNS: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pbstr_path_name_d_n_s: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pvar_security: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            var_security: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTransactional2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pis_transactional: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorldReadable2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pis_world_readable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MulticastAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pbstr_multicast_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MulticastAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            bstr_multicast_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ADsPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfo4,
            pbstr_a_ds_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getQueueGuid(self: *const T, pbstr_guid_queue_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_QueueGuid(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pbstr_guid_queue_);
            }
            pub inline fn getServiceTypeGuid(self: *const T, pbstr_guid_service_type_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_ServiceTypeGuid(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pbstr_guid_service_type_);
            }
            pub inline fn putServiceTypeGuid(self: *const T, bstr_guid_service_type_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_ServiceTypeGuid(@as(*const IMSMQQueueInfo4, @ptrCast(self)), bstr_guid_service_type_);
            }
            pub inline fn getLabel(self: *const T, pbstr_label_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_Label(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pbstr_label_);
            }
            pub inline fn putLabel(self: *const T, bstr_label_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_Label(@as(*const IMSMQQueueInfo4, @ptrCast(self)), bstr_label_);
            }
            pub inline fn getPathName(self: *const T, pbstr_path_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_PathName(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pbstr_path_name_);
            }
            pub inline fn putPathName(self: *const T, bstr_path_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_PathName(@as(*const IMSMQQueueInfo4, @ptrCast(self)), bstr_path_name_);
            }
            pub inline fn getFormatName(self: *const T, pbstr_format_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_FormatName(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pbstr_format_name_);
            }
            pub inline fn putFormatName(self: *const T, bstr_format_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_FormatName(@as(*const IMSMQQueueInfo4, @ptrCast(self)), bstr_format_name_);
            }
            pub inline fn getIsTransactional(self: *const T, pis_transactional_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_IsTransactional(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pis_transactional_);
            }
            pub inline fn getPrivLevel(self: *const T, pl_priv_level_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_PrivLevel(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pl_priv_level_);
            }
            pub inline fn putPrivLevel(self: *const T, l_priv_level_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_PrivLevel(@as(*const IMSMQQueueInfo4, @ptrCast(self)), l_priv_level_);
            }
            pub inline fn getJournal(self: *const T, pl_journal_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_Journal(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pl_journal_);
            }
            pub inline fn putJournal(self: *const T, l_journal_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_Journal(@as(*const IMSMQQueueInfo4, @ptrCast(self)), l_journal_);
            }
            pub inline fn getQuota(self: *const T, pl_quota_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_Quota(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pl_quota_);
            }
            pub inline fn putQuota(self: *const T, l_quota_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_Quota(@as(*const IMSMQQueueInfo4, @ptrCast(self)), l_quota_);
            }
            pub inline fn getBasePriority(self: *const T, pl_base_priority_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_BasePriority(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pl_base_priority_);
            }
            pub inline fn putBasePriority(self: *const T, l_base_priority_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_BasePriority(@as(*const IMSMQQueueInfo4, @ptrCast(self)), l_base_priority_);
            }
            pub inline fn getCreateTime(self: *const T, pvar_create_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_CreateTime(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pvar_create_time_);
            }
            pub inline fn getModifyTime(self: *const T, pvar_modify_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_ModifyTime(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pvar_modify_time_);
            }
            pub inline fn getAuthenticate(self: *const T, pl_authenticate_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_Authenticate(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pl_authenticate_);
            }
            pub inline fn putAuthenticate(self: *const T, l_authenticate_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_Authenticate(@as(*const IMSMQQueueInfo4, @ptrCast(self)), l_authenticate_);
            }
            pub inline fn getJournalQuota(self: *const T, pl_journal_quota_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_JournalQuota(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pl_journal_quota_);
            }
            pub inline fn putJournalQuota(self: *const T, l_journal_quota_: i32) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_JournalQuota(@as(*const IMSMQQueueInfo4, @ptrCast(self)), l_journal_quota_);
            }
            pub inline fn getIsWorldReadable(self: *const T, pis_world_readable_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_IsWorldReadable(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pis_world_readable_);
            }
            pub inline fn create(self: *const T, is_transactional_: ?*VARIANT, is_world_readable_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).Create(@as(*const IMSMQQueueInfo4, @ptrCast(self)), is_transactional_, is_world_readable_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).Delete(@as(*const IMSMQQueueInfo4, @ptrCast(self)));
            }
            pub inline fn open(self: *const T, access_: i32, share_mode_: i32, ppq_: ?*?*IMSMQQueue4) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).Open(@as(*const IMSMQQueueInfo4, @ptrCast(self)), access_, share_mode_, ppq_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IMSMQQueueInfo4, @ptrCast(self)));
            }
            pub inline fn update(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).Update(@as(*const IMSMQQueueInfo4, @ptrCast(self)));
            }
            pub inline fn getPathNameDNS(self: *const T, pbstr_path_name_d_n_s_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_PathNameDNS(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pbstr_path_name_d_n_s_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQueueInfo4, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn getSecurity(self: *const T, pvar_security_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_Security(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pvar_security_);
            }
            pub inline fn putSecurity(self: *const T, var_security_: VARIANT) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_Security(@as(*const IMSMQQueueInfo4, @ptrCast(self)), var_security_);
            }
            pub inline fn getIsTransactional2(self: *const T, pis_transactional_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_IsTransactional2(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pis_transactional_);
            }
            pub inline fn getIsWorldReadable2(self: *const T, pis_world_readable_: ?*i16) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_IsWorldReadable2(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pis_world_readable_);
            }
            pub inline fn getMulticastAddress(self: *const T, pbstr_multicast_address_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_MulticastAddress(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pbstr_multicast_address_);
            }
            pub inline fn putMulticastAddress(self: *const T, bstr_multicast_address_: ?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).put_MulticastAddress(@as(*const IMSMQQueueInfo4, @ptrCast(self)), bstr_multicast_address_);
            }
            pub inline fn getADsPath(self: *const T, pbstr_a_ds_path_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQQueueInfo4.VTable, @ptrCast(self.vtable)).get_ADsPath(@as(*const IMSMQQueueInfo4, @ptrCast(self)), pbstr_a_ds_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueue_Value = Guid.initString("d7d6e076-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQQueue = &IID_IMSMQQueue_Value;
pub const IMSMQQueue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Access: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue,
            pl_access: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShareMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue,
            pl_share_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue,
            ppqinfo: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue,
            pl_handle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue,
            pis_open: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IMSMQQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive: *const fn (
            self: *const IMSMQQueue,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek: *const fn (
            self: *const IMSMQQueue,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNotification: *const fn (
            self: *const IMSMQQueue,
            event: ?*IMSMQEvent,
            cursor: ?*VARIANT,
            receive_timeout: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IMSMQQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent: *const fn (
            self: *const IMSMQQueue,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext: *const fn (
            self: *const IMSMQQueue,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent: *const fn (
            self: *const IMSMQQueue,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAccess(self: *const T, pl_access_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).get_Access(@as(*const IMSMQQueue, @ptrCast(self)), pl_access_);
            }
            pub inline fn getShareMode(self: *const T, pl_share_mode_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).get_ShareMode(@as(*const IMSMQQueue, @ptrCast(self)), pl_share_mode_);
            }
            pub inline fn getQueueInfo(self: *const T, ppqinfo_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).get_QueueInfo(@as(*const IMSMQQueue, @ptrCast(self)), ppqinfo_);
            }
            pub inline fn getHandle(self: *const T, pl_handle_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).get_Handle(@as(*const IMSMQQueue, @ptrCast(self)), pl_handle_);
            }
            pub inline fn getIsOpen(self: *const T, pis_open_: ?*i16) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).get_IsOpen(@as(*const IMSMQQueue, @ptrCast(self)), pis_open_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).Close(@as(*const IMSMQQueue, @ptrCast(self)));
            }
            pub inline fn receive(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).Receive(@as(*const IMSMQQueue, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peek(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).Peek(@as(*const IMSMQQueue, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn enableNotification(self: *const T, event_: ?*IMSMQEvent, cursor_: ?*VARIANT, receive_timeout_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).EnableNotification(@as(*const IMSMQQueue, @ptrCast(self)), event_, cursor_, receive_timeout_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMSMQQueue, @ptrCast(self)));
            }
            pub inline fn receiveCurrent(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).ReceiveCurrent(@as(*const IMSMQQueue, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekNext(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).PeekNext(@as(*const IMSMQQueue, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekCurrent(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue.VTable, @ptrCast(self.vtable)).PeekCurrent(@as(*const IMSMQQueue, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueue2_Value = Guid.initString("ef0574e0-06d8-11d3-b100-00e02c074f6b");
pub const IID_IMSMQQueue2 = &IID_IMSMQQueue2_Value;
pub const IMSMQQueue2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Access: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue2,
            pl_access: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShareMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue2,
            pl_share_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue2,
            ppqinfo: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue2,
            pl_handle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue2,
            pis_open: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IMSMQQueue2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive_v1: *const fn (
            self: *const IMSMQQueue2,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek_v1: *const fn (
            self: *const IMSMQQueue2,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNotification: *const fn (
            self: *const IMSMQQueue2,
            event: ?*IMSMQEvent2,
            cursor: ?*VARIANT,
            receive_timeout: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IMSMQQueue2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent_v1: *const fn (
            self: *const IMSMQQueue2,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext_v1: *const fn (
            self: *const IMSMQQueue2,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent_v1: *const fn (
            self: *const IMSMQQueue2,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive: *const fn (
            self: *const IMSMQQueue2,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek: *const fn (
            self: *const IMSMQQueue2,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent: *const fn (
            self: *const IMSMQQueue2,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext: *const fn (
            self: *const IMSMQQueue2,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent: *const fn (
            self: *const IMSMQQueue2,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAccess(self: *const T, pl_access_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).get_Access(@as(*const IMSMQQueue2, @ptrCast(self)), pl_access_);
            }
            pub inline fn getShareMode(self: *const T, pl_share_mode_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).get_ShareMode(@as(*const IMSMQQueue2, @ptrCast(self)), pl_share_mode_);
            }
            pub inline fn getQueueInfo(self: *const T, ppqinfo_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).get_QueueInfo(@as(*const IMSMQQueue2, @ptrCast(self)), ppqinfo_);
            }
            pub inline fn getHandle(self: *const T, pl_handle_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).get_Handle(@as(*const IMSMQQueue2, @ptrCast(self)), pl_handle_);
            }
            pub inline fn getIsOpen(self: *const T, pis_open_: ?*i16) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).get_IsOpen(@as(*const IMSMQQueue2, @ptrCast(self)), pis_open_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).Close(@as(*const IMSMQQueue2, @ptrCast(self)));
            }
            pub inline fn receiveV1(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).Receive_v1(@as(*const IMSMQQueue2, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekV1(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).Peek_v1(@as(*const IMSMQQueue2, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn enableNotification(self: *const T, event_: ?*IMSMQEvent2, cursor_: ?*VARIANT, receive_timeout_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).EnableNotification(@as(*const IMSMQQueue2, @ptrCast(self)), event_, cursor_, receive_timeout_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMSMQQueue2, @ptrCast(self)));
            }
            pub inline fn receiveCurrentV1(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).ReceiveCurrent_v1(@as(*const IMSMQQueue2, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekNextV1(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).PeekNext_v1(@as(*const IMSMQQueue2, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekCurrentV1(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).PeekCurrent_v1(@as(*const IMSMQQueue2, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn receive(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage2) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).Receive(@as(*const IMSMQQueue2, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn peek(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage2) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).Peek(@as(*const IMSMQQueue2, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn receiveCurrent(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage2) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).ReceiveCurrent(@as(*const IMSMQQueue2, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekNext(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage2) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).PeekNext(@as(*const IMSMQQueue2, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekCurrent(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage2) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).PeekCurrent(@as(*const IMSMQQueue2, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQueue2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQueue2, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueue3_Value = Guid.initString("eba96b1b-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueue3 = &IID_IMSMQQueue3_Value;
pub const IMSMQQueue3 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Access: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue3,
            pl_access: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShareMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue3,
            pl_share_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue3,
            ppqinfo: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue3,
            pl_handle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue3,
            pis_open: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IMSMQQueue3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive_v1: *const fn (
            self: *const IMSMQQueue3,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek_v1: *const fn (
            self: *const IMSMQQueue3,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNotification: *const fn (
            self: *const IMSMQQueue3,
            event: ?*IMSMQEvent3,
            cursor: ?*VARIANT,
            receive_timeout: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IMSMQQueue3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent_v1: *const fn (
            self: *const IMSMQQueue3,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext_v1: *const fn (
            self: *const IMSMQQueue3,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent_v1: *const fn (
            self: *const IMSMQQueue3,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive: *const fn (
            self: *const IMSMQQueue3,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek: *const fn (
            self: *const IMSMQQueue3,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent: *const fn (
            self: *const IMSMQQueue3,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext: *const fn (
            self: *const IMSMQQueue3,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent: *const fn (
            self: *const IMSMQQueue3,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue3,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue3,
            pvar_handle: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveByLookupId: *const fn (
            self: *const IMSMQQueue3,
            lookup_id: VARIANT,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveNextByLookupId: *const fn (
            self: *const IMSMQQueue3,
            lookup_id: VARIANT,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceivePreviousByLookupId: *const fn (
            self: *const IMSMQQueue3,
            lookup_id: VARIANT,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveFirstByLookupId: *const fn (
            self: *const IMSMQQueue3,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveLastByLookupId: *const fn (
            self: *const IMSMQQueue3,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekByLookupId: *const fn (
            self: *const IMSMQQueue3,
            lookup_id: VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNextByLookupId: *const fn (
            self: *const IMSMQQueue3,
            lookup_id: VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekPreviousByLookupId: *const fn (
            self: *const IMSMQQueue3,
            lookup_id: VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekFirstByLookupId: *const fn (
            self: *const IMSMQQueue3,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekLastByLookupId: *const fn (
            self: *const IMSMQQueue3,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Purge: *const fn (
            self: *const IMSMQQueue3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue3,
            pis_open: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAccess(self: *const T, pl_access_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).get_Access(@as(*const IMSMQQueue3, @ptrCast(self)), pl_access_);
            }
            pub inline fn getShareMode(self: *const T, pl_share_mode_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).get_ShareMode(@as(*const IMSMQQueue3, @ptrCast(self)), pl_share_mode_);
            }
            pub inline fn getQueueInfo(self: *const T, ppqinfo_: ?*?*IMSMQQueueInfo3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).get_QueueInfo(@as(*const IMSMQQueue3, @ptrCast(self)), ppqinfo_);
            }
            pub inline fn getHandle(self: *const T, pl_handle_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).get_Handle(@as(*const IMSMQQueue3, @ptrCast(self)), pl_handle_);
            }
            pub inline fn getIsOpen(self: *const T, pis_open_: ?*i16) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).get_IsOpen(@as(*const IMSMQQueue3, @ptrCast(self)), pis_open_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).Close(@as(*const IMSMQQueue3, @ptrCast(self)));
            }
            pub inline fn receiveV1(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).Receive_v1(@as(*const IMSMQQueue3, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekV1(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).Peek_v1(@as(*const IMSMQQueue3, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn enableNotification(self: *const T, event_: ?*IMSMQEvent3, cursor_: ?*VARIANT, receive_timeout_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).EnableNotification(@as(*const IMSMQQueue3, @ptrCast(self)), event_, cursor_, receive_timeout_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMSMQQueue3, @ptrCast(self)));
            }
            pub inline fn receiveCurrentV1(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).ReceiveCurrent_v1(@as(*const IMSMQQueue3, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekNextV1(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).PeekNext_v1(@as(*const IMSMQQueue3, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekCurrentV1(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).PeekCurrent_v1(@as(*const IMSMQQueue3, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn receive(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).Receive(@as(*const IMSMQQueue3, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn peek(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).Peek(@as(*const IMSMQQueue3, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn receiveCurrent(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).ReceiveCurrent(@as(*const IMSMQQueue3, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekNext(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).PeekNext(@as(*const IMSMQQueue3, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekCurrent(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).PeekCurrent(@as(*const IMSMQQueue3, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQueue3, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn getHandle2(self: *const T, pvar_handle_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).get_Handle2(@as(*const IMSMQQueue3, @ptrCast(self)), pvar_handle_);
            }
            pub inline fn receiveByLookupId(self: *const T, lookup_id_: VARIANT, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).ReceiveByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), lookup_id_, transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn receiveNextByLookupId(self: *const T, lookup_id_: VARIANT, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).ReceiveNextByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), lookup_id_, transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn receivePreviousByLookupId(self: *const T, lookup_id_: VARIANT, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).ReceivePreviousByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), lookup_id_, transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn receiveFirstByLookupId(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).ReceiveFirstByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn receiveLastByLookupId(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).ReceiveLastByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekByLookupId(self: *const T, lookup_id_: VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).PeekByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), lookup_id_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekNextByLookupId(self: *const T, lookup_id_: VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).PeekNextByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), lookup_id_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekPreviousByLookupId(self: *const T, lookup_id_: VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).PeekPreviousByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), lookup_id_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekFirstByLookupId(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).PeekFirstByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekLastByLookupId(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage3) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).PeekLastByLookupId(@as(*const IMSMQQueue3, @ptrCast(self)), want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn purge(self: *const T) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).Purge(@as(*const IMSMQQueue3, @ptrCast(self)));
            }
            pub inline fn getIsOpen2(self: *const T, pis_open_: ?*i16) HRESULT {
                return @as(*const IMSMQQueue3.VTable, @ptrCast(self.vtable)).get_IsOpen2(@as(*const IMSMQQueue3, @ptrCast(self)), pis_open_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueue4_Value = Guid.initString("eba96b20-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueue4 = &IID_IMSMQQueue4_Value;
pub const IMSMQQueue4 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Access: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue4,
            pl_access: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShareMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue4,
            pl_share_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue4,
            ppqinfo: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue4,
            pl_handle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue4,
            pis_open: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IMSMQQueue4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive_v1: *const fn (
            self: *const IMSMQQueue4,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek_v1: *const fn (
            self: *const IMSMQQueue4,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNotification: *const fn (
            self: *const IMSMQQueue4,
            event: ?*IMSMQEvent3,
            cursor: ?*VARIANT,
            receive_timeout: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IMSMQQueue4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent_v1: *const fn (
            self: *const IMSMQQueue4,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext_v1: *const fn (
            self: *const IMSMQQueue4,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent_v1: *const fn (
            self: *const IMSMQQueue4,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Receive: *const fn (
            self: *const IMSMQQueue4,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Peek: *const fn (
            self: *const IMSMQQueue4,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveCurrent: *const fn (
            self: *const IMSMQQueue4,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNext: *const fn (
            self: *const IMSMQQueue4,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekCurrent: *const fn (
            self: *const IMSMQQueue4,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            receive_timeout: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue4,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue4,
            pvar_handle: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveByLookupId: *const fn (
            self: *const IMSMQQueue4,
            lookup_id: VARIANT,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveNextByLookupId: *const fn (
            self: *const IMSMQQueue4,
            lookup_id: VARIANT,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceivePreviousByLookupId: *const fn (
            self: *const IMSMQQueue4,
            lookup_id: VARIANT,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveFirstByLookupId: *const fn (
            self: *const IMSMQQueue4,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveLastByLookupId: *const fn (
            self: *const IMSMQQueue4,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekByLookupId: *const fn (
            self: *const IMSMQQueue4,
            lookup_id: VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekNextByLookupId: *const fn (
            self: *const IMSMQQueue4,
            lookup_id: VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekPreviousByLookupId: *const fn (
            self: *const IMSMQQueue4,
            lookup_id: VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekFirstByLookupId: *const fn (
            self: *const IMSMQQueue4,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PeekLastByLookupId: *const fn (
            self: *const IMSMQQueue4,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Purge: *const fn (
            self: *const IMSMQQueue4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueue4,
            pis_open: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveByLookupIdAllowPeek: *const fn (
            self: *const IMSMQQueue4,
            lookup_id: VARIANT,
            transaction: ?*VARIANT,
            want_destination_queue: ?*VARIANT,
            want_body: ?*VARIANT,
            want_connector_type: ?*VARIANT,
            ppmsg: ?*?*IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAccess(self: *const T, pl_access_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).get_Access(@as(*const IMSMQQueue4, @ptrCast(self)), pl_access_);
            }
            pub inline fn getShareMode(self: *const T, pl_share_mode_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).get_ShareMode(@as(*const IMSMQQueue4, @ptrCast(self)), pl_share_mode_);
            }
            pub inline fn getQueueInfo(self: *const T, ppqinfo_: ?*?*IMSMQQueueInfo4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).get_QueueInfo(@as(*const IMSMQQueue4, @ptrCast(self)), ppqinfo_);
            }
            pub inline fn getHandle(self: *const T, pl_handle_: ?*i32) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).get_Handle(@as(*const IMSMQQueue4, @ptrCast(self)), pl_handle_);
            }
            pub inline fn getIsOpen(self: *const T, pis_open_: ?*i16) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).get_IsOpen(@as(*const IMSMQQueue4, @ptrCast(self)), pis_open_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).Close(@as(*const IMSMQQueue4, @ptrCast(self)));
            }
            pub inline fn receiveV1(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).Receive_v1(@as(*const IMSMQQueue4, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekV1(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).Peek_v1(@as(*const IMSMQQueue4, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn enableNotification(self: *const T, event_: ?*IMSMQEvent3, cursor_: ?*VARIANT, receive_timeout_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).EnableNotification(@as(*const IMSMQQueue4, @ptrCast(self)), event_, cursor_, receive_timeout_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMSMQQueue4, @ptrCast(self)));
            }
            pub inline fn receiveCurrentV1(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).ReceiveCurrent_v1(@as(*const IMSMQQueue4, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekNextV1(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).PeekNext_v1(@as(*const IMSMQQueue4, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn peekCurrentV1(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).PeekCurrent_v1(@as(*const IMSMQQueue4, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, ppmsg_);
            }
            pub inline fn receive(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).Receive(@as(*const IMSMQQueue4, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn peek(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).Peek(@as(*const IMSMQQueue4, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn receiveCurrent(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).ReceiveCurrent(@as(*const IMSMQQueue4, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekNext(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).PeekNext(@as(*const IMSMQQueue4, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekCurrent(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, receive_timeout_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).PeekCurrent(@as(*const IMSMQQueue4, @ptrCast(self)), want_destination_queue_, want_body_, receive_timeout_, want_connector_type_, ppmsg_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQueue4, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn getHandle2(self: *const T, pvar_handle_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).get_Handle2(@as(*const IMSMQQueue4, @ptrCast(self)), pvar_handle_);
            }
            pub inline fn receiveByLookupId(self: *const T, lookup_id_: VARIANT, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).ReceiveByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), lookup_id_, transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn receiveNextByLookupId(self: *const T, lookup_id_: VARIANT, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).ReceiveNextByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), lookup_id_, transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn receivePreviousByLookupId(self: *const T, lookup_id_: VARIANT, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).ReceivePreviousByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), lookup_id_, transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn receiveFirstByLookupId(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).ReceiveFirstByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn receiveLastByLookupId(self: *const T, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).ReceiveLastByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekByLookupId(self: *const T, lookup_id_: VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).PeekByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), lookup_id_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekNextByLookupId(self: *const T, lookup_id_: VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).PeekNextByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), lookup_id_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekPreviousByLookupId(self: *const T, lookup_id_: VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).PeekPreviousByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), lookup_id_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekFirstByLookupId(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).PeekFirstByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn peekLastByLookupId(self: *const T, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).PeekLastByLookupId(@as(*const IMSMQQueue4, @ptrCast(self)), want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
            pub inline fn purge(self: *const T) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).Purge(@as(*const IMSMQQueue4, @ptrCast(self)));
            }
            pub inline fn getIsOpen2(self: *const T, pis_open_: ?*i16) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).get_IsOpen2(@as(*const IMSMQQueue4, @ptrCast(self)), pis_open_);
            }
            pub inline fn receiveByLookupIdAllowPeek(self: *const T, lookup_id_: VARIANT, transaction_: ?*VARIANT, want_destination_queue_: ?*VARIANT, want_body_: ?*VARIANT, want_connector_type_: ?*VARIANT, ppmsg_: ?*?*IMSMQMessage4) HRESULT {
                return @as(*const IMSMQQueue4.VTable, @ptrCast(self.vtable)).ReceiveByLookupIdAllowPeek(@as(*const IMSMQQueue4, @ptrCast(self)), lookup_id_, transaction_, want_destination_queue_, want_body_, want_connector_type_, ppmsg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQMessage_Value = Guid.initString("d7d6e074-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQMessage = &IID_IMSMQMessage_Value;
pub const IMSMQMessage = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_class: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_priv_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_priv_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_auth_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_auth_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pis_authenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delivery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_delivery: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delivery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_delivery: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_trace: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Trace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_trace: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_journal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_journal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            ppqinfo_response: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo: *const fn (
            self: *const IMSMQMessage,
            pqinfo_response: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_app_specific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_app_specific: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceMachineGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pbstr_guid_src_machine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BodyLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pcb_body: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pvar_body: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            var_body: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            ppqinfo_admin: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo: *const fn (
            self: *const IMSMQMessage,
            pqinfo_admin: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pvar_msg_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CorrelationId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pvar_msg_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CorrelationId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            var_msg_id: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ack: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_ack: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ack: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_ack: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pbstr_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            bstr_label: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReachQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_max_time_to_reach_queue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReachQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_max_time_to_reach_queue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReceive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_max_time_to_receive: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReceive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_max_time_to_receive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_hash_alg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_hash_alg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_encrypt_alg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_encrypt_alg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SentTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pvar_sent_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArrivedTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_arrived_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            ppqinfo_dest: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pvar_sender_cert: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            var_sender_cert: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pvar_sender_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderIdType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            pl_sender_id_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderIdType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage,
            l_sender_id_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn (
            self: *const IMSMQMessage,
            destination_queue: ?*IMSMQQueue,
            transaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext: *const fn (
            self: *const IMSMQMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getClass(self: *const T, pl_class_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_Class(@as(*const IMSMQMessage, @ptrCast(self)), pl_class_);
            }
            pub inline fn getPrivLevel(self: *const T, pl_priv_level_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_PrivLevel(@as(*const IMSMQMessage, @ptrCast(self)), pl_priv_level_);
            }
            pub inline fn putPrivLevel(self: *const T, l_priv_level_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_PrivLevel(@as(*const IMSMQMessage, @ptrCast(self)), l_priv_level_);
            }
            pub inline fn getAuthLevel(self: *const T, pl_auth_level_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_AuthLevel(@as(*const IMSMQMessage, @ptrCast(self)), pl_auth_level_);
            }
            pub inline fn putAuthLevel(self: *const T, l_auth_level_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_AuthLevel(@as(*const IMSMQMessage, @ptrCast(self)), l_auth_level_);
            }
            pub inline fn getIsAuthenticated(self: *const T, pis_authenticated_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_IsAuthenticated(@as(*const IMSMQMessage, @ptrCast(self)), pis_authenticated_);
            }
            pub inline fn getDelivery(self: *const T, pl_delivery_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_Delivery(@as(*const IMSMQMessage, @ptrCast(self)), pl_delivery_);
            }
            pub inline fn putDelivery(self: *const T, l_delivery_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_Delivery(@as(*const IMSMQMessage, @ptrCast(self)), l_delivery_);
            }
            pub inline fn getTrace(self: *const T, pl_trace_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_Trace(@as(*const IMSMQMessage, @ptrCast(self)), pl_trace_);
            }
            pub inline fn putTrace(self: *const T, l_trace_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_Trace(@as(*const IMSMQMessage, @ptrCast(self)), l_trace_);
            }
            pub inline fn getPriority(self: *const T, pl_priority_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IMSMQMessage, @ptrCast(self)), pl_priority_);
            }
            pub inline fn putPriority(self: *const T, l_priority_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_Priority(@as(*const IMSMQMessage, @ptrCast(self)), l_priority_);
            }
            pub inline fn getJournal(self: *const T, pl_journal_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_Journal(@as(*const IMSMQMessage, @ptrCast(self)), pl_journal_);
            }
            pub inline fn putJournal(self: *const T, l_journal_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_Journal(@as(*const IMSMQMessage, @ptrCast(self)), l_journal_);
            }
            pub inline fn getResponseQueueInfo(self: *const T, ppqinfo_response_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_ResponseQueueInfo(@as(*const IMSMQMessage, @ptrCast(self)), ppqinfo_response_);
            }
            pub inline fn putrefResponseQueueInfo(self: *const T, pqinfo_response_: ?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).putref_ResponseQueueInfo(@as(*const IMSMQMessage, @ptrCast(self)), pqinfo_response_);
            }
            pub inline fn getAppSpecific(self: *const T, pl_app_specific_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_AppSpecific(@as(*const IMSMQMessage, @ptrCast(self)), pl_app_specific_);
            }
            pub inline fn putAppSpecific(self: *const T, l_app_specific_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_AppSpecific(@as(*const IMSMQMessage, @ptrCast(self)), l_app_specific_);
            }
            pub inline fn getSourceMachineGuid(self: *const T, pbstr_guid_src_machine_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_SourceMachineGuid(@as(*const IMSMQMessage, @ptrCast(self)), pbstr_guid_src_machine_);
            }
            pub inline fn getBodyLength(self: *const T, pcb_body_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_BodyLength(@as(*const IMSMQMessage, @ptrCast(self)), pcb_body_);
            }
            pub inline fn getBody(self: *const T, pvar_body_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_Body(@as(*const IMSMQMessage, @ptrCast(self)), pvar_body_);
            }
            pub inline fn putBody(self: *const T, var_body_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_Body(@as(*const IMSMQMessage, @ptrCast(self)), var_body_);
            }
            pub inline fn getAdminQueueInfo(self: *const T, ppqinfo_admin_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_AdminQueueInfo(@as(*const IMSMQMessage, @ptrCast(self)), ppqinfo_admin_);
            }
            pub inline fn putrefAdminQueueInfo(self: *const T, pqinfo_admin_: ?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).putref_AdminQueueInfo(@as(*const IMSMQMessage, @ptrCast(self)), pqinfo_admin_);
            }
            pub inline fn getId(self: *const T, pvar_msg_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IMSMQMessage, @ptrCast(self)), pvar_msg_id_);
            }
            pub inline fn getCorrelationId(self: *const T, pvar_msg_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_CorrelationId(@as(*const IMSMQMessage, @ptrCast(self)), pvar_msg_id_);
            }
            pub inline fn putCorrelationId(self: *const T, var_msg_id_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_CorrelationId(@as(*const IMSMQMessage, @ptrCast(self)), var_msg_id_);
            }
            pub inline fn getAck(self: *const T, pl_ack_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_Ack(@as(*const IMSMQMessage, @ptrCast(self)), pl_ack_);
            }
            pub inline fn putAck(self: *const T, l_ack_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_Ack(@as(*const IMSMQMessage, @ptrCast(self)), l_ack_);
            }
            pub inline fn getLabel(self: *const T, pbstr_label_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_Label(@as(*const IMSMQMessage, @ptrCast(self)), pbstr_label_);
            }
            pub inline fn putLabel(self: *const T, bstr_label_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_Label(@as(*const IMSMQMessage, @ptrCast(self)), bstr_label_);
            }
            pub inline fn getMaxTimeToReachQueue(self: *const T, pl_max_time_to_reach_queue_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_MaxTimeToReachQueue(@as(*const IMSMQMessage, @ptrCast(self)), pl_max_time_to_reach_queue_);
            }
            pub inline fn putMaxTimeToReachQueue(self: *const T, l_max_time_to_reach_queue_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_MaxTimeToReachQueue(@as(*const IMSMQMessage, @ptrCast(self)), l_max_time_to_reach_queue_);
            }
            pub inline fn getMaxTimeToReceive(self: *const T, pl_max_time_to_receive_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_MaxTimeToReceive(@as(*const IMSMQMessage, @ptrCast(self)), pl_max_time_to_receive_);
            }
            pub inline fn putMaxTimeToReceive(self: *const T, l_max_time_to_receive_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_MaxTimeToReceive(@as(*const IMSMQMessage, @ptrCast(self)), l_max_time_to_receive_);
            }
            pub inline fn getHashAlgorithm(self: *const T, pl_hash_alg_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_HashAlgorithm(@as(*const IMSMQMessage, @ptrCast(self)), pl_hash_alg_);
            }
            pub inline fn putHashAlgorithm(self: *const T, l_hash_alg_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_HashAlgorithm(@as(*const IMSMQMessage, @ptrCast(self)), l_hash_alg_);
            }
            pub inline fn getEncryptAlgorithm(self: *const T, pl_encrypt_alg_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_EncryptAlgorithm(@as(*const IMSMQMessage, @ptrCast(self)), pl_encrypt_alg_);
            }
            pub inline fn putEncryptAlgorithm(self: *const T, l_encrypt_alg_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_EncryptAlgorithm(@as(*const IMSMQMessage, @ptrCast(self)), l_encrypt_alg_);
            }
            pub inline fn getSentTime(self: *const T, pvar_sent_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_SentTime(@as(*const IMSMQMessage, @ptrCast(self)), pvar_sent_time_);
            }
            pub inline fn getArrivedTime(self: *const T, pl_arrived_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_ArrivedTime(@as(*const IMSMQMessage, @ptrCast(self)), pl_arrived_time_);
            }
            pub inline fn getDestinationQueueInfo(self: *const T, ppqinfo_dest_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_DestinationQueueInfo(@as(*const IMSMQMessage, @ptrCast(self)), ppqinfo_dest_);
            }
            pub inline fn getSenderCertificate(self: *const T, pvar_sender_cert_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_SenderCertificate(@as(*const IMSMQMessage, @ptrCast(self)), pvar_sender_cert_);
            }
            pub inline fn putSenderCertificate(self: *const T, var_sender_cert_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_SenderCertificate(@as(*const IMSMQMessage, @ptrCast(self)), var_sender_cert_);
            }
            pub inline fn getSenderId(self: *const T, pvar_sender_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_SenderId(@as(*const IMSMQMessage, @ptrCast(self)), pvar_sender_id_);
            }
            pub inline fn getSenderIdType(self: *const T, pl_sender_id_type_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).get_SenderIdType(@as(*const IMSMQMessage, @ptrCast(self)), pl_sender_id_type_);
            }
            pub inline fn putSenderIdType(self: *const T, l_sender_id_type_: i32) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).put_SenderIdType(@as(*const IMSMQMessage, @ptrCast(self)), l_sender_id_type_);
            }
            pub inline fn send(self: *const T, destination_queue_: ?*IMSMQQueue, transaction_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).Send(@as(*const IMSMQMessage, @ptrCast(self)), destination_queue_, transaction_);
            }
            pub inline fn attachCurrentSecurityContext(self: *const T) HRESULT {
                return @as(*const IMSMQMessage.VTable, @ptrCast(self.vtable)).AttachCurrentSecurityContext(@as(*const IMSMQMessage, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueueInfos_Value = Guid.initString("d7d6e07d-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQQueueInfos = &IID_IMSMQQueueInfos_Value;
pub const IMSMQQueueInfos = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn (
            self: *const IMSMQQueueInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IMSMQQueueInfos,
            ppqinfo_next: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfos.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMSMQQueueInfos, @ptrCast(self)));
            }
            pub inline fn next(self: *const T, ppqinfo_next_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQQueueInfos.VTable, @ptrCast(self.vtable)).Next(@as(*const IMSMQQueueInfos, @ptrCast(self)), ppqinfo_next_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueueInfos2_Value = Guid.initString("eba96b0f-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfos2 = &IID_IMSMQQueueInfos2_Value;
pub const IMSMQQueueInfos2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn (
            self: *const IMSMQQueueInfos2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IMSMQQueueInfos2,
            ppqinfo_next: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfos2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfos2.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMSMQQueueInfos2, @ptrCast(self)));
            }
            pub inline fn next(self: *const T, ppqinfo_next_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQQueueInfos2.VTable, @ptrCast(self.vtable)).Next(@as(*const IMSMQQueueInfos2, @ptrCast(self)), ppqinfo_next_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQueueInfos2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQueueInfos2, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueueInfos3_Value = Guid.initString("eba96b1e-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfos3 = &IID_IMSMQQueueInfos3_Value;
pub const IMSMQQueueInfos3 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn (
            self: *const IMSMQQueueInfos3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IMSMQQueueInfos3,
            ppqinfo_next: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfos3,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfos3.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMSMQQueueInfos3, @ptrCast(self)));
            }
            pub inline fn next(self: *const T, ppqinfo_next_: ?*?*IMSMQQueueInfo3) HRESULT {
                return @as(*const IMSMQQueueInfos3.VTable, @ptrCast(self.vtable)).Next(@as(*const IMSMQQueueInfos3, @ptrCast(self)), ppqinfo_next_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQueueInfos3.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQueueInfos3, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueueInfos4_Value = Guid.initString("eba96b22-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQueueInfos4 = &IID_IMSMQQueueInfos4_Value;
pub const IMSMQQueueInfos4 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn (
            self: *const IMSMQQueueInfos4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IMSMQQueueInfos4,
            ppqinfo_next: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueInfos4,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMSMQQueueInfos4.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMSMQQueueInfos4, @ptrCast(self)));
            }
            pub inline fn next(self: *const T, ppqinfo_next_: ?*?*IMSMQQueueInfo4) HRESULT {
                return @as(*const IMSMQQueueInfos4.VTable, @ptrCast(self.vtable)).Next(@as(*const IMSMQQueueInfos4, @ptrCast(self)), ppqinfo_next_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQueueInfos4.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQueueInfos4, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQEvent_Value = Guid.initString("d7d6e077-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQEvent = &IID_IMSMQEvent_Value;
pub const IMSMQEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQEvent2_Value = Guid.initString("eba96b12-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQEvent2 = &IID_IMSMQEvent2_Value;
pub const IMSMQEvent2 = extern struct {
    pub const VTable = extern struct {
        base: IMSMQEvent.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQEvent2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMSMQEvent.MethodMixin(T);
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQEvent2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQEvent2, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQEvent3_Value = Guid.initString("eba96b1c-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQEvent3 = &IID_IMSMQEvent3_Value;
pub const IMSMQEvent3 = extern struct {
    pub const VTable = extern struct {
        base: IMSMQEvent2.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMSMQEvent2.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQTransaction_Value = Guid.initString("d7d6e07f-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQTransaction = &IID_IMSMQTransaction_Value;
pub const IMSMQTransaction = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Transaction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQTransaction,
            pl_transaction: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IMSMQTransaction,
            f_retaining: ?*VARIANT,
            grf_t_c: ?*VARIANT,
            grf_r_m: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const IMSMQTransaction,
            f_retaining: ?*VARIANT,
            f_async: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTransaction(self: *const T, pl_transaction_: ?*i32) HRESULT {
                return @as(*const IMSMQTransaction.VTable, @ptrCast(self.vtable)).get_Transaction(@as(*const IMSMQTransaction, @ptrCast(self)), pl_transaction_);
            }
            pub inline fn commit(self: *const T, f_retaining_: ?*VARIANT, grf_t_c_: ?*VARIANT, grf_r_m_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQTransaction.VTable, @ptrCast(self.vtable)).Commit(@as(*const IMSMQTransaction, @ptrCast(self)), f_retaining_, grf_t_c_, grf_r_m_);
            }
            pub inline fn abort(self: *const T, f_retaining_: ?*VARIANT, f_async_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQTransaction.VTable, @ptrCast(self.vtable)).Abort(@as(*const IMSMQTransaction, @ptrCast(self)), f_retaining_, f_async_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQCoordinatedTransactionDispenser_Value = Guid.initString("d7d6e081-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQCoordinatedTransactionDispenser = &IID_IMSMQCoordinatedTransactionDispenser_Value;
pub const IMSMQCoordinatedTransactionDispenser = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn (
            self: *const IMSMQCoordinatedTransactionDispenser,
            ptransaction: ?*?*IMSMQTransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn beginTransaction(self: *const T, ptransaction_: ?*?*IMSMQTransaction) HRESULT {
                return @as(*const IMSMQCoordinatedTransactionDispenser.VTable, @ptrCast(self.vtable)).BeginTransaction(@as(*const IMSMQCoordinatedTransactionDispenser, @ptrCast(self)), ptransaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQTransactionDispenser_Value = Guid.initString("d7d6e083-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQTransactionDispenser = &IID_IMSMQTransactionDispenser_Value;
pub const IMSMQTransactionDispenser = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn (
            self: *const IMSMQTransactionDispenser,
            ptransaction: ?*?*IMSMQTransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn beginTransaction(self: *const T, ptransaction_: ?*?*IMSMQTransaction) HRESULT {
                return @as(*const IMSMQTransactionDispenser.VTable, @ptrCast(self.vtable)).BeginTransaction(@as(*const IMSMQTransactionDispenser, @ptrCast(self)), ptransaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQuery2_Value = Guid.initString("eba96b0e-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQuery2 = &IID_IMSMQQuery2_Value;
pub const IMSMQQuery2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        LookupQueue: *const fn (
            self: *const IMSMQQuery2,
            queue_guid: ?*VARIANT,
            service_type_guid: ?*VARIANT,
            label: ?*VARIANT,
            create_time: ?*VARIANT,
            modify_time: ?*VARIANT,
            rel_service_type: ?*VARIANT,
            rel_label: ?*VARIANT,
            rel_create_time: ?*VARIANT,
            rel_modify_time: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQuery2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn lookupQueue(self: *const T, queue_guid_: ?*VARIANT, service_type_guid_: ?*VARIANT, label_: ?*VARIANT, create_time_: ?*VARIANT, modify_time_: ?*VARIANT, rel_service_type_: ?*VARIANT, rel_label_: ?*VARIANT, rel_create_time_: ?*VARIANT, rel_modify_time_: ?*VARIANT, ppqinfos_: ?*?*IMSMQQueueInfos2) HRESULT {
                return @as(*const IMSMQQuery2.VTable, @ptrCast(self.vtable)).LookupQueue(@as(*const IMSMQQuery2, @ptrCast(self)), queue_guid_, service_type_guid_, label_, create_time_, modify_time_, rel_service_type_, rel_label_, rel_create_time_, rel_modify_time_, ppqinfos_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQuery2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQuery2, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQuery3_Value = Guid.initString("eba96b19-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQuery3 = &IID_IMSMQQuery3_Value;
pub const IMSMQQuery3 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        LookupQueue_v2: *const fn (
            self: *const IMSMQQuery3,
            queue_guid: ?*VARIANT,
            service_type_guid: ?*VARIANT,
            label: ?*VARIANT,
            create_time: ?*VARIANT,
            modify_time: ?*VARIANT,
            rel_service_type: ?*VARIANT,
            rel_label: ?*VARIANT,
            rel_create_time: ?*VARIANT,
            rel_modify_time: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQuery3,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LookupQueue: *const fn (
            self: *const IMSMQQuery3,
            queue_guid: ?*VARIANT,
            service_type_guid: ?*VARIANT,
            label: ?*VARIANT,
            create_time: ?*VARIANT,
            modify_time: ?*VARIANT,
            rel_service_type: ?*VARIANT,
            rel_label: ?*VARIANT,
            rel_create_time: ?*VARIANT,
            rel_modify_time: ?*VARIANT,
            multicast_address: ?*VARIANT,
            rel_multicast_address: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn lookupQueueV2(self: *const T, queue_guid_: ?*VARIANT, service_type_guid_: ?*VARIANT, label_: ?*VARIANT, create_time_: ?*VARIANT, modify_time_: ?*VARIANT, rel_service_type_: ?*VARIANT, rel_label_: ?*VARIANT, rel_create_time_: ?*VARIANT, rel_modify_time_: ?*VARIANT, ppqinfos_: ?*?*IMSMQQueueInfos3) HRESULT {
                return @as(*const IMSMQQuery3.VTable, @ptrCast(self.vtable)).LookupQueue_v2(@as(*const IMSMQQuery3, @ptrCast(self)), queue_guid_, service_type_guid_, label_, create_time_, modify_time_, rel_service_type_, rel_label_, rel_create_time_, rel_modify_time_, ppqinfos_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQuery3.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQuery3, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn lookupQueue(self: *const T, queue_guid_: ?*VARIANT, service_type_guid_: ?*VARIANT, label_: ?*VARIANT, create_time_: ?*VARIANT, modify_time_: ?*VARIANT, rel_service_type_: ?*VARIANT, rel_label_: ?*VARIANT, rel_create_time_: ?*VARIANT, rel_modify_time_: ?*VARIANT, multicast_address_: ?*VARIANT, rel_multicast_address_: ?*VARIANT, ppqinfos_: ?*?*IMSMQQueueInfos3) HRESULT {
                return @as(*const IMSMQQuery3.VTable, @ptrCast(self.vtable)).LookupQueue(@as(*const IMSMQQuery3, @ptrCast(self)), queue_guid_, service_type_guid_, label_, create_time_, modify_time_, rel_service_type_, rel_label_, rel_create_time_, rel_modify_time_, multicast_address_, rel_multicast_address_, ppqinfos_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQuery4_Value = Guid.initString("eba96b24-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQQuery4 = &IID_IMSMQQuery4_Value;
pub const IMSMQQuery4 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        LookupQueue_v2: *const fn (
            self: *const IMSMQQuery4,
            queue_guid: ?*VARIANT,
            service_type_guid: ?*VARIANT,
            label: ?*VARIANT,
            create_time: ?*VARIANT,
            modify_time: ?*VARIANT,
            rel_service_type: ?*VARIANT,
            rel_label: ?*VARIANT,
            rel_create_time: ?*VARIANT,
            rel_modify_time: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQuery4,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LookupQueue: *const fn (
            self: *const IMSMQQuery4,
            queue_guid: ?*VARIANT,
            service_type_guid: ?*VARIANT,
            label: ?*VARIANT,
            create_time: ?*VARIANT,
            modify_time: ?*VARIANT,
            rel_service_type: ?*VARIANT,
            rel_label: ?*VARIANT,
            rel_create_time: ?*VARIANT,
            rel_modify_time: ?*VARIANT,
            multicast_address: ?*VARIANT,
            rel_multicast_address: ?*VARIANT,
            ppqinfos: ?*?*IMSMQQueueInfos4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn lookupQueueV2(self: *const T, queue_guid_: ?*VARIANT, service_type_guid_: ?*VARIANT, label_: ?*VARIANT, create_time_: ?*VARIANT, modify_time_: ?*VARIANT, rel_service_type_: ?*VARIANT, rel_label_: ?*VARIANT, rel_create_time_: ?*VARIANT, rel_modify_time_: ?*VARIANT, ppqinfos_: ?*?*IMSMQQueueInfos4) HRESULT {
                return @as(*const IMSMQQuery4.VTable, @ptrCast(self.vtable)).LookupQueue_v2(@as(*const IMSMQQuery4, @ptrCast(self)), queue_guid_, service_type_guid_, label_, create_time_, modify_time_, rel_service_type_, rel_label_, rel_create_time_, rel_modify_time_, ppqinfos_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQQuery4.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQQuery4, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn lookupQueue(self: *const T, queue_guid_: ?*VARIANT, service_type_guid_: ?*VARIANT, label_: ?*VARIANT, create_time_: ?*VARIANT, modify_time_: ?*VARIANT, rel_service_type_: ?*VARIANT, rel_label_: ?*VARIANT, rel_create_time_: ?*VARIANT, rel_modify_time_: ?*VARIANT, multicast_address_: ?*VARIANT, rel_multicast_address_: ?*VARIANT, ppqinfos_: ?*?*IMSMQQueueInfos4) HRESULT {
                return @as(*const IMSMQQuery4.VTable, @ptrCast(self.vtable)).LookupQueue(@as(*const IMSMQQuery4, @ptrCast(self)), queue_guid_, service_type_guid_, label_, create_time_, modify_time_, rel_service_type_, rel_label_, rel_create_time_, rel_modify_time_, multicast_address_, rel_multicast_address_, ppqinfos_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQMessage2_Value = Guid.initString("d9933be0-a567-11d2-b0f3-00e02c074f6b");
pub const IID_IMSMQMessage2 = &IID_IMSMQMessage2_Value;
pub const IMSMQMessage2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_class: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_priv_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_priv_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_auth_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_auth_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pis_authenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delivery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_delivery: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delivery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_delivery: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_trace: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Trace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_trace: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_journal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_journal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v1: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            ppqinfo_response: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v1: *const fn (
            self: *const IMSMQMessage2,
            pqinfo_response: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_app_specific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_app_specific: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceMachineGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pbstr_guid_src_machine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BodyLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pcb_body: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_body: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            var_body: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v1: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            ppqinfo_admin: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v1: *const fn (
            self: *const IMSMQMessage2,
            pqinfo_admin: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_msg_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CorrelationId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_msg_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CorrelationId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            var_msg_id: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ack: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_ack: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ack: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_ack: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pbstr_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            bstr_label: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReachQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_max_time_to_reach_queue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReachQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_max_time_to_reach_queue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReceive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_max_time_to_receive: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReceive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_max_time_to_receive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_hash_alg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_hash_alg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_encrypt_alg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_encrypt_alg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SentTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_sent_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArrivedTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_arrived_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            ppqinfo_dest: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_sender_cert: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            var_sender_cert: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_sender_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderIdType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_sender_id_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderIdType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_sender_id_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn (
            self: *const IMSMQMessage2,
            destination_queue: ?*IMSMQQueue2,
            transaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext: *const fn (
            self: *const IMSMQMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_sender_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Extension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_extension: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Extension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            var_extension: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectorTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pbstr_guid_connector_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ConnectorTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            bstr_guid_connector_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionStatusQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            ppqinfo_xact_status: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationSymmetricKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_dest_symm_key: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DestinationSymmetricKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            var_dest_symm_key: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Signature: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_signature: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Signature: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            var_signature: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_auth_prov_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_auth_prov_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pbstr_auth_prov_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            bstr_auth_prov_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            var_sender_id: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MsgClass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pl_msg_class: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MsgClass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            l_msg_class: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pvar_xact_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pis_first_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            pis_last_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            ppqinfo_response: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo: *const fn (
            self: *const IMSMQMessage2,
            pqinfo_response: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            ppqinfo_admin: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo: *const fn (
            self: *const IMSMQMessage2,
            pqinfo_admin: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceivedAuthenticationLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage2,
            ps_received_authentication_level: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getClass(self: *const T, pl_class_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Class(@as(*const IMSMQMessage2, @ptrCast(self)), pl_class_);
            }
            pub inline fn getPrivLevel(self: *const T, pl_priv_level_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_PrivLevel(@as(*const IMSMQMessage2, @ptrCast(self)), pl_priv_level_);
            }
            pub inline fn putPrivLevel(self: *const T, l_priv_level_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_PrivLevel(@as(*const IMSMQMessage2, @ptrCast(self)), l_priv_level_);
            }
            pub inline fn getAuthLevel(self: *const T, pl_auth_level_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_AuthLevel(@as(*const IMSMQMessage2, @ptrCast(self)), pl_auth_level_);
            }
            pub inline fn putAuthLevel(self: *const T, l_auth_level_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_AuthLevel(@as(*const IMSMQMessage2, @ptrCast(self)), l_auth_level_);
            }
            pub inline fn getIsAuthenticated(self: *const T, pis_authenticated_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_IsAuthenticated(@as(*const IMSMQMessage2, @ptrCast(self)), pis_authenticated_);
            }
            pub inline fn getDelivery(self: *const T, pl_delivery_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Delivery(@as(*const IMSMQMessage2, @ptrCast(self)), pl_delivery_);
            }
            pub inline fn putDelivery(self: *const T, l_delivery_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_Delivery(@as(*const IMSMQMessage2, @ptrCast(self)), l_delivery_);
            }
            pub inline fn getTrace(self: *const T, pl_trace_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Trace(@as(*const IMSMQMessage2, @ptrCast(self)), pl_trace_);
            }
            pub inline fn putTrace(self: *const T, l_trace_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_Trace(@as(*const IMSMQMessage2, @ptrCast(self)), l_trace_);
            }
            pub inline fn getPriority(self: *const T, pl_priority_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IMSMQMessage2, @ptrCast(self)), pl_priority_);
            }
            pub inline fn putPriority(self: *const T, l_priority_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_Priority(@as(*const IMSMQMessage2, @ptrCast(self)), l_priority_);
            }
            pub inline fn getJournal(self: *const T, pl_journal_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Journal(@as(*const IMSMQMessage2, @ptrCast(self)), pl_journal_);
            }
            pub inline fn putJournal(self: *const T, l_journal_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_Journal(@as(*const IMSMQMessage2, @ptrCast(self)), l_journal_);
            }
            pub inline fn getResponseQueueInfoV1(self: *const T, ppqinfo_response_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_ResponseQueueInfo_v1(@as(*const IMSMQMessage2, @ptrCast(self)), ppqinfo_response_);
            }
            pub inline fn putrefResponseQueueInfoV1(self: *const T, pqinfo_response_: ?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).putref_ResponseQueueInfo_v1(@as(*const IMSMQMessage2, @ptrCast(self)), pqinfo_response_);
            }
            pub inline fn getAppSpecific(self: *const T, pl_app_specific_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_AppSpecific(@as(*const IMSMQMessage2, @ptrCast(self)), pl_app_specific_);
            }
            pub inline fn putAppSpecific(self: *const T, l_app_specific_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_AppSpecific(@as(*const IMSMQMessage2, @ptrCast(self)), l_app_specific_);
            }
            pub inline fn getSourceMachineGuid(self: *const T, pbstr_guid_src_machine_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_SourceMachineGuid(@as(*const IMSMQMessage2, @ptrCast(self)), pbstr_guid_src_machine_);
            }
            pub inline fn getBodyLength(self: *const T, pcb_body_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_BodyLength(@as(*const IMSMQMessage2, @ptrCast(self)), pcb_body_);
            }
            pub inline fn getBody(self: *const T, pvar_body_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Body(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_body_);
            }
            pub inline fn putBody(self: *const T, var_body_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_Body(@as(*const IMSMQMessage2, @ptrCast(self)), var_body_);
            }
            pub inline fn getAdminQueueInfoV1(self: *const T, ppqinfo_admin_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_AdminQueueInfo_v1(@as(*const IMSMQMessage2, @ptrCast(self)), ppqinfo_admin_);
            }
            pub inline fn putrefAdminQueueInfoV1(self: *const T, pqinfo_admin_: ?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).putref_AdminQueueInfo_v1(@as(*const IMSMQMessage2, @ptrCast(self)), pqinfo_admin_);
            }
            pub inline fn getId(self: *const T, pvar_msg_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_msg_id_);
            }
            pub inline fn getCorrelationId(self: *const T, pvar_msg_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_CorrelationId(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_msg_id_);
            }
            pub inline fn putCorrelationId(self: *const T, var_msg_id_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_CorrelationId(@as(*const IMSMQMessage2, @ptrCast(self)), var_msg_id_);
            }
            pub inline fn getAck(self: *const T, pl_ack_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Ack(@as(*const IMSMQMessage2, @ptrCast(self)), pl_ack_);
            }
            pub inline fn putAck(self: *const T, l_ack_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_Ack(@as(*const IMSMQMessage2, @ptrCast(self)), l_ack_);
            }
            pub inline fn getLabel(self: *const T, pbstr_label_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Label(@as(*const IMSMQMessage2, @ptrCast(self)), pbstr_label_);
            }
            pub inline fn putLabel(self: *const T, bstr_label_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_Label(@as(*const IMSMQMessage2, @ptrCast(self)), bstr_label_);
            }
            pub inline fn getMaxTimeToReachQueue(self: *const T, pl_max_time_to_reach_queue_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_MaxTimeToReachQueue(@as(*const IMSMQMessage2, @ptrCast(self)), pl_max_time_to_reach_queue_);
            }
            pub inline fn putMaxTimeToReachQueue(self: *const T, l_max_time_to_reach_queue_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_MaxTimeToReachQueue(@as(*const IMSMQMessage2, @ptrCast(self)), l_max_time_to_reach_queue_);
            }
            pub inline fn getMaxTimeToReceive(self: *const T, pl_max_time_to_receive_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_MaxTimeToReceive(@as(*const IMSMQMessage2, @ptrCast(self)), pl_max_time_to_receive_);
            }
            pub inline fn putMaxTimeToReceive(self: *const T, l_max_time_to_receive_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_MaxTimeToReceive(@as(*const IMSMQMessage2, @ptrCast(self)), l_max_time_to_receive_);
            }
            pub inline fn getHashAlgorithm(self: *const T, pl_hash_alg_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_HashAlgorithm(@as(*const IMSMQMessage2, @ptrCast(self)), pl_hash_alg_);
            }
            pub inline fn putHashAlgorithm(self: *const T, l_hash_alg_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_HashAlgorithm(@as(*const IMSMQMessage2, @ptrCast(self)), l_hash_alg_);
            }
            pub inline fn getEncryptAlgorithm(self: *const T, pl_encrypt_alg_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_EncryptAlgorithm(@as(*const IMSMQMessage2, @ptrCast(self)), pl_encrypt_alg_);
            }
            pub inline fn putEncryptAlgorithm(self: *const T, l_encrypt_alg_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_EncryptAlgorithm(@as(*const IMSMQMessage2, @ptrCast(self)), l_encrypt_alg_);
            }
            pub inline fn getSentTime(self: *const T, pvar_sent_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_SentTime(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_sent_time_);
            }
            pub inline fn getArrivedTime(self: *const T, pl_arrived_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_ArrivedTime(@as(*const IMSMQMessage2, @ptrCast(self)), pl_arrived_time_);
            }
            pub inline fn getDestinationQueueInfo(self: *const T, ppqinfo_dest_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_DestinationQueueInfo(@as(*const IMSMQMessage2, @ptrCast(self)), ppqinfo_dest_);
            }
            pub inline fn getSenderCertificate(self: *const T, pvar_sender_cert_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_SenderCertificate(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_sender_cert_);
            }
            pub inline fn putSenderCertificate(self: *const T, var_sender_cert_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_SenderCertificate(@as(*const IMSMQMessage2, @ptrCast(self)), var_sender_cert_);
            }
            pub inline fn getSenderId(self: *const T, pvar_sender_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_SenderId(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_sender_id_);
            }
            pub inline fn getSenderIdType(self: *const T, pl_sender_id_type_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_SenderIdType(@as(*const IMSMQMessage2, @ptrCast(self)), pl_sender_id_type_);
            }
            pub inline fn putSenderIdType(self: *const T, l_sender_id_type_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_SenderIdType(@as(*const IMSMQMessage2, @ptrCast(self)), l_sender_id_type_);
            }
            pub inline fn send(self: *const T, destination_queue_: ?*IMSMQQueue2, transaction_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).Send(@as(*const IMSMQMessage2, @ptrCast(self)), destination_queue_, transaction_);
            }
            pub inline fn attachCurrentSecurityContext(self: *const T) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).AttachCurrentSecurityContext(@as(*const IMSMQMessage2, @ptrCast(self)));
            }
            pub inline fn getSenderVersion(self: *const T, pl_sender_version_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_SenderVersion(@as(*const IMSMQMessage2, @ptrCast(self)), pl_sender_version_);
            }
            pub inline fn getExtension(self: *const T, pvar_extension_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Extension(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_extension_);
            }
            pub inline fn putExtension(self: *const T, var_extension_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_Extension(@as(*const IMSMQMessage2, @ptrCast(self)), var_extension_);
            }
            pub inline fn getConnectorTypeGuid(self: *const T, pbstr_guid_connector_type_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_ConnectorTypeGuid(@as(*const IMSMQMessage2, @ptrCast(self)), pbstr_guid_connector_type_);
            }
            pub inline fn putConnectorTypeGuid(self: *const T, bstr_guid_connector_type_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_ConnectorTypeGuid(@as(*const IMSMQMessage2, @ptrCast(self)), bstr_guid_connector_type_);
            }
            pub inline fn getTransactionStatusQueueInfo(self: *const T, ppqinfo_xact_status_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_TransactionStatusQueueInfo(@as(*const IMSMQMessage2, @ptrCast(self)), ppqinfo_xact_status_);
            }
            pub inline fn getDestinationSymmetricKey(self: *const T, pvar_dest_symm_key_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_DestinationSymmetricKey(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_dest_symm_key_);
            }
            pub inline fn putDestinationSymmetricKey(self: *const T, var_dest_symm_key_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_DestinationSymmetricKey(@as(*const IMSMQMessage2, @ptrCast(self)), var_dest_symm_key_);
            }
            pub inline fn getSignature(self: *const T, pvar_signature_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Signature(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_signature_);
            }
            pub inline fn putSignature(self: *const T, var_signature_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_Signature(@as(*const IMSMQMessage2, @ptrCast(self)), var_signature_);
            }
            pub inline fn getAuthenticationProviderType(self: *const T, pl_auth_prov_type_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_AuthenticationProviderType(@as(*const IMSMQMessage2, @ptrCast(self)), pl_auth_prov_type_);
            }
            pub inline fn putAuthenticationProviderType(self: *const T, l_auth_prov_type_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_AuthenticationProviderType(@as(*const IMSMQMessage2, @ptrCast(self)), l_auth_prov_type_);
            }
            pub inline fn getAuthenticationProviderName(self: *const T, pbstr_auth_prov_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_AuthenticationProviderName(@as(*const IMSMQMessage2, @ptrCast(self)), pbstr_auth_prov_name_);
            }
            pub inline fn putAuthenticationProviderName(self: *const T, bstr_auth_prov_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_AuthenticationProviderName(@as(*const IMSMQMessage2, @ptrCast(self)), bstr_auth_prov_name_);
            }
            pub inline fn putSenderId(self: *const T, var_sender_id_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_SenderId(@as(*const IMSMQMessage2, @ptrCast(self)), var_sender_id_);
            }
            pub inline fn getMsgClass(self: *const T, pl_msg_class_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_MsgClass(@as(*const IMSMQMessage2, @ptrCast(self)), pl_msg_class_);
            }
            pub inline fn putMsgClass(self: *const T, l_msg_class_: i32) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).put_MsgClass(@as(*const IMSMQMessage2, @ptrCast(self)), l_msg_class_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQMessage2, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn getTransactionId(self: *const T, pvar_xact_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_TransactionId(@as(*const IMSMQMessage2, @ptrCast(self)), pvar_xact_id_);
            }
            pub inline fn getIsFirstInTransaction(self: *const T, pis_first_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_IsFirstInTransaction(@as(*const IMSMQMessage2, @ptrCast(self)), pis_first_in_xact_);
            }
            pub inline fn getIsLastInTransaction(self: *const T, pis_last_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_IsLastInTransaction(@as(*const IMSMQMessage2, @ptrCast(self)), pis_last_in_xact_);
            }
            pub inline fn getResponseQueueInfo(self: *const T, ppqinfo_response_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_ResponseQueueInfo(@as(*const IMSMQMessage2, @ptrCast(self)), ppqinfo_response_);
            }
            pub inline fn putrefResponseQueueInfo(self: *const T, pqinfo_response_: ?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).putref_ResponseQueueInfo(@as(*const IMSMQMessage2, @ptrCast(self)), pqinfo_response_);
            }
            pub inline fn getAdminQueueInfo(self: *const T, ppqinfo_admin_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_AdminQueueInfo(@as(*const IMSMQMessage2, @ptrCast(self)), ppqinfo_admin_);
            }
            pub inline fn putrefAdminQueueInfo(self: *const T, pqinfo_admin_: ?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).putref_AdminQueueInfo(@as(*const IMSMQMessage2, @ptrCast(self)), pqinfo_admin_);
            }
            pub inline fn getReceivedAuthenticationLevel(self: *const T, ps_received_authentication_level_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage2.VTable, @ptrCast(self.vtable)).get_ReceivedAuthenticationLevel(@as(*const IMSMQMessage2, @ptrCast(self)), ps_received_authentication_level_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQMessage3_Value = Guid.initString("eba96b1a-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQMessage3 = &IID_IMSMQMessage3_Value;
pub const IMSMQMessage3 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_class: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_priv_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_priv_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_auth_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_auth_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pis_authenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delivery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_delivery: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delivery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_delivery: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_trace: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Trace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_trace: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_journal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_journal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v1: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppqinfo_response: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v1: *const fn (
            self: *const IMSMQMessage3,
            pqinfo_response: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_app_specific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_app_specific: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceMachineGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pbstr_guid_src_machine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BodyLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pcb_body: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_body: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            var_body: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v1: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppqinfo_admin: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v1: *const fn (
            self: *const IMSMQMessage3,
            pqinfo_admin: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_msg_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CorrelationId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_msg_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CorrelationId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            var_msg_id: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ack: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_ack: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ack: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_ack: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pbstr_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            bstr_label: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReachQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_max_time_to_reach_queue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReachQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_max_time_to_reach_queue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReceive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_max_time_to_receive: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReceive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_max_time_to_receive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_hash_alg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_hash_alg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_encrypt_alg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_encrypt_alg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SentTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_sent_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArrivedTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_arrived_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppqinfo_dest: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_sender_cert: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            var_sender_cert: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_sender_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderIdType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_sender_id_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderIdType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_sender_id_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn (
            self: *const IMSMQMessage3,
            destination_queue: ?*IDispatch,
            transaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext: *const fn (
            self: *const IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_sender_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Extension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_extension: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Extension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            var_extension: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectorTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pbstr_guid_connector_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ConnectorTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            bstr_guid_connector_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionStatusQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppqinfo_xact_status: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationSymmetricKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_dest_symm_key: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DestinationSymmetricKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            var_dest_symm_key: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Signature: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_signature: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Signature: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            var_signature: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_auth_prov_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_auth_prov_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pbstr_auth_prov_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            bstr_auth_prov_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            var_sender_id: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MsgClass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pl_msg_class: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MsgClass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            l_msg_class: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_xact_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pis_first_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pis_last_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppqinfo_response: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v2: *const fn (
            self: *const IMSMQMessage3,
            pqinfo_response: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppqinfo_admin: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v2: *const fn (
            self: *const IMSMQMessage3,
            pqinfo_admin: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceivedAuthenticationLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ps_received_authentication_level: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppqinfo_response: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo: *const fn (
            self: *const IMSMQMessage3,
            pqinfo_response: ?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppqinfo_admin: ?*?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo: *const fn (
            self: *const IMSMQMessage3,
            pqinfo_admin: ?*IMSMQQueueInfo3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseDestination: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppdest_response: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseDestination: *const fn (
            self: *const IMSMQMessage3,
            pdest_response: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Destination: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            ppdest_destination: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LookupId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_lookup_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pis_authenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pis_first_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pis_last_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext2: *const fn (
            self: *const IMSMQMessage3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SoapEnvelope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pbstr_soap_envelope: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CompoundMessage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            pvar_compound_message: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SoapHeader: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            bstr_soap_header: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SoapBody: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage3,
            bstr_soap_body: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getClass(self: *const T, pl_class_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Class(@as(*const IMSMQMessage3, @ptrCast(self)), pl_class_);
            }
            pub inline fn getPrivLevel(self: *const T, pl_priv_level_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_PrivLevel(@as(*const IMSMQMessage3, @ptrCast(self)), pl_priv_level_);
            }
            pub inline fn putPrivLevel(self: *const T, l_priv_level_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_PrivLevel(@as(*const IMSMQMessage3, @ptrCast(self)), l_priv_level_);
            }
            pub inline fn getAuthLevel(self: *const T, pl_auth_level_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_AuthLevel(@as(*const IMSMQMessage3, @ptrCast(self)), pl_auth_level_);
            }
            pub inline fn putAuthLevel(self: *const T, l_auth_level_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_AuthLevel(@as(*const IMSMQMessage3, @ptrCast(self)), l_auth_level_);
            }
            pub inline fn getIsAuthenticated(self: *const T, pis_authenticated_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_IsAuthenticated(@as(*const IMSMQMessage3, @ptrCast(self)), pis_authenticated_);
            }
            pub inline fn getDelivery(self: *const T, pl_delivery_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Delivery(@as(*const IMSMQMessage3, @ptrCast(self)), pl_delivery_);
            }
            pub inline fn putDelivery(self: *const T, l_delivery_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_Delivery(@as(*const IMSMQMessage3, @ptrCast(self)), l_delivery_);
            }
            pub inline fn getTrace(self: *const T, pl_trace_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Trace(@as(*const IMSMQMessage3, @ptrCast(self)), pl_trace_);
            }
            pub inline fn putTrace(self: *const T, l_trace_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_Trace(@as(*const IMSMQMessage3, @ptrCast(self)), l_trace_);
            }
            pub inline fn getPriority(self: *const T, pl_priority_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IMSMQMessage3, @ptrCast(self)), pl_priority_);
            }
            pub inline fn putPriority(self: *const T, l_priority_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_Priority(@as(*const IMSMQMessage3, @ptrCast(self)), l_priority_);
            }
            pub inline fn getJournal(self: *const T, pl_journal_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Journal(@as(*const IMSMQMessage3, @ptrCast(self)), pl_journal_);
            }
            pub inline fn putJournal(self: *const T, l_journal_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_Journal(@as(*const IMSMQMessage3, @ptrCast(self)), l_journal_);
            }
            pub inline fn getResponseQueueInfoV1(self: *const T, ppqinfo_response_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_ResponseQueueInfo_v1(@as(*const IMSMQMessage3, @ptrCast(self)), ppqinfo_response_);
            }
            pub inline fn putrefResponseQueueInfoV1(self: *const T, pqinfo_response_: ?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).putref_ResponseQueueInfo_v1(@as(*const IMSMQMessage3, @ptrCast(self)), pqinfo_response_);
            }
            pub inline fn getAppSpecific(self: *const T, pl_app_specific_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_AppSpecific(@as(*const IMSMQMessage3, @ptrCast(self)), pl_app_specific_);
            }
            pub inline fn putAppSpecific(self: *const T, l_app_specific_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_AppSpecific(@as(*const IMSMQMessage3, @ptrCast(self)), l_app_specific_);
            }
            pub inline fn getSourceMachineGuid(self: *const T, pbstr_guid_src_machine_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_SourceMachineGuid(@as(*const IMSMQMessage3, @ptrCast(self)), pbstr_guid_src_machine_);
            }
            pub inline fn getBodyLength(self: *const T, pcb_body_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_BodyLength(@as(*const IMSMQMessage3, @ptrCast(self)), pcb_body_);
            }
            pub inline fn getBody(self: *const T, pvar_body_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Body(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_body_);
            }
            pub inline fn putBody(self: *const T, var_body_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_Body(@as(*const IMSMQMessage3, @ptrCast(self)), var_body_);
            }
            pub inline fn getAdminQueueInfoV1(self: *const T, ppqinfo_admin_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_AdminQueueInfo_v1(@as(*const IMSMQMessage3, @ptrCast(self)), ppqinfo_admin_);
            }
            pub inline fn putrefAdminQueueInfoV1(self: *const T, pqinfo_admin_: ?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).putref_AdminQueueInfo_v1(@as(*const IMSMQMessage3, @ptrCast(self)), pqinfo_admin_);
            }
            pub inline fn getId(self: *const T, pvar_msg_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_msg_id_);
            }
            pub inline fn getCorrelationId(self: *const T, pvar_msg_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_CorrelationId(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_msg_id_);
            }
            pub inline fn putCorrelationId(self: *const T, var_msg_id_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_CorrelationId(@as(*const IMSMQMessage3, @ptrCast(self)), var_msg_id_);
            }
            pub inline fn getAck(self: *const T, pl_ack_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Ack(@as(*const IMSMQMessage3, @ptrCast(self)), pl_ack_);
            }
            pub inline fn putAck(self: *const T, l_ack_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_Ack(@as(*const IMSMQMessage3, @ptrCast(self)), l_ack_);
            }
            pub inline fn getLabel(self: *const T, pbstr_label_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Label(@as(*const IMSMQMessage3, @ptrCast(self)), pbstr_label_);
            }
            pub inline fn putLabel(self: *const T, bstr_label_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_Label(@as(*const IMSMQMessage3, @ptrCast(self)), bstr_label_);
            }
            pub inline fn getMaxTimeToReachQueue(self: *const T, pl_max_time_to_reach_queue_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_MaxTimeToReachQueue(@as(*const IMSMQMessage3, @ptrCast(self)), pl_max_time_to_reach_queue_);
            }
            pub inline fn putMaxTimeToReachQueue(self: *const T, l_max_time_to_reach_queue_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_MaxTimeToReachQueue(@as(*const IMSMQMessage3, @ptrCast(self)), l_max_time_to_reach_queue_);
            }
            pub inline fn getMaxTimeToReceive(self: *const T, pl_max_time_to_receive_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_MaxTimeToReceive(@as(*const IMSMQMessage3, @ptrCast(self)), pl_max_time_to_receive_);
            }
            pub inline fn putMaxTimeToReceive(self: *const T, l_max_time_to_receive_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_MaxTimeToReceive(@as(*const IMSMQMessage3, @ptrCast(self)), l_max_time_to_receive_);
            }
            pub inline fn getHashAlgorithm(self: *const T, pl_hash_alg_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_HashAlgorithm(@as(*const IMSMQMessage3, @ptrCast(self)), pl_hash_alg_);
            }
            pub inline fn putHashAlgorithm(self: *const T, l_hash_alg_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_HashAlgorithm(@as(*const IMSMQMessage3, @ptrCast(self)), l_hash_alg_);
            }
            pub inline fn getEncryptAlgorithm(self: *const T, pl_encrypt_alg_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_EncryptAlgorithm(@as(*const IMSMQMessage3, @ptrCast(self)), pl_encrypt_alg_);
            }
            pub inline fn putEncryptAlgorithm(self: *const T, l_encrypt_alg_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_EncryptAlgorithm(@as(*const IMSMQMessage3, @ptrCast(self)), l_encrypt_alg_);
            }
            pub inline fn getSentTime(self: *const T, pvar_sent_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_SentTime(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_sent_time_);
            }
            pub inline fn getArrivedTime(self: *const T, pl_arrived_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_ArrivedTime(@as(*const IMSMQMessage3, @ptrCast(self)), pl_arrived_time_);
            }
            pub inline fn getDestinationQueueInfo(self: *const T, ppqinfo_dest_: ?*?*IMSMQQueueInfo3) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_DestinationQueueInfo(@as(*const IMSMQMessage3, @ptrCast(self)), ppqinfo_dest_);
            }
            pub inline fn getSenderCertificate(self: *const T, pvar_sender_cert_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_SenderCertificate(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_sender_cert_);
            }
            pub inline fn putSenderCertificate(self: *const T, var_sender_cert_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_SenderCertificate(@as(*const IMSMQMessage3, @ptrCast(self)), var_sender_cert_);
            }
            pub inline fn getSenderId(self: *const T, pvar_sender_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_SenderId(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_sender_id_);
            }
            pub inline fn getSenderIdType(self: *const T, pl_sender_id_type_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_SenderIdType(@as(*const IMSMQMessage3, @ptrCast(self)), pl_sender_id_type_);
            }
            pub inline fn putSenderIdType(self: *const T, l_sender_id_type_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_SenderIdType(@as(*const IMSMQMessage3, @ptrCast(self)), l_sender_id_type_);
            }
            pub inline fn send(self: *const T, destination_queue_: ?*IDispatch, transaction_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).Send(@as(*const IMSMQMessage3, @ptrCast(self)), destination_queue_, transaction_);
            }
            pub inline fn attachCurrentSecurityContext(self: *const T) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).AttachCurrentSecurityContext(@as(*const IMSMQMessage3, @ptrCast(self)));
            }
            pub inline fn getSenderVersion(self: *const T, pl_sender_version_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_SenderVersion(@as(*const IMSMQMessage3, @ptrCast(self)), pl_sender_version_);
            }
            pub inline fn getExtension(self: *const T, pvar_extension_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Extension(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_extension_);
            }
            pub inline fn putExtension(self: *const T, var_extension_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_Extension(@as(*const IMSMQMessage3, @ptrCast(self)), var_extension_);
            }
            pub inline fn getConnectorTypeGuid(self: *const T, pbstr_guid_connector_type_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_ConnectorTypeGuid(@as(*const IMSMQMessage3, @ptrCast(self)), pbstr_guid_connector_type_);
            }
            pub inline fn putConnectorTypeGuid(self: *const T, bstr_guid_connector_type_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_ConnectorTypeGuid(@as(*const IMSMQMessage3, @ptrCast(self)), bstr_guid_connector_type_);
            }
            pub inline fn getTransactionStatusQueueInfo(self: *const T, ppqinfo_xact_status_: ?*?*IMSMQQueueInfo3) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_TransactionStatusQueueInfo(@as(*const IMSMQMessage3, @ptrCast(self)), ppqinfo_xact_status_);
            }
            pub inline fn getDestinationSymmetricKey(self: *const T, pvar_dest_symm_key_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_DestinationSymmetricKey(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_dest_symm_key_);
            }
            pub inline fn putDestinationSymmetricKey(self: *const T, var_dest_symm_key_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_DestinationSymmetricKey(@as(*const IMSMQMessage3, @ptrCast(self)), var_dest_symm_key_);
            }
            pub inline fn getSignature(self: *const T, pvar_signature_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Signature(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_signature_);
            }
            pub inline fn putSignature(self: *const T, var_signature_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_Signature(@as(*const IMSMQMessage3, @ptrCast(self)), var_signature_);
            }
            pub inline fn getAuthenticationProviderType(self: *const T, pl_auth_prov_type_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_AuthenticationProviderType(@as(*const IMSMQMessage3, @ptrCast(self)), pl_auth_prov_type_);
            }
            pub inline fn putAuthenticationProviderType(self: *const T, l_auth_prov_type_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_AuthenticationProviderType(@as(*const IMSMQMessage3, @ptrCast(self)), l_auth_prov_type_);
            }
            pub inline fn getAuthenticationProviderName(self: *const T, pbstr_auth_prov_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_AuthenticationProviderName(@as(*const IMSMQMessage3, @ptrCast(self)), pbstr_auth_prov_name_);
            }
            pub inline fn putAuthenticationProviderName(self: *const T, bstr_auth_prov_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_AuthenticationProviderName(@as(*const IMSMQMessage3, @ptrCast(self)), bstr_auth_prov_name_);
            }
            pub inline fn putSenderId(self: *const T, var_sender_id_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_SenderId(@as(*const IMSMQMessage3, @ptrCast(self)), var_sender_id_);
            }
            pub inline fn getMsgClass(self: *const T, pl_msg_class_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_MsgClass(@as(*const IMSMQMessage3, @ptrCast(self)), pl_msg_class_);
            }
            pub inline fn putMsgClass(self: *const T, l_msg_class_: i32) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_MsgClass(@as(*const IMSMQMessage3, @ptrCast(self)), l_msg_class_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQMessage3, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn getTransactionId(self: *const T, pvar_xact_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_TransactionId(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_xact_id_);
            }
            pub inline fn getIsFirstInTransaction(self: *const T, pis_first_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_IsFirstInTransaction(@as(*const IMSMQMessage3, @ptrCast(self)), pis_first_in_xact_);
            }
            pub inline fn getIsLastInTransaction(self: *const T, pis_last_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_IsLastInTransaction(@as(*const IMSMQMessage3, @ptrCast(self)), pis_last_in_xact_);
            }
            pub inline fn getResponseQueueInfoV2(self: *const T, ppqinfo_response_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_ResponseQueueInfo_v2(@as(*const IMSMQMessage3, @ptrCast(self)), ppqinfo_response_);
            }
            pub inline fn putrefResponseQueueInfoV2(self: *const T, pqinfo_response_: ?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).putref_ResponseQueueInfo_v2(@as(*const IMSMQMessage3, @ptrCast(self)), pqinfo_response_);
            }
            pub inline fn getAdminQueueInfoV2(self: *const T, ppqinfo_admin_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_AdminQueueInfo_v2(@as(*const IMSMQMessage3, @ptrCast(self)), ppqinfo_admin_);
            }
            pub inline fn putrefAdminQueueInfoV2(self: *const T, pqinfo_admin_: ?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).putref_AdminQueueInfo_v2(@as(*const IMSMQMessage3, @ptrCast(self)), pqinfo_admin_);
            }
            pub inline fn getReceivedAuthenticationLevel(self: *const T, ps_received_authentication_level_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_ReceivedAuthenticationLevel(@as(*const IMSMQMessage3, @ptrCast(self)), ps_received_authentication_level_);
            }
            pub inline fn getResponseQueueInfo(self: *const T, ppqinfo_response_: ?*?*IMSMQQueueInfo3) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_ResponseQueueInfo(@as(*const IMSMQMessage3, @ptrCast(self)), ppqinfo_response_);
            }
            pub inline fn putrefResponseQueueInfo(self: *const T, pqinfo_response_: ?*IMSMQQueueInfo3) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).putref_ResponseQueueInfo(@as(*const IMSMQMessage3, @ptrCast(self)), pqinfo_response_);
            }
            pub inline fn getAdminQueueInfo(self: *const T, ppqinfo_admin_: ?*?*IMSMQQueueInfo3) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_AdminQueueInfo(@as(*const IMSMQMessage3, @ptrCast(self)), ppqinfo_admin_);
            }
            pub inline fn putrefAdminQueueInfo(self: *const T, pqinfo_admin_: ?*IMSMQQueueInfo3) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).putref_AdminQueueInfo(@as(*const IMSMQMessage3, @ptrCast(self)), pqinfo_admin_);
            }
            pub inline fn getResponseDestination(self: *const T, ppdest_response_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_ResponseDestination(@as(*const IMSMQMessage3, @ptrCast(self)), ppdest_response_);
            }
            pub inline fn putrefResponseDestination(self: *const T, pdest_response_: ?*IDispatch) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).putref_ResponseDestination(@as(*const IMSMQMessage3, @ptrCast(self)), pdest_response_);
            }
            pub inline fn getDestination(self: *const T, ppdest_destination_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_Destination(@as(*const IMSMQMessage3, @ptrCast(self)), ppdest_destination_);
            }
            pub inline fn getLookupId(self: *const T, pvar_lookup_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_LookupId(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_lookup_id_);
            }
            pub inline fn getIsAuthenticated2(self: *const T, pis_authenticated_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_IsAuthenticated2(@as(*const IMSMQMessage3, @ptrCast(self)), pis_authenticated_);
            }
            pub inline fn getIsFirstInTransaction2(self: *const T, pis_first_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_IsFirstInTransaction2(@as(*const IMSMQMessage3, @ptrCast(self)), pis_first_in_xact_);
            }
            pub inline fn getIsLastInTransaction2(self: *const T, pis_last_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_IsLastInTransaction2(@as(*const IMSMQMessage3, @ptrCast(self)), pis_last_in_xact_);
            }
            pub inline fn attachCurrentSecurityContext2(self: *const T) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).AttachCurrentSecurityContext2(@as(*const IMSMQMessage3, @ptrCast(self)));
            }
            pub inline fn getSoapEnvelope(self: *const T, pbstr_soap_envelope_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_SoapEnvelope(@as(*const IMSMQMessage3, @ptrCast(self)), pbstr_soap_envelope_);
            }
            pub inline fn getCompoundMessage(self: *const T, pvar_compound_message_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).get_CompoundMessage(@as(*const IMSMQMessage3, @ptrCast(self)), pvar_compound_message_);
            }
            pub inline fn putSoapHeader(self: *const T, bstr_soap_header_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_SoapHeader(@as(*const IMSMQMessage3, @ptrCast(self)), bstr_soap_header_);
            }
            pub inline fn putSoapBody(self: *const T, bstr_soap_body_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage3.VTable, @ptrCast(self.vtable)).put_SoapBody(@as(*const IMSMQMessage3, @ptrCast(self)), bstr_soap_body_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQMessage4_Value = Guid.initString("eba96b23-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQMessage4 = &IID_IMSMQMessage4_Value;
pub const IMSMQMessage4 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_class: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_priv_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_priv_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_auth_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_auth_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pis_authenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delivery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_delivery: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delivery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_delivery: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_trace: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Trace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_trace: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_journal: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Journal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_journal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v1: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppqinfo_response: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v1: *const fn (
            self: *const IMSMQMessage4,
            pqinfo_response: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_app_specific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_app_specific: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceMachineGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pbstr_guid_src_machine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BodyLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pcb_body: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_body: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            var_body: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v1: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppqinfo_admin: ?*?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v1: *const fn (
            self: *const IMSMQMessage4,
            pqinfo_admin: ?*IMSMQQueueInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_msg_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CorrelationId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_msg_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CorrelationId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            var_msg_id: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ack: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_ack: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ack: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_ack: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pbstr_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            bstr_label: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReachQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_max_time_to_reach_queue: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReachQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_max_time_to_reach_queue: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxTimeToReceive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_max_time_to_receive: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxTimeToReceive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_max_time_to_receive: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_hash_alg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_hash_alg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_encrypt_alg: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_encrypt_alg: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SentTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_sent_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArrivedTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_arrived_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppqinfo_dest: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_sender_cert: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            var_sender_cert: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_sender_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderIdType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_sender_id_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderIdType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_sender_id_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn (
            self: *const IMSMQMessage4,
            destination_queue: ?*IDispatch,
            transaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext: *const fn (
            self: *const IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_sender_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Extension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_extension: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Extension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            var_extension: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectorTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pbstr_guid_connector_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ConnectorTypeGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            bstr_guid_connector_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionStatusQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppqinfo_xact_status: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationSymmetricKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_dest_symm_key: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DestinationSymmetricKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            var_dest_symm_key: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Signature: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_signature: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Signature: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            var_signature: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_auth_prov_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_auth_prov_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pbstr_auth_prov_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            bstr_auth_prov_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            var_sender_id: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MsgClass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pl_msg_class: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MsgClass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            l_msg_class: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_xact_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pis_first_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pis_last_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo_v2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppqinfo_response: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo_v2: *const fn (
            self: *const IMSMQMessage4,
            pqinfo_response: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo_v2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppqinfo_admin: ?*?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo_v2: *const fn (
            self: *const IMSMQMessage4,
            pqinfo_admin: ?*IMSMQQueueInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceivedAuthenticationLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ps_received_authentication_level: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppqinfo_response: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseQueueInfo: *const fn (
            self: *const IMSMQMessage4,
            pqinfo_response: ?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminQueueInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppqinfo_admin: ?*?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_AdminQueueInfo: *const fn (
            self: *const IMSMQMessage4,
            pqinfo_admin: ?*IMSMQQueueInfo4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResponseDestination: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppdest_response: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ResponseDestination: *const fn (
            self: *const IMSMQMessage4,
            pdest_response: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Destination: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            ppdest_destination: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LookupId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_lookup_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAuthenticated2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pis_authenticated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstInTransaction2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pis_first_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLastInTransaction2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pis_last_in_xact: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AttachCurrentSecurityContext2: *const fn (
            self: *const IMSMQMessage4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SoapEnvelope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pbstr_soap_envelope: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CompoundMessage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            pvar_compound_message: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SoapHeader: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            bstr_soap_header: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SoapBody: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQMessage4,
            bstr_soap_body: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getClass(self: *const T, pl_class_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Class(@as(*const IMSMQMessage4, @ptrCast(self)), pl_class_);
            }
            pub inline fn getPrivLevel(self: *const T, pl_priv_level_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_PrivLevel(@as(*const IMSMQMessage4, @ptrCast(self)), pl_priv_level_);
            }
            pub inline fn putPrivLevel(self: *const T, l_priv_level_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_PrivLevel(@as(*const IMSMQMessage4, @ptrCast(self)), l_priv_level_);
            }
            pub inline fn getAuthLevel(self: *const T, pl_auth_level_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_AuthLevel(@as(*const IMSMQMessage4, @ptrCast(self)), pl_auth_level_);
            }
            pub inline fn putAuthLevel(self: *const T, l_auth_level_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_AuthLevel(@as(*const IMSMQMessage4, @ptrCast(self)), l_auth_level_);
            }
            pub inline fn getIsAuthenticated(self: *const T, pis_authenticated_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_IsAuthenticated(@as(*const IMSMQMessage4, @ptrCast(self)), pis_authenticated_);
            }
            pub inline fn getDelivery(self: *const T, pl_delivery_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Delivery(@as(*const IMSMQMessage4, @ptrCast(self)), pl_delivery_);
            }
            pub inline fn putDelivery(self: *const T, l_delivery_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_Delivery(@as(*const IMSMQMessage4, @ptrCast(self)), l_delivery_);
            }
            pub inline fn getTrace(self: *const T, pl_trace_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Trace(@as(*const IMSMQMessage4, @ptrCast(self)), pl_trace_);
            }
            pub inline fn putTrace(self: *const T, l_trace_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_Trace(@as(*const IMSMQMessage4, @ptrCast(self)), l_trace_);
            }
            pub inline fn getPriority(self: *const T, pl_priority_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IMSMQMessage4, @ptrCast(self)), pl_priority_);
            }
            pub inline fn putPriority(self: *const T, l_priority_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_Priority(@as(*const IMSMQMessage4, @ptrCast(self)), l_priority_);
            }
            pub inline fn getJournal(self: *const T, pl_journal_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Journal(@as(*const IMSMQMessage4, @ptrCast(self)), pl_journal_);
            }
            pub inline fn putJournal(self: *const T, l_journal_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_Journal(@as(*const IMSMQMessage4, @ptrCast(self)), l_journal_);
            }
            pub inline fn getResponseQueueInfoV1(self: *const T, ppqinfo_response_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_ResponseQueueInfo_v1(@as(*const IMSMQMessage4, @ptrCast(self)), ppqinfo_response_);
            }
            pub inline fn putrefResponseQueueInfoV1(self: *const T, pqinfo_response_: ?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).putref_ResponseQueueInfo_v1(@as(*const IMSMQMessage4, @ptrCast(self)), pqinfo_response_);
            }
            pub inline fn getAppSpecific(self: *const T, pl_app_specific_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_AppSpecific(@as(*const IMSMQMessage4, @ptrCast(self)), pl_app_specific_);
            }
            pub inline fn putAppSpecific(self: *const T, l_app_specific_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_AppSpecific(@as(*const IMSMQMessage4, @ptrCast(self)), l_app_specific_);
            }
            pub inline fn getSourceMachineGuid(self: *const T, pbstr_guid_src_machine_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_SourceMachineGuid(@as(*const IMSMQMessage4, @ptrCast(self)), pbstr_guid_src_machine_);
            }
            pub inline fn getBodyLength(self: *const T, pcb_body_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_BodyLength(@as(*const IMSMQMessage4, @ptrCast(self)), pcb_body_);
            }
            pub inline fn getBody(self: *const T, pvar_body_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Body(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_body_);
            }
            pub inline fn putBody(self: *const T, var_body_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_Body(@as(*const IMSMQMessage4, @ptrCast(self)), var_body_);
            }
            pub inline fn getAdminQueueInfoV1(self: *const T, ppqinfo_admin_: ?*?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_AdminQueueInfo_v1(@as(*const IMSMQMessage4, @ptrCast(self)), ppqinfo_admin_);
            }
            pub inline fn putrefAdminQueueInfoV1(self: *const T, pqinfo_admin_: ?*IMSMQQueueInfo) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).putref_AdminQueueInfo_v1(@as(*const IMSMQMessage4, @ptrCast(self)), pqinfo_admin_);
            }
            pub inline fn getId(self: *const T, pvar_msg_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_msg_id_);
            }
            pub inline fn getCorrelationId(self: *const T, pvar_msg_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_CorrelationId(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_msg_id_);
            }
            pub inline fn putCorrelationId(self: *const T, var_msg_id_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_CorrelationId(@as(*const IMSMQMessage4, @ptrCast(self)), var_msg_id_);
            }
            pub inline fn getAck(self: *const T, pl_ack_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Ack(@as(*const IMSMQMessage4, @ptrCast(self)), pl_ack_);
            }
            pub inline fn putAck(self: *const T, l_ack_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_Ack(@as(*const IMSMQMessage4, @ptrCast(self)), l_ack_);
            }
            pub inline fn getLabel(self: *const T, pbstr_label_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Label(@as(*const IMSMQMessage4, @ptrCast(self)), pbstr_label_);
            }
            pub inline fn putLabel(self: *const T, bstr_label_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_Label(@as(*const IMSMQMessage4, @ptrCast(self)), bstr_label_);
            }
            pub inline fn getMaxTimeToReachQueue(self: *const T, pl_max_time_to_reach_queue_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_MaxTimeToReachQueue(@as(*const IMSMQMessage4, @ptrCast(self)), pl_max_time_to_reach_queue_);
            }
            pub inline fn putMaxTimeToReachQueue(self: *const T, l_max_time_to_reach_queue_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_MaxTimeToReachQueue(@as(*const IMSMQMessage4, @ptrCast(self)), l_max_time_to_reach_queue_);
            }
            pub inline fn getMaxTimeToReceive(self: *const T, pl_max_time_to_receive_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_MaxTimeToReceive(@as(*const IMSMQMessage4, @ptrCast(self)), pl_max_time_to_receive_);
            }
            pub inline fn putMaxTimeToReceive(self: *const T, l_max_time_to_receive_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_MaxTimeToReceive(@as(*const IMSMQMessage4, @ptrCast(self)), l_max_time_to_receive_);
            }
            pub inline fn getHashAlgorithm(self: *const T, pl_hash_alg_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_HashAlgorithm(@as(*const IMSMQMessage4, @ptrCast(self)), pl_hash_alg_);
            }
            pub inline fn putHashAlgorithm(self: *const T, l_hash_alg_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_HashAlgorithm(@as(*const IMSMQMessage4, @ptrCast(self)), l_hash_alg_);
            }
            pub inline fn getEncryptAlgorithm(self: *const T, pl_encrypt_alg_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_EncryptAlgorithm(@as(*const IMSMQMessage4, @ptrCast(self)), pl_encrypt_alg_);
            }
            pub inline fn putEncryptAlgorithm(self: *const T, l_encrypt_alg_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_EncryptAlgorithm(@as(*const IMSMQMessage4, @ptrCast(self)), l_encrypt_alg_);
            }
            pub inline fn getSentTime(self: *const T, pvar_sent_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_SentTime(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_sent_time_);
            }
            pub inline fn getArrivedTime(self: *const T, pl_arrived_time_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_ArrivedTime(@as(*const IMSMQMessage4, @ptrCast(self)), pl_arrived_time_);
            }
            pub inline fn getDestinationQueueInfo(self: *const T, ppqinfo_dest_: ?*?*IMSMQQueueInfo4) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_DestinationQueueInfo(@as(*const IMSMQMessage4, @ptrCast(self)), ppqinfo_dest_);
            }
            pub inline fn getSenderCertificate(self: *const T, pvar_sender_cert_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_SenderCertificate(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_sender_cert_);
            }
            pub inline fn putSenderCertificate(self: *const T, var_sender_cert_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_SenderCertificate(@as(*const IMSMQMessage4, @ptrCast(self)), var_sender_cert_);
            }
            pub inline fn getSenderId(self: *const T, pvar_sender_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_SenderId(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_sender_id_);
            }
            pub inline fn getSenderIdType(self: *const T, pl_sender_id_type_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_SenderIdType(@as(*const IMSMQMessage4, @ptrCast(self)), pl_sender_id_type_);
            }
            pub inline fn putSenderIdType(self: *const T, l_sender_id_type_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_SenderIdType(@as(*const IMSMQMessage4, @ptrCast(self)), l_sender_id_type_);
            }
            pub inline fn send(self: *const T, destination_queue_: ?*IDispatch, transaction_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).Send(@as(*const IMSMQMessage4, @ptrCast(self)), destination_queue_, transaction_);
            }
            pub inline fn attachCurrentSecurityContext(self: *const T) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).AttachCurrentSecurityContext(@as(*const IMSMQMessage4, @ptrCast(self)));
            }
            pub inline fn getSenderVersion(self: *const T, pl_sender_version_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_SenderVersion(@as(*const IMSMQMessage4, @ptrCast(self)), pl_sender_version_);
            }
            pub inline fn getExtension(self: *const T, pvar_extension_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Extension(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_extension_);
            }
            pub inline fn putExtension(self: *const T, var_extension_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_Extension(@as(*const IMSMQMessage4, @ptrCast(self)), var_extension_);
            }
            pub inline fn getConnectorTypeGuid(self: *const T, pbstr_guid_connector_type_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_ConnectorTypeGuid(@as(*const IMSMQMessage4, @ptrCast(self)), pbstr_guid_connector_type_);
            }
            pub inline fn putConnectorTypeGuid(self: *const T, bstr_guid_connector_type_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_ConnectorTypeGuid(@as(*const IMSMQMessage4, @ptrCast(self)), bstr_guid_connector_type_);
            }
            pub inline fn getTransactionStatusQueueInfo(self: *const T, ppqinfo_xact_status_: ?*?*IMSMQQueueInfo4) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_TransactionStatusQueueInfo(@as(*const IMSMQMessage4, @ptrCast(self)), ppqinfo_xact_status_);
            }
            pub inline fn getDestinationSymmetricKey(self: *const T, pvar_dest_symm_key_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_DestinationSymmetricKey(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_dest_symm_key_);
            }
            pub inline fn putDestinationSymmetricKey(self: *const T, var_dest_symm_key_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_DestinationSymmetricKey(@as(*const IMSMQMessage4, @ptrCast(self)), var_dest_symm_key_);
            }
            pub inline fn getSignature(self: *const T, pvar_signature_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Signature(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_signature_);
            }
            pub inline fn putSignature(self: *const T, var_signature_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_Signature(@as(*const IMSMQMessage4, @ptrCast(self)), var_signature_);
            }
            pub inline fn getAuthenticationProviderType(self: *const T, pl_auth_prov_type_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_AuthenticationProviderType(@as(*const IMSMQMessage4, @ptrCast(self)), pl_auth_prov_type_);
            }
            pub inline fn putAuthenticationProviderType(self: *const T, l_auth_prov_type_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_AuthenticationProviderType(@as(*const IMSMQMessage4, @ptrCast(self)), l_auth_prov_type_);
            }
            pub inline fn getAuthenticationProviderName(self: *const T, pbstr_auth_prov_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_AuthenticationProviderName(@as(*const IMSMQMessage4, @ptrCast(self)), pbstr_auth_prov_name_);
            }
            pub inline fn putAuthenticationProviderName(self: *const T, bstr_auth_prov_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_AuthenticationProviderName(@as(*const IMSMQMessage4, @ptrCast(self)), bstr_auth_prov_name_);
            }
            pub inline fn putSenderId(self: *const T, var_sender_id_: VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_SenderId(@as(*const IMSMQMessage4, @ptrCast(self)), var_sender_id_);
            }
            pub inline fn getMsgClass(self: *const T, pl_msg_class_: ?*i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_MsgClass(@as(*const IMSMQMessage4, @ptrCast(self)), pl_msg_class_);
            }
            pub inline fn putMsgClass(self: *const T, l_msg_class_: i32) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_MsgClass(@as(*const IMSMQMessage4, @ptrCast(self)), l_msg_class_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQMessage4, @ptrCast(self)), ppcol_properties_);
            }
            pub inline fn getTransactionId(self: *const T, pvar_xact_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_TransactionId(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_xact_id_);
            }
            pub inline fn getIsFirstInTransaction(self: *const T, pis_first_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_IsFirstInTransaction(@as(*const IMSMQMessage4, @ptrCast(self)), pis_first_in_xact_);
            }
            pub inline fn getIsLastInTransaction(self: *const T, pis_last_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_IsLastInTransaction(@as(*const IMSMQMessage4, @ptrCast(self)), pis_last_in_xact_);
            }
            pub inline fn getResponseQueueInfoV2(self: *const T, ppqinfo_response_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_ResponseQueueInfo_v2(@as(*const IMSMQMessage4, @ptrCast(self)), ppqinfo_response_);
            }
            pub inline fn putrefResponseQueueInfoV2(self: *const T, pqinfo_response_: ?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).putref_ResponseQueueInfo_v2(@as(*const IMSMQMessage4, @ptrCast(self)), pqinfo_response_);
            }
            pub inline fn getAdminQueueInfoV2(self: *const T, ppqinfo_admin_: ?*?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_AdminQueueInfo_v2(@as(*const IMSMQMessage4, @ptrCast(self)), ppqinfo_admin_);
            }
            pub inline fn putrefAdminQueueInfoV2(self: *const T, pqinfo_admin_: ?*IMSMQQueueInfo2) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).putref_AdminQueueInfo_v2(@as(*const IMSMQMessage4, @ptrCast(self)), pqinfo_admin_);
            }
            pub inline fn getReceivedAuthenticationLevel(self: *const T, ps_received_authentication_level_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_ReceivedAuthenticationLevel(@as(*const IMSMQMessage4, @ptrCast(self)), ps_received_authentication_level_);
            }
            pub inline fn getResponseQueueInfo(self: *const T, ppqinfo_response_: ?*?*IMSMQQueueInfo4) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_ResponseQueueInfo(@as(*const IMSMQMessage4, @ptrCast(self)), ppqinfo_response_);
            }
            pub inline fn putrefResponseQueueInfo(self: *const T, pqinfo_response_: ?*IMSMQQueueInfo4) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).putref_ResponseQueueInfo(@as(*const IMSMQMessage4, @ptrCast(self)), pqinfo_response_);
            }
            pub inline fn getAdminQueueInfo(self: *const T, ppqinfo_admin_: ?*?*IMSMQQueueInfo4) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_AdminQueueInfo(@as(*const IMSMQMessage4, @ptrCast(self)), ppqinfo_admin_);
            }
            pub inline fn putrefAdminQueueInfo(self: *const T, pqinfo_admin_: ?*IMSMQQueueInfo4) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).putref_AdminQueueInfo(@as(*const IMSMQMessage4, @ptrCast(self)), pqinfo_admin_);
            }
            pub inline fn getResponseDestination(self: *const T, ppdest_response_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_ResponseDestination(@as(*const IMSMQMessage4, @ptrCast(self)), ppdest_response_);
            }
            pub inline fn putrefResponseDestination(self: *const T, pdest_response_: ?*IDispatch) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).putref_ResponseDestination(@as(*const IMSMQMessage4, @ptrCast(self)), pdest_response_);
            }
            pub inline fn getDestination(self: *const T, ppdest_destination_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_Destination(@as(*const IMSMQMessage4, @ptrCast(self)), ppdest_destination_);
            }
            pub inline fn getLookupId(self: *const T, pvar_lookup_id_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_LookupId(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_lookup_id_);
            }
            pub inline fn getIsAuthenticated2(self: *const T, pis_authenticated_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_IsAuthenticated2(@as(*const IMSMQMessage4, @ptrCast(self)), pis_authenticated_);
            }
            pub inline fn getIsFirstInTransaction2(self: *const T, pis_first_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_IsFirstInTransaction2(@as(*const IMSMQMessage4, @ptrCast(self)), pis_first_in_xact_);
            }
            pub inline fn getIsLastInTransaction2(self: *const T, pis_last_in_xact_: ?*i16) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_IsLastInTransaction2(@as(*const IMSMQMessage4, @ptrCast(self)), pis_last_in_xact_);
            }
            pub inline fn attachCurrentSecurityContext2(self: *const T) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).AttachCurrentSecurityContext2(@as(*const IMSMQMessage4, @ptrCast(self)));
            }
            pub inline fn getSoapEnvelope(self: *const T, pbstr_soap_envelope_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_SoapEnvelope(@as(*const IMSMQMessage4, @ptrCast(self)), pbstr_soap_envelope_);
            }
            pub inline fn getCompoundMessage(self: *const T, pvar_compound_message_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).get_CompoundMessage(@as(*const IMSMQMessage4, @ptrCast(self)), pvar_compound_message_);
            }
            pub inline fn putSoapHeader(self: *const T, bstr_soap_header_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_SoapHeader(@as(*const IMSMQMessage4, @ptrCast(self)), bstr_soap_header_);
            }
            pub inline fn putSoapBody(self: *const T, bstr_soap_body_: ?BSTR) HRESULT {
                return @as(*const IMSMQMessage4.VTable, @ptrCast(self.vtable)).put_SoapBody(@as(*const IMSMQMessage4, @ptrCast(self)), bstr_soap_body_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQPrivateEvent_Value = Guid.initString("d7ab3341-c9d3-11d1-bb47-0080c7c5a2c0");
pub const IID_IMSMQPrivateEvent = &IID_IMSMQPrivateEvent_Value;
pub const IMSMQPrivateEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hwnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQPrivateEvent,
            phwnd: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FireArrivedEvent: *const fn (
            self: *const IMSMQPrivateEvent,
            pq: ?*IMSMQQueue,
            msgcursor: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FireArrivedErrorEvent: *const fn (
            self: *const IMSMQPrivateEvent,
            pq: ?*IMSMQQueue,
            hr_status: HRESULT,
            msgcursor: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getHwnd(self: *const T, phwnd_: ?*i32) HRESULT {
                return @as(*const IMSMQPrivateEvent.VTable, @ptrCast(self.vtable)).get_Hwnd(@as(*const IMSMQPrivateEvent, @ptrCast(self)), phwnd_);
            }
            pub inline fn fireArrivedEvent(self: *const T, pq_: ?*IMSMQQueue, msgcursor_: i32) HRESULT {
                return @as(*const IMSMQPrivateEvent.VTable, @ptrCast(self.vtable)).FireArrivedEvent(@as(*const IMSMQPrivateEvent, @ptrCast(self)), pq_, msgcursor_);
            }
            pub inline fn fireArrivedErrorEvent(self: *const T, pq_: ?*IMSMQQueue, hr_status_: HRESULT, msgcursor_: i32) HRESULT {
                return @as(*const IMSMQPrivateEvent.VTable, @ptrCast(self.vtable)).FireArrivedErrorEvent(@as(*const IMSMQPrivateEvent, @ptrCast(self)), pq_, hr_status_, msgcursor_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__DMSMQEventEvents_Value = Guid.initString("d7d6e078-dccd-11d0-aa4b-0060970debae");
pub const IID__DMSMQEventEvents = &IID__DMSMQEventEvents_Value;
pub const _DMSMQEventEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQTransaction2_Value = Guid.initString("2ce0c5b0-6e67-11d2-b0e6-00e02c074f6b");
pub const IID_IMSMQTransaction2 = &IID_IMSMQTransaction2_Value;
pub const IMSMQTransaction2 = extern struct {
    pub const VTable = extern struct {
        base: IMSMQTransaction.VTable,
        InitNew: *const fn (
            self: *const IMSMQTransaction2,
            var_transaction: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQTransaction2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMSMQTransaction.MethodMixin(T);
            pub inline fn initNew(self: *const T, var_transaction_: VARIANT) HRESULT {
                return @as(*const IMSMQTransaction2.VTable, @ptrCast(self.vtable)).InitNew(@as(*const IMSMQTransaction2, @ptrCast(self)), var_transaction_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQTransaction2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQTransaction2, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQTransaction3_Value = Guid.initString("eba96b13-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQTransaction3 = &IID_IMSMQTransaction3_Value;
pub const IMSMQTransaction3 = extern struct {
    pub const VTable = extern struct {
        base: IMSMQTransaction2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ITransaction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQTransaction3,
            pvar_i_transaction: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMSMQTransaction2.MethodMixin(T);
            pub inline fn getITransaction(self: *const T, pvar_i_transaction_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQTransaction3.VTable, @ptrCast(self.vtable)).get_ITransaction(@as(*const IMSMQTransaction3, @ptrCast(self)), pvar_i_transaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQCoordinatedTransactionDispenser2_Value = Guid.initString("eba96b10-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQCoordinatedTransactionDispenser2 = &IID_IMSMQCoordinatedTransactionDispenser2_Value;
pub const IMSMQCoordinatedTransactionDispenser2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn (
            self: *const IMSMQCoordinatedTransactionDispenser2,
            ptransaction: ?*?*IMSMQTransaction2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQCoordinatedTransactionDispenser2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn beginTransaction(self: *const T, ptransaction_: ?*?*IMSMQTransaction2) HRESULT {
                return @as(*const IMSMQCoordinatedTransactionDispenser2.VTable, @ptrCast(self.vtable)).BeginTransaction(@as(*const IMSMQCoordinatedTransactionDispenser2, @ptrCast(self)), ptransaction_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQCoordinatedTransactionDispenser2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQCoordinatedTransactionDispenser2, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQCoordinatedTransactionDispenser3_Value = Guid.initString("eba96b14-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQCoordinatedTransactionDispenser3 = &IID_IMSMQCoordinatedTransactionDispenser3_Value;
pub const IMSMQCoordinatedTransactionDispenser3 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn (
            self: *const IMSMQCoordinatedTransactionDispenser3,
            ptransaction: ?*?*IMSMQTransaction3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQCoordinatedTransactionDispenser3,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn beginTransaction(self: *const T, ptransaction_: ?*?*IMSMQTransaction3) HRESULT {
                return @as(*const IMSMQCoordinatedTransactionDispenser3.VTable, @ptrCast(self.vtable)).BeginTransaction(@as(*const IMSMQCoordinatedTransactionDispenser3, @ptrCast(self)), ptransaction_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQCoordinatedTransactionDispenser3.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQCoordinatedTransactionDispenser3, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQTransactionDispenser2_Value = Guid.initString("eba96b11-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQTransactionDispenser2 = &IID_IMSMQTransactionDispenser2_Value;
pub const IMSMQTransactionDispenser2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn (
            self: *const IMSMQTransactionDispenser2,
            ptransaction: ?*?*IMSMQTransaction2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQTransactionDispenser2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn beginTransaction(self: *const T, ptransaction_: ?*?*IMSMQTransaction2) HRESULT {
                return @as(*const IMSMQTransactionDispenser2.VTable, @ptrCast(self.vtable)).BeginTransaction(@as(*const IMSMQTransactionDispenser2, @ptrCast(self)), ptransaction_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQTransactionDispenser2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQTransactionDispenser2, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQTransactionDispenser3_Value = Guid.initString("eba96b15-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQTransactionDispenser3 = &IID_IMSMQTransactionDispenser3_Value;
pub const IMSMQTransactionDispenser3 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        BeginTransaction: *const fn (
            self: *const IMSMQTransactionDispenser3,
            ptransaction: ?*?*IMSMQTransaction3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQTransactionDispenser3,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn beginTransaction(self: *const T, ptransaction_: ?*?*IMSMQTransaction3) HRESULT {
                return @as(*const IMSMQTransactionDispenser3.VTable, @ptrCast(self.vtable)).BeginTransaction(@as(*const IMSMQTransactionDispenser3, @ptrCast(self)), ptransaction_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQTransactionDispenser3.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQTransactionDispenser3, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQApplication_Value = Guid.initString("d7d6e085-dccd-11d0-aa4b-0060970debae");
pub const IID_IMSMQApplication = &IID_IMSMQApplication_Value;
pub const IMSMQApplication = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        MachineIdOfMachineName: *const fn (
            self: *const IMSMQApplication,
            machine_name: ?BSTR,
            pbstr_guid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn machineIdOfMachineName(self: *const T, machine_name_: ?BSTR, pbstr_guid_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQApplication.VTable, @ptrCast(self.vtable)).MachineIdOfMachineName(@as(*const IMSMQApplication, @ptrCast(self)), machine_name_, pbstr_guid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQApplication2_Value = Guid.initString("12a30900-7300-11d2-b0e6-00e02c074f6b");
pub const IID_IMSMQApplication2 = &IID_IMSMQApplication2_Value;
pub const IMSMQApplication2 = extern struct {
    pub const VTable = extern struct {
        base: IMSMQApplication.VTable,
        RegisterCertificate: *const fn (
            self: *const IMSMQApplication2,
            flags: ?*VARIANT,
            external_certificate: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MachineNameOfMachineId: *const fn (
            self: *const IMSMQApplication2,
            bstr_guid: ?BSTR,
            pbstr_machine_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MSMQVersionMajor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication2,
            ps_m_s_m_q_version_major: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MSMQVersionMinor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication2,
            ps_m_s_m_q_version_minor: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MSMQVersionBuild: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication2,
            ps_m_s_m_q_version_build: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsDsEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication2,
            pf_is_ds_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication2,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMSMQApplication.MethodMixin(T);
            pub inline fn registerCertificate(self: *const T, flags_: ?*VARIANT, external_certificate_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQApplication2.VTable, @ptrCast(self.vtable)).RegisterCertificate(@as(*const IMSMQApplication2, @ptrCast(self)), flags_, external_certificate_);
            }
            pub inline fn machineNameOfMachineId(self: *const T, bstr_guid_: ?BSTR, pbstr_machine_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQApplication2.VTable, @ptrCast(self.vtable)).MachineNameOfMachineId(@as(*const IMSMQApplication2, @ptrCast(self)), bstr_guid_, pbstr_machine_name_);
            }
            pub inline fn getMSMQVersionMajor(self: *const T, ps_m_s_m_q_version_major_: ?*i16) HRESULT {
                return @as(*const IMSMQApplication2.VTable, @ptrCast(self.vtable)).get_MSMQVersionMajor(@as(*const IMSMQApplication2, @ptrCast(self)), ps_m_s_m_q_version_major_);
            }
            pub inline fn getMSMQVersionMinor(self: *const T, ps_m_s_m_q_version_minor_: ?*i16) HRESULT {
                return @as(*const IMSMQApplication2.VTable, @ptrCast(self.vtable)).get_MSMQVersionMinor(@as(*const IMSMQApplication2, @ptrCast(self)), ps_m_s_m_q_version_minor_);
            }
            pub inline fn getMSMQVersionBuild(self: *const T, ps_m_s_m_q_version_build_: ?*i16) HRESULT {
                return @as(*const IMSMQApplication2.VTable, @ptrCast(self.vtable)).get_MSMQVersionBuild(@as(*const IMSMQApplication2, @ptrCast(self)), ps_m_s_m_q_version_build_);
            }
            pub inline fn getIsDsEnabled(self: *const T, pf_is_ds_enabled_: ?*i16) HRESULT {
                return @as(*const IMSMQApplication2.VTable, @ptrCast(self.vtable)).get_IsDsEnabled(@as(*const IMSMQApplication2, @ptrCast(self)), pf_is_ds_enabled_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQApplication2.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQApplication2, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQApplication3_Value = Guid.initString("eba96b1f-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQApplication3 = &IID_IMSMQApplication3_Value;
pub const IMSMQApplication3 = extern struct {
    pub const VTable = extern struct {
        base: IMSMQApplication2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActiveQueues: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication3,
            pv_active_queues: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateQueues: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication3,
            pv_private_queues: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DirectoryServiceServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication3,
            pbstr_directory_service_server: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsConnected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication3,
            pf_is_connected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BytesInAllQueues: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication3,
            pv_bytes_in_all_queues: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Machine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication3,
            bstr_machine: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Machine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQApplication3,
            pbstr_machine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn (
            self: *const IMSMQApplication3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const IMSMQApplication3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Tidy: *const fn (
            self: *const IMSMQApplication3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMSMQApplication2.MethodMixin(T);
            pub inline fn getActiveQueues(self: *const T, pv_active_queues_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).get_ActiveQueues(@as(*const IMSMQApplication3, @ptrCast(self)), pv_active_queues_);
            }
            pub inline fn getPrivateQueues(self: *const T, pv_private_queues_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).get_PrivateQueues(@as(*const IMSMQApplication3, @ptrCast(self)), pv_private_queues_);
            }
            pub inline fn getDirectoryServiceServer(self: *const T, pbstr_directory_service_server_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).get_DirectoryServiceServer(@as(*const IMSMQApplication3, @ptrCast(self)), pbstr_directory_service_server_);
            }
            pub inline fn getIsConnected(self: *const T, pf_is_connected_: ?*i16) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).get_IsConnected(@as(*const IMSMQApplication3, @ptrCast(self)), pf_is_connected_);
            }
            pub inline fn getBytesInAllQueues(self: *const T, pv_bytes_in_all_queues_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).get_BytesInAllQueues(@as(*const IMSMQApplication3, @ptrCast(self)), pv_bytes_in_all_queues_);
            }
            pub inline fn putMachine(self: *const T, bstr_machine_: ?BSTR) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).put_Machine(@as(*const IMSMQApplication3, @ptrCast(self)), bstr_machine_);
            }
            pub inline fn getMachine(self: *const T, pbstr_machine_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).get_Machine(@as(*const IMSMQApplication3, @ptrCast(self)), pbstr_machine_);
            }
            pub inline fn connect(self: *const T) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).Connect(@as(*const IMSMQApplication3, @ptrCast(self)));
            }
            pub inline fn disconnect(self: *const T) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IMSMQApplication3, @ptrCast(self)));
            }
            pub inline fn tidy(self: *const T) HRESULT {
                return @as(*const IMSMQApplication3.VTable, @ptrCast(self.vtable)).Tidy(@as(*const IMSMQApplication3, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQDestination_Value = Guid.initString("eba96b16-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQDestination = &IID_IMSMQDestination_Value;
pub const IMSMQDestination = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Open: *const fn (
            self: *const IMSMQDestination,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IMSMQDestination,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsOpen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            pf_is_open: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IADs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            pp_i_a_ds: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_IADs: *const fn (
            self: *const IMSMQDestination,
            p_i_a_ds: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ADsPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            pbstr_a_ds_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ADsPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            bstr_a_ds_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            pbstr_path_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PathName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            bstr_path_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            pbstr_format_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            bstr_format_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Destinations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            pp_destinations: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Destinations: *const fn (
            self: *const IMSMQDestination,
            p_destinations: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQDestination,
            ppcol_properties: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn open(self: *const T) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).Open(@as(*const IMSMQDestination, @ptrCast(self)));
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).Close(@as(*const IMSMQDestination, @ptrCast(self)));
            }
            pub inline fn getIsOpen(self: *const T, pf_is_open_: ?*i16) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).get_IsOpen(@as(*const IMSMQDestination, @ptrCast(self)), pf_is_open_);
            }
            pub inline fn getIADs(self: *const T, pp_i_a_ds_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).get_IADs(@as(*const IMSMQDestination, @ptrCast(self)), pp_i_a_ds_);
            }
            pub inline fn putrefIADs(self: *const T, p_i_a_ds_: ?*IDispatch) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).putref_IADs(@as(*const IMSMQDestination, @ptrCast(self)), p_i_a_ds_);
            }
            pub inline fn getADsPath(self: *const T, pbstr_a_ds_path_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).get_ADsPath(@as(*const IMSMQDestination, @ptrCast(self)), pbstr_a_ds_path_);
            }
            pub inline fn putADsPath(self: *const T, bstr_a_ds_path_: ?BSTR) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).put_ADsPath(@as(*const IMSMQDestination, @ptrCast(self)), bstr_a_ds_path_);
            }
            pub inline fn getPathName(self: *const T, pbstr_path_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).get_PathName(@as(*const IMSMQDestination, @ptrCast(self)), pbstr_path_name_);
            }
            pub inline fn putPathName(self: *const T, bstr_path_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).put_PathName(@as(*const IMSMQDestination, @ptrCast(self)), bstr_path_name_);
            }
            pub inline fn getFormatName(self: *const T, pbstr_format_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).get_FormatName(@as(*const IMSMQDestination, @ptrCast(self)), pbstr_format_name_);
            }
            pub inline fn putFormatName(self: *const T, bstr_format_name_: ?BSTR) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).put_FormatName(@as(*const IMSMQDestination, @ptrCast(self)), bstr_format_name_);
            }
            pub inline fn getDestinations(self: *const T, pp_destinations_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).get_Destinations(@as(*const IMSMQDestination, @ptrCast(self)), pp_destinations_);
            }
            pub inline fn putrefDestinations(self: *const T, p_destinations_: ?*IDispatch) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).putref_Destinations(@as(*const IMSMQDestination, @ptrCast(self)), p_destinations_);
            }
            pub inline fn getProperties(self: *const T, ppcol_properties_: ?*?*IDispatch) HRESULT {
                return @as(*const IMSMQDestination.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IMSMQDestination, @ptrCast(self)), ppcol_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQPrivateDestination_Value = Guid.initString("eba96b17-2168-11d3-898c-00e02c074f6b");
pub const IID_IMSMQPrivateDestination = &IID_IMSMQPrivateDestination_Value;
pub const IMSMQPrivateDestination = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQPrivateDestination,
            pvar_handle: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Handle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQPrivateDestination,
            var_handle: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getHandle(self: *const T, pvar_handle_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQPrivateDestination.VTable, @ptrCast(self.vtable)).get_Handle(@as(*const IMSMQPrivateDestination, @ptrCast(self)), pvar_handle_);
            }
            pub inline fn putHandle(self: *const T, var_handle_: VARIANT) HRESULT {
                return @as(*const IMSMQPrivateDestination.VTable, @ptrCast(self.vtable)).put_Handle(@as(*const IMSMQPrivateDestination, @ptrCast(self)), var_handle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQCollection_Value = Guid.initString("0188ac2f-ecb3-4173-9779-635ca2039c72");
pub const IID_IMSMQCollection = &IID_IMSMQCollection_Value;
pub const IMSMQCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Item: *const fn (
            self: *const IMSMQCollection,
            index: ?*VARIANT,
            pvar_ret: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: *const fn (
            self: *const IMSMQCollection,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn item(self: *const T, index_: ?*VARIANT, pvar_ret_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQCollection.VTable, @ptrCast(self.vtable)).Item(@as(*const IMSMQCollection, @ptrCast(self)), index_, pvar_ret_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const IMSMQCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IMSMQCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn newEnum(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IMSMQCollection.VTable, @ptrCast(self.vtable))._NewEnum(@as(*const IMSMQCollection, @ptrCast(self)), ppunk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQManagement_Value = Guid.initString("be5f0241-e489-4957-8cc4-a452fcf3e23e");
pub const IID_IMSMQManagement = &IID_IMSMQManagement_Value;
pub const IMSMQManagement = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Init: *const fn (
            self: *const IMSMQManagement,
            machine: ?*VARIANT,
            pathname: ?*VARIANT,
            format_name: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQManagement,
            pbstr_format_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Machine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQManagement,
            pbstr_machine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MessageCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQManagement,
            pl_message_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForeignStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQManagement,
            pl_foreign_status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQManagement,
            pl_queue_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLocal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQManagement,
            pf_is_local: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionalStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQManagement,
            pl_transactional_status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BytesInQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQManagement,
            pv_bytes_in_queue: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn init(self: *const T, machine_: ?*VARIANT, pathname_: ?*VARIANT, format_name_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQManagement.VTable, @ptrCast(self.vtable)).Init(@as(*const IMSMQManagement, @ptrCast(self)), machine_, pathname_, format_name_);
            }
            pub inline fn getFormatName(self: *const T, pbstr_format_name_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQManagement.VTable, @ptrCast(self.vtable)).get_FormatName(@as(*const IMSMQManagement, @ptrCast(self)), pbstr_format_name_);
            }
            pub inline fn getMachine(self: *const T, pbstr_machine_: ?*?BSTR) HRESULT {
                return @as(*const IMSMQManagement.VTable, @ptrCast(self.vtable)).get_Machine(@as(*const IMSMQManagement, @ptrCast(self)), pbstr_machine_);
            }
            pub inline fn getMessageCount(self: *const T, pl_message_count_: ?*i32) HRESULT {
                return @as(*const IMSMQManagement.VTable, @ptrCast(self.vtable)).get_MessageCount(@as(*const IMSMQManagement, @ptrCast(self)), pl_message_count_);
            }
            pub inline fn getForeignStatus(self: *const T, pl_foreign_status_: ?*i32) HRESULT {
                return @as(*const IMSMQManagement.VTable, @ptrCast(self.vtable)).get_ForeignStatus(@as(*const IMSMQManagement, @ptrCast(self)), pl_foreign_status_);
            }
            pub inline fn getQueueType(self: *const T, pl_queue_type_: ?*i32) HRESULT {
                return @as(*const IMSMQManagement.VTable, @ptrCast(self.vtable)).get_QueueType(@as(*const IMSMQManagement, @ptrCast(self)), pl_queue_type_);
            }
            pub inline fn getIsLocal(self: *const T, pf_is_local_: ?*i16) HRESULT {
                return @as(*const IMSMQManagement.VTable, @ptrCast(self.vtable)).get_IsLocal(@as(*const IMSMQManagement, @ptrCast(self)), pf_is_local_);
            }
            pub inline fn getTransactionalStatus(self: *const T, pl_transactional_status_: ?*i32) HRESULT {
                return @as(*const IMSMQManagement.VTable, @ptrCast(self.vtable)).get_TransactionalStatus(@as(*const IMSMQManagement, @ptrCast(self)), pl_transactional_status_);
            }
            pub inline fn getBytesInQueue(self: *const T, pv_bytes_in_queue_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQManagement.VTable, @ptrCast(self.vtable)).get_BytesInQueue(@as(*const IMSMQManagement, @ptrCast(self)), pv_bytes_in_queue_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQOutgoingQueueManagement_Value = Guid.initString("64c478fb-f9b0-4695-8a7f-439ac94326d3");
pub const IID_IMSMQOutgoingQueueManagement = &IID_IMSMQOutgoingQueueManagement_Value;
pub const IMSMQOutgoingQueueManagement = extern struct {
    pub const VTable = extern struct {
        base: IMSMQManagement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQOutgoingQueueManagement,
            pl_state: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NextHops: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQOutgoingQueueManagement,
            pv_next_hops: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EodGetSendInfo: *const fn (
            self: *const IMSMQOutgoingQueueManagement,
            pp_collection: ?*?*IMSMQCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IMSMQOutgoingQueueManagement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IMSMQOutgoingQueueManagement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EodResend: *const fn (
            self: *const IMSMQOutgoingQueueManagement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMSMQManagement.MethodMixin(T);
            pub inline fn getState(self: *const T, pl_state_: ?*i32) HRESULT {
                return @as(*const IMSMQOutgoingQueueManagement.VTable, @ptrCast(self.vtable)).get_State(@as(*const IMSMQOutgoingQueueManagement, @ptrCast(self)), pl_state_);
            }
            pub inline fn getNextHops(self: *const T, pv_next_hops_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQOutgoingQueueManagement.VTable, @ptrCast(self.vtable)).get_NextHops(@as(*const IMSMQOutgoingQueueManagement, @ptrCast(self)), pv_next_hops_);
            }
            pub inline fn eodGetSendInfo(self: *const T, pp_collection_: ?*?*IMSMQCollection) HRESULT {
                return @as(*const IMSMQOutgoingQueueManagement.VTable, @ptrCast(self.vtable)).EodGetSendInfo(@as(*const IMSMQOutgoingQueueManagement, @ptrCast(self)), pp_collection_);
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IMSMQOutgoingQueueManagement.VTable, @ptrCast(self.vtable)).Resume(@as(*const IMSMQOutgoingQueueManagement, @ptrCast(self)));
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IMSMQOutgoingQueueManagement.VTable, @ptrCast(self.vtable)).Pause(@as(*const IMSMQOutgoingQueueManagement, @ptrCast(self)));
            }
            pub inline fn eodResend(self: *const T) HRESULT {
                return @as(*const IMSMQOutgoingQueueManagement.VTable, @ptrCast(self.vtable)).EodResend(@as(*const IMSMQOutgoingQueueManagement, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMSMQQueueManagement_Value = Guid.initString("7fbe7759-5760-444d-b8a5-5e7ab9a84cce");
pub const IID_IMSMQQueueManagement = &IID_IMSMQQueueManagement_Value;
pub const IMSMQQueueManagement = extern struct {
    pub const VTable = extern struct {
        base: IMSMQManagement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JournalMessageCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueManagement,
            pl_journal_message_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BytesInJournal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMSMQQueueManagement,
            pv_bytes_in_journal: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EodGetReceiveInfo: *const fn (
            self: *const IMSMQQueueManagement,
            pv_collection: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMSMQManagement.MethodMixin(T);
            pub inline fn getJournalMessageCount(self: *const T, pl_journal_message_count_: ?*i32) HRESULT {
                return @as(*const IMSMQQueueManagement.VTable, @ptrCast(self.vtable)).get_JournalMessageCount(@as(*const IMSMQQueueManagement, @ptrCast(self)), pl_journal_message_count_);
            }
            pub inline fn getBytesInJournal(self: *const T, pv_bytes_in_journal_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueManagement.VTable, @ptrCast(self.vtable)).get_BytesInJournal(@as(*const IMSMQQueueManagement, @ptrCast(self)), pv_bytes_in_journal_);
            }
            pub inline fn eodGetReceiveInfo(self: *const T, pv_collection_: ?*VARIANT) HRESULT {
                return @as(*const IMSMQQueueManagement.VTable, @ptrCast(self.vtable)).EodGetReceiveInfo(@as(*const IMSMQQueueManagement, @ptrCast(self)), pv_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
