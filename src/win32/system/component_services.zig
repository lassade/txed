//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (11)
//--------------------------------------------------------------------------------
pub const TRACKER_STARTSTOP_EVENT = "Global\\COM+ Tracker Push Event";
pub const TRACKER_INIT_EVENT = "Global\\COM+ Tracker Init Event";
pub const GUID_STRING_SIZE = @as(u32, 40);
pub const DATA_NOT_AVAILABLE = @as(u32, 4294967295);
pub const MTXDM_E_ENLISTRESOURCEFAILED = @as(u32, 2147803392);
pub const CRR_NO_REASON_SUPPLIED = @as(u32, 0);
pub const CRR_LIFETIME_LIMIT = @as(u32, 4294967295);
pub const CRR_ACTIVATION_LIMIT = @as(u32, 4294967294);
pub const CRR_CALL_LIMIT = @as(u32, 4294967293);
pub const CRR_MEMORY_LIMIT = @as(u32, 4294967292);
pub const CRR_RECYCLED_FROM_UI = @as(u32, 4294967291);

//--------------------------------------------------------------------------------
// Section: Types (211)
//--------------------------------------------------------------------------------
const CLSID_SecurityIdentity_Value = Guid.initString("ecabb0a5-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_SecurityIdentity = &CLSID_SecurityIdentity_Value;

const CLSID_SecurityCallers_Value = Guid.initString("ecabb0a6-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_SecurityCallers = &CLSID_SecurityCallers_Value;

const CLSID_SecurityCallContext_Value = Guid.initString("ecabb0a7-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_SecurityCallContext = &CLSID_SecurityCallContext_Value;

const CLSID_GetSecurityCallContextAppObject_Value = Guid.initString("ecabb0a8-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_GetSecurityCallContextAppObject = &CLSID_GetSecurityCallContextAppObject_Value;

const CLSID_Dummy30040732_Value = Guid.initString("ecabb0a9-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_Dummy30040732 = &CLSID_Dummy30040732_Value;

const CLSID_TransactionContext_Value = Guid.initString("7999fc25-d3c6-11cf-acab-00a024a55aef");
pub const CLSID_TransactionContext = &CLSID_TransactionContext_Value;

const CLSID_TransactionContextEx_Value = Guid.initString("5cb66670-d3d4-11cf-acab-00a024a55aef");
pub const CLSID_TransactionContextEx = &CLSID_TransactionContextEx_Value;

const CLSID_ByotServerEx_Value = Guid.initString("ecabb0aa-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_ByotServerEx = &CLSID_ByotServerEx_Value;

const CLSID_CServiceConfig_Value = Guid.initString("ecabb0c8-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_CServiceConfig = &CLSID_CServiceConfig_Value;

const CLSID_ServicePool_Value = Guid.initString("ecabb0c9-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_ServicePool = &CLSID_ServicePool_Value;

const CLSID_ServicePoolConfig_Value = Guid.initString("ecabb0ca-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_ServicePoolConfig = &CLSID_ServicePoolConfig_Value;

const CLSID_SharedProperty_Value = Guid.initString("2a005c05-a5de-11cf-9e66-00aa00a3f464");
pub const CLSID_SharedProperty = &CLSID_SharedProperty_Value;

const CLSID_SharedPropertyGroup_Value = Guid.initString("2a005c0b-a5de-11cf-9e66-00aa00a3f464");
pub const CLSID_SharedPropertyGroup = &CLSID_SharedPropertyGroup_Value;

const CLSID_SharedPropertyGroupManager_Value = Guid.initString("2a005c11-a5de-11cf-9e66-00aa00a3f464");
pub const CLSID_SharedPropertyGroupManager = &CLSID_SharedPropertyGroupManager_Value;

const CLSID_COMEvents_Value = Guid.initString("ecabb0ab-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_COMEvents = &CLSID_COMEvents_Value;

const CLSID_CoMTSLocator_Value = Guid.initString("ecabb0ac-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_CoMTSLocator = &CLSID_CoMTSLocator_Value;

const CLSID_MtsGrp_Value = Guid.initString("4b2e958d-0393-11d1-b1ab-00aa00ba3258");
pub const CLSID_MtsGrp = &CLSID_MtsGrp_Value;

const CLSID_ComServiceEvents_Value = Guid.initString("ecabb0c3-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_ComServiceEvents = &CLSID_ComServiceEvents_Value;

const CLSID_ComSystemAppEventData_Value = Guid.initString("ecabb0c6-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_ComSystemAppEventData = &CLSID_ComSystemAppEventData_Value;

const CLSID_CRMClerk_Value = Guid.initString("ecabb0bd-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_CRMClerk = &CLSID_CRMClerk_Value;

const CLSID_CRMRecoveryClerk_Value = Guid.initString("ecabb0be-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_CRMRecoveryClerk = &CLSID_CRMRecoveryClerk_Value;

const CLSID_LBEvents_Value = Guid.initString("ecabb0c1-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_LBEvents = &CLSID_LBEvents_Value;

const CLSID_MessageMover_Value = Guid.initString("ecabb0bf-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_MessageMover = &CLSID_MessageMover_Value;

const CLSID_DispenserManager_Value = Guid.initString("ecabb0c0-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_DispenserManager = &CLSID_DispenserManager_Value;

const CLSID_PoolMgr_Value = Guid.initString("ecabafb5-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_PoolMgr = &CLSID_PoolMgr_Value;

const CLSID_EventServer_Value = Guid.initString("ecabafbc-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_EventServer = &CLSID_EventServer_Value;

const CLSID_TrackerServer_Value = Guid.initString("ecabafb9-7f19-11d2-978e-0000f8757e2a");
pub const CLSID_TrackerServer = &CLSID_TrackerServer_Value;

const CLSID_AppDomainHelper_Value = Guid.initString("ef24f689-14f8-4d92-b4af-d7b1f0e70fd4");
pub const CLSID_AppDomainHelper = &CLSID_AppDomainHelper_Value;

const CLSID_ClrAssemblyLocator_Value = Guid.initString("458aa3b5-265a-4b75-bc05-9bea4630cf18");
pub const CLSID_ClrAssemblyLocator = &CLSID_ClrAssemblyLocator_Value;

const CLSID_COMAdminCatalog_Value = Guid.initString("f618c514-dfb8-11d1-a2cf-00805fc79235");
pub const CLSID_COMAdminCatalog = &CLSID_COMAdminCatalog_Value;

const CLSID_COMAdminCatalogObject_Value = Guid.initString("f618c515-dfb8-11d1-a2cf-00805fc79235");
pub const CLSID_COMAdminCatalogObject = &CLSID_COMAdminCatalogObject_Value;

const CLSID_COMAdminCatalogCollection_Value = Guid.initString("f618c516-dfb8-11d1-a2cf-00805fc79235");
pub const CLSID_COMAdminCatalogCollection = &CLSID_COMAdminCatalogCollection_Value;

// TODO: this type is limited to platform 'windows5.0'
const IID_ICOMAdminCatalog_Value = Guid.initString("dd662187-dfc2-11d1-a2cf-00805fc79235");
pub const IID_ICOMAdminCatalog = &IID_ICOMAdminCatalog_Value;
pub const ICOMAdminCatalog = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetCollection: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_coll_name: ?BSTR,
            pp_catalog_collection: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_catalog_server_name: ?BSTR,
            pp_catalog_collection: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICOMAdminCatalog,
            pl_major_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICOMAdminCatalog,
            pl_minor_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCollectionByQuery: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_coll_name: ?BSTR,
            ppsa_var_query: ?*?*SAFEARRAY,
            pp_catalog_collection: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportComponent: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_appl_i_d_or_name: ?BSTR,
            bstr_c_l_s_i_d_or_prog_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallComponent: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_appl_i_d_or_name: ?BSTR,
            bstr_d_l_l: ?BSTR,
            bstr_t_l_b: ?BSTR,
            bstr_p_s_d_l_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownApplication: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_appl_i_d_or_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportApplication: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_appl_i_d_or_name: ?BSTR,
            bstr_application_file: ?BSTR,
            l_options: COMAdminApplicationExportOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallApplication: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_application_file: ?BSTR,
            bstr_destination_directory: ?BSTR,
            l_options: COMAdminApplicationInstallOptions,
            bstr_user_id: ?BSTR,
            bstr_password: ?BSTR,
            bstr_r_s_n: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopRouter: *const fn (
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshRouter: *const fn (
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartRouter: *const fn (
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reserved1: *const fn (
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reserved2: *const fn (
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallMultipleComponents: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_appl_i_d_or_name: ?BSTR,
            ppsa_var_file_names: ?*?*SAFEARRAY,
            ppsa_var_c_l_s_i_ds: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMultipleComponentsInfo: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_appl_id_or_name: ?BSTR,
            ppsa_var_file_names: ?*?*SAFEARRAY,
            ppsa_var_c_l_s_i_ds: ?*?*SAFEARRAY,
            ppsa_var_class_names: ?*?*SAFEARRAY,
            ppsa_var_file_flags: ?*?*SAFEARRAY,
            ppsa_var_component_flags: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshComponents: *const fn (
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackupREGDB: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_backup_file_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreREGDB: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_backup_file_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryApplicationFile: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_application_file: ?BSTR,
            pbstr_application_name: ?*?BSTR,
            pbstr_application_description: ?*?BSTR,
            pb_has_users: ?*i16,
            pb_is_proxy: ?*i16,
            ppsa_var_file_names: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartApplication: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_appl_id_or_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceCheck: *const fn (
            self: *const ICOMAdminCatalog,
            l_service: i32,
            pl_status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallMultipleEventClasses: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_appl_id_or_name: ?BSTR,
            ppsa_var_file_names: ?*?*SAFEARRAY,
            ppsa_var_c_l_s_i_d_s: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallEventClass: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_appl_id_or_name: ?BSTR,
            bstr_d_l_l: ?BSTR,
            bstr_t_l_b: ?BSTR,
            bstr_p_s_d_l_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventClassesForIID: *const fn (
            self: *const ICOMAdminCatalog,
            bstr_i_i_d: ?BSTR,
            ppsa_var_c_l_s_i_ds: ?*?*SAFEARRAY,
            ppsa_var_prog_i_ds: ?*?*SAFEARRAY,
            ppsa_var_descriptions: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCollection(self: *const T, bstr_coll_name_: ?BSTR, pp_catalog_collection_: ?*?*IDispatch) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).GetCollection(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_coll_name_, pp_catalog_collection_);
            }
            pub inline fn connect(self: *const T, bstr_catalog_server_name_: ?BSTR, pp_catalog_collection_: ?*?*IDispatch) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).Connect(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_catalog_server_name_, pp_catalog_collection_);
            }
            pub inline fn getMajorVersion(self: *const T, pl_major_version_: ?*i32) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).get_MajorVersion(@as(*const ICOMAdminCatalog, @ptrCast(self)), pl_major_version_);
            }
            pub inline fn getMinorVersion(self: *const T, pl_minor_version_: ?*i32) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).get_MinorVersion(@as(*const ICOMAdminCatalog, @ptrCast(self)), pl_minor_version_);
            }
            pub inline fn getCollectionByQuery(self: *const T, bstr_coll_name_: ?BSTR, ppsa_var_query_: ?*?*SAFEARRAY, pp_catalog_collection_: ?*?*IDispatch) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).GetCollectionByQuery(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_coll_name_, ppsa_var_query_, pp_catalog_collection_);
            }
            pub inline fn importComponent(self: *const T, bstr_appl_i_d_or_name_: ?BSTR, bstr_c_l_s_i_d_or_prog_i_d_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).ImportComponent(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_appl_i_d_or_name_, bstr_c_l_s_i_d_or_prog_i_d_);
            }
            pub inline fn installComponent(self: *const T, bstr_appl_i_d_or_name_: ?BSTR, bstr_d_l_l_: ?BSTR, bstr_t_l_b_: ?BSTR, bstr_p_s_d_l_l_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).InstallComponent(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_appl_i_d_or_name_, bstr_d_l_l_, bstr_t_l_b_, bstr_p_s_d_l_l_);
            }
            pub inline fn shutdownApplication(self: *const T, bstr_appl_i_d_or_name_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).ShutdownApplication(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_appl_i_d_or_name_);
            }
            pub inline fn exportApplication(self: *const T, bstr_appl_i_d_or_name_: ?BSTR, bstr_application_file_: ?BSTR, l_options_: COMAdminApplicationExportOptions) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).ExportApplication(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_appl_i_d_or_name_, bstr_application_file_, l_options_);
            }
            pub inline fn installApplication(self: *const T, bstr_application_file_: ?BSTR, bstr_destination_directory_: ?BSTR, l_options_: COMAdminApplicationInstallOptions, bstr_user_id_: ?BSTR, bstr_password_: ?BSTR, bstr_r_s_n_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).InstallApplication(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_application_file_, bstr_destination_directory_, l_options_, bstr_user_id_, bstr_password_, bstr_r_s_n_);
            }
            pub inline fn stopRouter(self: *const T) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).StopRouter(@as(*const ICOMAdminCatalog, @ptrCast(self)));
            }
            pub inline fn refreshRouter(self: *const T) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).RefreshRouter(@as(*const ICOMAdminCatalog, @ptrCast(self)));
            }
            pub inline fn startRouter(self: *const T) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).StartRouter(@as(*const ICOMAdminCatalog, @ptrCast(self)));
            }
            pub inline fn reserved1(self: *const T) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).Reserved1(@as(*const ICOMAdminCatalog, @ptrCast(self)));
            }
            pub inline fn reserved2(self: *const T) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).Reserved2(@as(*const ICOMAdminCatalog, @ptrCast(self)));
            }
            pub inline fn installMultipleComponents(self: *const T, bstr_appl_i_d_or_name_: ?BSTR, ppsa_var_file_names_: ?*?*SAFEARRAY, ppsa_var_c_l_s_i_ds_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).InstallMultipleComponents(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_appl_i_d_or_name_, ppsa_var_file_names_, ppsa_var_c_l_s_i_ds_);
            }
            pub inline fn getMultipleComponentsInfo(self: *const T, bstr_appl_id_or_name_: ?BSTR, ppsa_var_file_names_: ?*?*SAFEARRAY, ppsa_var_c_l_s_i_ds_: ?*?*SAFEARRAY, ppsa_var_class_names_: ?*?*SAFEARRAY, ppsa_var_file_flags_: ?*?*SAFEARRAY, ppsa_var_component_flags_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).GetMultipleComponentsInfo(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_appl_id_or_name_, ppsa_var_file_names_, ppsa_var_c_l_s_i_ds_, ppsa_var_class_names_, ppsa_var_file_flags_, ppsa_var_component_flags_);
            }
            pub inline fn refreshComponents(self: *const T) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).RefreshComponents(@as(*const ICOMAdminCatalog, @ptrCast(self)));
            }
            pub inline fn backupREGDB(self: *const T, bstr_backup_file_path_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).BackupREGDB(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_backup_file_path_);
            }
            pub inline fn restoreREGDB(self: *const T, bstr_backup_file_path_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).RestoreREGDB(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_backup_file_path_);
            }
            pub inline fn queryApplicationFile(self: *const T, bstr_application_file_: ?BSTR, pbstr_application_name_: ?*?BSTR, pbstr_application_description_: ?*?BSTR, pb_has_users_: ?*i16, pb_is_proxy_: ?*i16, ppsa_var_file_names_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).QueryApplicationFile(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_application_file_, pbstr_application_name_, pbstr_application_description_, pb_has_users_, pb_is_proxy_, ppsa_var_file_names_);
            }
            pub inline fn startApplication(self: *const T, bstr_appl_id_or_name_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).StartApplication(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_appl_id_or_name_);
            }
            pub inline fn serviceCheck(self: *const T, l_service_: i32, pl_status_: ?*i32) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).ServiceCheck(@as(*const ICOMAdminCatalog, @ptrCast(self)), l_service_, pl_status_);
            }
            pub inline fn installMultipleEventClasses(self: *const T, bstr_appl_id_or_name_: ?BSTR, ppsa_var_file_names_: ?*?*SAFEARRAY, ppsa_var_c_l_s_i_d_s_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).InstallMultipleEventClasses(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_appl_id_or_name_, ppsa_var_file_names_, ppsa_var_c_l_s_i_d_s_);
            }
            pub inline fn installEventClass(self: *const T, bstr_appl_id_or_name_: ?BSTR, bstr_d_l_l_: ?BSTR, bstr_t_l_b_: ?BSTR, bstr_p_s_d_l_l_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).InstallEventClass(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_appl_id_or_name_, bstr_d_l_l_, bstr_t_l_b_, bstr_p_s_d_l_l_);
            }
            pub inline fn getEventClassesForIID(self: *const T, bstr_i_i_d_: ?BSTR, ppsa_var_c_l_s_i_ds_: ?*?*SAFEARRAY, ppsa_var_prog_i_ds_: ?*?*SAFEARRAY, ppsa_var_descriptions_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const ICOMAdminCatalog.VTable, @ptrCast(self.vtable)).GetEventClassesForIID(@as(*const ICOMAdminCatalog, @ptrCast(self)), bstr_i_i_d_, ppsa_var_c_l_s_i_ds_, ppsa_var_prog_i_ds_, ppsa_var_descriptions_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const COMAdminInUse = enum(i32) {
    NotInUse = 0,
    InUseByCatalog = 1,
    InUseByRegistryUnknown = 2,
    InUseByRegistryProxyStub = 3,
    InUseByRegistryTypeLib = 4,
    InUseByRegistryClsid = 5,
};
pub const COMAdminNotInUse = COMAdminInUse.NotInUse;
pub const COMAdminInUseByCatalog = COMAdminInUse.InUseByCatalog;
pub const COMAdminInUseByRegistryUnknown = COMAdminInUse.InUseByRegistryUnknown;
pub const COMAdminInUseByRegistryProxyStub = COMAdminInUse.InUseByRegistryProxyStub;
pub const COMAdminInUseByRegistryTypeLib = COMAdminInUse.InUseByRegistryTypeLib;
pub const COMAdminInUseByRegistryClsid = COMAdminInUse.InUseByRegistryClsid;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICOMAdminCatalog2_Value = Guid.initString("790c6e0b-9194-4cc9-9426-a48a63185696");
pub const IID_ICOMAdminCatalog2 = &IID_ICOMAdminCatalog2_Value;
pub const ICOMAdminCatalog2 = extern struct {
    pub const VTable = extern struct {
        base: ICOMAdminCatalog.VTable,
        GetCollectionByQuery2: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_collection_name: ?BSTR,
            p_var_query_strings: ?*VARIANT,
            pp_catalog_collection: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationInstanceIDFromProcessID: *const fn (
            self: *const ICOMAdminCatalog2,
            l_process_i_d: i32,
            pbstr_application_instance_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownApplicationInstances: *const fn (
            self: *const ICOMAdminCatalog2,
            p_var_application_instance_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseApplicationInstances: *const fn (
            self: *const ICOMAdminCatalog2,
            p_var_application_instance_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeApplicationInstances: *const fn (
            self: *const ICOMAdminCatalog2,
            p_var_application_instance_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecycleApplicationInstances: *const fn (
            self: *const ICOMAdminCatalog2,
            p_var_application_instance_i_d: ?*VARIANT,
            l_reason_code: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AreApplicationInstancesPaused: *const fn (
            self: *const ICOMAdminCatalog2,
            p_var_application_instance_i_d: ?*VARIANT,
            p_var_bool_paused: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DumpApplicationInstance: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_application_instance_i_d: ?BSTR,
            bstr_directory: ?BSTR,
            l_max_images: i32,
            pbstr_dump_file: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsApplicationInstanceDumpSupported: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICOMAdminCatalog2,
            p_var_bool_dump_supported: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateServiceForApplication: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_application_i_d_or_name: ?BSTR,
            bstr_service_name: ?BSTR,
            bstr_start_type: ?BSTR,
            bstr_error_control: ?BSTR,
            bstr_dependencies: ?BSTR,
            bstr_run_as: ?BSTR,
            bstr_password: ?BSTR,
            b_desktop_ok: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteServiceForApplication: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_application_i_d_or_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartitionID: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_application_i_d_or_name: ?BSTR,
            pbstr_partition_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartitionName: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_application_i_d_or_name: ?BSTR,
            pbstr_partition_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CurrentPartition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICOMAdminCatalog2,
            bstr_partition_i_d_or_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPartitionID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICOMAdminCatalog2,
            pbstr_partition_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPartitionName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICOMAdminCatalog2,
            pbstr_partition_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GlobalPartitionID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICOMAdminCatalog2,
            pbstr_global_partition_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlushPartitionCache: *const fn (
            self: *const ICOMAdminCatalog2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyApplications: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_source_partition_i_d_or_name: ?BSTR,
            p_var_application_i_d: ?*VARIANT,
            bstr_destination_partition_i_d_or_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyComponents: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_source_application_i_d_or_name: ?BSTR,
            p_var_c_l_s_i_d_or_prog_i_d: ?*VARIANT,
            bstr_destination_application_i_d_or_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveComponents: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_source_application_i_d_or_name: ?BSTR,
            p_var_c_l_s_i_d_or_prog_i_d: ?*VARIANT,
            bstr_destination_application_i_d_or_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AliasComponent: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_src_application_i_d_or_name: ?BSTR,
            bstr_c_l_s_i_d_or_prog_i_d: ?BSTR,
            bstr_dest_application_i_d_or_name: ?BSTR,
            bstr_new_prog_id: ?BSTR,
            bstr_new_clsid: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSafeToDelete: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_dll_name: ?BSTR,
            p_c_o_m_admin_in_use: ?*COMAdminInUse,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportUnconfiguredComponents: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_application_i_d_or_name: ?BSTR,
            p_var_c_l_s_i_d_or_prog_i_d: ?*VARIANT,
            p_var_component_type: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PromoteUnconfiguredComponents: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_application_i_d_or_name: ?BSTR,
            p_var_c_l_s_i_d_or_prog_i_d: ?*VARIANT,
            p_var_component_type: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportComponents: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_application_i_d_or_name: ?BSTR,
            p_var_c_l_s_i_d_or_prog_i_d: ?*VARIANT,
            p_var_component_type: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Is64BitCatalogServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICOMAdminCatalog2,
            pb_is64_bit: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportPartition: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_partition_i_d_or_name: ?BSTR,
            bstr_partition_file_name: ?BSTR,
            l_options: COMAdminApplicationExportOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallPartition: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_file_name: ?BSTR,
            bstr_dest_directory: ?BSTR,
            l_options: COMAdminApplicationInstallOptions,
            bstr_user_i_d: ?BSTR,
            bstr_password: ?BSTR,
            bstr_r_s_n: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryApplicationFile2: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_application_file: ?BSTR,
            pp_files_for_import: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentVersionCount: *const fn (
            self: *const ICOMAdminCatalog2,
            bstr_c_l_s_i_d_or_prog_i_d: ?BSTR,
            pl_version_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICOMAdminCatalog.MethodMixin(T);
            pub inline fn getCollectionByQuery2(self: *const T, bstr_collection_name_: ?BSTR, p_var_query_strings_: ?*VARIANT, pp_catalog_collection_: ?*?*IDispatch) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).GetCollectionByQuery2(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_collection_name_, p_var_query_strings_, pp_catalog_collection_);
            }
            pub inline fn getApplicationInstanceIDFromProcessID(self: *const T, l_process_i_d_: i32, pbstr_application_instance_i_d_: ?*?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).GetApplicationInstanceIDFromProcessID(@as(*const ICOMAdminCatalog2, @ptrCast(self)), l_process_i_d_, pbstr_application_instance_i_d_);
            }
            pub inline fn shutdownApplicationInstances(self: *const T, p_var_application_instance_i_d_: ?*VARIANT) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).ShutdownApplicationInstances(@as(*const ICOMAdminCatalog2, @ptrCast(self)), p_var_application_instance_i_d_);
            }
            pub inline fn pauseApplicationInstances(self: *const T, p_var_application_instance_i_d_: ?*VARIANT) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).PauseApplicationInstances(@as(*const ICOMAdminCatalog2, @ptrCast(self)), p_var_application_instance_i_d_);
            }
            pub inline fn resumeApplicationInstances(self: *const T, p_var_application_instance_i_d_: ?*VARIANT) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).ResumeApplicationInstances(@as(*const ICOMAdminCatalog2, @ptrCast(self)), p_var_application_instance_i_d_);
            }
            pub inline fn recycleApplicationInstances(self: *const T, p_var_application_instance_i_d_: ?*VARIANT, l_reason_code_: i32) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).RecycleApplicationInstances(@as(*const ICOMAdminCatalog2, @ptrCast(self)), p_var_application_instance_i_d_, l_reason_code_);
            }
            pub inline fn areApplicationInstancesPaused(self: *const T, p_var_application_instance_i_d_: ?*VARIANT, p_var_bool_paused_: ?*i16) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).AreApplicationInstancesPaused(@as(*const ICOMAdminCatalog2, @ptrCast(self)), p_var_application_instance_i_d_, p_var_bool_paused_);
            }
            pub inline fn dumpApplicationInstance(self: *const T, bstr_application_instance_i_d_: ?BSTR, bstr_directory_: ?BSTR, l_max_images_: i32, pbstr_dump_file_: ?*?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).DumpApplicationInstance(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_application_instance_i_d_, bstr_directory_, l_max_images_, pbstr_dump_file_);
            }
            pub inline fn getIsApplicationInstanceDumpSupported(self: *const T, p_var_bool_dump_supported_: ?*i16) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).get_IsApplicationInstanceDumpSupported(@as(*const ICOMAdminCatalog2, @ptrCast(self)), p_var_bool_dump_supported_);
            }
            pub inline fn createServiceForApplication(self: *const T, bstr_application_i_d_or_name_: ?BSTR, bstr_service_name_: ?BSTR, bstr_start_type_: ?BSTR, bstr_error_control_: ?BSTR, bstr_dependencies_: ?BSTR, bstr_run_as_: ?BSTR, bstr_password_: ?BSTR, b_desktop_ok_: i16) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).CreateServiceForApplication(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_application_i_d_or_name_, bstr_service_name_, bstr_start_type_, bstr_error_control_, bstr_dependencies_, bstr_run_as_, bstr_password_, b_desktop_ok_);
            }
            pub inline fn deleteServiceForApplication(self: *const T, bstr_application_i_d_or_name_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).DeleteServiceForApplication(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_application_i_d_or_name_);
            }
            pub inline fn getPartitionID(self: *const T, bstr_application_i_d_or_name_: ?BSTR, pbstr_partition_i_d_: ?*?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).GetPartitionID(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_application_i_d_or_name_, pbstr_partition_i_d_);
            }
            pub inline fn getPartitionName(self: *const T, bstr_application_i_d_or_name_: ?BSTR, pbstr_partition_name_: ?*?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).GetPartitionName(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_application_i_d_or_name_, pbstr_partition_name_);
            }
            pub inline fn putCurrentPartition(self: *const T, bstr_partition_i_d_or_name_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).put_CurrentPartition(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_partition_i_d_or_name_);
            }
            pub inline fn getCurrentPartitionID(self: *const T, pbstr_partition_i_d_: ?*?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).get_CurrentPartitionID(@as(*const ICOMAdminCatalog2, @ptrCast(self)), pbstr_partition_i_d_);
            }
            pub inline fn getCurrentPartitionName(self: *const T, pbstr_partition_name_: ?*?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).get_CurrentPartitionName(@as(*const ICOMAdminCatalog2, @ptrCast(self)), pbstr_partition_name_);
            }
            pub inline fn getGlobalPartitionID(self: *const T, pbstr_global_partition_i_d_: ?*?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).get_GlobalPartitionID(@as(*const ICOMAdminCatalog2, @ptrCast(self)), pbstr_global_partition_i_d_);
            }
            pub inline fn flushPartitionCache(self: *const T) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).FlushPartitionCache(@as(*const ICOMAdminCatalog2, @ptrCast(self)));
            }
            pub inline fn copyApplications(self: *const T, bstr_source_partition_i_d_or_name_: ?BSTR, p_var_application_i_d_: ?*VARIANT, bstr_destination_partition_i_d_or_name_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).CopyApplications(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_source_partition_i_d_or_name_, p_var_application_i_d_, bstr_destination_partition_i_d_or_name_);
            }
            pub inline fn copyComponents(self: *const T, bstr_source_application_i_d_or_name_: ?BSTR, p_var_c_l_s_i_d_or_prog_i_d_: ?*VARIANT, bstr_destination_application_i_d_or_name_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).CopyComponents(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_source_application_i_d_or_name_, p_var_c_l_s_i_d_or_prog_i_d_, bstr_destination_application_i_d_or_name_);
            }
            pub inline fn moveComponents(self: *const T, bstr_source_application_i_d_or_name_: ?BSTR, p_var_c_l_s_i_d_or_prog_i_d_: ?*VARIANT, bstr_destination_application_i_d_or_name_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).MoveComponents(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_source_application_i_d_or_name_, p_var_c_l_s_i_d_or_prog_i_d_, bstr_destination_application_i_d_or_name_);
            }
            pub inline fn aliasComponent(self: *const T, bstr_src_application_i_d_or_name_: ?BSTR, bstr_c_l_s_i_d_or_prog_i_d_: ?BSTR, bstr_dest_application_i_d_or_name_: ?BSTR, bstr_new_prog_id_: ?BSTR, bstr_new_clsid_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).AliasComponent(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_src_application_i_d_or_name_, bstr_c_l_s_i_d_or_prog_i_d_, bstr_dest_application_i_d_or_name_, bstr_new_prog_id_, bstr_new_clsid_);
            }
            pub inline fn isSafeToDelete(self: *const T, bstr_dll_name_: ?BSTR, p_c_o_m_admin_in_use_: ?*COMAdminInUse) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).IsSafeToDelete(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_dll_name_, p_c_o_m_admin_in_use_);
            }
            pub inline fn importUnconfiguredComponents(self: *const T, bstr_application_i_d_or_name_: ?BSTR, p_var_c_l_s_i_d_or_prog_i_d_: ?*VARIANT, p_var_component_type_: ?*VARIANT) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).ImportUnconfiguredComponents(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_application_i_d_or_name_, p_var_c_l_s_i_d_or_prog_i_d_, p_var_component_type_);
            }
            pub inline fn promoteUnconfiguredComponents(self: *const T, bstr_application_i_d_or_name_: ?BSTR, p_var_c_l_s_i_d_or_prog_i_d_: ?*VARIANT, p_var_component_type_: ?*VARIANT) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).PromoteUnconfiguredComponents(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_application_i_d_or_name_, p_var_c_l_s_i_d_or_prog_i_d_, p_var_component_type_);
            }
            pub inline fn importComponents(self: *const T, bstr_application_i_d_or_name_: ?BSTR, p_var_c_l_s_i_d_or_prog_i_d_: ?*VARIANT, p_var_component_type_: ?*VARIANT) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).ImportComponents(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_application_i_d_or_name_, p_var_c_l_s_i_d_or_prog_i_d_, p_var_component_type_);
            }
            pub inline fn getIs64BitCatalogServer(self: *const T, pb_is64_bit_: ?*i16) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).get_Is64BitCatalogServer(@as(*const ICOMAdminCatalog2, @ptrCast(self)), pb_is64_bit_);
            }
            pub inline fn exportPartition(self: *const T, bstr_partition_i_d_or_name_: ?BSTR, bstr_partition_file_name_: ?BSTR, l_options_: COMAdminApplicationExportOptions) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).ExportPartition(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_partition_i_d_or_name_, bstr_partition_file_name_, l_options_);
            }
            pub inline fn installPartition(self: *const T, bstr_file_name_: ?BSTR, bstr_dest_directory_: ?BSTR, l_options_: COMAdminApplicationInstallOptions, bstr_user_i_d_: ?BSTR, bstr_password_: ?BSTR, bstr_r_s_n_: ?BSTR) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).InstallPartition(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_file_name_, bstr_dest_directory_, l_options_, bstr_user_i_d_, bstr_password_, bstr_r_s_n_);
            }
            pub inline fn queryApplicationFile2(self: *const T, bstr_application_file_: ?BSTR, pp_files_for_import_: ?*?*IDispatch) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).QueryApplicationFile2(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_application_file_, pp_files_for_import_);
            }
            pub inline fn getComponentVersionCount(self: *const T, bstr_c_l_s_i_d_or_prog_i_d_: ?BSTR, pl_version_count_: ?*i32) HRESULT {
                return @as(*const ICOMAdminCatalog2.VTable, @ptrCast(self.vtable)).GetComponentVersionCount(@as(*const ICOMAdminCatalog2, @ptrCast(self)), bstr_c_l_s_i_d_or_prog_i_d_, pl_version_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICatalogObject_Value = Guid.initString("6eb22871-8a19-11d0-81b6-00a0c9231c29");
pub const IID_ICatalogObject = &IID_ICatalogObject_Value;
pub const ICatalogObject = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogObject,
            bstr_prop_name: ?BSTR,
            pvar_ret_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogObject,
            bstr_prop_name: ?BSTR,
            val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Key: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogObject,
            pvar_ret_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogObject,
            pvar_ret_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPropertyReadOnly: *const fn (
            self: *const ICatalogObject,
            bstr_prop_name: ?BSTR,
            pb_ret_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Valid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogObject,
            pb_ret_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPropertyWriteOnly: *const fn (
            self: *const ICatalogObject,
            bstr_prop_name: ?BSTR,
            pb_ret_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getValue(self: *const T, bstr_prop_name_: ?BSTR, pvar_ret_val_: ?*VARIANT) HRESULT {
                return @as(*const ICatalogObject.VTable, @ptrCast(self.vtable)).get_Value(@as(*const ICatalogObject, @ptrCast(self)), bstr_prop_name_, pvar_ret_val_);
            }
            pub inline fn putValue(self: *const T, bstr_prop_name_: ?BSTR, val_: VARIANT) HRESULT {
                return @as(*const ICatalogObject.VTable, @ptrCast(self.vtable)).put_Value(@as(*const ICatalogObject, @ptrCast(self)), bstr_prop_name_, val_);
            }
            pub inline fn getKey(self: *const T, pvar_ret_val_: ?*VARIANT) HRESULT {
                return @as(*const ICatalogObject.VTable, @ptrCast(self.vtable)).get_Key(@as(*const ICatalogObject, @ptrCast(self)), pvar_ret_val_);
            }
            pub inline fn getName(self: *const T, pvar_ret_val_: ?*VARIANT) HRESULT {
                return @as(*const ICatalogObject.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ICatalogObject, @ptrCast(self)), pvar_ret_val_);
            }
            pub inline fn isPropertyReadOnly(self: *const T, bstr_prop_name_: ?BSTR, pb_ret_val_: ?*i16) HRESULT {
                return @as(*const ICatalogObject.VTable, @ptrCast(self.vtable)).IsPropertyReadOnly(@as(*const ICatalogObject, @ptrCast(self)), bstr_prop_name_, pb_ret_val_);
            }
            pub inline fn getValid(self: *const T, pb_ret_val_: ?*i16) HRESULT {
                return @as(*const ICatalogObject.VTable, @ptrCast(self.vtable)).get_Valid(@as(*const ICatalogObject, @ptrCast(self)), pb_ret_val_);
            }
            pub inline fn isPropertyWriteOnly(self: *const T, bstr_prop_name_: ?BSTR, pb_ret_val_: ?*i16) HRESULT {
                return @as(*const ICatalogObject.VTable, @ptrCast(self.vtable)).IsPropertyWriteOnly(@as(*const ICatalogObject, @ptrCast(self)), bstr_prop_name_, pb_ret_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICatalogCollection_Value = Guid.initString("6eb22872-8a19-11d0-81b6-00a0c9231c29");
pub const IID_ICatalogCollection = &IID_ICatalogCollection_Value;
pub const ICatalogCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogCollection,
            pp_enum_variant: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogCollection,
            l_index: i32,
            pp_catalog_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogCollection,
            pl_object_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ICatalogCollection,
            l_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ICatalogCollection,
            pp_catalog_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Populate: *const fn (
            self: *const ICatalogCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveChanges: *const fn (
            self: *const ICatalogCollection,
            pc_changes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCollection: *const fn (
            self: *const ICatalogCollection,
            bstr_coll_name: ?BSTR,
            var_object_key: VARIANT,
            pp_catalog_collection: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogCollection,
            p_var_namel: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogCollection,
            p_var_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoveEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogCollection,
            p_var_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUtilInterface: *const fn (
            self: *const ICatalogCollection,
            pp_i_dispatch: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataStoreMajorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogCollection,
            pl_major_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataStoreMinorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalogCollection,
            pl_minor_versionl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopulateByKey: *const fn (
            self: *const ICatalogCollection,
            psa_keys: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopulateByQuery: *const fn (
            self: *const ICatalogCollection,
            bstr_query_string: ?BSTR,
            l_query_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_enum_variant_: ?*?*IUnknown) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICatalogCollection, @ptrCast(self)), pp_enum_variant_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, pp_catalog_object_: ?*?*IDispatch) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ICatalogCollection, @ptrCast(self)), l_index_, pp_catalog_object_);
            }
            pub inline fn getCount(self: *const T, pl_object_count_: ?*i32) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICatalogCollection, @ptrCast(self)), pl_object_count_);
            }
            pub inline fn remove(self: *const T, l_index_: i32) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const ICatalogCollection, @ptrCast(self)), l_index_);
            }
            pub inline fn add(self: *const T, pp_catalog_object_: ?*?*IDispatch) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const ICatalogCollection, @ptrCast(self)), pp_catalog_object_);
            }
            pub inline fn populate(self: *const T) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).Populate(@as(*const ICatalogCollection, @ptrCast(self)));
            }
            pub inline fn saveChanges(self: *const T, pc_changes_: ?*i32) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).SaveChanges(@as(*const ICatalogCollection, @ptrCast(self)), pc_changes_);
            }
            pub inline fn getCollection(self: *const T, bstr_coll_name_: ?BSTR, var_object_key_: VARIANT, pp_catalog_collection_: ?*?*IDispatch) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).GetCollection(@as(*const ICatalogCollection, @ptrCast(self)), bstr_coll_name_, var_object_key_, pp_catalog_collection_);
            }
            pub inline fn getName(self: *const T, p_var_namel_: ?*VARIANT) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ICatalogCollection, @ptrCast(self)), p_var_namel_);
            }
            pub inline fn getAddEnabled(self: *const T, p_var_bool_: ?*i16) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).get_AddEnabled(@as(*const ICatalogCollection, @ptrCast(self)), p_var_bool_);
            }
            pub inline fn getRemoveEnabled(self: *const T, p_var_bool_: ?*i16) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).get_RemoveEnabled(@as(*const ICatalogCollection, @ptrCast(self)), p_var_bool_);
            }
            pub inline fn getUtilInterface(self: *const T, pp_i_dispatch_: ?*?*IDispatch) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).GetUtilInterface(@as(*const ICatalogCollection, @ptrCast(self)), pp_i_dispatch_);
            }
            pub inline fn getDataStoreMajorVersion(self: *const T, pl_major_version_: ?*i32) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).get_DataStoreMajorVersion(@as(*const ICatalogCollection, @ptrCast(self)), pl_major_version_);
            }
            pub inline fn getDataStoreMinorVersion(self: *const T, pl_minor_versionl_: ?*i32) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).get_DataStoreMinorVersion(@as(*const ICatalogCollection, @ptrCast(self)), pl_minor_versionl_);
            }
            pub inline fn populateByKey(self: *const T, psa_keys_: ?*SAFEARRAY) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).PopulateByKey(@as(*const ICatalogCollection, @ptrCast(self)), psa_keys_);
            }
            pub inline fn populateByQuery(self: *const T, bstr_query_string_: ?BSTR, l_query_type_: i32) HRESULT {
                return @as(*const ICatalogCollection.VTable, @ptrCast(self.vtable)).PopulateByQuery(@as(*const ICatalogCollection, @ptrCast(self)), bstr_query_string_, l_query_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const COMAdminComponentType = enum(i32) {
    @"32BitComponent" = 1,
    @"64BitComponent" = 2,
};
pub const COMAdmin32BitComponent = COMAdminComponentType.@"32BitComponent";
pub const COMAdmin64BitComponent = COMAdminComponentType.@"64BitComponent";

pub const COMAdminApplicationInstallOptions = enum(i32) {
    NoUsers = 0,
    Users = 1,
    ForceOverwriteOfFiles = 2,
};
pub const COMAdminInstallNoUsers = COMAdminApplicationInstallOptions.NoUsers;
pub const COMAdminInstallUsers = COMAdminApplicationInstallOptions.Users;
pub const COMAdminInstallForceOverwriteOfFiles = COMAdminApplicationInstallOptions.ForceOverwriteOfFiles;

pub const COMAdminApplicationExportOptions = enum(i32) {
    NoUsers = 0,
    Users = 1,
    ApplicationProxy = 2,
    ForceOverwriteOfFiles = 4,
    In10Format = 16,
};
pub const COMAdminExportNoUsers = COMAdminApplicationExportOptions.NoUsers;
pub const COMAdminExportUsers = COMAdminApplicationExportOptions.Users;
pub const COMAdminExportApplicationProxy = COMAdminApplicationExportOptions.ApplicationProxy;
pub const COMAdminExportForceOverwriteOfFiles = COMAdminApplicationExportOptions.ForceOverwriteOfFiles;
pub const COMAdminExportIn10Format = COMAdminApplicationExportOptions.In10Format;

pub const COMAdminThreadingModels = enum(i32) {
    Apartment = 0,
    Free = 1,
    Main = 2,
    Both = 3,
    Neutral = 4,
    NotSpecified = 5,
};
pub const COMAdminThreadingModelApartment = COMAdminThreadingModels.Apartment;
pub const COMAdminThreadingModelFree = COMAdminThreadingModels.Free;
pub const COMAdminThreadingModelMain = COMAdminThreadingModels.Main;
pub const COMAdminThreadingModelBoth = COMAdminThreadingModels.Both;
pub const COMAdminThreadingModelNeutral = COMAdminThreadingModels.Neutral;
pub const COMAdminThreadingModelNotSpecified = COMAdminThreadingModels.NotSpecified;

pub const COMAdminTransactionOptions = enum(i32) {
    Ignored = 0,
    None = 1,
    Supported = 2,
    Required = 3,
    RequiresNew = 4,
};
pub const COMAdminTransactionIgnored = COMAdminTransactionOptions.Ignored;
pub const COMAdminTransactionNone = COMAdminTransactionOptions.None;
pub const COMAdminTransactionSupported = COMAdminTransactionOptions.Supported;
pub const COMAdminTransactionRequired = COMAdminTransactionOptions.Required;
pub const COMAdminTransactionRequiresNew = COMAdminTransactionOptions.RequiresNew;

pub const COMAdminTxIsolationLevelOptions = enum(i32) {
    Any = 0,
    ReadUnCommitted = 1,
    ReadCommitted = 2,
    RepeatableRead = 3,
    Serializable = 4,
};
pub const COMAdminTxIsolationLevelAny = COMAdminTxIsolationLevelOptions.Any;
pub const COMAdminTxIsolationLevelReadUnCommitted = COMAdminTxIsolationLevelOptions.ReadUnCommitted;
pub const COMAdminTxIsolationLevelReadCommitted = COMAdminTxIsolationLevelOptions.ReadCommitted;
pub const COMAdminTxIsolationLevelRepeatableRead = COMAdminTxIsolationLevelOptions.RepeatableRead;
pub const COMAdminTxIsolationLevelSerializable = COMAdminTxIsolationLevelOptions.Serializable;

pub const COMAdminSynchronizationOptions = enum(i32) {
    Ignored = 0,
    None = 1,
    Supported = 2,
    Required = 3,
    RequiresNew = 4,
};
pub const COMAdminSynchronizationIgnored = COMAdminSynchronizationOptions.Ignored;
pub const COMAdminSynchronizationNone = COMAdminSynchronizationOptions.None;
pub const COMAdminSynchronizationSupported = COMAdminSynchronizationOptions.Supported;
pub const COMAdminSynchronizationRequired = COMAdminSynchronizationOptions.Required;
pub const COMAdminSynchronizationRequiresNew = COMAdminSynchronizationOptions.RequiresNew;

pub const COMAdminActivationOptions = enum(i32) {
    Inproc = 0,
    Local = 1,
};
pub const COMAdminActivationInproc = COMAdminActivationOptions.Inproc;
pub const COMAdminActivationLocal = COMAdminActivationOptions.Local;

pub const COMAdminAccessChecksLevelOptions = enum(i32) {
    Level = 0,
    ComponentLevel = 1,
};
pub const COMAdminAccessChecksApplicationLevel = COMAdminAccessChecksLevelOptions.Level;
pub const COMAdminAccessChecksApplicationComponentLevel = COMAdminAccessChecksLevelOptions.ComponentLevel;

pub const COMAdminAuthenticationLevelOptions = enum(i32) {
    Default = 0,
    None = 1,
    Connect = 2,
    Call = 3,
    Packet = 4,
    Integrity = 5,
    Privacy = 6,
};
pub const COMAdminAuthenticationDefault = COMAdminAuthenticationLevelOptions.Default;
pub const COMAdminAuthenticationNone = COMAdminAuthenticationLevelOptions.None;
pub const COMAdminAuthenticationConnect = COMAdminAuthenticationLevelOptions.Connect;
pub const COMAdminAuthenticationCall = COMAdminAuthenticationLevelOptions.Call;
pub const COMAdminAuthenticationPacket = COMAdminAuthenticationLevelOptions.Packet;
pub const COMAdminAuthenticationIntegrity = COMAdminAuthenticationLevelOptions.Integrity;
pub const COMAdminAuthenticationPrivacy = COMAdminAuthenticationLevelOptions.Privacy;

pub const COMAdminImpersonationLevelOptions = enum(i32) {
    Anonymous = 1,
    Identify = 2,
    Impersonate = 3,
    Delegate = 4,
};
pub const COMAdminImpersonationAnonymous = COMAdminImpersonationLevelOptions.Anonymous;
pub const COMAdminImpersonationIdentify = COMAdminImpersonationLevelOptions.Identify;
pub const COMAdminImpersonationImpersonate = COMAdminImpersonationLevelOptions.Impersonate;
pub const COMAdminImpersonationDelegate = COMAdminImpersonationLevelOptions.Delegate;

pub const COMAdminAuthenticationCapabilitiesOptions = enum(i32) {
    None = 0,
    SecureReference = 2,
    StaticCloaking = 32,
    DynamicCloaking = 64,
};
pub const COMAdminAuthenticationCapabilitiesNone = COMAdminAuthenticationCapabilitiesOptions.None;
pub const COMAdminAuthenticationCapabilitiesSecureReference = COMAdminAuthenticationCapabilitiesOptions.SecureReference;
pub const COMAdminAuthenticationCapabilitiesStaticCloaking = COMAdminAuthenticationCapabilitiesOptions.StaticCloaking;
pub const COMAdminAuthenticationCapabilitiesDynamicCloaking = COMAdminAuthenticationCapabilitiesOptions.DynamicCloaking;

pub const COMAdminOS = enum(i32) {
    NotInitialized = 0,
    Windows3_1 = 1,
    Windows9x = 2,
    Windows2000 = 3,
    Windows2000AdvancedServer = 4,
    Windows2000Unknown = 5,
    Unknown = 6,
    WindowsXPPersonal = 11,
    WindowsXPProfessional = 12,
    WindowsNETStandardServer = 13,
    WindowsNETEnterpriseServer = 14,
    WindowsNETDatacenterServer = 15,
    WindowsNETWebServer = 16,
    WindowsLonghornPersonal = 17,
    WindowsLonghornProfessional = 18,
    WindowsLonghornStandardServer = 19,
    WindowsLonghornEnterpriseServer = 20,
    WindowsLonghornDatacenterServer = 21,
    WindowsLonghornWebServer = 22,
    Windows7Personal = 23,
    Windows7Professional = 24,
    Windows7StandardServer = 25,
    Windows7EnterpriseServer = 26,
    Windows7DatacenterServer = 27,
    Windows7WebServer = 28,
    Windows8Personal = 29,
    Windows8Professional = 30,
    Windows8StandardServer = 31,
    Windows8EnterpriseServer = 32,
    Windows8DatacenterServer = 33,
    Windows8WebServer = 34,
    WindowsBluePersonal = 35,
    WindowsBlueProfessional = 36,
    WindowsBlueStandardServer = 37,
    WindowsBlueEnterpriseServer = 38,
    WindowsBlueDatacenterServer = 39,
    WindowsBlueWebServer = 40,
};
pub const COMAdminOSNotInitialized = COMAdminOS.NotInitialized;
pub const COMAdminOSWindows3_1 = COMAdminOS.Windows3_1;
pub const COMAdminOSWindows9x = COMAdminOS.Windows9x;
pub const COMAdminOSWindows2000 = COMAdminOS.Windows2000;
pub const COMAdminOSWindows2000AdvancedServer = COMAdminOS.Windows2000AdvancedServer;
pub const COMAdminOSWindows2000Unknown = COMAdminOS.Windows2000Unknown;
pub const COMAdminOSUnknown = COMAdminOS.Unknown;
pub const COMAdminOSWindowsXPPersonal = COMAdminOS.WindowsXPPersonal;
pub const COMAdminOSWindowsXPProfessional = COMAdminOS.WindowsXPProfessional;
pub const COMAdminOSWindowsNETStandardServer = COMAdminOS.WindowsNETStandardServer;
pub const COMAdminOSWindowsNETEnterpriseServer = COMAdminOS.WindowsNETEnterpriseServer;
pub const COMAdminOSWindowsNETDatacenterServer = COMAdminOS.WindowsNETDatacenterServer;
pub const COMAdminOSWindowsNETWebServer = COMAdminOS.WindowsNETWebServer;
pub const COMAdminOSWindowsLonghornPersonal = COMAdminOS.WindowsLonghornPersonal;
pub const COMAdminOSWindowsLonghornProfessional = COMAdminOS.WindowsLonghornProfessional;
pub const COMAdminOSWindowsLonghornStandardServer = COMAdminOS.WindowsLonghornStandardServer;
pub const COMAdminOSWindowsLonghornEnterpriseServer = COMAdminOS.WindowsLonghornEnterpriseServer;
pub const COMAdminOSWindowsLonghornDatacenterServer = COMAdminOS.WindowsLonghornDatacenterServer;
pub const COMAdminOSWindowsLonghornWebServer = COMAdminOS.WindowsLonghornWebServer;
pub const COMAdminOSWindows7Personal = COMAdminOS.Windows7Personal;
pub const COMAdminOSWindows7Professional = COMAdminOS.Windows7Professional;
pub const COMAdminOSWindows7StandardServer = COMAdminOS.Windows7StandardServer;
pub const COMAdminOSWindows7EnterpriseServer = COMAdminOS.Windows7EnterpriseServer;
pub const COMAdminOSWindows7DatacenterServer = COMAdminOS.Windows7DatacenterServer;
pub const COMAdminOSWindows7WebServer = COMAdminOS.Windows7WebServer;
pub const COMAdminOSWindows8Personal = COMAdminOS.Windows8Personal;
pub const COMAdminOSWindows8Professional = COMAdminOS.Windows8Professional;
pub const COMAdminOSWindows8StandardServer = COMAdminOS.Windows8StandardServer;
pub const COMAdminOSWindows8EnterpriseServer = COMAdminOS.Windows8EnterpriseServer;
pub const COMAdminOSWindows8DatacenterServer = COMAdminOS.Windows8DatacenterServer;
pub const COMAdminOSWindows8WebServer = COMAdminOS.Windows8WebServer;
pub const COMAdminOSWindowsBluePersonal = COMAdminOS.WindowsBluePersonal;
pub const COMAdminOSWindowsBlueProfessional = COMAdminOS.WindowsBlueProfessional;
pub const COMAdminOSWindowsBlueStandardServer = COMAdminOS.WindowsBlueStandardServer;
pub const COMAdminOSWindowsBlueEnterpriseServer = COMAdminOS.WindowsBlueEnterpriseServer;
pub const COMAdminOSWindowsBlueDatacenterServer = COMAdminOS.WindowsBlueDatacenterServer;
pub const COMAdminOSWindowsBlueWebServer = COMAdminOS.WindowsBlueWebServer;

pub const COMAdminServiceOptions = enum(i32) {
    r = 1,
};
pub const COMAdminServiceLoadBalanceRouter = COMAdminServiceOptions.r;

pub const COMAdminServiceStatusOptions = enum(i32) {
    Stopped = 0,
    StartPending = 1,
    StopPending = 2,
    Running = 3,
    ContinuePending = 4,
    PausePending = 5,
    Paused = 6,
    UnknownState = 7,
};
pub const COMAdminServiceStopped = COMAdminServiceStatusOptions.Stopped;
pub const COMAdminServiceStartPending = COMAdminServiceStatusOptions.StartPending;
pub const COMAdminServiceStopPending = COMAdminServiceStatusOptions.StopPending;
pub const COMAdminServiceRunning = COMAdminServiceStatusOptions.Running;
pub const COMAdminServiceContinuePending = COMAdminServiceStatusOptions.ContinuePending;
pub const COMAdminServicePausePending = COMAdminServiceStatusOptions.PausePending;
pub const COMAdminServicePaused = COMAdminServiceStatusOptions.Paused;
pub const COMAdminServiceUnknownState = COMAdminServiceStatusOptions.UnknownState;

pub const COMAdminQCMessageAuthenticateOptions = enum(i32) {
    SecureApps = 0,
    Off = 1,
    On = 2,
};
pub const COMAdminQCMessageAuthenticateSecureApps = COMAdminQCMessageAuthenticateOptions.SecureApps;
pub const COMAdminQCMessageAuthenticateOff = COMAdminQCMessageAuthenticateOptions.Off;
pub const COMAdminQCMessageAuthenticateOn = COMAdminQCMessageAuthenticateOptions.On;

pub const COMAdminFileFlags = enum(i32) {
    Loadable = 1,
    COM = 2,
    ContainsPS = 4,
    ContainsComp = 8,
    ContainsTLB = 16,
    SelfReg = 32,
    SelfUnReg = 64,
    UnloadableDLL = 128,
    DoesNotExist = 256,
    AlreadyInstalled = 512,
    BadTLB = 1024,
    GetClassObjFailed = 2048,
    ClassNotAvailable = 4096,
    Registrar = 8192,
    NoRegistrar = 16384,
    DLLRegsvrFailed = 32768,
    RegTLBFailed = 65536,
    RegistrarFailed = 131072,
    Error = 262144,
};
pub const COMAdminFileFlagLoadable = COMAdminFileFlags.Loadable;
pub const COMAdminFileFlagCOM = COMAdminFileFlags.COM;
pub const COMAdminFileFlagContainsPS = COMAdminFileFlags.ContainsPS;
pub const COMAdminFileFlagContainsComp = COMAdminFileFlags.ContainsComp;
pub const COMAdminFileFlagContainsTLB = COMAdminFileFlags.ContainsTLB;
pub const COMAdminFileFlagSelfReg = COMAdminFileFlags.SelfReg;
pub const COMAdminFileFlagSelfUnReg = COMAdminFileFlags.SelfUnReg;
pub const COMAdminFileFlagUnloadableDLL = COMAdminFileFlags.UnloadableDLL;
pub const COMAdminFileFlagDoesNotExist = COMAdminFileFlags.DoesNotExist;
pub const COMAdminFileFlagAlreadyInstalled = COMAdminFileFlags.AlreadyInstalled;
pub const COMAdminFileFlagBadTLB = COMAdminFileFlags.BadTLB;
pub const COMAdminFileFlagGetClassObjFailed = COMAdminFileFlags.GetClassObjFailed;
pub const COMAdminFileFlagClassNotAvailable = COMAdminFileFlags.ClassNotAvailable;
pub const COMAdminFileFlagRegistrar = COMAdminFileFlags.Registrar;
pub const COMAdminFileFlagNoRegistrar = COMAdminFileFlags.NoRegistrar;
pub const COMAdminFileFlagDLLRegsvrFailed = COMAdminFileFlags.DLLRegsvrFailed;
pub const COMAdminFileFlagRegTLBFailed = COMAdminFileFlags.RegTLBFailed;
pub const COMAdminFileFlagRegistrarFailed = COMAdminFileFlags.RegistrarFailed;
pub const COMAdminFileFlagError = COMAdminFileFlags.Error;

pub const COMAdminComponentFlags = enum(i32) {
    TypeInfoFound = 1,
    COMPlusPropertiesFound = 2,
    ProxyFound = 4,
    InterfacesFound = 8,
    AlreadyInstalled = 16,
    NotInApplication = 32,
};
pub const COMAdminCompFlagTypeInfoFound = COMAdminComponentFlags.TypeInfoFound;
pub const COMAdminCompFlagCOMPlusPropertiesFound = COMAdminComponentFlags.COMPlusPropertiesFound;
pub const COMAdminCompFlagProxyFound = COMAdminComponentFlags.ProxyFound;
pub const COMAdminCompFlagInterfacesFound = COMAdminComponentFlags.InterfacesFound;
pub const COMAdminCompFlagAlreadyInstalled = COMAdminComponentFlags.AlreadyInstalled;
pub const COMAdminCompFlagNotInApplication = COMAdminComponentFlags.NotInApplication;

pub const COMAdminErrorCodes = enum(i32) {
    ObjectErrors = -2146368511,
    ObjectInvalid = -2146368510,
    KeyMissing = -2146368509,
    AlreadyInstalled = -2146368508,
    AppFileWriteFail = -2146368505,
    AppFileReadFail = -2146368504,
    AppFileVersion = -2146368503,
    BadPath = -2146368502,
    ApplicationExists = -2146368501,
    RoleExists = -2146368500,
    CantCopyFile = -2146368499,
    NoUser = -2146368497,
    InvalidUserids = -2146368496,
    NoRegistryCLSID = -2146368495,
    BadRegistryProgID = -2146368494,
    AuthenticationLevel = -2146368493,
    UserPasswdNotValid = -2146368492,
    CLSIDOrIIDMismatch = -2146368488,
    RemoteInterface = -2146368487,
    DllRegisterServer = -2146368486,
    NoServerShare = -2146368485,
    DllLoadFailed = -2146368483,
    BadRegistryLibID = -2146368482,
    AppDirNotFound = -2146368481,
    RegistrarFailed = -2146368477,
    CompFileDoesNotExist = -2146368476,
    CompFileLoadDLLFail = -2146368475,
    CompFileGetClassObj = -2146368474,
    CompFileClassNotAvail = -2146368473,
    CompFileBadTLB = -2146368472,
    CompFileNotInstallable = -2146368471,
    NotChangeable = -2146368470,
    NotDeletable = -2146368469,
    Session = -2146368468,
    CompMoveLocked = -2146368467,
    CompMoveBadDest = -2146368466,
    RegisterTLB = -2146368464,
    SystemApp = -2146368461,
    CompFileNoRegistrar = -2146368460,
    CoReqCompInstalled = -2146368459,
    ServiceNotInstalled = -2146368458,
    PropertySaveFailed = -2146368457,
    ObjectExists = -2146368456,
    ComponentExists = -2146368455,
    RegFileCorrupt = -2146368453,
    PropertyOverflow = -2146368452,
    NotInRegistry = -2146368450,
    ObjectNotPoolable = -2146368449,
    ApplidMatchesClsid = -2146368442,
    RoleDoesNotExist = -2146368441,
    StartAppNeedsComponents = -2146368440,
    RequiresDifferentPlatform = -2146368439,
    QueuingServiceNotAvailable = -2146367998,
    ObjectParentMissing = -2146367480,
    ObjectDoesNotExist = -2146367479,
    CanNotExportAppProxy = -2146368438,
    CanNotStartApp = -2146368437,
    CanNotExportSystemApp = -2146368436,
    CanNotSubscribeToComponent = -2146368435,
    AppNotRunning = -2146367478,
    EventClassCannotBeSubscriber = -2146368434,
    LibAppProxyIncompatible = -2146368433,
    BasePartitionOnly = -2146368432,
    DuplicatePartitionName = -2146368425,
    PartitionInUse = -2146368423,
    ImportedComponentsNotAllowed = -2146368421,
    RegdbNotInitialized = -2146368398,
    RegdbNotOpen = -2146368397,
    RegdbSystemErr = -2146368396,
    RegdbAlreadyRunning = -2146368395,
    MigVersionNotSupported = -2146368384,
    MigSchemaNotFound = -2146368383,
    CatBitnessMismatch = -2146368382,
    CatUnacceptableBitness = -2146368381,
    CatWrongAppBitnessBitness = -2146368380,
    CatPauseResumeNotSupported = -2146368379,
    CatServerFault = -2146368378,
    CantRecycleLibraryApps = -2146367473,
    CantRecycleServiceApps = -2146367471,
    ProcessAlreadyRecycled = -2146367470,
    PausedProcessMayNotBeRecycled = -2146367469,
    InvalidPartition = -2146367477,
    PartitionMsiOnly = -2146367463,
    StartAppDisabled = -2146368431,
    CompMoveSource = -2146367460,
    CompMoveDest = -2146367459,
    CompMovePrivate = -2146367458,
    CannotCopyEventClass = -2146367456,
};
pub const COMAdminErrObjectErrors = COMAdminErrorCodes.ObjectErrors;
pub const COMAdminErrObjectInvalid = COMAdminErrorCodes.ObjectInvalid;
pub const COMAdminErrKeyMissing = COMAdminErrorCodes.KeyMissing;
pub const COMAdminErrAlreadyInstalled = COMAdminErrorCodes.AlreadyInstalled;
pub const COMAdminErrAppFileWriteFail = COMAdminErrorCodes.AppFileWriteFail;
pub const COMAdminErrAppFileReadFail = COMAdminErrorCodes.AppFileReadFail;
pub const COMAdminErrAppFileVersion = COMAdminErrorCodes.AppFileVersion;
pub const COMAdminErrBadPath = COMAdminErrorCodes.BadPath;
pub const COMAdminErrApplicationExists = COMAdminErrorCodes.ApplicationExists;
pub const COMAdminErrRoleExists = COMAdminErrorCodes.RoleExists;
pub const COMAdminErrCantCopyFile = COMAdminErrorCodes.CantCopyFile;
pub const COMAdminErrNoUser = COMAdminErrorCodes.NoUser;
pub const COMAdminErrInvalidUserids = COMAdminErrorCodes.InvalidUserids;
pub const COMAdminErrNoRegistryCLSID = COMAdminErrorCodes.NoRegistryCLSID;
pub const COMAdminErrBadRegistryProgID = COMAdminErrorCodes.BadRegistryProgID;
pub const COMAdminErrAuthenticationLevel = COMAdminErrorCodes.AuthenticationLevel;
pub const COMAdminErrUserPasswdNotValid = COMAdminErrorCodes.UserPasswdNotValid;
pub const COMAdminErrCLSIDOrIIDMismatch = COMAdminErrorCodes.CLSIDOrIIDMismatch;
pub const COMAdminErrRemoteInterface = COMAdminErrorCodes.RemoteInterface;
pub const COMAdminErrDllRegisterServer = COMAdminErrorCodes.DllRegisterServer;
pub const COMAdminErrNoServerShare = COMAdminErrorCodes.NoServerShare;
pub const COMAdminErrDllLoadFailed = COMAdminErrorCodes.DllLoadFailed;
pub const COMAdminErrBadRegistryLibID = COMAdminErrorCodes.BadRegistryLibID;
pub const COMAdminErrAppDirNotFound = COMAdminErrorCodes.AppDirNotFound;
pub const COMAdminErrRegistrarFailed = COMAdminErrorCodes.RegistrarFailed;
pub const COMAdminErrCompFileDoesNotExist = COMAdminErrorCodes.CompFileDoesNotExist;
pub const COMAdminErrCompFileLoadDLLFail = COMAdminErrorCodes.CompFileLoadDLLFail;
pub const COMAdminErrCompFileGetClassObj = COMAdminErrorCodes.CompFileGetClassObj;
pub const COMAdminErrCompFileClassNotAvail = COMAdminErrorCodes.CompFileClassNotAvail;
pub const COMAdminErrCompFileBadTLB = COMAdminErrorCodes.CompFileBadTLB;
pub const COMAdminErrCompFileNotInstallable = COMAdminErrorCodes.CompFileNotInstallable;
pub const COMAdminErrNotChangeable = COMAdminErrorCodes.NotChangeable;
pub const COMAdminErrNotDeletable = COMAdminErrorCodes.NotDeletable;
pub const COMAdminErrSession = COMAdminErrorCodes.Session;
pub const COMAdminErrCompMoveLocked = COMAdminErrorCodes.CompMoveLocked;
pub const COMAdminErrCompMoveBadDest = COMAdminErrorCodes.CompMoveBadDest;
pub const COMAdminErrRegisterTLB = COMAdminErrorCodes.RegisterTLB;
pub const COMAdminErrSystemApp = COMAdminErrorCodes.SystemApp;
pub const COMAdminErrCompFileNoRegistrar = COMAdminErrorCodes.CompFileNoRegistrar;
pub const COMAdminErrCoReqCompInstalled = COMAdminErrorCodes.CoReqCompInstalled;
pub const COMAdminErrServiceNotInstalled = COMAdminErrorCodes.ServiceNotInstalled;
pub const COMAdminErrPropertySaveFailed = COMAdminErrorCodes.PropertySaveFailed;
pub const COMAdminErrObjectExists = COMAdminErrorCodes.ObjectExists;
pub const COMAdminErrComponentExists = COMAdminErrorCodes.ComponentExists;
pub const COMAdminErrRegFileCorrupt = COMAdminErrorCodes.RegFileCorrupt;
pub const COMAdminErrPropertyOverflow = COMAdminErrorCodes.PropertyOverflow;
pub const COMAdminErrNotInRegistry = COMAdminErrorCodes.NotInRegistry;
pub const COMAdminErrObjectNotPoolable = COMAdminErrorCodes.ObjectNotPoolable;
pub const COMAdminErrApplidMatchesClsid = COMAdminErrorCodes.ApplidMatchesClsid;
pub const COMAdminErrRoleDoesNotExist = COMAdminErrorCodes.RoleDoesNotExist;
pub const COMAdminErrStartAppNeedsComponents = COMAdminErrorCodes.StartAppNeedsComponents;
pub const COMAdminErrRequiresDifferentPlatform = COMAdminErrorCodes.RequiresDifferentPlatform;
pub const COMAdminErrQueuingServiceNotAvailable = COMAdminErrorCodes.QueuingServiceNotAvailable;
pub const COMAdminErrObjectParentMissing = COMAdminErrorCodes.ObjectParentMissing;
pub const COMAdminErrObjectDoesNotExist = COMAdminErrorCodes.ObjectDoesNotExist;
pub const COMAdminErrCanNotExportAppProxy = COMAdminErrorCodes.CanNotExportAppProxy;
pub const COMAdminErrCanNotStartApp = COMAdminErrorCodes.CanNotStartApp;
pub const COMAdminErrCanNotExportSystemApp = COMAdminErrorCodes.CanNotExportSystemApp;
pub const COMAdminErrCanNotSubscribeToComponent = COMAdminErrorCodes.CanNotSubscribeToComponent;
pub const COMAdminErrAppNotRunning = COMAdminErrorCodes.AppNotRunning;
pub const COMAdminErrEventClassCannotBeSubscriber = COMAdminErrorCodes.EventClassCannotBeSubscriber;
pub const COMAdminErrLibAppProxyIncompatible = COMAdminErrorCodes.LibAppProxyIncompatible;
pub const COMAdminErrBasePartitionOnly = COMAdminErrorCodes.BasePartitionOnly;
pub const COMAdminErrDuplicatePartitionName = COMAdminErrorCodes.DuplicatePartitionName;
pub const COMAdminErrPartitionInUse = COMAdminErrorCodes.PartitionInUse;
pub const COMAdminErrImportedComponentsNotAllowed = COMAdminErrorCodes.ImportedComponentsNotAllowed;
pub const COMAdminErrRegdbNotInitialized = COMAdminErrorCodes.RegdbNotInitialized;
pub const COMAdminErrRegdbNotOpen = COMAdminErrorCodes.RegdbNotOpen;
pub const COMAdminErrRegdbSystemErr = COMAdminErrorCodes.RegdbSystemErr;
pub const COMAdminErrRegdbAlreadyRunning = COMAdminErrorCodes.RegdbAlreadyRunning;
pub const COMAdminErrMigVersionNotSupported = COMAdminErrorCodes.MigVersionNotSupported;
pub const COMAdminErrMigSchemaNotFound = COMAdminErrorCodes.MigSchemaNotFound;
pub const COMAdminErrCatBitnessMismatch = COMAdminErrorCodes.CatBitnessMismatch;
pub const COMAdminErrCatUnacceptableBitness = COMAdminErrorCodes.CatUnacceptableBitness;
pub const COMAdminErrCatWrongAppBitnessBitness = COMAdminErrorCodes.CatWrongAppBitnessBitness;
pub const COMAdminErrCatPauseResumeNotSupported = COMAdminErrorCodes.CatPauseResumeNotSupported;
pub const COMAdminErrCatServerFault = COMAdminErrorCodes.CatServerFault;
pub const COMAdminErrCantRecycleLibraryApps = COMAdminErrorCodes.CantRecycleLibraryApps;
pub const COMAdminErrCantRecycleServiceApps = COMAdminErrorCodes.CantRecycleServiceApps;
pub const COMAdminErrProcessAlreadyRecycled = COMAdminErrorCodes.ProcessAlreadyRecycled;
pub const COMAdminErrPausedProcessMayNotBeRecycled = COMAdminErrorCodes.PausedProcessMayNotBeRecycled;
pub const COMAdminErrInvalidPartition = COMAdminErrorCodes.InvalidPartition;
pub const COMAdminErrPartitionMsiOnly = COMAdminErrorCodes.PartitionMsiOnly;
pub const COMAdminErrStartAppDisabled = COMAdminErrorCodes.StartAppDisabled;
pub const COMAdminErrCompMoveSource = COMAdminErrorCodes.CompMoveSource;
pub const COMAdminErrCompMoveDest = COMAdminErrorCodes.CompMoveDest;
pub const COMAdminErrCompMovePrivate = COMAdminErrorCodes.CompMovePrivate;
pub const COMAdminErrCannotCopyEventClass = COMAdminErrorCodes.CannotCopyEventClass;

// TODO: this type is limited to platform 'windows5.0'
const IID_ISecurityIdentityColl_Value = Guid.initString("cafc823c-b441-11d1-b82b-0000f8757e2a");
pub const IID_ISecurityIdentityColl = &IID_ISecurityIdentityColl_Value;
pub const ISecurityIdentityColl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISecurityIdentityColl,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISecurityIdentityColl,
            name: ?BSTR,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISecurityIdentityColl,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const ISecurityIdentityColl.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISecurityIdentityColl, @ptrCast(self)), pl_count_);
            }
            pub inline fn getItem(self: *const T, name_: ?BSTR, p_item_: ?*VARIANT) HRESULT {
                return @as(*const ISecurityIdentityColl.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ISecurityIdentityColl, @ptrCast(self)), name_, p_item_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const ISecurityIdentityColl.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISecurityIdentityColl, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISecurityCallersColl_Value = Guid.initString("cafc823d-b441-11d1-b82b-0000f8757e2a");
pub const IID_ISecurityCallersColl = &IID_ISecurityCallersColl_Value;
pub const ISecurityCallersColl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISecurityCallersColl,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISecurityCallersColl,
            l_index: i32,
            p_obj: ?*?*ISecurityIdentityColl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISecurityCallersColl,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const ISecurityCallersColl.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISecurityCallersColl, @ptrCast(self)), pl_count_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_obj_: ?*?*ISecurityIdentityColl) HRESULT {
                return @as(*const ISecurityCallersColl.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ISecurityCallersColl, @ptrCast(self)), l_index_, p_obj_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const ISecurityCallersColl.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISecurityCallersColl, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISecurityCallContext_Value = Guid.initString("cafc823e-b441-11d1-b82b-0000f8757e2a");
pub const IID_ISecurityCallContext = &IID_ISecurityCallContext_Value;
pub const ISecurityCallContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISecurityCallContext,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISecurityCallContext,
            name: ?BSTR,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISecurityCallContext,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCallerInRole: *const fn (
            self: *const ISecurityCallContext,
            bstr_role: ?BSTR,
            pf_in_role: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSecurityEnabled: *const fn (
            self: *const ISecurityCallContext,
            pf_is_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUserInRole: *const fn (
            self: *const ISecurityCallContext,
            p_user: ?*VARIANT,
            bstr_role: ?BSTR,
            pf_in_role: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const ISecurityCallContext.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISecurityCallContext, @ptrCast(self)), pl_count_);
            }
            pub inline fn getItem(self: *const T, name_: ?BSTR, p_item_: ?*VARIANT) HRESULT {
                return @as(*const ISecurityCallContext.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ISecurityCallContext, @ptrCast(self)), name_, p_item_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const ISecurityCallContext.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISecurityCallContext, @ptrCast(self)), pp_enum_);
            }
            pub inline fn isCallerInRole(self: *const T, bstr_role_: ?BSTR, pf_in_role_: ?*i16) HRESULT {
                return @as(*const ISecurityCallContext.VTable, @ptrCast(self.vtable)).IsCallerInRole(@as(*const ISecurityCallContext, @ptrCast(self)), bstr_role_, pf_in_role_);
            }
            pub inline fn isSecurityEnabled(self: *const T, pf_is_enabled_: ?*i16) HRESULT {
                return @as(*const ISecurityCallContext.VTable, @ptrCast(self.vtable)).IsSecurityEnabled(@as(*const ISecurityCallContext, @ptrCast(self)), pf_is_enabled_);
            }
            pub inline fn isUserInRole(self: *const T, p_user_: ?*VARIANT, bstr_role_: ?BSTR, pf_in_role_: ?*i16) HRESULT {
                return @as(*const ISecurityCallContext.VTable, @ptrCast(self.vtable)).IsUserInRole(@as(*const ISecurityCallContext, @ptrCast(self)), p_user_, bstr_role_, pf_in_role_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IGetSecurityCallContext_Value = Guid.initString("cafc823f-b441-11d1-b82b-0000f8757e2a");
pub const IID_IGetSecurityCallContext = &IID_IGetSecurityCallContext_Value;
pub const IGetSecurityCallContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetSecurityCallContext: *const fn (
            self: *const IGetSecurityCallContext,
            pp_object: ?*?*ISecurityCallContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSecurityCallContext(self: *const T, pp_object_: ?*?*ISecurityCallContext) HRESULT {
                return @as(*const IGetSecurityCallContext.VTable, @ptrCast(self.vtable)).GetSecurityCallContext(@as(*const IGetSecurityCallContext, @ptrCast(self)), pp_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_SecurityProperty_Value = Guid.initString("e74a7215-014d-11d1-a63c-00a0c911b4e0");
pub const IID_SecurityProperty = &IID_SecurityProperty_Value;
pub const SecurityProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetDirectCallerName: *const fn (
            self: *const SecurityProperty,
            bstr_user_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDirectCreatorName: *const fn (
            self: *const SecurityProperty,
            bstr_user_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalCallerName: *const fn (
            self: *const SecurityProperty,
            bstr_user_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalCreatorName: *const fn (
            self: *const SecurityProperty,
            bstr_user_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDirectCallerName(self: *const T, bstr_user_name_: ?*?BSTR) HRESULT {
                return @as(*const SecurityProperty.VTable, @ptrCast(self.vtable)).GetDirectCallerName(@as(*const SecurityProperty, @ptrCast(self)), bstr_user_name_);
            }
            pub inline fn getDirectCreatorName(self: *const T, bstr_user_name_: ?*?BSTR) HRESULT {
                return @as(*const SecurityProperty.VTable, @ptrCast(self.vtable)).GetDirectCreatorName(@as(*const SecurityProperty, @ptrCast(self)), bstr_user_name_);
            }
            pub inline fn getOriginalCallerName(self: *const T, bstr_user_name_: ?*?BSTR) HRESULT {
                return @as(*const SecurityProperty.VTable, @ptrCast(self.vtable)).GetOriginalCallerName(@as(*const SecurityProperty, @ptrCast(self)), bstr_user_name_);
            }
            pub inline fn getOriginalCreatorName(self: *const T, bstr_user_name_: ?*?BSTR) HRESULT {
                return @as(*const SecurityProperty.VTable, @ptrCast(self.vtable)).GetOriginalCreatorName(@as(*const SecurityProperty, @ptrCast(self)), bstr_user_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ContextInfo_Value = Guid.initString("19a5a02c-0ac8-11d2-b286-00c04f8ef934");
pub const IID_ContextInfo = &IID_ContextInfo_Value;
pub const ContextInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        IsInTransaction: *const fn (
            self: *const ContextInfo,
            pb_is_in_tx: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransaction: *const fn (
            self: *const ContextInfo,
            pp_tx: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionId: *const fn (
            self: *const ContextInfo,
            pbstr_tx_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActivityId: *const fn (
            self: *const ContextInfo,
            pbstr_activity_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContextId: *const fn (
            self: *const ContextInfo,
            pbstr_ctx_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn isInTransaction(self: *const T, pb_is_in_tx_: ?*i16) HRESULT {
                return @as(*const ContextInfo.VTable, @ptrCast(self.vtable)).IsInTransaction(@as(*const ContextInfo, @ptrCast(self)), pb_is_in_tx_);
            }
            pub inline fn getTransaction(self: *const T, pp_tx_: ?*?*IUnknown) HRESULT {
                return @as(*const ContextInfo.VTable, @ptrCast(self.vtable)).GetTransaction(@as(*const ContextInfo, @ptrCast(self)), pp_tx_);
            }
            pub inline fn getTransactionId(self: *const T, pbstr_tx_id_: ?*?BSTR) HRESULT {
                return @as(*const ContextInfo.VTable, @ptrCast(self.vtable)).GetTransactionId(@as(*const ContextInfo, @ptrCast(self)), pbstr_tx_id_);
            }
            pub inline fn getActivityId(self: *const T, pbstr_activity_id_: ?*?BSTR) HRESULT {
                return @as(*const ContextInfo.VTable, @ptrCast(self.vtable)).GetActivityId(@as(*const ContextInfo, @ptrCast(self)), pbstr_activity_id_);
            }
            pub inline fn getContextId(self: *const T, pbstr_ctx_id_: ?*?BSTR) HRESULT {
                return @as(*const ContextInfo.VTable, @ptrCast(self.vtable)).GetContextId(@as(*const ContextInfo, @ptrCast(self)), pbstr_ctx_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ContextInfo2_Value = Guid.initString("c99d6e75-2375-11d4-8331-00c04f605588");
pub const IID_ContextInfo2 = &IID_ContextInfo2_Value;
pub const ContextInfo2 = extern struct {
    pub const VTable = extern struct {
        base: ContextInfo.VTable,
        GetPartitionId: *const fn (
            self: *const ContextInfo2,
            ___m_i_d_l___context_info20000: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationId: *const fn (
            self: *const ContextInfo2,
            ___m_i_d_l___context_info20001: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationInstanceId: *const fn (
            self: *const ContextInfo2,
            ___m_i_d_l___context_info20002: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ContextInfo.MethodMixin(T);
            pub inline fn getPartitionId(self: *const T, ___m_i_d_l___context_info20000_: ?*?BSTR) HRESULT {
                return @as(*const ContextInfo2.VTable, @ptrCast(self.vtable)).GetPartitionId(@as(*const ContextInfo2, @ptrCast(self)), ___m_i_d_l___context_info20000_);
            }
            pub inline fn getApplicationId(self: *const T, ___m_i_d_l___context_info20001_: ?*?BSTR) HRESULT {
                return @as(*const ContextInfo2.VTable, @ptrCast(self.vtable)).GetApplicationId(@as(*const ContextInfo2, @ptrCast(self)), ___m_i_d_l___context_info20001_);
            }
            pub inline fn getApplicationInstanceId(self: *const T, ___m_i_d_l___context_info20002_: ?*?BSTR) HRESULT {
                return @as(*const ContextInfo2.VTable, @ptrCast(self.vtable)).GetApplicationInstanceId(@as(*const ContextInfo2, @ptrCast(self)), ___m_i_d_l___context_info20002_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ObjectContext_Value = Guid.initString("74c08646-cedb-11cf-8b49-00aa00b8a790");
pub const IID_ObjectContext = &IID_ObjectContext_Value;
pub const ObjectContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateInstance: *const fn (
            self: *const ObjectContext,
            bstr_prog_i_d: ?BSTR,
            p_object: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComplete: *const fn (
            self: *const ObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAbort: *const fn (
            self: *const ObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableCommit: *const fn (
            self: *const ObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableCommit: *const fn (
            self: *const ObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInTransaction: *const fn (
            self: *const ObjectContext,
            pb_is_in_tx: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSecurityEnabled: *const fn (
            self: *const ObjectContext,
            pb_is_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCallerInRole: *const fn (
            self: *const ObjectContext,
            bstr_role: ?BSTR,
            pb_in_role: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ObjectContext,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ObjectContext,
            name: ?BSTR,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ObjectContext,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ObjectContext,
            pp_security_property: ?*?*SecurityProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContextInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ObjectContext,
            pp_context_info: ?*?*ContextInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createInstance(self: *const T, bstr_prog_i_d_: ?BSTR, p_object_: ?*VARIANT) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const ObjectContext, @ptrCast(self)), bstr_prog_i_d_, p_object_);
            }
            pub inline fn setComplete(self: *const T) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).SetComplete(@as(*const ObjectContext, @ptrCast(self)));
            }
            pub inline fn setAbort(self: *const T) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).SetAbort(@as(*const ObjectContext, @ptrCast(self)));
            }
            pub inline fn enableCommit(self: *const T) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).EnableCommit(@as(*const ObjectContext, @ptrCast(self)));
            }
            pub inline fn disableCommit(self: *const T) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).DisableCommit(@as(*const ObjectContext, @ptrCast(self)));
            }
            pub inline fn isInTransaction(self: *const T, pb_is_in_tx_: ?*i16) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).IsInTransaction(@as(*const ObjectContext, @ptrCast(self)), pb_is_in_tx_);
            }
            pub inline fn isSecurityEnabled(self: *const T, pb_is_enabled_: ?*i16) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).IsSecurityEnabled(@as(*const ObjectContext, @ptrCast(self)), pb_is_enabled_);
            }
            pub inline fn isCallerInRole(self: *const T, bstr_role_: ?BSTR, pb_in_role_: ?*i16) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).IsCallerInRole(@as(*const ObjectContext, @ptrCast(self)), bstr_role_, pb_in_role_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ObjectContext, @ptrCast(self)), pl_count_);
            }
            pub inline fn getItem(self: *const T, name_: ?BSTR, p_item_: ?*VARIANT) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ObjectContext, @ptrCast(self)), name_, p_item_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ObjectContext, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getSecurity(self: *const T, pp_security_property_: ?*?*SecurityProperty) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).get_Security(@as(*const ObjectContext, @ptrCast(self)), pp_security_property_);
            }
            pub inline fn getContextInfo(self: *const T, pp_context_info_: ?*?*ContextInfo) HRESULT {
                return @as(*const ObjectContext.VTable, @ptrCast(self.vtable)).get_ContextInfo(@as(*const ObjectContext, @ptrCast(self)), pp_context_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITransactionContextEx_Value = Guid.initString("7999fc22-d3c6-11cf-acab-00a024a55aef");
pub const IID_ITransactionContextEx = &IID_ITransactionContextEx_Value;
pub const ITransactionContextEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstance: *const fn (
            self: *const ITransactionContextEx,
            rclsid: ?*const Guid,
            riid: ?*const Guid,
            p_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const ITransactionContextEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const ITransactionContextEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createInstance(self: *const T, rclsid_: ?*const Guid, riid_: ?*const Guid, p_object_: ?*?*anyopaque) HRESULT {
                return @as(*const ITransactionContextEx.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const ITransactionContextEx, @ptrCast(self)), rclsid_, riid_, p_object_);
            }
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const ITransactionContextEx.VTable, @ptrCast(self.vtable)).Commit(@as(*const ITransactionContextEx, @ptrCast(self)));
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const ITransactionContextEx.VTable, @ptrCast(self.vtable)).Abort(@as(*const ITransactionContextEx, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITransactionContext_Value = Guid.initString("7999fc21-d3c6-11cf-acab-00a024a55aef");
pub const IID_ITransactionContext = &IID_ITransactionContext_Value;
pub const ITransactionContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateInstance: *const fn (
            self: *const ITransactionContext,
            psz_prog_id: ?BSTR,
            p_object: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const ITransactionContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const ITransactionContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createInstance(self: *const T, psz_prog_id_: ?BSTR, p_object_: ?*VARIANT) HRESULT {
                return @as(*const ITransactionContext.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const ITransactionContext, @ptrCast(self)), psz_prog_id_, p_object_);
            }
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const ITransactionContext.VTable, @ptrCast(self.vtable)).Commit(@as(*const ITransactionContext, @ptrCast(self)));
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const ITransactionContext.VTable, @ptrCast(self.vtable)).Abort(@as(*const ITransactionContext, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICreateWithTransactionEx_Value = Guid.initString("455acf57-5345-11d2-99cf-00c04f797bc9");
pub const IID_ICreateWithTransactionEx = &IID_ICreateWithTransactionEx_Value;
pub const ICreateWithTransactionEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstance: *const fn (
            self: *const ICreateWithTransactionEx,
            p_transaction: ?*ITransaction,
            rclsid: ?*const Guid,
            riid: ?*const Guid,
            p_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createInstance(self: *const T, p_transaction_: ?*ITransaction, rclsid_: ?*const Guid, riid_: ?*const Guid, p_object_: ?*?*anyopaque) HRESULT {
                return @as(*const ICreateWithTransactionEx.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const ICreateWithTransactionEx, @ptrCast(self)), p_transaction_, rclsid_, riid_, p_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICreateWithLocalTransaction_Value = Guid.initString("227ac7a8-8423-42ce-b7cf-03061ec9aaa3");
pub const IID_ICreateWithLocalTransaction = &IID_ICreateWithLocalTransaction_Value;
pub const ICreateWithLocalTransaction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstanceWithSysTx: *const fn (
            self: *const ICreateWithLocalTransaction,
            p_transaction: ?*IUnknown,
            rclsid: ?*const Guid,
            riid: ?*const Guid,
            p_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createInstanceWithSysTx(self: *const T, p_transaction_: ?*IUnknown, rclsid_: ?*const Guid, riid_: ?*const Guid, p_object_: ?*?*anyopaque) HRESULT {
                return @as(*const ICreateWithLocalTransaction.VTable, @ptrCast(self.vtable)).CreateInstanceWithSysTx(@as(*const ICreateWithLocalTransaction, @ptrCast(self)), p_transaction_, rclsid_, riid_, p_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICreateWithTipTransactionEx_Value = Guid.initString("455acf59-5345-11d2-99cf-00c04f797bc9");
pub const IID_ICreateWithTipTransactionEx = &IID_ICreateWithTipTransactionEx_Value;
pub const ICreateWithTipTransactionEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstance: *const fn (
            self: *const ICreateWithTipTransactionEx,
            bstr_tip_url: ?BSTR,
            rclsid: ?*const Guid,
            riid: ?*const Guid,
            p_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createInstance(self: *const T, bstr_tip_url_: ?BSTR, rclsid_: ?*const Guid, riid_: ?*const Guid, p_object_: ?*?*anyopaque) HRESULT {
                return @as(*const ICreateWithTipTransactionEx.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const ICreateWithTipTransactionEx, @ptrCast(self)), bstr_tip_url_, rclsid_, riid_, p_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const COMSVCSEVENTINFO = extern struct {
    cbSize: u32,
    dwPid: u32,
    lTime: i64,
    lMicroTime: i32,
    perfCount: i64,
    guidApp: Guid,
    sMachineName: ?PWSTR,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IComLTxEvents_Value = Guid.initString("605cf82c-578e-4298-975d-82babcd9e053");
pub const IID_IComLTxEvents = &IID_IComLTxEvents_Value;
pub const IComLTxEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnLtxTransactionStart: *const fn (
            self: *const IComLTxEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_ltx: Guid,
            tsid: Guid,
            f_root: BOOL,
            n_isolation_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLtxTransactionPrepare: *const fn (
            self: *const IComLTxEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_ltx: Guid,
            f_vote: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLtxTransactionAbort: *const fn (
            self: *const IComLTxEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_ltx: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLtxTransactionCommit: *const fn (
            self: *const IComLTxEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_ltx: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLtxTransactionPromote: *const fn (
            self: *const IComLTxEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_ltx: Guid,
            txn_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onLtxTransactionStart(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_ltx_: Guid, tsid_: Guid, f_root_: BOOL, n_isolation_level_: i32) HRESULT {
                return @as(*const IComLTxEvents.VTable, @ptrCast(self.vtable)).OnLtxTransactionStart(@as(*const IComLTxEvents, @ptrCast(self)), p_info_, guid_ltx_, tsid_, f_root_, n_isolation_level_);
            }
            pub inline fn onLtxTransactionPrepare(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_ltx_: Guid, f_vote_: BOOL) HRESULT {
                return @as(*const IComLTxEvents.VTable, @ptrCast(self.vtable)).OnLtxTransactionPrepare(@as(*const IComLTxEvents, @ptrCast(self)), p_info_, guid_ltx_, f_vote_);
            }
            pub inline fn onLtxTransactionAbort(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_ltx_: Guid) HRESULT {
                return @as(*const IComLTxEvents.VTable, @ptrCast(self.vtable)).OnLtxTransactionAbort(@as(*const IComLTxEvents, @ptrCast(self)), p_info_, guid_ltx_);
            }
            pub inline fn onLtxTransactionCommit(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_ltx_: Guid) HRESULT {
                return @as(*const IComLTxEvents.VTable, @ptrCast(self.vtable)).OnLtxTransactionCommit(@as(*const IComLTxEvents, @ptrCast(self)), p_info_, guid_ltx_);
            }
            pub inline fn onLtxTransactionPromote(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_ltx_: Guid, txn_id_: Guid) HRESULT {
                return @as(*const IComLTxEvents.VTable, @ptrCast(self.vtable)).OnLtxTransactionPromote(@as(*const IComLTxEvents, @ptrCast(self)), p_info_, guid_ltx_, txn_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComUserEvent_Value = Guid.initString("683130a4-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComUserEvent = &IID_IComUserEvent_Value;
pub const IComUserEvent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnUserEvent: *const fn (
            self: *const IComUserEvent,
            p_info: ?*COMSVCSEVENTINFO,
            pvar_event: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onUserEvent(self: *const T, p_info_: ?*COMSVCSEVENTINFO, pvar_event_: ?*VARIANT) HRESULT {
                return @as(*const IComUserEvent.VTable, @ptrCast(self.vtable)).OnUserEvent(@as(*const IComUserEvent, @ptrCast(self)), p_info_, pvar_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComThreadEvents_Value = Guid.initString("683130a5-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComThreadEvents = &IID_IComThreadEvents_Value;
pub const IComThreadEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnThreadStart: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            thread_i_d: u64,
            dw_thread: u32,
            dw_thead_cnt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadTerminate: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            thread_i_d: u64,
            dw_thread: u32,
            dw_thead_cnt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadBindToApartment: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            thread_i_d: u64,
            apt_i_d: u64,
            dw_act_cnt: u32,
            dw_low_cnt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadUnBind: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            thread_i_d: u64,
            apt_i_d: u64,
            dw_act_cnt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkEnque: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            thread_i_d: u64,
            msg_work_i_d: u64,
            queue_len: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkPrivate: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            thread_i_d: u64,
            msg_work_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkPublic: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            thread_i_d: u64,
            msg_work_i_d: u64,
            queue_len: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkRedirect: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            thread_i_d: u64,
            msg_work_i_d: u64,
            queue_len: u32,
            thread_num: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkReject: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            thread_i_d: u64,
            msg_work_i_d: u64,
            queue_len: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadAssignApartment: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            apt_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadUnassignApartment: *const fn (
            self: *const IComThreadEvents,
            p_info: ?*COMSVCSEVENTINFO,
            apt_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onThreadStart(self: *const T, p_info_: ?*COMSVCSEVENTINFO, thread_i_d_: u64, dw_thread_: u32, dw_thead_cnt_: u32) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadStart(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, thread_i_d_, dw_thread_, dw_thead_cnt_);
            }
            pub inline fn onThreadTerminate(self: *const T, p_info_: ?*COMSVCSEVENTINFO, thread_i_d_: u64, dw_thread_: u32, dw_thead_cnt_: u32) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadTerminate(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, thread_i_d_, dw_thread_, dw_thead_cnt_);
            }
            pub inline fn onThreadBindToApartment(self: *const T, p_info_: ?*COMSVCSEVENTINFO, thread_i_d_: u64, apt_i_d_: u64, dw_act_cnt_: u32, dw_low_cnt_: u32) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadBindToApartment(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, thread_i_d_, apt_i_d_, dw_act_cnt_, dw_low_cnt_);
            }
            pub inline fn onThreadUnBind(self: *const T, p_info_: ?*COMSVCSEVENTINFO, thread_i_d_: u64, apt_i_d_: u64, dw_act_cnt_: u32) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadUnBind(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, thread_i_d_, apt_i_d_, dw_act_cnt_);
            }
            pub inline fn onThreadWorkEnque(self: *const T, p_info_: ?*COMSVCSEVENTINFO, thread_i_d_: u64, msg_work_i_d_: u64, queue_len_: u32) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadWorkEnque(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, thread_i_d_, msg_work_i_d_, queue_len_);
            }
            pub inline fn onThreadWorkPrivate(self: *const T, p_info_: ?*COMSVCSEVENTINFO, thread_i_d_: u64, msg_work_i_d_: u64) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadWorkPrivate(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, thread_i_d_, msg_work_i_d_);
            }
            pub inline fn onThreadWorkPublic(self: *const T, p_info_: ?*COMSVCSEVENTINFO, thread_i_d_: u64, msg_work_i_d_: u64, queue_len_: u32) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadWorkPublic(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, thread_i_d_, msg_work_i_d_, queue_len_);
            }
            pub inline fn onThreadWorkRedirect(self: *const T, p_info_: ?*COMSVCSEVENTINFO, thread_i_d_: u64, msg_work_i_d_: u64, queue_len_: u32, thread_num_: u64) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadWorkRedirect(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, thread_i_d_, msg_work_i_d_, queue_len_, thread_num_);
            }
            pub inline fn onThreadWorkReject(self: *const T, p_info_: ?*COMSVCSEVENTINFO, thread_i_d_: u64, msg_work_i_d_: u64, queue_len_: u32) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadWorkReject(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, thread_i_d_, msg_work_i_d_, queue_len_);
            }
            pub inline fn onThreadAssignApartment(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, apt_i_d_: u64) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadAssignApartment(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, guid_activity_, apt_i_d_);
            }
            pub inline fn onThreadUnassignApartment(self: *const T, p_info_: ?*COMSVCSEVENTINFO, apt_i_d_: u64) HRESULT {
                return @as(*const IComThreadEvents.VTable, @ptrCast(self.vtable)).OnThreadUnassignApartment(@as(*const IComThreadEvents, @ptrCast(self)), p_info_, apt_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComAppEvents_Value = Guid.initString("683130a6-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComAppEvents = &IID_IComAppEvents_Value;
pub const IComAppEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnAppActivation: *const fn (
            self: *const IComAppEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppShutdown: *const fn (
            self: *const IComAppEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppForceShutdown: *const fn (
            self: *const IComAppEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onAppActivation(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid) HRESULT {
                return @as(*const IComAppEvents.VTable, @ptrCast(self.vtable)).OnAppActivation(@as(*const IComAppEvents, @ptrCast(self)), p_info_, guid_app_);
            }
            pub inline fn onAppShutdown(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid) HRESULT {
                return @as(*const IComAppEvents.VTable, @ptrCast(self.vtable)).OnAppShutdown(@as(*const IComAppEvents, @ptrCast(self)), p_info_, guid_app_);
            }
            pub inline fn onAppForceShutdown(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid) HRESULT {
                return @as(*const IComAppEvents.VTable, @ptrCast(self.vtable)).OnAppForceShutdown(@as(*const IComAppEvents, @ptrCast(self)), p_info_, guid_app_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComInstanceEvents_Value = Guid.initString("683130a7-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComInstanceEvents = &IID_IComInstanceEvents_Value;
pub const IComInstanceEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectCreate: *const fn (
            self: *const IComInstanceEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            clsid: ?*const Guid,
            tsid: ?*const Guid,
            ctxt_i_d: u64,
            object_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjectDestroy: *const fn (
            self: *const IComInstanceEvents,
            p_info: ?*COMSVCSEVENTINFO,
            ctxt_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onObjectCreate(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, clsid_: ?*const Guid, tsid_: ?*const Guid, ctxt_i_d_: u64, object_i_d_: u64) HRESULT {
                return @as(*const IComInstanceEvents.VTable, @ptrCast(self.vtable)).OnObjectCreate(@as(*const IComInstanceEvents, @ptrCast(self)), p_info_, guid_activity_, clsid_, tsid_, ctxt_i_d_, object_i_d_);
            }
            pub inline fn onObjectDestroy(self: *const T, p_info_: ?*COMSVCSEVENTINFO, ctxt_i_d_: u64) HRESULT {
                return @as(*const IComInstanceEvents.VTable, @ptrCast(self.vtable)).OnObjectDestroy(@as(*const IComInstanceEvents, @ptrCast(self)), p_info_, ctxt_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComTransactionEvents_Value = Guid.initString("683130a8-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComTransactionEvents = &IID_IComTransactionEvents_Value;
pub const IComTransactionEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnTransactionStart: *const fn (
            self: *const IComTransactionEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_tx: ?*const Guid,
            tsid: ?*const Guid,
            f_root: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionPrepare: *const fn (
            self: *const IComTransactionEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_tx: ?*const Guid,
            f_vote_yes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionAbort: *const fn (
            self: *const IComTransactionEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_tx: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionCommit: *const fn (
            self: *const IComTransactionEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_tx: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onTransactionStart(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_tx_: ?*const Guid, tsid_: ?*const Guid, f_root_: BOOL) HRESULT {
                return @as(*const IComTransactionEvents.VTable, @ptrCast(self.vtable)).OnTransactionStart(@as(*const IComTransactionEvents, @ptrCast(self)), p_info_, guid_tx_, tsid_, f_root_);
            }
            pub inline fn onTransactionPrepare(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_tx_: ?*const Guid, f_vote_yes_: BOOL) HRESULT {
                return @as(*const IComTransactionEvents.VTable, @ptrCast(self.vtable)).OnTransactionPrepare(@as(*const IComTransactionEvents, @ptrCast(self)), p_info_, guid_tx_, f_vote_yes_);
            }
            pub inline fn onTransactionAbort(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_tx_: ?*const Guid) HRESULT {
                return @as(*const IComTransactionEvents.VTable, @ptrCast(self.vtable)).OnTransactionAbort(@as(*const IComTransactionEvents, @ptrCast(self)), p_info_, guid_tx_);
            }
            pub inline fn onTransactionCommit(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_tx_: ?*const Guid) HRESULT {
                return @as(*const IComTransactionEvents.VTable, @ptrCast(self.vtable)).OnTransactionCommit(@as(*const IComTransactionEvents, @ptrCast(self)), p_info_, guid_tx_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComMethodEvents_Value = Guid.initString("683130a9-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComMethodEvents = &IID_IComMethodEvents_Value;
pub const IComMethodEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnMethodCall: *const fn (
            self: *const IComMethodEvents,
            p_info: ?*COMSVCSEVENTINFO,
            oid: u64,
            guid_cid: ?*const Guid,
            guid_rid: ?*const Guid,
            i_meth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMethodReturn: *const fn (
            self: *const IComMethodEvents,
            p_info: ?*COMSVCSEVENTINFO,
            oid: u64,
            guid_cid: ?*const Guid,
            guid_rid: ?*const Guid,
            i_meth: u32,
            hresult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMethodException: *const fn (
            self: *const IComMethodEvents,
            p_info: ?*COMSVCSEVENTINFO,
            oid: u64,
            guid_cid: ?*const Guid,
            guid_rid: ?*const Guid,
            i_meth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onMethodCall(self: *const T, p_info_: ?*COMSVCSEVENTINFO, oid_: u64, guid_cid_: ?*const Guid, guid_rid_: ?*const Guid, i_meth_: u32) HRESULT {
                return @as(*const IComMethodEvents.VTable, @ptrCast(self.vtable)).OnMethodCall(@as(*const IComMethodEvents, @ptrCast(self)), p_info_, oid_, guid_cid_, guid_rid_, i_meth_);
            }
            pub inline fn onMethodReturn(self: *const T, p_info_: ?*COMSVCSEVENTINFO, oid_: u64, guid_cid_: ?*const Guid, guid_rid_: ?*const Guid, i_meth_: u32, hresult_: HRESULT) HRESULT {
                return @as(*const IComMethodEvents.VTable, @ptrCast(self.vtable)).OnMethodReturn(@as(*const IComMethodEvents, @ptrCast(self)), p_info_, oid_, guid_cid_, guid_rid_, i_meth_, hresult_);
            }
            pub inline fn onMethodException(self: *const T, p_info_: ?*COMSVCSEVENTINFO, oid_: u64, guid_cid_: ?*const Guid, guid_rid_: ?*const Guid, i_meth_: u32) HRESULT {
                return @as(*const IComMethodEvents.VTable, @ptrCast(self.vtable)).OnMethodException(@as(*const IComMethodEvents, @ptrCast(self)), p_info_, oid_, guid_cid_, guid_rid_, i_meth_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComObjectEvents_Value = Guid.initString("683130aa-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComObjectEvents = &IID_IComObjectEvents_Value;
pub const IComObjectEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectActivate: *const fn (
            self: *const IComObjectEvents,
            p_info: ?*COMSVCSEVENTINFO,
            ctxt_i_d: u64,
            object_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjectDeactivate: *const fn (
            self: *const IComObjectEvents,
            p_info: ?*COMSVCSEVENTINFO,
            ctxt_i_d: u64,
            object_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDisableCommit: *const fn (
            self: *const IComObjectEvents,
            p_info: ?*COMSVCSEVENTINFO,
            ctxt_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEnableCommit: *const fn (
            self: *const IComObjectEvents,
            p_info: ?*COMSVCSEVENTINFO,
            ctxt_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetComplete: *const fn (
            self: *const IComObjectEvents,
            p_info: ?*COMSVCSEVENTINFO,
            ctxt_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetAbort: *const fn (
            self: *const IComObjectEvents,
            p_info: ?*COMSVCSEVENTINFO,
            ctxt_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onObjectActivate(self: *const T, p_info_: ?*COMSVCSEVENTINFO, ctxt_i_d_: u64, object_i_d_: u64) HRESULT {
                return @as(*const IComObjectEvents.VTable, @ptrCast(self.vtable)).OnObjectActivate(@as(*const IComObjectEvents, @ptrCast(self)), p_info_, ctxt_i_d_, object_i_d_);
            }
            pub inline fn onObjectDeactivate(self: *const T, p_info_: ?*COMSVCSEVENTINFO, ctxt_i_d_: u64, object_i_d_: u64) HRESULT {
                return @as(*const IComObjectEvents.VTable, @ptrCast(self.vtable)).OnObjectDeactivate(@as(*const IComObjectEvents, @ptrCast(self)), p_info_, ctxt_i_d_, object_i_d_);
            }
            pub inline fn onDisableCommit(self: *const T, p_info_: ?*COMSVCSEVENTINFO, ctxt_i_d_: u64) HRESULT {
                return @as(*const IComObjectEvents.VTable, @ptrCast(self.vtable)).OnDisableCommit(@as(*const IComObjectEvents, @ptrCast(self)), p_info_, ctxt_i_d_);
            }
            pub inline fn onEnableCommit(self: *const T, p_info_: ?*COMSVCSEVENTINFO, ctxt_i_d_: u64) HRESULT {
                return @as(*const IComObjectEvents.VTable, @ptrCast(self.vtable)).OnEnableCommit(@as(*const IComObjectEvents, @ptrCast(self)), p_info_, ctxt_i_d_);
            }
            pub inline fn onSetComplete(self: *const T, p_info_: ?*COMSVCSEVENTINFO, ctxt_i_d_: u64) HRESULT {
                return @as(*const IComObjectEvents.VTable, @ptrCast(self.vtable)).OnSetComplete(@as(*const IComObjectEvents, @ptrCast(self)), p_info_, ctxt_i_d_);
            }
            pub inline fn onSetAbort(self: *const T, p_info_: ?*COMSVCSEVENTINFO, ctxt_i_d_: u64) HRESULT {
                return @as(*const IComObjectEvents.VTable, @ptrCast(self.vtable)).OnSetAbort(@as(*const IComObjectEvents, @ptrCast(self)), p_info_, ctxt_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComResourceEvents_Value = Guid.initString("683130ab-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComResourceEvents = &IID_IComResourceEvents_Value;
pub const IComResourceEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnResourceCreate: *const fn (
            self: *const IComResourceEvents,
            p_info: ?*COMSVCSEVENTINFO,
            object_i_d: u64,
            psz_type: ?[*:0]const u16,
            res_id: u64,
            enlisted: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResourceAllocate: *const fn (
            self: *const IComResourceEvents,
            p_info: ?*COMSVCSEVENTINFO,
            object_i_d: u64,
            psz_type: ?[*:0]const u16,
            res_id: u64,
            enlisted: BOOL,
            num_rated: u32,
            rating: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResourceRecycle: *const fn (
            self: *const IComResourceEvents,
            p_info: ?*COMSVCSEVENTINFO,
            object_i_d: u64,
            psz_type: ?[*:0]const u16,
            res_id: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResourceDestroy: *const fn (
            self: *const IComResourceEvents,
            p_info: ?*COMSVCSEVENTINFO,
            object_i_d: u64,
            hr: HRESULT,
            psz_type: ?[*:0]const u16,
            res_id: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResourceTrack: *const fn (
            self: *const IComResourceEvents,
            p_info: ?*COMSVCSEVENTINFO,
            object_i_d: u64,
            psz_type: ?[*:0]const u16,
            res_id: u64,
            enlisted: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onResourceCreate(self: *const T, p_info_: ?*COMSVCSEVENTINFO, object_i_d_: u64, psz_type_: ?[*:0]const u16, res_id_: u64, enlisted_: BOOL) HRESULT {
                return @as(*const IComResourceEvents.VTable, @ptrCast(self.vtable)).OnResourceCreate(@as(*const IComResourceEvents, @ptrCast(self)), p_info_, object_i_d_, psz_type_, res_id_, enlisted_);
            }
            pub inline fn onResourceAllocate(self: *const T, p_info_: ?*COMSVCSEVENTINFO, object_i_d_: u64, psz_type_: ?[*:0]const u16, res_id_: u64, enlisted_: BOOL, num_rated_: u32, rating_: u32) HRESULT {
                return @as(*const IComResourceEvents.VTable, @ptrCast(self.vtable)).OnResourceAllocate(@as(*const IComResourceEvents, @ptrCast(self)), p_info_, object_i_d_, psz_type_, res_id_, enlisted_, num_rated_, rating_);
            }
            pub inline fn onResourceRecycle(self: *const T, p_info_: ?*COMSVCSEVENTINFO, object_i_d_: u64, psz_type_: ?[*:0]const u16, res_id_: u64) HRESULT {
                return @as(*const IComResourceEvents.VTable, @ptrCast(self.vtable)).OnResourceRecycle(@as(*const IComResourceEvents, @ptrCast(self)), p_info_, object_i_d_, psz_type_, res_id_);
            }
            pub inline fn onResourceDestroy(self: *const T, p_info_: ?*COMSVCSEVENTINFO, object_i_d_: u64, hr_: HRESULT, psz_type_: ?[*:0]const u16, res_id_: u64) HRESULT {
                return @as(*const IComResourceEvents.VTable, @ptrCast(self.vtable)).OnResourceDestroy(@as(*const IComResourceEvents, @ptrCast(self)), p_info_, object_i_d_, hr_, psz_type_, res_id_);
            }
            pub inline fn onResourceTrack(self: *const T, p_info_: ?*COMSVCSEVENTINFO, object_i_d_: u64, psz_type_: ?[*:0]const u16, res_id_: u64, enlisted_: BOOL) HRESULT {
                return @as(*const IComResourceEvents.VTable, @ptrCast(self.vtable)).OnResourceTrack(@as(*const IComResourceEvents, @ptrCast(self)), p_info_, object_i_d_, psz_type_, res_id_, enlisted_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComSecurityEvents_Value = Guid.initString("683130ac-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComSecurityEvents = &IID_IComSecurityEvents_Value;
pub const IComSecurityEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnAuthenticate: *const fn (
            self: *const IComSecurityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            object_i_d: u64,
            guid_i_i_d: ?*const Guid,
            i_meth: u32,
            cb_byte_orig: u32,
            p_sid_original_user: [*:0]u8,
            cb_byte_cur: u32,
            p_sid_current_user: [*:0]u8,
            b_current_user_inpersonating_in_proc: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAuthenticateFail: *const fn (
            self: *const IComSecurityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            object_i_d: u64,
            guid_i_i_d: ?*const Guid,
            i_meth: u32,
            cb_byte_orig: u32,
            p_sid_original_user: [*:0]u8,
            cb_byte_cur: u32,
            p_sid_current_user: [*:0]u8,
            b_current_user_inpersonating_in_proc: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onAuthenticate(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, object_i_d_: u64, guid_i_i_d_: ?*const Guid, i_meth_: u32, cb_byte_orig_: u32, p_sid_original_user_: [*:0]u8, cb_byte_cur_: u32, p_sid_current_user_: [*:0]u8, b_current_user_inpersonating_in_proc_: BOOL) HRESULT {
                return @as(*const IComSecurityEvents.VTable, @ptrCast(self.vtable)).OnAuthenticate(@as(*const IComSecurityEvents, @ptrCast(self)), p_info_, guid_activity_, object_i_d_, guid_i_i_d_, i_meth_, cb_byte_orig_, p_sid_original_user_, cb_byte_cur_, p_sid_current_user_, b_current_user_inpersonating_in_proc_);
            }
            pub inline fn onAuthenticateFail(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, object_i_d_: u64, guid_i_i_d_: ?*const Guid, i_meth_: u32, cb_byte_orig_: u32, p_sid_original_user_: [*:0]u8, cb_byte_cur_: u32, p_sid_current_user_: [*:0]u8, b_current_user_inpersonating_in_proc_: BOOL) HRESULT {
                return @as(*const IComSecurityEvents.VTable, @ptrCast(self.vtable)).OnAuthenticateFail(@as(*const IComSecurityEvents, @ptrCast(self)), p_info_, guid_activity_, object_i_d_, guid_i_i_d_, i_meth_, cb_byte_orig_, p_sid_original_user_, cb_byte_cur_, p_sid_current_user_, b_current_user_inpersonating_in_proc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComObjectPoolEvents_Value = Guid.initString("683130ad-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComObjectPoolEvents = &IID_IComObjectPoolEvents_Value;
pub const IComObjectPoolEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjPoolPutObject: *const fn (
            self: *const IComObjectPoolEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_object: ?*const Guid,
            n_reason: i32,
            dw_available: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolGetObject: *const fn (
            self: *const IComObjectPoolEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            guid_object: ?*const Guid,
            dw_available: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolRecycleToTx: *const fn (
            self: *const IComObjectPoolEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            guid_object: ?*const Guid,
            guid_tx: ?*const Guid,
            objid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolGetFromTx: *const fn (
            self: *const IComObjectPoolEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            guid_object: ?*const Guid,
            guid_tx: ?*const Guid,
            objid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onObjPoolPutObject(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_object_: ?*const Guid, n_reason_: i32, dw_available_: u32, oid_: u64) HRESULT {
                return @as(*const IComObjectPoolEvents.VTable, @ptrCast(self.vtable)).OnObjPoolPutObject(@as(*const IComObjectPoolEvents, @ptrCast(self)), p_info_, guid_object_, n_reason_, dw_available_, oid_);
            }
            pub inline fn onObjPoolGetObject(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, guid_object_: ?*const Guid, dw_available_: u32, oid_: u64) HRESULT {
                return @as(*const IComObjectPoolEvents.VTable, @ptrCast(self.vtable)).OnObjPoolGetObject(@as(*const IComObjectPoolEvents, @ptrCast(self)), p_info_, guid_activity_, guid_object_, dw_available_, oid_);
            }
            pub inline fn onObjPoolRecycleToTx(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, guid_object_: ?*const Guid, guid_tx_: ?*const Guid, objid_: u64) HRESULT {
                return @as(*const IComObjectPoolEvents.VTable, @ptrCast(self.vtable)).OnObjPoolRecycleToTx(@as(*const IComObjectPoolEvents, @ptrCast(self)), p_info_, guid_activity_, guid_object_, guid_tx_, objid_);
            }
            pub inline fn onObjPoolGetFromTx(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, guid_object_: ?*const Guid, guid_tx_: ?*const Guid, objid_: u64) HRESULT {
                return @as(*const IComObjectPoolEvents.VTable, @ptrCast(self.vtable)).OnObjPoolGetFromTx(@as(*const IComObjectPoolEvents, @ptrCast(self)), p_info_, guid_activity_, guid_object_, guid_tx_, objid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComObjectPoolEvents2_Value = Guid.initString("683130ae-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComObjectPoolEvents2 = &IID_IComObjectPoolEvents2_Value;
pub const IComObjectPoolEvents2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjPoolCreateObject: *const fn (
            self: *const IComObjectPoolEvents2,
            p_info: ?*COMSVCSEVENTINFO,
            guid_object: ?*const Guid,
            dw_objs_created: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolDestroyObject: *const fn (
            self: *const IComObjectPoolEvents2,
            p_info: ?*COMSVCSEVENTINFO,
            guid_object: ?*const Guid,
            dw_objs_created: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolCreateDecision: *const fn (
            self: *const IComObjectPoolEvents2,
            p_info: ?*COMSVCSEVENTINFO,
            dw_threads_waiting: u32,
            dw_avail: u32,
            dw_created: u32,
            dw_min: u32,
            dw_max: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolTimeout: *const fn (
            self: *const IComObjectPoolEvents2,
            p_info: ?*COMSVCSEVENTINFO,
            guid_object: ?*const Guid,
            guid_activity: ?*const Guid,
            dw_timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolCreatePool: *const fn (
            self: *const IComObjectPoolEvents2,
            p_info: ?*COMSVCSEVENTINFO,
            guid_object: ?*const Guid,
            dw_min: u32,
            dw_max: u32,
            dw_timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onObjPoolCreateObject(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_object_: ?*const Guid, dw_objs_created_: u32, oid_: u64) HRESULT {
                return @as(*const IComObjectPoolEvents2.VTable, @ptrCast(self.vtable)).OnObjPoolCreateObject(@as(*const IComObjectPoolEvents2, @ptrCast(self)), p_info_, guid_object_, dw_objs_created_, oid_);
            }
            pub inline fn onObjPoolDestroyObject(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_object_: ?*const Guid, dw_objs_created_: u32, oid_: u64) HRESULT {
                return @as(*const IComObjectPoolEvents2.VTable, @ptrCast(self.vtable)).OnObjPoolDestroyObject(@as(*const IComObjectPoolEvents2, @ptrCast(self)), p_info_, guid_object_, dw_objs_created_, oid_);
            }
            pub inline fn onObjPoolCreateDecision(self: *const T, p_info_: ?*COMSVCSEVENTINFO, dw_threads_waiting_: u32, dw_avail_: u32, dw_created_: u32, dw_min_: u32, dw_max_: u32) HRESULT {
                return @as(*const IComObjectPoolEvents2.VTable, @ptrCast(self.vtable)).OnObjPoolCreateDecision(@as(*const IComObjectPoolEvents2, @ptrCast(self)), p_info_, dw_threads_waiting_, dw_avail_, dw_created_, dw_min_, dw_max_);
            }
            pub inline fn onObjPoolTimeout(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_object_: ?*const Guid, guid_activity_: ?*const Guid, dw_timeout_: u32) HRESULT {
                return @as(*const IComObjectPoolEvents2.VTable, @ptrCast(self.vtable)).OnObjPoolTimeout(@as(*const IComObjectPoolEvents2, @ptrCast(self)), p_info_, guid_object_, guid_activity_, dw_timeout_);
            }
            pub inline fn onObjPoolCreatePool(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_object_: ?*const Guid, dw_min_: u32, dw_max_: u32, dw_timeout_: u32) HRESULT {
                return @as(*const IComObjectPoolEvents2.VTable, @ptrCast(self.vtable)).OnObjPoolCreatePool(@as(*const IComObjectPoolEvents2, @ptrCast(self)), p_info_, guid_object_, dw_min_, dw_max_, dw_timeout_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComObjectConstructionEvents_Value = Guid.initString("683130af-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComObjectConstructionEvents = &IID_IComObjectConstructionEvents_Value;
pub const IComObjectConstructionEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectConstruct: *const fn (
            self: *const IComObjectConstructionEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_object: ?*const Guid,
            s_construct_string: ?[*:0]const u16,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onObjectConstruct(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_object_: ?*const Guid, s_construct_string_: ?[*:0]const u16, oid_: u64) HRESULT {
                return @as(*const IComObjectConstructionEvents.VTable, @ptrCast(self.vtable)).OnObjectConstruct(@as(*const IComObjectConstructionEvents, @ptrCast(self)), p_info_, guid_object_, s_construct_string_, oid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComActivityEvents_Value = Guid.initString("683130b0-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComActivityEvents = &IID_IComActivityEvents_Value;
pub const IComActivityEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnActivityCreate: *const fn (
            self: *const IComActivityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityDestroy: *const fn (
            self: *const IComActivityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityEnter: *const fn (
            self: *const IComActivityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_current: ?*const Guid,
            guid_entered: ?*const Guid,
            dw_thread: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityTimeout: *const fn (
            self: *const IComActivityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_current: ?*const Guid,
            guid_entered: ?*const Guid,
            dw_thread: u32,
            dw_timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityReenter: *const fn (
            self: *const IComActivityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_current: ?*const Guid,
            dw_thread: u32,
            dw_call_depth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityLeave: *const fn (
            self: *const IComActivityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_current: ?*const Guid,
            guid_left: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityLeaveSame: *const fn (
            self: *const IComActivityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_current: ?*const Guid,
            dw_call_depth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onActivityCreate(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid) HRESULT {
                return @as(*const IComActivityEvents.VTable, @ptrCast(self.vtable)).OnActivityCreate(@as(*const IComActivityEvents, @ptrCast(self)), p_info_, guid_activity_);
            }
            pub inline fn onActivityDestroy(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid) HRESULT {
                return @as(*const IComActivityEvents.VTable, @ptrCast(self.vtable)).OnActivityDestroy(@as(*const IComActivityEvents, @ptrCast(self)), p_info_, guid_activity_);
            }
            pub inline fn onActivityEnter(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_current_: ?*const Guid, guid_entered_: ?*const Guid, dw_thread_: u32) HRESULT {
                return @as(*const IComActivityEvents.VTable, @ptrCast(self.vtable)).OnActivityEnter(@as(*const IComActivityEvents, @ptrCast(self)), p_info_, guid_current_, guid_entered_, dw_thread_);
            }
            pub inline fn onActivityTimeout(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_current_: ?*const Guid, guid_entered_: ?*const Guid, dw_thread_: u32, dw_timeout_: u32) HRESULT {
                return @as(*const IComActivityEvents.VTable, @ptrCast(self.vtable)).OnActivityTimeout(@as(*const IComActivityEvents, @ptrCast(self)), p_info_, guid_current_, guid_entered_, dw_thread_, dw_timeout_);
            }
            pub inline fn onActivityReenter(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_current_: ?*const Guid, dw_thread_: u32, dw_call_depth_: u32) HRESULT {
                return @as(*const IComActivityEvents.VTable, @ptrCast(self.vtable)).OnActivityReenter(@as(*const IComActivityEvents, @ptrCast(self)), p_info_, guid_current_, dw_thread_, dw_call_depth_);
            }
            pub inline fn onActivityLeave(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_current_: ?*const Guid, guid_left_: ?*const Guid) HRESULT {
                return @as(*const IComActivityEvents.VTable, @ptrCast(self.vtable)).OnActivityLeave(@as(*const IComActivityEvents, @ptrCast(self)), p_info_, guid_current_, guid_left_);
            }
            pub inline fn onActivityLeaveSame(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_current_: ?*const Guid, dw_call_depth_: u32) HRESULT {
                return @as(*const IComActivityEvents.VTable, @ptrCast(self.vtable)).OnActivityLeaveSame(@as(*const IComActivityEvents, @ptrCast(self)), p_info_, guid_current_, dw_call_depth_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComIdentityEvents_Value = Guid.initString("683130b1-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComIdentityEvents = &IID_IComIdentityEvents_Value;
pub const IComIdentityEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnIISRequestInfo: *const fn (
            self: *const IComIdentityEvents,
            p_info: ?*COMSVCSEVENTINFO,
            obj_id: u64,
            psz_client_i_p: ?[*:0]const u16,
            psz_server_i_p: ?[*:0]const u16,
            psz_u_r_l: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onIISRequestInfo(self: *const T, p_info_: ?*COMSVCSEVENTINFO, obj_id_: u64, psz_client_i_p_: ?[*:0]const u16, psz_server_i_p_: ?[*:0]const u16, psz_u_r_l_: ?[*:0]const u16) HRESULT {
                return @as(*const IComIdentityEvents.VTable, @ptrCast(self.vtable)).OnIISRequestInfo(@as(*const IComIdentityEvents, @ptrCast(self)), p_info_, obj_id_, psz_client_i_p_, psz_server_i_p_, psz_u_r_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComQCEvents_Value = Guid.initString("683130b2-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComQCEvents = &IID_IComQCEvents_Value;
pub const IComQCEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnQCRecord: *const fn (
            self: *const IComQCEvents,
            p_info: ?*COMSVCSEVENTINFO,
            objid: u64,
            sz_queue: *[60]u16,
            guid_msg_id: ?*const Guid,
            guid_work_flow_id: ?*const Guid,
            msmqhr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCQueueOpen: *const fn (
            self: *const IComQCEvents,
            p_info: ?*COMSVCSEVENTINFO,
            sz_queue: *[60]u16,
            queue_i_d: u64,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCReceive: *const fn (
            self: *const IComQCEvents,
            p_info: ?*COMSVCSEVENTINFO,
            queue_i_d: u64,
            guid_msg_id: ?*const Guid,
            guid_work_flow_id: ?*const Guid,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCReceiveFail: *const fn (
            self: *const IComQCEvents,
            p_info: ?*COMSVCSEVENTINFO,
            queue_i_d: u64,
            msmqhr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCMoveToReTryQueue: *const fn (
            self: *const IComQCEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_msg_id: ?*const Guid,
            guid_work_flow_id: ?*const Guid,
            retry_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCMoveToDeadQueue: *const fn (
            self: *const IComQCEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_msg_id: ?*const Guid,
            guid_work_flow_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCPlayback: *const fn (
            self: *const IComQCEvents,
            p_info: ?*COMSVCSEVENTINFO,
            objid: u64,
            guid_msg_id: ?*const Guid,
            guid_work_flow_id: ?*const Guid,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onQCRecord(self: *const T, p_info_: ?*COMSVCSEVENTINFO, objid_: u64, sz_queue_: *[60]u16, guid_msg_id_: ?*const Guid, guid_work_flow_id_: ?*const Guid, msmqhr_: HRESULT) HRESULT {
                return @as(*const IComQCEvents.VTable, @ptrCast(self.vtable)).OnQCRecord(@as(*const IComQCEvents, @ptrCast(self)), p_info_, objid_, sz_queue_, guid_msg_id_, guid_work_flow_id_, msmqhr_);
            }
            pub inline fn onQCQueueOpen(self: *const T, p_info_: ?*COMSVCSEVENTINFO, sz_queue_: *[60]u16, queue_i_d_: u64, hr_: HRESULT) HRESULT {
                return @as(*const IComQCEvents.VTable, @ptrCast(self.vtable)).OnQCQueueOpen(@as(*const IComQCEvents, @ptrCast(self)), p_info_, sz_queue_, queue_i_d_, hr_);
            }
            pub inline fn onQCReceive(self: *const T, p_info_: ?*COMSVCSEVENTINFO, queue_i_d_: u64, guid_msg_id_: ?*const Guid, guid_work_flow_id_: ?*const Guid, hr_: HRESULT) HRESULT {
                return @as(*const IComQCEvents.VTable, @ptrCast(self.vtable)).OnQCReceive(@as(*const IComQCEvents, @ptrCast(self)), p_info_, queue_i_d_, guid_msg_id_, guid_work_flow_id_, hr_);
            }
            pub inline fn onQCReceiveFail(self: *const T, p_info_: ?*COMSVCSEVENTINFO, queue_i_d_: u64, msmqhr_: HRESULT) HRESULT {
                return @as(*const IComQCEvents.VTable, @ptrCast(self.vtable)).OnQCReceiveFail(@as(*const IComQCEvents, @ptrCast(self)), p_info_, queue_i_d_, msmqhr_);
            }
            pub inline fn onQCMoveToReTryQueue(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_msg_id_: ?*const Guid, guid_work_flow_id_: ?*const Guid, retry_index_: u32) HRESULT {
                return @as(*const IComQCEvents.VTable, @ptrCast(self.vtable)).OnQCMoveToReTryQueue(@as(*const IComQCEvents, @ptrCast(self)), p_info_, guid_msg_id_, guid_work_flow_id_, retry_index_);
            }
            pub inline fn onQCMoveToDeadQueue(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_msg_id_: ?*const Guid, guid_work_flow_id_: ?*const Guid) HRESULT {
                return @as(*const IComQCEvents.VTable, @ptrCast(self.vtable)).OnQCMoveToDeadQueue(@as(*const IComQCEvents, @ptrCast(self)), p_info_, guid_msg_id_, guid_work_flow_id_);
            }
            pub inline fn onQCPlayback(self: *const T, p_info_: ?*COMSVCSEVENTINFO, objid_: u64, guid_msg_id_: ?*const Guid, guid_work_flow_id_: ?*const Guid, hr_: HRESULT) HRESULT {
                return @as(*const IComQCEvents.VTable, @ptrCast(self.vtable)).OnQCPlayback(@as(*const IComQCEvents, @ptrCast(self)), p_info_, objid_, guid_msg_id_, guid_work_flow_id_, hr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComExceptionEvents_Value = Guid.initString("683130b3-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComExceptionEvents = &IID_IComExceptionEvents_Value;
pub const IComExceptionEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnExceptionUser: *const fn (
            self: *const IComExceptionEvents,
            p_info: ?*COMSVCSEVENTINFO,
            code: u32,
            address: u64,
            psz_stack_trace: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onExceptionUser(self: *const T, p_info_: ?*COMSVCSEVENTINFO, code_: u32, address_: u64, psz_stack_trace_: ?[*:0]const u16) HRESULT {
                return @as(*const IComExceptionEvents.VTable, @ptrCast(self.vtable)).OnExceptionUser(@as(*const IComExceptionEvents, @ptrCast(self)), p_info_, code_, address_, psz_stack_trace_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ILBEvents_Value = Guid.initString("683130b4-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_ILBEvents = &IID_ILBEvents_Value;
pub const ILBEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TargetUp: *const fn (
            self: *const ILBEvents,
            bstr_server_name: ?BSTR,
            bstr_clsid_eng: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TargetDown: *const fn (
            self: *const ILBEvents,
            bstr_server_name: ?BSTR,
            bstr_clsid_eng: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EngineDefined: *const fn (
            self: *const ILBEvents,
            bstr_prop_name: ?BSTR,
            var_prop_value: ?*VARIANT,
            bstr_clsid_eng: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn targetUp(self: *const T, bstr_server_name_: ?BSTR, bstr_clsid_eng_: ?BSTR) HRESULT {
                return @as(*const ILBEvents.VTable, @ptrCast(self.vtable)).TargetUp(@as(*const ILBEvents, @ptrCast(self)), bstr_server_name_, bstr_clsid_eng_);
            }
            pub inline fn targetDown(self: *const T, bstr_server_name_: ?BSTR, bstr_clsid_eng_: ?BSTR) HRESULT {
                return @as(*const ILBEvents.VTable, @ptrCast(self.vtable)).TargetDown(@as(*const ILBEvents, @ptrCast(self)), bstr_server_name_, bstr_clsid_eng_);
            }
            pub inline fn engineDefined(self: *const T, bstr_prop_name_: ?BSTR, var_prop_value_: ?*VARIANT, bstr_clsid_eng_: ?BSTR) HRESULT {
                return @as(*const ILBEvents.VTable, @ptrCast(self.vtable)).EngineDefined(@as(*const ILBEvents, @ptrCast(self)), bstr_prop_name_, var_prop_value_, bstr_clsid_eng_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComCRMEvents_Value = Guid.initString("683130b5-2e50-11d2-98a5-00c04f8ee1c4");
pub const IID_IComCRMEvents = &IID_IComCRMEvents_Value;
pub const IComCRMEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCRMRecoveryStart: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMRecoveryDone: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMCheckpoint: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMBegin: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
            guid_activity: Guid,
            guid_tx: Guid,
            sz_prog_id_compensator: *[64]u16,
            sz_description: *[64]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMPrepare: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMCommit: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMAbort: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMIndoubt: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMDone: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMRelease: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMAnalyze: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
            dw_crm_record_type: u32,
            dw_record_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMWrite: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
            f_variants: BOOL,
            dw_record_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMForget: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMForce: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMDeliver: *const fn (
            self: *const IComCRMEvents,
            p_info: ?*COMSVCSEVENTINFO,
            guid_clerk_c_l_s_i_d: Guid,
            f_variants: BOOL,
            dw_record_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onCRMRecoveryStart(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMRecoveryStart(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_app_);
            }
            pub inline fn onCRMRecoveryDone(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMRecoveryDone(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_app_);
            }
            pub inline fn onCRMCheckpoint(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMCheckpoint(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_app_);
            }
            pub inline fn onCRMBegin(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid, guid_activity_: Guid, guid_tx_: Guid, sz_prog_id_compensator_: *[64]u16, sz_description_: *[64]u16) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMBegin(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_, guid_activity_, guid_tx_, sz_prog_id_compensator_, sz_description_);
            }
            pub inline fn onCRMPrepare(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMPrepare(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_);
            }
            pub inline fn onCRMCommit(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMCommit(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_);
            }
            pub inline fn onCRMAbort(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMAbort(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_);
            }
            pub inline fn onCRMIndoubt(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMIndoubt(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_);
            }
            pub inline fn onCRMDone(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMDone(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_);
            }
            pub inline fn onCRMRelease(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMRelease(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_);
            }
            pub inline fn onCRMAnalyze(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid, dw_crm_record_type_: u32, dw_record_size_: u32) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMAnalyze(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_, dw_crm_record_type_, dw_record_size_);
            }
            pub inline fn onCRMWrite(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid, f_variants_: BOOL, dw_record_size_: u32) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMWrite(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_, f_variants_, dw_record_size_);
            }
            pub inline fn onCRMForget(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMForget(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_);
            }
            pub inline fn onCRMForce(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMForce(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_);
            }
            pub inline fn onCRMDeliver(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_clerk_c_l_s_i_d_: Guid, f_variants_: BOOL, dw_record_size_: u32) HRESULT {
                return @as(*const IComCRMEvents.VTable, @ptrCast(self.vtable)).OnCRMDeliver(@as(*const IComCRMEvents, @ptrCast(self)), p_info_, guid_clerk_c_l_s_i_d_, f_variants_, dw_record_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComMethod2Events_Value = Guid.initString("fb388aaa-567d-4024-af8e-6e93ee748573");
pub const IID_IComMethod2Events = &IID_IComMethod2Events_Value;
pub const IComMethod2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnMethodCall2: *const fn (
            self: *const IComMethod2Events,
            p_info: ?*COMSVCSEVENTINFO,
            oid: u64,
            guid_cid: ?*const Guid,
            guid_rid: ?*const Guid,
            dw_thread: u32,
            i_meth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMethodReturn2: *const fn (
            self: *const IComMethod2Events,
            p_info: ?*COMSVCSEVENTINFO,
            oid: u64,
            guid_cid: ?*const Guid,
            guid_rid: ?*const Guid,
            dw_thread: u32,
            i_meth: u32,
            hresult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMethodException2: *const fn (
            self: *const IComMethod2Events,
            p_info: ?*COMSVCSEVENTINFO,
            oid: u64,
            guid_cid: ?*const Guid,
            guid_rid: ?*const Guid,
            dw_thread: u32,
            i_meth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onMethodCall2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, oid_: u64, guid_cid_: ?*const Guid, guid_rid_: ?*const Guid, dw_thread_: u32, i_meth_: u32) HRESULT {
                return @as(*const IComMethod2Events.VTable, @ptrCast(self.vtable)).OnMethodCall2(@as(*const IComMethod2Events, @ptrCast(self)), p_info_, oid_, guid_cid_, guid_rid_, dw_thread_, i_meth_);
            }
            pub inline fn onMethodReturn2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, oid_: u64, guid_cid_: ?*const Guid, guid_rid_: ?*const Guid, dw_thread_: u32, i_meth_: u32, hresult_: HRESULT) HRESULT {
                return @as(*const IComMethod2Events.VTable, @ptrCast(self.vtable)).OnMethodReturn2(@as(*const IComMethod2Events, @ptrCast(self)), p_info_, oid_, guid_cid_, guid_rid_, dw_thread_, i_meth_, hresult_);
            }
            pub inline fn onMethodException2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, oid_: u64, guid_cid_: ?*const Guid, guid_rid_: ?*const Guid, dw_thread_: u32, i_meth_: u32) HRESULT {
                return @as(*const IComMethod2Events.VTable, @ptrCast(self.vtable)).OnMethodException2(@as(*const IComMethod2Events, @ptrCast(self)), p_info_, oid_, guid_cid_, guid_rid_, dw_thread_, i_meth_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IComTrackingInfoEvents_Value = Guid.initString("4e6cdcc9-fb25-4fd5-9cc5-c9f4b6559cec");
pub const IID_IComTrackingInfoEvents = &IID_IComTrackingInfoEvents_Value;
pub const IComTrackingInfoEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnNewTrackingInfo: *const fn (
            self: *const IComTrackingInfoEvents,
            p_toplevel_collection: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onNewTrackingInfo(self: *const T, p_toplevel_collection_: ?*IUnknown) HRESULT {
                return @as(*const IComTrackingInfoEvents.VTable, @ptrCast(self.vtable)).OnNewTrackingInfo(@as(*const IComTrackingInfoEvents, @ptrCast(self)), p_toplevel_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const TRACKING_COLL_TYPE = enum(i32) {
    PROCESSES = 0,
    APPLICATIONS = 1,
    COMPONENTS = 2,
};
pub const TRKCOLL_PROCESSES = TRACKING_COLL_TYPE.PROCESSES;
pub const TRKCOLL_APPLICATIONS = TRACKING_COLL_TYPE.APPLICATIONS;
pub const TRKCOLL_COMPONENTS = TRACKING_COLL_TYPE.COMPONENTS;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IComTrackingInfoCollection_Value = Guid.initString("c266c677-c9ad-49ab-9fd9-d9661078588a");
pub const IID_IComTrackingInfoCollection = &IID_IComTrackingInfoCollection_Value;
pub const IComTrackingInfoCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Type: *const fn (
            self: *const IComTrackingInfoCollection,
            p_type: ?*TRACKING_COLL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Count: *const fn (
            self: *const IComTrackingInfoCollection,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IComTrackingInfoCollection,
            ul_index: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn @"type"(self: *const T, p_type_: ?*TRACKING_COLL_TYPE) HRESULT {
                return @as(*const IComTrackingInfoCollection.VTable, @ptrCast(self.vtable)).Type(@as(*const IComTrackingInfoCollection, @ptrCast(self)), p_type_);
            }
            pub inline fn count(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IComTrackingInfoCollection.VTable, @ptrCast(self.vtable)).Count(@as(*const IComTrackingInfoCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn item(self: *const T, ul_index_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IComTrackingInfoCollection.VTable, @ptrCast(self.vtable)).Item(@as(*const IComTrackingInfoCollection, @ptrCast(self)), ul_index_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IComTrackingInfoObject_Value = Guid.initString("116e42c5-d8b1-47bf-ab1e-c895ed3e2372");
pub const IID_IComTrackingInfoObject = &IID_IComTrackingInfoObject_Value;
pub const IComTrackingInfoObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValue: *const fn (
            self: *const IComTrackingInfoObject,
            sz_property_name: ?PWSTR,
            pvar_out: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getValue(self: *const T, sz_property_name_: ?PWSTR, pvar_out_: ?*VARIANT) HRESULT {
                return @as(*const IComTrackingInfoObject.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IComTrackingInfoObject, @ptrCast(self)), sz_property_name_, pvar_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IComTrackingInfoProperties_Value = Guid.initString("789b42be-6f6b-443a-898e-67abf390aa14");
pub const IID_IComTrackingInfoProperties = &IID_IComTrackingInfoProperties_Value;
pub const IComTrackingInfoProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PropCount: *const fn (
            self: *const IComTrackingInfoProperties,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropName: *const fn (
            self: *const IComTrackingInfoProperties,
            ul_index: u32,
            ppsz_prop_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn propCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IComTrackingInfoProperties.VTable, @ptrCast(self.vtable)).PropCount(@as(*const IComTrackingInfoProperties, @ptrCast(self)), p_count_);
            }
            pub inline fn getPropName(self: *const T, ul_index_: u32, ppsz_prop_name_: ?*?PWSTR) HRESULT {
                return @as(*const IComTrackingInfoProperties.VTable, @ptrCast(self.vtable)).GetPropName(@as(*const IComTrackingInfoProperties, @ptrCast(self)), ul_index_, ppsz_prop_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IComApp2Events_Value = Guid.initString("1290bc1a-b219-418d-b078-5934ded08242");
pub const IID_IComApp2Events = &IID_IComApp2Events_Value;
pub const IComApp2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnAppActivation2: *const fn (
            self: *const IComApp2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
            guid_process: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppShutdown2: *const fn (
            self: *const IComApp2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppForceShutdown2: *const fn (
            self: *const IComApp2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppPaused2: *const fn (
            self: *const IComApp2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
            b_paused: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppRecycle2: *const fn (
            self: *const IComApp2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_app: Guid,
            guid_process: Guid,
            l_reason: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onAppActivation2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid, guid_process_: Guid) HRESULT {
                return @as(*const IComApp2Events.VTable, @ptrCast(self.vtable)).OnAppActivation2(@as(*const IComApp2Events, @ptrCast(self)), p_info_, guid_app_, guid_process_);
            }
            pub inline fn onAppShutdown2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid) HRESULT {
                return @as(*const IComApp2Events.VTable, @ptrCast(self.vtable)).OnAppShutdown2(@as(*const IComApp2Events, @ptrCast(self)), p_info_, guid_app_);
            }
            pub inline fn onAppForceShutdown2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid) HRESULT {
                return @as(*const IComApp2Events.VTable, @ptrCast(self.vtable)).OnAppForceShutdown2(@as(*const IComApp2Events, @ptrCast(self)), p_info_, guid_app_);
            }
            pub inline fn onAppPaused2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid, b_paused_: BOOL) HRESULT {
                return @as(*const IComApp2Events.VTable, @ptrCast(self.vtable)).OnAppPaused2(@as(*const IComApp2Events, @ptrCast(self)), p_info_, guid_app_, b_paused_);
            }
            pub inline fn onAppRecycle2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_app_: Guid, guid_process_: Guid, l_reason_: i32) HRESULT {
                return @as(*const IComApp2Events.VTable, @ptrCast(self.vtable)).OnAppRecycle2(@as(*const IComApp2Events, @ptrCast(self)), p_info_, guid_app_, guid_process_, l_reason_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComTransaction2Events_Value = Guid.initString("a136f62a-2f94-4288-86e0-d8a1fa4c0299");
pub const IID_IComTransaction2Events = &IID_IComTransaction2Events_Value;
pub const IComTransaction2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnTransactionStart2: *const fn (
            self: *const IComTransaction2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_tx: ?*const Guid,
            tsid: ?*const Guid,
            f_root: BOOL,
            n_isolation_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionPrepare2: *const fn (
            self: *const IComTransaction2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_tx: ?*const Guid,
            f_vote_yes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionAbort2: *const fn (
            self: *const IComTransaction2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_tx: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionCommit2: *const fn (
            self: *const IComTransaction2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_tx: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onTransactionStart2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_tx_: ?*const Guid, tsid_: ?*const Guid, f_root_: BOOL, n_isolation_level_: i32) HRESULT {
                return @as(*const IComTransaction2Events.VTable, @ptrCast(self.vtable)).OnTransactionStart2(@as(*const IComTransaction2Events, @ptrCast(self)), p_info_, guid_tx_, tsid_, f_root_, n_isolation_level_);
            }
            pub inline fn onTransactionPrepare2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_tx_: ?*const Guid, f_vote_yes_: BOOL) HRESULT {
                return @as(*const IComTransaction2Events.VTable, @ptrCast(self.vtable)).OnTransactionPrepare2(@as(*const IComTransaction2Events, @ptrCast(self)), p_info_, guid_tx_, f_vote_yes_);
            }
            pub inline fn onTransactionAbort2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_tx_: ?*const Guid) HRESULT {
                return @as(*const IComTransaction2Events.VTable, @ptrCast(self.vtable)).OnTransactionAbort2(@as(*const IComTransaction2Events, @ptrCast(self)), p_info_, guid_tx_);
            }
            pub inline fn onTransactionCommit2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_tx_: ?*const Guid) HRESULT {
                return @as(*const IComTransaction2Events.VTable, @ptrCast(self.vtable)).OnTransactionCommit2(@as(*const IComTransaction2Events, @ptrCast(self)), p_info_, guid_tx_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComInstance2Events_Value = Guid.initString("20e3bf07-b506-4ad5-a50c-d2ca5b9c158e");
pub const IID_IComInstance2Events = &IID_IComInstance2Events_Value;
pub const IComInstance2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectCreate2: *const fn (
            self: *const IComInstance2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            clsid: ?*const Guid,
            tsid: ?*const Guid,
            ctxt_i_d: u64,
            object_i_d: u64,
            guid_partition: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjectDestroy2: *const fn (
            self: *const IComInstance2Events,
            p_info: ?*COMSVCSEVENTINFO,
            ctxt_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onObjectCreate2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, clsid_: ?*const Guid, tsid_: ?*const Guid, ctxt_i_d_: u64, object_i_d_: u64, guid_partition_: ?*const Guid) HRESULT {
                return @as(*const IComInstance2Events.VTable, @ptrCast(self.vtable)).OnObjectCreate2(@as(*const IComInstance2Events, @ptrCast(self)), p_info_, guid_activity_, clsid_, tsid_, ctxt_i_d_, object_i_d_, guid_partition_);
            }
            pub inline fn onObjectDestroy2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, ctxt_i_d_: u64) HRESULT {
                return @as(*const IComInstance2Events.VTable, @ptrCast(self.vtable)).OnObjectDestroy2(@as(*const IComInstance2Events, @ptrCast(self)), p_info_, ctxt_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComObjectPool2Events_Value = Guid.initString("65bf6534-85ea-4f64-8cf4-3d974b2ab1cf");
pub const IID_IComObjectPool2Events = &IID_IComObjectPool2Events_Value;
pub const IComObjectPool2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjPoolPutObject2: *const fn (
            self: *const IComObjectPool2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_object: ?*const Guid,
            n_reason: i32,
            dw_available: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolGetObject2: *const fn (
            self: *const IComObjectPool2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            guid_object: ?*const Guid,
            dw_available: u32,
            oid: u64,
            guid_partition: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolRecycleToTx2: *const fn (
            self: *const IComObjectPool2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            guid_object: ?*const Guid,
            guid_tx: ?*const Guid,
            objid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolGetFromTx2: *const fn (
            self: *const IComObjectPool2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_activity: ?*const Guid,
            guid_object: ?*const Guid,
            guid_tx: ?*const Guid,
            objid: u64,
            guid_partition: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onObjPoolPutObject2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_object_: ?*const Guid, n_reason_: i32, dw_available_: u32, oid_: u64) HRESULT {
                return @as(*const IComObjectPool2Events.VTable, @ptrCast(self.vtable)).OnObjPoolPutObject2(@as(*const IComObjectPool2Events, @ptrCast(self)), p_info_, guid_object_, n_reason_, dw_available_, oid_);
            }
            pub inline fn onObjPoolGetObject2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, guid_object_: ?*const Guid, dw_available_: u32, oid_: u64, guid_partition_: ?*const Guid) HRESULT {
                return @as(*const IComObjectPool2Events.VTable, @ptrCast(self.vtable)).OnObjPoolGetObject2(@as(*const IComObjectPool2Events, @ptrCast(self)), p_info_, guid_activity_, guid_object_, dw_available_, oid_, guid_partition_);
            }
            pub inline fn onObjPoolRecycleToTx2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, guid_object_: ?*const Guid, guid_tx_: ?*const Guid, objid_: u64) HRESULT {
                return @as(*const IComObjectPool2Events.VTable, @ptrCast(self.vtable)).OnObjPoolRecycleToTx2(@as(*const IComObjectPool2Events, @ptrCast(self)), p_info_, guid_activity_, guid_object_, guid_tx_, objid_);
            }
            pub inline fn onObjPoolGetFromTx2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_activity_: ?*const Guid, guid_object_: ?*const Guid, guid_tx_: ?*const Guid, objid_: u64, guid_partition_: ?*const Guid) HRESULT {
                return @as(*const IComObjectPool2Events.VTable, @ptrCast(self.vtable)).OnObjPoolGetFromTx2(@as(*const IComObjectPool2Events, @ptrCast(self)), p_info_, guid_activity_, guid_object_, guid_tx_, objid_, guid_partition_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IComObjectConstruction2Events_Value = Guid.initString("4b5a7827-8df2-45c0-8f6f-57ea1f856a9f");
pub const IID_IComObjectConstruction2Events = &IID_IComObjectConstruction2Events_Value;
pub const IComObjectConstruction2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectConstruct2: *const fn (
            self: *const IComObjectConstruction2Events,
            p_info: ?*COMSVCSEVENTINFO,
            guid_object: ?*const Guid,
            s_construct_string: ?[*:0]const u16,
            oid: u64,
            guid_partition: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onObjectConstruct2(self: *const T, p_info_: ?*COMSVCSEVENTINFO, guid_object_: ?*const Guid, s_construct_string_: ?[*:0]const u16, oid_: u64, guid_partition_: ?*const Guid) HRESULT {
                return @as(*const IComObjectConstruction2Events.VTable, @ptrCast(self.vtable)).OnObjectConstruct2(@as(*const IComObjectConstruction2Events, @ptrCast(self)), p_info_, guid_object_, s_construct_string_, oid_, guid_partition_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISystemAppEventData_Value = Guid.initString("d6d48a3c-d5c5-49e7-8c74-99e4889ed52f");
pub const IID_ISystemAppEventData = &IID_ISystemAppEventData_Value;
pub const ISystemAppEventData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Startup: *const fn (
            self: *const ISystemAppEventData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDataChanged: *const fn (
            self: *const ISystemAppEventData,
            dw_p_i_d: u32,
            dw_mask: u32,
            dw_number_sinks: u32,
            bstr_dw_method_mask: ?BSTR,
            dw_reason: u32,
            u64_trace_handle: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startup(self: *const T) HRESULT {
                return @as(*const ISystemAppEventData.VTable, @ptrCast(self.vtable)).Startup(@as(*const ISystemAppEventData, @ptrCast(self)));
            }
            pub inline fn onDataChanged(self: *const T, dw_p_i_d_: u32, dw_mask_: u32, dw_number_sinks_: u32, bstr_dw_method_mask_: ?BSTR, dw_reason_: u32, u64_trace_handle_: u64) HRESULT {
                return @as(*const ISystemAppEventData.VTable, @ptrCast(self.vtable)).OnDataChanged(@as(*const ISystemAppEventData, @ptrCast(self)), dw_p_i_d_, dw_mask_, dw_number_sinks_, bstr_dw_method_mask_, dw_reason_, u64_trace_handle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IMtsEvents_Value = Guid.initString("bacedf4d-74ab-11d0-b162-00aa00ba3258");
pub const IID_IMtsEvents = &IID_IMtsEvents_Value;
pub const IMtsEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PackageName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMtsEvents,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PackageGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMtsEvents,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostEvent: *const fn (
            self: *const IMtsEvents,
            v_event: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FireEvents: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMtsEvents,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProcessID: *const fn (
            self: *const IMtsEvents,
            id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPackageName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IMtsEvents.VTable, @ptrCast(self.vtable)).get_PackageName(@as(*const IMtsEvents, @ptrCast(self)), p_val_);
            }
            pub inline fn getPackageGuid(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IMtsEvents.VTable, @ptrCast(self.vtable)).get_PackageGuid(@as(*const IMtsEvents, @ptrCast(self)), p_val_);
            }
            pub inline fn postEvent(self: *const T, v_event_: ?*VARIANT) HRESULT {
                return @as(*const IMtsEvents.VTable, @ptrCast(self.vtable)).PostEvent(@as(*const IMtsEvents, @ptrCast(self)), v_event_);
            }
            pub inline fn getFireEvents(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IMtsEvents.VTable, @ptrCast(self.vtable)).get_FireEvents(@as(*const IMtsEvents, @ptrCast(self)), p_val_);
            }
            pub inline fn getProcessID(self: *const T, id_: ?*i32) HRESULT {
                return @as(*const IMtsEvents.VTable, @ptrCast(self.vtable)).GetProcessID(@as(*const IMtsEvents, @ptrCast(self)), id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IMtsEventInfo_Value = Guid.initString("d56c3dc1-8482-11d0-b170-00aa00ba3258");
pub const IID_IMtsEventInfo = &IID_IMtsEventInfo_Value;
pub const IMtsEventInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Names: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMtsEventInfo,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMtsEventInfo,
            s_display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMtsEventInfo,
            s_guid_event_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMtsEventInfo,
            l_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMtsEventInfo,
            s_key: ?BSTR,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNames(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IMtsEventInfo.VTable, @ptrCast(self.vtable)).get_Names(@as(*const IMtsEventInfo, @ptrCast(self)), p_unk_);
            }
            pub inline fn getDisplayName(self: *const T, s_display_name_: ?*?BSTR) HRESULT {
                return @as(*const IMtsEventInfo.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IMtsEventInfo, @ptrCast(self)), s_display_name_);
            }
            pub inline fn getEventID(self: *const T, s_guid_event_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMtsEventInfo.VTable, @ptrCast(self.vtable)).get_EventID(@as(*const IMtsEventInfo, @ptrCast(self)), s_guid_event_i_d_);
            }
            pub inline fn getCount(self: *const T, l_count_: ?*i32) HRESULT {
                return @as(*const IMtsEventInfo.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IMtsEventInfo, @ptrCast(self)), l_count_);
            }
            pub inline fn getValue(self: *const T, s_key_: ?BSTR, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IMtsEventInfo.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IMtsEventInfo, @ptrCast(self)), s_key_, p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IMTSLocator_Value = Guid.initString("d19b8bfd-7f88-11d0-b16e-00aa00ba3258");
pub const IID_IMTSLocator = &IID_IMTSLocator_Value;
pub const IMTSLocator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetEventDispatcher: *const fn (
            self: *const IMTSLocator,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getEventDispatcher(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IMTSLocator.VTable, @ptrCast(self.vtable)).GetEventDispatcher(@as(*const IMTSLocator, @ptrCast(self)), p_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IMtsGrp_Value = Guid.initString("4b2e958c-0393-11d1-b1ab-00aa00ba3258");
pub const IID_IMtsGrp = &IID_IMtsGrp_Value;
pub const IMtsGrp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMtsGrp,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IMtsGrp,
            l_index: i32,
            pp_unk_dispatcher: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IMtsGrp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IMtsGrp.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IMtsGrp, @ptrCast(self)), p_val_);
            }
            pub inline fn item(self: *const T, l_index_: i32, pp_unk_dispatcher_: ?*?*IUnknown) HRESULT {
                return @as(*const IMtsGrp.VTable, @ptrCast(self.vtable)).Item(@as(*const IMtsGrp, @ptrCast(self)), l_index_, pp_unk_dispatcher_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IMtsGrp.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IMtsGrp, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IMessageMover_Value = Guid.initString("588a085a-b795-11d1-8054-00c04fc340ee");
pub const IID_IMessageMover = &IID_IMessageMover_Value;
pub const IMessageMover = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourcePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMessageMover,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SourcePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMessageMover,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMessageMover,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DestPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMessageMover,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CommitBatchSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMessageMover,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CommitBatchSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMessageMover,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveMessages: *const fn (
            self: *const IMessageMover,
            pl_messages_moved: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSourcePath(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IMessageMover.VTable, @ptrCast(self.vtable)).get_SourcePath(@as(*const IMessageMover, @ptrCast(self)), p_val_);
            }
            pub inline fn putSourcePath(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IMessageMover.VTable, @ptrCast(self.vtable)).put_SourcePath(@as(*const IMessageMover, @ptrCast(self)), new_val_);
            }
            pub inline fn getDestPath(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IMessageMover.VTable, @ptrCast(self.vtable)).get_DestPath(@as(*const IMessageMover, @ptrCast(self)), p_val_);
            }
            pub inline fn putDestPath(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IMessageMover.VTable, @ptrCast(self.vtable)).put_DestPath(@as(*const IMessageMover, @ptrCast(self)), new_val_);
            }
            pub inline fn getCommitBatchSize(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IMessageMover.VTable, @ptrCast(self.vtable)).get_CommitBatchSize(@as(*const IMessageMover, @ptrCast(self)), p_val_);
            }
            pub inline fn putCommitBatchSize(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IMessageMover.VTable, @ptrCast(self.vtable)).put_CommitBatchSize(@as(*const IMessageMover, @ptrCast(self)), new_val_);
            }
            pub inline fn moveMessages(self: *const T, pl_messages_moved_: ?*i32) HRESULT {
                return @as(*const IMessageMover.VTable, @ptrCast(self.vtable)).MoveMessages(@as(*const IMessageMover, @ptrCast(self)), pl_messages_moved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEventServerTrace_Value = Guid.initString("9a9f12b8-80af-47ab-a579-35ea57725370");
pub const IID_IEventServerTrace = &IID_IEventServerTrace_Value;
pub const IEventServerTrace = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        StartTraceGuid: *const fn (
            self: *const IEventServerTrace,
            bstrguid_event: ?BSTR,
            bstrguid_filter: ?BSTR,
            l_pid_filter: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopTraceGuid: *const fn (
            self: *const IEventServerTrace,
            bstrguid_event: ?BSTR,
            bstrguid_filter: ?BSTR,
            l_pid_filter: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumTraceGuid: *const fn (
            self: *const IEventServerTrace,
            pl_cnt_guids: ?*i32,
            pbstr_guid_list: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn startTraceGuid(self: *const T, bstrguid_event_: ?BSTR, bstrguid_filter_: ?BSTR, l_pid_filter_: i32) HRESULT {
                return @as(*const IEventServerTrace.VTable, @ptrCast(self.vtable)).StartTraceGuid(@as(*const IEventServerTrace, @ptrCast(self)), bstrguid_event_, bstrguid_filter_, l_pid_filter_);
            }
            pub inline fn stopTraceGuid(self: *const T, bstrguid_event_: ?BSTR, bstrguid_filter_: ?BSTR, l_pid_filter_: i32) HRESULT {
                return @as(*const IEventServerTrace.VTable, @ptrCast(self.vtable)).StopTraceGuid(@as(*const IEventServerTrace, @ptrCast(self)), bstrguid_event_, bstrguid_filter_, l_pid_filter_);
            }
            pub inline fn enumTraceGuid(self: *const T, pl_cnt_guids_: ?*i32, pbstr_guid_list_: ?*?BSTR) HRESULT {
                return @as(*const IEventServerTrace.VTable, @ptrCast(self.vtable)).EnumTraceGuid(@as(*const IEventServerTrace, @ptrCast(self)), pl_cnt_guids_, pbstr_guid_list_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const RECYCLE_INFO = extern struct {
    guidCombaseProcessIdentifier: Guid,
    ProcessStartTime: i64,
    dwRecycleLifetimeLimit: u32,
    dwRecycleMemoryLimit: u32,
    dwRecycleExpirationTimeout: u32,
};

pub const DUMPTYPE = enum(i32) {
    FULL = 0,
    MINI = 1,
    NONE = 2,
};
pub const DUMPTYPE_FULL = DUMPTYPE.FULL;
pub const DUMPTYPE_MINI = DUMPTYPE.MINI;
pub const DUMPTYPE_NONE = DUMPTYPE.NONE;

pub const HANG_INFO = extern struct {
    fAppHangMonitorEnabled: BOOL,
    fTerminateOnHang: BOOL,
    DumpType: DUMPTYPE,
    dwHangTimeout: u32,
    dwDumpCount: u32,
    dwInfoMsgCount: u32,
};

pub const COMPLUS_APPTYPE = enum(i32) {
    UNKNOWN = -1,
    SERVER = 1,
    LIBRARY = 0,
    SWC = 2,
};
pub const APPTYPE_UNKNOWN = COMPLUS_APPTYPE.UNKNOWN;
pub const APPTYPE_SERVER = COMPLUS_APPTYPE.SERVER;
pub const APPTYPE_LIBRARY = COMPLUS_APPTYPE.LIBRARY;
pub const APPTYPE_SWC = COMPLUS_APPTYPE.SWC;

pub const CAppStatistics = extern struct {
    m_cTotalCalls: u32,
    m_cTotalInstances: u32,
    m_cTotalClasses: u32,
    m_cCallsPerSecond: u32,
};

pub const CAppData = extern struct {
    m_idApp: u32,
    m_szAppGuid: [40]u16,
    m_dwAppProcessId: u32,
    m_AppStatistics: CAppStatistics,
};

pub const CCLSIDData = extern struct {
    m_clsid: Guid,
    m_cReferences: u32,
    m_cBound: u32,
    m_cPooled: u32,
    m_cInCall: u32,
    m_dwRespTime: u32,
    m_cCallsCompleted: u32,
    m_cCallsFailed: u32,
};

pub const CCLSIDData2 = extern struct {
    m_clsid: Guid,
    m_appid: Guid,
    m_partid: Guid,
    m_pwszAppName: ?PWSTR,
    m_pwszCtxName: ?PWSTR,
    m_eAppType: COMPLUS_APPTYPE,
    m_cReferences: u32,
    m_cBound: u32,
    m_cPooled: u32,
    m_cInCall: u32,
    m_dwRespTime: u32,
    m_cCallsCompleted: u32,
    m_cCallsFailed: u32,
};

pub const GetAppTrackerDataFlags = enum(i32) {
    PROCESS_EXE_NAME = 1,
    LIBRARY_APPS = 2,
    SWC = 4,
    CLASS_NAME = 8,
    APPLICATION_NAME = 16,
};
pub const GATD_INCLUDE_PROCESS_EXE_NAME = GetAppTrackerDataFlags.PROCESS_EXE_NAME;
pub const GATD_INCLUDE_LIBRARY_APPS = GetAppTrackerDataFlags.LIBRARY_APPS;
pub const GATD_INCLUDE_SWC = GetAppTrackerDataFlags.SWC;
pub const GATD_INCLUDE_CLASS_NAME = GetAppTrackerDataFlags.CLASS_NAME;
pub const GATD_INCLUDE_APPLICATION_NAME = GetAppTrackerDataFlags.APPLICATION_NAME;

pub const ApplicationProcessSummary = extern struct {
    PartitionIdPrimaryApplication: Guid,
    ApplicationIdPrimaryApplication: Guid,
    ApplicationInstanceId: Guid,
    ProcessId: u32,
    Type: COMPLUS_APPTYPE,
    ProcessExeName: ?PWSTR,
    IsService: BOOL,
    IsPaused: BOOL,
    IsRecycled: BOOL,
};

pub const ApplicationProcessStatistics = extern struct {
    NumCallsOutstanding: u32,
    NumTrackedComponents: u32,
    NumComponentInstances: u32,
    AvgCallsPerSecond: u32,
    Reserved1: u32,
    Reserved2: u32,
    Reserved3: u32,
    Reserved4: u32,
};

pub const ApplicationProcessRecycleInfo = extern struct {
    IsRecyclable: BOOL,
    IsRecycled: BOOL,
    TimeRecycled: FILETIME,
    TimeToTerminate: FILETIME,
    RecycleReasonCode: i32,
    IsPendingRecycle: BOOL,
    HasAutomaticLifetimeRecycling: BOOL,
    TimeForAutomaticRecycling: FILETIME,
    MemoryLimitInKB: u32,
    MemoryUsageInKBLastCheck: u32,
    ActivationLimit: u32,
    NumActivationsLastReported: u32,
    CallLimit: u32,
    NumCallsLastReported: u32,
};

pub const ApplicationSummary = extern struct {
    ApplicationInstanceId: Guid,
    PartitionId: Guid,
    ApplicationId: Guid,
    Type: COMPLUS_APPTYPE,
    ApplicationName: ?PWSTR,
    NumTrackedComponents: u32,
    NumComponentInstances: u32,
};

pub const ComponentSummary = extern struct {
    ApplicationInstanceId: Guid,
    PartitionId: Guid,
    ApplicationId: Guid,
    Clsid: Guid,
    ClassName: ?PWSTR,
    ApplicationName: ?PWSTR,
};

pub const ComponentStatistics = extern struct {
    NumInstances: u32,
    NumBoundReferences: u32,
    NumPooledObjects: u32,
    NumObjectsInCall: u32,
    AvgResponseTimeInMs: u32,
    NumCallsCompletedRecent: u32,
    NumCallsFailedRecent: u32,
    NumCallsCompletedTotal: u32,
    NumCallsFailedTotal: u32,
    Reserved1: u32,
    Reserved2: u32,
    Reserved3: u32,
    Reserved4: u32,
};

pub const ComponentHangMonitorInfo = extern struct {
    IsMonitored: BOOL,
    TerminateOnHang: BOOL,
    AvgCallThresholdInMs: u32,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IGetAppTrackerData_Value = Guid.initString("507c3ac8-3e12-4cb0-9366-653d3e050638");
pub const IID_IGetAppTrackerData = &IID_IGetAppTrackerData_Value;
pub const IGetAppTrackerData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetApplicationProcesses: *const fn (
            self: *const IGetAppTrackerData,
            partition_id: ?*const Guid,
            application_id: ?*const Guid,
            flags: u32,
            num_application_processes: ?*u32,
            application_processes: [*]?*ApplicationProcessSummary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationProcessDetails: *const fn (
            self: *const IGetAppTrackerData,
            application_instance_id: ?*const Guid,
            process_id: u32,
            flags: u32,
            summary: ?*ApplicationProcessSummary,
            statistics: ?*ApplicationProcessStatistics,
            recycle_info: ?*ApplicationProcessRecycleInfo,
            any_components_hang_monitored: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationsInProcess: *const fn (
            self: *const IGetAppTrackerData,
            application_instance_id: ?*const Guid,
            process_id: u32,
            partition_id: ?*const Guid,
            flags: u32,
            num_applications_in_process: ?*u32,
            applications: [*]?*ApplicationSummary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentsInProcess: *const fn (
            self: *const IGetAppTrackerData,
            application_instance_id: ?*const Guid,
            process_id: u32,
            partition_id: ?*const Guid,
            application_id: ?*const Guid,
            flags: u32,
            num_components_in_process: ?*u32,
            components: [*]?*ComponentSummary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentDetails: *const fn (
            self: *const IGetAppTrackerData,
            application_instance_id: ?*const Guid,
            process_id: u32,
            clsid: ?*const Guid,
            flags: u32,
            summary: ?*ComponentSummary,
            statistics: ?*ComponentStatistics,
            hang_monitor_info: ?*ComponentHangMonitorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrackerDataAsCollectionObject: *const fn (
            self: *const IGetAppTrackerData,
            top_level_collection: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSuggestedPollingInterval: *const fn (
            self: *const IGetAppTrackerData,
            polling_interval_in_seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getApplicationProcesses(self: *const T, partition_id_: ?*const Guid, application_id_: ?*const Guid, flags_: u32, num_application_processes_: ?*u32, application_processes_: [*]?*ApplicationProcessSummary) HRESULT {
                return @as(*const IGetAppTrackerData.VTable, @ptrCast(self.vtable)).GetApplicationProcesses(@as(*const IGetAppTrackerData, @ptrCast(self)), partition_id_, application_id_, flags_, num_application_processes_, application_processes_);
            }
            pub inline fn getApplicationProcessDetails(self: *const T, application_instance_id_: ?*const Guid, process_id_: u32, flags_: u32, summary_: ?*ApplicationProcessSummary, statistics_: ?*ApplicationProcessStatistics, recycle_info_: ?*ApplicationProcessRecycleInfo, any_components_hang_monitored_: ?*BOOL) HRESULT {
                return @as(*const IGetAppTrackerData.VTable, @ptrCast(self.vtable)).GetApplicationProcessDetails(@as(*const IGetAppTrackerData, @ptrCast(self)), application_instance_id_, process_id_, flags_, summary_, statistics_, recycle_info_, any_components_hang_monitored_);
            }
            pub inline fn getApplicationsInProcess(self: *const T, application_instance_id_: ?*const Guid, process_id_: u32, partition_id_: ?*const Guid, flags_: u32, num_applications_in_process_: ?*u32, applications_: [*]?*ApplicationSummary) HRESULT {
                return @as(*const IGetAppTrackerData.VTable, @ptrCast(self.vtable)).GetApplicationsInProcess(@as(*const IGetAppTrackerData, @ptrCast(self)), application_instance_id_, process_id_, partition_id_, flags_, num_applications_in_process_, applications_);
            }
            pub inline fn getComponentsInProcess(self: *const T, application_instance_id_: ?*const Guid, process_id_: u32, partition_id_: ?*const Guid, application_id_: ?*const Guid, flags_: u32, num_components_in_process_: ?*u32, components_: [*]?*ComponentSummary) HRESULT {
                return @as(*const IGetAppTrackerData.VTable, @ptrCast(self.vtable)).GetComponentsInProcess(@as(*const IGetAppTrackerData, @ptrCast(self)), application_instance_id_, process_id_, partition_id_, application_id_, flags_, num_components_in_process_, components_);
            }
            pub inline fn getComponentDetails(self: *const T, application_instance_id_: ?*const Guid, process_id_: u32, clsid_: ?*const Guid, flags_: u32, summary_: ?*ComponentSummary, statistics_: ?*ComponentStatistics, hang_monitor_info_: ?*ComponentHangMonitorInfo) HRESULT {
                return @as(*const IGetAppTrackerData.VTable, @ptrCast(self.vtable)).GetComponentDetails(@as(*const IGetAppTrackerData, @ptrCast(self)), application_instance_id_, process_id_, clsid_, flags_, summary_, statistics_, hang_monitor_info_);
            }
            pub inline fn getTrackerDataAsCollectionObject(self: *const T, top_level_collection_: ?*?*IUnknown) HRESULT {
                return @as(*const IGetAppTrackerData.VTable, @ptrCast(self.vtable)).GetTrackerDataAsCollectionObject(@as(*const IGetAppTrackerData, @ptrCast(self)), top_level_collection_);
            }
            pub inline fn getSuggestedPollingInterval(self: *const T, polling_interval_in_seconds_: ?*u32) HRESULT {
                return @as(*const IGetAppTrackerData.VTable, @ptrCast(self.vtable)).GetSuggestedPollingInterval(@as(*const IGetAppTrackerData, @ptrCast(self)), polling_interval_in_seconds_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDispenserManager_Value = Guid.initString("5cb31e10-2b5f-11cf-be10-00aa00a2fa25");
pub const IID_IDispenserManager = &IID_IDispenserManager_Value;
pub const IDispenserManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterDispenser: *const fn (
            self: *const IDispenserManager,
            ___m_i_d_l___i_dispenser_manager0000: ?*IDispenserDriver,
            sz_dispenser_name: ?[*:0]const u16,
            ___m_i_d_l___i_dispenser_manager0001: ?*?*IHolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: *const fn (
            self: *const IDispenserManager,
            ___m_i_d_l___i_dispenser_manager0002: ?*usize,
            ___m_i_d_l___i_dispenser_manager0003: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerDispenser(self: *const T, ___m_i_d_l___i_dispenser_manager0000_: ?*IDispenserDriver, sz_dispenser_name_: ?[*:0]const u16, ___m_i_d_l___i_dispenser_manager0001_: ?*?*IHolder) HRESULT {
                return @as(*const IDispenserManager.VTable, @ptrCast(self.vtable)).RegisterDispenser(@as(*const IDispenserManager, @ptrCast(self)), ___m_i_d_l___i_dispenser_manager0000_, sz_dispenser_name_, ___m_i_d_l___i_dispenser_manager0001_);
            }
            pub inline fn getContext(self: *const T, ___m_i_d_l___i_dispenser_manager0002_: ?*usize, ___m_i_d_l___i_dispenser_manager0003_: ?*usize) HRESULT {
                return @as(*const IDispenserManager.VTable, @ptrCast(self.vtable)).GetContext(@as(*const IDispenserManager, @ptrCast(self)), ___m_i_d_l___i_dispenser_manager0002_, ___m_i_d_l___i_dispenser_manager0003_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IHolder_Value = Guid.initString("bf6a1850-2b45-11cf-be10-00aa00a2fa25");
pub const IID_IHolder = &IID_IHolder_Value;
pub const IHolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllocResource: *const fn (
            self: *const IHolder,
            ___m_i_d_l___i_holder0000: usize,
            ___m_i_d_l___i_holder0001: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeResource: *const fn (
            self: *const IHolder,
            ___m_i_d_l___i_holder0002: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TrackResource: *const fn (
            self: *const IHolder,
            ___m_i_d_l___i_holder0003: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TrackResourceS: *const fn (
            self: *const IHolder,
            ___m_i_d_l___i_holder0004: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UntrackResource: *const fn (
            self: *const IHolder,
            ___m_i_d_l___i_holder0005: usize,
            ___m_i_d_l___i_holder0006: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UntrackResourceS: *const fn (
            self: *const IHolder,
            ___m_i_d_l___i_holder0007: ?*u16,
            ___m_i_d_l___i_holder0008: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IHolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestDestroyResource: *const fn (
            self: *const IHolder,
            ___m_i_d_l___i_holder0009: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn allocResource(self: *const T, ___m_i_d_l___i_holder0000_: usize, ___m_i_d_l___i_holder0001_: ?*usize) HRESULT {
                return @as(*const IHolder.VTable, @ptrCast(self.vtable)).AllocResource(@as(*const IHolder, @ptrCast(self)), ___m_i_d_l___i_holder0000_, ___m_i_d_l___i_holder0001_);
            }
            pub inline fn freeResource(self: *const T, ___m_i_d_l___i_holder0002_: usize) HRESULT {
                return @as(*const IHolder.VTable, @ptrCast(self.vtable)).FreeResource(@as(*const IHolder, @ptrCast(self)), ___m_i_d_l___i_holder0002_);
            }
            pub inline fn trackResource(self: *const T, ___m_i_d_l___i_holder0003_: usize) HRESULT {
                return @as(*const IHolder.VTable, @ptrCast(self.vtable)).TrackResource(@as(*const IHolder, @ptrCast(self)), ___m_i_d_l___i_holder0003_);
            }
            pub inline fn trackResourceS(self: *const T, ___m_i_d_l___i_holder0004_: ?*u16) HRESULT {
                return @as(*const IHolder.VTable, @ptrCast(self.vtable)).TrackResourceS(@as(*const IHolder, @ptrCast(self)), ___m_i_d_l___i_holder0004_);
            }
            pub inline fn untrackResource(self: *const T, ___m_i_d_l___i_holder0005_: usize, ___m_i_d_l___i_holder0006_: BOOL) HRESULT {
                return @as(*const IHolder.VTable, @ptrCast(self.vtable)).UntrackResource(@as(*const IHolder, @ptrCast(self)), ___m_i_d_l___i_holder0005_, ___m_i_d_l___i_holder0006_);
            }
            pub inline fn untrackResourceS(self: *const T, ___m_i_d_l___i_holder0007_: ?*u16, ___m_i_d_l___i_holder0008_: BOOL) HRESULT {
                return @as(*const IHolder.VTable, @ptrCast(self.vtable)).UntrackResourceS(@as(*const IHolder, @ptrCast(self)), ___m_i_d_l___i_holder0007_, ___m_i_d_l___i_holder0008_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IHolder.VTable, @ptrCast(self.vtable)).Close(@as(*const IHolder, @ptrCast(self)));
            }
            pub inline fn requestDestroyResource(self: *const T, ___m_i_d_l___i_holder0009_: usize) HRESULT {
                return @as(*const IHolder.VTable, @ptrCast(self.vtable)).RequestDestroyResource(@as(*const IHolder, @ptrCast(self)), ___m_i_d_l___i_holder0009_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDispenserDriver_Value = Guid.initString("208b3651-2b48-11cf-be10-00aa00a2fa25");
pub const IID_IDispenserDriver = &IID_IDispenserDriver_Value;
pub const IDispenserDriver = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateResource: *const fn (
            self: *const IDispenserDriver,
            res_typ_id: usize,
            p_res_id: ?*usize,
            p_secs_free_before_destroy: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RateResource: *const fn (
            self: *const IDispenserDriver,
            res_typ_id: usize,
            res_id: usize,
            f_requires_transaction_enlistment: BOOL,
            p_rating: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnlistResource: *const fn (
            self: *const IDispenserDriver,
            res_id: usize,
            trans_id: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetResource: *const fn (
            self: *const IDispenserDriver,
            res_id: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyResource: *const fn (
            self: *const IDispenserDriver,
            res_id: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyResourceS: *const fn (
            self: *const IDispenserDriver,
            res_id: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createResource(self: *const T, res_typ_id_: usize, p_res_id_: ?*usize, p_secs_free_before_destroy_: ?*i32) HRESULT {
                return @as(*const IDispenserDriver.VTable, @ptrCast(self.vtable)).CreateResource(@as(*const IDispenserDriver, @ptrCast(self)), res_typ_id_, p_res_id_, p_secs_free_before_destroy_);
            }
            pub inline fn rateResource(self: *const T, res_typ_id_: usize, res_id_: usize, f_requires_transaction_enlistment_: BOOL, p_rating_: ?*u32) HRESULT {
                return @as(*const IDispenserDriver.VTable, @ptrCast(self.vtable)).RateResource(@as(*const IDispenserDriver, @ptrCast(self)), res_typ_id_, res_id_, f_requires_transaction_enlistment_, p_rating_);
            }
            pub inline fn enlistResource(self: *const T, res_id_: usize, trans_id_: usize) HRESULT {
                return @as(*const IDispenserDriver.VTable, @ptrCast(self.vtable)).EnlistResource(@as(*const IDispenserDriver, @ptrCast(self)), res_id_, trans_id_);
            }
            pub inline fn resetResource(self: *const T, res_id_: usize) HRESULT {
                return @as(*const IDispenserDriver.VTable, @ptrCast(self.vtable)).ResetResource(@as(*const IDispenserDriver, @ptrCast(self)), res_id_);
            }
            pub inline fn destroyResource(self: *const T, res_id_: usize) HRESULT {
                return @as(*const IDispenserDriver.VTable, @ptrCast(self.vtable)).DestroyResource(@as(*const IDispenserDriver, @ptrCast(self)), res_id_);
            }
            pub inline fn destroyResourceS(self: *const T, res_id_: ?*u16) HRESULT {
                return @as(*const IDispenserDriver.VTable, @ptrCast(self.vtable)).DestroyResourceS(@as(*const IDispenserDriver, @ptrCast(self)), res_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ITransactionProxy_Value = Guid.initString("02558374-df2e-4dae-bd6b-1d5c994f9bdc");
pub const IID_ITransactionProxy = &IID_ITransactionProxy_Value;
pub const ITransactionProxy = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: *const fn (
            self: *const ITransactionProxy,
            guid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const ITransactionProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Promote: *const fn (
            self: *const ITransactionProxy,
            p_transaction: ?*?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVoter: *const fn (
            self: *const ITransactionProxy,
            p_tx_async: ?*ITransactionVoterNotifyAsync2,
            pp_ballot: ?*?*ITransactionVoterBallotAsync2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsolationLevel: *const fn (
            self: *const ITransactionProxy,
            ___m_i_d_l___i_transaction_proxy0000: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIdentifier: *const fn (
            self: *const ITransactionProxy,
            pbstr_identifier: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsReusable: *const fn (
            self: *const ITransactionProxy,
            pf_is_reusable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn commit(self: *const T, guid_: Guid) HRESULT {
                return @as(*const ITransactionProxy.VTable, @ptrCast(self.vtable)).Commit(@as(*const ITransactionProxy, @ptrCast(self)), guid_);
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const ITransactionProxy.VTable, @ptrCast(self.vtable)).Abort(@as(*const ITransactionProxy, @ptrCast(self)));
            }
            pub inline fn promote(self: *const T, p_transaction_: ?*?*ITransaction) HRESULT {
                return @as(*const ITransactionProxy.VTable, @ptrCast(self.vtable)).Promote(@as(*const ITransactionProxy, @ptrCast(self)), p_transaction_);
            }
            pub inline fn createVoter(self: *const T, p_tx_async_: ?*ITransactionVoterNotifyAsync2, pp_ballot_: ?*?*ITransactionVoterBallotAsync2) HRESULT {
                return @as(*const ITransactionProxy.VTable, @ptrCast(self.vtable)).CreateVoter(@as(*const ITransactionProxy, @ptrCast(self)), p_tx_async_, pp_ballot_);
            }
            pub inline fn getIsolationLevel(self: *const T, ___m_i_d_l___i_transaction_proxy0000_: ?*i32) HRESULT {
                return @as(*const ITransactionProxy.VTable, @ptrCast(self.vtable)).GetIsolationLevel(@as(*const ITransactionProxy, @ptrCast(self)), ___m_i_d_l___i_transaction_proxy0000_);
            }
            pub inline fn getIdentifier(self: *const T, pbstr_identifier_: ?*Guid) HRESULT {
                return @as(*const ITransactionProxy.VTable, @ptrCast(self.vtable)).GetIdentifier(@as(*const ITransactionProxy, @ptrCast(self)), pbstr_identifier_);
            }
            pub inline fn isReusable(self: *const T, pf_is_reusable_: ?*BOOL) HRESULT {
                return @as(*const ITransactionProxy.VTable, @ptrCast(self.vtable)).IsReusable(@as(*const ITransactionProxy, @ptrCast(self)), pf_is_reusable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContextSecurityPerimeter_Value = Guid.initString("a7549a29-a7c4-42e1-8dc1-7e3d748dc24a");
pub const IID_IContextSecurityPerimeter = &IID_IContextSecurityPerimeter_Value;
pub const IContextSecurityPerimeter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPerimeterFlag: *const fn (
            self: *const IContextSecurityPerimeter,
            p_flag: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPerimeterFlag: *const fn (
            self: *const IContextSecurityPerimeter,
            f_flag: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPerimeterFlag(self: *const T, p_flag_: ?*BOOL) HRESULT {
                return @as(*const IContextSecurityPerimeter.VTable, @ptrCast(self.vtable)).GetPerimeterFlag(@as(*const IContextSecurityPerimeter, @ptrCast(self)), p_flag_);
            }
            pub inline fn setPerimeterFlag(self: *const T, f_flag_: BOOL) HRESULT {
                return @as(*const IContextSecurityPerimeter.VTable, @ptrCast(self.vtable)).SetPerimeterFlag(@as(*const IContextSecurityPerimeter, @ptrCast(self)), f_flag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITxProxyHolder_Value = Guid.initString("13d86f31-0139-41af-bcad-c7d50435fe9f");
pub const IID_ITxProxyHolder = &IID_ITxProxyHolder_Value;
pub const ITxProxyHolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdentifier: *const fn (
            self: *const ITxProxyHolder,
            p_guid_ltx: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIdentifier(self: *const T, p_guid_ltx_: ?*Guid) void {
                return @as(*const ITxProxyHolder.VTable, @ptrCast(self.vtable)).GetIdentifier(@as(*const ITxProxyHolder, @ptrCast(self)), p_guid_ltx_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjectContext_Value = Guid.initString("51372ae0-cae7-11cf-be81-00aa00a2fa25");
pub const IID_IObjectContext = &IID_IObjectContext_Value;
pub const IObjectContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstance: *const fn (
            self: *const IObjectContext,
            rclsid: ?*const Guid,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComplete: *const fn (
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAbort: *const fn (
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableCommit: *const fn (
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableCommit: *const fn (
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInTransaction: *const fn (
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsSecurityEnabled: *const fn (
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsCallerInRole: *const fn (
            self: *const IObjectContext,
            bstr_role: ?BSTR,
            pf_is_in_role: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createInstance(self: *const T, rclsid_: ?*const Guid, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IObjectContext.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const IObjectContext, @ptrCast(self)), rclsid_, riid_, ppv_);
            }
            pub inline fn setComplete(self: *const T) HRESULT {
                return @as(*const IObjectContext.VTable, @ptrCast(self.vtable)).SetComplete(@as(*const IObjectContext, @ptrCast(self)));
            }
            pub inline fn setAbort(self: *const T) HRESULT {
                return @as(*const IObjectContext.VTable, @ptrCast(self.vtable)).SetAbort(@as(*const IObjectContext, @ptrCast(self)));
            }
            pub inline fn enableCommit(self: *const T) HRESULT {
                return @as(*const IObjectContext.VTable, @ptrCast(self.vtable)).EnableCommit(@as(*const IObjectContext, @ptrCast(self)));
            }
            pub inline fn disableCommit(self: *const T) HRESULT {
                return @as(*const IObjectContext.VTable, @ptrCast(self.vtable)).DisableCommit(@as(*const IObjectContext, @ptrCast(self)));
            }
            pub inline fn isInTransaction(self: *const T) BOOL {
                return @as(*const IObjectContext.VTable, @ptrCast(self.vtable)).IsInTransaction(@as(*const IObjectContext, @ptrCast(self)));
            }
            pub inline fn isSecurityEnabled(self: *const T) BOOL {
                return @as(*const IObjectContext.VTable, @ptrCast(self.vtable)).IsSecurityEnabled(@as(*const IObjectContext, @ptrCast(self)));
            }
            pub inline fn isCallerInRole(self: *const T, bstr_role_: ?BSTR, pf_is_in_role_: ?*BOOL) HRESULT {
                return @as(*const IObjectContext.VTable, @ptrCast(self.vtable)).IsCallerInRole(@as(*const IObjectContext, @ptrCast(self)), bstr_role_, pf_is_in_role_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjectControl_Value = Guid.initString("51372aec-cae7-11cf-be81-00aa00a2fa25");
pub const IID_IObjectControl = &IID_IObjectControl_Value;
pub const IObjectControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Activate: *const fn (
            self: *const IObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: *const fn (
            self: *const IObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CanBePooled: *const fn (
            self: *const IObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn activate(self: *const T) HRESULT {
                return @as(*const IObjectControl.VTable, @ptrCast(self.vtable)).Activate(@as(*const IObjectControl, @ptrCast(self)));
            }
            pub inline fn deactivate(self: *const T) void {
                return @as(*const IObjectControl.VTable, @ptrCast(self.vtable)).Deactivate(@as(*const IObjectControl, @ptrCast(self)));
            }
            pub inline fn canBePooled(self: *const T) BOOL {
                return @as(*const IObjectControl.VTable, @ptrCast(self.vtable)).CanBePooled(@as(*const IObjectControl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumNames_Value = Guid.initString("51372af2-cae7-11cf-be81-00aa00a2fa25");
pub const IID_IEnumNames = &IID_IEnumNames_Value;
pub const IEnumNames = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumNames,
            celt: u32,
            rgname: ?*?BSTR,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumNames,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumNames,
            ppenum: ?*?*IEnumNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgname_: ?*?BSTR, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumNames.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumNames, @ptrCast(self)), celt_, rgname_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumNames.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumNames, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumNames.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumNames, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumNames) HRESULT {
                return @as(*const IEnumNames.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumNames, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISecurityProperty_Value = Guid.initString("51372aea-cae7-11cf-be81-00aa00a2fa25");
pub const IID_ISecurityProperty = &IID_ISecurityProperty_Value;
pub const ISecurityProperty = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDirectCreatorSID: *const fn (
            self: *const ISecurityProperty,
            p_s_i_d: ?*?PSID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalCreatorSID: *const fn (
            self: *const ISecurityProperty,
            p_s_i_d: ?*?PSID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDirectCallerSID: *const fn (
            self: *const ISecurityProperty,
            p_s_i_d: ?*?PSID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalCallerSID: *const fn (
            self: *const ISecurityProperty,
            p_s_i_d: ?*?PSID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseSID: *const fn (
            self: *const ISecurityProperty,
            p_s_i_d: ?PSID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDirectCreatorSID(self: *const T, p_s_i_d_: ?*?PSID) HRESULT {
                return @as(*const ISecurityProperty.VTable, @ptrCast(self.vtable)).GetDirectCreatorSID(@as(*const ISecurityProperty, @ptrCast(self)), p_s_i_d_);
            }
            pub inline fn getOriginalCreatorSID(self: *const T, p_s_i_d_: ?*?PSID) HRESULT {
                return @as(*const ISecurityProperty.VTable, @ptrCast(self.vtable)).GetOriginalCreatorSID(@as(*const ISecurityProperty, @ptrCast(self)), p_s_i_d_);
            }
            pub inline fn getDirectCallerSID(self: *const T, p_s_i_d_: ?*?PSID) HRESULT {
                return @as(*const ISecurityProperty.VTable, @ptrCast(self.vtable)).GetDirectCallerSID(@as(*const ISecurityProperty, @ptrCast(self)), p_s_i_d_);
            }
            pub inline fn getOriginalCallerSID(self: *const T, p_s_i_d_: ?*?PSID) HRESULT {
                return @as(*const ISecurityProperty.VTable, @ptrCast(self.vtable)).GetOriginalCallerSID(@as(*const ISecurityProperty, @ptrCast(self)), p_s_i_d_);
            }
            pub inline fn releaseSID(self: *const T, p_s_i_d_: ?PSID) HRESULT {
                return @as(*const ISecurityProperty.VTable, @ptrCast(self.vtable)).ReleaseSID(@as(*const ISecurityProperty, @ptrCast(self)), p_s_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ObjectControl_Value = Guid.initString("7dc41850-0c31-11d0-8b79-00aa00b8a790");
pub const IID_ObjectControl = &IID_ObjectControl_Value;
pub const ObjectControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Activate: *const fn (
            self: *const ObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: *const fn (
            self: *const ObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanBePooled: *const fn (
            self: *const ObjectControl,
            pb_poolable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn activate(self: *const T) HRESULT {
                return @as(*const ObjectControl.VTable, @ptrCast(self.vtable)).Activate(@as(*const ObjectControl, @ptrCast(self)));
            }
            pub inline fn deactivate(self: *const T) HRESULT {
                return @as(*const ObjectControl.VTable, @ptrCast(self.vtable)).Deactivate(@as(*const ObjectControl, @ptrCast(self)));
            }
            pub inline fn canBePooled(self: *const T, pb_poolable_: ?*i16) HRESULT {
                return @as(*const ObjectControl.VTable, @ptrCast(self.vtable)).CanBePooled(@as(*const ObjectControl, @ptrCast(self)), pb_poolable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISharedProperty_Value = Guid.initString("2a005c01-a5de-11cf-9e66-00aa00a3f464");
pub const IID_ISharedProperty = &IID_ISharedProperty_Value;
pub const ISharedProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISharedProperty,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISharedProperty,
            val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getValue(self: *const T, p_val_: ?*VARIANT) HRESULT {
                return @as(*const ISharedProperty.VTable, @ptrCast(self.vtable)).get_Value(@as(*const ISharedProperty, @ptrCast(self)), p_val_);
            }
            pub inline fn putValue(self: *const T, val_: VARIANT) HRESULT {
                return @as(*const ISharedProperty.VTable, @ptrCast(self.vtable)).put_Value(@as(*const ISharedProperty, @ptrCast(self)), val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISharedPropertyGroup_Value = Guid.initString("2a005c07-a5de-11cf-9e66-00aa00a3f464");
pub const IID_ISharedPropertyGroup = &IID_ISharedPropertyGroup_Value;
pub const ISharedPropertyGroup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreatePropertyByPosition: *const fn (
            self: *const ISharedPropertyGroup,
            index: i32,
            f_exists: ?*i16,
            pp_prop: ?*?*ISharedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyByPosition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISharedPropertyGroup,
            index: i32,
            pp_property: ?*?*ISharedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateProperty: *const fn (
            self: *const ISharedPropertyGroup,
            name: ?BSTR,
            f_exists: ?*i16,
            pp_prop: ?*?*ISharedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISharedPropertyGroup,
            name: ?BSTR,
            pp_property: ?*?*ISharedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createPropertyByPosition(self: *const T, index_: i32, f_exists_: ?*i16, pp_prop_: ?*?*ISharedProperty) HRESULT {
                return @as(*const ISharedPropertyGroup.VTable, @ptrCast(self.vtable)).CreatePropertyByPosition(@as(*const ISharedPropertyGroup, @ptrCast(self)), index_, f_exists_, pp_prop_);
            }
            pub inline fn getPropertyByPosition(self: *const T, index_: i32, pp_property_: ?*?*ISharedProperty) HRESULT {
                return @as(*const ISharedPropertyGroup.VTable, @ptrCast(self.vtable)).get_PropertyByPosition(@as(*const ISharedPropertyGroup, @ptrCast(self)), index_, pp_property_);
            }
            pub inline fn createProperty(self: *const T, name_: ?BSTR, f_exists_: ?*i16, pp_prop_: ?*?*ISharedProperty) HRESULT {
                return @as(*const ISharedPropertyGroup.VTable, @ptrCast(self.vtable)).CreateProperty(@as(*const ISharedPropertyGroup, @ptrCast(self)), name_, f_exists_, pp_prop_);
            }
            pub inline fn getProperty(self: *const T, name_: ?BSTR, pp_property_: ?*?*ISharedProperty) HRESULT {
                return @as(*const ISharedPropertyGroup.VTable, @ptrCast(self.vtable)).get_Property(@as(*const ISharedPropertyGroup, @ptrCast(self)), name_, pp_property_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISharedPropertyGroupManager_Value = Guid.initString("2a005c0d-a5de-11cf-9e66-00aa00a3f464");
pub const IID_ISharedPropertyGroupManager = &IID_ISharedPropertyGroupManager_Value;
pub const ISharedPropertyGroupManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreatePropertyGroup: *const fn (
            self: *const ISharedPropertyGroupManager,
            name: ?BSTR,
            dw_iso_mode: ?*i32,
            dw_rel_mode: ?*i32,
            f_exists: ?*i16,
            pp_group: ?*?*ISharedPropertyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Group: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISharedPropertyGroupManager,
            name: ?BSTR,
            pp_group: ?*?*ISharedPropertyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISharedPropertyGroupManager,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createPropertyGroup(self: *const T, name_: ?BSTR, dw_iso_mode_: ?*i32, dw_rel_mode_: ?*i32, f_exists_: ?*i16, pp_group_: ?*?*ISharedPropertyGroup) HRESULT {
                return @as(*const ISharedPropertyGroupManager.VTable, @ptrCast(self.vtable)).CreatePropertyGroup(@as(*const ISharedPropertyGroupManager, @ptrCast(self)), name_, dw_iso_mode_, dw_rel_mode_, f_exists_, pp_group_);
            }
            pub inline fn getGroup(self: *const T, name_: ?BSTR, pp_group_: ?*?*ISharedPropertyGroup) HRESULT {
                return @as(*const ISharedPropertyGroupManager.VTable, @ptrCast(self.vtable)).get_Group(@as(*const ISharedPropertyGroupManager, @ptrCast(self)), name_, pp_group_);
            }
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const ISharedPropertyGroupManager.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISharedPropertyGroupManager, @ptrCast(self)), retval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjectConstruct_Value = Guid.initString("41c4f8b3-7439-11d2-98cb-00c04f8ee1c4");
pub const IID_IObjectConstruct = &IID_IObjectConstruct_Value;
pub const IObjectConstruct = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Construct: *const fn (
            self: *const IObjectConstruct,
            p_ctor_obj: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn construct(self: *const T, p_ctor_obj_: ?*IDispatch) HRESULT {
                return @as(*const IObjectConstruct.VTable, @ptrCast(self.vtable)).Construct(@as(*const IObjectConstruct, @ptrCast(self)), p_ctor_obj_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjectConstructString_Value = Guid.initString("41c4f8b2-7439-11d2-98cb-00c04f8ee1c4");
pub const IID_IObjectConstructString = &IID_IObjectConstructString_Value;
pub const IObjectConstructString = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConstructString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IObjectConstructString,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getConstructString(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IObjectConstructString.VTable, @ptrCast(self.vtable)).get_ConstructString(@as(*const IObjectConstructString, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjectContextActivity_Value = Guid.initString("51372afc-cae7-11cf-be81-00aa00a2fa25");
pub const IID_IObjectContextActivity = &IID_IObjectContextActivity_Value;
pub const IObjectContextActivity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetActivityId: *const fn (
            self: *const IObjectContextActivity,
            p_g_u_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getActivityId(self: *const T, p_g_u_i_d_: ?*Guid) HRESULT {
                return @as(*const IObjectContextActivity.VTable, @ptrCast(self.vtable)).GetActivityId(@as(*const IObjectContextActivity, @ptrCast(self)), p_g_u_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjectContextInfo_Value = Guid.initString("75b52ddb-e8ed-11d1-93ad-00aa00ba3258");
pub const IID_IObjectContextInfo = &IID_IObjectContextInfo_Value;
pub const IObjectContextInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsInTransaction: *const fn (
            self: *const IObjectContextInfo,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetTransaction: *const fn (
            self: *const IObjectContextInfo,
            pptrans: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionId: *const fn (
            self: *const IObjectContextInfo,
            p_guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActivityId: *const fn (
            self: *const IObjectContextInfo,
            p_g_u_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContextId: *const fn (
            self: *const IObjectContextInfo,
            p_guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isInTransaction(self: *const T) BOOL {
                return @as(*const IObjectContextInfo.VTable, @ptrCast(self.vtable)).IsInTransaction(@as(*const IObjectContextInfo, @ptrCast(self)));
            }
            pub inline fn getTransaction(self: *const T, pptrans_: ?*?*IUnknown) HRESULT {
                return @as(*const IObjectContextInfo.VTable, @ptrCast(self.vtable)).GetTransaction(@as(*const IObjectContextInfo, @ptrCast(self)), pptrans_);
            }
            pub inline fn getTransactionId(self: *const T, p_guid_: ?*Guid) HRESULT {
                return @as(*const IObjectContextInfo.VTable, @ptrCast(self.vtable)).GetTransactionId(@as(*const IObjectContextInfo, @ptrCast(self)), p_guid_);
            }
            pub inline fn getActivityId(self: *const T, p_g_u_i_d_: ?*Guid) HRESULT {
                return @as(*const IObjectContextInfo.VTable, @ptrCast(self.vtable)).GetActivityId(@as(*const IObjectContextInfo, @ptrCast(self)), p_g_u_i_d_);
            }
            pub inline fn getContextId(self: *const T, p_guid_: ?*Guid) HRESULT {
                return @as(*const IObjectContextInfo.VTable, @ptrCast(self.vtable)).GetContextId(@as(*const IObjectContextInfo, @ptrCast(self)), p_guid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IObjectContextInfo2_Value = Guid.initString("594be71a-4bc4-438b-9197-cfd176248b09");
pub const IID_IObjectContextInfo2 = &IID_IObjectContextInfo2_Value;
pub const IObjectContextInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IObjectContextInfo.VTable,
        GetPartitionId: *const fn (
            self: *const IObjectContextInfo2,
            p_guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationId: *const fn (
            self: *const IObjectContextInfo2,
            p_guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationInstanceId: *const fn (
            self: *const IObjectContextInfo2,
            p_guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IObjectContextInfo.MethodMixin(T);
            pub inline fn getPartitionId(self: *const T, p_guid_: ?*Guid) HRESULT {
                return @as(*const IObjectContextInfo2.VTable, @ptrCast(self.vtable)).GetPartitionId(@as(*const IObjectContextInfo2, @ptrCast(self)), p_guid_);
            }
            pub inline fn getApplicationId(self: *const T, p_guid_: ?*Guid) HRESULT {
                return @as(*const IObjectContextInfo2.VTable, @ptrCast(self.vtable)).GetApplicationId(@as(*const IObjectContextInfo2, @ptrCast(self)), p_guid_);
            }
            pub inline fn getApplicationInstanceId(self: *const T, p_guid_: ?*Guid) HRESULT {
                return @as(*const IObjectContextInfo2.VTable, @ptrCast(self.vtable)).GetApplicationInstanceId(@as(*const IObjectContextInfo2, @ptrCast(self)), p_guid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ITransactionStatus_Value = Guid.initString("61f589e8-3724-4898-a0a4-664ae9e1d1b4");
pub const IID_ITransactionStatus = &IID_ITransactionStatus_Value;
pub const ITransactionStatus = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTransactionStatus: *const fn (
            self: *const ITransactionStatus,
            hr_status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionStatus: *const fn (
            self: *const ITransactionStatus,
            p_hr_status: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setTransactionStatus(self: *const T, hr_status_: HRESULT) HRESULT {
                return @as(*const ITransactionStatus.VTable, @ptrCast(self.vtable)).SetTransactionStatus(@as(*const ITransactionStatus, @ptrCast(self)), hr_status_);
            }
            pub inline fn getTransactionStatus(self: *const T, p_hr_status_: ?*HRESULT) HRESULT {
                return @as(*const ITransactionStatus.VTable, @ptrCast(self.vtable)).GetTransactionStatus(@as(*const ITransactionStatus, @ptrCast(self)), p_hr_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjectContextTip_Value = Guid.initString("92fd41ca-bad9-11d2-9a2d-00c04f797bc9");
pub const IID_IObjectContextTip = &IID_IObjectContextTip_Value;
pub const IObjectContextTip = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTipUrl: *const fn (
            self: *const IObjectContextTip,
            p_tip_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTipUrl(self: *const T, p_tip_url_: ?*?BSTR) HRESULT {
                return @as(*const IObjectContextTip.VTable, @ptrCast(self.vtable)).GetTipUrl(@as(*const IObjectContextTip, @ptrCast(self)), p_tip_url_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPlaybackControl_Value = Guid.initString("51372afd-cae7-11cf-be81-00aa00a2fa25");
pub const IID_IPlaybackControl = &IID_IPlaybackControl_Value;
pub const IPlaybackControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FinalClientRetry: *const fn (
            self: *const IPlaybackControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinalServerRetry: *const fn (
            self: *const IPlaybackControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn finalClientRetry(self: *const T) HRESULT {
                return @as(*const IPlaybackControl.VTable, @ptrCast(self.vtable)).FinalClientRetry(@as(*const IPlaybackControl, @ptrCast(self)));
            }
            pub inline fn finalServerRetry(self: *const T) HRESULT {
                return @as(*const IPlaybackControl.VTable, @ptrCast(self.vtable)).FinalServerRetry(@as(*const IPlaybackControl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IGetContextProperties_Value = Guid.initString("51372af4-cae7-11cf-be81-00aa00a2fa25");
pub const IID_IGetContextProperties = &IID_IGetContextProperties_Value;
pub const IGetContextProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Count: *const fn (
            self: *const IGetContextProperties,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IGetContextProperties,
            name: ?BSTR,
            p_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumNames: *const fn (
            self: *const IGetContextProperties,
            ppenum: ?*?*IEnumNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn count(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IGetContextProperties.VTable, @ptrCast(self.vtable)).Count(@as(*const IGetContextProperties, @ptrCast(self)), pl_count_);
            }
            pub inline fn getProperty(self: *const T, name_: ?BSTR, p_property_: ?*VARIANT) HRESULT {
                return @as(*const IGetContextProperties.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IGetContextProperties, @ptrCast(self)), name_, p_property_);
            }
            pub inline fn enumNames(self: *const T, ppenum_: ?*?*IEnumNames) HRESULT {
                return @as(*const IGetContextProperties.VTable, @ptrCast(self.vtable)).EnumNames(@as(*const IGetContextProperties, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const TransactionVote = enum(i32) {
    Commit = 0,
    Abort = 1,
};
pub const TxCommit = TransactionVote.Commit;
pub const TxAbort = TransactionVote.Abort;

// TODO: this type is limited to platform 'windows5.0'
const IID_IContextState_Value = Guid.initString("3c05e54b-a42a-11d2-afc4-00c04f8ee1c4");
pub const IID_IContextState = &IID_IContextState_Value;
pub const IContextState = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDeactivateOnReturn: *const fn (
            self: *const IContextState,
            b_deactivate: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeactivateOnReturn: *const fn (
            self: *const IContextState,
            pb_deactivate: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMyTransactionVote: *const fn (
            self: *const IContextState,
            tx_vote: TransactionVote,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyTransactionVote: *const fn (
            self: *const IContextState,
            ptx_vote: ?*TransactionVote,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setDeactivateOnReturn(self: *const T, b_deactivate_: i16) HRESULT {
                return @as(*const IContextState.VTable, @ptrCast(self.vtable)).SetDeactivateOnReturn(@as(*const IContextState, @ptrCast(self)), b_deactivate_);
            }
            pub inline fn getDeactivateOnReturn(self: *const T, pb_deactivate_: ?*i16) HRESULT {
                return @as(*const IContextState.VTable, @ptrCast(self.vtable)).GetDeactivateOnReturn(@as(*const IContextState, @ptrCast(self)), pb_deactivate_);
            }
            pub inline fn setMyTransactionVote(self: *const T, tx_vote_: TransactionVote) HRESULT {
                return @as(*const IContextState.VTable, @ptrCast(self.vtable)).SetMyTransactionVote(@as(*const IContextState, @ptrCast(self)), tx_vote_);
            }
            pub inline fn getMyTransactionVote(self: *const T, ptx_vote_: ?*TransactionVote) HRESULT {
                return @as(*const IContextState.VTable, @ptrCast(self.vtable)).GetMyTransactionVote(@as(*const IContextState, @ptrCast(self)), ptx_vote_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPoolManager_Value = Guid.initString("0a469861-5a91-43a0-99b6-d5e179bb0631");
pub const IID_IPoolManager = &IID_IPoolManager_Value;
pub const IPoolManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ShutdownPool: *const fn (
            self: *const IPoolManager,
            c_l_s_i_d_or_prog_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn shutdownPool(self: *const T, c_l_s_i_d_or_prog_i_d_: ?BSTR) HRESULT {
                return @as(*const IPoolManager.VTable, @ptrCast(self.vtable)).ShutdownPool(@as(*const IPoolManager, @ptrCast(self)), c_l_s_i_d_or_prog_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISelectCOMLBServer_Value = Guid.initString("dcf443f4-3f8a-4872-b9f0-369a796d12d6");
pub const IID_ISelectCOMLBServer = &IID_ISelectCOMLBServer_Value;
pub const ISelectCOMLBServer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn (
            self: *const ISelectCOMLBServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLBServer: *const fn (
            self: *const ISelectCOMLBServer,
            p_unk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn init(self: *const T) HRESULT {
                return @as(*const ISelectCOMLBServer.VTable, @ptrCast(self.vtable)).Init(@as(*const ISelectCOMLBServer, @ptrCast(self)));
            }
            pub inline fn getLBServer(self: *const T, p_unk_: ?*IUnknown) HRESULT {
                return @as(*const ISelectCOMLBServer.VTable, @ptrCast(self.vtable)).GetLBServer(@as(*const ISelectCOMLBServer, @ptrCast(self)), p_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICOMLBArguments_Value = Guid.initString("3a0f150f-8ee5-4b94-b40e-aef2f9e42ed2");
pub const IID_ICOMLBArguments = &IID_ICOMLBArguments_Value;
pub const ICOMLBArguments = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCLSID: *const fn (
            self: *const ICOMLBArguments,
            p_c_l_s_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCLSID: *const fn (
            self: *const ICOMLBArguments,
            p_c_l_s_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMachineName: *const fn (
            self: *const ICOMLBArguments,
            cch_svr: u32,
            sz_server_name: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMachineName: *const fn (
            self: *const ICOMLBArguments,
            cch_svr: u32,
            sz_server_name: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCLSID(self: *const T, p_c_l_s_i_d_: ?*Guid) HRESULT {
                return @as(*const ICOMLBArguments.VTable, @ptrCast(self.vtable)).GetCLSID(@as(*const ICOMLBArguments, @ptrCast(self)), p_c_l_s_i_d_);
            }
            pub inline fn setCLSID(self: *const T, p_c_l_s_i_d_: ?*Guid) HRESULT {
                return @as(*const ICOMLBArguments.VTable, @ptrCast(self.vtable)).SetCLSID(@as(*const ICOMLBArguments, @ptrCast(self)), p_c_l_s_i_d_);
            }
            pub inline fn getMachineName(self: *const T, cch_svr_: u32, sz_server_name_: [*:0]u16) HRESULT {
                return @as(*const ICOMLBArguments.VTable, @ptrCast(self.vtable)).GetMachineName(@as(*const ICOMLBArguments, @ptrCast(self)), cch_svr_, sz_server_name_);
            }
            pub inline fn setMachineName(self: *const T, cch_svr_: u32, sz_server_name_: [*:0]u16) HRESULT {
                return @as(*const ICOMLBArguments.VTable, @ptrCast(self.vtable)).SetMachineName(@as(*const ICOMLBArguments, @ptrCast(self)), cch_svr_, sz_server_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICrmLogControl_Value = Guid.initString("a0e174b3-d26e-11d2-8f84-00805fc7bcd9");
pub const IID_ICrmLogControl = &IID_ICrmLogControl_Value;
pub const ICrmLogControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionUOW: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICrmLogControl,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterCompensator: *const fn (
            self: *const ICrmLogControl,
            lpcwstr_prog_id_compensator: ?[*:0]const u16,
            lpcwstr_description: ?[*:0]const u16,
            l_crm_reg_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteLogRecordVariants: *const fn (
            self: *const ICrmLogControl,
            p_log_record: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ForceLog: *const fn (
            self: *const ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ForgetLogRecord: *const fn (
            self: *const ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ForceTransactionToAbort: *const fn (
            self: *const ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteLogRecord: *const fn (
            self: *const ICrmLogControl,
            rg_blob: [*]BLOB,
            c_blob: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTransactionUOW(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ICrmLogControl.VTable, @ptrCast(self.vtable)).get_TransactionUOW(@as(*const ICrmLogControl, @ptrCast(self)), p_val_);
            }
            pub inline fn registerCompensator(self: *const T, lpcwstr_prog_id_compensator_: ?[*:0]const u16, lpcwstr_description_: ?[*:0]const u16, l_crm_reg_flags_: i32) HRESULT {
                return @as(*const ICrmLogControl.VTable, @ptrCast(self.vtable)).RegisterCompensator(@as(*const ICrmLogControl, @ptrCast(self)), lpcwstr_prog_id_compensator_, lpcwstr_description_, l_crm_reg_flags_);
            }
            pub inline fn writeLogRecordVariants(self: *const T, p_log_record_: ?*VARIANT) HRESULT {
                return @as(*const ICrmLogControl.VTable, @ptrCast(self.vtable)).WriteLogRecordVariants(@as(*const ICrmLogControl, @ptrCast(self)), p_log_record_);
            }
            pub inline fn forceLog(self: *const T) HRESULT {
                return @as(*const ICrmLogControl.VTable, @ptrCast(self.vtable)).ForceLog(@as(*const ICrmLogControl, @ptrCast(self)));
            }
            pub inline fn forgetLogRecord(self: *const T) HRESULT {
                return @as(*const ICrmLogControl.VTable, @ptrCast(self.vtable)).ForgetLogRecord(@as(*const ICrmLogControl, @ptrCast(self)));
            }
            pub inline fn forceTransactionToAbort(self: *const T) HRESULT {
                return @as(*const ICrmLogControl.VTable, @ptrCast(self.vtable)).ForceTransactionToAbort(@as(*const ICrmLogControl, @ptrCast(self)));
            }
            pub inline fn writeLogRecord(self: *const T, rg_blob_: [*]BLOB, c_blob_: u32) HRESULT {
                return @as(*const ICrmLogControl.VTable, @ptrCast(self.vtable)).WriteLogRecord(@as(*const ICrmLogControl, @ptrCast(self)), rg_blob_, c_blob_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICrmCompensatorVariants_Value = Guid.initString("f0baf8e4-7804-11d1-82e9-00a0c91eede9");
pub const IID_ICrmCompensatorVariants = &IID_ICrmCompensatorVariants_Value;
pub const ICrmCompensatorVariants = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetLogControlVariants: *const fn (
            self: *const ICrmCompensatorVariants,
            p_log_control: ?*ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginPrepareVariants: *const fn (
            self: *const ICrmCompensatorVariants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareRecordVariants: *const fn (
            self: *const ICrmCompensatorVariants,
            p_log_record: ?*VARIANT,
            pb_forget: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndPrepareVariants: *const fn (
            self: *const ICrmCompensatorVariants,
            pb_ok_to_prepare: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginCommitVariants: *const fn (
            self: *const ICrmCompensatorVariants,
            b_recovery: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRecordVariants: *const fn (
            self: *const ICrmCompensatorVariants,
            p_log_record: ?*VARIANT,
            pb_forget: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndCommitVariants: *const fn (
            self: *const ICrmCompensatorVariants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginAbortVariants: *const fn (
            self: *const ICrmCompensatorVariants,
            b_recovery: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRecordVariants: *const fn (
            self: *const ICrmCompensatorVariants,
            p_log_record: ?*VARIANT,
            pb_forget: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndAbortVariants: *const fn (
            self: *const ICrmCompensatorVariants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setLogControlVariants(self: *const T, p_log_control_: ?*ICrmLogControl) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).SetLogControlVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)), p_log_control_);
            }
            pub inline fn beginPrepareVariants(self: *const T) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).BeginPrepareVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)));
            }
            pub inline fn prepareRecordVariants(self: *const T, p_log_record_: ?*VARIANT, pb_forget_: ?*i16) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).PrepareRecordVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)), p_log_record_, pb_forget_);
            }
            pub inline fn endPrepareVariants(self: *const T, pb_ok_to_prepare_: ?*i16) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).EndPrepareVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)), pb_ok_to_prepare_);
            }
            pub inline fn beginCommitVariants(self: *const T, b_recovery_: i16) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).BeginCommitVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)), b_recovery_);
            }
            pub inline fn commitRecordVariants(self: *const T, p_log_record_: ?*VARIANT, pb_forget_: ?*i16) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).CommitRecordVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)), p_log_record_, pb_forget_);
            }
            pub inline fn endCommitVariants(self: *const T) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).EndCommitVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)));
            }
            pub inline fn beginAbortVariants(self: *const T, b_recovery_: i16) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).BeginAbortVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)), b_recovery_);
            }
            pub inline fn abortRecordVariants(self: *const T, p_log_record_: ?*VARIANT, pb_forget_: ?*i16) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).AbortRecordVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)), p_log_record_, pb_forget_);
            }
            pub inline fn endAbortVariants(self: *const T) HRESULT {
                return @as(*const ICrmCompensatorVariants.VTable, @ptrCast(self.vtable)).EndAbortVariants(@as(*const ICrmCompensatorVariants, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CrmLogRecordRead = extern struct {
    dwCrmFlags: u32,
    dwSequenceNumber: u32,
    blobUserData: BLOB,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICrmCompensator_Value = Guid.initString("bbc01830-8d3b-11d1-82ec-00a0c91eede9");
pub const IID_ICrmCompensator = &IID_ICrmCompensator_Value;
pub const ICrmCompensator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetLogControl: *const fn (
            self: *const ICrmCompensator,
            p_log_control: ?*ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginPrepare: *const fn (
            self: *const ICrmCompensator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareRecord: *const fn (
            self: *const ICrmCompensator,
            crm_log_rec: CrmLogRecordRead,
            pf_forget: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndPrepare: *const fn (
            self: *const ICrmCompensator,
            pf_ok_to_prepare: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginCommit: *const fn (
            self: *const ICrmCompensator,
            f_recovery: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRecord: *const fn (
            self: *const ICrmCompensator,
            crm_log_rec: CrmLogRecordRead,
            pf_forget: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndCommit: *const fn (
            self: *const ICrmCompensator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginAbort: *const fn (
            self: *const ICrmCompensator,
            f_recovery: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRecord: *const fn (
            self: *const ICrmCompensator,
            crm_log_rec: CrmLogRecordRead,
            pf_forget: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndAbort: *const fn (
            self: *const ICrmCompensator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setLogControl(self: *const T, p_log_control_: ?*ICrmLogControl) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).SetLogControl(@as(*const ICrmCompensator, @ptrCast(self)), p_log_control_);
            }
            pub inline fn beginPrepare(self: *const T) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).BeginPrepare(@as(*const ICrmCompensator, @ptrCast(self)));
            }
            pub inline fn prepareRecord(self: *const T, crm_log_rec_: CrmLogRecordRead, pf_forget_: ?*BOOL) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).PrepareRecord(@as(*const ICrmCompensator, @ptrCast(self)), crm_log_rec_, pf_forget_);
            }
            pub inline fn endPrepare(self: *const T, pf_ok_to_prepare_: ?*BOOL) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).EndPrepare(@as(*const ICrmCompensator, @ptrCast(self)), pf_ok_to_prepare_);
            }
            pub inline fn beginCommit(self: *const T, f_recovery_: BOOL) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).BeginCommit(@as(*const ICrmCompensator, @ptrCast(self)), f_recovery_);
            }
            pub inline fn commitRecord(self: *const T, crm_log_rec_: CrmLogRecordRead, pf_forget_: ?*BOOL) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).CommitRecord(@as(*const ICrmCompensator, @ptrCast(self)), crm_log_rec_, pf_forget_);
            }
            pub inline fn endCommit(self: *const T) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).EndCommit(@as(*const ICrmCompensator, @ptrCast(self)));
            }
            pub inline fn beginAbort(self: *const T, f_recovery_: BOOL) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).BeginAbort(@as(*const ICrmCompensator, @ptrCast(self)), f_recovery_);
            }
            pub inline fn abortRecord(self: *const T, crm_log_rec_: CrmLogRecordRead, pf_forget_: ?*BOOL) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).AbortRecord(@as(*const ICrmCompensator, @ptrCast(self)), crm_log_rec_, pf_forget_);
            }
            pub inline fn endAbort(self: *const T) HRESULT {
                return @as(*const ICrmCompensator.VTable, @ptrCast(self.vtable)).EndAbort(@as(*const ICrmCompensator, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CrmTransactionState = enum(i32) {
    Active = 0,
    Committed = 1,
    Aborted = 2,
    Indoubt = 3,
};
pub const TxState_Active = CrmTransactionState.Active;
pub const TxState_Committed = CrmTransactionState.Committed;
pub const TxState_Aborted = CrmTransactionState.Aborted;
pub const TxState_Indoubt = CrmTransactionState.Indoubt;

// TODO: this type is limited to platform 'windows5.0'
const IID_ICrmMonitorLogRecords_Value = Guid.initString("70c8e441-c7ed-11d1-82fb-00a0c91eede9");
pub const IID_ICrmMonitorLogRecords = &IID_ICrmMonitorLogRecords_Value;
pub const ICrmMonitorLogRecords = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICrmMonitorLogRecords,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICrmMonitorLogRecords,
            p_val: ?*CrmTransactionState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StructuredRecords: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICrmMonitorLogRecords,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogRecord: *const fn (
            self: *const ICrmMonitorLogRecords,
            dw_index: u32,
            p_crm_log_rec: ?*CrmLogRecordRead,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogRecordVariants: *const fn (
            self: *const ICrmMonitorLogRecords,
            index_number: VARIANT,
            p_log_record: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ICrmMonitorLogRecords.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICrmMonitorLogRecords, @ptrCast(self)), p_val_);
            }
            pub inline fn getTransactionState(self: *const T, p_val_: ?*CrmTransactionState) HRESULT {
                return @as(*const ICrmMonitorLogRecords.VTable, @ptrCast(self.vtable)).get_TransactionState(@as(*const ICrmMonitorLogRecords, @ptrCast(self)), p_val_);
            }
            pub inline fn getStructuredRecords(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const ICrmMonitorLogRecords.VTable, @ptrCast(self.vtable)).get_StructuredRecords(@as(*const ICrmMonitorLogRecords, @ptrCast(self)), p_val_);
            }
            pub inline fn getLogRecord(self: *const T, dw_index_: u32, p_crm_log_rec_: ?*CrmLogRecordRead) HRESULT {
                return @as(*const ICrmMonitorLogRecords.VTable, @ptrCast(self.vtable)).GetLogRecord(@as(*const ICrmMonitorLogRecords, @ptrCast(self)), dw_index_, p_crm_log_rec_);
            }
            pub inline fn getLogRecordVariants(self: *const T, index_number_: VARIANT, p_log_record_: ?*VARIANT) HRESULT {
                return @as(*const ICrmMonitorLogRecords.VTable, @ptrCast(self.vtable)).GetLogRecordVariants(@as(*const ICrmMonitorLogRecords, @ptrCast(self)), index_number_, p_log_record_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICrmMonitorClerks_Value = Guid.initString("70c8e442-c7ed-11d1-82fb-00a0c91eede9");
pub const IID_ICrmMonitorClerks = &IID_ICrmMonitorClerks_Value;
pub const ICrmMonitorClerks = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Item: *const fn (
            self: *const ICrmMonitorClerks,
            index: VARIANT,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICrmMonitorClerks,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICrmMonitorClerks,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProgIdCompensator: *const fn (
            self: *const ICrmMonitorClerks,
            index: VARIANT,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Description: *const fn (
            self: *const ICrmMonitorClerks,
            index: VARIANT,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransactionUOW: *const fn (
            self: *const ICrmMonitorClerks,
            index: VARIANT,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivityId: *const fn (
            self: *const ICrmMonitorClerks,
            index: VARIANT,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn item(self: *const T, index_: VARIANT, p_item_: ?*VARIANT) HRESULT {
                return @as(*const ICrmMonitorClerks.VTable, @ptrCast(self.vtable)).Item(@as(*const ICrmMonitorClerks, @ptrCast(self)), index_, p_item_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ICrmMonitorClerks.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICrmMonitorClerks, @ptrCast(self)), p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ICrmMonitorClerks.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICrmMonitorClerks, @ptrCast(self)), p_val_);
            }
            pub inline fn progIdCompensator(self: *const T, index_: VARIANT, p_item_: ?*VARIANT) HRESULT {
                return @as(*const ICrmMonitorClerks.VTable, @ptrCast(self.vtable)).ProgIdCompensator(@as(*const ICrmMonitorClerks, @ptrCast(self)), index_, p_item_);
            }
            pub inline fn description(self: *const T, index_: VARIANT, p_item_: ?*VARIANT) HRESULT {
                return @as(*const ICrmMonitorClerks.VTable, @ptrCast(self.vtable)).Description(@as(*const ICrmMonitorClerks, @ptrCast(self)), index_, p_item_);
            }
            pub inline fn transactionUOW(self: *const T, index_: VARIANT, p_item_: ?*VARIANT) HRESULT {
                return @as(*const ICrmMonitorClerks.VTable, @ptrCast(self.vtable)).TransactionUOW(@as(*const ICrmMonitorClerks, @ptrCast(self)), index_, p_item_);
            }
            pub inline fn activityId(self: *const T, index_: VARIANT, p_item_: ?*VARIANT) HRESULT {
                return @as(*const ICrmMonitorClerks.VTable, @ptrCast(self.vtable)).ActivityId(@as(*const ICrmMonitorClerks, @ptrCast(self)), index_, p_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICrmMonitor_Value = Guid.initString("70c8e443-c7ed-11d1-82fb-00a0c91eede9");
pub const IID_ICrmMonitor = &IID_ICrmMonitor_Value;
pub const ICrmMonitor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClerks: *const fn (
            self: *const ICrmMonitor,
            p_clerks: ?*?*ICrmMonitorClerks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HoldClerk: *const fn (
            self: *const ICrmMonitor,
            index: VARIANT,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getClerks(self: *const T, p_clerks_: ?*?*ICrmMonitorClerks) HRESULT {
                return @as(*const ICrmMonitor.VTable, @ptrCast(self.vtable)).GetClerks(@as(*const ICrmMonitor, @ptrCast(self)), p_clerks_);
            }
            pub inline fn holdClerk(self: *const T, index_: VARIANT, p_item_: ?*VARIANT) HRESULT {
                return @as(*const ICrmMonitor.VTable, @ptrCast(self.vtable)).HoldClerk(@as(*const ICrmMonitor, @ptrCast(self)), index_, p_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICrmFormatLogRecords_Value = Guid.initString("9c51d821-c98b-11d1-82fb-00a0c91eede9");
pub const IID_ICrmFormatLogRecords = &IID_ICrmFormatLogRecords_Value;
pub const ICrmFormatLogRecords = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetColumnCount: *const fn (
            self: *const ICrmFormatLogRecords,
            pl_column_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnHeaders: *const fn (
            self: *const ICrmFormatLogRecords,
            p_headers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumn: *const fn (
            self: *const ICrmFormatLogRecords,
            crm_log_rec: CrmLogRecordRead,
            p_formatted_log_record: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnVariants: *const fn (
            self: *const ICrmFormatLogRecords,
            log_record: VARIANT,
            p_formatted_log_record: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getColumnCount(self: *const T, pl_column_count_: ?*i32) HRESULT {
                return @as(*const ICrmFormatLogRecords.VTable, @ptrCast(self.vtable)).GetColumnCount(@as(*const ICrmFormatLogRecords, @ptrCast(self)), pl_column_count_);
            }
            pub inline fn getColumnHeaders(self: *const T, p_headers_: ?*VARIANT) HRESULT {
                return @as(*const ICrmFormatLogRecords.VTable, @ptrCast(self.vtable)).GetColumnHeaders(@as(*const ICrmFormatLogRecords, @ptrCast(self)), p_headers_);
            }
            pub inline fn getColumn(self: *const T, crm_log_rec_: CrmLogRecordRead, p_formatted_log_record_: ?*VARIANT) HRESULT {
                return @as(*const ICrmFormatLogRecords.VTable, @ptrCast(self.vtable)).GetColumn(@as(*const ICrmFormatLogRecords, @ptrCast(self)), crm_log_rec_, p_formatted_log_record_);
            }
            pub inline fn getColumnVariants(self: *const T, log_record_: VARIANT, p_formatted_log_record_: ?*VARIANT) HRESULT {
                return @as(*const ICrmFormatLogRecords.VTable, @ptrCast(self.vtable)).GetColumnVariants(@as(*const ICrmFormatLogRecords, @ptrCast(self)), log_record_, p_formatted_log_record_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CSC_InheritanceConfig = enum(i32) {
    nherit = 0,
    gnore = 1,
};
pub const CSC_Inherit = CSC_InheritanceConfig.nherit;
pub const CSC_Ignore = CSC_InheritanceConfig.gnore;

pub const CSC_ThreadPool = enum(i32) {
    ThreadPoolNone = 0,
    ThreadPoolInherit = 1,
    STAThreadPool = 2,
    MTAThreadPool = 3,
};
pub const CSC_ThreadPoolNone = CSC_ThreadPool.ThreadPoolNone;
pub const CSC_ThreadPoolInherit = CSC_ThreadPool.ThreadPoolInherit;
pub const CSC_STAThreadPool = CSC_ThreadPool.STAThreadPool;
pub const CSC_MTAThreadPool = CSC_ThreadPool.MTAThreadPool;

pub const CSC_Binding = enum(i32) {
    NoBinding = 0,
    BindToPoolThread = 1,
};
pub const CSC_NoBinding = CSC_Binding.NoBinding;
pub const CSC_BindToPoolThread = CSC_Binding.BindToPoolThread;

pub const CSC_TransactionConfig = enum(i32) {
    NoTransaction = 0,
    IfContainerIsTransactional = 1,
    CreateTransactionIfNecessary = 2,
    NewTransaction = 3,
};
pub const CSC_NoTransaction = CSC_TransactionConfig.NoTransaction;
pub const CSC_IfContainerIsTransactional = CSC_TransactionConfig.IfContainerIsTransactional;
pub const CSC_CreateTransactionIfNecessary = CSC_TransactionConfig.CreateTransactionIfNecessary;
pub const CSC_NewTransaction = CSC_TransactionConfig.NewTransaction;

pub const CSC_SynchronizationConfig = enum(i32) {
    NoSynchronization = 0,
    IfContainerIsSynchronized = 1,
    NewSynchronizationIfNecessary = 2,
    NewSynchronization = 3,
};
pub const CSC_NoSynchronization = CSC_SynchronizationConfig.NoSynchronization;
pub const CSC_IfContainerIsSynchronized = CSC_SynchronizationConfig.IfContainerIsSynchronized;
pub const CSC_NewSynchronizationIfNecessary = CSC_SynchronizationConfig.NewSynchronizationIfNecessary;
pub const CSC_NewSynchronization = CSC_SynchronizationConfig.NewSynchronization;

pub const CSC_TrackerConfig = enum(i32) {
    DontUseTracker = 0,
    UseTracker = 1,
};
pub const CSC_DontUseTracker = CSC_TrackerConfig.DontUseTracker;
pub const CSC_UseTracker = CSC_TrackerConfig.UseTracker;

pub const CSC_PartitionConfig = enum(i32) {
    NoPartition = 0,
    InheritPartition = 1,
    NewPartition = 2,
};
pub const CSC_NoPartition = CSC_PartitionConfig.NoPartition;
pub const CSC_InheritPartition = CSC_PartitionConfig.InheritPartition;
pub const CSC_NewPartition = CSC_PartitionConfig.NewPartition;

pub const CSC_IISIntrinsicsConfig = enum(i32) {
    NoIISIntrinsics = 0,
    InheritIISIntrinsics = 1,
};
pub const CSC_NoIISIntrinsics = CSC_IISIntrinsicsConfig.NoIISIntrinsics;
pub const CSC_InheritIISIntrinsics = CSC_IISIntrinsicsConfig.InheritIISIntrinsics;

pub const CSC_COMTIIntrinsicsConfig = enum(i32) {
    NoCOMTIIntrinsics = 0,
    InheritCOMTIIntrinsics = 1,
};
pub const CSC_NoCOMTIIntrinsics = CSC_COMTIIntrinsicsConfig.NoCOMTIIntrinsics;
pub const CSC_InheritCOMTIIntrinsics = CSC_COMTIIntrinsicsConfig.InheritCOMTIIntrinsics;

pub const CSC_SxsConfig = enum(i32) {
    NoSxs = 0,
    InheritSxs = 1,
    NewSxs = 2,
};
pub const CSC_NoSxs = CSC_SxsConfig.NoSxs;
pub const CSC_InheritSxs = CSC_SxsConfig.InheritSxs;
pub const CSC_NewSxs = CSC_SxsConfig.NewSxs;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceIISIntrinsicsConfig_Value = Guid.initString("1a0cf920-d452-46f4-bc36-48118d54ea52");
pub const IID_IServiceIISIntrinsicsConfig = &IID_IServiceIISIntrinsicsConfig_Value;
pub const IServiceIISIntrinsicsConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IISIntrinsicsConfig: *const fn (
            self: *const IServiceIISIntrinsicsConfig,
            iis_intrinsics_config: CSC_IISIntrinsicsConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn iisIntrinsicsConfig(self: *const T, iis_intrinsics_config_: CSC_IISIntrinsicsConfig) HRESULT {
                return @as(*const IServiceIISIntrinsicsConfig.VTable, @ptrCast(self.vtable)).IISIntrinsicsConfig(@as(*const IServiceIISIntrinsicsConfig, @ptrCast(self)), iis_intrinsics_config_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceComTIIntrinsicsConfig_Value = Guid.initString("09e6831e-04e1-4ed4-9d0f-e8b168bafeaf");
pub const IID_IServiceComTIIntrinsicsConfig = &IID_IServiceComTIIntrinsicsConfig_Value;
pub const IServiceComTIIntrinsicsConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComTIIntrinsicsConfig: *const fn (
            self: *const IServiceComTIIntrinsicsConfig,
            comti_intrinsics_config: CSC_COMTIIntrinsicsConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn comTIIntrinsicsConfig(self: *const T, comti_intrinsics_config_: CSC_COMTIIntrinsicsConfig) HRESULT {
                return @as(*const IServiceComTIIntrinsicsConfig.VTable, @ptrCast(self.vtable)).ComTIIntrinsicsConfig(@as(*const IServiceComTIIntrinsicsConfig, @ptrCast(self)), comti_intrinsics_config_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceSxsConfig_Value = Guid.initString("c7cd7379-f3f2-4634-811b-703281d73e08");
pub const IID_IServiceSxsConfig = &IID_IServiceSxsConfig_Value;
pub const IServiceSxsConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SxsConfig: *const fn (
            self: *const IServiceSxsConfig,
            scs_config: CSC_SxsConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SxsName: *const fn (
            self: *const IServiceSxsConfig,
            sz_sxs_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SxsDirectory: *const fn (
            self: *const IServiceSxsConfig,
            sz_sxs_directory: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn sxsConfig(self: *const T, scs_config_: CSC_SxsConfig) HRESULT {
                return @as(*const IServiceSxsConfig.VTable, @ptrCast(self.vtable)).SxsConfig(@as(*const IServiceSxsConfig, @ptrCast(self)), scs_config_);
            }
            pub inline fn sxsName(self: *const T, sz_sxs_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IServiceSxsConfig.VTable, @ptrCast(self.vtable)).SxsName(@as(*const IServiceSxsConfig, @ptrCast(self)), sz_sxs_name_);
            }
            pub inline fn sxsDirectory(self: *const T, sz_sxs_directory_: ?[*:0]const u16) HRESULT {
                return @as(*const IServiceSxsConfig.VTable, @ptrCast(self.vtable)).SxsDirectory(@as(*const IServiceSxsConfig, @ptrCast(self)), sz_sxs_directory_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICheckSxsConfig_Value = Guid.initString("0ff5a96f-11fc-47d1-baa6-25dd347e7242");
pub const IID_ICheckSxsConfig = &IID_ICheckSxsConfig_Value;
pub const ICheckSxsConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsSameSxsConfig: *const fn (
            self: *const ICheckSxsConfig,
            wsz_sxs_name: ?[*:0]const u16,
            wsz_sxs_directory: ?[*:0]const u16,
            wsz_sxs_app_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isSameSxsConfig(self: *const T, wsz_sxs_name_: ?[*:0]const u16, wsz_sxs_directory_: ?[*:0]const u16, wsz_sxs_app_name_: ?[*:0]const u16) HRESULT {
                return @as(*const ICheckSxsConfig.VTable, @ptrCast(self.vtable)).IsSameSxsConfig(@as(*const ICheckSxsConfig, @ptrCast(self)), wsz_sxs_name_, wsz_sxs_directory_, wsz_sxs_app_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceInheritanceConfig_Value = Guid.initString("92186771-d3b4-4d77-a8ea-ee842d586f35");
pub const IID_IServiceInheritanceConfig = &IID_IServiceInheritanceConfig_Value;
pub const IServiceInheritanceConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ContainingContextTreatment: *const fn (
            self: *const IServiceInheritanceConfig,
            inheritance_config: CSC_InheritanceConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn containingContextTreatment(self: *const T, inheritance_config_: CSC_InheritanceConfig) HRESULT {
                return @as(*const IServiceInheritanceConfig.VTable, @ptrCast(self.vtable)).ContainingContextTreatment(@as(*const IServiceInheritanceConfig, @ptrCast(self)), inheritance_config_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceThreadPoolConfig_Value = Guid.initString("186d89bc-f277-4bcc-80d5-4df7b836ef4a");
pub const IID_IServiceThreadPoolConfig = &IID_IServiceThreadPoolConfig_Value;
pub const IServiceThreadPoolConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SelectThreadPool: *const fn (
            self: *const IServiceThreadPoolConfig,
            thread_pool: CSC_ThreadPool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBindingInfo: *const fn (
            self: *const IServiceThreadPoolConfig,
            binding: CSC_Binding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn selectThreadPool(self: *const T, thread_pool_: CSC_ThreadPool) HRESULT {
                return @as(*const IServiceThreadPoolConfig.VTable, @ptrCast(self.vtable)).SelectThreadPool(@as(*const IServiceThreadPoolConfig, @ptrCast(self)), thread_pool_);
            }
            pub inline fn setBindingInfo(self: *const T, binding_: CSC_Binding) HRESULT {
                return @as(*const IServiceThreadPoolConfig.VTable, @ptrCast(self.vtable)).SetBindingInfo(@as(*const IServiceThreadPoolConfig, @ptrCast(self)), binding_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceTransactionConfigBase_Value = Guid.initString("772b3fbe-6ffd-42fb-b5f8-8f9b260f3810");
pub const IID_IServiceTransactionConfigBase = &IID_IServiceTransactionConfigBase_Value;
pub const IServiceTransactionConfigBase = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConfigureTransaction: *const fn (
            self: *const IServiceTransactionConfigBase,
            transaction_config: CSC_TransactionConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsolationLevel: *const fn (
            self: *const IServiceTransactionConfigBase,
            option: COMAdminTxIsolationLevelOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransactionTimeout: *const fn (
            self: *const IServiceTransactionConfigBase,
            ul_timeout_sec: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BringYourOwnTransaction: *const fn (
            self: *const IServiceTransactionConfigBase,
            sz_tip_u_r_l: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewTransactionDescription: *const fn (
            self: *const IServiceTransactionConfigBase,
            sz_tx_desc: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn configureTransaction(self: *const T, transaction_config_: CSC_TransactionConfig) HRESULT {
                return @as(*const IServiceTransactionConfigBase.VTable, @ptrCast(self.vtable)).ConfigureTransaction(@as(*const IServiceTransactionConfigBase, @ptrCast(self)), transaction_config_);
            }
            pub inline fn isolationLevel(self: *const T, option_: COMAdminTxIsolationLevelOptions) HRESULT {
                return @as(*const IServiceTransactionConfigBase.VTable, @ptrCast(self.vtable)).IsolationLevel(@as(*const IServiceTransactionConfigBase, @ptrCast(self)), option_);
            }
            pub inline fn transactionTimeout(self: *const T, ul_timeout_sec_: u32) HRESULT {
                return @as(*const IServiceTransactionConfigBase.VTable, @ptrCast(self.vtable)).TransactionTimeout(@as(*const IServiceTransactionConfigBase, @ptrCast(self)), ul_timeout_sec_);
            }
            pub inline fn bringYourOwnTransaction(self: *const T, sz_tip_u_r_l_: ?[*:0]const u16) HRESULT {
                return @as(*const IServiceTransactionConfigBase.VTable, @ptrCast(self.vtable)).BringYourOwnTransaction(@as(*const IServiceTransactionConfigBase, @ptrCast(self)), sz_tip_u_r_l_);
            }
            pub inline fn newTransactionDescription(self: *const T, sz_tx_desc_: ?[*:0]const u16) HRESULT {
                return @as(*const IServiceTransactionConfigBase.VTable, @ptrCast(self.vtable)).NewTransactionDescription(@as(*const IServiceTransactionConfigBase, @ptrCast(self)), sz_tx_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceTransactionConfig_Value = Guid.initString("59f4c2a3-d3d7-4a31-b6e4-6ab3177c50b9");
pub const IID_IServiceTransactionConfig = &IID_IServiceTransactionConfig_Value;
pub const IServiceTransactionConfig = extern struct {
    pub const VTable = extern struct {
        base: IServiceTransactionConfigBase.VTable,
        ConfigureBYOT: *const fn (
            self: *const IServiceTransactionConfig,
            p_i_tx_byot: ?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IServiceTransactionConfigBase.MethodMixin(T);
            pub inline fn configureBYOT(self: *const T, p_i_tx_byot_: ?*ITransaction) HRESULT {
                return @as(*const IServiceTransactionConfig.VTable, @ptrCast(self.vtable)).ConfigureBYOT(@as(*const IServiceTransactionConfig, @ptrCast(self)), p_i_tx_byot_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceSysTxnConfig_Value = Guid.initString("33caf1a1-fcb8-472b-b45e-967448ded6d8");
pub const IID_IServiceSysTxnConfig = &IID_IServiceSysTxnConfig_Value;
pub const IServiceSysTxnConfig = extern struct {
    pub const VTable = extern struct {
        base: IServiceTransactionConfig.VTable,
        ConfigureBYOTSysTxn: *const fn (
            self: *const IServiceSysTxnConfig,
            p_tx_proxy: ?*ITransactionProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IServiceTransactionConfig.MethodMixin(T);
            pub inline fn configureBYOTSysTxn(self: *const T, p_tx_proxy_: ?*ITransactionProxy) HRESULT {
                return @as(*const IServiceSysTxnConfig.VTable, @ptrCast(self.vtable)).ConfigureBYOTSysTxn(@as(*const IServiceSysTxnConfig, @ptrCast(self)), p_tx_proxy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceSynchronizationConfig_Value = Guid.initString("fd880e81-6dce-4c58-af83-a208846c0030");
pub const IID_IServiceSynchronizationConfig = &IID_IServiceSynchronizationConfig_Value;
pub const IServiceSynchronizationConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConfigureSynchronization: *const fn (
            self: *const IServiceSynchronizationConfig,
            synch_config: CSC_SynchronizationConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn configureSynchronization(self: *const T, synch_config_: CSC_SynchronizationConfig) HRESULT {
                return @as(*const IServiceSynchronizationConfig.VTable, @ptrCast(self.vtable)).ConfigureSynchronization(@as(*const IServiceSynchronizationConfig, @ptrCast(self)), synch_config_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceTrackerConfig_Value = Guid.initString("6c3a3e1d-0ba6-4036-b76f-d0404db816c9");
pub const IID_IServiceTrackerConfig = &IID_IServiceTrackerConfig_Value;
pub const IServiceTrackerConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TrackerConfig: *const fn (
            self: *const IServiceTrackerConfig,
            tracker_config: CSC_TrackerConfig,
            sz_tracker_app_name: ?[*:0]const u16,
            sz_tracker_ctx_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn trackerConfig(self: *const T, tracker_config_: CSC_TrackerConfig, sz_tracker_app_name_: ?[*:0]const u16, sz_tracker_ctx_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IServiceTrackerConfig.VTable, @ptrCast(self.vtable)).TrackerConfig(@as(*const IServiceTrackerConfig, @ptrCast(self)), tracker_config_, sz_tracker_app_name_, sz_tracker_ctx_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServicePartitionConfig_Value = Guid.initString("80182d03-5ea4-4831-ae97-55beffc2e590");
pub const IID_IServicePartitionConfig = &IID_IServicePartitionConfig_Value;
pub const IServicePartitionConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PartitionConfig: *const fn (
            self: *const IServicePartitionConfig,
            partition_config: CSC_PartitionConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PartitionID: *const fn (
            self: *const IServicePartitionConfig,
            guid_partition_i_d: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn partitionConfig(self: *const T, partition_config_: CSC_PartitionConfig) HRESULT {
                return @as(*const IServicePartitionConfig.VTable, @ptrCast(self.vtable)).PartitionConfig(@as(*const IServicePartitionConfig, @ptrCast(self)), partition_config_);
            }
            pub inline fn partitionID(self: *const T, guid_partition_i_d_: ?*const Guid) HRESULT {
                return @as(*const IServicePartitionConfig.VTable, @ptrCast(self.vtable)).PartitionID(@as(*const IServicePartitionConfig, @ptrCast(self)), guid_partition_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceCall_Value = Guid.initString("bd3e2e12-42dd-40f4-a09a-95a50c58304b");
pub const IID_IServiceCall = &IID_IServiceCall_Value;
pub const IServiceCall = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCall: *const fn (
            self: *const IServiceCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onCall(self: *const T) HRESULT {
                return @as(*const IServiceCall.VTable, @ptrCast(self.vtable)).OnCall(@as(*const IServiceCall, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IAsyncErrorNotify_Value = Guid.initString("fe6777fb-a674-4177-8f32-6d707e113484");
pub const IID_IAsyncErrorNotify = &IID_IAsyncErrorNotify_Value;
pub const IAsyncErrorNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnError: *const fn (
            self: *const IAsyncErrorNotify,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onError(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const IAsyncErrorNotify.VTable, @ptrCast(self.vtable)).OnError(@as(*const IAsyncErrorNotify, @ptrCast(self)), hr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServiceActivity_Value = Guid.initString("67532e0c-9e2f-4450-a354-035633944e17");
pub const IID_IServiceActivity = &IID_IServiceActivity_Value;
pub const IServiceActivity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SynchronousCall: *const fn (
            self: *const IServiceActivity,
            p_i_service_call: ?*IServiceCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsynchronousCall: *const fn (
            self: *const IServiceActivity,
            p_i_service_call: ?*IServiceCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToCurrentThread: *const fn (
            self: *const IServiceActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnbindFromThread: *const fn (
            self: *const IServiceActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn synchronousCall(self: *const T, p_i_service_call_: ?*IServiceCall) HRESULT {
                return @as(*const IServiceActivity.VTable, @ptrCast(self.vtable)).SynchronousCall(@as(*const IServiceActivity, @ptrCast(self)), p_i_service_call_);
            }
            pub inline fn asynchronousCall(self: *const T, p_i_service_call_: ?*IServiceCall) HRESULT {
                return @as(*const IServiceActivity.VTable, @ptrCast(self.vtable)).AsynchronousCall(@as(*const IServiceActivity, @ptrCast(self)), p_i_service_call_);
            }
            pub inline fn bindToCurrentThread(self: *const T) HRESULT {
                return @as(*const IServiceActivity.VTable, @ptrCast(self.vtable)).BindToCurrentThread(@as(*const IServiceActivity, @ptrCast(self)));
            }
            pub inline fn unbindFromThread(self: *const T) HRESULT {
                return @as(*const IServiceActivity.VTable, @ptrCast(self.vtable)).UnbindFromThread(@as(*const IServiceActivity, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IThreadPoolKnobs_Value = Guid.initString("51372af7-cae7-11cf-be81-00aa00a2fa25");
pub const IID_IThreadPoolKnobs = &IID_IThreadPoolKnobs_Value;
pub const IThreadPoolKnobs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMaxThreads: *const fn (
            self: *const IThreadPoolKnobs,
            plc_max_threads: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentThreads: *const fn (
            self: *const IThreadPoolKnobs,
            plc_current_threads: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxThreads: *const fn (
            self: *const IThreadPoolKnobs,
            lc_max_threads: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeleteDelay: *const fn (
            self: *const IThreadPoolKnobs,
            pmsec_delete_delay: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDeleteDelay: *const fn (
            self: *const IThreadPoolKnobs,
            msec_delete_delay: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxQueuedRequests: *const fn (
            self: *const IThreadPoolKnobs,
            plc_max_queued_requests: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentQueuedRequests: *const fn (
            self: *const IThreadPoolKnobs,
            plc_current_queued_requests: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxQueuedRequests: *const fn (
            self: *const IThreadPoolKnobs,
            lc_max_queued_requests: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMinThreads: *const fn (
            self: *const IThreadPoolKnobs,
            lc_min_threads: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetQueueDepth: *const fn (
            self: *const IThreadPoolKnobs,
            lc_queue_depth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMaxThreads(self: *const T, plc_max_threads_: ?*i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetMaxThreads(@as(*const IThreadPoolKnobs, @ptrCast(self)), plc_max_threads_);
            }
            pub inline fn getCurrentThreads(self: *const T, plc_current_threads_: ?*i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetCurrentThreads(@as(*const IThreadPoolKnobs, @ptrCast(self)), plc_current_threads_);
            }
            pub inline fn setMaxThreads(self: *const T, lc_max_threads_: i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetMaxThreads(@as(*const IThreadPoolKnobs, @ptrCast(self)), lc_max_threads_);
            }
            pub inline fn getDeleteDelay(self: *const T, pmsec_delete_delay_: ?*i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetDeleteDelay(@as(*const IThreadPoolKnobs, @ptrCast(self)), pmsec_delete_delay_);
            }
            pub inline fn setDeleteDelay(self: *const T, msec_delete_delay_: i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetDeleteDelay(@as(*const IThreadPoolKnobs, @ptrCast(self)), msec_delete_delay_);
            }
            pub inline fn getMaxQueuedRequests(self: *const T, plc_max_queued_requests_: ?*i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetMaxQueuedRequests(@as(*const IThreadPoolKnobs, @ptrCast(self)), plc_max_queued_requests_);
            }
            pub inline fn getCurrentQueuedRequests(self: *const T, plc_current_queued_requests_: ?*i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetCurrentQueuedRequests(@as(*const IThreadPoolKnobs, @ptrCast(self)), plc_current_queued_requests_);
            }
            pub inline fn setMaxQueuedRequests(self: *const T, lc_max_queued_requests_: i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetMaxQueuedRequests(@as(*const IThreadPoolKnobs, @ptrCast(self)), lc_max_queued_requests_);
            }
            pub inline fn setMinThreads(self: *const T, lc_min_threads_: i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetMinThreads(@as(*const IThreadPoolKnobs, @ptrCast(self)), lc_min_threads_);
            }
            pub inline fn setQueueDepth(self: *const T, lc_queue_depth_: i32) HRESULT {
                return @as(*const IThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetQueueDepth(@as(*const IThreadPoolKnobs, @ptrCast(self)), lc_queue_depth_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IComStaThreadPoolKnobs_Value = Guid.initString("324b64fa-33b6-11d2-98b7-00c04f8ee1c4");
pub const IID_IComStaThreadPoolKnobs = &IID_IComStaThreadPoolKnobs_Value;
pub const IComStaThreadPoolKnobs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMinThreadCount: *const fn (
            self: *const IComStaThreadPoolKnobs,
            min_threads: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMinThreadCount: *const fn (
            self: *const IComStaThreadPoolKnobs,
            min_threads: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxThreadCount: *const fn (
            self: *const IComStaThreadPoolKnobs,
            max_threads: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxThreadCount: *const fn (
            self: *const IComStaThreadPoolKnobs,
            max_threads: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivityPerThread: *const fn (
            self: *const IComStaThreadPoolKnobs,
            activities_per_thread: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActivityPerThread: *const fn (
            self: *const IComStaThreadPoolKnobs,
            activities_per_thread: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivityRatio: *const fn (
            self: *const IComStaThreadPoolKnobs,
            activity_ratio: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActivityRatio: *const fn (
            self: *const IComStaThreadPoolKnobs,
            activity_ratio: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThreadCount: *const fn (
            self: *const IComStaThreadPoolKnobs,
            pdw_threads: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQueueDepth: *const fn (
            self: *const IComStaThreadPoolKnobs,
            pdw_q_depth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetQueueDepth: *const fn (
            self: *const IComStaThreadPoolKnobs,
            dw_q_depth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setMinThreadCount(self: *const T, min_threads_: u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetMinThreadCount(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), min_threads_);
            }
            pub inline fn getMinThreadCount(self: *const T, min_threads_: ?*u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetMinThreadCount(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), min_threads_);
            }
            pub inline fn setMaxThreadCount(self: *const T, max_threads_: u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetMaxThreadCount(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), max_threads_);
            }
            pub inline fn getMaxThreadCount(self: *const T, max_threads_: ?*u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetMaxThreadCount(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), max_threads_);
            }
            pub inline fn setActivityPerThread(self: *const T, activities_per_thread_: u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetActivityPerThread(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), activities_per_thread_);
            }
            pub inline fn getActivityPerThread(self: *const T, activities_per_thread_: ?*u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetActivityPerThread(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), activities_per_thread_);
            }
            pub inline fn setActivityRatio(self: *const T, activity_ratio_: f64) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetActivityRatio(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), activity_ratio_);
            }
            pub inline fn getActivityRatio(self: *const T, activity_ratio_: ?*f64) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetActivityRatio(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), activity_ratio_);
            }
            pub inline fn getThreadCount(self: *const T, pdw_threads_: ?*u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetThreadCount(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), pdw_threads_);
            }
            pub inline fn getQueueDepth(self: *const T, pdw_q_depth_: ?*u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).GetQueueDepth(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), pdw_q_depth_);
            }
            pub inline fn setQueueDepth(self: *const T, dw_q_depth_: i32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).SetQueueDepth(@as(*const IComStaThreadPoolKnobs, @ptrCast(self)), dw_q_depth_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IComMtaThreadPoolKnobs_Value = Guid.initString("f9a76d2e-76a5-43eb-a0c4-49bec8e48480");
pub const IID_IComMtaThreadPoolKnobs = &IID_IComMtaThreadPoolKnobs_Value;
pub const IComMtaThreadPoolKnobs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MTASetMaxThreadCount: *const fn (
            self: *const IComMtaThreadPoolKnobs,
            dw_max_threads: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MTAGetMaxThreadCount: *const fn (
            self: *const IComMtaThreadPoolKnobs,
            pdw_max_threads: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MTASetThrottleValue: *const fn (
            self: *const IComMtaThreadPoolKnobs,
            dw_throttle: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MTAGetThrottleValue: *const fn (
            self: *const IComMtaThreadPoolKnobs,
            pdw_throttle: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn mtaSetMaxThreadCount(self: *const T, dw_max_threads_: u32) HRESULT {
                return @as(*const IComMtaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).MTASetMaxThreadCount(@as(*const IComMtaThreadPoolKnobs, @ptrCast(self)), dw_max_threads_);
            }
            pub inline fn mtaGetMaxThreadCount(self: *const T, pdw_max_threads_: ?*u32) HRESULT {
                return @as(*const IComMtaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).MTAGetMaxThreadCount(@as(*const IComMtaThreadPoolKnobs, @ptrCast(self)), pdw_max_threads_);
            }
            pub inline fn mtaSetThrottleValue(self: *const T, dw_throttle_: u32) HRESULT {
                return @as(*const IComMtaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).MTASetThrottleValue(@as(*const IComMtaThreadPoolKnobs, @ptrCast(self)), dw_throttle_);
            }
            pub inline fn mtaGetThrottleValue(self: *const T, pdw_throttle_: ?*u32) HRESULT {
                return @as(*const IComMtaThreadPoolKnobs.VTable, @ptrCast(self.vtable)).MTAGetThrottleValue(@as(*const IComMtaThreadPoolKnobs, @ptrCast(self)), pdw_throttle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IComStaThreadPoolKnobs2_Value = Guid.initString("73707523-ff9a-4974-bf84-2108dc213740");
pub const IID_IComStaThreadPoolKnobs2 = &IID_IComStaThreadPoolKnobs2_Value;
pub const IComStaThreadPoolKnobs2 = extern struct {
    pub const VTable = extern struct {
        base: IComStaThreadPoolKnobs.VTable,
        GetMaxCPULoad: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            pdw_load: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxCPULoad: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            pdw_load: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCPUMetricEnabled: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            pb_metric_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCPUMetricEnabled: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            b_metric_enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreateThreadsAggressively: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            pb_metric_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreateThreadsAggressively: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            b_metric_enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxCSR: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            pdw_c_s_r: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxCSR: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            dw_c_s_r: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWaitTimeForThreadCleanup: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            pdw_thread_cleanup_wait_time: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWaitTimeForThreadCleanup: *const fn (
            self: *const IComStaThreadPoolKnobs2,
            dw_thread_cleanup_wait_time: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IComStaThreadPoolKnobs.MethodMixin(T);
            pub inline fn getMaxCPULoad(self: *const T, pdw_load_: ?*u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).GetMaxCPULoad(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), pdw_load_);
            }
            pub inline fn setMaxCPULoad(self: *const T, pdw_load_: i32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).SetMaxCPULoad(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), pdw_load_);
            }
            pub inline fn getCPUMetricEnabled(self: *const T, pb_metric_enabled_: ?*BOOL) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).GetCPUMetricEnabled(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), pb_metric_enabled_);
            }
            pub inline fn setCPUMetricEnabled(self: *const T, b_metric_enabled_: BOOL) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).SetCPUMetricEnabled(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), b_metric_enabled_);
            }
            pub inline fn getCreateThreadsAggressively(self: *const T, pb_metric_enabled_: ?*BOOL) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).GetCreateThreadsAggressively(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), pb_metric_enabled_);
            }
            pub inline fn setCreateThreadsAggressively(self: *const T, b_metric_enabled_: BOOL) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).SetCreateThreadsAggressively(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), b_metric_enabled_);
            }
            pub inline fn getMaxCSR(self: *const T, pdw_c_s_r_: ?*u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).GetMaxCSR(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), pdw_c_s_r_);
            }
            pub inline fn setMaxCSR(self: *const T, dw_c_s_r_: i32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).SetMaxCSR(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), dw_c_s_r_);
            }
            pub inline fn getWaitTimeForThreadCleanup(self: *const T, pdw_thread_cleanup_wait_time_: ?*u32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).GetWaitTimeForThreadCleanup(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), pdw_thread_cleanup_wait_time_);
            }
            pub inline fn setWaitTimeForThreadCleanup(self: *const T, dw_thread_cleanup_wait_time_: i32) HRESULT {
                return @as(*const IComStaThreadPoolKnobs2.VTable, @ptrCast(self.vtable)).SetWaitTimeForThreadCleanup(@as(*const IComStaThreadPoolKnobs2, @ptrCast(self)), dw_thread_cleanup_wait_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IProcessInitializer_Value = Guid.initString("1113f52d-dc7f-4943-aed6-88d04027e32a");
pub const IID_IProcessInitializer = &IID_IProcessInitializer_Value;
pub const IProcessInitializer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Startup: *const fn (
            self: *const IProcessInitializer,
            punk_process_control: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const IProcessInitializer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startup(self: *const T, punk_process_control_: ?*IUnknown) HRESULT {
                return @as(*const IProcessInitializer.VTable, @ptrCast(self.vtable)).Startup(@as(*const IProcessInitializer, @ptrCast(self)), punk_process_control_);
            }
            pub inline fn shutdown(self: *const T) HRESULT {
                return @as(*const IProcessInitializer.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const IProcessInitializer, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IServicePoolConfig_Value = Guid.initString("a9690656-5bca-470c-8451-250c1f43a33e");
pub const IID_IServicePoolConfig = &IID_IServicePoolConfig_Value;
pub const IServicePoolConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxPoolSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            dw_max_pool: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxPoolSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            pdw_max_pool: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinPoolSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            dw_min_pool: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinPoolSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            pdw_min_pool: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CreationTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            dw_creation_timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreationTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            pdw_creation_timeout: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TransactionAffinity: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            f_tx_affinity: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionAffinity: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            pf_tx_affinity: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClassFactory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            p_factory: ?*IClassFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClassFactory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IServicePoolConfig,
            p_factory: ?*?*IClassFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn putMaxPoolSize(self: *const T, dw_max_pool_: u32) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).put_MaxPoolSize(@as(*const IServicePoolConfig, @ptrCast(self)), dw_max_pool_);
            }
            pub inline fn getMaxPoolSize(self: *const T, pdw_max_pool_: ?*u32) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).get_MaxPoolSize(@as(*const IServicePoolConfig, @ptrCast(self)), pdw_max_pool_);
            }
            pub inline fn putMinPoolSize(self: *const T, dw_min_pool_: u32) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).put_MinPoolSize(@as(*const IServicePoolConfig, @ptrCast(self)), dw_min_pool_);
            }
            pub inline fn getMinPoolSize(self: *const T, pdw_min_pool_: ?*u32) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).get_MinPoolSize(@as(*const IServicePoolConfig, @ptrCast(self)), pdw_min_pool_);
            }
            pub inline fn putCreationTimeout(self: *const T, dw_creation_timeout_: u32) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).put_CreationTimeout(@as(*const IServicePoolConfig, @ptrCast(self)), dw_creation_timeout_);
            }
            pub inline fn getCreationTimeout(self: *const T, pdw_creation_timeout_: ?*u32) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).get_CreationTimeout(@as(*const IServicePoolConfig, @ptrCast(self)), pdw_creation_timeout_);
            }
            pub inline fn putTransactionAffinity(self: *const T, f_tx_affinity_: BOOL) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).put_TransactionAffinity(@as(*const IServicePoolConfig, @ptrCast(self)), f_tx_affinity_);
            }
            pub inline fn getTransactionAffinity(self: *const T, pf_tx_affinity_: ?*BOOL) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).get_TransactionAffinity(@as(*const IServicePoolConfig, @ptrCast(self)), pf_tx_affinity_);
            }
            pub inline fn putClassFactory(self: *const T, p_factory_: ?*IClassFactory) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).put_ClassFactory(@as(*const IServicePoolConfig, @ptrCast(self)), p_factory_);
            }
            pub inline fn getClassFactory(self: *const T, p_factory_: ?*?*IClassFactory) HRESULT {
                return @as(*const IServicePoolConfig.VTable, @ptrCast(self.vtable)).get_ClassFactory(@as(*const IServicePoolConfig, @ptrCast(self)), p_factory_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IServicePool_Value = Guid.initString("b302df81-ea45-451e-99a2-09f9fd1b1e13");
pub const IID_IServicePool = &IID_IServicePool_Value;
pub const IServicePool = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IServicePool,
            p_pool_config: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn (
            self: *const IServicePool,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const IServicePool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_pool_config_: ?*IUnknown) HRESULT {
                return @as(*const IServicePool.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IServicePool, @ptrCast(self)), p_pool_config_);
            }
            pub inline fn getObject(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IServicePool.VTable, @ptrCast(self.vtable)).GetObject(@as(*const IServicePool, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn shutdown(self: *const T) HRESULT {
                return @as(*const IServicePool.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const IServicePool, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IManagedPooledObj_Value = Guid.initString("c5da4bea-1b42-4437-8926-b6a38860a770");
pub const IID_IManagedPooledObj = &IID_IManagedPooledObj_Value;
pub const IManagedPooledObj = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetHeld: *const fn (
            self: *const IManagedPooledObj,
            m_b_held: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setHeld(self: *const T, m_b_held_: BOOL) HRESULT {
                return @as(*const IManagedPooledObj.VTable, @ptrCast(self.vtable)).SetHeld(@as(*const IManagedPooledObj, @ptrCast(self)), m_b_held_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IManagedPoolAction_Value = Guid.initString("da91b74e-5388-4783-949d-c1cd5fb00506");
pub const IID_IManagedPoolAction = &IID_IManagedPoolAction_Value;
pub const IManagedPoolAction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LastRelease: *const fn (
            self: *const IManagedPoolAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn lastRelease(self: *const T) HRESULT {
                return @as(*const IManagedPoolAction.VTable, @ptrCast(self.vtable)).LastRelease(@as(*const IManagedPoolAction, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IManagedObjectInfo_Value = Guid.initString("1427c51a-4584-49d8-90a0-c50d8086cbe9");
pub const IID_IManagedObjectInfo = &IID_IManagedObjectInfo_Value;
pub const IManagedObjectInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIUnknown: *const fn (
            self: *const IManagedObjectInfo,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIObjectControl: *const fn (
            self: *const IManagedObjectInfo,
            p_ctrl: ?*?*IObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInPool: *const fn (
            self: *const IManagedObjectInfo,
            b_in_pool: BOOL,
            p_pooled_obj: ?*IManagedPooledObj,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWrapperStrength: *const fn (
            self: *const IManagedObjectInfo,
            b_strong: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIUnknown(self: *const T, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IManagedObjectInfo.VTable, @ptrCast(self.vtable)).GetIUnknown(@as(*const IManagedObjectInfo, @ptrCast(self)), p_unk_);
            }
            pub inline fn getIObjectControl(self: *const T, p_ctrl_: ?*?*IObjectControl) HRESULT {
                return @as(*const IManagedObjectInfo.VTable, @ptrCast(self.vtable)).GetIObjectControl(@as(*const IManagedObjectInfo, @ptrCast(self)), p_ctrl_);
            }
            pub inline fn setInPool(self: *const T, b_in_pool_: BOOL, p_pooled_obj_: ?*IManagedPooledObj) HRESULT {
                return @as(*const IManagedObjectInfo.VTable, @ptrCast(self.vtable)).SetInPool(@as(*const IManagedObjectInfo, @ptrCast(self)), b_in_pool_, p_pooled_obj_);
            }
            pub inline fn setWrapperStrength(self: *const T, b_strong_: BOOL) HRESULT {
                return @as(*const IManagedObjectInfo.VTable, @ptrCast(self.vtable)).SetWrapperStrength(@as(*const IManagedObjectInfo, @ptrCast(self)), b_strong_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IAppDomainHelper_Value = Guid.initString("c7b67079-8255-42c6-9ec0-6994a3548780");
pub const IID_IAppDomainHelper = &IID_IAppDomainHelper_Value;
pub const IAppDomainHelper = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IAppDomainHelper,
            p_unk_a_d: ?*IUnknown,
            ___m_i_d_l___i_app_domain_helper0000: isize,
            p_pool: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoCallback: *const fn (
            self: *const IAppDomainHelper,
            p_unk_a_d: ?*IUnknown,
            ___m_i_d_l___i_app_domain_helper0001: isize,
            p_pool: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_unk_a_d_: ?*IUnknown, ___m_i_d_l___i_app_domain_helper0000_: isize, p_pool_: ?*anyopaque) HRESULT {
                return @as(*const IAppDomainHelper.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IAppDomainHelper, @ptrCast(self)), p_unk_a_d_, ___m_i_d_l___i_app_domain_helper0000_, p_pool_);
            }
            pub inline fn doCallback(self: *const T, p_unk_a_d_: ?*IUnknown, ___m_i_d_l___i_app_domain_helper0001_: isize, p_pool_: ?*anyopaque) HRESULT {
                return @as(*const IAppDomainHelper.VTable, @ptrCast(self.vtable)).DoCallback(@as(*const IAppDomainHelper, @ptrCast(self)), p_unk_a_d_, ___m_i_d_l___i_app_domain_helper0001_, p_pool_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IAssemblyLocator_Value = Guid.initString("391ffbb9-a8ee-432a-abc8-baa238dab90f");
pub const IID_IAssemblyLocator = &IID_IAssemblyLocator_Value;
pub const IAssemblyLocator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetModules: *const fn (
            self: *const IAssemblyLocator,
            application_dir: ?BSTR,
            application_name: ?BSTR,
            assembly_name: ?BSTR,
            p_modules: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getModules(self: *const T, application_dir_: ?BSTR, application_name_: ?BSTR, assembly_name_: ?BSTR, p_modules_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IAssemblyLocator.VTable, @ptrCast(self.vtable)).GetModules(@as(*const IAssemblyLocator, @ptrCast(self)), application_dir_, application_name_, assembly_name_, p_modules_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IManagedActivationEvents_Value = Guid.initString("a5f325af-572f-46da-b8ab-827c3d95d99e");
pub const IID_IManagedActivationEvents = &IID_IManagedActivationEvents_Value;
pub const IManagedActivationEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateManagedStub: *const fn (
            self: *const IManagedActivationEvents,
            p_info: ?*IManagedObjectInfo,
            f_dist: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyManagedStub: *const fn (
            self: *const IManagedActivationEvents,
            p_info: ?*IManagedObjectInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createManagedStub(self: *const T, p_info_: ?*IManagedObjectInfo, f_dist_: BOOL) HRESULT {
                return @as(*const IManagedActivationEvents.VTable, @ptrCast(self.vtable)).CreateManagedStub(@as(*const IManagedActivationEvents, @ptrCast(self)), p_info_, f_dist_);
            }
            pub inline fn destroyManagedStub(self: *const T, p_info_: ?*IManagedObjectInfo) HRESULT {
                return @as(*const IManagedActivationEvents.VTable, @ptrCast(self.vtable)).DestroyManagedStub(@as(*const IManagedActivationEvents, @ptrCast(self)), p_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISendMethodEvents_Value = Guid.initString("2732fd59-b2b4-4d44-878c-8b8f09626008");
pub const IID_ISendMethodEvents = &IID_ISendMethodEvents_Value;
pub const ISendMethodEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SendMethodCall: *const fn (
            self: *const ISendMethodEvents,
            p_identity: ?*const anyopaque,
            riid: ?*const Guid,
            dw_meth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMethodReturn: *const fn (
            self: *const ISendMethodEvents,
            p_identity: ?*const anyopaque,
            riid: ?*const Guid,
            dw_meth: u32,
            hr_call: HRESULT,
            hr_server: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn sendMethodCall(self: *const T, p_identity_: ?*const anyopaque, riid_: ?*const Guid, dw_meth_: u32) HRESULT {
                return @as(*const ISendMethodEvents.VTable, @ptrCast(self.vtable)).SendMethodCall(@as(*const ISendMethodEvents, @ptrCast(self)), p_identity_, riid_, dw_meth_);
            }
            pub inline fn sendMethodReturn(self: *const T, p_identity_: ?*const anyopaque, riid_: ?*const Guid, dw_meth_: u32, hr_call_: HRESULT, hr_server_: HRESULT) HRESULT {
                return @as(*const ISendMethodEvents.VTable, @ptrCast(self.vtable)).SendMethodReturn(@as(*const ISendMethodEvents, @ptrCast(self)), p_identity_, riid_, dw_meth_, hr_call_, hr_server_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ITransactionResourcePool_Value = Guid.initString("c5feb7c1-346a-11d1-b1cc-00aa00ba3258");
pub const IID_ITransactionResourcePool = &IID_ITransactionResourcePool_Value;
pub const ITransactionResourcePool = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PutResource: *const fn (
            self: *const ITransactionResourcePool,
            p_pool: ?*IObjPool,
            p_unk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResource: *const fn (
            self: *const ITransactionResourcePool,
            p_pool: ?*IObjPool,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn putResource(self: *const T, p_pool_: ?*IObjPool, p_unk_: ?*IUnknown) HRESULT {
                return @as(*const ITransactionResourcePool.VTable, @ptrCast(self.vtable)).PutResource(@as(*const ITransactionResourcePool, @ptrCast(self)), p_pool_, p_unk_);
            }
            pub inline fn getResource(self: *const T, p_pool_: ?*IObjPool, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ITransactionResourcePool.VTable, @ptrCast(self.vtable)).GetResource(@as(*const ITransactionResourcePool, @ptrCast(self)), p_pool_, pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IMTSCall_Value = Guid.initString("51372aef-cae7-11cf-be81-00aa00a2fa25");
pub const IID_IMTSCall = &IID_IMTSCall_Value;
pub const IMTSCall = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCall: *const fn (
            self: *const IMTSCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onCall(self: *const T) HRESULT {
                return @as(*const IMTSCall.VTable, @ptrCast(self.vtable)).OnCall(@as(*const IMTSCall, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IContextProperties_Value = Guid.initString("d396da85-bf8f-11d1-bbae-00c04fc2fa5f");
pub const IID_IContextProperties = &IID_IContextProperties_Value;
pub const IContextProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Count: *const fn (
            self: *const IContextProperties,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IContextProperties,
            name: ?BSTR,
            p_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumNames: *const fn (
            self: *const IContextProperties,
            ppenum: ?*?*IEnumNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IContextProperties,
            name: ?BSTR,
            property: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveProperty: *const fn (
            self: *const IContextProperties,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn count(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IContextProperties.VTable, @ptrCast(self.vtable)).Count(@as(*const IContextProperties, @ptrCast(self)), pl_count_);
            }
            pub inline fn getProperty(self: *const T, name_: ?BSTR, p_property_: ?*VARIANT) HRESULT {
                return @as(*const IContextProperties.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IContextProperties, @ptrCast(self)), name_, p_property_);
            }
            pub inline fn enumNames(self: *const T, ppenum_: ?*?*IEnumNames) HRESULT {
                return @as(*const IContextProperties.VTable, @ptrCast(self.vtable)).EnumNames(@as(*const IContextProperties, @ptrCast(self)), ppenum_);
            }
            pub inline fn setProperty(self: *const T, name_: ?BSTR, property_: VARIANT) HRESULT {
                return @as(*const IContextProperties.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IContextProperties, @ptrCast(self)), name_, property_);
            }
            pub inline fn removeProperty(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IContextProperties.VTable, @ptrCast(self.vtable)).RemoveProperty(@as(*const IContextProperties, @ptrCast(self)), name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IObjPool_Value = Guid.initString("7d8805a0-2ea7-11d1-b1cc-00aa00ba3258");
pub const IID_IObjPool = &IID_IObjPool_Value;
pub const IObjPool = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reserved1: *const fn (
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved2: *const fn (
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved3: *const fn (
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved4: *const fn (
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PutEndTx: *const fn (
            self: *const IObjPool,
            p_obj: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved5: *const fn (
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved6: *const fn (
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reserved1(self: *const T) void {
                return @as(*const IObjPool.VTable, @ptrCast(self.vtable)).Reserved1(@as(*const IObjPool, @ptrCast(self)));
            }
            pub inline fn reserved2(self: *const T) void {
                return @as(*const IObjPool.VTable, @ptrCast(self.vtable)).Reserved2(@as(*const IObjPool, @ptrCast(self)));
            }
            pub inline fn reserved3(self: *const T) void {
                return @as(*const IObjPool.VTable, @ptrCast(self.vtable)).Reserved3(@as(*const IObjPool, @ptrCast(self)));
            }
            pub inline fn reserved4(self: *const T) void {
                return @as(*const IObjPool.VTable, @ptrCast(self.vtable)).Reserved4(@as(*const IObjPool, @ptrCast(self)));
            }
            pub inline fn putEndTx(self: *const T, p_obj_: ?*IUnknown) void {
                return @as(*const IObjPool.VTable, @ptrCast(self.vtable)).PutEndTx(@as(*const IObjPool, @ptrCast(self)), p_obj_);
            }
            pub inline fn reserved5(self: *const T) void {
                return @as(*const IObjPool.VTable, @ptrCast(self.vtable)).Reserved5(@as(*const IObjPool, @ptrCast(self)));
            }
            pub inline fn reserved6(self: *const T) void {
                return @as(*const IObjPool.VTable, @ptrCast(self.vtable)).Reserved6(@as(*const IObjPool, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ITransactionProperty_Value = Guid.initString("788ea814-87b1-11d1-bba6-00c04fc2fa5f");
pub const IID_ITransactionProperty = &IID_ITransactionProperty_Value;
pub const ITransactionProperty = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reserved1: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved2: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved3: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved4: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved5: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved6: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved7: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved8: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved9: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTransactionResourcePool: *const fn (
            self: *const ITransactionProperty,
            pp_tx_pool: ?*?*ITransactionResourcePool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reserved10: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved11: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved12: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved13: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved14: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved15: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved16: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved17: *const fn (
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reserved1(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved1(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved2(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved2(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved3(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved3(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved4(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved4(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved5(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved5(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved6(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved6(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved7(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved7(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved8(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved8(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved9(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved9(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn getTransactionResourcePool(self: *const T, pp_tx_pool_: ?*?*ITransactionResourcePool) HRESULT {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).GetTransactionResourcePool(@as(*const ITransactionProperty, @ptrCast(self)), pp_tx_pool_);
            }
            pub inline fn reserved10(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved10(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved11(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved11(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved12(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved12(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved13(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved13(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved14(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved14(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved15(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved15(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved16(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved16(@as(*const ITransactionProperty, @ptrCast(self)));
            }
            pub inline fn reserved17(self: *const T) void {
                return @as(*const ITransactionProperty.VTable, @ptrCast(self.vtable)).Reserved17(@as(*const ITransactionProperty, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IMTSActivity_Value = Guid.initString("51372af0-cae7-11cf-be81-00aa00a2fa25");
pub const IID_IMTSActivity = &IID_IMTSActivity_Value;
pub const IMTSActivity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SynchronousCall: *const fn (
            self: *const IMTSActivity,
            p_call: ?*IMTSCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncCall: *const fn (
            self: *const IMTSActivity,
            p_call: ?*IMTSCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reserved1: *const fn (
            self: *const IMTSActivity,
        ) callconv(@import("std").os.windows.WINAPI) void,
        BindToCurrentThread: *const fn (
            self: *const IMTSActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnbindFromThread: *const fn (
            self: *const IMTSActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn synchronousCall(self: *const T, p_call_: ?*IMTSCall) HRESULT {
                return @as(*const IMTSActivity.VTable, @ptrCast(self.vtable)).SynchronousCall(@as(*const IMTSActivity, @ptrCast(self)), p_call_);
            }
            pub inline fn asyncCall(self: *const T, p_call_: ?*IMTSCall) HRESULT {
                return @as(*const IMTSActivity.VTable, @ptrCast(self.vtable)).AsyncCall(@as(*const IMTSActivity, @ptrCast(self)), p_call_);
            }
            pub inline fn reserved1(self: *const T) void {
                return @as(*const IMTSActivity.VTable, @ptrCast(self.vtable)).Reserved1(@as(*const IMTSActivity, @ptrCast(self)));
            }
            pub inline fn bindToCurrentThread(self: *const T) HRESULT {
                return @as(*const IMTSActivity.VTable, @ptrCast(self.vtable)).BindToCurrentThread(@as(*const IMTSActivity, @ptrCast(self)));
            }
            pub inline fn unbindFromThread(self: *const T) HRESULT {
                return @as(*const IMTSActivity.VTable, @ptrCast(self.vtable)).UnbindFromThread(@as(*const IMTSActivity, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AutoSvcs_Error_Constants = enum(u32) {
    mtsErrCtxAborted = 2147803138,
    mtsErrCtxAborting = 2147803139,
    mtsErrCtxNoContext = 2147803140,
    mtsErrCtxNotRegistered = 2147803141,
    mtsErrCtxSynchTimeout = 2147803142,
    mtsErrCtxOldReference = 2147803143,
    mtsErrCtxRoleNotFound = 2147803148,
    mtsErrCtxNoSecurity = 2147803149,
    mtsErrCtxWrongThread = 2147803150,
    mtsErrCtxTMNotAvailable = 2147803151,
    comQCErrApplicationNotQueued = 2148599296,
    comQCErrNoQueueableInterfaces = 2148599297,
    comQCErrQueuingServiceNotAvailable = 2148599298,
    comQCErrQueueTransactMismatch = 2148599299,
    comqcErrRecorderMarshalled = 2148599300,
    comqcErrOutParam = 2148599301,
    comqcErrRecorderNotTrusted = 2148599302,
    comqcErrPSLoad = 2148599303,
    comqcErrMarshaledObjSameTxn = 2148599304,
    comqcErrInvalidMessage = 2148599376,
    comqcErrMsmqSidUnavailable = 2148599377,
    comqcErrWrongMsgExtension = 2148599378,
    comqcErrMsmqServiceUnavailable = 2148599379,
    comqcErrMsgNotAuthenticated = 2148599380,
    comqcErrMsmqConnectorUsed = 2148599381,
    comqcErrBadMarshaledObject = 2148599382,
};
pub const mtsErrCtxAborted = AutoSvcs_Error_Constants.mtsErrCtxAborted;
pub const mtsErrCtxAborting = AutoSvcs_Error_Constants.mtsErrCtxAborting;
pub const mtsErrCtxNoContext = AutoSvcs_Error_Constants.mtsErrCtxNoContext;
pub const mtsErrCtxNotRegistered = AutoSvcs_Error_Constants.mtsErrCtxNotRegistered;
pub const mtsErrCtxSynchTimeout = AutoSvcs_Error_Constants.mtsErrCtxSynchTimeout;
pub const mtsErrCtxOldReference = AutoSvcs_Error_Constants.mtsErrCtxOldReference;
pub const mtsErrCtxRoleNotFound = AutoSvcs_Error_Constants.mtsErrCtxRoleNotFound;
pub const mtsErrCtxNoSecurity = AutoSvcs_Error_Constants.mtsErrCtxNoSecurity;
pub const mtsErrCtxWrongThread = AutoSvcs_Error_Constants.mtsErrCtxWrongThread;
pub const mtsErrCtxTMNotAvailable = AutoSvcs_Error_Constants.mtsErrCtxTMNotAvailable;
pub const comQCErrApplicationNotQueued = AutoSvcs_Error_Constants.comQCErrApplicationNotQueued;
pub const comQCErrNoQueueableInterfaces = AutoSvcs_Error_Constants.comQCErrNoQueueableInterfaces;
pub const comQCErrQueuingServiceNotAvailable = AutoSvcs_Error_Constants.comQCErrQueuingServiceNotAvailable;
pub const comQCErrQueueTransactMismatch = AutoSvcs_Error_Constants.comQCErrQueueTransactMismatch;
pub const comqcErrRecorderMarshalled = AutoSvcs_Error_Constants.comqcErrRecorderMarshalled;
pub const comqcErrOutParam = AutoSvcs_Error_Constants.comqcErrOutParam;
pub const comqcErrRecorderNotTrusted = AutoSvcs_Error_Constants.comqcErrRecorderNotTrusted;
pub const comqcErrPSLoad = AutoSvcs_Error_Constants.comqcErrPSLoad;
pub const comqcErrMarshaledObjSameTxn = AutoSvcs_Error_Constants.comqcErrMarshaledObjSameTxn;
pub const comqcErrInvalidMessage = AutoSvcs_Error_Constants.comqcErrInvalidMessage;
pub const comqcErrMsmqSidUnavailable = AutoSvcs_Error_Constants.comqcErrMsmqSidUnavailable;
pub const comqcErrWrongMsgExtension = AutoSvcs_Error_Constants.comqcErrWrongMsgExtension;
pub const comqcErrMsmqServiceUnavailable = AutoSvcs_Error_Constants.comqcErrMsmqServiceUnavailable;
pub const comqcErrMsgNotAuthenticated = AutoSvcs_Error_Constants.comqcErrMsgNotAuthenticated;
pub const comqcErrMsmqConnectorUsed = AutoSvcs_Error_Constants.comqcErrMsmqConnectorUsed;
pub const comqcErrBadMarshaledObject = AutoSvcs_Error_Constants.comqcErrBadMarshaledObject;

pub const LockModes = enum(i32) {
    SetGet = 0,
    Method = 1,
};
pub const LockSetGet = LockModes.SetGet;
pub const LockMethod = LockModes.Method;

pub const ReleaseModes = enum(i32) {
    Standard = 0,
    Process = 1,
};
pub const Standard = ReleaseModes.Standard;
pub const Process = ReleaseModes.Process;

pub const CRMFLAGS = enum(i32) {
    FORGETTARGET = 1,
    WRITTENDURINGPREPARE = 2,
    WRITTENDURINGCOMMIT = 4,
    WRITTENDURINGABORT = 8,
    WRITTENDURINGRECOVERY = 16,
    WRITTENDURINGREPLAY = 32,
    REPLAYINPROGRESS = 64,
};
pub const CRMFLAG_FORGETTARGET = CRMFLAGS.FORGETTARGET;
pub const CRMFLAG_WRITTENDURINGPREPARE = CRMFLAGS.WRITTENDURINGPREPARE;
pub const CRMFLAG_WRITTENDURINGCOMMIT = CRMFLAGS.WRITTENDURINGCOMMIT;
pub const CRMFLAG_WRITTENDURINGABORT = CRMFLAGS.WRITTENDURINGABORT;
pub const CRMFLAG_WRITTENDURINGRECOVERY = CRMFLAGS.WRITTENDURINGRECOVERY;
pub const CRMFLAG_WRITTENDURINGREPLAY = CRMFLAGS.WRITTENDURINGREPLAY;
pub const CRMFLAG_REPLAYINPROGRESS = CRMFLAGS.REPLAYINPROGRESS;

pub const CRMREGFLAGS = enum(i32) {
    PREPAREPHASE = 1,
    COMMITPHASE = 2,
    ABORTPHASE = 4,
    ALLPHASES = 7,
    FAILIFINDOUBTSREMAIN = 16,
};
pub const CRMREGFLAG_PREPAREPHASE = CRMREGFLAGS.PREPAREPHASE;
pub const CRMREGFLAG_COMMITPHASE = CRMREGFLAGS.COMMITPHASE;
pub const CRMREGFLAG_ABORTPHASE = CRMREGFLAGS.ABORTPHASE;
pub const CRMREGFLAG_ALLPHASES = CRMREGFLAGS.ALLPHASES;
pub const CRMREGFLAG_FAILIFINDOUBTSREMAIN = CRMREGFLAGS.FAILIFINDOUBTSREMAIN;

//--------------------------------------------------------------------------------
// Section: Functions (9)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "ole32" fn CoGetDefaultContext(
    apt_type: APTTYPE,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comsvcs" fn CoCreateActivity(
    p_i_unknown: ?*IUnknown,
    riid: ?*const Guid,
    pp_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comsvcs" fn CoEnterServiceDomain(
    p_config_object: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comsvcs" fn CoLeaveServiceDomain(
    p_unk_status: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comsvcs" fn GetManagedExtensions(
    dw_exts: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comsvcs" fn SafeRef(
    rid: ?*const Guid,
    p_unk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comsvcs" fn RecycleSurrogate(
    l_reason_code: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "comsvcs" fn MTSCreateActivity(
    riid: ?*const Guid,
    ppobj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "mtxdm" fn GetDispenserManager(
    param0: ?*?*IDispenserManager,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (17)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const APTTYPE = @import("../system/com.zig").APTTYPE;
const BLOB = @import("../system/com.zig").BLOB;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HRESULT = @import("../foundation.zig").HRESULT;
const IClassFactory = @import("../system/com.zig").IClassFactory;
const IDispatch = @import("../system/com.zig").IDispatch;
const ITransaction = @import("../system/distributed_transaction_coordinator.zig").ITransaction;
const ITransactionVoterBallotAsync2 = @import("../system/distributed_transaction_coordinator.zig").ITransactionVoterBallotAsync2;
const ITransactionVoterNotifyAsync2 = @import("../system/distributed_transaction_coordinator.zig").ITransactionVoterNotifyAsync2;
const IUnknown = @import("../system/com.zig").IUnknown;
const PSID = @import("../foundation.zig").PSID;
const PWSTR = @import("../foundation.zig").PWSTR;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
