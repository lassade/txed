//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (32)
//--------------------------------------------------------------------------------
pub const SYNC_VERSION_FLAG_FROM_FEED = @as(u32, 1);
pub const SYNC_VERSION_FLAG_HAS_BY = @as(u32, 2);
pub const SYNC_SERIALIZE_REPLICA_KEY_MAP = @as(u32, 1);
pub const SYNC_FILTER_INFO_FLAG_ITEM_LIST = @as(u32, 1);
pub const SYNC_FILTER_INFO_FLAG_CHANGE_UNIT_LIST = @as(u32, 2);
pub const SYNC_FILTER_INFO_FLAG_CUSTOM = @as(u32, 4);
pub const SYNC_FILTER_INFO_COMBINED = @as(u32, 8);
pub const SYNC_CHANGE_FLAG_DELETED = @as(u32, 1);
pub const SYNC_CHANGE_FLAG_DOES_NOT_EXIST = @as(u32, 2);
pub const SYNC_CHANGE_FLAG_GHOST = @as(u32, 4);
pub const PKEY_PROVIDER_INSTANCEID = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 2 };
pub const PKEY_PROVIDER_CLSID = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 3 };
pub const PKEY_PROVIDER_CONFIGUI = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 4 };
pub const PKEY_PROVIDER_CONTENTTYPE = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 5 };
pub const PKEY_PROVIDER_CAPABILITIES = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 6 };
pub const PKEY_PROVIDER_SUPPORTED_ARCHITECTURE = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 7 };
pub const PKEY_PROVIDER_NAME = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 8 };
pub const PKEY_PROVIDER_DESCRIPTION = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 9 };
pub const PKEY_PROVIDER_TOOLTIPS = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 10 };
pub const PKEY_PROVIDER_ICON = PROPERTYKEY{ .fmtid = Guid.initString("84179e61-60f6-4c1c-88ed-f1c531b32bda"), .pid = 11 };
pub const PKEY_CONFIGUI_INSTANCEID = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 2 };
pub const PKEY_CONFIGUI_CLSID = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 3 };
pub const PKEY_CONFIGUI_CONTENTTYPE = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 4 };
pub const PKEY_CONFIGUI_CAPABILITIES = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 5 };
pub const PKEY_CONFIGUI_SUPPORTED_ARCHITECTURE = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 6 };
pub const PKEY_CONFIGUI_IS_GLOBAL = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 7 };
pub const PKEY_CONFIGUI_NAME = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 8 };
pub const PKEY_CONFIGUI_DESCRIPTION = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 9 };
pub const PKEY_CONFIGUI_TOOLTIPS = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 10 };
pub const PKEY_CONFIGUI_ICON = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 11 };
pub const PKEY_CONFIGUI_MENUITEM_NOUI = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 12 };
pub const PKEY_CONFIGUI_MENUITEM = PROPERTYKEY{ .fmtid = Guid.initString("554b24ea-e8e3-45ba-9352-dfb561e171e4"), .pid = 13 };

//--------------------------------------------------------------------------------
// Section: Types (102)
//--------------------------------------------------------------------------------
pub const ID_PARAMETER_PAIR = extern struct {
    fIsVariable: BOOL,
    cbIdSize: u16,
};

pub const ID_PARAMETERS = extern struct {
    dwSize: u32,
    replicaId: ID_PARAMETER_PAIR,
    itemId: ID_PARAMETER_PAIR,
    changeUnitId: ID_PARAMETER_PAIR,
};

pub const SYNC_SESSION_STATISTICS = extern struct {
    dwChangesApplied: u32,
    dwChangesFailed: u32,
};

pub const SYNC_VERSION = extern struct {
    dwLastUpdatingReplicaKey: u32,
    ullTickCount: u64,
};

pub const SYNC_RANGE = extern struct {
    pbClosedLowerBound: ?*u8,
    pbClosedUpperBound: ?*u8,
};

pub const SYNC_TIME = extern struct {
    dwDate: u32,
    dwTime: u32,
};

pub const SYNC_FILTER_CHANGE = extern struct {
    fMoveIn: BOOL,
    moveVersion: SYNC_VERSION,
};

pub const SYNC_PROVIDER_ROLE = enum(i32) {
    SOURCE = 0,
    DESTINATION = 1,
};
pub const SPR_SOURCE = SYNC_PROVIDER_ROLE.SOURCE;
pub const SPR_DESTINATION = SYNC_PROVIDER_ROLE.DESTINATION;

pub const CONFLICT_RESOLUTION_POLICY = enum(i32) {
    NONE = 0,
    DESTINATION_PROVIDER_WINS = 1,
    SOURCE_PROVIDER_WINS = 2,
    LAST = 3,
};
pub const CRP_NONE = CONFLICT_RESOLUTION_POLICY.NONE;
pub const CRP_DESTINATION_PROVIDER_WINS = CONFLICT_RESOLUTION_POLICY.DESTINATION_PROVIDER_WINS;
pub const CRP_SOURCE_PROVIDER_WINS = CONFLICT_RESOLUTION_POLICY.SOURCE_PROVIDER_WINS;
pub const CRP_LAST = CONFLICT_RESOLUTION_POLICY.LAST;

pub const SYNC_PROGRESS_STAGE = enum(i32) {
    DETECTION = 0,
    ENUMERATION = 1,
    APPLICATION = 2,
};
pub const SPS_CHANGE_DETECTION = SYNC_PROGRESS_STAGE.DETECTION;
pub const SPS_CHANGE_ENUMERATION = SYNC_PROGRESS_STAGE.ENUMERATION;
pub const SPS_CHANGE_APPLICATION = SYNC_PROGRESS_STAGE.APPLICATION;

pub const SYNC_FULL_ENUMERATION_ACTION = enum(i32) {
    FULL_ENUMERATION = 0,
    PARTIAL_SYNC = 1,
    ABORT = 2,
};
pub const SFEA_FULL_ENUMERATION = SYNC_FULL_ENUMERATION_ACTION.FULL_ENUMERATION;
pub const SFEA_PARTIAL_SYNC = SYNC_FULL_ENUMERATION_ACTION.PARTIAL_SYNC;
pub const SFEA_ABORT = SYNC_FULL_ENUMERATION_ACTION.ABORT;

pub const SYNC_RESOLVE_ACTION = enum(i32) {
    DEFER = 0,
    ACCEPT_DESTINATION_PROVIDER = 1,
    ACCEPT_SOURCE_PROVIDER = 2,
    MERGE = 3,
    TRANSFER_AND_DEFER = 4,
    LAST = 5,
};
pub const SRA_DEFER = SYNC_RESOLVE_ACTION.DEFER;
pub const SRA_ACCEPT_DESTINATION_PROVIDER = SYNC_RESOLVE_ACTION.ACCEPT_DESTINATION_PROVIDER;
pub const SRA_ACCEPT_SOURCE_PROVIDER = SYNC_RESOLVE_ACTION.ACCEPT_SOURCE_PROVIDER;
pub const SRA_MERGE = SYNC_RESOLVE_ACTION.MERGE;
pub const SRA_TRANSFER_AND_DEFER = SYNC_RESOLVE_ACTION.TRANSFER_AND_DEFER;
pub const SRA_LAST = SYNC_RESOLVE_ACTION.LAST;

pub const SYNC_STATISTICS = enum(i32) {
    T = 0,
};
pub const SYNC_STATISTICS_RANGE_COUNT = SYNC_STATISTICS.T;

pub const SYNC_SERIALIZATION_VERSION = enum(i32) {
    @"1" = 1,
    @"2" = 4,
    @"3" = 5,
};
pub const SYNC_SERIALIZATION_VERSION_V1 = SYNC_SERIALIZATION_VERSION.@"1";
pub const SYNC_SERIALIZATION_VERSION_V2 = SYNC_SERIALIZATION_VERSION.@"2";
pub const SYNC_SERIALIZATION_VERSION_V3 = SYNC_SERIALIZATION_VERSION.@"3";

pub const FILTERING_TYPE = enum(i32) {
    ONLY = 0,
    AND_VERSIONS_FOR_MOVED_OUT_ITEMS = 1,
};
pub const FT_CURRENT_ITEMS_ONLY = FILTERING_TYPE.ONLY;
pub const FT_CURRENT_ITEMS_AND_VERSIONS_FOR_MOVED_OUT_ITEMS = FILTERING_TYPE.AND_VERSIONS_FOR_MOVED_OUT_ITEMS;

pub const SYNC_CONSTRAINT_RESOLVE_ACTION = enum(i32) {
    DEFER = 0,
    ACCEPT_DESTINATION_PROVIDER = 1,
    ACCEPT_SOURCE_PROVIDER = 2,
    TRANSFER_AND_DEFER = 3,
    MERGE = 4,
    RENAME_SOURCE = 5,
    RENAME_DESTINATION = 6,
};
pub const SCRA_DEFER = SYNC_CONSTRAINT_RESOLVE_ACTION.DEFER;
pub const SCRA_ACCEPT_DESTINATION_PROVIDER = SYNC_CONSTRAINT_RESOLVE_ACTION.ACCEPT_DESTINATION_PROVIDER;
pub const SCRA_ACCEPT_SOURCE_PROVIDER = SYNC_CONSTRAINT_RESOLVE_ACTION.ACCEPT_SOURCE_PROVIDER;
pub const SCRA_TRANSFER_AND_DEFER = SYNC_CONSTRAINT_RESOLVE_ACTION.TRANSFER_AND_DEFER;
pub const SCRA_MERGE = SYNC_CONSTRAINT_RESOLVE_ACTION.MERGE;
pub const SCRA_RENAME_SOURCE = SYNC_CONSTRAINT_RESOLVE_ACTION.RENAME_SOURCE;
pub const SCRA_RENAME_DESTINATION = SYNC_CONSTRAINT_RESOLVE_ACTION.RENAME_DESTINATION;

pub const CONSTRAINT_CONFLICT_REASON = enum(i32) {
    OTHER = 0,
    COLLISION = 1,
    NOPARENT = 2,
    IDENTITY = 3,
};
pub const CCR_OTHER = CONSTRAINT_CONFLICT_REASON.OTHER;
pub const CCR_COLLISION = CONSTRAINT_CONFLICT_REASON.COLLISION;
pub const CCR_NOPARENT = CONSTRAINT_CONFLICT_REASON.NOPARENT;
pub const CCR_IDENTITY = CONSTRAINT_CONFLICT_REASON.IDENTITY;

pub const KNOWLEDGE_COOKIE_COMPARISON_RESULT = enum(i32) {
    EQUAL = 0,
    CONTAINED = 1,
    CONTAINS = 2,
    NOT_COMPARABLE = 3,
};
pub const KCCR_COOKIE_KNOWLEDGE_EQUAL = KNOWLEDGE_COOKIE_COMPARISON_RESULT.EQUAL;
pub const KCCR_COOKIE_KNOWLEDGE_CONTAINED = KNOWLEDGE_COOKIE_COMPARISON_RESULT.CONTAINED;
pub const KCCR_COOKIE_KNOWLEDGE_CONTAINS = KNOWLEDGE_COOKIE_COMPARISON_RESULT.CONTAINS;
pub const KCCR_COOKIE_KNOWLEDGE_NOT_COMPARABLE = KNOWLEDGE_COOKIE_COMPARISON_RESULT.NOT_COMPARABLE;

// TODO: this type is limited to platform 'windows6.1'
const IID_IClockVectorElement_Value = Guid.initString("e71c4250-adf8-4a07-8fae-5669596909c1");
pub const IID_IClockVectorElement = &IID_IClockVectorElement_Value;
pub const IClockVectorElement = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetReplicaKey: *const fn (
            self: *const IClockVectorElement,
            pdw_replica_key: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTickCount: *const fn (
            self: *const IClockVectorElement,
            pull_tick_count: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getReplicaKey(self: *const T, pdw_replica_key_: ?*u32) HRESULT {
                return @as(*const IClockVectorElement.VTable, @ptrCast(self.vtable)).GetReplicaKey(@as(*const IClockVectorElement, @ptrCast(self)), pdw_replica_key_);
            }
            pub inline fn getTickCount(self: *const T, pull_tick_count_: ?*u64) HRESULT {
                return @as(*const IClockVectorElement.VTable, @ptrCast(self.vtable)).GetTickCount(@as(*const IClockVectorElement, @ptrCast(self)), pull_tick_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IFeedClockVectorElement_Value = Guid.initString("a40b46d2-e97b-4156-b6da-991f501b0f05");
pub const IID_IFeedClockVectorElement = &IID_IFeedClockVectorElement_Value;
pub const IFeedClockVectorElement = extern struct {
    pub const VTable = extern struct {
        base: IClockVectorElement.VTable,
        GetSyncTime: *const fn (
            self: *const IFeedClockVectorElement,
            p_sync_time: ?*SYNC_TIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IFeedClockVectorElement,
            pb_flags: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IClockVectorElement.MethodMixin(T);
            pub inline fn getSyncTime(self: *const T, p_sync_time_: ?*SYNC_TIME) HRESULT {
                return @as(*const IFeedClockVectorElement.VTable, @ptrCast(self.vtable)).GetSyncTime(@as(*const IFeedClockVectorElement, @ptrCast(self)), p_sync_time_);
            }
            pub inline fn getFlags(self: *const T, pb_flags_: ?*u8) HRESULT {
                return @as(*const IFeedClockVectorElement.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IFeedClockVectorElement, @ptrCast(self)), pb_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IClockVector_Value = Guid.initString("14b2274a-8698-4cc6-9333-f89bd1d47bc4");
pub const IID_IClockVector = &IID_IClockVector_Value;
pub const IClockVector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClockVectorElements: *const fn (
            self: *const IClockVector,
            riid: ?*const Guid,
            ppi_enum_clock_vector: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClockVectorElementCount: *const fn (
            self: *const IClockVector,
            pdw_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getClockVectorElements(self: *const T, riid_: ?*const Guid, ppi_enum_clock_vector_: ?*?*anyopaque) HRESULT {
                return @as(*const IClockVector.VTable, @ptrCast(self.vtable)).GetClockVectorElements(@as(*const IClockVector, @ptrCast(self)), riid_, ppi_enum_clock_vector_);
            }
            pub inline fn getClockVectorElementCount(self: *const T, pdw_count_: ?*u32) HRESULT {
                return @as(*const IClockVector.VTable, @ptrCast(self.vtable)).GetClockVectorElementCount(@as(*const IClockVector, @ptrCast(self)), pdw_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IFeedClockVector_Value = Guid.initString("8d1d98d1-9fb8-4ec9-a553-54dd924e0f67");
pub const IID_IFeedClockVector = &IID_IFeedClockVector_Value;
pub const IFeedClockVector = extern struct {
    pub const VTable = extern struct {
        base: IClockVector.VTable,
        GetUpdateCount: *const fn (
            self: *const IFeedClockVector,
            pdw_update_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsNoConflictsSpecified: *const fn (
            self: *const IFeedClockVector,
            pf_is_no_conflicts_specified: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IClockVector.MethodMixin(T);
            pub inline fn getUpdateCount(self: *const T, pdw_update_count_: ?*u32) HRESULT {
                return @as(*const IFeedClockVector.VTable, @ptrCast(self.vtable)).GetUpdateCount(@as(*const IFeedClockVector, @ptrCast(self)), pdw_update_count_);
            }
            pub inline fn isNoConflictsSpecified(self: *const T, pf_is_no_conflicts_specified_: ?*BOOL) HRESULT {
                return @as(*const IFeedClockVector.VTable, @ptrCast(self.vtable)).IsNoConflictsSpecified(@as(*const IFeedClockVector, @ptrCast(self)), pf_is_no_conflicts_specified_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnumClockVector_Value = Guid.initString("525844db-2837-4799-9e80-81a66e02220c");
pub const IID_IEnumClockVector = &IID_IEnumClockVector_Value;
pub const IEnumClockVector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumClockVector,
            c_clock_vector_elements: u32,
            ppi_clock_vector_elements: ?*?*IClockVectorElement,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumClockVector,
            c_sync_versions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumClockVector,
            ppi_enum: ?*?*IEnumClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_clock_vector_elements_: u32, ppi_clock_vector_elements_: ?*?*IClockVectorElement, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumClockVector.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumClockVector, @ptrCast(self)), c_clock_vector_elements_, ppi_clock_vector_elements_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_sync_versions_: u32) HRESULT {
                return @as(*const IEnumClockVector.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumClockVector, @ptrCast(self)), c_sync_versions_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumClockVector.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumClockVector, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppi_enum_: ?*?*IEnumClockVector) HRESULT {
                return @as(*const IEnumClockVector.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumClockVector, @ptrCast(self)), ppi_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnumFeedClockVector_Value = Guid.initString("550f763d-146a-48f6-abeb-6c88c7f70514");
pub const IID_IEnumFeedClockVector = &IID_IEnumFeedClockVector_Value;
pub const IEnumFeedClockVector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumFeedClockVector,
            c_clock_vector_elements: u32,
            ppi_clock_vector_elements: ?*?*IFeedClockVectorElement,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumFeedClockVector,
            c_sync_versions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumFeedClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumFeedClockVector,
            ppi_enum: ?*?*IEnumFeedClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_clock_vector_elements_: u32, ppi_clock_vector_elements_: ?*?*IFeedClockVectorElement, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumFeedClockVector.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumFeedClockVector, @ptrCast(self)), c_clock_vector_elements_, ppi_clock_vector_elements_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_sync_versions_: u32) HRESULT {
                return @as(*const IEnumFeedClockVector.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumFeedClockVector, @ptrCast(self)), c_sync_versions_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumFeedClockVector.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumFeedClockVector, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppi_enum_: ?*?*IEnumFeedClockVector) HRESULT {
                return @as(*const IEnumFeedClockVector.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumFeedClockVector, @ptrCast(self)), ppi_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ICoreFragment_Value = Guid.initString("613b2ab5-b304-47d9-9c31-ce6c54401a15");
pub const IID_ICoreFragment = &IID_ICoreFragment_Value;
pub const ICoreFragment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NextColumn: *const fn (
            self: *const ICoreFragment,
            p_change_unit_id: ?*u8,
            p_change_unit_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextRange: *const fn (
            self: *const ICoreFragment,
            p_item_id: ?*u8,
            p_item_id_size: ?*u32,
            pi_clock_vector: ?*?*IClockVector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ICoreFragment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnCount: *const fn (
            self: *const ICoreFragment,
            p_column_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeCount: *const fn (
            self: *const ICoreFragment,
            p_range_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn nextColumn(self: *const T, p_change_unit_id_: ?*u8, p_change_unit_id_size_: ?*u32) HRESULT {
                return @as(*const ICoreFragment.VTable, @ptrCast(self.vtable)).NextColumn(@as(*const ICoreFragment, @ptrCast(self)), p_change_unit_id_, p_change_unit_id_size_);
            }
            pub inline fn nextRange(self: *const T, p_item_id_: ?*u8, p_item_id_size_: ?*u32, pi_clock_vector_: ?*?*IClockVector) HRESULT {
                return @as(*const ICoreFragment.VTable, @ptrCast(self.vtable)).NextRange(@as(*const ICoreFragment, @ptrCast(self)), p_item_id_, p_item_id_size_, pi_clock_vector_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const ICoreFragment.VTable, @ptrCast(self.vtable)).Reset(@as(*const ICoreFragment, @ptrCast(self)));
            }
            pub inline fn getColumnCount(self: *const T, p_column_count_: ?*u32) HRESULT {
                return @as(*const ICoreFragment.VTable, @ptrCast(self.vtable)).GetColumnCount(@as(*const ICoreFragment, @ptrCast(self)), p_column_count_);
            }
            pub inline fn getRangeCount(self: *const T, p_range_count_: ?*u32) HRESULT {
                return @as(*const ICoreFragment.VTable, @ptrCast(self.vtable)).GetRangeCount(@as(*const ICoreFragment, @ptrCast(self)), p_range_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ICoreFragmentInspector_Value = Guid.initString("f7fcc5fd-ae26-4679-ba16-96aac583c134");
pub const IID_ICoreFragmentInspector = &IID_ICoreFragmentInspector_Value;
pub const ICoreFragmentInspector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NextCoreFragments: *const fn (
            self: *const ICoreFragmentInspector,
            requested_count: u32,
            ppi_core_fragments: ?*?*ICoreFragment,
            p_fetched_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ICoreFragmentInspector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn nextCoreFragments(self: *const T, requested_count_: u32, ppi_core_fragments_: ?*?*ICoreFragment, p_fetched_count_: ?*u32) HRESULT {
                return @as(*const ICoreFragmentInspector.VTable, @ptrCast(self.vtable)).NextCoreFragments(@as(*const ICoreFragmentInspector, @ptrCast(self)), requested_count_, ppi_core_fragments_, p_fetched_count_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const ICoreFragmentInspector.VTable, @ptrCast(self.vtable)).Reset(@as(*const ICoreFragmentInspector, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRangeException_Value = Guid.initString("75ae8777-6848-49f7-956c-a3a92f5096e8");
pub const IID_IRangeException = &IID_IRangeException_Value;
pub const IRangeException = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClosedRangeStart: *const fn (
            self: *const IRangeException,
            pb_closed_range_start: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosedRangeEnd: *const fn (
            self: *const IRangeException,
            pb_closed_range_end: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClockVector: *const fn (
            self: *const IRangeException,
            riid: ?*const Guid,
            pp_unk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getClosedRangeStart(self: *const T, pb_closed_range_start_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const IRangeException.VTable, @ptrCast(self.vtable)).GetClosedRangeStart(@as(*const IRangeException, @ptrCast(self)), pb_closed_range_start_, pcb_id_size_);
            }
            pub inline fn getClosedRangeEnd(self: *const T, pb_closed_range_end_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const IRangeException.VTable, @ptrCast(self.vtable)).GetClosedRangeEnd(@as(*const IRangeException, @ptrCast(self)), pb_closed_range_end_, pcb_id_size_);
            }
            pub inline fn getClockVector(self: *const T, riid_: ?*const Guid, pp_unk_: ?*?*anyopaque) HRESULT {
                return @as(*const IRangeException.VTable, @ptrCast(self.vtable)).GetClockVector(@as(*const IRangeException, @ptrCast(self)), riid_, pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnumRangeExceptions_Value = Guid.initString("0944439f-ddb1-4176-b703-046ff22a2386");
pub const IID_IEnumRangeExceptions = &IID_IEnumRangeExceptions_Value;
pub const IEnumRangeExceptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumRangeExceptions,
            c_exceptions: u32,
            pp_range_exception: ?*?*IRangeException,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumRangeExceptions,
            c_exceptions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumRangeExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumRangeExceptions,
            pp_enum: ?*?*IEnumRangeExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_exceptions_: u32, pp_range_exception_: ?*?*IRangeException, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumRangeExceptions.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumRangeExceptions, @ptrCast(self)), c_exceptions_, pp_range_exception_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_exceptions_: u32) HRESULT {
                return @as(*const IEnumRangeExceptions.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumRangeExceptions, @ptrCast(self)), c_exceptions_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumRangeExceptions.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumRangeExceptions, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumRangeExceptions) HRESULT {
                return @as(*const IEnumRangeExceptions.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumRangeExceptions, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISingleItemException_Value = Guid.initString("892fb9b0-7c55-4a18-9316-fdf449569b64");
pub const IID_ISingleItemException = &IID_ISingleItemException_Value;
pub const ISingleItemException = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemId: *const fn (
            self: *const ISingleItemException,
            pb_item_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClockVector: *const fn (
            self: *const ISingleItemException,
            riid: ?*const Guid,
            pp_unk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getItemId(self: *const T, pb_item_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const ISingleItemException.VTable, @ptrCast(self.vtable)).GetItemId(@as(*const ISingleItemException, @ptrCast(self)), pb_item_id_, pcb_id_size_);
            }
            pub inline fn getClockVector(self: *const T, riid_: ?*const Guid, pp_unk_: ?*?*anyopaque) HRESULT {
                return @as(*const ISingleItemException.VTable, @ptrCast(self.vtable)).GetClockVector(@as(*const ISingleItemException, @ptrCast(self)), riid_, pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnumSingleItemExceptions_Value = Guid.initString("e563381c-1b4d-4c66-9796-c86faccdcd40");
pub const IID_IEnumSingleItemExceptions = &IID_IEnumSingleItemExceptions_Value;
pub const IEnumSingleItemExceptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumSingleItemExceptions,
            c_exceptions: u32,
            pp_single_item_exception: ?*?*ISingleItemException,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumSingleItemExceptions,
            c_exceptions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumSingleItemExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumSingleItemExceptions,
            pp_enum: ?*?*IEnumSingleItemExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_exceptions_: u32, pp_single_item_exception_: ?*?*ISingleItemException, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumSingleItemExceptions.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumSingleItemExceptions, @ptrCast(self)), c_exceptions_, pp_single_item_exception_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_exceptions_: u32) HRESULT {
                return @as(*const IEnumSingleItemExceptions.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumSingleItemExceptions, @ptrCast(self)), c_exceptions_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumSingleItemExceptions.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumSingleItemExceptions, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumSingleItemExceptions) HRESULT {
                return @as(*const IEnumSingleItemExceptions.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumSingleItemExceptions, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IChangeUnitException_Value = Guid.initString("0cd7ee7c-fec0-4021-99ee-f0e5348f2a5f");
pub const IID_IChangeUnitException = &IID_IChangeUnitException_Value;
pub const IChangeUnitException = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemId: *const fn (
            self: *const IChangeUnitException,
            pb_item_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitId: *const fn (
            self: *const IChangeUnitException,
            pb_change_unit_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClockVector: *const fn (
            self: *const IChangeUnitException,
            riid: ?*const Guid,
            pp_unk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getItemId(self: *const T, pb_item_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const IChangeUnitException.VTable, @ptrCast(self.vtable)).GetItemId(@as(*const IChangeUnitException, @ptrCast(self)), pb_item_id_, pcb_id_size_);
            }
            pub inline fn getChangeUnitId(self: *const T, pb_change_unit_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const IChangeUnitException.VTable, @ptrCast(self.vtable)).GetChangeUnitId(@as(*const IChangeUnitException, @ptrCast(self)), pb_change_unit_id_, pcb_id_size_);
            }
            pub inline fn getClockVector(self: *const T, riid_: ?*const Guid, pp_unk_: ?*?*anyopaque) HRESULT {
                return @as(*const IChangeUnitException.VTable, @ptrCast(self.vtable)).GetClockVector(@as(*const IChangeUnitException, @ptrCast(self)), riid_, pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnumChangeUnitExceptions_Value = Guid.initString("3074e802-9319-4420-be21-1022e2e21da8");
pub const IID_IEnumChangeUnitExceptions = &IID_IEnumChangeUnitExceptions_Value;
pub const IEnumChangeUnitExceptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumChangeUnitExceptions,
            c_exceptions: u32,
            pp_change_unit_exception: ?*?*IChangeUnitException,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumChangeUnitExceptions,
            c_exceptions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumChangeUnitExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumChangeUnitExceptions,
            pp_enum: ?*?*IEnumChangeUnitExceptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_exceptions_: u32, pp_change_unit_exception_: ?*?*IChangeUnitException, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumChangeUnitExceptions.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumChangeUnitExceptions, @ptrCast(self)), c_exceptions_, pp_change_unit_exception_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_exceptions_: u32) HRESULT {
                return @as(*const IEnumChangeUnitExceptions.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumChangeUnitExceptions, @ptrCast(self)), c_exceptions_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumChangeUnitExceptions.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumChangeUnitExceptions, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumChangeUnitExceptions) HRESULT {
                return @as(*const IEnumChangeUnitExceptions.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumChangeUnitExceptions, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IReplicaKeyMap_Value = Guid.initString("2209f4fc-fd10-4ff0-84a8-f0a1982e440e");
pub const IID_IReplicaKeyMap = &IID_IReplicaKeyMap_Value;
pub const IReplicaKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LookupReplicaKey: *const fn (
            self: *const IReplicaKeyMap,
            pb_replica_id: ?*const u8,
            pdw_replica_key: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LookupReplicaId: *const fn (
            self: *const IReplicaKeyMap,
            dw_replica_key: u32,
            pb_replica_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: *const fn (
            self: *const IReplicaKeyMap,
            pb_replica_key_map: ?*u8,
            pcb_replica_key_map: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn lookupReplicaKey(self: *const T, pb_replica_id_: ?*const u8, pdw_replica_key_: ?*u32) HRESULT {
                return @as(*const IReplicaKeyMap.VTable, @ptrCast(self.vtable)).LookupReplicaKey(@as(*const IReplicaKeyMap, @ptrCast(self)), pb_replica_id_, pdw_replica_key_);
            }
            pub inline fn lookupReplicaId(self: *const T, dw_replica_key_: u32, pb_replica_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const IReplicaKeyMap.VTable, @ptrCast(self.vtable)).LookupReplicaId(@as(*const IReplicaKeyMap, @ptrCast(self)), dw_replica_key_, pb_replica_id_, pcb_id_size_);
            }
            pub inline fn serialize(self: *const T, pb_replica_key_map_: ?*u8, pcb_replica_key_map_: ?*u32) HRESULT {
                return @as(*const IReplicaKeyMap.VTable, @ptrCast(self.vtable)).Serialize(@as(*const IReplicaKeyMap, @ptrCast(self)), pb_replica_key_map_, pcb_replica_key_map_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IConstructReplicaKeyMap_Value = Guid.initString("ded10970-ec85-4115-b52c-4405845642a5");
pub const IID_IConstructReplicaKeyMap = &IID_IConstructReplicaKeyMap_Value;
pub const IConstructReplicaKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindOrAddReplica: *const fn (
            self: *const IConstructReplicaKeyMap,
            pb_replica_id: ?*const u8,
            pdw_replica_key: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findOrAddReplica(self: *const T, pb_replica_id_: ?*const u8, pdw_replica_key_: ?*u32) HRESULT {
                return @as(*const IConstructReplicaKeyMap.VTable, @ptrCast(self.vtable)).FindOrAddReplica(@as(*const IConstructReplicaKeyMap, @ptrCast(self)), pb_replica_id_, pdw_replica_key_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncKnowledge_Value = Guid.initString("615bbb53-c945-4203-bf4b-2cb65919a0aa");
pub const IID_ISyncKnowledge = &IID_ISyncKnowledge_Value;
pub const ISyncKnowledge = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwnerReplicaId: *const fn (
            self: *const ISyncKnowledge,
            pb_replica_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: *const fn (
            self: *const ISyncKnowledge,
            f_serialize_replica_key_map: BOOL,
            pb_knowledge: ?*u8,
            pcb_knowledge: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLocalTickCount: *const fn (
            self: *const ISyncKnowledge,
            ull_tick_count: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsChange: *const fn (
            self: *const ISyncKnowledge,
            pb_version_owner_replica_id: ?*const u8,
            pgid_item_id: ?*const u8,
            p_sync_version: ?*const SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsChangeUnit: *const fn (
            self: *const ISyncKnowledge,
            pb_version_owner_replica_id: ?*const u8,
            pb_item_id: ?*const u8,
            pb_change_unit_id: ?*const u8,
            p_sync_version: ?*const SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScopeVector: *const fn (
            self: *const ISyncKnowledge,
            riid: ?*const Guid,
            pp_unk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReplicaKeyMap: *const fn (
            self: *const ISyncKnowledge,
            pp_replica_key_map: ?*?*IReplicaKeyMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const ISyncKnowledge,
            pp_cloned_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertVersion: *const fn (
            self: *const ISyncKnowledge,
            p_knowledge_in: ?*ISyncKnowledge,
            pb_current_owner_id: ?*const u8,
            p_version_in: ?*const SYNC_VERSION,
            pb_new_owner_id: ?*u8,
            pcb_id_size: ?*u32,
            p_version_out: ?*SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapRemoteToLocal: *const fn (
            self: *const ISyncKnowledge,
            p_remote_knowledge: ?*ISyncKnowledge,
            pp_mapped_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Union: *const fn (
            self: *const ISyncKnowledge,
            p_knowledge: ?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoItem: *const fn (
            self: *const ISyncKnowledge,
            pb_item_id: ?*const u8,
            pp_knowledge_out: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoChangeUnit: *const fn (
            self: *const ISyncKnowledge,
            pb_item_id: ?*const u8,
            pb_change_unit_id: ?*const u8,
            pp_knowledge_out: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoRange: *const fn (
            self: *const ISyncKnowledge,
            psrng_sync_range: ?*const SYNC_RANGE,
            pp_knowledge_out: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExcludeItem: *const fn (
            self: *const ISyncKnowledge,
            pb_item_id: ?*const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExcludeChangeUnit: *const fn (
            self: *const ISyncKnowledge,
            pb_item_id: ?*const u8,
            pb_change_unit_id: ?*const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsKnowledge: *const fn (
            self: *const ISyncKnowledge,
            p_knowledge: ?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindMinTickCountForReplica: *const fn (
            self: *const ISyncKnowledge,
            pb_replica_id: ?*const u8,
            pull_replica_tick_count: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeExceptions: *const fn (
            self: *const ISyncKnowledge,
            riid: ?*const Guid,
            pp_unk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSingleItemExceptions: *const fn (
            self: *const ISyncKnowledge,
            riid: ?*const Guid,
            pp_unk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitExceptions: *const fn (
            self: *const ISyncKnowledge,
            riid: ?*const Guid,
            pp_unk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindClockVectorForItem: *const fn (
            self: *const ISyncKnowledge,
            pb_item_id: ?*const u8,
            riid: ?*const Guid,
            pp_unk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindClockVectorForChangeUnit: *const fn (
            self: *const ISyncKnowledge,
            pb_item_id: ?*const u8,
            pb_change_unit_id: ?*const u8,
            riid: ?*const Guid,
            pp_unk: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersion: *const fn (
            self: *const ISyncKnowledge,
            pdw_version: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOwnerReplicaId(self: *const T, pb_replica_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).GetOwnerReplicaId(@as(*const ISyncKnowledge, @ptrCast(self)), pb_replica_id_, pcb_id_size_);
            }
            pub inline fn serialize(self: *const T, f_serialize_replica_key_map_: BOOL, pb_knowledge_: ?*u8, pcb_knowledge_: ?*u32) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).Serialize(@as(*const ISyncKnowledge, @ptrCast(self)), f_serialize_replica_key_map_, pb_knowledge_, pcb_knowledge_);
            }
            pub inline fn setLocalTickCount(self: *const T, ull_tick_count_: u64) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).SetLocalTickCount(@as(*const ISyncKnowledge, @ptrCast(self)), ull_tick_count_);
            }
            pub inline fn containsChange(self: *const T, pb_version_owner_replica_id_: ?*const u8, pgid_item_id_: ?*const u8, p_sync_version_: ?*const SYNC_VERSION) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).ContainsChange(@as(*const ISyncKnowledge, @ptrCast(self)), pb_version_owner_replica_id_, pgid_item_id_, p_sync_version_);
            }
            pub inline fn containsChangeUnit(self: *const T, pb_version_owner_replica_id_: ?*const u8, pb_item_id_: ?*const u8, pb_change_unit_id_: ?*const u8, p_sync_version_: ?*const SYNC_VERSION) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).ContainsChangeUnit(@as(*const ISyncKnowledge, @ptrCast(self)), pb_version_owner_replica_id_, pb_item_id_, pb_change_unit_id_, p_sync_version_);
            }
            pub inline fn getScopeVector(self: *const T, riid_: ?*const Guid, pp_unk_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).GetScopeVector(@as(*const ISyncKnowledge, @ptrCast(self)), riid_, pp_unk_);
            }
            pub inline fn getReplicaKeyMap(self: *const T, pp_replica_key_map_: ?*?*IReplicaKeyMap) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).GetReplicaKeyMap(@as(*const ISyncKnowledge, @ptrCast(self)), pp_replica_key_map_);
            }
            pub inline fn clone(self: *const T, pp_cloned_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).Clone(@as(*const ISyncKnowledge, @ptrCast(self)), pp_cloned_knowledge_);
            }
            pub inline fn convertVersion(self: *const T, p_knowledge_in_: ?*ISyncKnowledge, pb_current_owner_id_: ?*const u8, p_version_in_: ?*const SYNC_VERSION, pb_new_owner_id_: ?*u8, pcb_id_size_: ?*u32, p_version_out_: ?*SYNC_VERSION) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).ConvertVersion(@as(*const ISyncKnowledge, @ptrCast(self)), p_knowledge_in_, pb_current_owner_id_, p_version_in_, pb_new_owner_id_, pcb_id_size_, p_version_out_);
            }
            pub inline fn mapRemoteToLocal(self: *const T, p_remote_knowledge_: ?*ISyncKnowledge, pp_mapped_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).MapRemoteToLocal(@as(*const ISyncKnowledge, @ptrCast(self)), p_remote_knowledge_, pp_mapped_knowledge_);
            }
            pub inline fn @"union"(self: *const T, p_knowledge_: ?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).Union(@as(*const ISyncKnowledge, @ptrCast(self)), p_knowledge_);
            }
            pub inline fn projectOntoItem(self: *const T, pb_item_id_: ?*const u8, pp_knowledge_out_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).ProjectOntoItem(@as(*const ISyncKnowledge, @ptrCast(self)), pb_item_id_, pp_knowledge_out_);
            }
            pub inline fn projectOntoChangeUnit(self: *const T, pb_item_id_: ?*const u8, pb_change_unit_id_: ?*const u8, pp_knowledge_out_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).ProjectOntoChangeUnit(@as(*const ISyncKnowledge, @ptrCast(self)), pb_item_id_, pb_change_unit_id_, pp_knowledge_out_);
            }
            pub inline fn projectOntoRange(self: *const T, psrng_sync_range_: ?*const SYNC_RANGE, pp_knowledge_out_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).ProjectOntoRange(@as(*const ISyncKnowledge, @ptrCast(self)), psrng_sync_range_, pp_knowledge_out_);
            }
            pub inline fn excludeItem(self: *const T, pb_item_id_: ?*const u8) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).ExcludeItem(@as(*const ISyncKnowledge, @ptrCast(self)), pb_item_id_);
            }
            pub inline fn excludeChangeUnit(self: *const T, pb_item_id_: ?*const u8, pb_change_unit_id_: ?*const u8) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).ExcludeChangeUnit(@as(*const ISyncKnowledge, @ptrCast(self)), pb_item_id_, pb_change_unit_id_);
            }
            pub inline fn containsKnowledge(self: *const T, p_knowledge_: ?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).ContainsKnowledge(@as(*const ISyncKnowledge, @ptrCast(self)), p_knowledge_);
            }
            pub inline fn findMinTickCountForReplica(self: *const T, pb_replica_id_: ?*const u8, pull_replica_tick_count_: ?*u64) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).FindMinTickCountForReplica(@as(*const ISyncKnowledge, @ptrCast(self)), pb_replica_id_, pull_replica_tick_count_);
            }
            pub inline fn getRangeExceptions(self: *const T, riid_: ?*const Guid, pp_unk_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).GetRangeExceptions(@as(*const ISyncKnowledge, @ptrCast(self)), riid_, pp_unk_);
            }
            pub inline fn getSingleItemExceptions(self: *const T, riid_: ?*const Guid, pp_unk_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).GetSingleItemExceptions(@as(*const ISyncKnowledge, @ptrCast(self)), riid_, pp_unk_);
            }
            pub inline fn getChangeUnitExceptions(self: *const T, riid_: ?*const Guid, pp_unk_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).GetChangeUnitExceptions(@as(*const ISyncKnowledge, @ptrCast(self)), riid_, pp_unk_);
            }
            pub inline fn findClockVectorForItem(self: *const T, pb_item_id_: ?*const u8, riid_: ?*const Guid, pp_unk_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).FindClockVectorForItem(@as(*const ISyncKnowledge, @ptrCast(self)), pb_item_id_, riid_, pp_unk_);
            }
            pub inline fn findClockVectorForChangeUnit(self: *const T, pb_item_id_: ?*const u8, pb_change_unit_id_: ?*const u8, riid_: ?*const Guid, pp_unk_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).FindClockVectorForChangeUnit(@as(*const ISyncKnowledge, @ptrCast(self)), pb_item_id_, pb_change_unit_id_, riid_, pp_unk_);
            }
            pub inline fn getVersion(self: *const T, pdw_version_: ?*u32) HRESULT {
                return @as(*const ISyncKnowledge.VTable, @ptrCast(self.vtable)).GetVersion(@as(*const ISyncKnowledge, @ptrCast(self)), pdw_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IForgottenKnowledge_Value = Guid.initString("456e0f96-6036-452b-9f9d-bcc4b4a85db2");
pub const IID_IForgottenKnowledge = &IID_IForgottenKnowledge_Value;
pub const IForgottenKnowledge = extern struct {
    pub const VTable = extern struct {
        base: ISyncKnowledge.VTable,
        ForgetToVersion: *const fn (
            self: *const IForgottenKnowledge,
            p_knowledge: ?*ISyncKnowledge,
            p_version: ?*const SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncKnowledge.MethodMixin(T);
            pub inline fn forgetToVersion(self: *const T, p_knowledge_: ?*ISyncKnowledge, p_version_: ?*const SYNC_VERSION) HRESULT {
                return @as(*const IForgottenKnowledge.VTable, @ptrCast(self.vtable)).ForgetToVersion(@as(*const IForgottenKnowledge, @ptrCast(self)), p_knowledge_, p_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncKnowledge2_Value = Guid.initString("ed0addc0-3b4b-46a1-9a45-45661d2114c8");
pub const IID_ISyncKnowledge2 = &IID_ISyncKnowledge2_Value;
pub const ISyncKnowledge2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncKnowledge.VTable,
        GetIdParameters: *const fn (
            self: *const ISyncKnowledge2,
            p_id_parameters: ?*ID_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoColumnSet: *const fn (
            self: *const ISyncKnowledge2,
            pp_columns: ?*const ?*u8,
            count: u32,
            ppi_knowledge_out: ?*?*ISyncKnowledge2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SerializeWithOptions: *const fn (
            self: *const ISyncKnowledge2,
            target_format_version: SYNC_SERIALIZATION_VERSION,
            dw_flags: u32,
            pb_buffer: ?*u8,
            pdw_serialized_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLowestUncontainedId: *const fn (
            self: *const ISyncKnowledge2,
            pi_sync_knowledge: ?*ISyncKnowledge2,
            pb_item_id: ?*u8,
            pcb_item_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInspector: *const fn (
            self: *const ISyncKnowledge2,
            riid: ?*const Guid,
            ppi_inspector: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMinimumSupportedVersion: *const fn (
            self: *const ISyncKnowledge2,
            p_version: ?*SYNC_SERIALIZATION_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: *const fn (
            self: *const ISyncKnowledge2,
            which: SYNC_STATISTICS,
            p_value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsKnowledgeForItem: *const fn (
            self: *const ISyncKnowledge2,
            p_knowledge: ?*ISyncKnowledge,
            pb_item_id: ?*const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContainsKnowledgeForChangeUnit: *const fn (
            self: *const ISyncKnowledge2,
            p_knowledge: ?*ISyncKnowledge,
            pb_item_id: ?*const u8,
            pb_change_unit_id: ?*const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProjectOntoKnowledgeWithPrerequisite: *const fn (
            self: *const ISyncKnowledge2,
            p_prerequisite_knowledge: ?*ISyncKnowledge,
            p_template_knowledge: ?*ISyncKnowledge,
            pp_projected_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Complement: *const fn (
            self: *const ISyncKnowledge2,
            p_sync_knowledge: ?*ISyncKnowledge,
            pp_complemented_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IntersectsWithKnowledge: *const fn (
            self: *const ISyncKnowledge2,
            p_sync_knowledge: ?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKnowledgeCookie: *const fn (
            self: *const ISyncKnowledge2,
            pp_knowledge_cookie: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareToKnowledgeCookie: *const fn (
            self: *const ISyncKnowledge2,
            p_knowledge_cookie: ?*IUnknown,
            p_result: ?*KNOWLEDGE_COOKIE_COMPARISON_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncKnowledge.MethodMixin(T);
            pub inline fn getIdParameters(self: *const T, p_id_parameters_: ?*ID_PARAMETERS) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).GetIdParameters(@as(*const ISyncKnowledge2, @ptrCast(self)), p_id_parameters_);
            }
            pub inline fn projectOntoColumnSet(self: *const T, pp_columns_: ?*const ?*u8, count_: u32, ppi_knowledge_out_: ?*?*ISyncKnowledge2) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).ProjectOntoColumnSet(@as(*const ISyncKnowledge2, @ptrCast(self)), pp_columns_, count_, ppi_knowledge_out_);
            }
            pub inline fn serializeWithOptions(self: *const T, target_format_version_: SYNC_SERIALIZATION_VERSION, dw_flags_: u32, pb_buffer_: ?*u8, pdw_serialized_size_: ?*u32) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).SerializeWithOptions(@as(*const ISyncKnowledge2, @ptrCast(self)), target_format_version_, dw_flags_, pb_buffer_, pdw_serialized_size_);
            }
            pub inline fn getLowestUncontainedId(self: *const T, pi_sync_knowledge_: ?*ISyncKnowledge2, pb_item_id_: ?*u8, pcb_item_id_size_: ?*u32) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).GetLowestUncontainedId(@as(*const ISyncKnowledge2, @ptrCast(self)), pi_sync_knowledge_, pb_item_id_, pcb_item_id_size_);
            }
            pub inline fn getInspector(self: *const T, riid_: ?*const Guid, ppi_inspector_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).GetInspector(@as(*const ISyncKnowledge2, @ptrCast(self)), riid_, ppi_inspector_);
            }
            pub inline fn getMinimumSupportedVersion(self: *const T, p_version_: ?*SYNC_SERIALIZATION_VERSION) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).GetMinimumSupportedVersion(@as(*const ISyncKnowledge2, @ptrCast(self)), p_version_);
            }
            pub inline fn getStatistics(self: *const T, which_: SYNC_STATISTICS, p_value_: ?*u32) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).GetStatistics(@as(*const ISyncKnowledge2, @ptrCast(self)), which_, p_value_);
            }
            pub inline fn containsKnowledgeForItem(self: *const T, p_knowledge_: ?*ISyncKnowledge, pb_item_id_: ?*const u8) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).ContainsKnowledgeForItem(@as(*const ISyncKnowledge2, @ptrCast(self)), p_knowledge_, pb_item_id_);
            }
            pub inline fn containsKnowledgeForChangeUnit(self: *const T, p_knowledge_: ?*ISyncKnowledge, pb_item_id_: ?*const u8, pb_change_unit_id_: ?*const u8) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).ContainsKnowledgeForChangeUnit(@as(*const ISyncKnowledge2, @ptrCast(self)), p_knowledge_, pb_item_id_, pb_change_unit_id_);
            }
            pub inline fn projectOntoKnowledgeWithPrerequisite(self: *const T, p_prerequisite_knowledge_: ?*ISyncKnowledge, p_template_knowledge_: ?*ISyncKnowledge, pp_projected_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).ProjectOntoKnowledgeWithPrerequisite(@as(*const ISyncKnowledge2, @ptrCast(self)), p_prerequisite_knowledge_, p_template_knowledge_, pp_projected_knowledge_);
            }
            pub inline fn complement(self: *const T, p_sync_knowledge_: ?*ISyncKnowledge, pp_complemented_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).Complement(@as(*const ISyncKnowledge2, @ptrCast(self)), p_sync_knowledge_, pp_complemented_knowledge_);
            }
            pub inline fn intersectsWithKnowledge(self: *const T, p_sync_knowledge_: ?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).IntersectsWithKnowledge(@as(*const ISyncKnowledge2, @ptrCast(self)), p_sync_knowledge_);
            }
            pub inline fn getKnowledgeCookie(self: *const T, pp_knowledge_cookie_: ?*?*IUnknown) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).GetKnowledgeCookie(@as(*const ISyncKnowledge2, @ptrCast(self)), pp_knowledge_cookie_);
            }
            pub inline fn compareToKnowledgeCookie(self: *const T, p_knowledge_cookie_: ?*IUnknown, p_result_: ?*KNOWLEDGE_COOKIE_COMPARISON_RESULT) HRESULT {
                return @as(*const ISyncKnowledge2.VTable, @ptrCast(self.vtable)).CompareToKnowledgeCookie(@as(*const ISyncKnowledge2, @ptrCast(self)), p_knowledge_cookie_, p_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRecoverableErrorData_Value = Guid.initString("b37c4a0a-4b7d-4c2d-9711-3b00d119b1c8");
pub const IID_IRecoverableErrorData = &IID_IRecoverableErrorData_Value;
pub const IRecoverableErrorData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IRecoverableErrorData,
            pcsz_item_display_name: ?[*:0]const u16,
            pcsz_error_description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemDisplayName: *const fn (
            self: *const IRecoverableErrorData,
            psz_item_display_name: ?PWSTR,
            pcch_item_display_name: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorDescription: *const fn (
            self: *const IRecoverableErrorData,
            psz_error_description: ?PWSTR,
            pcch_error_description: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, pcsz_item_display_name_: ?[*:0]const u16, pcsz_error_description_: ?[*:0]const u16) HRESULT {
                return @as(*const IRecoverableErrorData.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IRecoverableErrorData, @ptrCast(self)), pcsz_item_display_name_, pcsz_error_description_);
            }
            pub inline fn getItemDisplayName(self: *const T, psz_item_display_name_: ?PWSTR, pcch_item_display_name_: ?*u32) HRESULT {
                return @as(*const IRecoverableErrorData.VTable, @ptrCast(self.vtable)).GetItemDisplayName(@as(*const IRecoverableErrorData, @ptrCast(self)), psz_item_display_name_, pcch_item_display_name_);
            }
            pub inline fn getErrorDescription(self: *const T, psz_error_description_: ?PWSTR, pcch_error_description_: ?*u32) HRESULT {
                return @as(*const IRecoverableErrorData.VTable, @ptrCast(self.vtable)).GetErrorDescription(@as(*const IRecoverableErrorData, @ptrCast(self)), psz_error_description_, pcch_error_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRecoverableError_Value = Guid.initString("0f5625e8-0a7b-45ee-9637-1ce13645909e");
pub const IID_IRecoverableError = &IID_IRecoverableError_Value;
pub const IRecoverableError = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStage: *const fn (
            self: *const IRecoverableError,
            p_stage: ?*SYNC_PROGRESS_STAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProvider: *const fn (
            self: *const IRecoverableError,
            p_provider_role: ?*SYNC_PROVIDER_ROLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeWithRecoverableError: *const fn (
            self: *const IRecoverableError,
            pp_change_with_recoverable_error: ?*?*ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecoverableErrorDataForChange: *const fn (
            self: *const IRecoverableError,
            phr_error: ?*HRESULT,
            pp_error_data: ?*?*IRecoverableErrorData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecoverableErrorDataForChangeUnit: *const fn (
            self: *const IRecoverableError,
            p_change_unit: ?*ISyncChangeUnit,
            phr_error: ?*HRESULT,
            pp_error_data: ?*?*IRecoverableErrorData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStage(self: *const T, p_stage_: ?*SYNC_PROGRESS_STAGE) HRESULT {
                return @as(*const IRecoverableError.VTable, @ptrCast(self.vtable)).GetStage(@as(*const IRecoverableError, @ptrCast(self)), p_stage_);
            }
            pub inline fn getProvider(self: *const T, p_provider_role_: ?*SYNC_PROVIDER_ROLE) HRESULT {
                return @as(*const IRecoverableError.VTable, @ptrCast(self.vtable)).GetProvider(@as(*const IRecoverableError, @ptrCast(self)), p_provider_role_);
            }
            pub inline fn getChangeWithRecoverableError(self: *const T, pp_change_with_recoverable_error_: ?*?*ISyncChange) HRESULT {
                return @as(*const IRecoverableError.VTable, @ptrCast(self.vtable)).GetChangeWithRecoverableError(@as(*const IRecoverableError, @ptrCast(self)), pp_change_with_recoverable_error_);
            }
            pub inline fn getRecoverableErrorDataForChange(self: *const T, phr_error_: ?*HRESULT, pp_error_data_: ?*?*IRecoverableErrorData) HRESULT {
                return @as(*const IRecoverableError.VTable, @ptrCast(self.vtable)).GetRecoverableErrorDataForChange(@as(*const IRecoverableError, @ptrCast(self)), phr_error_, pp_error_data_);
            }
            pub inline fn getRecoverableErrorDataForChangeUnit(self: *const T, p_change_unit_: ?*ISyncChangeUnit, phr_error_: ?*HRESULT, pp_error_data_: ?*?*IRecoverableErrorData) HRESULT {
                return @as(*const IRecoverableError.VTable, @ptrCast(self.vtable)).GetRecoverableErrorDataForChangeUnit(@as(*const IRecoverableError, @ptrCast(self)), p_change_unit_, phr_error_, pp_error_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IChangeConflict_Value = Guid.initString("014ebf97-9f20-4f7a-bdd4-25979c77c002");
pub const IID_IChangeConflict = &IID_IChangeConflict_Value;
pub const IChangeConflict = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDestinationProviderConflictingChange: *const fn (
            self: *const IChangeConflict,
            pp_conflicting_change: ?*?*ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceProviderConflictingChange: *const fn (
            self: *const IChangeConflict,
            pp_conflicting_change: ?*?*ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDestinationProviderConflictingData: *const fn (
            self: *const IChangeConflict,
            pp_conflicting_data: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceProviderConflictingData: *const fn (
            self: *const IChangeConflict,
            pp_conflicting_data: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolveActionForChange: *const fn (
            self: *const IChangeConflict,
            p_resolve_action: ?*SYNC_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResolveActionForChange: *const fn (
            self: *const IChangeConflict,
            resolve_action: SYNC_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolveActionForChangeUnit: *const fn (
            self: *const IChangeConflict,
            p_change_unit: ?*ISyncChangeUnit,
            p_resolve_action: ?*SYNC_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResolveActionForChangeUnit: *const fn (
            self: *const IChangeConflict,
            p_change_unit: ?*ISyncChangeUnit,
            resolve_action: SYNC_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDestinationProviderConflictingChange(self: *const T, pp_conflicting_change_: ?*?*ISyncChange) HRESULT {
                return @as(*const IChangeConflict.VTable, @ptrCast(self.vtable)).GetDestinationProviderConflictingChange(@as(*const IChangeConflict, @ptrCast(self)), pp_conflicting_change_);
            }
            pub inline fn getSourceProviderConflictingChange(self: *const T, pp_conflicting_change_: ?*?*ISyncChange) HRESULT {
                return @as(*const IChangeConflict.VTable, @ptrCast(self.vtable)).GetSourceProviderConflictingChange(@as(*const IChangeConflict, @ptrCast(self)), pp_conflicting_change_);
            }
            pub inline fn getDestinationProviderConflictingData(self: *const T, pp_conflicting_data_: ?*?*IUnknown) HRESULT {
                return @as(*const IChangeConflict.VTable, @ptrCast(self.vtable)).GetDestinationProviderConflictingData(@as(*const IChangeConflict, @ptrCast(self)), pp_conflicting_data_);
            }
            pub inline fn getSourceProviderConflictingData(self: *const T, pp_conflicting_data_: ?*?*IUnknown) HRESULT {
                return @as(*const IChangeConflict.VTable, @ptrCast(self.vtable)).GetSourceProviderConflictingData(@as(*const IChangeConflict, @ptrCast(self)), pp_conflicting_data_);
            }
            pub inline fn getResolveActionForChange(self: *const T, p_resolve_action_: ?*SYNC_RESOLVE_ACTION) HRESULT {
                return @as(*const IChangeConflict.VTable, @ptrCast(self.vtable)).GetResolveActionForChange(@as(*const IChangeConflict, @ptrCast(self)), p_resolve_action_);
            }
            pub inline fn setResolveActionForChange(self: *const T, resolve_action_: SYNC_RESOLVE_ACTION) HRESULT {
                return @as(*const IChangeConflict.VTable, @ptrCast(self.vtable)).SetResolveActionForChange(@as(*const IChangeConflict, @ptrCast(self)), resolve_action_);
            }
            pub inline fn getResolveActionForChangeUnit(self: *const T, p_change_unit_: ?*ISyncChangeUnit, p_resolve_action_: ?*SYNC_RESOLVE_ACTION) HRESULT {
                return @as(*const IChangeConflict.VTable, @ptrCast(self.vtable)).GetResolveActionForChangeUnit(@as(*const IChangeConflict, @ptrCast(self)), p_change_unit_, p_resolve_action_);
            }
            pub inline fn setResolveActionForChangeUnit(self: *const T, p_change_unit_: ?*ISyncChangeUnit, resolve_action_: SYNC_RESOLVE_ACTION) HRESULT {
                return @as(*const IChangeConflict.VTable, @ptrCast(self.vtable)).SetResolveActionForChangeUnit(@as(*const IChangeConflict, @ptrCast(self)), p_change_unit_, resolve_action_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IConstraintConflict_Value = Guid.initString("00d2302e-1cf8-4835-b85f-b7ca4f799e0a");
pub const IID_IConstraintConflict = &IID_IConstraintConflict_Value;
pub const IConstraintConflict = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDestinationProviderConflictingChange: *const fn (
            self: *const IConstraintConflict,
            pp_conflicting_change: ?*?*ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceProviderConflictingChange: *const fn (
            self: *const IConstraintConflict,
            pp_conflicting_change: ?*?*ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDestinationProviderOriginalChange: *const fn (
            self: *const IConstraintConflict,
            pp_original_change: ?*?*ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDestinationProviderConflictingData: *const fn (
            self: *const IConstraintConflict,
            pp_conflicting_data: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceProviderConflictingData: *const fn (
            self: *const IConstraintConflict,
            pp_conflicting_data: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDestinationProviderOriginalData: *const fn (
            self: *const IConstraintConflict,
            pp_original_data: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConstraintResolveActionForChange: *const fn (
            self: *const IConstraintConflict,
            p_constraint_resolve_action: ?*SYNC_CONSTRAINT_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConstraintResolveActionForChange: *const fn (
            self: *const IConstraintConflict,
            constraint_resolve_action: SYNC_CONSTRAINT_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConstraintResolveActionForChangeUnit: *const fn (
            self: *const IConstraintConflict,
            p_change_unit: ?*ISyncChangeUnit,
            p_constraint_resolve_action: ?*SYNC_CONSTRAINT_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConstraintResolveActionForChangeUnit: *const fn (
            self: *const IConstraintConflict,
            p_change_unit: ?*ISyncChangeUnit,
            constraint_resolve_action: SYNC_CONSTRAINT_RESOLVE_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConstraintConflictReason: *const fn (
            self: *const IConstraintConflict,
            p_constraint_conflict_reason: ?*CONSTRAINT_CONFLICT_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsTemporary: *const fn (
            self: *const IConstraintConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDestinationProviderConflictingChange(self: *const T, pp_conflicting_change_: ?*?*ISyncChange) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).GetDestinationProviderConflictingChange(@as(*const IConstraintConflict, @ptrCast(self)), pp_conflicting_change_);
            }
            pub inline fn getSourceProviderConflictingChange(self: *const T, pp_conflicting_change_: ?*?*ISyncChange) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).GetSourceProviderConflictingChange(@as(*const IConstraintConflict, @ptrCast(self)), pp_conflicting_change_);
            }
            pub inline fn getDestinationProviderOriginalChange(self: *const T, pp_original_change_: ?*?*ISyncChange) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).GetDestinationProviderOriginalChange(@as(*const IConstraintConflict, @ptrCast(self)), pp_original_change_);
            }
            pub inline fn getDestinationProviderConflictingData(self: *const T, pp_conflicting_data_: ?*?*IUnknown) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).GetDestinationProviderConflictingData(@as(*const IConstraintConflict, @ptrCast(self)), pp_conflicting_data_);
            }
            pub inline fn getSourceProviderConflictingData(self: *const T, pp_conflicting_data_: ?*?*IUnknown) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).GetSourceProviderConflictingData(@as(*const IConstraintConflict, @ptrCast(self)), pp_conflicting_data_);
            }
            pub inline fn getDestinationProviderOriginalData(self: *const T, pp_original_data_: ?*?*IUnknown) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).GetDestinationProviderOriginalData(@as(*const IConstraintConflict, @ptrCast(self)), pp_original_data_);
            }
            pub inline fn getConstraintResolveActionForChange(self: *const T, p_constraint_resolve_action_: ?*SYNC_CONSTRAINT_RESOLVE_ACTION) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).GetConstraintResolveActionForChange(@as(*const IConstraintConflict, @ptrCast(self)), p_constraint_resolve_action_);
            }
            pub inline fn setConstraintResolveActionForChange(self: *const T, constraint_resolve_action_: SYNC_CONSTRAINT_RESOLVE_ACTION) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).SetConstraintResolveActionForChange(@as(*const IConstraintConflict, @ptrCast(self)), constraint_resolve_action_);
            }
            pub inline fn getConstraintResolveActionForChangeUnit(self: *const T, p_change_unit_: ?*ISyncChangeUnit, p_constraint_resolve_action_: ?*SYNC_CONSTRAINT_RESOLVE_ACTION) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).GetConstraintResolveActionForChangeUnit(@as(*const IConstraintConflict, @ptrCast(self)), p_change_unit_, p_constraint_resolve_action_);
            }
            pub inline fn setConstraintResolveActionForChangeUnit(self: *const T, p_change_unit_: ?*ISyncChangeUnit, constraint_resolve_action_: SYNC_CONSTRAINT_RESOLVE_ACTION) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).SetConstraintResolveActionForChangeUnit(@as(*const IConstraintConflict, @ptrCast(self)), p_change_unit_, constraint_resolve_action_);
            }
            pub inline fn getConstraintConflictReason(self: *const T, p_constraint_conflict_reason_: ?*CONSTRAINT_CONFLICT_REASON) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).GetConstraintConflictReason(@as(*const IConstraintConflict, @ptrCast(self)), p_constraint_conflict_reason_);
            }
            pub inline fn isTemporary(self: *const T) HRESULT {
                return @as(*const IConstraintConflict.VTable, @ptrCast(self.vtable)).IsTemporary(@as(*const IConstraintConflict, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncCallback_Value = Guid.initString("0599797f-5ed9-485c-ae36-0c5d1bf2e7a5");
pub const IID_ISyncCallback = &IID_ISyncCallback_Value;
pub const ISyncCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnProgress: *const fn (
            self: *const ISyncCallback,
            provider: SYNC_PROVIDER_ROLE,
            sync_stage: SYNC_PROGRESS_STAGE,
            dw_completed_work: u32,
            dw_total_work: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnChange: *const fn (
            self: *const ISyncCallback,
            p_sync_change: ?*ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnConflict: *const fn (
            self: *const ISyncCallback,
            p_conflict: ?*IChangeConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFullEnumerationNeeded: *const fn (
            self: *const ISyncCallback,
            p_full_enumeration_action: ?*SYNC_FULL_ENUMERATION_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnRecoverableError: *const fn (
            self: *const ISyncCallback,
            p_recoverable_error: ?*IRecoverableError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onProgress(self: *const T, provider_: SYNC_PROVIDER_ROLE, sync_stage_: SYNC_PROGRESS_STAGE, dw_completed_work_: u32, dw_total_work_: u32) HRESULT {
                return @as(*const ISyncCallback.VTable, @ptrCast(self.vtable)).OnProgress(@as(*const ISyncCallback, @ptrCast(self)), provider_, sync_stage_, dw_completed_work_, dw_total_work_);
            }
            pub inline fn onChange(self: *const T, p_sync_change_: ?*ISyncChange) HRESULT {
                return @as(*const ISyncCallback.VTable, @ptrCast(self.vtable)).OnChange(@as(*const ISyncCallback, @ptrCast(self)), p_sync_change_);
            }
            pub inline fn onConflict(self: *const T, p_conflict_: ?*IChangeConflict) HRESULT {
                return @as(*const ISyncCallback.VTable, @ptrCast(self.vtable)).OnConflict(@as(*const ISyncCallback, @ptrCast(self)), p_conflict_);
            }
            pub inline fn onFullEnumerationNeeded(self: *const T, p_full_enumeration_action_: ?*SYNC_FULL_ENUMERATION_ACTION) HRESULT {
                return @as(*const ISyncCallback.VTable, @ptrCast(self.vtable)).OnFullEnumerationNeeded(@as(*const ISyncCallback, @ptrCast(self)), p_full_enumeration_action_);
            }
            pub inline fn onRecoverableError(self: *const T, p_recoverable_error_: ?*IRecoverableError) HRESULT {
                return @as(*const ISyncCallback.VTable, @ptrCast(self.vtable)).OnRecoverableError(@as(*const ISyncCallback, @ptrCast(self)), p_recoverable_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncCallback2_Value = Guid.initString("47ce84af-7442-4ead-8630-12015e030ad7");
pub const IID_ISyncCallback2 = &IID_ISyncCallback2_Value;
pub const ISyncCallback2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncCallback.VTable,
        OnChangeApplied: *const fn (
            self: *const ISyncCallback2,
            dw_changes_applied: u32,
            dw_changes_failed: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnChangeFailed: *const fn (
            self: *const ISyncCallback2,
            dw_changes_applied: u32,
            dw_changes_failed: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncCallback.MethodMixin(T);
            pub inline fn onChangeApplied(self: *const T, dw_changes_applied_: u32, dw_changes_failed_: u32) HRESULT {
                return @as(*const ISyncCallback2.VTable, @ptrCast(self.vtable)).OnChangeApplied(@as(*const ISyncCallback2, @ptrCast(self)), dw_changes_applied_, dw_changes_failed_);
            }
            pub inline fn onChangeFailed(self: *const T, dw_changes_applied_: u32, dw_changes_failed_: u32) HRESULT {
                return @as(*const ISyncCallback2.VTable, @ptrCast(self.vtable)).OnChangeFailed(@as(*const ISyncCallback2, @ptrCast(self)), dw_changes_applied_, dw_changes_failed_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncConstraintCallback_Value = Guid.initString("8af3843e-75b3-438c-bb51-6f020d70d3cb");
pub const IID_ISyncConstraintCallback = &IID_ISyncConstraintCallback_Value;
pub const ISyncConstraintCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConstraintConflict: *const fn (
            self: *const ISyncConstraintCallback,
            p_conflict: ?*IConstraintConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onConstraintConflict(self: *const T, p_conflict_: ?*IConstraintConflict) HRESULT {
                return @as(*const ISyncConstraintCallback.VTable, @ptrCast(self.vtable)).OnConstraintConflict(@as(*const ISyncConstraintCallback, @ptrCast(self)), p_conflict_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncProvider_Value = Guid.initString("8f657056-2bce-4a17-8c68-c7bb7898b56f");
pub const IID_ISyncProvider = &IID_ISyncProvider_Value;
pub const ISyncProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdParameters: *const fn (
            self: *const ISyncProvider,
            p_id_parameters: ?*ID_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIdParameters(self: *const T, p_id_parameters_: ?*ID_PARAMETERS) HRESULT {
                return @as(*const ISyncProvider.VTable, @ptrCast(self.vtable)).GetIdParameters(@as(*const ISyncProvider, @ptrCast(self)), p_id_parameters_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncSessionState_Value = Guid.initString("b8a940fe-9f01-483b-9434-c37d361225d9");
pub const IID_ISyncSessionState = &IID_ISyncSessionState_Value;
pub const ISyncSessionState = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsCanceled: *const fn (
            self: *const ISyncSessionState,
            pf_is_canceled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfoForChangeApplication: *const fn (
            self: *const ISyncSessionState,
            pb_change_applier_info: ?*u8,
            pcb_change_applier_info: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadInfoFromChangeApplication: *const fn (
            self: *const ISyncSessionState,
            pb_change_applier_info: ?*const u8,
            cb_change_applier_info: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForgottenKnowledgeRecoveryRangeStart: *const fn (
            self: *const ISyncSessionState,
            pb_range_start: ?*u8,
            pcb_range_start: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForgottenKnowledgeRecoveryRangeEnd: *const fn (
            self: *const ISyncSessionState,
            pb_range_end: ?*u8,
            pcb_range_end: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetForgottenKnowledgeRecoveryRange: *const fn (
            self: *const ISyncSessionState,
            p_range: ?*const SYNC_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnProgress: *const fn (
            self: *const ISyncSessionState,
            provider: SYNC_PROVIDER_ROLE,
            sync_stage: SYNC_PROGRESS_STAGE,
            dw_completed_work: u32,
            dw_total_work: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isCanceled(self: *const T, pf_is_canceled_: ?*BOOL) HRESULT {
                return @as(*const ISyncSessionState.VTable, @ptrCast(self.vtable)).IsCanceled(@as(*const ISyncSessionState, @ptrCast(self)), pf_is_canceled_);
            }
            pub inline fn getInfoForChangeApplication(self: *const T, pb_change_applier_info_: ?*u8, pcb_change_applier_info_: ?*u32) HRESULT {
                return @as(*const ISyncSessionState.VTable, @ptrCast(self.vtable)).GetInfoForChangeApplication(@as(*const ISyncSessionState, @ptrCast(self)), pb_change_applier_info_, pcb_change_applier_info_);
            }
            pub inline fn loadInfoFromChangeApplication(self: *const T, pb_change_applier_info_: ?*const u8, cb_change_applier_info_: u32) HRESULT {
                return @as(*const ISyncSessionState.VTable, @ptrCast(self.vtable)).LoadInfoFromChangeApplication(@as(*const ISyncSessionState, @ptrCast(self)), pb_change_applier_info_, cb_change_applier_info_);
            }
            pub inline fn getForgottenKnowledgeRecoveryRangeStart(self: *const T, pb_range_start_: ?*u8, pcb_range_start_: ?*u32) HRESULT {
                return @as(*const ISyncSessionState.VTable, @ptrCast(self.vtable)).GetForgottenKnowledgeRecoveryRangeStart(@as(*const ISyncSessionState, @ptrCast(self)), pb_range_start_, pcb_range_start_);
            }
            pub inline fn getForgottenKnowledgeRecoveryRangeEnd(self: *const T, pb_range_end_: ?*u8, pcb_range_end_: ?*u32) HRESULT {
                return @as(*const ISyncSessionState.VTable, @ptrCast(self.vtable)).GetForgottenKnowledgeRecoveryRangeEnd(@as(*const ISyncSessionState, @ptrCast(self)), pb_range_end_, pcb_range_end_);
            }
            pub inline fn setForgottenKnowledgeRecoveryRange(self: *const T, p_range_: ?*const SYNC_RANGE) HRESULT {
                return @as(*const ISyncSessionState.VTable, @ptrCast(self.vtable)).SetForgottenKnowledgeRecoveryRange(@as(*const ISyncSessionState, @ptrCast(self)), p_range_);
            }
            pub inline fn onProgress(self: *const T, provider_: SYNC_PROVIDER_ROLE, sync_stage_: SYNC_PROGRESS_STAGE, dw_completed_work_: u32, dw_total_work_: u32) HRESULT {
                return @as(*const ISyncSessionState.VTable, @ptrCast(self.vtable)).OnProgress(@as(*const ISyncSessionState, @ptrCast(self)), provider_, sync_stage_, dw_completed_work_, dw_total_work_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncSessionExtendedErrorInfo_Value = Guid.initString("326c6810-790a-409b-b741-6999388761eb");
pub const IID_ISyncSessionExtendedErrorInfo = &IID_ISyncSessionExtendedErrorInfo_Value;
pub const ISyncSessionExtendedErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSyncProviderWithError: *const fn (
            self: *const ISyncSessionExtendedErrorInfo,
            pp_provider_with_error: ?*?*ISyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSyncProviderWithError(self: *const T, pp_provider_with_error_: ?*?*ISyncProvider) HRESULT {
                return @as(*const ISyncSessionExtendedErrorInfo.VTable, @ptrCast(self.vtable)).GetSyncProviderWithError(@as(*const ISyncSessionExtendedErrorInfo, @ptrCast(self)), pp_provider_with_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncSessionState2_Value = Guid.initString("9e37cfa3-9e38-4c61-9ca3-ffe810b45ca2");
pub const IID_ISyncSessionState2 = &IID_ISyncSessionState2_Value;
pub const ISyncSessionState2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncSessionState.VTable,
        SetProviderWithError: *const fn (
            self: *const ISyncSessionState2,
            f_self: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSessionErrorStatus: *const fn (
            self: *const ISyncSessionState2,
            phr_session_error: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncSessionState.MethodMixin(T);
            pub inline fn setProviderWithError(self: *const T, f_self_: BOOL) HRESULT {
                return @as(*const ISyncSessionState2.VTable, @ptrCast(self.vtable)).SetProviderWithError(@as(*const ISyncSessionState2, @ptrCast(self)), f_self_);
            }
            pub inline fn getSessionErrorStatus(self: *const T, phr_session_error_: ?*HRESULT) HRESULT {
                return @as(*const ISyncSessionState2.VTable, @ptrCast(self.vtable)).GetSessionErrorStatus(@as(*const ISyncSessionState2, @ptrCast(self)), phr_session_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncFilterInfo_Value = Guid.initString("794eaaf8-3f2e-47e6-9728-17e6fcf94cb7");
pub const IID_ISyncFilterInfo = &IID_ISyncFilterInfo_Value;
pub const ISyncFilterInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Serialize: *const fn (
            self: *const ISyncFilterInfo,
            pb_buffer: ?*u8,
            pcb_buffer: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn serialize(self: *const T, pb_buffer_: ?*u8, pcb_buffer_: ?*u32) HRESULT {
                return @as(*const ISyncFilterInfo.VTable, @ptrCast(self.vtable)).Serialize(@as(*const ISyncFilterInfo, @ptrCast(self)), pb_buffer_, pcb_buffer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncFilterInfo2_Value = Guid.initString("19b394ba-e3d0-468c-934d-321968b2ab34");
pub const IID_ISyncFilterInfo2 = &IID_ISyncFilterInfo2_Value;
pub const ISyncFilterInfo2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncFilterInfo.VTable,
        GetFlags: *const fn (
            self: *const ISyncFilterInfo2,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncFilterInfo.MethodMixin(T);
            pub inline fn getFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const ISyncFilterInfo2.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const ISyncFilterInfo2, @ptrCast(self)), pdw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IChangeUnitListFilterInfo_Value = Guid.initString("f2837671-0bdf-43fa-b502-232375fb50c2");
pub const IID_IChangeUnitListFilterInfo = &IID_IChangeUnitListFilterInfo_Value;
pub const IChangeUnitListFilterInfo = extern struct {
    pub const VTable = extern struct {
        base: ISyncFilterInfo.VTable,
        Initialize: *const fn (
            self: *const IChangeUnitListFilterInfo,
            ppb_change_unit_ids: ?*const ?*u8,
            dw_change_unit_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitIdCount: *const fn (
            self: *const IChangeUnitListFilterInfo,
            pdw_change_unit_id_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitId: *const fn (
            self: *const IChangeUnitListFilterInfo,
            dw_change_unit_id_index: u32,
            pb_change_unit_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncFilterInfo.MethodMixin(T);
            pub inline fn initialize(self: *const T, ppb_change_unit_ids_: ?*const ?*u8, dw_change_unit_count_: u32) HRESULT {
                return @as(*const IChangeUnitListFilterInfo.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IChangeUnitListFilterInfo, @ptrCast(self)), ppb_change_unit_ids_, dw_change_unit_count_);
            }
            pub inline fn getChangeUnitIdCount(self: *const T, pdw_change_unit_id_count_: ?*u32) HRESULT {
                return @as(*const IChangeUnitListFilterInfo.VTable, @ptrCast(self.vtable)).GetChangeUnitIdCount(@as(*const IChangeUnitListFilterInfo, @ptrCast(self)), pdw_change_unit_id_count_);
            }
            pub inline fn getChangeUnitId(self: *const T, dw_change_unit_id_index_: u32, pb_change_unit_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const IChangeUnitListFilterInfo.VTable, @ptrCast(self.vtable)).GetChangeUnitId(@as(*const IChangeUnitListFilterInfo, @ptrCast(self)), dw_change_unit_id_index_, pb_change_unit_id_, pcb_id_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFilter_Value = Guid.initString("087a3f15-0fcb-44c1-9639-53c14e2b5506");
pub const IID_ISyncFilter = &IID_ISyncFilter_Value;
pub const ISyncFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsIdentical: *const fn (
            self: *const ISyncFilter,
            p_sync_filter: ?*ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: *const fn (
            self: *const ISyncFilter,
            pb_sync_filter: ?*u8,
            pcb_sync_filter: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isIdentical(self: *const T, p_sync_filter_: ?*ISyncFilter) HRESULT {
                return @as(*const ISyncFilter.VTable, @ptrCast(self.vtable)).IsIdentical(@as(*const ISyncFilter, @ptrCast(self)), p_sync_filter_);
            }
            pub inline fn serialize(self: *const T, pb_sync_filter_: ?*u8, pcb_sync_filter_: ?*u32) HRESULT {
                return @as(*const ISyncFilter.VTable, @ptrCast(self.vtable)).Serialize(@as(*const ISyncFilter, @ptrCast(self)), pb_sync_filter_, pcb_sync_filter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFilterDeserializer_Value = Guid.initString("b45b7a72-e5c7-46be-9c82-77b8b15dab8a");
pub const IID_ISyncFilterDeserializer = &IID_ISyncFilterDeserializer_Value;
pub const ISyncFilterDeserializer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeserializeSyncFilter: *const fn (
            self: *const ISyncFilterDeserializer,
            pb_sync_filter: ?*const u8,
            dw_cb_sync_filter: u32,
            pp_i_sync_filter: ?*?*ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn deserializeSyncFilter(self: *const T, pb_sync_filter_: ?*const u8, dw_cb_sync_filter_: u32, pp_i_sync_filter_: ?*?*ISyncFilter) HRESULT {
                return @as(*const ISyncFilterDeserializer.VTable, @ptrCast(self.vtable)).DeserializeSyncFilter(@as(*const ISyncFilterDeserializer, @ptrCast(self)), pb_sync_filter_, dw_cb_sync_filter_, pp_i_sync_filter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICustomFilterInfo_Value = Guid.initString("1d335dff-6f88-4e4d-91a8-a3f351cfd473");
pub const IID_ICustomFilterInfo = &IID_ICustomFilterInfo_Value;
pub const ICustomFilterInfo = extern struct {
    pub const VTable = extern struct {
        base: ISyncFilterInfo.VTable,
        GetSyncFilter: *const fn (
            self: *const ICustomFilterInfo,
            p_i_sync_filter: ?*?*ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncFilterInfo.MethodMixin(T);
            pub inline fn getSyncFilter(self: *const T, p_i_sync_filter_: ?*?*ISyncFilter) HRESULT {
                return @as(*const ICustomFilterInfo.VTable, @ptrCast(self.vtable)).GetSyncFilter(@as(*const ICustomFilterInfo, @ptrCast(self)), p_i_sync_filter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FILTER_COMBINATION_TYPE = enum(i32) {
    N = 0,
};
pub const FCT_INTERSECTION = FILTER_COMBINATION_TYPE.N;

const IID_ICombinedFilterInfo_Value = Guid.initString("11f9de71-2818-4779-b2ac-42d450565f45");
pub const IID_ICombinedFilterInfo = &IID_ICombinedFilterInfo_Value;
pub const ICombinedFilterInfo = extern struct {
    pub const VTable = extern struct {
        base: ISyncFilterInfo.VTable,
        GetFilterCount: *const fn (
            self: *const ICombinedFilterInfo,
            pdw_filter_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterInfo: *const fn (
            self: *const ICombinedFilterInfo,
            dw_filter_index: u32,
            pp_i_filter_info: ?*?*ISyncFilterInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterCombinationType: *const fn (
            self: *const ICombinedFilterInfo,
            p_filter_combination_type: ?*FILTER_COMBINATION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncFilterInfo.MethodMixin(T);
            pub inline fn getFilterCount(self: *const T, pdw_filter_count_: ?*u32) HRESULT {
                return @as(*const ICombinedFilterInfo.VTable, @ptrCast(self.vtable)).GetFilterCount(@as(*const ICombinedFilterInfo, @ptrCast(self)), pdw_filter_count_);
            }
            pub inline fn getFilterInfo(self: *const T, dw_filter_index_: u32, pp_i_filter_info_: ?*?*ISyncFilterInfo) HRESULT {
                return @as(*const ICombinedFilterInfo.VTable, @ptrCast(self.vtable)).GetFilterInfo(@as(*const ICombinedFilterInfo, @ptrCast(self)), dw_filter_index_, pp_i_filter_info_);
            }
            pub inline fn getFilterCombinationType(self: *const T, p_filter_combination_type_: ?*FILTER_COMBINATION_TYPE) HRESULT {
                return @as(*const ICombinedFilterInfo.VTable, @ptrCast(self.vtable)).GetFilterCombinationType(@as(*const ICombinedFilterInfo, @ptrCast(self)), p_filter_combination_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnumSyncChanges_Value = Guid.initString("5f86be4a-5e78-4e32-ac1c-c24fd223ef85");
pub const IID_IEnumSyncChanges = &IID_IEnumSyncChanges_Value;
pub const IEnumSyncChanges = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumSyncChanges,
            c_changes: u32,
            pp_change: ?*?*ISyncChange,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumSyncChanges,
            c_changes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumSyncChanges,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumSyncChanges,
            pp_enum: ?*?*IEnumSyncChanges,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_changes_: u32, pp_change_: ?*?*ISyncChange, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumSyncChanges.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumSyncChanges, @ptrCast(self)), c_changes_, pp_change_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_changes_: u32) HRESULT {
                return @as(*const IEnumSyncChanges.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumSyncChanges, @ptrCast(self)), c_changes_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumSyncChanges.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumSyncChanges, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumSyncChanges) HRESULT {
                return @as(*const IEnumSyncChanges.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumSyncChanges, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncChangeBuilder_Value = Guid.initString("56f14771-8677-484f-a170-e386e418a676");
pub const IID_ISyncChangeBuilder = &IID_ISyncChangeBuilder_Value;
pub const ISyncChangeBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddChangeUnitMetadata: *const fn (
            self: *const ISyncChangeBuilder,
            pb_change_unit_id: ?*const u8,
            p_change_unit_version: ?*const SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addChangeUnitMetadata(self: *const T, pb_change_unit_id_: ?*const u8, p_change_unit_version_: ?*const SYNC_VERSION) HRESULT {
                return @as(*const ISyncChangeBuilder.VTable, @ptrCast(self.vtable)).AddChangeUnitMetadata(@as(*const ISyncChangeBuilder, @ptrCast(self)), pb_change_unit_id_, p_change_unit_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFilterTrackingSyncChangeBuilder_Value = Guid.initString("295024a0-70da-4c58-883c-ce2afb308d0b");
pub const IID_IFilterTrackingSyncChangeBuilder = &IID_IFilterTrackingSyncChangeBuilder_Value;
pub const IFilterTrackingSyncChangeBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddFilterChange: *const fn (
            self: *const IFilterTrackingSyncChangeBuilder,
            dw_filter_key: u32,
            p_filter_change: ?*const SYNC_FILTER_CHANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllChangeUnitsPresentFlag: *const fn (
            self: *const IFilterTrackingSyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addFilterChange(self: *const T, dw_filter_key_: u32, p_filter_change_: ?*const SYNC_FILTER_CHANGE) HRESULT {
                return @as(*const IFilterTrackingSyncChangeBuilder.VTable, @ptrCast(self.vtable)).AddFilterChange(@as(*const IFilterTrackingSyncChangeBuilder, @ptrCast(self)), dw_filter_key_, p_filter_change_);
            }
            pub inline fn setAllChangeUnitsPresentFlag(self: *const T) HRESULT {
                return @as(*const IFilterTrackingSyncChangeBuilder.VTable, @ptrCast(self.vtable)).SetAllChangeUnitsPresentFlag(@as(*const IFilterTrackingSyncChangeBuilder, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncChangeBatchBase_Value = Guid.initString("52f6e694-6a71-4494-a184-a8311bf5d227");
pub const IID_ISyncChangeBatchBase = &IID_ISyncChangeBatchBase_Value;
pub const ISyncChangeBatchBase = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetChangeEnumerator: *const fn (
            self: *const ISyncChangeBatchBase,
            pp_enum: ?*?*IEnumSyncChanges,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsLastBatch: *const fn (
            self: *const ISyncChangeBatchBase,
            pf_last_batch: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkEstimateForBatch: *const fn (
            self: *const ISyncChangeBatchBase,
            pdw_work_for_batch: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemainingWorkEstimateForSession: *const fn (
            self: *const ISyncChangeBatchBase,
            pdw_remaining_work_for_session: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginOrderedGroup: *const fn (
            self: *const ISyncChangeBatchBase,
            pb_lower_bound: ?*const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndOrderedGroup: *const fn (
            self: *const ISyncChangeBatchBase,
            pb_upper_bound: ?*const u8,
            p_made_with_knowledge: ?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItemMetadataToGroup: *const fn (
            self: *const ISyncChangeBatchBase,
            pb_owner_replica_id: ?*const u8,
            pb_item_id: ?*const u8,
            p_change_version: ?*const SYNC_VERSION,
            p_creation_version: ?*const SYNC_VERSION,
            dw_flags: u32,
            dw_work_for_change: u32,
            pp_change_builder: ?*?*ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedKnowledge: *const fn (
            self: *const ISyncChangeBatchBase,
            pp_learned_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrerequisiteKnowledge: *const fn (
            self: *const ISyncChangeBatchBase,
            pp_prerequiste_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceForgottenKnowledge: *const fn (
            self: *const ISyncChangeBatchBase,
            pp_source_forgotten_knowledge: ?*?*IForgottenKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLastBatch: *const fn (
            self: *const ISyncChangeBatchBase,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkEstimateForBatch: *const fn (
            self: *const ISyncChangeBatchBase,
            dw_work_for_batch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRemainingWorkEstimateForSession: *const fn (
            self: *const ISyncChangeBatchBase,
            dw_remaining_work_for_session: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: *const fn (
            self: *const ISyncChangeBatchBase,
            pb_change_batch: ?*u8,
            pcb_change_batch: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getChangeEnumerator(self: *const T, pp_enum_: ?*?*IEnumSyncChanges) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).GetChangeEnumerator(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getIsLastBatch(self: *const T, pf_last_batch_: ?*BOOL) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).GetIsLastBatch(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pf_last_batch_);
            }
            pub inline fn getWorkEstimateForBatch(self: *const T, pdw_work_for_batch_: ?*u32) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).GetWorkEstimateForBatch(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pdw_work_for_batch_);
            }
            pub inline fn getRemainingWorkEstimateForSession(self: *const T, pdw_remaining_work_for_session_: ?*u32) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).GetRemainingWorkEstimateForSession(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pdw_remaining_work_for_session_);
            }
            pub inline fn beginOrderedGroup(self: *const T, pb_lower_bound_: ?*const u8) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).BeginOrderedGroup(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pb_lower_bound_);
            }
            pub inline fn endOrderedGroup(self: *const T, pb_upper_bound_: ?*const u8, p_made_with_knowledge_: ?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).EndOrderedGroup(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pb_upper_bound_, p_made_with_knowledge_);
            }
            pub inline fn addItemMetadataToGroup(self: *const T, pb_owner_replica_id_: ?*const u8, pb_item_id_: ?*const u8, p_change_version_: ?*const SYNC_VERSION, p_creation_version_: ?*const SYNC_VERSION, dw_flags_: u32, dw_work_for_change_: u32, pp_change_builder_: ?*?*ISyncChangeBuilder) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).AddItemMetadataToGroup(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pb_owner_replica_id_, pb_item_id_, p_change_version_, p_creation_version_, dw_flags_, dw_work_for_change_, pp_change_builder_);
            }
            pub inline fn getLearnedKnowledge(self: *const T, pp_learned_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).GetLearnedKnowledge(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pp_learned_knowledge_);
            }
            pub inline fn getPrerequisiteKnowledge(self: *const T, pp_prerequiste_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).GetPrerequisiteKnowledge(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pp_prerequiste_knowledge_);
            }
            pub inline fn getSourceForgottenKnowledge(self: *const T, pp_source_forgotten_knowledge_: ?*?*IForgottenKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).GetSourceForgottenKnowledge(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pp_source_forgotten_knowledge_);
            }
            pub inline fn setLastBatch(self: *const T) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).SetLastBatch(@as(*const ISyncChangeBatchBase, @ptrCast(self)));
            }
            pub inline fn setWorkEstimateForBatch(self: *const T, dw_work_for_batch_: u32) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).SetWorkEstimateForBatch(@as(*const ISyncChangeBatchBase, @ptrCast(self)), dw_work_for_batch_);
            }
            pub inline fn setRemainingWorkEstimateForSession(self: *const T, dw_remaining_work_for_session_: u32) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).SetRemainingWorkEstimateForSession(@as(*const ISyncChangeBatchBase, @ptrCast(self)), dw_remaining_work_for_session_);
            }
            pub inline fn serialize(self: *const T, pb_change_batch_: ?*u8, pcb_change_batch_: ?*u32) HRESULT {
                return @as(*const ISyncChangeBatchBase.VTable, @ptrCast(self.vtable)).Serialize(@as(*const ISyncChangeBatchBase, @ptrCast(self)), pb_change_batch_, pcb_change_batch_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncChangeBatch_Value = Guid.initString("70c64dee-380f-4c2e-8f70-31c55bd5f9b3");
pub const IID_ISyncChangeBatch = &IID_ISyncChangeBatch_Value;
pub const ISyncChangeBatch = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatchBase.VTable,
        BeginUnorderedGroup: *const fn (
            self: *const ISyncChangeBatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndUnorderedGroup: *const fn (
            self: *const ISyncChangeBatch,
            p_made_with_knowledge: ?*ISyncKnowledge,
            f_all_changes_for_knowledge: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddLoggedConflict: *const fn (
            self: *const ISyncChangeBatch,
            pb_owner_replica_id: ?*const u8,
            pb_item_id: ?*const u8,
            p_change_version: ?*const SYNC_VERSION,
            p_creation_version: ?*const SYNC_VERSION,
            dw_flags: u32,
            dw_work_for_change: u32,
            p_conflict_knowledge: ?*ISyncKnowledge,
            pp_change_builder: ?*?*ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncChangeBatchBase.MethodMixin(T);
            pub inline fn beginUnorderedGroup(self: *const T) HRESULT {
                return @as(*const ISyncChangeBatch.VTable, @ptrCast(self.vtable)).BeginUnorderedGroup(@as(*const ISyncChangeBatch, @ptrCast(self)));
            }
            pub inline fn endUnorderedGroup(self: *const T, p_made_with_knowledge_: ?*ISyncKnowledge, f_all_changes_for_knowledge_: BOOL) HRESULT {
                return @as(*const ISyncChangeBatch.VTable, @ptrCast(self.vtable)).EndUnorderedGroup(@as(*const ISyncChangeBatch, @ptrCast(self)), p_made_with_knowledge_, f_all_changes_for_knowledge_);
            }
            pub inline fn addLoggedConflict(self: *const T, pb_owner_replica_id_: ?*const u8, pb_item_id_: ?*const u8, p_change_version_: ?*const SYNC_VERSION, p_creation_version_: ?*const SYNC_VERSION, dw_flags_: u32, dw_work_for_change_: u32, p_conflict_knowledge_: ?*ISyncKnowledge, pp_change_builder_: ?*?*ISyncChangeBuilder) HRESULT {
                return @as(*const ISyncChangeBatch.VTable, @ptrCast(self.vtable)).AddLoggedConflict(@as(*const ISyncChangeBatch, @ptrCast(self)), pb_owner_replica_id_, pb_item_id_, p_change_version_, p_creation_version_, dw_flags_, dw_work_for_change_, p_conflict_knowledge_, pp_change_builder_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncFullEnumerationChangeBatch_Value = Guid.initString("ef64197d-4f44-4ea2-b355-4524713e3bed");
pub const IID_ISyncFullEnumerationChangeBatch = &IID_ISyncFullEnumerationChangeBatch_Value;
pub const ISyncFullEnumerationChangeBatch = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatchBase.VTable,
        GetLearnedKnowledgeAfterRecoveryComplete: *const fn (
            self: *const ISyncFullEnumerationChangeBatch,
            pp_learned_knowledge_after_recovery_complete: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosedLowerBoundItemId: *const fn (
            self: *const ISyncFullEnumerationChangeBatch,
            pb_closed_lower_bound_item_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosedUpperBoundItemId: *const fn (
            self: *const ISyncFullEnumerationChangeBatch,
            pb_closed_upper_bound_item_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncChangeBatchBase.MethodMixin(T);
            pub inline fn getLearnedKnowledgeAfterRecoveryComplete(self: *const T, pp_learned_knowledge_after_recovery_complete_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncFullEnumerationChangeBatch.VTable, @ptrCast(self.vtable)).GetLearnedKnowledgeAfterRecoveryComplete(@as(*const ISyncFullEnumerationChangeBatch, @ptrCast(self)), pp_learned_knowledge_after_recovery_complete_);
            }
            pub inline fn getClosedLowerBoundItemId(self: *const T, pb_closed_lower_bound_item_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const ISyncFullEnumerationChangeBatch.VTable, @ptrCast(self.vtable)).GetClosedLowerBoundItemId(@as(*const ISyncFullEnumerationChangeBatch, @ptrCast(self)), pb_closed_lower_bound_item_id_, pcb_id_size_);
            }
            pub inline fn getClosedUpperBoundItemId(self: *const T, pb_closed_upper_bound_item_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const ISyncFullEnumerationChangeBatch.VTable, @ptrCast(self.vtable)).GetClosedUpperBoundItemId(@as(*const ISyncFullEnumerationChangeBatch, @ptrCast(self)), pb_closed_upper_bound_item_id_, pcb_id_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncChangeBatchWithPrerequisite_Value = Guid.initString("097f13be-5b92-4048-b3f2-7b42a2515e07");
pub const IID_ISyncChangeBatchWithPrerequisite = &IID_ISyncChangeBatchWithPrerequisite_Value;
pub const ISyncChangeBatchWithPrerequisite = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatchBase.VTable,
        SetPrerequisiteKnowledge: *const fn (
            self: *const ISyncChangeBatchWithPrerequisite,
            p_prerequisite_knowledge: ?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedKnowledgeWithPrerequisite: *const fn (
            self: *const ISyncChangeBatchWithPrerequisite,
            p_destination_knowledge: ?*ISyncKnowledge,
            pp_learned_with_prerequisite_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedForgottenKnowledge: *const fn (
            self: *const ISyncChangeBatchWithPrerequisite,
            pp_learned_forgotten_knowledge: ?*?*IForgottenKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncChangeBatchBase.MethodMixin(T);
            pub inline fn setPrerequisiteKnowledge(self: *const T, p_prerequisite_knowledge_: ?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchWithPrerequisite.VTable, @ptrCast(self.vtable)).SetPrerequisiteKnowledge(@as(*const ISyncChangeBatchWithPrerequisite, @ptrCast(self)), p_prerequisite_knowledge_);
            }
            pub inline fn getLearnedKnowledgeWithPrerequisite(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, pp_learned_with_prerequisite_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchWithPrerequisite.VTable, @ptrCast(self.vtable)).GetLearnedKnowledgeWithPrerequisite(@as(*const ISyncChangeBatchWithPrerequisite, @ptrCast(self)), p_destination_knowledge_, pp_learned_with_prerequisite_knowledge_);
            }
            pub inline fn getLearnedForgottenKnowledge(self: *const T, pp_learned_forgotten_knowledge_: ?*?*IForgottenKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchWithPrerequisite.VTable, @ptrCast(self.vtable)).GetLearnedForgottenKnowledge(@as(*const ISyncChangeBatchWithPrerequisite, @ptrCast(self)), pp_learned_forgotten_knowledge_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncChangeBatchBase2_Value = Guid.initString("6fdb596a-d755-4584-bd0c-c0c23a548fbf");
pub const IID_ISyncChangeBatchBase2 = &IID_ISyncChangeBatchBase2_Value;
pub const ISyncChangeBatchBase2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatchBase.VTable,
        SerializeWithOptions: *const fn (
            self: *const ISyncChangeBatchBase2,
            target_format_version: SYNC_SERIALIZATION_VERSION,
            dw_flags: u32,
            pb_buffer: ?*u8,
            pdw_serialized_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncChangeBatchBase.MethodMixin(T);
            pub inline fn serializeWithOptions(self: *const T, target_format_version_: SYNC_SERIALIZATION_VERSION, dw_flags_: u32, pb_buffer_: ?*u8, pdw_serialized_size_: ?*u32) HRESULT {
                return @as(*const ISyncChangeBatchBase2.VTable, @ptrCast(self.vtable)).SerializeWithOptions(@as(*const ISyncChangeBatchBase2, @ptrCast(self)), target_format_version_, dw_flags_, pb_buffer_, pdw_serialized_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncChangeBatchAdvanced_Value = Guid.initString("0f1a4995-cbc8-421d-b550-5d0bebf3e9a5");
pub const IID_ISyncChangeBatchAdvanced = &IID_ISyncChangeBatchAdvanced_Value;
pub const ISyncChangeBatchAdvanced = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFilterInfo: *const fn (
            self: *const ISyncChangeBatchAdvanced,
            pp_filter_info: ?*?*ISyncFilterInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertFullEnumerationChangeBatchToRegularChangeBatch: *const fn (
            self: *const ISyncChangeBatchAdvanced,
            pp_change_batch: ?*?*ISyncChangeBatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUpperBoundItemId: *const fn (
            self: *const ISyncChangeBatchAdvanced,
            pb_item_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBatchLevelKnowledgeShouldBeApplied: *const fn (
            self: *const ISyncChangeBatchAdvanced,
            pf_batch_knowledge_should_be_applied: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFilterInfo(self: *const T, pp_filter_info_: ?*?*ISyncFilterInfo) HRESULT {
                return @as(*const ISyncChangeBatchAdvanced.VTable, @ptrCast(self.vtable)).GetFilterInfo(@as(*const ISyncChangeBatchAdvanced, @ptrCast(self)), pp_filter_info_);
            }
            pub inline fn convertFullEnumerationChangeBatchToRegularChangeBatch(self: *const T, pp_change_batch_: ?*?*ISyncChangeBatch) HRESULT {
                return @as(*const ISyncChangeBatchAdvanced.VTable, @ptrCast(self.vtable)).ConvertFullEnumerationChangeBatchToRegularChangeBatch(@as(*const ISyncChangeBatchAdvanced, @ptrCast(self)), pp_change_batch_);
            }
            pub inline fn getUpperBoundItemId(self: *const T, pb_item_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const ISyncChangeBatchAdvanced.VTable, @ptrCast(self.vtable)).GetUpperBoundItemId(@as(*const ISyncChangeBatchAdvanced, @ptrCast(self)), pb_item_id_, pcb_id_size_);
            }
            pub inline fn getBatchLevelKnowledgeShouldBeApplied(self: *const T, pf_batch_knowledge_should_be_applied_: ?*BOOL) HRESULT {
                return @as(*const ISyncChangeBatchAdvanced.VTable, @ptrCast(self.vtable)).GetBatchLevelKnowledgeShouldBeApplied(@as(*const ISyncChangeBatchAdvanced, @ptrCast(self)), pf_batch_knowledge_should_be_applied_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBatch2_Value = Guid.initString("225f4a33-f5ee-4cc7-b039-67a262b4b2ac");
pub const IID_ISyncChangeBatch2 = &IID_ISyncChangeBatch2_Value;
pub const ISyncChangeBatch2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncChangeBatch.VTable,
        AddMergeTombstoneMetadataToGroup: *const fn (
            self: *const ISyncChangeBatch2,
            pb_owner_replica_id: ?*const u8,
            pb_winner_item_id: ?*const u8,
            pb_item_id: ?*const u8,
            p_change_version: ?*const SYNC_VERSION,
            p_creation_version: ?*const SYNC_VERSION,
            dw_work_for_change: u32,
            pp_change_builder: ?*?*ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMergeTombstoneLoggedConflict: *const fn (
            self: *const ISyncChangeBatch2,
            pb_owner_replica_id: ?*const u8,
            pb_winner_item_id: ?*const u8,
            pb_item_id: ?*const u8,
            p_change_version: ?*const SYNC_VERSION,
            p_creation_version: ?*const SYNC_VERSION,
            dw_work_for_change: u32,
            p_conflict_knowledge: ?*ISyncKnowledge,
            pp_change_builder: ?*?*ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncChangeBatch.MethodMixin(T);
            pub inline fn addMergeTombstoneMetadataToGroup(self: *const T, pb_owner_replica_id_: ?*const u8, pb_winner_item_id_: ?*const u8, pb_item_id_: ?*const u8, p_change_version_: ?*const SYNC_VERSION, p_creation_version_: ?*const SYNC_VERSION, dw_work_for_change_: u32, pp_change_builder_: ?*?*ISyncChangeBuilder) HRESULT {
                return @as(*const ISyncChangeBatch2.VTable, @ptrCast(self.vtable)).AddMergeTombstoneMetadataToGroup(@as(*const ISyncChangeBatch2, @ptrCast(self)), pb_owner_replica_id_, pb_winner_item_id_, pb_item_id_, p_change_version_, p_creation_version_, dw_work_for_change_, pp_change_builder_);
            }
            pub inline fn addMergeTombstoneLoggedConflict(self: *const T, pb_owner_replica_id_: ?*const u8, pb_winner_item_id_: ?*const u8, pb_item_id_: ?*const u8, p_change_version_: ?*const SYNC_VERSION, p_creation_version_: ?*const SYNC_VERSION, dw_work_for_change_: u32, p_conflict_knowledge_: ?*ISyncKnowledge, pp_change_builder_: ?*?*ISyncChangeBuilder) HRESULT {
                return @as(*const ISyncChangeBatch2.VTable, @ptrCast(self.vtable)).AddMergeTombstoneLoggedConflict(@as(*const ISyncChangeBatch2, @ptrCast(self)), pb_owner_replica_id_, pb_winner_item_id_, pb_item_id_, p_change_version_, p_creation_version_, dw_work_for_change_, p_conflict_knowledge_, pp_change_builder_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncFullEnumerationChangeBatch2_Value = Guid.initString("e06449f4-a205-4b65-9724-01b22101eec1");
pub const IID_ISyncFullEnumerationChangeBatch2 = &IID_ISyncFullEnumerationChangeBatch2_Value;
pub const ISyncFullEnumerationChangeBatch2 = extern struct {
    pub const VTable = extern struct {
        base: ISyncFullEnumerationChangeBatch.VTable,
        AddMergeTombstoneMetadataToGroup: *const fn (
            self: *const ISyncFullEnumerationChangeBatch2,
            pb_owner_replica_id: ?*const u8,
            pb_winner_item_id: ?*const u8,
            pb_item_id: ?*const u8,
            p_change_version: ?*const SYNC_VERSION,
            p_creation_version: ?*const SYNC_VERSION,
            dw_work_for_change: u32,
            pp_change_builder: ?*?*ISyncChangeBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncFullEnumerationChangeBatch.MethodMixin(T);
            pub inline fn addMergeTombstoneMetadataToGroup(self: *const T, pb_owner_replica_id_: ?*const u8, pb_winner_item_id_: ?*const u8, pb_item_id_: ?*const u8, p_change_version_: ?*const SYNC_VERSION, p_creation_version_: ?*const SYNC_VERSION, dw_work_for_change_: u32, pp_change_builder_: ?*?*ISyncChangeBuilder) HRESULT {
                return @as(*const ISyncFullEnumerationChangeBatch2.VTable, @ptrCast(self.vtable)).AddMergeTombstoneMetadataToGroup(@as(*const ISyncFullEnumerationChangeBatch2, @ptrCast(self)), pb_owner_replica_id_, pb_winner_item_id_, pb_item_id_, p_change_version_, p_creation_version_, dw_work_for_change_, pp_change_builder_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IKnowledgeSyncProvider_Value = Guid.initString("43434a49-8da4-47f2-8172-ad7b8b024978");
pub const IID_IKnowledgeSyncProvider = &IID_IKnowledgeSyncProvider_Value;
pub const IKnowledgeSyncProvider = extern struct {
    pub const VTable = extern struct {
        base: ISyncProvider.VTable,
        BeginSession: *const fn (
            self: *const IKnowledgeSyncProvider,
            role: SYNC_PROVIDER_ROLE,
            p_session_state: ?*ISyncSessionState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncBatchParameters: *const fn (
            self: *const IKnowledgeSyncProvider,
            pp_sync_knowledge: ?*?*ISyncKnowledge,
            pdw_requested_batch_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeBatch: *const fn (
            self: *const IKnowledgeSyncProvider,
            dw_batch_size: u32,
            p_sync_knowledge: ?*ISyncKnowledge,
            pp_sync_change_batch: ?*?*ISyncChangeBatch,
            pp_unk_data_retriever: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFullEnumerationChangeBatch: *const fn (
            self: *const IKnowledgeSyncProvider,
            dw_batch_size: u32,
            pb_lower_enumeration_bound: ?*const u8,
            p_sync_knowledge: ?*ISyncKnowledge,
            pp_sync_change_batch: ?*?*ISyncFullEnumerationChangeBatch,
            pp_unk_data_retriever: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessChangeBatch: *const fn (
            self: *const IKnowledgeSyncProvider,
            resolution_policy: CONFLICT_RESOLUTION_POLICY,
            p_source_change_batch: ?*ISyncChangeBatch,
            p_unk_data_retriever: ?*IUnknown,
            p_callback: ?*ISyncCallback,
            p_sync_session_statistics: ?*SYNC_SESSION_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessFullEnumerationChangeBatch: *const fn (
            self: *const IKnowledgeSyncProvider,
            resolution_policy: CONFLICT_RESOLUTION_POLICY,
            p_source_change_batch: ?*ISyncFullEnumerationChangeBatch,
            p_unk_data_retriever: ?*IUnknown,
            p_callback: ?*ISyncCallback,
            p_sync_session_statistics: ?*SYNC_SESSION_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSession: *const fn (
            self: *const IKnowledgeSyncProvider,
            p_session_state: ?*ISyncSessionState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncProvider.MethodMixin(T);
            pub inline fn beginSession(self: *const T, role_: SYNC_PROVIDER_ROLE, p_session_state_: ?*ISyncSessionState) HRESULT {
                return @as(*const IKnowledgeSyncProvider.VTable, @ptrCast(self.vtable)).BeginSession(@as(*const IKnowledgeSyncProvider, @ptrCast(self)), role_, p_session_state_);
            }
            pub inline fn getSyncBatchParameters(self: *const T, pp_sync_knowledge_: ?*?*ISyncKnowledge, pdw_requested_batch_size_: ?*u32) HRESULT {
                return @as(*const IKnowledgeSyncProvider.VTable, @ptrCast(self.vtable)).GetSyncBatchParameters(@as(*const IKnowledgeSyncProvider, @ptrCast(self)), pp_sync_knowledge_, pdw_requested_batch_size_);
            }
            pub inline fn getChangeBatch(self: *const T, dw_batch_size_: u32, p_sync_knowledge_: ?*ISyncKnowledge, pp_sync_change_batch_: ?*?*ISyncChangeBatch, pp_unk_data_retriever_: ?*?*IUnknown) HRESULT {
                return @as(*const IKnowledgeSyncProvider.VTable, @ptrCast(self.vtable)).GetChangeBatch(@as(*const IKnowledgeSyncProvider, @ptrCast(self)), dw_batch_size_, p_sync_knowledge_, pp_sync_change_batch_, pp_unk_data_retriever_);
            }
            pub inline fn getFullEnumerationChangeBatch(self: *const T, dw_batch_size_: u32, pb_lower_enumeration_bound_: ?*const u8, p_sync_knowledge_: ?*ISyncKnowledge, pp_sync_change_batch_: ?*?*ISyncFullEnumerationChangeBatch, pp_unk_data_retriever_: ?*?*IUnknown) HRESULT {
                return @as(*const IKnowledgeSyncProvider.VTable, @ptrCast(self.vtable)).GetFullEnumerationChangeBatch(@as(*const IKnowledgeSyncProvider, @ptrCast(self)), dw_batch_size_, pb_lower_enumeration_bound_, p_sync_knowledge_, pp_sync_change_batch_, pp_unk_data_retriever_);
            }
            pub inline fn processChangeBatch(self: *const T, resolution_policy_: CONFLICT_RESOLUTION_POLICY, p_source_change_batch_: ?*ISyncChangeBatch, p_unk_data_retriever_: ?*IUnknown, p_callback_: ?*ISyncCallback, p_sync_session_statistics_: ?*SYNC_SESSION_STATISTICS) HRESULT {
                return @as(*const IKnowledgeSyncProvider.VTable, @ptrCast(self.vtable)).ProcessChangeBatch(@as(*const IKnowledgeSyncProvider, @ptrCast(self)), resolution_policy_, p_source_change_batch_, p_unk_data_retriever_, p_callback_, p_sync_session_statistics_);
            }
            pub inline fn processFullEnumerationChangeBatch(self: *const T, resolution_policy_: CONFLICT_RESOLUTION_POLICY, p_source_change_batch_: ?*ISyncFullEnumerationChangeBatch, p_unk_data_retriever_: ?*IUnknown, p_callback_: ?*ISyncCallback, p_sync_session_statistics_: ?*SYNC_SESSION_STATISTICS) HRESULT {
                return @as(*const IKnowledgeSyncProvider.VTable, @ptrCast(self.vtable)).ProcessFullEnumerationChangeBatch(@as(*const IKnowledgeSyncProvider, @ptrCast(self)), resolution_policy_, p_source_change_batch_, p_unk_data_retriever_, p_callback_, p_sync_session_statistics_);
            }
            pub inline fn endSession(self: *const T, p_session_state_: ?*ISyncSessionState) HRESULT {
                return @as(*const IKnowledgeSyncProvider.VTable, @ptrCast(self.vtable)).EndSession(@as(*const IKnowledgeSyncProvider, @ptrCast(self)), p_session_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncChangeUnit_Value = Guid.initString("60edd8ca-7341-4bb7-95ce-fab6394b51cb");
pub const IID_ISyncChangeUnit = &IID_ISyncChangeUnit_Value;
pub const ISyncChangeUnit = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemChange: *const fn (
            self: *const ISyncChangeUnit,
            pp_sync_change: ?*?*ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitId: *const fn (
            self: *const ISyncChangeUnit,
            pb_change_unit_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitVersion: *const fn (
            self: *const ISyncChangeUnit,
            pb_current_replica_id: ?*const u8,
            p_version: ?*SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getItemChange(self: *const T, pp_sync_change_: ?*?*ISyncChange) HRESULT {
                return @as(*const ISyncChangeUnit.VTable, @ptrCast(self.vtable)).GetItemChange(@as(*const ISyncChangeUnit, @ptrCast(self)), pp_sync_change_);
            }
            pub inline fn getChangeUnitId(self: *const T, pb_change_unit_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const ISyncChangeUnit.VTable, @ptrCast(self.vtable)).GetChangeUnitId(@as(*const ISyncChangeUnit, @ptrCast(self)), pb_change_unit_id_, pcb_id_size_);
            }
            pub inline fn getChangeUnitVersion(self: *const T, pb_current_replica_id_: ?*const u8, p_version_: ?*SYNC_VERSION) HRESULT {
                return @as(*const ISyncChangeUnit.VTable, @ptrCast(self.vtable)).GetChangeUnitVersion(@as(*const ISyncChangeUnit, @ptrCast(self)), pb_current_replica_id_, p_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnumSyncChangeUnits_Value = Guid.initString("346b35f1-8703-4c6d-ab1a-4dbca2cff97f");
pub const IID_IEnumSyncChangeUnits = &IID_IEnumSyncChangeUnits_Value;
pub const IEnumSyncChangeUnits = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumSyncChangeUnits,
            c_changes: u32,
            pp_change_unit: ?*?*ISyncChangeUnit,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumSyncChangeUnits,
            c_changes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumSyncChangeUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumSyncChangeUnits,
            pp_enum: ?*?*IEnumSyncChangeUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_changes_: u32, pp_change_unit_: ?*?*ISyncChangeUnit, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumSyncChangeUnits.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumSyncChangeUnits, @ptrCast(self)), c_changes_, pp_change_unit_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_changes_: u32) HRESULT {
                return @as(*const IEnumSyncChangeUnits.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumSyncChangeUnits, @ptrCast(self)), c_changes_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumSyncChangeUnits.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumSyncChangeUnits, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumSyncChangeUnits) HRESULT {
                return @as(*const IEnumSyncChangeUnits.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumSyncChangeUnits, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncChange_Value = Guid.initString("a1952beb-0f6b-4711-b136-01da85b968a6");
pub const IID_ISyncChange = &IID_ISyncChange_Value;
pub const ISyncChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwnerReplicaId: *const fn (
            self: *const ISyncChange,
            pb_replica_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRootItemId: *const fn (
            self: *const ISyncChange,
            pb_root_item_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeVersion: *const fn (
            self: *const ISyncChange,
            pb_current_replica_id: ?*const u8,
            p_version: ?*SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreationVersion: *const fn (
            self: *const ISyncChange,
            pb_current_replica_id: ?*const u8,
            p_version: ?*SYNC_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const ISyncChange,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkEstimate: *const fn (
            self: *const ISyncChange,
            pdw_work: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnits: *const fn (
            self: *const ISyncChange,
            pp_enum: ?*?*IEnumSyncChangeUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMadeWithKnowledge: *const fn (
            self: *const ISyncChange,
            pp_made_with_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedKnowledge: *const fn (
            self: *const ISyncChange,
            pp_learned_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkEstimate: *const fn (
            self: *const ISyncChange,
            dw_work: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOwnerReplicaId(self: *const T, pb_replica_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).GetOwnerReplicaId(@as(*const ISyncChange, @ptrCast(self)), pb_replica_id_, pcb_id_size_);
            }
            pub inline fn getRootItemId(self: *const T, pb_root_item_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).GetRootItemId(@as(*const ISyncChange, @ptrCast(self)), pb_root_item_id_, pcb_id_size_);
            }
            pub inline fn getChangeVersion(self: *const T, pb_current_replica_id_: ?*const u8, p_version_: ?*SYNC_VERSION) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).GetChangeVersion(@as(*const ISyncChange, @ptrCast(self)), pb_current_replica_id_, p_version_);
            }
            pub inline fn getCreationVersion(self: *const T, pb_current_replica_id_: ?*const u8, p_version_: ?*SYNC_VERSION) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).GetCreationVersion(@as(*const ISyncChange, @ptrCast(self)), pb_current_replica_id_, p_version_);
            }
            pub inline fn getFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const ISyncChange, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn getWorkEstimate(self: *const T, pdw_work_: ?*u32) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).GetWorkEstimate(@as(*const ISyncChange, @ptrCast(self)), pdw_work_);
            }
            pub inline fn getChangeUnits(self: *const T, pp_enum_: ?*?*IEnumSyncChangeUnits) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).GetChangeUnits(@as(*const ISyncChange, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getMadeWithKnowledge(self: *const T, pp_made_with_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).GetMadeWithKnowledge(@as(*const ISyncChange, @ptrCast(self)), pp_made_with_knowledge_);
            }
            pub inline fn getLearnedKnowledge(self: *const T, pp_learned_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).GetLearnedKnowledge(@as(*const ISyncChange, @ptrCast(self)), pp_learned_knowledge_);
            }
            pub inline fn setWorkEstimate(self: *const T, dw_work_: u32) HRESULT {
                return @as(*const ISyncChange.VTable, @ptrCast(self.vtable)).SetWorkEstimate(@as(*const ISyncChange, @ptrCast(self)), dw_work_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncChangeWithPrerequisite_Value = Guid.initString("9e38382f-1589-48c3-92e4-05ecdcb4f3f7");
pub const IID_ISyncChangeWithPrerequisite = &IID_ISyncChangeWithPrerequisite_Value;
pub const ISyncChangeWithPrerequisite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPrerequisiteKnowledge: *const fn (
            self: *const ISyncChangeWithPrerequisite,
            pp_prerequisite_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedKnowledgeWithPrerequisite: *const fn (
            self: *const ISyncChangeWithPrerequisite,
            p_destination_knowledge: ?*ISyncKnowledge,
            pp_learned_knowledge_with_prerequisite: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPrerequisiteKnowledge(self: *const T, pp_prerequisite_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeWithPrerequisite.VTable, @ptrCast(self.vtable)).GetPrerequisiteKnowledge(@as(*const ISyncChangeWithPrerequisite, @ptrCast(self)), pp_prerequisite_knowledge_);
            }
            pub inline fn getLearnedKnowledgeWithPrerequisite(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, pp_learned_knowledge_with_prerequisite_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeWithPrerequisite.VTable, @ptrCast(self.vtable)).GetLearnedKnowledgeWithPrerequisite(@as(*const ISyncChangeWithPrerequisite, @ptrCast(self)), p_destination_knowledge_, pp_learned_knowledge_with_prerequisite_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncFullEnumerationChange_Value = Guid.initString("9785e0bd-bdff-40c4-98c5-b34b2f1991b3");
pub const IID_ISyncFullEnumerationChange = &IID_ISyncFullEnumerationChange_Value;
pub const ISyncFullEnumerationChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLearnedKnowledgeAfterRecoveryComplete: *const fn (
            self: *const ISyncFullEnumerationChange,
            pp_learned_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedForgottenKnowledge: *const fn (
            self: *const ISyncFullEnumerationChange,
            pp_learned_forgotten_knowledge: ?*?*IForgottenKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLearnedKnowledgeAfterRecoveryComplete(self: *const T, pp_learned_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncFullEnumerationChange.VTable, @ptrCast(self.vtable)).GetLearnedKnowledgeAfterRecoveryComplete(@as(*const ISyncFullEnumerationChange, @ptrCast(self)), pp_learned_knowledge_);
            }
            pub inline fn getLearnedForgottenKnowledge(self: *const T, pp_learned_forgotten_knowledge_: ?*?*IForgottenKnowledge) HRESULT {
                return @as(*const ISyncFullEnumerationChange.VTable, @ptrCast(self.vtable)).GetLearnedForgottenKnowledge(@as(*const ISyncFullEnumerationChange, @ptrCast(self)), pp_learned_forgotten_knowledge_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncMergeTombstoneChange_Value = Guid.initString("6ec62597-0903-484c-ad61-36d6e938f47b");
pub const IID_ISyncMergeTombstoneChange = &IID_ISyncMergeTombstoneChange_Value;
pub const ISyncMergeTombstoneChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWinnerItemId: *const fn (
            self: *const ISyncMergeTombstoneChange,
            pb_winner_item_id: ?*u8,
            pcb_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getWinnerItemId(self: *const T, pb_winner_item_id_: ?*u8, pcb_id_size_: ?*u32) HRESULT {
                return @as(*const ISyncMergeTombstoneChange.VTable, @ptrCast(self.vtable)).GetWinnerItemId(@as(*const ISyncMergeTombstoneChange, @ptrCast(self)), pb_winner_item_id_, pcb_id_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumItemIds_Value = Guid.initString("43aa3f61-4b2e-4b60-83df-b110d3e148f1");
pub const IID_IEnumItemIds = &IID_IEnumItemIds_Value;
pub const IEnumItemIds = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumItemIds,
            pb_item_id: ?*u8,
            pcb_item_id_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, pb_item_id_: ?*u8, pcb_item_id_size_: ?*u32) HRESULT {
                return @as(*const IEnumItemIds.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumItemIds, @ptrCast(self)), pb_item_id_, pcb_item_id_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFilterKeyMap_Value = Guid.initString("ca169652-07c6-4708-a3da-6e4eba8d2297");
pub const IID_IFilterKeyMap = &IID_IFilterKeyMap_Value;
pub const IFilterKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IFilterKeyMap,
            pdw_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFilter: *const fn (
            self: *const IFilterKeyMap,
            p_i_sync_filter: ?*ISyncFilter,
            pdw_filter_key: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilter: *const fn (
            self: *const IFilterKeyMap,
            dw_filter_key: u32,
            pp_i_sync_filter: ?*?*ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: *const fn (
            self: *const IFilterKeyMap,
            pb_filter_key_map: ?*u8,
            pcb_filter_key_map: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, pdw_count_: ?*u32) HRESULT {
                return @as(*const IFilterKeyMap.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IFilterKeyMap, @ptrCast(self)), pdw_count_);
            }
            pub inline fn addFilter(self: *const T, p_i_sync_filter_: ?*ISyncFilter, pdw_filter_key_: ?*u32) HRESULT {
                return @as(*const IFilterKeyMap.VTable, @ptrCast(self.vtable)).AddFilter(@as(*const IFilterKeyMap, @ptrCast(self)), p_i_sync_filter_, pdw_filter_key_);
            }
            pub inline fn getFilter(self: *const T, dw_filter_key_: u32, pp_i_sync_filter_: ?*?*ISyncFilter) HRESULT {
                return @as(*const IFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilter(@as(*const IFilterKeyMap, @ptrCast(self)), dw_filter_key_, pp_i_sync_filter_);
            }
            pub inline fn serialize(self: *const T, pb_filter_key_map_: ?*u8, pcb_filter_key_map_: ?*u32) HRESULT {
                return @as(*const IFilterKeyMap.VTable, @ptrCast(self.vtable)).Serialize(@as(*const IFilterKeyMap, @ptrCast(self)), pb_filter_key_map_, pcb_filter_key_map_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeWithFilterKeyMap_Value = Guid.initString("bfe1ef00-e87d-42fd-a4e9-242d70414aef");
pub const IID_ISyncChangeWithFilterKeyMap = &IID_ISyncChangeWithFilterKeyMap_Value;
pub const ISyncChangeWithFilterKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFilterCount: *const fn (
            self: *const ISyncChangeWithFilterKeyMap,
            pdw_filter_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterChange: *const fn (
            self: *const ISyncChangeWithFilterKeyMap,
            dw_filter_key: u32,
            p_filter_change: ?*SYNC_FILTER_CHANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllChangeUnitsPresentFlag: *const fn (
            self: *const ISyncChangeWithFilterKeyMap,
            pf_all_change_units_present: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterForgottenKnowledge: *const fn (
            self: *const ISyncChangeWithFilterKeyMap,
            dw_filter_key: u32,
            pp_i_filter_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedKnowledge: *const fn (
            self: *const ISyncChangeWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            pp_learned_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedFilterForgottenKnowledge: *const fn (
            self: *const ISyncChangeWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            dw_filter_key: u32,
            pp_learned_filter_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedForgottenKnowledge: *const fn (
            self: *const ISyncChangeWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            pp_learned_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete: *const fn (
            self: *const ISyncChangeWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            pp_learned_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete: *const fn (
            self: *const ISyncChangeWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            dw_filter_key: u32,
            pp_learned_filter_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFilterCount(self: *const T, pdw_filter_count_: ?*u32) HRESULT {
                return @as(*const ISyncChangeWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilterCount(@as(*const ISyncChangeWithFilterKeyMap, @ptrCast(self)), pdw_filter_count_);
            }
            pub inline fn getFilterChange(self: *const T, dw_filter_key_: u32, p_filter_change_: ?*SYNC_FILTER_CHANGE) HRESULT {
                return @as(*const ISyncChangeWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilterChange(@as(*const ISyncChangeWithFilterKeyMap, @ptrCast(self)), dw_filter_key_, p_filter_change_);
            }
            pub inline fn getAllChangeUnitsPresentFlag(self: *const T, pf_all_change_units_present_: ?*BOOL) HRESULT {
                return @as(*const ISyncChangeWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetAllChangeUnitsPresentFlag(@as(*const ISyncChangeWithFilterKeyMap, @ptrCast(self)), pf_all_change_units_present_);
            }
            pub inline fn getFilterForgottenKnowledge(self: *const T, dw_filter_key_: u32, pp_i_filter_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilterForgottenKnowledge(@as(*const ISyncChangeWithFilterKeyMap, @ptrCast(self)), dw_filter_key_, pp_i_filter_forgotten_knowledge_);
            }
            pub inline fn getFilteredReplicaLearnedKnowledge(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, pp_learned_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilteredReplicaLearnedKnowledge(@as(*const ISyncChangeWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, pp_learned_knowledge_);
            }
            pub inline fn getLearnedFilterForgottenKnowledge(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, dw_filter_key_: u32, pp_learned_filter_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetLearnedFilterForgottenKnowledge(@as(*const ISyncChangeWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, dw_filter_key_, pp_learned_filter_forgotten_knowledge_);
            }
            pub inline fn getFilteredReplicaLearnedForgottenKnowledge(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, pp_learned_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilteredReplicaLearnedForgottenKnowledge(@as(*const ISyncChangeWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, pp_learned_forgotten_knowledge_);
            }
            pub inline fn getFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, pp_learned_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete(@as(*const ISyncChangeWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, pp_learned_forgotten_knowledge_);
            }
            pub inline fn getLearnedFilterForgottenKnowledgeAfterRecoveryComplete(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, dw_filter_key_: u32, pp_learned_filter_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete(@as(*const ISyncChangeWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, dw_filter_key_, pp_learned_filter_forgotten_knowledge_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncChangeBatchWithFilterKeyMap_Value = Guid.initString("de247002-566d-459a-a6ed-a5aab3459fb7");
pub const IID_ISyncChangeBatchWithFilterKeyMap = &IID_ISyncChangeBatchWithFilterKeyMap_Value;
pub const ISyncChangeBatchWithFilterKeyMap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFilterKeyMap: *const fn (
            self: *const ISyncChangeBatchWithFilterKeyMap,
            pp_i_filter_key_map: ?*?*IFilterKeyMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFilterKeyMap: *const fn (
            self: *const ISyncChangeBatchWithFilterKeyMap,
            p_i_filter_key_map: ?*IFilterKeyMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFilterForgottenKnowledge: *const fn (
            self: *const ISyncChangeBatchWithFilterKeyMap,
            dw_filter_key: u32,
            p_filter_forgotten_knowledge: ?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedKnowledge: *const fn (
            self: *const ISyncChangeBatchWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            pp_learned_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedFilterForgottenKnowledge: *const fn (
            self: *const ISyncChangeBatchWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            dw_filter_key: u32,
            pp_learned_filter_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedForgottenKnowledge: *const fn (
            self: *const ISyncChangeBatchWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            pp_learned_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete: *const fn (
            self: *const ISyncChangeBatchWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            pp_learned_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete: *const fn (
            self: *const ISyncChangeBatchWithFilterKeyMap,
            p_destination_knowledge: ?*ISyncKnowledge,
            p_new_moveins: ?*IEnumItemIds,
            dw_filter_key: u32,
            pp_learned_filter_forgotten_knowledge: ?*?*ISyncKnowledge,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFilterKeyMap(self: *const T, pp_i_filter_key_map_: ?*?*IFilterKeyMap) HRESULT {
                return @as(*const ISyncChangeBatchWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilterKeyMap(@as(*const ISyncChangeBatchWithFilterKeyMap, @ptrCast(self)), pp_i_filter_key_map_);
            }
            pub inline fn setFilterKeyMap(self: *const T, p_i_filter_key_map_: ?*IFilterKeyMap) HRESULT {
                return @as(*const ISyncChangeBatchWithFilterKeyMap.VTable, @ptrCast(self.vtable)).SetFilterKeyMap(@as(*const ISyncChangeBatchWithFilterKeyMap, @ptrCast(self)), p_i_filter_key_map_);
            }
            pub inline fn setFilterForgottenKnowledge(self: *const T, dw_filter_key_: u32, p_filter_forgotten_knowledge_: ?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchWithFilterKeyMap.VTable, @ptrCast(self.vtable)).SetFilterForgottenKnowledge(@as(*const ISyncChangeBatchWithFilterKeyMap, @ptrCast(self)), dw_filter_key_, p_filter_forgotten_knowledge_);
            }
            pub inline fn getFilteredReplicaLearnedKnowledge(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, pp_learned_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilteredReplicaLearnedKnowledge(@as(*const ISyncChangeBatchWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, pp_learned_forgotten_knowledge_);
            }
            pub inline fn getLearnedFilterForgottenKnowledge(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, dw_filter_key_: u32, pp_learned_filter_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetLearnedFilterForgottenKnowledge(@as(*const ISyncChangeBatchWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, dw_filter_key_, pp_learned_filter_forgotten_knowledge_);
            }
            pub inline fn getFilteredReplicaLearnedForgottenKnowledge(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, pp_learned_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilteredReplicaLearnedForgottenKnowledge(@as(*const ISyncChangeBatchWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, pp_learned_forgotten_knowledge_);
            }
            pub inline fn getFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, pp_learned_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetFilteredReplicaLearnedForgottenKnowledgeAfterRecoveryComplete(@as(*const ISyncChangeBatchWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, pp_learned_forgotten_knowledge_);
            }
            pub inline fn getLearnedFilterForgottenKnowledgeAfterRecoveryComplete(self: *const T, p_destination_knowledge_: ?*ISyncKnowledge, p_new_moveins_: ?*IEnumItemIds, dw_filter_key_: u32, pp_learned_filter_forgotten_knowledge_: ?*?*ISyncKnowledge) HRESULT {
                return @as(*const ISyncChangeBatchWithFilterKeyMap.VTable, @ptrCast(self.vtable)).GetLearnedFilterForgottenKnowledgeAfterRecoveryComplete(@as(*const ISyncChangeBatchWithFilterKeyMap, @ptrCast(self)), p_destination_knowledge_, p_new_moveins_, dw_filter_key_, pp_learned_filter_forgotten_knowledge_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDataRetrieverCallback_Value = Guid.initString("71b4863b-f969-4676-bbc3-3d9fdc3fb2c7");
pub const IID_IDataRetrieverCallback = &IID_IDataRetrieverCallback_Value;
pub const IDataRetrieverCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadChangeDataComplete: *const fn (
            self: *const IDataRetrieverCallback,
            p_unk_data: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadChangeDataError: *const fn (
            self: *const IDataRetrieverCallback,
            hr_error: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn loadChangeDataComplete(self: *const T, p_unk_data_: ?*IUnknown) HRESULT {
                return @as(*const IDataRetrieverCallback.VTable, @ptrCast(self.vtable)).LoadChangeDataComplete(@as(*const IDataRetrieverCallback, @ptrCast(self)), p_unk_data_);
            }
            pub inline fn loadChangeDataError(self: *const T, hr_error_: HRESULT) HRESULT {
                return @as(*const IDataRetrieverCallback.VTable, @ptrCast(self.vtable)).LoadChangeDataError(@as(*const IDataRetrieverCallback, @ptrCast(self)), hr_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ILoadChangeContext_Value = Guid.initString("44a4aaca-ec39-46d5-b5c9-d633c0ee67e2");
pub const IID_ILoadChangeContext = &IID_ILoadChangeContext_Value;
pub const ILoadChangeContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSyncChange: *const fn (
            self: *const ILoadChangeContext,
            pp_sync_change: ?*?*ISyncChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRecoverableErrorOnChange: *const fn (
            self: *const ILoadChangeContext,
            hr_error: HRESULT,
            p_error_data: ?*IRecoverableErrorData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRecoverableErrorOnChangeUnit: *const fn (
            self: *const ILoadChangeContext,
            hr_error: HRESULT,
            p_change_unit: ?*ISyncChangeUnit,
            p_error_data: ?*IRecoverableErrorData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSyncChange(self: *const T, pp_sync_change_: ?*?*ISyncChange) HRESULT {
                return @as(*const ILoadChangeContext.VTable, @ptrCast(self.vtable)).GetSyncChange(@as(*const ILoadChangeContext, @ptrCast(self)), pp_sync_change_);
            }
            pub inline fn setRecoverableErrorOnChange(self: *const T, hr_error_: HRESULT, p_error_data_: ?*IRecoverableErrorData) HRESULT {
                return @as(*const ILoadChangeContext.VTable, @ptrCast(self.vtable)).SetRecoverableErrorOnChange(@as(*const ILoadChangeContext, @ptrCast(self)), hr_error_, p_error_data_);
            }
            pub inline fn setRecoverableErrorOnChangeUnit(self: *const T, hr_error_: HRESULT, p_change_unit_: ?*ISyncChangeUnit, p_error_data_: ?*IRecoverableErrorData) HRESULT {
                return @as(*const ILoadChangeContext.VTable, @ptrCast(self.vtable)).SetRecoverableErrorOnChangeUnit(@as(*const ILoadChangeContext, @ptrCast(self)), hr_error_, p_change_unit_, p_error_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISynchronousDataRetriever_Value = Guid.initString("9b22f2a9-a4cd-4648-9d8e-3a510d4da04b");
pub const IID_ISynchronousDataRetriever = &IID_ISynchronousDataRetriever_Value;
pub const ISynchronousDataRetriever = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdParameters: *const fn (
            self: *const ISynchronousDataRetriever,
            p_id_parameters: ?*ID_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadChangeData: *const fn (
            self: *const ISynchronousDataRetriever,
            p_load_change_context: ?*ILoadChangeContext,
            pp_unk_data: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIdParameters(self: *const T, p_id_parameters_: ?*ID_PARAMETERS) HRESULT {
                return @as(*const ISynchronousDataRetriever.VTable, @ptrCast(self.vtable)).GetIdParameters(@as(*const ISynchronousDataRetriever, @ptrCast(self)), p_id_parameters_);
            }
            pub inline fn loadChangeData(self: *const T, p_load_change_context_: ?*ILoadChangeContext, pp_unk_data_: ?*?*IUnknown) HRESULT {
                return @as(*const ISynchronousDataRetriever.VTable, @ptrCast(self.vtable)).LoadChangeData(@as(*const ISynchronousDataRetriever, @ptrCast(self)), p_load_change_context_, pp_unk_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IAsynchronousDataRetriever_Value = Guid.initString("9fc7e470-61ea-4a88-9be4-df56a27cfef2");
pub const IID_IAsynchronousDataRetriever = &IID_IAsynchronousDataRetriever_Value;
pub const IAsynchronousDataRetriever = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdParameters: *const fn (
            self: *const IAsynchronousDataRetriever,
            p_id_parameters: ?*ID_PARAMETERS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterCallback: *const fn (
            self: *const IAsynchronousDataRetriever,
            p_data_retriever_callback: ?*IDataRetrieverCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeCallback: *const fn (
            self: *const IAsynchronousDataRetriever,
            p_data_retriever_callback: ?*IDataRetrieverCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadChangeData: *const fn (
            self: *const IAsynchronousDataRetriever,
            p_load_change_context: ?*ILoadChangeContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIdParameters(self: *const T, p_id_parameters_: ?*ID_PARAMETERS) HRESULT {
                return @as(*const IAsynchronousDataRetriever.VTable, @ptrCast(self.vtable)).GetIdParameters(@as(*const IAsynchronousDataRetriever, @ptrCast(self)), p_id_parameters_);
            }
            pub inline fn registerCallback(self: *const T, p_data_retriever_callback_: ?*IDataRetrieverCallback) HRESULT {
                return @as(*const IAsynchronousDataRetriever.VTable, @ptrCast(self.vtable)).RegisterCallback(@as(*const IAsynchronousDataRetriever, @ptrCast(self)), p_data_retriever_callback_);
            }
            pub inline fn revokeCallback(self: *const T, p_data_retriever_callback_: ?*IDataRetrieverCallback) HRESULT {
                return @as(*const IAsynchronousDataRetriever.VTable, @ptrCast(self.vtable)).RevokeCallback(@as(*const IAsynchronousDataRetriever, @ptrCast(self)), p_data_retriever_callback_);
            }
            pub inline fn loadChangeData(self: *const T, p_load_change_context_: ?*ILoadChangeContext) HRESULT {
                return @as(*const IAsynchronousDataRetriever.VTable, @ptrCast(self.vtable)).LoadChangeData(@as(*const IAsynchronousDataRetriever, @ptrCast(self)), p_load_change_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IFilterRequestCallback_Value = Guid.initString("82df8873-6360-463a-a8a1-ede5e1a1594d");
pub const IID_IFilterRequestCallback = &IID_IFilterRequestCallback_Value;
pub const IFilterRequestCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestFilter: *const fn (
            self: *const IFilterRequestCallback,
            p_filter: ?*IUnknown,
            filtering_type: FILTERING_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn requestFilter(self: *const T, p_filter_: ?*IUnknown, filtering_type_: FILTERING_TYPE) HRESULT {
                return @as(*const IFilterRequestCallback.VTable, @ptrCast(self.vtable)).RequestFilter(@as(*const IFilterRequestCallback, @ptrCast(self)), p_filter_, filtering_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRequestFilteredSync_Value = Guid.initString("2e020184-6d18-46a7-a32a-da4aeb06696c");
pub const IID_IRequestFilteredSync = &IID_IRequestFilteredSync_Value;
pub const IRequestFilteredSync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SpecifyFilter: *const fn (
            self: *const IRequestFilteredSync,
            p_callback: ?*IFilterRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn specifyFilter(self: *const T, p_callback_: ?*IFilterRequestCallback) HRESULT {
                return @as(*const IRequestFilteredSync.VTable, @ptrCast(self.vtable)).SpecifyFilter(@as(*const IRequestFilteredSync, @ptrCast(self)), p_callback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISupportFilteredSync_Value = Guid.initString("3d128ded-d555-4e0d-bf4b-fb213a8a9302");
pub const IID_ISupportFilteredSync = &IID_ISupportFilteredSync_Value;
pub const ISupportFilteredSync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddFilter: *const fn (
            self: *const ISupportFilteredSync,
            p_filter: ?*IUnknown,
            filtering_type: FILTERING_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addFilter(self: *const T, p_filter_: ?*IUnknown, filtering_type_: FILTERING_TYPE) HRESULT {
                return @as(*const ISupportFilteredSync.VTable, @ptrCast(self.vtable)).AddFilter(@as(*const ISupportFilteredSync, @ptrCast(self)), p_filter_, filtering_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFilterTrackingRequestCallback_Value = Guid.initString("713ca7bb-c858-4674-b4b6-1122436587a9");
pub const IID_IFilterTrackingRequestCallback = &IID_IFilterTrackingRequestCallback_Value;
pub const IFilterTrackingRequestCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestTrackedFilter: *const fn (
            self: *const IFilterTrackingRequestCallback,
            p_filter: ?*ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn requestTrackedFilter(self: *const T, p_filter_: ?*ISyncFilter) HRESULT {
                return @as(*const IFilterTrackingRequestCallback.VTable, @ptrCast(self.vtable)).RequestTrackedFilter(@as(*const IFilterTrackingRequestCallback, @ptrCast(self)), p_filter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFilterTrackingProvider_Value = Guid.initString("743383c0-fc4e-45ba-ad81-d9d84c7a24f8");
pub const IID_IFilterTrackingProvider = &IID_IFilterTrackingProvider_Value;
pub const IFilterTrackingProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SpecifyTrackedFilters: *const fn (
            self: *const IFilterTrackingProvider,
            p_callback: ?*IFilterTrackingRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTrackedFilter: *const fn (
            self: *const IFilterTrackingProvider,
            p_filter: ?*ISyncFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn specifyTrackedFilters(self: *const T, p_callback_: ?*IFilterTrackingRequestCallback) HRESULT {
                return @as(*const IFilterTrackingProvider.VTable, @ptrCast(self.vtable)).SpecifyTrackedFilters(@as(*const IFilterTrackingProvider, @ptrCast(self)), p_callback_);
            }
            pub inline fn addTrackedFilter(self: *const T, p_filter_: ?*ISyncFilter) HRESULT {
                return @as(*const IFilterTrackingProvider.VTable, @ptrCast(self.vtable)).AddTrackedFilter(@as(*const IFilterTrackingProvider, @ptrCast(self)), p_filter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISupportLastWriteTime_Value = Guid.initString("eadf816f-d0bd-43ca-8f40-5acdc6c06f7a");
pub const IID_ISupportLastWriteTime = &IID_ISupportLastWriteTime_Value;
pub const ISupportLastWriteTime = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemChangeTime: *const fn (
            self: *const ISupportLastWriteTime,
            pb_item_id: ?*const u8,
            pull_timestamp: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChangeUnitChangeTime: *const fn (
            self: *const ISupportLastWriteTime,
            pb_item_id: ?*const u8,
            pb_change_unit_id: ?*const u8,
            pull_timestamp: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getItemChangeTime(self: *const T, pb_item_id_: ?*const u8, pull_timestamp_: ?*u64) HRESULT {
                return @as(*const ISupportLastWriteTime.VTable, @ptrCast(self.vtable)).GetItemChangeTime(@as(*const ISupportLastWriteTime, @ptrCast(self)), pb_item_id_, pull_timestamp_);
            }
            pub inline fn getChangeUnitChangeTime(self: *const T, pb_item_id_: ?*const u8, pb_change_unit_id_: ?*const u8, pull_timestamp_: ?*u64) HRESULT {
                return @as(*const ISupportLastWriteTime.VTable, @ptrCast(self.vtable)).GetChangeUnitChangeTime(@as(*const ISupportLastWriteTime, @ptrCast(self)), pb_item_id_, pb_change_unit_id_, pull_timestamp_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IProviderConverter_Value = Guid.initString("809b7276-98cf-4957-93a5-0ebdd3dddffd");
pub const IID_IProviderConverter = &IID_IProviderConverter_Value;
pub const IProviderConverter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IProviderConverter,
            p_i_sync_provider: ?*ISyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_i_sync_provider_: ?*ISyncProvider) HRESULT {
                return @as(*const IProviderConverter.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IProviderConverter, @ptrCast(self)), p_i_sync_provider_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISyncDataConverter_Value = Guid.initString("435d4861-68d5-44aa-a0f9-72a0b00ef9cf");
pub const IID_ISyncDataConverter = &IID_ISyncDataConverter_Value;
pub const ISyncDataConverter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConvertDataRetrieverFromProviderFormat: *const fn (
            self: *const ISyncDataConverter,
            p_unk_data_retriever_in: ?*IUnknown,
            p_enum_sync_changes: ?*IEnumSyncChanges,
            pp_unk_data_out: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertDataRetrieverToProviderFormat: *const fn (
            self: *const ISyncDataConverter,
            p_unk_data_retriever_in: ?*IUnknown,
            p_enum_sync_changes: ?*IEnumSyncChanges,
            pp_unk_data_out: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertDataFromProviderFormat: *const fn (
            self: *const ISyncDataConverter,
            p_data_context: ?*ILoadChangeContext,
            p_unk_data_in: ?*IUnknown,
            pp_unk_data_out: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertDataToProviderFormat: *const fn (
            self: *const ISyncDataConverter,
            p_data_context: ?*ILoadChangeContext,
            p_unk_data_out: ?*IUnknown,
            pp_unk_dataout: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn convertDataRetrieverFromProviderFormat(self: *const T, p_unk_data_retriever_in_: ?*IUnknown, p_enum_sync_changes_: ?*IEnumSyncChanges, pp_unk_data_out_: ?*?*IUnknown) HRESULT {
                return @as(*const ISyncDataConverter.VTable, @ptrCast(self.vtable)).ConvertDataRetrieverFromProviderFormat(@as(*const ISyncDataConverter, @ptrCast(self)), p_unk_data_retriever_in_, p_enum_sync_changes_, pp_unk_data_out_);
            }
            pub inline fn convertDataRetrieverToProviderFormat(self: *const T, p_unk_data_retriever_in_: ?*IUnknown, p_enum_sync_changes_: ?*IEnumSyncChanges, pp_unk_data_out_: ?*?*IUnknown) HRESULT {
                return @as(*const ISyncDataConverter.VTable, @ptrCast(self.vtable)).ConvertDataRetrieverToProviderFormat(@as(*const ISyncDataConverter, @ptrCast(self)), p_unk_data_retriever_in_, p_enum_sync_changes_, pp_unk_data_out_);
            }
            pub inline fn convertDataFromProviderFormat(self: *const T, p_data_context_: ?*ILoadChangeContext, p_unk_data_in_: ?*IUnknown, pp_unk_data_out_: ?*?*IUnknown) HRESULT {
                return @as(*const ISyncDataConverter.VTable, @ptrCast(self.vtable)).ConvertDataFromProviderFormat(@as(*const ISyncDataConverter, @ptrCast(self)), p_data_context_, p_unk_data_in_, pp_unk_data_out_);
            }
            pub inline fn convertDataToProviderFormat(self: *const T, p_data_context_: ?*ILoadChangeContext, p_unk_data_out_: ?*IUnknown, pp_unk_dataout_: ?*?*IUnknown) HRESULT {
                return @as(*const ISyncDataConverter.VTable, @ptrCast(self.vtable)).ConvertDataToProviderFormat(@as(*const ISyncDataConverter, @ptrCast(self)), p_data_context_, p_unk_data_out_, pp_unk_dataout_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_SyncProviderRegistration_Value = Guid.initString("f82b4ef1-93a9-4dde-8015-f7950a1a6e31");
pub const CLSID_SyncProviderRegistration = &CLSID_SyncProviderRegistration_Value;

pub const SyncProviderConfiguration = extern struct {
    dwVersion: u32,
    guidInstanceId: Guid,
    clsidProvider: Guid,
    guidConfigUIInstanceId: Guid,
    guidContentType: Guid,
    dwCapabilities: u32,
    dwSupportedArchitecture: u32,
};

pub const SyncProviderConfigUIConfiguration = extern struct {
    dwVersion: u32,
    guidInstanceId: Guid,
    clsidConfigUI: Guid,
    guidContentType: Guid,
    dwCapabilities: u32,
    dwSupportedArchitecture: u32,
    fIsGlobal: BOOL,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncProviderRegistration_Value = Guid.initString("cb45953b-7624-47bc-a472-eb8cac6b222e");
pub const IID_ISyncProviderRegistration = &IID_ISyncProviderRegistration_Value;
pub const ISyncProviderRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSyncProviderConfigUIRegistrationInstance: *const fn (
            self: *const ISyncProviderRegistration,
            p_config_u_i_config: ?*const SyncProviderConfigUIConfiguration,
            pp_config_u_i_info: ?*?*ISyncProviderConfigUIInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterSyncProviderConfigUI: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_instance_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateSyncProviderConfigUIs: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_content_type: ?*const Guid,
            dw_supported_architecture: u32,
            pp_enum_sync_provider_config_u_i_infos: ?*?*IEnumSyncProviderConfigUIInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSyncProviderRegistrationInstance: *const fn (
            self: *const ISyncProviderRegistration,
            p_provider_configuration: ?*const SyncProviderConfiguration,
            pp_provider_info: ?*?*ISyncProviderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterSyncProvider: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_instance_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderConfigUIInfoforProvider: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_provider_instance_id: ?*const Guid,
            pp_provider_config_u_i_info: ?*?*ISyncProviderConfigUIInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateSyncProviders: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_content_type: ?*const Guid,
            dw_state_flags_to_filter_mask: u32,
            dw_state_flags_to_filter: u32,
            ref_provider_cls_id: ?*const Guid,
            dw_supported_architecture: u32,
            pp_enum_sync_provider_infos: ?*?*IEnumSyncProviderInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderInfo: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_instance_id: ?*const Guid,
            pp_provider_info: ?*?*ISyncProviderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderFromInstanceId: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_instance_id: ?*const Guid,
            dw_cls_context: u32,
            pp_sync_provider: ?*?*IRegisteredSyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderConfigUIInfo: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_instance_id: ?*const Guid,
            pp_config_u_i_info: ?*?*ISyncProviderConfigUIInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderConfigUIFromInstanceId: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_instance_id: ?*const Guid,
            dw_cls_context: u32,
            pp_config_u_i: ?*?*ISyncProviderConfigUI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncProviderState: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_instance_id: ?*const Guid,
            pdw_state_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSyncProviderState: *const fn (
            self: *const ISyncProviderRegistration,
            pguid_instance_id: ?*const Guid,
            dw_state_flags_mask: u32,
            dw_state_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterForEvent: *const fn (
            self: *const ISyncProviderRegistration,
            ph_event: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeEvent: *const fn (
            self: *const ISyncProviderRegistration,
            h_event: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChange: *const fn (
            self: *const ISyncProviderRegistration,
            h_event: ?HANDLE,
            pp_change: ?*?*ISyncRegistrationChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createSyncProviderConfigUIRegistrationInstance(self: *const T, p_config_u_i_config_: ?*const SyncProviderConfigUIConfiguration, pp_config_u_i_info_: ?*?*ISyncProviderConfigUIInfo) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).CreateSyncProviderConfigUIRegistrationInstance(@as(*const ISyncProviderRegistration, @ptrCast(self)), p_config_u_i_config_, pp_config_u_i_info_);
            }
            pub inline fn unregisterSyncProviderConfigUI(self: *const T, pguid_instance_id_: ?*const Guid) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).UnregisterSyncProviderConfigUI(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_instance_id_);
            }
            pub inline fn enumerateSyncProviderConfigUIs(self: *const T, pguid_content_type_: ?*const Guid, dw_supported_architecture_: u32, pp_enum_sync_provider_config_u_i_infos_: ?*?*IEnumSyncProviderConfigUIInfos) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).EnumerateSyncProviderConfigUIs(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_content_type_, dw_supported_architecture_, pp_enum_sync_provider_config_u_i_infos_);
            }
            pub inline fn createSyncProviderRegistrationInstance(self: *const T, p_provider_configuration_: ?*const SyncProviderConfiguration, pp_provider_info_: ?*?*ISyncProviderInfo) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).CreateSyncProviderRegistrationInstance(@as(*const ISyncProviderRegistration, @ptrCast(self)), p_provider_configuration_, pp_provider_info_);
            }
            pub inline fn unregisterSyncProvider(self: *const T, pguid_instance_id_: ?*const Guid) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).UnregisterSyncProvider(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_instance_id_);
            }
            pub inline fn getSyncProviderConfigUIInfoforProvider(self: *const T, pguid_provider_instance_id_: ?*const Guid, pp_provider_config_u_i_info_: ?*?*ISyncProviderConfigUIInfo) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).GetSyncProviderConfigUIInfoforProvider(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_provider_instance_id_, pp_provider_config_u_i_info_);
            }
            pub inline fn enumerateSyncProviders(self: *const T, pguid_content_type_: ?*const Guid, dw_state_flags_to_filter_mask_: u32, dw_state_flags_to_filter_: u32, ref_provider_cls_id_: ?*const Guid, dw_supported_architecture_: u32, pp_enum_sync_provider_infos_: ?*?*IEnumSyncProviderInfos) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).EnumerateSyncProviders(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_content_type_, dw_state_flags_to_filter_mask_, dw_state_flags_to_filter_, ref_provider_cls_id_, dw_supported_architecture_, pp_enum_sync_provider_infos_);
            }
            pub inline fn getSyncProviderInfo(self: *const T, pguid_instance_id_: ?*const Guid, pp_provider_info_: ?*?*ISyncProviderInfo) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).GetSyncProviderInfo(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_instance_id_, pp_provider_info_);
            }
            pub inline fn getSyncProviderFromInstanceId(self: *const T, pguid_instance_id_: ?*const Guid, dw_cls_context_: u32, pp_sync_provider_: ?*?*IRegisteredSyncProvider) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).GetSyncProviderFromInstanceId(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_instance_id_, dw_cls_context_, pp_sync_provider_);
            }
            pub inline fn getSyncProviderConfigUIInfo(self: *const T, pguid_instance_id_: ?*const Guid, pp_config_u_i_info_: ?*?*ISyncProviderConfigUIInfo) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).GetSyncProviderConfigUIInfo(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_instance_id_, pp_config_u_i_info_);
            }
            pub inline fn getSyncProviderConfigUIFromInstanceId(self: *const T, pguid_instance_id_: ?*const Guid, dw_cls_context_: u32, pp_config_u_i_: ?*?*ISyncProviderConfigUI) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).GetSyncProviderConfigUIFromInstanceId(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_instance_id_, dw_cls_context_, pp_config_u_i_);
            }
            pub inline fn getSyncProviderState(self: *const T, pguid_instance_id_: ?*const Guid, pdw_state_flags_: ?*u32) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).GetSyncProviderState(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_instance_id_, pdw_state_flags_);
            }
            pub inline fn setSyncProviderState(self: *const T, pguid_instance_id_: ?*const Guid, dw_state_flags_mask_: u32, dw_state_flags_: u32) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).SetSyncProviderState(@as(*const ISyncProviderRegistration, @ptrCast(self)), pguid_instance_id_, dw_state_flags_mask_, dw_state_flags_);
            }
            pub inline fn registerForEvent(self: *const T, ph_event_: ?*?HANDLE) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).RegisterForEvent(@as(*const ISyncProviderRegistration, @ptrCast(self)), ph_event_);
            }
            pub inline fn revokeEvent(self: *const T, h_event_: ?HANDLE) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).RevokeEvent(@as(*const ISyncProviderRegistration, @ptrCast(self)), h_event_);
            }
            pub inline fn getChange(self: *const T, h_event_: ?HANDLE, pp_change_: ?*?*ISyncRegistrationChange) HRESULT {
                return @as(*const ISyncProviderRegistration.VTable, @ptrCast(self.vtable)).GetChange(@as(*const ISyncProviderRegistration, @ptrCast(self)), h_event_, pp_change_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnumSyncProviderConfigUIInfos_Value = Guid.initString("f6be2602-17c6-4658-a2d7-68ed3330f641");
pub const IID_IEnumSyncProviderConfigUIInfos = &IID_IEnumSyncProviderConfigUIInfos_Value;
pub const IEnumSyncProviderConfigUIInfos = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumSyncProviderConfigUIInfos,
            c_factories: u32,
            pp_sync_provider_config_u_i_info: [*]?*ISyncProviderConfigUIInfo,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumSyncProviderConfigUIInfos,
            c_factories: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumSyncProviderConfigUIInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumSyncProviderConfigUIInfos,
            pp_enum: ?*?*IEnumSyncProviderConfigUIInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_factories_: u32, pp_sync_provider_config_u_i_info_: [*]?*ISyncProviderConfigUIInfo, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumSyncProviderConfigUIInfos.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumSyncProviderConfigUIInfos, @ptrCast(self)), c_factories_, pp_sync_provider_config_u_i_info_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_factories_: u32) HRESULT {
                return @as(*const IEnumSyncProviderConfigUIInfos.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumSyncProviderConfigUIInfos, @ptrCast(self)), c_factories_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumSyncProviderConfigUIInfos.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumSyncProviderConfigUIInfos, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumSyncProviderConfigUIInfos) HRESULT {
                return @as(*const IEnumSyncProviderConfigUIInfos.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumSyncProviderConfigUIInfos, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IEnumSyncProviderInfos_Value = Guid.initString("a04ba850-5eb1-460d-a973-393fcb608a11");
pub const IID_IEnumSyncProviderInfos = &IID_IEnumSyncProviderInfos_Value;
pub const IEnumSyncProviderInfos = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumSyncProviderInfos,
            c_instances: u32,
            pp_sync_provider_info: [*]?*ISyncProviderInfo,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumSyncProviderInfos,
            c_instances: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumSyncProviderInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumSyncProviderInfos,
            pp_enum: ?*?*IEnumSyncProviderInfos,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_instances_: u32, pp_sync_provider_info_: [*]?*ISyncProviderInfo, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumSyncProviderInfos.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumSyncProviderInfos, @ptrCast(self)), c_instances_, pp_sync_provider_info_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_instances_: u32) HRESULT {
                return @as(*const IEnumSyncProviderInfos.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumSyncProviderInfos, @ptrCast(self)), c_instances_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumSyncProviderInfos.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumSyncProviderInfos, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumSyncProviderInfos) HRESULT {
                return @as(*const IEnumSyncProviderInfos.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumSyncProviderInfos, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncProviderInfo_Value = Guid.initString("1ee135de-88a4-4504-b0d0-f7920d7e5ba6");
pub const IID_ISyncProviderInfo = &IID_ISyncProviderInfo_Value;
pub const ISyncProviderInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStore.VTable,
        GetSyncProvider: *const fn (
            self: *const ISyncProviderInfo,
            dw_cls_context: u32,
            pp_sync_provider: ?*?*IRegisteredSyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyStore.MethodMixin(T);
            pub inline fn getSyncProvider(self: *const T, dw_cls_context_: u32, pp_sync_provider_: ?*?*IRegisteredSyncProvider) HRESULT {
                return @as(*const ISyncProviderInfo.VTable, @ptrCast(self.vtable)).GetSyncProvider(@as(*const ISyncProviderInfo, @ptrCast(self)), dw_cls_context_, pp_sync_provider_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncProviderConfigUIInfo_Value = Guid.initString("214141ae-33d7-4d8d-8e37-f227e880ce50");
pub const IID_ISyncProviderConfigUIInfo = &IID_ISyncProviderConfigUIInfo_Value;
pub const ISyncProviderConfigUIInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStore.VTable,
        GetSyncProviderConfigUI: *const fn (
            self: *const ISyncProviderConfigUIInfo,
            dw_cls_context: u32,
            pp_sync_provider_config_u_i: ?*?*ISyncProviderConfigUI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyStore.MethodMixin(T);
            pub inline fn getSyncProviderConfigUI(self: *const T, dw_cls_context_: u32, pp_sync_provider_config_u_i_: ?*?*ISyncProviderConfigUI) HRESULT {
                return @as(*const ISyncProviderConfigUIInfo.VTable, @ptrCast(self.vtable)).GetSyncProviderConfigUI(@as(*const ISyncProviderConfigUIInfo, @ptrCast(self)), dw_cls_context_, pp_sync_provider_config_u_i_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncProviderConfigUI_Value = Guid.initString("7b0705f6-cbcd-4071-ab05-3bdc364d4a0c");
pub const IID_ISyncProviderConfigUI = &IID_ISyncProviderConfigUI_Value;
pub const ISyncProviderConfigUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn (
            self: *const ISyncProviderConfigUI,
            pguid_instance_id: ?*const Guid,
            pguid_content_type: ?*const Guid,
            p_configuration_properties: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisteredProperties: *const fn (
            self: *const ISyncProviderConfigUI,
            pp_config_u_i_properties: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAndRegisterNewSyncProvider: *const fn (
            self: *const ISyncProviderConfigUI,
            hwnd_parent: ?HWND,
            p_unk_context: ?*IUnknown,
            pp_provider_info: ?*?*ISyncProviderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifySyncProvider: *const fn (
            self: *const ISyncProviderConfigUI,
            hwnd_parent: ?HWND,
            p_unk_context: ?*IUnknown,
            p_provider_info: ?*ISyncProviderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn init(self: *const T, pguid_instance_id_: ?*const Guid, pguid_content_type_: ?*const Guid, p_configuration_properties_: ?*IPropertyStore) HRESULT {
                return @as(*const ISyncProviderConfigUI.VTable, @ptrCast(self.vtable)).Init(@as(*const ISyncProviderConfigUI, @ptrCast(self)), pguid_instance_id_, pguid_content_type_, p_configuration_properties_);
            }
            pub inline fn getRegisteredProperties(self: *const T, pp_config_u_i_properties_: ?*?*IPropertyStore) HRESULT {
                return @as(*const ISyncProviderConfigUI.VTable, @ptrCast(self.vtable)).GetRegisteredProperties(@as(*const ISyncProviderConfigUI, @ptrCast(self)), pp_config_u_i_properties_);
            }
            pub inline fn createAndRegisterNewSyncProvider(self: *const T, hwnd_parent_: ?HWND, p_unk_context_: ?*IUnknown, pp_provider_info_: ?*?*ISyncProviderInfo) HRESULT {
                return @as(*const ISyncProviderConfigUI.VTable, @ptrCast(self.vtable)).CreateAndRegisterNewSyncProvider(@as(*const ISyncProviderConfigUI, @ptrCast(self)), hwnd_parent_, p_unk_context_, pp_provider_info_);
            }
            pub inline fn modifySyncProvider(self: *const T, hwnd_parent_: ?HWND, p_unk_context_: ?*IUnknown, p_provider_info_: ?*ISyncProviderInfo) HRESULT {
                return @as(*const ISyncProviderConfigUI.VTable, @ptrCast(self.vtable)).ModifySyncProvider(@as(*const ISyncProviderConfigUI, @ptrCast(self)), hwnd_parent_, p_unk_context_, p_provider_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRegisteredSyncProvider_Value = Guid.initString("913bcf76-47c1-40b5-a896-5e8a9c414c14");
pub const IID_IRegisteredSyncProvider = &IID_IRegisteredSyncProvider_Value;
pub const IRegisteredSyncProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn (
            self: *const IRegisteredSyncProvider,
            pguid_instance_id: ?*const Guid,
            pguid_content_type: ?*const Guid,
            p_context_property_store: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInstanceId: *const fn (
            self: *const IRegisteredSyncProvider,
            pguid_instance_id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IRegisteredSyncProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn init(self: *const T, pguid_instance_id_: ?*const Guid, pguid_content_type_: ?*const Guid, p_context_property_store_: ?*IPropertyStore) HRESULT {
                return @as(*const IRegisteredSyncProvider.VTable, @ptrCast(self.vtable)).Init(@as(*const IRegisteredSyncProvider, @ptrCast(self)), pguid_instance_id_, pguid_content_type_, p_context_property_store_);
            }
            pub inline fn getInstanceId(self: *const T, pguid_instance_id_: ?*Guid) HRESULT {
                return @as(*const IRegisteredSyncProvider.VTable, @ptrCast(self.vtable)).GetInstanceId(@as(*const IRegisteredSyncProvider, @ptrCast(self)), pguid_instance_id_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IRegisteredSyncProvider.VTable, @ptrCast(self.vtable)).Reset(@as(*const IRegisteredSyncProvider, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNC_REGISTRATION_EVENT = enum(i32) {
    PROVIDER_ADDED = 0,
    PROVIDER_REMOVED = 1,
    PROVIDER_UPDATED = 2,
    PROVIDER_STATE_CHANGED = 3,
    CONFIGUI_ADDED = 4,
    CONFIGUI_REMOVED = 5,
    CONFIGUI_UPDATED = 6,
};
pub const SRE_PROVIDER_ADDED = SYNC_REGISTRATION_EVENT.PROVIDER_ADDED;
pub const SRE_PROVIDER_REMOVED = SYNC_REGISTRATION_EVENT.PROVIDER_REMOVED;
pub const SRE_PROVIDER_UPDATED = SYNC_REGISTRATION_EVENT.PROVIDER_UPDATED;
pub const SRE_PROVIDER_STATE_CHANGED = SYNC_REGISTRATION_EVENT.PROVIDER_STATE_CHANGED;
pub const SRE_CONFIGUI_ADDED = SYNC_REGISTRATION_EVENT.CONFIGUI_ADDED;
pub const SRE_CONFIGUI_REMOVED = SYNC_REGISTRATION_EVENT.CONFIGUI_REMOVED;
pub const SRE_CONFIGUI_UPDATED = SYNC_REGISTRATION_EVENT.CONFIGUI_UPDATED;

// TODO: this type is limited to platform 'windows6.1'
const IID_ISyncRegistrationChange_Value = Guid.initString("eea0d9ae-6b29-43b4-9e70-e3ae33bb2c3b");
pub const IID_ISyncRegistrationChange = &IID_ISyncRegistrationChange_Value;
pub const ISyncRegistrationChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEvent: *const fn (
            self: *const ISyncRegistrationChange,
            psre_event: ?*SYNC_REGISTRATION_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInstanceId: *const fn (
            self: *const ISyncRegistrationChange,
            pguid_instance_id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getEvent(self: *const T, psre_event_: ?*SYNC_REGISTRATION_EVENT) HRESULT {
                return @as(*const ISyncRegistrationChange.VTable, @ptrCast(self.vtable)).GetEvent(@as(*const ISyncRegistrationChange, @ptrCast(self)), psre_event_);
            }
            pub inline fn getInstanceId(self: *const T, pguid_instance_id_: ?*Guid) HRESULT {
                return @as(*const ISyncRegistrationChange.VTable, @ptrCast(self.vtable)).GetInstanceId(@as(*const ISyncRegistrationChange, @ptrCast(self)), pguid_instance_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IPropertyStore = @import("../ui/shell/properties_system.zig").IPropertyStore;
const IUnknown = @import("../system/com.zig").IUnknown;
const PROPERTYKEY = @import("../ui/shell/properties_system.zig").PROPERTYKEY;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
