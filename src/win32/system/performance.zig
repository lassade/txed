//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (185)
//--------------------------------------------------------------------------------
pub const MAX_COUNTER_PATH = @as(u32, 256);
pub const PDH_MAX_COUNTER_NAME = @as(u32, 1024);
pub const PDH_MAX_INSTANCE_NAME = @as(u32, 1024);
pub const PDH_MAX_COUNTER_PATH = @as(u32, 2048);
pub const PDH_MAX_DATASOURCE_PATH = @as(u32, 1024);
pub const H_WBEM_DATASOURCE = @as(i32, -1);
pub const PDH_MAX_SCALE = @as(i32, 7);
pub const PDH_MIN_SCALE = @as(i32, -7);
pub const PDH_NOEXPANDCOUNTERS = @as(u32, 1);
pub const PDH_NOEXPANDINSTANCES = @as(u32, 2);
pub const PDH_REFRESHCOUNTERS = @as(u32, 4);
pub const PDH_LOG_TYPE_RETIRED_BIN = @as(u32, 3);
pub const PDH_LOG_TYPE_TRACE_KERNEL = @as(u32, 4);
pub const PDH_LOG_TYPE_TRACE_GENERIC = @as(u32, 5);
pub const PERF_PROVIDER_USER_MODE = @as(u32, 0);
pub const PERF_PROVIDER_KERNEL_MODE = @as(u32, 1);
pub const PERF_PROVIDER_DRIVER = @as(u32, 2);
pub const PERF_COUNTERSET_FLAG_MULTIPLE = @as(u32, 2);
pub const PERF_COUNTERSET_FLAG_AGGREGATE = @as(u32, 4);
pub const PERF_COUNTERSET_FLAG_HISTORY = @as(u32, 8);
pub const PERF_COUNTERSET_FLAG_INSTANCE = @as(u32, 16);
pub const PERF_COUNTERSET_SINGLE_INSTANCE = @as(u32, 0);
pub const PERF_COUNTERSET_MULTI_INSTANCES = @as(u32, 2);
pub const PERF_COUNTERSET_SINGLE_AGGREGATE = @as(u32, 4);
pub const PERF_AGGREGATE_MAX = @as(u32, 4);
pub const PERF_ATTRIB_BY_REFERENCE = @as(u64, 1);
pub const PERF_ATTRIB_NO_DISPLAYABLE = @as(u64, 2);
pub const PERF_ATTRIB_NO_GROUP_SEPARATOR = @as(u64, 4);
pub const PERF_ATTRIB_DISPLAY_AS_REAL = @as(u64, 8);
pub const PERF_ATTRIB_DISPLAY_AS_HEX = @as(u64, 16);
pub const PERF_WILDCARD_COUNTER = @as(u32, 4294967295);
pub const PERF_WILDCARD_INSTANCE = "*";
pub const PERF_AGGREGATE_INSTANCE = "_Total";
pub const PERF_MAX_INSTANCE_NAME = @as(u32, 1024);
pub const PERF_ADD_COUNTER = @as(u32, 1);
pub const PERF_REMOVE_COUNTER = @as(u32, 2);
pub const PERF_ENUM_INSTANCES = @as(u32, 3);
pub const PERF_COLLECT_START = @as(u32, 5);
pub const PERF_COLLECT_END = @as(u32, 6);
pub const PERF_FILTER = @as(u32, 9);
pub const PERF_DATA_VERSION = @as(u32, 1);
pub const PERF_DATA_REVISION = @as(u32, 1);
pub const PERF_NO_INSTANCES = @as(i32, -1);
pub const PERF_METADATA_MULTIPLE_INSTANCES = @as(i32, -2);
pub const PERF_METADATA_NO_INSTANCES = @as(i32, -3);
pub const PERF_SIZE_DWORD = @as(u32, 0);
pub const PERF_SIZE_LARGE = @as(u32, 256);
pub const PERF_SIZE_ZERO = @as(u32, 512);
pub const PERF_SIZE_VARIABLE_LEN = @as(u32, 768);
pub const PERF_TYPE_NUMBER = @as(u32, 0);
pub const PERF_TYPE_COUNTER = @as(u32, 1024);
pub const PERF_TYPE_TEXT = @as(u32, 2048);
pub const PERF_TYPE_ZERO = @as(u32, 3072);
pub const PERF_NUMBER_HEX = @as(u32, 0);
pub const PERF_NUMBER_DECIMAL = @as(u32, 65536);
pub const PERF_NUMBER_DEC_1000 = @as(u32, 131072);
pub const PERF_COUNTER_VALUE = @as(u32, 0);
pub const PERF_COUNTER_RATE = @as(u32, 65536);
pub const PERF_COUNTER_FRACTION = @as(u32, 131072);
pub const PERF_COUNTER_BASE = @as(u32, 196608);
pub const PERF_COUNTER_ELAPSED = @as(u32, 262144);
pub const PERF_COUNTER_QUEUELEN = @as(u32, 327680);
pub const PERF_COUNTER_HISTOGRAM = @as(u32, 393216);
pub const PERF_COUNTER_PRECISION = @as(u32, 458752);
pub const PERF_TEXT_UNICODE = @as(u32, 0);
pub const PERF_TEXT_ASCII = @as(u32, 65536);
pub const PERF_TIMER_TICK = @as(u32, 0);
pub const PERF_TIMER_100NS = @as(u32, 1048576);
pub const PERF_OBJECT_TIMER = @as(u32, 2097152);
pub const PERF_DELTA_COUNTER = @as(u32, 4194304);
pub const PERF_DELTA_BASE = @as(u32, 8388608);
pub const PERF_INVERSE_COUNTER = @as(u32, 16777216);
pub const PERF_MULTI_COUNTER = @as(u32, 33554432);
pub const PERF_DISPLAY_NO_SUFFIX = @as(u32, 0);
pub const PERF_DISPLAY_PER_SEC = @as(u32, 268435456);
pub const PERF_DISPLAY_PERCENT = @as(u32, 536870912);
pub const PERF_DISPLAY_SECONDS = @as(u32, 805306368);
pub const PERF_DISPLAY_NOSHOW = @as(u32, 1073741824);
pub const PERF_COUNTER_HISTOGRAM_TYPE = @as(u32, 2147483648);
pub const PERF_NO_UNIQUE_ID = @as(i32, -1);
pub const MAX_PERF_OBJECTS_IN_QUERY_FUNCTION = @as(i32, 64);
pub const WINPERF_LOG_NONE = @as(u32, 0);
pub const WINPERF_LOG_USER = @as(u32, 1);
pub const WINPERF_LOG_DEBUG = @as(u32, 2);
pub const WINPERF_LOG_VERBOSE = @as(u32, 3);
pub const LIBID_SystemMonitor = Guid.initString("1b773e42-2509-11cf-942f-008029004347");
pub const DIID_DICounterItem = Guid.initString("c08c4ff2-0e2e-11cf-942c-008029004347");
pub const DIID_DILogFileItem = Guid.initString("8d093ffc-f777-4917-82d1-833fbc54c58f");
pub const DIID_DISystemMonitor = Guid.initString("13d73d81-c32e-11cf-9398-00aa00a3ddea");
pub const DIID_DISystemMonitorInternal = Guid.initString("194eb242-c32c-11cf-9398-00aa00a3ddea");
pub const DIID_DISystemMonitorEvents = Guid.initString("84979930-4ab3-11cf-943a-008029004347");
pub const PDH_CSTATUS_VALID_DATA = @as(i32, 0);
pub const PDH_CSTATUS_NEW_DATA = @as(i32, 1);
pub const PDH_CSTATUS_NO_MACHINE = @as(i32, -2147481648);
pub const PDH_CSTATUS_NO_INSTANCE = @as(i32, -2147481647);
pub const PDH_MORE_DATA = @as(i32, -2147481646);
pub const PDH_CSTATUS_ITEM_NOT_VALIDATED = @as(i32, -2147481645);
pub const PDH_RETRY = @as(i32, -2147481644);
pub const PDH_NO_DATA = @as(i32, -2147481643);
pub const PDH_CALC_NEGATIVE_DENOMINATOR = @as(i32, -2147481642);
pub const PDH_CALC_NEGATIVE_TIMEBASE = @as(i32, -2147481641);
pub const PDH_CALC_NEGATIVE_VALUE = @as(i32, -2147481640);
pub const PDH_DIALOG_CANCELLED = @as(i32, -2147481639);
pub const PDH_END_OF_LOG_FILE = @as(i32, -2147481638);
pub const PDH_ASYNC_QUERY_TIMEOUT = @as(i32, -2147481637);
pub const PDH_CANNOT_SET_DEFAULT_REALTIME_DATASOURCE = @as(i32, -2147481636);
pub const PDH_UNABLE_MAP_NAME_FILES = @as(i32, -2147480619);
pub const PDH_PLA_VALIDATION_WARNING = @as(i32, -2147480589);
pub const PDH_CSTATUS_NO_OBJECT = @as(i32, -1073738824);
pub const PDH_CSTATUS_NO_COUNTER = @as(i32, -1073738823);
pub const PDH_CSTATUS_INVALID_DATA = @as(i32, -1073738822);
pub const PDH_MEMORY_ALLOCATION_FAILURE = @as(i32, -1073738821);
pub const PDH_INVALID_HANDLE = @as(i32, -1073738820);
pub const PDH_INVALID_ARGUMENT = @as(i32, -1073738819);
pub const PDH_FUNCTION_NOT_FOUND = @as(i32, -1073738818);
pub const PDH_CSTATUS_NO_COUNTERNAME = @as(i32, -1073738817);
pub const PDH_CSTATUS_BAD_COUNTERNAME = @as(i32, -1073738816);
pub const PDH_INVALID_BUFFER = @as(i32, -1073738815);
pub const PDH_INSUFFICIENT_BUFFER = @as(i32, -1073738814);
pub const PDH_CANNOT_CONNECT_MACHINE = @as(i32, -1073738813);
pub const PDH_INVALID_PATH = @as(i32, -1073738812);
pub const PDH_INVALID_INSTANCE = @as(i32, -1073738811);
pub const PDH_INVALID_DATA = @as(i32, -1073738810);
pub const PDH_NO_DIALOG_DATA = @as(i32, -1073738809);
pub const PDH_CANNOT_READ_NAME_STRINGS = @as(i32, -1073738808);
pub const PDH_LOG_FILE_CREATE_ERROR = @as(i32, -1073738807);
pub const PDH_LOG_FILE_OPEN_ERROR = @as(i32, -1073738806);
pub const PDH_LOG_TYPE_NOT_FOUND = @as(i32, -1073738805);
pub const PDH_NO_MORE_DATA = @as(i32, -1073738804);
pub const PDH_ENTRY_NOT_IN_LOG_FILE = @as(i32, -1073738803);
pub const PDH_DATA_SOURCE_IS_LOG_FILE = @as(i32, -1073738802);
pub const PDH_DATA_SOURCE_IS_REAL_TIME = @as(i32, -1073738801);
pub const PDH_UNABLE_READ_LOG_HEADER = @as(i32, -1073738800);
pub const PDH_FILE_NOT_FOUND = @as(i32, -1073738799);
pub const PDH_FILE_ALREADY_EXISTS = @as(i32, -1073738798);
pub const PDH_NOT_IMPLEMENTED = @as(i32, -1073738797);
pub const PDH_STRING_NOT_FOUND = @as(i32, -1073738796);
pub const PDH_UNKNOWN_LOG_FORMAT = @as(i32, -1073738794);
pub const PDH_UNKNOWN_LOGSVC_COMMAND = @as(i32, -1073738793);
pub const PDH_LOGSVC_QUERY_NOT_FOUND = @as(i32, -1073738792);
pub const PDH_LOGSVC_NOT_OPENED = @as(i32, -1073738791);
pub const PDH_WBEM_ERROR = @as(i32, -1073738790);
pub const PDH_ACCESS_DENIED = @as(i32, -1073738789);
pub const PDH_LOG_FILE_TOO_SMALL = @as(i32, -1073738788);
pub const PDH_INVALID_DATASOURCE = @as(i32, -1073738787);
pub const PDH_INVALID_SQLDB = @as(i32, -1073738786);
pub const PDH_NO_COUNTERS = @as(i32, -1073738785);
pub const PDH_SQL_ALLOC_FAILED = @as(i32, -1073738784);
pub const PDH_SQL_ALLOCCON_FAILED = @as(i32, -1073738783);
pub const PDH_SQL_EXEC_DIRECT_FAILED = @as(i32, -1073738782);
pub const PDH_SQL_FETCH_FAILED = @as(i32, -1073738781);
pub const PDH_SQL_ROWCOUNT_FAILED = @as(i32, -1073738780);
pub const PDH_SQL_MORE_RESULTS_FAILED = @as(i32, -1073738779);
pub const PDH_SQL_CONNECT_FAILED = @as(i32, -1073738778);
pub const PDH_SQL_BIND_FAILED = @as(i32, -1073738777);
pub const PDH_CANNOT_CONNECT_WMI_SERVER = @as(i32, -1073738776);
pub const PDH_PLA_COLLECTION_ALREADY_RUNNING = @as(i32, -1073738775);
pub const PDH_PLA_ERROR_SCHEDULE_OVERLAP = @as(i32, -1073738774);
pub const PDH_PLA_COLLECTION_NOT_FOUND = @as(i32, -1073738773);
pub const PDH_PLA_ERROR_SCHEDULE_ELAPSED = @as(i32, -1073738772);
pub const PDH_PLA_ERROR_NOSTART = @as(i32, -1073738771);
pub const PDH_PLA_ERROR_ALREADY_EXISTS = @as(i32, -1073738770);
pub const PDH_PLA_ERROR_TYPE_MISMATCH = @as(i32, -1073738769);
pub const PDH_PLA_ERROR_FILEPATH = @as(i32, -1073738768);
pub const PDH_PLA_SERVICE_ERROR = @as(i32, -1073738767);
pub const PDH_PLA_VALIDATION_ERROR = @as(i32, -1073738766);
pub const PDH_PLA_ERROR_NAME_TOO_LONG = @as(i32, -1073738764);
pub const PDH_INVALID_SQL_LOG_FORMAT = @as(i32, -1073738763);
pub const PDH_COUNTER_ALREADY_IN_QUERY = @as(i32, -1073738762);
pub const PDH_BINARY_LOG_CORRUPT = @as(i32, -1073738761);
pub const PDH_LOG_SAMPLE_TOO_SMALL = @as(i32, -1073738760);
pub const PDH_OS_LATER_VERSION = @as(i32, -1073738759);
pub const PDH_OS_EARLIER_VERSION = @as(i32, -1073738758);
pub const PDH_INCORRECT_APPEND_TIME = @as(i32, -1073738757);
pub const PDH_UNMATCHED_APPEND_COUNTER = @as(i32, -1073738756);
pub const PDH_SQL_ALTER_DETAIL_FAILED = @as(i32, -1073738755);
pub const PDH_QUERY_PERF_DATA_TIMEOUT = @as(i32, -1073738754);
pub const PLA_CAPABILITY_LOCAL = @as(u32, 268435456);
pub const PLA_CAPABILITY_V1_SVC = @as(u32, 1);
pub const PLA_CAPABILITY_V1_SESSION = @as(u32, 2);
pub const PLA_CAPABILITY_V1_SYSTEM = @as(u32, 4);
pub const PLA_CAPABILITY_LEGACY_SESSION = @as(u32, 8);
pub const PLA_CAPABILITY_LEGACY_SVC = @as(u32, 16);
pub const PLA_CAPABILITY_AUTOLOGGER = @as(u32, 32);
pub const S_PDH = Guid.initString("04d66358-c4a1-419b-8023-23b73902de2c");

//--------------------------------------------------------------------------------
// Section: Types (144)
//--------------------------------------------------------------------------------
pub const PERF_DETAIL = enum(u32) {
    NOVICE = 100,
    ADVANCED = 200,
    EXPERT = 300,
    WIZARD = 400,
};
pub const PERF_DETAIL_NOVICE = PERF_DETAIL.NOVICE;
pub const PERF_DETAIL_ADVANCED = PERF_DETAIL.ADVANCED;
pub const PERF_DETAIL_EXPERT = PERF_DETAIL.EXPERT;
pub const PERF_DETAIL_WIZARD = PERF_DETAIL.WIZARD;

pub const REAL_TIME_DATA_SOURCE_ID_FLAGS = enum(u32) {
    REGISTRY = 1,
    WBEM = 4,
};
pub const DATA_SOURCE_REGISTRY = REAL_TIME_DATA_SOURCE_ID_FLAGS.REGISTRY;
pub const DATA_SOURCE_WBEM = REAL_TIME_DATA_SOURCE_ID_FLAGS.WBEM;

pub const PDH_PATH_FLAGS = enum(u32) {
    RESULT = 1,
    INPUT = 2,
    NONE = 0,
};
pub const PDH_PATH_WBEM_RESULT = PDH_PATH_FLAGS.RESULT;
pub const PDH_PATH_WBEM_INPUT = PDH_PATH_FLAGS.INPUT;
pub const PDH_PATH_WBEM_NONE = PDH_PATH_FLAGS.NONE;

pub const PDH_FMT = enum(u32) {
    DOUBLE = 512,
    LARGE = 1024,
    LONG = 256,
};
pub const PDH_FMT_DOUBLE = PDH_FMT.DOUBLE;
pub const PDH_FMT_LARGE = PDH_FMT.LARGE;
pub const PDH_FMT_LONG = PDH_FMT.LONG;

pub const PDH_LOG_TYPE = enum(u32) {
    UNDEFINED = 0,
    CSV = 1,
    SQL = 7,
    TSV = 2,
    BINARY = 8,
    PERFMON = 6,
};
pub const PDH_LOG_TYPE_UNDEFINED = PDH_LOG_TYPE.UNDEFINED;
pub const PDH_LOG_TYPE_CSV = PDH_LOG_TYPE.CSV;
pub const PDH_LOG_TYPE_SQL = PDH_LOG_TYPE.SQL;
pub const PDH_LOG_TYPE_TSV = PDH_LOG_TYPE.TSV;
pub const PDH_LOG_TYPE_BINARY = PDH_LOG_TYPE.BINARY;
pub const PDH_LOG_TYPE_PERFMON = PDH_LOG_TYPE.PERFMON;

pub const PDH_LOG = enum(u32) {
    READ_ACCESS = 65536,
    WRITE_ACCESS = 131072,
    UPDATE_ACCESS = 262144,
};
pub const PDH_LOG_READ_ACCESS = PDH_LOG.READ_ACCESS;
pub const PDH_LOG_WRITE_ACCESS = PDH_LOG.WRITE_ACCESS;
pub const PDH_LOG_UPDATE_ACCESS = PDH_LOG.UPDATE_ACCESS;

pub const PDH_SELECT_DATA_SOURCE_FLAGS = enum(u32) {
    FILE_BROWSER_ONLY = 1,
    NONE = 0,
};
pub const PDH_FLAGS_FILE_BROWSER_ONLY = PDH_SELECT_DATA_SOURCE_FLAGS.FILE_BROWSER_ONLY;
pub const PDH_FLAGS_NONE = PDH_SELECT_DATA_SOURCE_FLAGS.NONE;

pub const PDH_DLL_VERSION = enum(u32) {
    CVERSION_WIN50 = 1280,
    VERSION = 1283,
};
pub const PDH_CVERSION_WIN50 = PDH_DLL_VERSION.CVERSION_WIN50;
pub const PDH_VERSION = PDH_DLL_VERSION.VERSION;

pub const PERF_COUNTER_AGGREGATE_FUNC = enum(u32) {
    UNDEFINED = 0,
    TOTAL = 1,
    AVG = 2,
    MIN = 3,
};
pub const PERF_AGGREGATE_UNDEFINED = PERF_COUNTER_AGGREGATE_FUNC.UNDEFINED;
pub const PERF_AGGREGATE_TOTAL = PERF_COUNTER_AGGREGATE_FUNC.TOTAL;
pub const PERF_AGGREGATE_AVG = PERF_COUNTER_AGGREGATE_FUNC.AVG;
pub const PERF_AGGREGATE_MIN = PERF_COUNTER_AGGREGATE_FUNC.MIN;

// TODO: this type has a FreeFunc 'PerfStopProvider', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const PerfProviderHandle = isize;

// TODO: this type has a FreeFunc 'PerfCloseQueryHandle', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const PerfQueryHandle = isize;

const CLSID_DataCollectorSet_Value = Guid.initString("03837521-098b-11d8-9414-505054503030");
pub const CLSID_DataCollectorSet = &CLSID_DataCollectorSet_Value;

const CLSID_TraceSession_Value = Guid.initString("0383751c-098b-11d8-9414-505054503030");
pub const CLSID_TraceSession = &CLSID_TraceSession_Value;

const CLSID_TraceSessionCollection_Value = Guid.initString("03837530-098b-11d8-9414-505054503030");
pub const CLSID_TraceSessionCollection = &CLSID_TraceSessionCollection_Value;

const CLSID_TraceDataProvider_Value = Guid.initString("03837513-098b-11d8-9414-505054503030");
pub const CLSID_TraceDataProvider = &CLSID_TraceDataProvider_Value;

const CLSID_TraceDataProviderCollection_Value = Guid.initString("03837511-098b-11d8-9414-505054503030");
pub const CLSID_TraceDataProviderCollection = &CLSID_TraceDataProviderCollection_Value;

const CLSID_DataCollectorSetCollection_Value = Guid.initString("03837525-098b-11d8-9414-505054503030");
pub const CLSID_DataCollectorSetCollection = &CLSID_DataCollectorSetCollection_Value;

const CLSID_LegacyDataCollectorSet_Value = Guid.initString("03837526-098b-11d8-9414-505054503030");
pub const CLSID_LegacyDataCollectorSet = &CLSID_LegacyDataCollectorSet_Value;

const CLSID_LegacyDataCollectorSetCollection_Value = Guid.initString("03837527-098b-11d8-9414-505054503030");
pub const CLSID_LegacyDataCollectorSetCollection = &CLSID_LegacyDataCollectorSetCollection_Value;

const CLSID_LegacyTraceSession_Value = Guid.initString("03837528-098b-11d8-9414-505054503030");
pub const CLSID_LegacyTraceSession = &CLSID_LegacyTraceSession_Value;

const CLSID_LegacyTraceSessionCollection_Value = Guid.initString("03837529-098b-11d8-9414-505054503030");
pub const CLSID_LegacyTraceSessionCollection = &CLSID_LegacyTraceSessionCollection_Value;

const CLSID_ServerDataCollectorSet_Value = Guid.initString("03837531-098b-11d8-9414-505054503030");
pub const CLSID_ServerDataCollectorSet = &CLSID_ServerDataCollectorSet_Value;

const CLSID_ServerDataCollectorSetCollection_Value = Guid.initString("03837532-098b-11d8-9414-505054503030");
pub const CLSID_ServerDataCollectorSetCollection = &CLSID_ServerDataCollectorSetCollection_Value;

const CLSID_SystemDataCollectorSet_Value = Guid.initString("03837546-098b-11d8-9414-505054503030");
pub const CLSID_SystemDataCollectorSet = &CLSID_SystemDataCollectorSet_Value;

const CLSID_SystemDataCollectorSetCollection_Value = Guid.initString("03837547-098b-11d8-9414-505054503030");
pub const CLSID_SystemDataCollectorSetCollection = &CLSID_SystemDataCollectorSetCollection_Value;

const CLSID_BootTraceSession_Value = Guid.initString("03837538-098b-11d8-9414-505054503030");
pub const CLSID_BootTraceSession = &CLSID_BootTraceSession_Value;

const CLSID_BootTraceSessionCollection_Value = Guid.initString("03837539-098b-11d8-9414-505054503030");
pub const CLSID_BootTraceSessionCollection = &CLSID_BootTraceSessionCollection_Value;

pub const DataCollectorType = enum(i32) {
    PerformanceCounter = 0,
    Trace = 1,
    Configuration = 2,
    Alert = 3,
    ApiTrace = 4,
};
pub const plaPerformanceCounter = DataCollectorType.PerformanceCounter;
pub const plaTrace = DataCollectorType.Trace;
pub const plaConfiguration = DataCollectorType.Configuration;
pub const plaAlert = DataCollectorType.Alert;
pub const plaApiTrace = DataCollectorType.ApiTrace;

pub const FileFormat = enum(i32) {
    CommaSeparated = 0,
    TabSeparated = 1,
    Sql = 2,
    Binary = 3,
};
pub const plaCommaSeparated = FileFormat.CommaSeparated;
pub const plaTabSeparated = FileFormat.TabSeparated;
pub const plaSql = FileFormat.Sql;
pub const plaBinary = FileFormat.Binary;

pub const AutoPathFormat = enum(i32) {
    None = 0,
    Pattern = 1,
    Computer = 2,
    MonthDayHour = 256,
    SerialNumber = 512,
    YearDayOfYear = 1024,
    YearMonth = 2048,
    YearMonthDay = 4096,
    YearMonthDayHour = 8192,
    MonthDayHourMinute = 16384,
};
pub const plaNone = AutoPathFormat.None;
pub const plaPattern = AutoPathFormat.Pattern;
pub const plaComputer = AutoPathFormat.Computer;
pub const plaMonthDayHour = AutoPathFormat.MonthDayHour;
pub const plaSerialNumber = AutoPathFormat.SerialNumber;
pub const plaYearDayOfYear = AutoPathFormat.YearDayOfYear;
pub const plaYearMonth = AutoPathFormat.YearMonth;
pub const plaYearMonthDay = AutoPathFormat.YearMonthDay;
pub const plaYearMonthDayHour = AutoPathFormat.YearMonthDayHour;
pub const plaMonthDayHourMinute = AutoPathFormat.MonthDayHourMinute;

pub const DataCollectorSetStatus = enum(i32) {
    Stopped = 0,
    Running = 1,
    Compiling = 2,
    Pending = 3,
    Undefined = 4,
};
pub const plaStopped = DataCollectorSetStatus.Stopped;
pub const plaRunning = DataCollectorSetStatus.Running;
pub const plaCompiling = DataCollectorSetStatus.Compiling;
pub const plaPending = DataCollectorSetStatus.Pending;
pub const plaUndefined = DataCollectorSetStatus.Undefined;

pub const ClockType = enum(i32) {
    TimeStamp = 0,
    Performance = 1,
    System = 2,
    Cycle = 3,
};
pub const plaTimeStamp = ClockType.TimeStamp;
pub const plaPerformance = ClockType.Performance;
pub const plaSystem = ClockType.System;
pub const plaCycle = ClockType.Cycle;

pub const StreamMode = enum(i32) {
    File = 1,
    RealTime = 2,
    Both = 3,
    Buffering = 4,
};
pub const plaFile = StreamMode.File;
pub const plaRealTime = StreamMode.RealTime;
pub const plaBoth = StreamMode.Both;
pub const plaBuffering = StreamMode.Buffering;

pub const CommitMode = enum(i32) {
    CreateNew = 1,
    Modify = 2,
    CreateOrModify = 3,
    UpdateRunningInstance = 16,
    FlushTrace = 32,
    ValidateOnly = 4096,
};
pub const plaCreateNew = CommitMode.CreateNew;
pub const plaModify = CommitMode.Modify;
pub const plaCreateOrModify = CommitMode.CreateOrModify;
pub const plaUpdateRunningInstance = CommitMode.UpdateRunningInstance;
pub const plaFlushTrace = CommitMode.FlushTrace;
pub const plaValidateOnly = CommitMode.ValidateOnly;

pub const ValueMapType = enum(i32) {
    Index = 1,
    Flag = 2,
    FlagArray = 3,
    Validation = 4,
};
pub const plaIndex = ValueMapType.Index;
pub const plaFlag = ValueMapType.Flag;
pub const plaFlagArray = ValueMapType.FlagArray;
pub const plaValidation = ValueMapType.Validation;

pub const WeekDays = enum(i32) {
    RunOnce = 0,
    Sunday = 1,
    Monday = 2,
    Tuesday = 4,
    Wednesday = 8,
    Thursday = 16,
    Friday = 32,
    Saturday = 64,
    Everyday = 127,
};
pub const plaRunOnce = WeekDays.RunOnce;
pub const plaSunday = WeekDays.Sunday;
pub const plaMonday = WeekDays.Monday;
pub const plaTuesday = WeekDays.Tuesday;
pub const plaWednesday = WeekDays.Wednesday;
pub const plaThursday = WeekDays.Thursday;
pub const plaFriday = WeekDays.Friday;
pub const plaSaturday = WeekDays.Saturday;
pub const plaEveryday = WeekDays.Everyday;

pub const ResourcePolicy = enum(i32) {
    Largest = 0,
    Oldest = 1,
};
pub const plaDeleteLargest = ResourcePolicy.Largest;
pub const plaDeleteOldest = ResourcePolicy.Oldest;

pub const DataManagerSteps = enum(i32) {
    CreateReport = 1,
    RunRules = 2,
    CreateHtml = 4,
    FolderActions = 8,
    ResourceFreeing = 16,
};
pub const plaCreateReport = DataManagerSteps.CreateReport;
pub const plaRunRules = DataManagerSteps.RunRules;
pub const plaCreateHtml = DataManagerSteps.CreateHtml;
pub const plaFolderActions = DataManagerSteps.FolderActions;
pub const plaResourceFreeing = DataManagerSteps.ResourceFreeing;

pub const FolderActionSteps = enum(i32) {
    CreateCab = 1,
    DeleteData = 2,
    SendCab = 4,
    DeleteCab = 8,
    DeleteReport = 16,
};
pub const plaCreateCab = FolderActionSteps.CreateCab;
pub const plaDeleteData = FolderActionSteps.DeleteData;
pub const plaSendCab = FolderActionSteps.SendCab;
pub const plaDeleteCab = FolderActionSteps.DeleteCab;
pub const plaDeleteReport = FolderActionSteps.DeleteReport;

pub const PLA_CABEXTRACT_CALLBACK = *const fn (
    file_name: ?[*:0]const u16,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataCollectorSet_Value = Guid.initString("03837520-098b-11d8-9414-505054503030");
pub const IID_IDataCollectorSet = &IID_IDataCollectorSet_Value;
pub const IDataCollectorSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataCollectors: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            collectors: ?*?*IDataCollectorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Duration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Duration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            seconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DescriptionUnresolved: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            descr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            display_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayNameUnresolved: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Keywords: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            keywords: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Keywords: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            keywords: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LatestOutputLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LatestOutputLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutputLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            folder: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            folder: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Segment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            segment: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Segment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            segment: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SegmentMaxDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SegmentMaxDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            seconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SegmentMaxSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SegmentMaxSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SerialNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SerialNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Server: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            server: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            status: ?*DataCollectorSetStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subdirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            folder: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subdirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            folder: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubdirectoryFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            format: ?*AutoPathFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SubdirectoryFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            format: AutoPathFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubdirectoryFormatPattern: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            pattern: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SubdirectoryFormatPattern: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            pattern: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Task: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Task: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskRunAsSelf: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            run_as_self: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskRunAsSelf: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            run_as_self: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskArguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskArguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskUserTextArguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            user_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskUserTextArguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            user_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Schedules: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            pp_schedules: ?*?*IScheduleCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SchedulesEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SchedulesEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserAccount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            user: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Xml: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            xml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            pbstr_security: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            bstr_security: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StopOnCompletion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            stop: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StopOnCompletion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            stop: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataManager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSet,
            data_manager: ?*?*IDataManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentials: *const fn (
            self: *const IDataCollectorSet,
            user: ?BSTR,
            password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Query: *const fn (
            self: *const IDataCollectorSet,
            name: ?BSTR,
            server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IDataCollectorSet,
            name: ?BSTR,
            server: ?BSTR,
            mode: CommitMode,
            validation: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: *const fn (
            self: *const IDataCollectorSet,
            synchronous: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IDataCollectorSet,
            synchronous: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetXml: *const fn (
            self: *const IDataCollectorSet,
            xml: ?BSTR,
            validation: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn (
            self: *const IDataCollectorSet,
            key: ?BSTR,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IDataCollectorSet,
            key: ?BSTR,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDataCollectors(self: *const T, collectors_: ?*?*IDataCollectorCollection) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_DataCollectors(@as(*const IDataCollectorSet, @ptrCast(self)), collectors_);
            }
            pub inline fn getDuration(self: *const T, seconds_: ?*u32) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Duration(@as(*const IDataCollectorSet, @ptrCast(self)), seconds_);
            }
            pub inline fn putDuration(self: *const T, seconds_: u32) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_Duration(@as(*const IDataCollectorSet, @ptrCast(self)), seconds_);
            }
            pub inline fn getDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IDataCollectorSet, @ptrCast(self)), description_);
            }
            pub inline fn putDescription(self: *const T, description_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IDataCollectorSet, @ptrCast(self)), description_);
            }
            pub inline fn getDescriptionUnresolved(self: *const T, descr_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_DescriptionUnresolved(@as(*const IDataCollectorSet, @ptrCast(self)), descr_);
            }
            pub inline fn getDisplayName(self: *const T, display_name_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IDataCollectorSet, @ptrCast(self)), display_name_);
            }
            pub inline fn putDisplayName(self: *const T, display_name_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_DisplayName(@as(*const IDataCollectorSet, @ptrCast(self)), display_name_);
            }
            pub inline fn getDisplayNameUnresolved(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_DisplayNameUnresolved(@as(*const IDataCollectorSet, @ptrCast(self)), name_);
            }
            pub inline fn getKeywords(self: *const T, keywords_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Keywords(@as(*const IDataCollectorSet, @ptrCast(self)), keywords_);
            }
            pub inline fn putKeywords(self: *const T, keywords_: ?*SAFEARRAY) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_Keywords(@as(*const IDataCollectorSet, @ptrCast(self)), keywords_);
            }
            pub inline fn getLatestOutputLocation(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_LatestOutputLocation(@as(*const IDataCollectorSet, @ptrCast(self)), path_);
            }
            pub inline fn putLatestOutputLocation(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_LatestOutputLocation(@as(*const IDataCollectorSet, @ptrCast(self)), path_);
            }
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IDataCollectorSet, @ptrCast(self)), name_);
            }
            pub inline fn getOutputLocation(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_OutputLocation(@as(*const IDataCollectorSet, @ptrCast(self)), path_);
            }
            pub inline fn getRootPath(self: *const T, folder_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_RootPath(@as(*const IDataCollectorSet, @ptrCast(self)), folder_);
            }
            pub inline fn putRootPath(self: *const T, folder_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_RootPath(@as(*const IDataCollectorSet, @ptrCast(self)), folder_);
            }
            pub inline fn getSegment(self: *const T, segment_: ?*i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Segment(@as(*const IDataCollectorSet, @ptrCast(self)), segment_);
            }
            pub inline fn putSegment(self: *const T, segment_: i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_Segment(@as(*const IDataCollectorSet, @ptrCast(self)), segment_);
            }
            pub inline fn getSegmentMaxDuration(self: *const T, seconds_: ?*u32) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_SegmentMaxDuration(@as(*const IDataCollectorSet, @ptrCast(self)), seconds_);
            }
            pub inline fn putSegmentMaxDuration(self: *const T, seconds_: u32) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_SegmentMaxDuration(@as(*const IDataCollectorSet, @ptrCast(self)), seconds_);
            }
            pub inline fn getSegmentMaxSize(self: *const T, size_: ?*u32) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_SegmentMaxSize(@as(*const IDataCollectorSet, @ptrCast(self)), size_);
            }
            pub inline fn putSegmentMaxSize(self: *const T, size_: u32) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_SegmentMaxSize(@as(*const IDataCollectorSet, @ptrCast(self)), size_);
            }
            pub inline fn getSerialNumber(self: *const T, index_: ?*u32) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_SerialNumber(@as(*const IDataCollectorSet, @ptrCast(self)), index_);
            }
            pub inline fn putSerialNumber(self: *const T, index_: u32) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_SerialNumber(@as(*const IDataCollectorSet, @ptrCast(self)), index_);
            }
            pub inline fn getServer(self: *const T, server_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Server(@as(*const IDataCollectorSet, @ptrCast(self)), server_);
            }
            pub inline fn getStatus(self: *const T, status_: ?*DataCollectorSetStatus) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IDataCollectorSet, @ptrCast(self)), status_);
            }
            pub inline fn getSubdirectory(self: *const T, folder_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Subdirectory(@as(*const IDataCollectorSet, @ptrCast(self)), folder_);
            }
            pub inline fn putSubdirectory(self: *const T, folder_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_Subdirectory(@as(*const IDataCollectorSet, @ptrCast(self)), folder_);
            }
            pub inline fn getSubdirectoryFormat(self: *const T, format_: ?*AutoPathFormat) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_SubdirectoryFormat(@as(*const IDataCollectorSet, @ptrCast(self)), format_);
            }
            pub inline fn putSubdirectoryFormat(self: *const T, format_: AutoPathFormat) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_SubdirectoryFormat(@as(*const IDataCollectorSet, @ptrCast(self)), format_);
            }
            pub inline fn getSubdirectoryFormatPattern(self: *const T, pattern_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_SubdirectoryFormatPattern(@as(*const IDataCollectorSet, @ptrCast(self)), pattern_);
            }
            pub inline fn putSubdirectoryFormatPattern(self: *const T, pattern_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_SubdirectoryFormatPattern(@as(*const IDataCollectorSet, @ptrCast(self)), pattern_);
            }
            pub inline fn getTask(self: *const T, task_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Task(@as(*const IDataCollectorSet, @ptrCast(self)), task_);
            }
            pub inline fn putTask(self: *const T, task_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_Task(@as(*const IDataCollectorSet, @ptrCast(self)), task_);
            }
            pub inline fn getTaskRunAsSelf(self: *const T, run_as_self_: ?*i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_TaskRunAsSelf(@as(*const IDataCollectorSet, @ptrCast(self)), run_as_self_);
            }
            pub inline fn putTaskRunAsSelf(self: *const T, run_as_self_: i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_TaskRunAsSelf(@as(*const IDataCollectorSet, @ptrCast(self)), run_as_self_);
            }
            pub inline fn getTaskArguments(self: *const T, task_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_TaskArguments(@as(*const IDataCollectorSet, @ptrCast(self)), task_);
            }
            pub inline fn putTaskArguments(self: *const T, task_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_TaskArguments(@as(*const IDataCollectorSet, @ptrCast(self)), task_);
            }
            pub inline fn getTaskUserTextArguments(self: *const T, user_text_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_TaskUserTextArguments(@as(*const IDataCollectorSet, @ptrCast(self)), user_text_);
            }
            pub inline fn putTaskUserTextArguments(self: *const T, user_text_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_TaskUserTextArguments(@as(*const IDataCollectorSet, @ptrCast(self)), user_text_);
            }
            pub inline fn getSchedules(self: *const T, pp_schedules_: ?*?*IScheduleCollection) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Schedules(@as(*const IDataCollectorSet, @ptrCast(self)), pp_schedules_);
            }
            pub inline fn getSchedulesEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_SchedulesEnabled(@as(*const IDataCollectorSet, @ptrCast(self)), enabled_);
            }
            pub inline fn putSchedulesEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_SchedulesEnabled(@as(*const IDataCollectorSet, @ptrCast(self)), enabled_);
            }
            pub inline fn getUserAccount(self: *const T, user_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_UserAccount(@as(*const IDataCollectorSet, @ptrCast(self)), user_);
            }
            pub inline fn getXml(self: *const T, xml_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Xml(@as(*const IDataCollectorSet, @ptrCast(self)), xml_);
            }
            pub inline fn getSecurity(self: *const T, pbstr_security_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_Security(@as(*const IDataCollectorSet, @ptrCast(self)), pbstr_security_);
            }
            pub inline fn putSecurity(self: *const T, bstr_security_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_Security(@as(*const IDataCollectorSet, @ptrCast(self)), bstr_security_);
            }
            pub inline fn getStopOnCompletion(self: *const T, stop_: ?*i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_StopOnCompletion(@as(*const IDataCollectorSet, @ptrCast(self)), stop_);
            }
            pub inline fn putStopOnCompletion(self: *const T, stop_: i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).put_StopOnCompletion(@as(*const IDataCollectorSet, @ptrCast(self)), stop_);
            }
            pub inline fn getDataManager(self: *const T, data_manager_: ?*?*IDataManager) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).get_DataManager(@as(*const IDataCollectorSet, @ptrCast(self)), data_manager_);
            }
            pub inline fn setCredentials(self: *const T, user_: ?BSTR, password_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).SetCredentials(@as(*const IDataCollectorSet, @ptrCast(self)), user_, password_);
            }
            pub inline fn query(self: *const T, name_: ?BSTR, server_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).Query(@as(*const IDataCollectorSet, @ptrCast(self)), name_, server_);
            }
            pub inline fn commit(self: *const T, name_: ?BSTR, server_: ?BSTR, mode_: CommitMode, validation_: ?*?*IValueMap) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).Commit(@as(*const IDataCollectorSet, @ptrCast(self)), name_, server_, mode_, validation_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).Delete(@as(*const IDataCollectorSet, @ptrCast(self)));
            }
            pub inline fn start(self: *const T, synchronous_: i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).Start(@as(*const IDataCollectorSet, @ptrCast(self)), synchronous_);
            }
            pub inline fn stop(self: *const T, synchronous_: i16) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).Stop(@as(*const IDataCollectorSet, @ptrCast(self)), synchronous_);
            }
            pub inline fn setXml(self: *const T, xml_: ?BSTR, validation_: ?*?*IValueMap) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).SetXml(@as(*const IDataCollectorSet, @ptrCast(self)), xml_, validation_);
            }
            pub inline fn setValue(self: *const T, key_: ?BSTR, value_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).SetValue(@as(*const IDataCollectorSet, @ptrCast(self)), key_, value_);
            }
            pub inline fn getValue(self: *const T, key_: ?BSTR, value_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollectorSet.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IDataCollectorSet, @ptrCast(self)), key_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataManager_Value = Guid.initString("03837541-098b-11d8-9414-505054503030");
pub const IID_IDataManager = &IID_IDataManager_Value;
pub const IDataManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            f_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CheckBeforeRunning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            pf_check: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CheckBeforeRunning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            f_check: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinFreeDisk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            min_free_disk: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinFreeDisk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            min_free_disk: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            pul_max_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            ul_max_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxFolderCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            pul_max_folder_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxFolderCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            ul_max_folder_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResourcePolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            p_policy: ?*ResourcePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ResourcePolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            policy: ResourcePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FolderActions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            actions: ?*?*IFolderActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportSchema: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            report_schema: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportSchema: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            report_schema: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            pbstr_filename: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            pbstr_filename: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RuleTargetFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            filename: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RuleTargetFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            filename: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventsFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            pbstr_filename: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventsFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            pbstr_filename: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Rules: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            pbstr_xml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Rules: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataManager,
            bstr_xml: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Run: *const fn (
            self: *const IDataManager,
            steps: DataManagerSteps,
            bstr_folder: ?BSTR,
            errors: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: *const fn (
            self: *const IDataManager,
            cab_filename: ?BSTR,
            destination_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getEnabled(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IDataManager, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn putEnabled(self: *const T, f_enabled_: i16) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IDataManager, @ptrCast(self)), f_enabled_);
            }
            pub inline fn getCheckBeforeRunning(self: *const T, pf_check_: ?*i16) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_CheckBeforeRunning(@as(*const IDataManager, @ptrCast(self)), pf_check_);
            }
            pub inline fn putCheckBeforeRunning(self: *const T, f_check_: i16) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_CheckBeforeRunning(@as(*const IDataManager, @ptrCast(self)), f_check_);
            }
            pub inline fn getMinFreeDisk(self: *const T, min_free_disk_: ?*u32) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_MinFreeDisk(@as(*const IDataManager, @ptrCast(self)), min_free_disk_);
            }
            pub inline fn putMinFreeDisk(self: *const T, min_free_disk_: u32) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_MinFreeDisk(@as(*const IDataManager, @ptrCast(self)), min_free_disk_);
            }
            pub inline fn getMaxSize(self: *const T, pul_max_size_: ?*u32) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_MaxSize(@as(*const IDataManager, @ptrCast(self)), pul_max_size_);
            }
            pub inline fn putMaxSize(self: *const T, ul_max_size_: u32) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_MaxSize(@as(*const IDataManager, @ptrCast(self)), ul_max_size_);
            }
            pub inline fn getMaxFolderCount(self: *const T, pul_max_folder_count_: ?*u32) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_MaxFolderCount(@as(*const IDataManager, @ptrCast(self)), pul_max_folder_count_);
            }
            pub inline fn putMaxFolderCount(self: *const T, ul_max_folder_count_: u32) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_MaxFolderCount(@as(*const IDataManager, @ptrCast(self)), ul_max_folder_count_);
            }
            pub inline fn getResourcePolicy(self: *const T, p_policy_: ?*ResourcePolicy) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_ResourcePolicy(@as(*const IDataManager, @ptrCast(self)), p_policy_);
            }
            pub inline fn putResourcePolicy(self: *const T, policy_: ResourcePolicy) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_ResourcePolicy(@as(*const IDataManager, @ptrCast(self)), policy_);
            }
            pub inline fn getFolderActions(self: *const T, actions_: ?*?*IFolderActionCollection) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_FolderActions(@as(*const IDataManager, @ptrCast(self)), actions_);
            }
            pub inline fn getReportSchema(self: *const T, report_schema_: ?*?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_ReportSchema(@as(*const IDataManager, @ptrCast(self)), report_schema_);
            }
            pub inline fn putReportSchema(self: *const T, report_schema_: ?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_ReportSchema(@as(*const IDataManager, @ptrCast(self)), report_schema_);
            }
            pub inline fn getReportFileName(self: *const T, pbstr_filename_: ?*?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_ReportFileName(@as(*const IDataManager, @ptrCast(self)), pbstr_filename_);
            }
            pub inline fn putReportFileName(self: *const T, pbstr_filename_: ?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_ReportFileName(@as(*const IDataManager, @ptrCast(self)), pbstr_filename_);
            }
            pub inline fn getRuleTargetFileName(self: *const T, filename_: ?*?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_RuleTargetFileName(@as(*const IDataManager, @ptrCast(self)), filename_);
            }
            pub inline fn putRuleTargetFileName(self: *const T, filename_: ?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_RuleTargetFileName(@as(*const IDataManager, @ptrCast(self)), filename_);
            }
            pub inline fn getEventsFileName(self: *const T, pbstr_filename_: ?*?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_EventsFileName(@as(*const IDataManager, @ptrCast(self)), pbstr_filename_);
            }
            pub inline fn putEventsFileName(self: *const T, pbstr_filename_: ?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_EventsFileName(@as(*const IDataManager, @ptrCast(self)), pbstr_filename_);
            }
            pub inline fn getRules(self: *const T, pbstr_xml_: ?*?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).get_Rules(@as(*const IDataManager, @ptrCast(self)), pbstr_xml_);
            }
            pub inline fn putRules(self: *const T, bstr_xml_: ?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).put_Rules(@as(*const IDataManager, @ptrCast(self)), bstr_xml_);
            }
            pub inline fn run(self: *const T, steps_: DataManagerSteps, bstr_folder_: ?BSTR, errors_: ?*?*IValueMap) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).Run(@as(*const IDataManager, @ptrCast(self)), steps_, bstr_folder_, errors_);
            }
            pub inline fn extract(self: *const T, cab_filename_: ?BSTR, destination_path_: ?BSTR) HRESULT {
                return @as(*const IDataManager.VTable, @ptrCast(self.vtable)).Extract(@as(*const IDataManager, @ptrCast(self)), cab_filename_, destination_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFolderAction_Value = Guid.initString("03837543-098b-11d8-9414-505054503030");
pub const IID_IFolderAction = &IID_IFolderAction_Value;
pub const IFolderAction = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Age: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderAction,
            pul_age: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Age: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderAction,
            ul_age: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderAction,
            pul_age: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderAction,
            ul_age: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Actions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderAction,
            steps: ?*FolderActionSteps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Actions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderAction,
            steps: FolderActionSteps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SendCabTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderAction,
            pbstr_destination: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SendCabTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderAction,
            bstr_destination: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAge(self: *const T, pul_age_: ?*u32) HRESULT {
                return @as(*const IFolderAction.VTable, @ptrCast(self.vtable)).get_Age(@as(*const IFolderAction, @ptrCast(self)), pul_age_);
            }
            pub inline fn putAge(self: *const T, ul_age_: u32) HRESULT {
                return @as(*const IFolderAction.VTable, @ptrCast(self.vtable)).put_Age(@as(*const IFolderAction, @ptrCast(self)), ul_age_);
            }
            pub inline fn getSize(self: *const T, pul_age_: ?*u32) HRESULT {
                return @as(*const IFolderAction.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IFolderAction, @ptrCast(self)), pul_age_);
            }
            pub inline fn putSize(self: *const T, ul_age_: u32) HRESULT {
                return @as(*const IFolderAction.VTable, @ptrCast(self.vtable)).put_Size(@as(*const IFolderAction, @ptrCast(self)), ul_age_);
            }
            pub inline fn getActions(self: *const T, steps_: ?*FolderActionSteps) HRESULT {
                return @as(*const IFolderAction.VTable, @ptrCast(self.vtable)).get_Actions(@as(*const IFolderAction, @ptrCast(self)), steps_);
            }
            pub inline fn putActions(self: *const T, steps_: FolderActionSteps) HRESULT {
                return @as(*const IFolderAction.VTable, @ptrCast(self.vtable)).put_Actions(@as(*const IFolderAction, @ptrCast(self)), steps_);
            }
            pub inline fn getSendCabTo(self: *const T, pbstr_destination_: ?*?BSTR) HRESULT {
                return @as(*const IFolderAction.VTable, @ptrCast(self.vtable)).get_SendCabTo(@as(*const IFolderAction, @ptrCast(self)), pbstr_destination_);
            }
            pub inline fn putSendCabTo(self: *const T, bstr_destination_: ?BSTR) HRESULT {
                return @as(*const IFolderAction.VTable, @ptrCast(self.vtable)).put_SendCabTo(@as(*const IFolderAction, @ptrCast(self)), bstr_destination_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFolderActionCollection_Value = Guid.initString("03837544-098b-11d8-9414-505054503030");
pub const IID_IFolderActionCollection = &IID_IFolderActionCollection_Value;
pub const IFolderActionCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderActionCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderActionCollection,
            index: VARIANT,
            action: ?*?*IFolderAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFolderActionCollection,
            @"enum": ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IFolderActionCollection,
            action: ?*IFolderAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IFolderActionCollection,
            index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IFolderActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const IFolderActionCollection,
            actions: ?*IFolderActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFolderAction: *const fn (
            self: *const IFolderActionCollection,
            folder_action: ?*?*IFolderAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IFolderActionCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFolderActionCollection, @ptrCast(self)), count_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, action_: ?*?*IFolderAction) HRESULT {
                return @as(*const IFolderActionCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFolderActionCollection, @ptrCast(self)), index_, action_);
            }
            pub inline fn getNewEnum(self: *const T, enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IFolderActionCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFolderActionCollection, @ptrCast(self)), enum_);
            }
            pub inline fn add(self: *const T, action_: ?*IFolderAction) HRESULT {
                return @as(*const IFolderActionCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IFolderActionCollection, @ptrCast(self)), action_);
            }
            pub inline fn remove(self: *const T, index_: VARIANT) HRESULT {
                return @as(*const IFolderActionCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IFolderActionCollection, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IFolderActionCollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const IFolderActionCollection, @ptrCast(self)));
            }
            pub inline fn addRange(self: *const T, actions_: ?*IFolderActionCollection) HRESULT {
                return @as(*const IFolderActionCollection.VTable, @ptrCast(self.vtable)).AddRange(@as(*const IFolderActionCollection, @ptrCast(self)), actions_);
            }
            pub inline fn createFolderAction(self: *const T, folder_action_: ?*?*IFolderAction) HRESULT {
                return @as(*const IFolderActionCollection.VTable, @ptrCast(self.vtable)).CreateFolderAction(@as(*const IFolderActionCollection, @ptrCast(self)), folder_action_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataCollector_Value = Guid.initString("038374ff-098b-11d8-9414-505054503030");
pub const IID_IDataCollector = &IID_IDataCollector_Value;
pub const IDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataCollectorSet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            group: ?*?*IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataCollectorSet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            group: ?*IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataCollectorType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            type: ?*DataCollectorType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileNameFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            format: ?*AutoPathFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileNameFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            format: AutoPathFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileNameFormatPattern: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            pattern: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileNameFormatPattern: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            pattern: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LatestOutputLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LatestOutputLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogAppend: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            append: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogAppend: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            append: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogCircular: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            circular: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogCircular: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            circular: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogOverwrite: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            overwrite: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogOverwrite: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            overwrite: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutputLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Index: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Index: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Xml: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollector,
            xml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetXml: *const fn (
            self: *const IDataCollector,
            xml: ?BSTR,
            validation: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOutputLocation: *const fn (
            self: *const IDataCollector,
            latest: i16,
            location: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDataCollectorSet(self: *const T, group_: ?*?*IDataCollectorSet) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_DataCollectorSet(@as(*const IDataCollector, @ptrCast(self)), group_);
            }
            pub inline fn putDataCollectorSet(self: *const T, group_: ?*IDataCollectorSet) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_DataCollectorSet(@as(*const IDataCollector, @ptrCast(self)), group_);
            }
            pub inline fn getDataCollectorType(self: *const T, type_: ?*DataCollectorType) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_DataCollectorType(@as(*const IDataCollector, @ptrCast(self)), type_);
            }
            pub inline fn getFileName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_FileName(@as(*const IDataCollector, @ptrCast(self)), name_);
            }
            pub inline fn putFileName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_FileName(@as(*const IDataCollector, @ptrCast(self)), name_);
            }
            pub inline fn getFileNameFormat(self: *const T, format_: ?*AutoPathFormat) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_FileNameFormat(@as(*const IDataCollector, @ptrCast(self)), format_);
            }
            pub inline fn putFileNameFormat(self: *const T, format_: AutoPathFormat) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_FileNameFormat(@as(*const IDataCollector, @ptrCast(self)), format_);
            }
            pub inline fn getFileNameFormatPattern(self: *const T, pattern_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_FileNameFormatPattern(@as(*const IDataCollector, @ptrCast(self)), pattern_);
            }
            pub inline fn putFileNameFormatPattern(self: *const T, pattern_: ?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_FileNameFormatPattern(@as(*const IDataCollector, @ptrCast(self)), pattern_);
            }
            pub inline fn getLatestOutputLocation(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_LatestOutputLocation(@as(*const IDataCollector, @ptrCast(self)), path_);
            }
            pub inline fn putLatestOutputLocation(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_LatestOutputLocation(@as(*const IDataCollector, @ptrCast(self)), path_);
            }
            pub inline fn getLogAppend(self: *const T, append_: ?*i16) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_LogAppend(@as(*const IDataCollector, @ptrCast(self)), append_);
            }
            pub inline fn putLogAppend(self: *const T, append_: i16) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_LogAppend(@as(*const IDataCollector, @ptrCast(self)), append_);
            }
            pub inline fn getLogCircular(self: *const T, circular_: ?*i16) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_LogCircular(@as(*const IDataCollector, @ptrCast(self)), circular_);
            }
            pub inline fn putLogCircular(self: *const T, circular_: i16) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_LogCircular(@as(*const IDataCollector, @ptrCast(self)), circular_);
            }
            pub inline fn getLogOverwrite(self: *const T, overwrite_: ?*i16) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_LogOverwrite(@as(*const IDataCollector, @ptrCast(self)), overwrite_);
            }
            pub inline fn putLogOverwrite(self: *const T, overwrite_: i16) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_LogOverwrite(@as(*const IDataCollector, @ptrCast(self)), overwrite_);
            }
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IDataCollector, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IDataCollector, @ptrCast(self)), name_);
            }
            pub inline fn getOutputLocation(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_OutputLocation(@as(*const IDataCollector, @ptrCast(self)), path_);
            }
            pub inline fn getIndex(self: *const T, index_: ?*i32) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_Index(@as(*const IDataCollector, @ptrCast(self)), index_);
            }
            pub inline fn putIndex(self: *const T, index_: i32) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).put_Index(@as(*const IDataCollector, @ptrCast(self)), index_);
            }
            pub inline fn getXml(self: *const T, xml_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).get_Xml(@as(*const IDataCollector, @ptrCast(self)), xml_);
            }
            pub inline fn setXml(self: *const T, xml_: ?BSTR, validation_: ?*?*IValueMap) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).SetXml(@as(*const IDataCollector, @ptrCast(self)), xml_, validation_);
            }
            pub inline fn createOutputLocation(self: *const T, latest_: i16, location_: ?*?BSTR) HRESULT {
                return @as(*const IDataCollector.VTable, @ptrCast(self.vtable)).CreateOutputLocation(@as(*const IDataCollector, @ptrCast(self)), latest_, location_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPerformanceCounterDataCollector_Value = Guid.initString("03837506-098b-11d8-9414-505054503030");
pub const IID_IPerformanceCounterDataCollector = &IID_IPerformanceCounterDataCollector_Value;
pub const IPerformanceCounterDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataSourceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            dsn: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataSourceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            dsn: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PerformanceCounters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            counters: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PerformanceCounters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            counters: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFileFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            format: ?*FileFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogFileFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            format: FileFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SampleInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            interval: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SampleInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            interval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SegmentMaxRecords: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            records: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SegmentMaxRecords: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPerformanceCounterDataCollector,
            records: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDataCollector.MethodMixin(T);
            pub inline fn getDataSourceName(self: *const T, dsn_: ?*?BSTR) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).get_DataSourceName(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), dsn_);
            }
            pub inline fn putDataSourceName(self: *const T, dsn_: ?BSTR) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).put_DataSourceName(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), dsn_);
            }
            pub inline fn getPerformanceCounters(self: *const T, counters_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).get_PerformanceCounters(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), counters_);
            }
            pub inline fn putPerformanceCounters(self: *const T, counters_: ?*SAFEARRAY) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).put_PerformanceCounters(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), counters_);
            }
            pub inline fn getLogFileFormat(self: *const T, format_: ?*FileFormat) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).get_LogFileFormat(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), format_);
            }
            pub inline fn putLogFileFormat(self: *const T, format_: FileFormat) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).put_LogFileFormat(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), format_);
            }
            pub inline fn getSampleInterval(self: *const T, interval_: ?*u32) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).get_SampleInterval(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), interval_);
            }
            pub inline fn putSampleInterval(self: *const T, interval_: u32) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).put_SampleInterval(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), interval_);
            }
            pub inline fn getSegmentMaxRecords(self: *const T, records_: ?*u32) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).get_SegmentMaxRecords(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), records_);
            }
            pub inline fn putSegmentMaxRecords(self: *const T, records_: u32) HRESULT {
                return @as(*const IPerformanceCounterDataCollector.VTable, @ptrCast(self.vtable)).put_SegmentMaxRecords(@as(*const IPerformanceCounterDataCollector, @ptrCast(self)), records_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITraceDataCollector_Value = Guid.initString("0383750b-098b-11d8-9414-505054503030");
pub const IID_ITraceDataCollector = &IID_ITraceDataCollector_Value;
pub const ITraceDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BufferSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BufferSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BuffersLost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BuffersLost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BuffersWritten: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BuffersWritten: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClockType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            clock: ?*ClockType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClockType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            clock: ClockType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventsLost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            events: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventsLost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            events: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedModes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            mode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExtendedModes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FlushTimer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FlushTimer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            seconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FreeBuffers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FreeBuffers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Guid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Guid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            guid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsKernelTrace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            kernel: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaximumBuffers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaximumBuffers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinimumBuffers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinimumBuffers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfBuffers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NumberOfBuffers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreallocateFile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            allocate: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreallocateFile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            allocate: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            process: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProcessMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            process: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RealTimeBuffersLost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RealTimeBuffersLost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            buffers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            id: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SessionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            id: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SessionName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionThreadId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            tid: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SessionThreadId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            tid: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StreamMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            mode: ?*StreamMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StreamMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            mode: StreamMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TraceDataProviders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataCollector,
            providers: ?*?*ITraceDataProviderCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDataCollector.MethodMixin(T);
            pub inline fn getBufferSize(self: *const T, size_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_BufferSize(@as(*const ITraceDataCollector, @ptrCast(self)), size_);
            }
            pub inline fn putBufferSize(self: *const T, size_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_BufferSize(@as(*const ITraceDataCollector, @ptrCast(self)), size_);
            }
            pub inline fn getBuffersLost(self: *const T, buffers_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_BuffersLost(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn putBuffersLost(self: *const T, buffers_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_BuffersLost(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn getBuffersWritten(self: *const T, buffers_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_BuffersWritten(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn putBuffersWritten(self: *const T, buffers_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_BuffersWritten(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn getClockType(self: *const T, clock_: ?*ClockType) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_ClockType(@as(*const ITraceDataCollector, @ptrCast(self)), clock_);
            }
            pub inline fn putClockType(self: *const T, clock_: ClockType) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_ClockType(@as(*const ITraceDataCollector, @ptrCast(self)), clock_);
            }
            pub inline fn getEventsLost(self: *const T, events_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_EventsLost(@as(*const ITraceDataCollector, @ptrCast(self)), events_);
            }
            pub inline fn putEventsLost(self: *const T, events_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_EventsLost(@as(*const ITraceDataCollector, @ptrCast(self)), events_);
            }
            pub inline fn getExtendedModes(self: *const T, mode_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_ExtendedModes(@as(*const ITraceDataCollector, @ptrCast(self)), mode_);
            }
            pub inline fn putExtendedModes(self: *const T, mode_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_ExtendedModes(@as(*const ITraceDataCollector, @ptrCast(self)), mode_);
            }
            pub inline fn getFlushTimer(self: *const T, seconds_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_FlushTimer(@as(*const ITraceDataCollector, @ptrCast(self)), seconds_);
            }
            pub inline fn putFlushTimer(self: *const T, seconds_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_FlushTimer(@as(*const ITraceDataCollector, @ptrCast(self)), seconds_);
            }
            pub inline fn getFreeBuffers(self: *const T, buffers_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_FreeBuffers(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn putFreeBuffers(self: *const T, buffers_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_FreeBuffers(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn getGuid(self: *const T, guid_: ?*Guid) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_Guid(@as(*const ITraceDataCollector, @ptrCast(self)), guid_);
            }
            pub inline fn putGuid(self: *const T, guid_: Guid) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_Guid(@as(*const ITraceDataCollector, @ptrCast(self)), guid_);
            }
            pub inline fn getIsKernelTrace(self: *const T, kernel_: ?*i16) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_IsKernelTrace(@as(*const ITraceDataCollector, @ptrCast(self)), kernel_);
            }
            pub inline fn getMaximumBuffers(self: *const T, buffers_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_MaximumBuffers(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn putMaximumBuffers(self: *const T, buffers_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_MaximumBuffers(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn getMinimumBuffers(self: *const T, buffers_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_MinimumBuffers(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn putMinimumBuffers(self: *const T, buffers_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_MinimumBuffers(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn getNumberOfBuffers(self: *const T, buffers_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_NumberOfBuffers(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn putNumberOfBuffers(self: *const T, buffers_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_NumberOfBuffers(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn getPreallocateFile(self: *const T, allocate_: ?*i16) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_PreallocateFile(@as(*const ITraceDataCollector, @ptrCast(self)), allocate_);
            }
            pub inline fn putPreallocateFile(self: *const T, allocate_: i16) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_PreallocateFile(@as(*const ITraceDataCollector, @ptrCast(self)), allocate_);
            }
            pub inline fn getProcessMode(self: *const T, process_: ?*i16) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_ProcessMode(@as(*const ITraceDataCollector, @ptrCast(self)), process_);
            }
            pub inline fn putProcessMode(self: *const T, process_: i16) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_ProcessMode(@as(*const ITraceDataCollector, @ptrCast(self)), process_);
            }
            pub inline fn getRealTimeBuffersLost(self: *const T, buffers_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_RealTimeBuffersLost(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn putRealTimeBuffersLost(self: *const T, buffers_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_RealTimeBuffersLost(@as(*const ITraceDataCollector, @ptrCast(self)), buffers_);
            }
            pub inline fn getSessionId(self: *const T, id_: ?*u64) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_SessionId(@as(*const ITraceDataCollector, @ptrCast(self)), id_);
            }
            pub inline fn putSessionId(self: *const T, id_: u64) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_SessionId(@as(*const ITraceDataCollector, @ptrCast(self)), id_);
            }
            pub inline fn getSessionName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_SessionName(@as(*const ITraceDataCollector, @ptrCast(self)), name_);
            }
            pub inline fn putSessionName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_SessionName(@as(*const ITraceDataCollector, @ptrCast(self)), name_);
            }
            pub inline fn getSessionThreadId(self: *const T, tid_: ?*u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_SessionThreadId(@as(*const ITraceDataCollector, @ptrCast(self)), tid_);
            }
            pub inline fn putSessionThreadId(self: *const T, tid_: u32) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_SessionThreadId(@as(*const ITraceDataCollector, @ptrCast(self)), tid_);
            }
            pub inline fn getStreamMode(self: *const T, mode_: ?*StreamMode) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_StreamMode(@as(*const ITraceDataCollector, @ptrCast(self)), mode_);
            }
            pub inline fn putStreamMode(self: *const T, mode_: StreamMode) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).put_StreamMode(@as(*const ITraceDataCollector, @ptrCast(self)), mode_);
            }
            pub inline fn getTraceDataProviders(self: *const T, providers_: ?*?*ITraceDataProviderCollection) HRESULT {
                return @as(*const ITraceDataCollector.VTable, @ptrCast(self.vtable)).get_TraceDataProviders(@as(*const ITraceDataCollector, @ptrCast(self)), providers_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConfigurationDataCollector_Value = Guid.initString("03837514-098b-11d8-9414-505054503030");
pub const IID_IConfigurationDataCollector = &IID_IConfigurationDataCollector_Value;
pub const IConfigurationDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileMaxCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileMaxCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileMaxRecursiveDepth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            depth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileMaxRecursiveDepth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            depth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileMaxTotalSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileMaxTotalSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Files: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            files: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Files: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            files: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ManagementQueries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            queries: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ManagementQueries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            queries: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueryNetworkAdapters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            network: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_QueryNetworkAdapters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            network: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegistryKeys: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            query: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegistryKeys: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            query: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegistryMaxRecursiveDepth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            depth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegistryMaxRecursiveDepth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            depth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SystemStateFile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            file_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SystemStateFile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IConfigurationDataCollector,
            file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDataCollector.MethodMixin(T);
            pub inline fn getFileMaxCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).get_FileMaxCount(@as(*const IConfigurationDataCollector, @ptrCast(self)), count_);
            }
            pub inline fn putFileMaxCount(self: *const T, count_: u32) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).put_FileMaxCount(@as(*const IConfigurationDataCollector, @ptrCast(self)), count_);
            }
            pub inline fn getFileMaxRecursiveDepth(self: *const T, depth_: ?*u32) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).get_FileMaxRecursiveDepth(@as(*const IConfigurationDataCollector, @ptrCast(self)), depth_);
            }
            pub inline fn putFileMaxRecursiveDepth(self: *const T, depth_: u32) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).put_FileMaxRecursiveDepth(@as(*const IConfigurationDataCollector, @ptrCast(self)), depth_);
            }
            pub inline fn getFileMaxTotalSize(self: *const T, size_: ?*u32) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).get_FileMaxTotalSize(@as(*const IConfigurationDataCollector, @ptrCast(self)), size_);
            }
            pub inline fn putFileMaxTotalSize(self: *const T, size_: u32) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).put_FileMaxTotalSize(@as(*const IConfigurationDataCollector, @ptrCast(self)), size_);
            }
            pub inline fn getFiles(self: *const T, files_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).get_Files(@as(*const IConfigurationDataCollector, @ptrCast(self)), files_);
            }
            pub inline fn putFiles(self: *const T, files_: ?*SAFEARRAY) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).put_Files(@as(*const IConfigurationDataCollector, @ptrCast(self)), files_);
            }
            pub inline fn getManagementQueries(self: *const T, queries_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).get_ManagementQueries(@as(*const IConfigurationDataCollector, @ptrCast(self)), queries_);
            }
            pub inline fn putManagementQueries(self: *const T, queries_: ?*SAFEARRAY) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).put_ManagementQueries(@as(*const IConfigurationDataCollector, @ptrCast(self)), queries_);
            }
            pub inline fn getQueryNetworkAdapters(self: *const T, network_: ?*i16) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).get_QueryNetworkAdapters(@as(*const IConfigurationDataCollector, @ptrCast(self)), network_);
            }
            pub inline fn putQueryNetworkAdapters(self: *const T, network_: i16) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).put_QueryNetworkAdapters(@as(*const IConfigurationDataCollector, @ptrCast(self)), network_);
            }
            pub inline fn getRegistryKeys(self: *const T, query_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).get_RegistryKeys(@as(*const IConfigurationDataCollector, @ptrCast(self)), query_);
            }
            pub inline fn putRegistryKeys(self: *const T, query_: ?*SAFEARRAY) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).put_RegistryKeys(@as(*const IConfigurationDataCollector, @ptrCast(self)), query_);
            }
            pub inline fn getRegistryMaxRecursiveDepth(self: *const T, depth_: ?*u32) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).get_RegistryMaxRecursiveDepth(@as(*const IConfigurationDataCollector, @ptrCast(self)), depth_);
            }
            pub inline fn putRegistryMaxRecursiveDepth(self: *const T, depth_: u32) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).put_RegistryMaxRecursiveDepth(@as(*const IConfigurationDataCollector, @ptrCast(self)), depth_);
            }
            pub inline fn getSystemStateFile(self: *const T, file_name_: ?*?BSTR) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).get_SystemStateFile(@as(*const IConfigurationDataCollector, @ptrCast(self)), file_name_);
            }
            pub inline fn putSystemStateFile(self: *const T, file_name_: ?BSTR) HRESULT {
                return @as(*const IConfigurationDataCollector.VTable, @ptrCast(self.vtable)).put_SystemStateFile(@as(*const IConfigurationDataCollector, @ptrCast(self)), file_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAlertDataCollector_Value = Guid.initString("03837516-098b-11d8-9414-505054503030");
pub const IID_IAlertDataCollector = &IID_IAlertDataCollector_Value;
pub const IAlertDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlertThresholds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            alerts: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlertThresholds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            alerts: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventLog: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            log: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventLog: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            log: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SampleInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            interval: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SampleInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            interval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Task: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Task: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskRunAsSelf: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            run_as_self: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskRunAsSelf: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            run_as_self: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskArguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskArguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TaskUserTextArguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            task: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TaskUserTextArguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TriggerDataCollectorSet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TriggerDataCollectorSet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlertDataCollector,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDataCollector.MethodMixin(T);
            pub inline fn getAlertThresholds(self: *const T, alerts_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).get_AlertThresholds(@as(*const IAlertDataCollector, @ptrCast(self)), alerts_);
            }
            pub inline fn putAlertThresholds(self: *const T, alerts_: ?*SAFEARRAY) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).put_AlertThresholds(@as(*const IAlertDataCollector, @ptrCast(self)), alerts_);
            }
            pub inline fn getEventLog(self: *const T, log_: ?*i16) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).get_EventLog(@as(*const IAlertDataCollector, @ptrCast(self)), log_);
            }
            pub inline fn putEventLog(self: *const T, log_: i16) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).put_EventLog(@as(*const IAlertDataCollector, @ptrCast(self)), log_);
            }
            pub inline fn getSampleInterval(self: *const T, interval_: ?*u32) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).get_SampleInterval(@as(*const IAlertDataCollector, @ptrCast(self)), interval_);
            }
            pub inline fn putSampleInterval(self: *const T, interval_: u32) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).put_SampleInterval(@as(*const IAlertDataCollector, @ptrCast(self)), interval_);
            }
            pub inline fn getTask(self: *const T, task_: ?*?BSTR) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).get_Task(@as(*const IAlertDataCollector, @ptrCast(self)), task_);
            }
            pub inline fn putTask(self: *const T, task_: ?BSTR) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).put_Task(@as(*const IAlertDataCollector, @ptrCast(self)), task_);
            }
            pub inline fn getTaskRunAsSelf(self: *const T, run_as_self_: ?*i16) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).get_TaskRunAsSelf(@as(*const IAlertDataCollector, @ptrCast(self)), run_as_self_);
            }
            pub inline fn putTaskRunAsSelf(self: *const T, run_as_self_: i16) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).put_TaskRunAsSelf(@as(*const IAlertDataCollector, @ptrCast(self)), run_as_self_);
            }
            pub inline fn getTaskArguments(self: *const T, task_: ?*?BSTR) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).get_TaskArguments(@as(*const IAlertDataCollector, @ptrCast(self)), task_);
            }
            pub inline fn putTaskArguments(self: *const T, task_: ?BSTR) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).put_TaskArguments(@as(*const IAlertDataCollector, @ptrCast(self)), task_);
            }
            pub inline fn getTaskUserTextArguments(self: *const T, task_: ?*?BSTR) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).get_TaskUserTextArguments(@as(*const IAlertDataCollector, @ptrCast(self)), task_);
            }
            pub inline fn putTaskUserTextArguments(self: *const T, task_: ?BSTR) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).put_TaskUserTextArguments(@as(*const IAlertDataCollector, @ptrCast(self)), task_);
            }
            pub inline fn getTriggerDataCollectorSet(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).get_TriggerDataCollectorSet(@as(*const IAlertDataCollector, @ptrCast(self)), name_);
            }
            pub inline fn putTriggerDataCollectorSet(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IAlertDataCollector.VTable, @ptrCast(self.vtable)).put_TriggerDataCollectorSet(@as(*const IAlertDataCollector, @ptrCast(self)), name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IApiTracingDataCollector_Value = Guid.initString("0383751a-098b-11d8-9414-505054503030");
pub const IID_IApiTracingDataCollector = &IID_IApiTracingDataCollector_Value;
pub const IApiTracingDataCollector = extern struct {
    pub const VTable = extern struct {
        base: IDataCollector.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogApiNamesOnly: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            logapinames: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogApiNamesOnly: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            logapinames: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogApisRecursively: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            logrecursively: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogApisRecursively: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            logrecursively: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            exepath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            exepath: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFilePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            logfilepath: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogFilePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            logfilepath: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncludeModules: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            includemodules: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncludeModules: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            includemodules: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncludeApis: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            includeapis: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncludeApis: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            includeapis: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExcludeApis: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            excludeapis: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExcludeApis: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IApiTracingDataCollector,
            excludeapis: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDataCollector.MethodMixin(T);
            pub inline fn getLogApiNamesOnly(self: *const T, logapinames_: ?*i16) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).get_LogApiNamesOnly(@as(*const IApiTracingDataCollector, @ptrCast(self)), logapinames_);
            }
            pub inline fn putLogApiNamesOnly(self: *const T, logapinames_: i16) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).put_LogApiNamesOnly(@as(*const IApiTracingDataCollector, @ptrCast(self)), logapinames_);
            }
            pub inline fn getLogApisRecursively(self: *const T, logrecursively_: ?*i16) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).get_LogApisRecursively(@as(*const IApiTracingDataCollector, @ptrCast(self)), logrecursively_);
            }
            pub inline fn putLogApisRecursively(self: *const T, logrecursively_: i16) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).put_LogApisRecursively(@as(*const IApiTracingDataCollector, @ptrCast(self)), logrecursively_);
            }
            pub inline fn getExePath(self: *const T, exepath_: ?*?BSTR) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).get_ExePath(@as(*const IApiTracingDataCollector, @ptrCast(self)), exepath_);
            }
            pub inline fn putExePath(self: *const T, exepath_: ?BSTR) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).put_ExePath(@as(*const IApiTracingDataCollector, @ptrCast(self)), exepath_);
            }
            pub inline fn getLogFilePath(self: *const T, logfilepath_: ?*?BSTR) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).get_LogFilePath(@as(*const IApiTracingDataCollector, @ptrCast(self)), logfilepath_);
            }
            pub inline fn putLogFilePath(self: *const T, logfilepath_: ?BSTR) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).put_LogFilePath(@as(*const IApiTracingDataCollector, @ptrCast(self)), logfilepath_);
            }
            pub inline fn getIncludeModules(self: *const T, includemodules_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).get_IncludeModules(@as(*const IApiTracingDataCollector, @ptrCast(self)), includemodules_);
            }
            pub inline fn putIncludeModules(self: *const T, includemodules_: ?*SAFEARRAY) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).put_IncludeModules(@as(*const IApiTracingDataCollector, @ptrCast(self)), includemodules_);
            }
            pub inline fn getIncludeApis(self: *const T, includeapis_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).get_IncludeApis(@as(*const IApiTracingDataCollector, @ptrCast(self)), includeapis_);
            }
            pub inline fn putIncludeApis(self: *const T, includeapis_: ?*SAFEARRAY) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).put_IncludeApis(@as(*const IApiTracingDataCollector, @ptrCast(self)), includeapis_);
            }
            pub inline fn getExcludeApis(self: *const T, excludeapis_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).get_ExcludeApis(@as(*const IApiTracingDataCollector, @ptrCast(self)), excludeapis_);
            }
            pub inline fn putExcludeApis(self: *const T, excludeapis_: ?*SAFEARRAY) HRESULT {
                return @as(*const IApiTracingDataCollector.VTable, @ptrCast(self.vtable)).put_ExcludeApis(@as(*const IApiTracingDataCollector, @ptrCast(self)), excludeapis_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataCollectorCollection_Value = Guid.initString("03837502-098b-11d8-9414-505054503030");
pub const IID_IDataCollectorCollection = &IID_IDataCollectorCollection_Value;
pub const IDataCollectorCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorCollection,
            ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorCollection,
            index: VARIANT,
            collector: ?*?*IDataCollector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorCollection,
            ret_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IDataCollectorCollection,
            collector: ?*IDataCollector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IDataCollectorCollection,
            collector: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IDataCollectorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const IDataCollectorCollection,
            collectors: ?*IDataCollectorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDataCollectorFromXml: *const fn (
            self: *const IDataCollectorCollection,
            bstr_xml: ?BSTR,
            p_validation: ?*?*IValueMap,
            p_collector: ?*?*IDataCollector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDataCollector: *const fn (
            self: *const IDataCollectorCollection,
            type: DataCollectorType,
            collector: ?*?*IDataCollector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, ret_val_: ?*i32) HRESULT {
                return @as(*const IDataCollectorCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IDataCollectorCollection, @ptrCast(self)), ret_val_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, collector_: ?*?*IDataCollector) HRESULT {
                return @as(*const IDataCollectorCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IDataCollectorCollection, @ptrCast(self)), index_, collector_);
            }
            pub inline fn getNewEnum(self: *const T, ret_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IDataCollectorCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IDataCollectorCollection, @ptrCast(self)), ret_val_);
            }
            pub inline fn add(self: *const T, collector_: ?*IDataCollector) HRESULT {
                return @as(*const IDataCollectorCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IDataCollectorCollection, @ptrCast(self)), collector_);
            }
            pub inline fn remove(self: *const T, collector_: VARIANT) HRESULT {
                return @as(*const IDataCollectorCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IDataCollectorCollection, @ptrCast(self)), collector_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IDataCollectorCollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const IDataCollectorCollection, @ptrCast(self)));
            }
            pub inline fn addRange(self: *const T, collectors_: ?*IDataCollectorCollection) HRESULT {
                return @as(*const IDataCollectorCollection.VTable, @ptrCast(self.vtable)).AddRange(@as(*const IDataCollectorCollection, @ptrCast(self)), collectors_);
            }
            pub inline fn createDataCollectorFromXml(self: *const T, bstr_xml_: ?BSTR, p_validation_: ?*?*IValueMap, p_collector_: ?*?*IDataCollector) HRESULT {
                return @as(*const IDataCollectorCollection.VTable, @ptrCast(self.vtable)).CreateDataCollectorFromXml(@as(*const IDataCollectorCollection, @ptrCast(self)), bstr_xml_, p_validation_, p_collector_);
            }
            pub inline fn createDataCollector(self: *const T, type_: DataCollectorType, collector_: ?*?*IDataCollector) HRESULT {
                return @as(*const IDataCollectorCollection.VTable, @ptrCast(self.vtable)).CreateDataCollector(@as(*const IDataCollectorCollection, @ptrCast(self)), type_, collector_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDataCollectorSetCollection_Value = Guid.initString("03837524-098b-11d8-9414-505054503030");
pub const IID_IDataCollectorSetCollection = &IID_IDataCollectorSetCollection_Value;
pub const IDataCollectorSetCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSetCollection,
            ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSetCollection,
            index: VARIANT,
            set: ?*?*IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDataCollectorSetCollection,
            ret_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IDataCollectorSetCollection,
            set: ?*IDataCollectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IDataCollectorSetCollection,
            set: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IDataCollectorSetCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const IDataCollectorSetCollection,
            sets: ?*IDataCollectorSetCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataCollectorSets: *const fn (
            self: *const IDataCollectorSetCollection,
            server: ?BSTR,
            filter: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, ret_val_: ?*i32) HRESULT {
                return @as(*const IDataCollectorSetCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IDataCollectorSetCollection, @ptrCast(self)), ret_val_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, set_: ?*?*IDataCollectorSet) HRESULT {
                return @as(*const IDataCollectorSetCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IDataCollectorSetCollection, @ptrCast(self)), index_, set_);
            }
            pub inline fn getNewEnum(self: *const T, ret_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IDataCollectorSetCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IDataCollectorSetCollection, @ptrCast(self)), ret_val_);
            }
            pub inline fn add(self: *const T, set_: ?*IDataCollectorSet) HRESULT {
                return @as(*const IDataCollectorSetCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IDataCollectorSetCollection, @ptrCast(self)), set_);
            }
            pub inline fn remove(self: *const T, set_: VARIANT) HRESULT {
                return @as(*const IDataCollectorSetCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IDataCollectorSetCollection, @ptrCast(self)), set_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IDataCollectorSetCollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const IDataCollectorSetCollection, @ptrCast(self)));
            }
            pub inline fn addRange(self: *const T, sets_: ?*IDataCollectorSetCollection) HRESULT {
                return @as(*const IDataCollectorSetCollection.VTable, @ptrCast(self.vtable)).AddRange(@as(*const IDataCollectorSetCollection, @ptrCast(self)), sets_);
            }
            pub inline fn getDataCollectorSets(self: *const T, server_: ?BSTR, filter_: ?BSTR) HRESULT {
                return @as(*const IDataCollectorSetCollection.VTable, @ptrCast(self.vtable)).GetDataCollectorSets(@as(*const IDataCollectorSetCollection, @ptrCast(self)), server_, filter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITraceDataProvider_Value = Guid.initString("03837512-098b-11d8-9414-505054503030");
pub const IID_ITraceDataProvider = &IID_ITraceDataProvider_Value;
pub const ITraceDataProvider = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Guid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Guid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            guid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Level: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            pp_level: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeywordsAny: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            pp_keywords: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeywordsAll: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            pp_keywords: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            pp_properties: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FilterEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            filter_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FilterEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            filter_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FilterType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            pul_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FilterType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            ul_type: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FilterData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            pp_data: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FilterData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProvider,
            p_data: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Query: *const fn (
            self: *const ITraceDataProvider,
            bstr_name: ?BSTR,
            bstr_server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: *const fn (
            self: *const ITraceDataProvider,
            p_from: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurity: *const fn (
            self: *const ITraceDataProvider,
            sddl: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurity: *const fn (
            self: *const ITraceDataProvider,
            security_info: u32,
            sddl: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisteredProcesses: *const fn (
            self: *const ITraceDataProvider,
            processes: ?*?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDisplayName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const ITraceDataProvider, @ptrCast(self)), name_);
            }
            pub inline fn putDisplayName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).put_DisplayName(@as(*const ITraceDataProvider, @ptrCast(self)), name_);
            }
            pub inline fn getGuid(self: *const T, guid_: ?*Guid) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).get_Guid(@as(*const ITraceDataProvider, @ptrCast(self)), guid_);
            }
            pub inline fn putGuid(self: *const T, guid_: Guid) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).put_Guid(@as(*const ITraceDataProvider, @ptrCast(self)), guid_);
            }
            pub inline fn getLevel(self: *const T, pp_level_: ?*?*IValueMap) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).get_Level(@as(*const ITraceDataProvider, @ptrCast(self)), pp_level_);
            }
            pub inline fn getKeywordsAny(self: *const T, pp_keywords_: ?*?*IValueMap) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).get_KeywordsAny(@as(*const ITraceDataProvider, @ptrCast(self)), pp_keywords_);
            }
            pub inline fn getKeywordsAll(self: *const T, pp_keywords_: ?*?*IValueMap) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).get_KeywordsAll(@as(*const ITraceDataProvider, @ptrCast(self)), pp_keywords_);
            }
            pub inline fn getProperties(self: *const T, pp_properties_: ?*?*IValueMap) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const ITraceDataProvider, @ptrCast(self)), pp_properties_);
            }
            pub inline fn getFilterEnabled(self: *const T, filter_enabled_: ?*i16) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).get_FilterEnabled(@as(*const ITraceDataProvider, @ptrCast(self)), filter_enabled_);
            }
            pub inline fn putFilterEnabled(self: *const T, filter_enabled_: i16) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).put_FilterEnabled(@as(*const ITraceDataProvider, @ptrCast(self)), filter_enabled_);
            }
            pub inline fn getFilterType(self: *const T, pul_type_: ?*u32) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).get_FilterType(@as(*const ITraceDataProvider, @ptrCast(self)), pul_type_);
            }
            pub inline fn putFilterType(self: *const T, ul_type_: u32) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).put_FilterType(@as(*const ITraceDataProvider, @ptrCast(self)), ul_type_);
            }
            pub inline fn getFilterData(self: *const T, pp_data_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).get_FilterData(@as(*const ITraceDataProvider, @ptrCast(self)), pp_data_);
            }
            pub inline fn putFilterData(self: *const T, p_data_: ?*SAFEARRAY) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).put_FilterData(@as(*const ITraceDataProvider, @ptrCast(self)), p_data_);
            }
            pub inline fn query(self: *const T, bstr_name_: ?BSTR, bstr_server_: ?BSTR) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).Query(@as(*const ITraceDataProvider, @ptrCast(self)), bstr_name_, bstr_server_);
            }
            pub inline fn resolve(self: *const T, p_from_: ?*IDispatch) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).Resolve(@as(*const ITraceDataProvider, @ptrCast(self)), p_from_);
            }
            pub inline fn setSecurity(self: *const T, sddl_: ?BSTR) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).SetSecurity(@as(*const ITraceDataProvider, @ptrCast(self)), sddl_);
            }
            pub inline fn getSecurity(self: *const T, security_info_: u32, sddl_: ?*?BSTR) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).GetSecurity(@as(*const ITraceDataProvider, @ptrCast(self)), security_info_, sddl_);
            }
            pub inline fn getRegisteredProcesses(self: *const T, processes_: ?*?*IValueMap) HRESULT {
                return @as(*const ITraceDataProvider.VTable, @ptrCast(self.vtable)).GetRegisteredProcesses(@as(*const ITraceDataProvider, @ptrCast(self)), processes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITraceDataProviderCollection_Value = Guid.initString("03837510-098b-11d8-9414-505054503030");
pub const IID_ITraceDataProviderCollection = &IID_ITraceDataProviderCollection_Value;
pub const ITraceDataProviderCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProviderCollection,
            ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProviderCollection,
            index: VARIANT,
            pp_provider: ?*?*ITraceDataProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITraceDataProviderCollection,
            ret_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ITraceDataProviderCollection,
            p_provider: ?*ITraceDataProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ITraceDataProviderCollection,
            v_provider: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ITraceDataProviderCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const ITraceDataProviderCollection,
            providers: ?*ITraceDataProviderCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTraceDataProvider: *const fn (
            self: *const ITraceDataProviderCollection,
            provider: ?*?*ITraceDataProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTraceDataProviders: *const fn (
            self: *const ITraceDataProviderCollection,
            server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTraceDataProvidersByProcess: *const fn (
            self: *const ITraceDataProviderCollection,
            server: ?BSTR,
            pid: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, ret_val_: ?*i32) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ITraceDataProviderCollection, @ptrCast(self)), ret_val_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, pp_provider_: ?*?*ITraceDataProvider) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ITraceDataProviderCollection, @ptrCast(self)), index_, pp_provider_);
            }
            pub inline fn getNewEnum(self: *const T, ret_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ITraceDataProviderCollection, @ptrCast(self)), ret_val_);
            }
            pub inline fn add(self: *const T, p_provider_: ?*ITraceDataProvider) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const ITraceDataProviderCollection, @ptrCast(self)), p_provider_);
            }
            pub inline fn remove(self: *const T, v_provider_: VARIANT) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const ITraceDataProviderCollection, @ptrCast(self)), v_provider_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const ITraceDataProviderCollection, @ptrCast(self)));
            }
            pub inline fn addRange(self: *const T, providers_: ?*ITraceDataProviderCollection) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).AddRange(@as(*const ITraceDataProviderCollection, @ptrCast(self)), providers_);
            }
            pub inline fn createTraceDataProvider(self: *const T, provider_: ?*?*ITraceDataProvider) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).CreateTraceDataProvider(@as(*const ITraceDataProviderCollection, @ptrCast(self)), provider_);
            }
            pub inline fn getTraceDataProviders(self: *const T, server_: ?BSTR) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).GetTraceDataProviders(@as(*const ITraceDataProviderCollection, @ptrCast(self)), server_);
            }
            pub inline fn getTraceDataProvidersByProcess(self: *const T, server_: ?BSTR, pid_: u32) HRESULT {
                return @as(*const ITraceDataProviderCollection.VTable, @ptrCast(self.vtable)).GetTraceDataProvidersByProcess(@as(*const ITraceDataProviderCollection, @ptrCast(self)), server_, pid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISchedule_Value = Guid.initString("0383753a-098b-11d8-9414-505054503030");
pub const IID_ISchedule = &IID_ISchedule_Value;
pub const ISchedule = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchedule,
            start: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchedule,
            start: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EndDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchedule,
            end: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EndDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchedule,
            end: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchedule,
            start: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchedule,
            start: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Days: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchedule,
            days: ?*WeekDays,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Days: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchedule,
            days: WeekDays,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStartDate(self: *const T, start_: ?*VARIANT) HRESULT {
                return @as(*const ISchedule.VTable, @ptrCast(self.vtable)).get_StartDate(@as(*const ISchedule, @ptrCast(self)), start_);
            }
            pub inline fn putStartDate(self: *const T, start_: VARIANT) HRESULT {
                return @as(*const ISchedule.VTable, @ptrCast(self.vtable)).put_StartDate(@as(*const ISchedule, @ptrCast(self)), start_);
            }
            pub inline fn getEndDate(self: *const T, end_: ?*VARIANT) HRESULT {
                return @as(*const ISchedule.VTable, @ptrCast(self.vtable)).get_EndDate(@as(*const ISchedule, @ptrCast(self)), end_);
            }
            pub inline fn putEndDate(self: *const T, end_: VARIANT) HRESULT {
                return @as(*const ISchedule.VTable, @ptrCast(self.vtable)).put_EndDate(@as(*const ISchedule, @ptrCast(self)), end_);
            }
            pub inline fn getStartTime(self: *const T, start_: ?*VARIANT) HRESULT {
                return @as(*const ISchedule.VTable, @ptrCast(self.vtable)).get_StartTime(@as(*const ISchedule, @ptrCast(self)), start_);
            }
            pub inline fn putStartTime(self: *const T, start_: VARIANT) HRESULT {
                return @as(*const ISchedule.VTable, @ptrCast(self.vtable)).put_StartTime(@as(*const ISchedule, @ptrCast(self)), start_);
            }
            pub inline fn getDays(self: *const T, days_: ?*WeekDays) HRESULT {
                return @as(*const ISchedule.VTable, @ptrCast(self.vtable)).get_Days(@as(*const ISchedule, @ptrCast(self)), days_);
            }
            pub inline fn putDays(self: *const T, days_: WeekDays) HRESULT {
                return @as(*const ISchedule.VTable, @ptrCast(self.vtable)).put_Days(@as(*const ISchedule, @ptrCast(self)), days_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IScheduleCollection_Value = Guid.initString("0383753d-098b-11d8-9414-505054503030");
pub const IID_IScheduleCollection = &IID_IScheduleCollection_Value;
pub const IScheduleCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IScheduleCollection,
            ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IScheduleCollection,
            index: VARIANT,
            pp_schedule: ?*?*ISchedule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IScheduleCollection,
            ienum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IScheduleCollection,
            p_schedule: ?*ISchedule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IScheduleCollection,
            v_schedule: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IScheduleCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const IScheduleCollection,
            p_schedules: ?*IScheduleCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSchedule: *const fn (
            self: *const IScheduleCollection,
            schedule: ?*?*ISchedule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, ret_val_: ?*i32) HRESULT {
                return @as(*const IScheduleCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IScheduleCollection, @ptrCast(self)), ret_val_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, pp_schedule_: ?*?*ISchedule) HRESULT {
                return @as(*const IScheduleCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IScheduleCollection, @ptrCast(self)), index_, pp_schedule_);
            }
            pub inline fn getNewEnum(self: *const T, ienum_: ?*?*IUnknown) HRESULT {
                return @as(*const IScheduleCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IScheduleCollection, @ptrCast(self)), ienum_);
            }
            pub inline fn add(self: *const T, p_schedule_: ?*ISchedule) HRESULT {
                return @as(*const IScheduleCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IScheduleCollection, @ptrCast(self)), p_schedule_);
            }
            pub inline fn remove(self: *const T, v_schedule_: VARIANT) HRESULT {
                return @as(*const IScheduleCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IScheduleCollection, @ptrCast(self)), v_schedule_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IScheduleCollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const IScheduleCollection, @ptrCast(self)));
            }
            pub inline fn addRange(self: *const T, p_schedules_: ?*IScheduleCollection) HRESULT {
                return @as(*const IScheduleCollection.VTable, @ptrCast(self.vtable)).AddRange(@as(*const IScheduleCollection, @ptrCast(self)), p_schedules_);
            }
            pub inline fn createSchedule(self: *const T, schedule_: ?*?*ISchedule) HRESULT {
                return @as(*const IScheduleCollection.VTable, @ptrCast(self.vtable)).CreateSchedule(@as(*const IScheduleCollection, @ptrCast(self)), schedule_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IValueMapItem_Value = Guid.initString("03837533-098b-11d8-9414-505054503030");
pub const IID_IValueMapItem = &IID_IValueMapItem_Value;
pub const IValueMapItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Key: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            key: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Key: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            key: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ValueMapType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            type: ?*ValueMapType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ValueMapType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMapItem,
            type: ValueMapType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IValueMapItem, @ptrCast(self)), description_);
            }
            pub inline fn putDescription(self: *const T, description_: ?BSTR) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IValueMapItem, @ptrCast(self)), description_);
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IValueMapItem, @ptrCast(self)), enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IValueMapItem, @ptrCast(self)), enabled_);
            }
            pub inline fn getKey(self: *const T, key_: ?*?BSTR) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).get_Key(@as(*const IValueMapItem, @ptrCast(self)), key_);
            }
            pub inline fn putKey(self: *const T, key_: ?BSTR) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).put_Key(@as(*const IValueMapItem, @ptrCast(self)), key_);
            }
            pub inline fn getValue(self: *const T, value_: ?*VARIANT) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IValueMapItem, @ptrCast(self)), value_);
            }
            pub inline fn putValue(self: *const T, value_: VARIANT) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).put_Value(@as(*const IValueMapItem, @ptrCast(self)), value_);
            }
            pub inline fn getValueMapType(self: *const T, type_: ?*ValueMapType) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).get_ValueMapType(@as(*const IValueMapItem, @ptrCast(self)), type_);
            }
            pub inline fn putValueMapType(self: *const T, type_: ValueMapType) HRESULT {
                return @as(*const IValueMapItem.VTable, @ptrCast(self.vtable)).put_ValueMapType(@as(*const IValueMapItem, @ptrCast(self)), type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IValueMap_Value = Guid.initString("03837534-098b-11d8-9414-505054503030");
pub const IID_IValueMap = &IID_IValueMap_Value;
pub const IValueMap = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMap,
            ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMap,
            index: VARIANT,
            value: ?*?*IValueMapItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMap,
            ret_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMap,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMap,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMap,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMap,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ValueMapType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMap,
            type: ?*ValueMapType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ValueMapType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IValueMap,
            type: ValueMapType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IValueMap,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IValueMap,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const IValueMap,
            map: ?*IValueMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateValueMapItem: *const fn (
            self: *const IValueMap,
            item: ?*?*IValueMapItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, ret_val_: ?*i32) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IValueMap, @ptrCast(self)), ret_val_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, value_: ?*?*IValueMapItem) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IValueMap, @ptrCast(self)), index_, value_);
            }
            pub inline fn getNewEnum(self: *const T, ret_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IValueMap, @ptrCast(self)), ret_val_);
            }
            pub inline fn getDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IValueMap, @ptrCast(self)), description_);
            }
            pub inline fn putDescription(self: *const T, description_: ?BSTR) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IValueMap, @ptrCast(self)), description_);
            }
            pub inline fn getValue(self: *const T, value_: ?*VARIANT) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IValueMap, @ptrCast(self)), value_);
            }
            pub inline fn putValue(self: *const T, value_: VARIANT) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).put_Value(@as(*const IValueMap, @ptrCast(self)), value_);
            }
            pub inline fn getValueMapType(self: *const T, type_: ?*ValueMapType) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).get_ValueMapType(@as(*const IValueMap, @ptrCast(self)), type_);
            }
            pub inline fn putValueMapType(self: *const T, type_: ValueMapType) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).put_ValueMapType(@as(*const IValueMap, @ptrCast(self)), type_);
            }
            pub inline fn add(self: *const T, value_: VARIANT) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).Add(@as(*const IValueMap, @ptrCast(self)), value_);
            }
            pub inline fn remove(self: *const T, value_: VARIANT) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).Remove(@as(*const IValueMap, @ptrCast(self)), value_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).Clear(@as(*const IValueMap, @ptrCast(self)));
            }
            pub inline fn addRange(self: *const T, map_: ?*IValueMap) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).AddRange(@as(*const IValueMap, @ptrCast(self)), map_);
            }
            pub inline fn createValueMapItem(self: *const T, item_: ?*?*IValueMapItem) HRESULT {
                return @as(*const IValueMap.VTable, @ptrCast(self.vtable)).CreateValueMapItem(@as(*const IValueMap, @ptrCast(self)), item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PERF_COUNTERSET_INFO = extern struct {
    CounterSetGuid: Guid,
    ProviderGuid: Guid,
    NumCounters: u32,
    InstanceType: u32,
};

pub const PERF_COUNTER_INFO = extern struct {
    CounterId: u32,
    Type: u32,
    Attrib: u64,
    Size: u32,
    DetailLevel: u32,
    Scale: i32,
    Offset: u32,
};

pub const PERF_COUNTERSET_INSTANCE = extern struct {
    CounterSetGuid: Guid,
    dwSize: u32,
    InstanceId: u32,
    InstanceNameOffset: u32,
    InstanceNameSize: u32,
};

pub const PERF_COUNTER_IDENTITY = extern struct {
    CounterSetGuid: Guid,
    BufferSize: u32,
    CounterId: u32,
    InstanceId: u32,
    MachineOffset: u32,
    NameOffset: u32,
    Reserved: u32,
};

pub const PERFLIBREQUEST = *const fn (
    request_code: u32,
    buffer: ?*anyopaque,
    buffer_size: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PERF_MEM_ALLOC = *const fn (
    alloc_size: usize,
    p_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

pub const PERF_MEM_FREE = *const fn (
    p_buffer: ?*anyopaque,
    p_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PERF_PROVIDER_CONTEXT = extern struct {
    ContextSize: u32,
    Reserved: u32,
    ControlCallback: ?PERFLIBREQUEST,
    MemAllocRoutine: ?PERF_MEM_ALLOC,
    MemFreeRoutine: ?PERF_MEM_FREE,
    pMemContext: ?*anyopaque,
};

pub const PERF_INSTANCE_HEADER = extern struct {
    Size: u32,
    InstanceId: u32,
};

pub const PerfRegInfoType = enum(i32) {
    COUNTERSET_STRUCT = 1,
    COUNTER_STRUCT = 2,
    COUNTERSET_NAME_STRING = 3,
    COUNTERSET_HELP_STRING = 4,
    COUNTER_NAME_STRINGS = 5,
    COUNTER_HELP_STRINGS = 6,
    PROVIDER_NAME = 7,
    PROVIDER_GUID = 8,
    COUNTERSET_ENGLISH_NAME = 9,
    COUNTER_ENGLISH_NAMES = 10,
};
pub const PERF_REG_COUNTERSET_STRUCT = PerfRegInfoType.COUNTERSET_STRUCT;
pub const PERF_REG_COUNTER_STRUCT = PerfRegInfoType.COUNTER_STRUCT;
pub const PERF_REG_COUNTERSET_NAME_STRING = PerfRegInfoType.COUNTERSET_NAME_STRING;
pub const PERF_REG_COUNTERSET_HELP_STRING = PerfRegInfoType.COUNTERSET_HELP_STRING;
pub const PERF_REG_COUNTER_NAME_STRINGS = PerfRegInfoType.COUNTER_NAME_STRINGS;
pub const PERF_REG_COUNTER_HELP_STRINGS = PerfRegInfoType.COUNTER_HELP_STRINGS;
pub const PERF_REG_PROVIDER_NAME = PerfRegInfoType.PROVIDER_NAME;
pub const PERF_REG_PROVIDER_GUID = PerfRegInfoType.PROVIDER_GUID;
pub const PERF_REG_COUNTERSET_ENGLISH_NAME = PerfRegInfoType.COUNTERSET_ENGLISH_NAME;
pub const PERF_REG_COUNTER_ENGLISH_NAMES = PerfRegInfoType.COUNTER_ENGLISH_NAMES;

pub const PERF_COUNTERSET_REG_INFO = extern struct {
    CounterSetGuid: Guid,
    CounterSetType: u32,
    DetailLevel: u32,
    NumCounters: u32,
    InstanceType: u32,
};

pub const PERF_COUNTER_REG_INFO = extern struct {
    CounterId: u32,
    Type: u32,
    Attrib: u64,
    DetailLevel: u32,
    DefaultScale: i32,
    BaseCounterId: u32,
    PerfTimeId: u32,
    PerfFreqId: u32,
    MultiId: u32,
    AggregateFunc: PERF_COUNTER_AGGREGATE_FUNC,
    Reserved: u32,
};

pub const PERF_STRING_BUFFER_HEADER = extern struct {
    dwSize: u32,
    dwCounters: u32,
};

pub const PERF_STRING_COUNTER_HEADER = extern struct {
    dwCounterId: u32,
    dwOffset: u32,
};

pub const PERF_COUNTER_IDENTIFIER = extern struct {
    CounterSetGuid: Guid,
    Status: u32,
    Size: u32,
    CounterId: u32,
    InstanceId: u32,
    Index: u32,
    Reserved: u32,
};

pub const PERF_DATA_HEADER = extern struct {
    dwTotalSize: u32,
    dwNumCounters: u32,
    PerfTimeStamp: i64,
    PerfTime100NSec: i64,
    PerfFreq: i64,
    SystemTime: SYSTEMTIME,
};

pub const PerfCounterDataType = enum(i32) {
    ERROR_RETURN = 0,
    SINGLE_COUNTER = 1,
    MULTIPLE_COUNTERS = 2,
    MULTIPLE_INSTANCES = 4,
    COUNTERSET = 6,
};
pub const PERF_ERROR_RETURN = PerfCounterDataType.ERROR_RETURN;
pub const PERF_SINGLE_COUNTER = PerfCounterDataType.SINGLE_COUNTER;
pub const PERF_MULTIPLE_COUNTERS = PerfCounterDataType.MULTIPLE_COUNTERS;
pub const PERF_MULTIPLE_INSTANCES = PerfCounterDataType.MULTIPLE_INSTANCES;
pub const PERF_COUNTERSET = PerfCounterDataType.COUNTERSET;

pub const PERF_COUNTER_HEADER = extern struct {
    dwStatus: u32,
    dwType: PerfCounterDataType,
    dwSize: u32,
    Reserved: u32,
};

pub const PERF_MULTI_INSTANCES = extern struct {
    dwTotalSize: u32,
    dwInstances: u32,
};

pub const PERF_MULTI_COUNTERS = extern struct {
    dwSize: u32,
    dwCounters: u32,
};

pub const PERF_COUNTER_DATA = extern struct {
    dwDataSize: u32,
    dwSize: u32,
};

pub const PERF_DATA_BLOCK = extern struct {
    Signature: [4]u16,
    LittleEndian: u32,
    Version: u32,
    Revision: u32,
    TotalByteLength: u32,
    HeaderLength: u32,
    NumObjectTypes: u32,
    DefaultObject: i32,
    SystemTime: SYSTEMTIME,
    PerfTime: LARGE_INTEGER,
    PerfFreq: LARGE_INTEGER,
    PerfTime100nSec: LARGE_INTEGER,
    SystemNameLength: u32,
    SystemNameOffset: u32,
};

pub const PERF_INSTANCE_DEFINITION = extern struct {
    ByteLength: u32,
    ParentObjectTitleIndex: u32,
    ParentObjectInstance: u32,
    UniqueID: i32,
    NameOffset: u32,
    NameLength: u32,
};

pub const PERF_COUNTER_BLOCK = extern struct {
    ByteLength: u32,
};

pub const PM_OPEN_PROC = *const fn (
    p_context: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PM_COLLECT_PROC = *const fn (
    p_value_name: ?PWSTR,
    pp_data: ?*?*anyopaque,
    pcb_total_bytes: ?*u32,
    p_num_object_types: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PM_CLOSE_PROC = *const fn () callconv(@import("std").os.windows.WINAPI) u32;

pub const PDH_RAW_COUNTER = extern struct {
    CStatus: u32,
    TimeStamp: FILETIME,
    FirstValue: i64,
    SecondValue: i64,
    MultiCount: u32,
};

pub const PDH_RAW_COUNTER_ITEM_A = extern struct {
    szName: ?PSTR,
    RawValue: PDH_RAW_COUNTER,
};

pub const PDH_RAW_COUNTER_ITEM_W = extern struct {
    szName: ?PWSTR,
    RawValue: PDH_RAW_COUNTER,
};

pub const PDH_FMT_COUNTERVALUE = extern struct {
    CStatus: u32,
    Anonymous: extern union {
        longValue: i32,
        doubleValue: f64,
        largeValue: i64,
        AnsiStringValue: ?[*:0]const u8,
        WideStringValue: ?[*:0]const u16,
    },
};

pub const PDH_FMT_COUNTERVALUE_ITEM_A = extern struct {
    szName: ?PSTR,
    FmtValue: PDH_FMT_COUNTERVALUE,
};

pub const PDH_FMT_COUNTERVALUE_ITEM_W = extern struct {
    szName: ?PWSTR,
    FmtValue: PDH_FMT_COUNTERVALUE,
};

pub const PDH_STATISTICS = extern struct {
    dwFormat: u32,
    count: u32,
    min: PDH_FMT_COUNTERVALUE,
    max: PDH_FMT_COUNTERVALUE,
    mean: PDH_FMT_COUNTERVALUE,
};

pub const PDH_COUNTER_PATH_ELEMENTS_A = extern struct {
    szMachineName: ?PSTR,
    szObjectName: ?PSTR,
    szInstanceName: ?PSTR,
    szParentInstance: ?PSTR,
    dwInstanceIndex: u32,
    szCounterName: ?PSTR,
};

pub const PDH_COUNTER_PATH_ELEMENTS_W = extern struct {
    szMachineName: ?PWSTR,
    szObjectName: ?PWSTR,
    szInstanceName: ?PWSTR,
    szParentInstance: ?PWSTR,
    dwInstanceIndex: u32,
    szCounterName: ?PWSTR,
};

pub const PDH_DATA_ITEM_PATH_ELEMENTS_A = extern struct {
    szMachineName: ?PSTR,
    ObjectGUID: Guid,
    dwItemId: u32,
    szInstanceName: ?PSTR,
};

pub const PDH_DATA_ITEM_PATH_ELEMENTS_W = extern struct {
    szMachineName: ?PWSTR,
    ObjectGUID: Guid,
    dwItemId: u32,
    szInstanceName: ?PWSTR,
};

pub const PDH_COUNTER_INFO_A = extern struct {
    dwLength: u32,
    dwType: u32,
    CVersion: u32,
    CStatus: u32,
    lScale: i32,
    lDefaultScale: i32,
    dwUserData: usize,
    dwQueryUserData: usize,
    szFullPath: ?PSTR,
    Anonymous: extern union {
        DataItemPath: PDH_DATA_ITEM_PATH_ELEMENTS_A,
        CounterPath: PDH_COUNTER_PATH_ELEMENTS_A,
        Anonymous: extern struct {
            szMachineName: ?PSTR,
            szObjectName: ?PSTR,
            szInstanceName: ?PSTR,
            szParentInstance: ?PSTR,
            dwInstanceIndex: u32,
            szCounterName: ?PSTR,
        },
    },
    szExplainText: ?PSTR,
    DataBuffer: [1]u32,
};

pub const PDH_COUNTER_INFO_W = extern struct {
    dwLength: u32,
    dwType: u32,
    CVersion: u32,
    CStatus: u32,
    lScale: i32,
    lDefaultScale: i32,
    dwUserData: usize,
    dwQueryUserData: usize,
    szFullPath: ?PWSTR,
    Anonymous: extern union {
        DataItemPath: PDH_DATA_ITEM_PATH_ELEMENTS_W,
        CounterPath: PDH_COUNTER_PATH_ELEMENTS_W,
        Anonymous: extern struct {
            szMachineName: ?PWSTR,
            szObjectName: ?PWSTR,
            szInstanceName: ?PWSTR,
            szParentInstance: ?PWSTR,
            dwInstanceIndex: u32,
            szCounterName: ?PWSTR,
        },
    },
    szExplainText: ?PWSTR,
    DataBuffer: [1]u32,
};

pub const PDH_TIME_INFO = extern struct {
    StartTime: i64,
    EndTime: i64,
    SampleCount: u32,
};

pub const PDH_RAW_LOG_RECORD = extern struct {
    dwStructureSize: u32,
    dwRecordType: PDH_LOG_TYPE,
    dwItems: u32,
    RawBytes: [1]u8,
};

pub const PDH_LOG_SERVICE_QUERY_INFO_A = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwLogQuota: u32,
    szLogFileCaption: ?PSTR,
    szDefaultDir: ?PSTR,
    szBaseFileName: ?PSTR,
    dwFileType: u32,
    dwReserved: u32,
    Anonymous: extern union {
        Anonymous1: extern struct {
            PdlAutoNameInterval: u32,
            PdlAutoNameUnits: u32,
            PdlCommandFilename: ?PSTR,
            PdlCounterList: ?PSTR,
            PdlAutoNameFormat: u32,
            PdlSampleInterval: u32,
            PdlLogStartTime: FILETIME,
            PdlLogEndTime: FILETIME,
        },
        Anonymous2: extern struct {
            TlNumberOfBuffers: u32,
            TlMinimumBuffers: u32,
            TlMaximumBuffers: u32,
            TlFreeBuffers: u32,
            TlBufferSize: u32,
            TlEventsLost: u32,
            TlLoggerThreadId: u32,
            TlBuffersWritten: u32,
            TlLogHandle: u32,
            TlLogFileName: ?PSTR,
        },
    },
};

pub const PDH_LOG_SERVICE_QUERY_INFO_W = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwLogQuota: u32,
    szLogFileCaption: ?PWSTR,
    szDefaultDir: ?PWSTR,
    szBaseFileName: ?PWSTR,
    dwFileType: u32,
    dwReserved: u32,
    Anonymous: extern union {
        Anonymous1: extern struct {
            PdlAutoNameInterval: u32,
            PdlAutoNameUnits: u32,
            PdlCommandFilename: ?PWSTR,
            PdlCounterList: ?PWSTR,
            PdlAutoNameFormat: u32,
            PdlSampleInterval: u32,
            PdlLogStartTime: FILETIME,
            PdlLogEndTime: FILETIME,
        },
        Anonymous2: extern struct {
            TlNumberOfBuffers: u32,
            TlMinimumBuffers: u32,
            TlMaximumBuffers: u32,
            TlFreeBuffers: u32,
            TlBufferSize: u32,
            TlEventsLost: u32,
            TlLoggerThreadId: u32,
            TlBuffersWritten: u32,
            TlLogHandle: u32,
            TlLogFileName: ?PWSTR,
        },
    },
};

pub const CounterPathCallBack = *const fn (
    param0: usize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PDH_BROWSE_DLG_CONFIG_HW = extern struct {
    _bitfield: u32,
    hWndOwner: ?HWND,
    hDataSource: isize,
    szReturnPathBuffer: ?PWSTR,
    cchReturnPathLength: u32,
    pCallBack: ?CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: ?PWSTR,
};

pub const PDH_BROWSE_DLG_CONFIG_HA = extern struct {
    _bitfield: u32,
    hWndOwner: ?HWND,
    hDataSource: isize,
    szReturnPathBuffer: ?PSTR,
    cchReturnPathLength: u32,
    pCallBack: ?CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: ?PSTR,
};

pub const PDH_BROWSE_DLG_CONFIG_W = extern struct {
    _bitfield: u32,
    hWndOwner: ?HWND,
    szDataSource: ?PWSTR,
    szReturnPathBuffer: ?PWSTR,
    cchReturnPathLength: u32,
    pCallBack: ?CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: ?PWSTR,
};

pub const PDH_BROWSE_DLG_CONFIG_A = extern struct {
    _bitfield: u32,
    hWndOwner: ?HWND,
    szDataSource: ?PSTR,
    szReturnPathBuffer: ?PSTR,
    cchReturnPathLength: u32,
    pCallBack: ?CounterPathCallBack,
    dwCallBackArg: usize,
    CallBackStatus: i32,
    dwDefaultDetailLevel: PERF_DETAIL,
    szDialogBoxCaption: ?PSTR,
};

const CLSID_SystemMonitor_Value = Guid.initString("c4d2d8e0-d1dd-11ce-940f-008029004347");
pub const CLSID_SystemMonitor = &CLSID_SystemMonitor_Value;

const CLSID_CounterItem_Value = Guid.initString("c4d2d8e0-d1dd-11ce-940f-008029004348");
pub const CLSID_CounterItem = &CLSID_CounterItem_Value;

const CLSID_Counters_Value = Guid.initString("b2b066d2-2aac-11cf-942f-008029004347");
pub const CLSID_Counters = &CLSID_Counters_Value;

const CLSID_LogFileItem_Value = Guid.initString("16ec5be8-df93-4237-94e4-9ee918111d71");
pub const CLSID_LogFileItem = &CLSID_LogFileItem_Value;

const CLSID_LogFiles_Value = Guid.initString("2735d9fd-f6b9-4f19-a5d9-e2d068584bc5");
pub const CLSID_LogFiles = &CLSID_LogFiles_Value;

const CLSID_CounterItem2_Value = Guid.initString("43196c62-c31f-4ce3-a02e-79efe0f6a525");
pub const CLSID_CounterItem2 = &CLSID_CounterItem2_Value;

const CLSID_SystemMonitor2_Value = Guid.initString("7f30578c-5f38-4612-acfe-6ed04c7b7af8");
pub const CLSID_SystemMonitor2 = &CLSID_SystemMonitor2_Value;

const CLSID_AppearPropPage_Value = Guid.initString("e49741e9-93a8-4ab1-8e96-bf4482282e9c");
pub const CLSID_AppearPropPage = &CLSID_AppearPropPage_Value;

const CLSID_GeneralPropPage_Value = Guid.initString("c3e5d3d2-1a03-11cf-942d-008029004347");
pub const CLSID_GeneralPropPage = &CLSID_GeneralPropPage_Value;

const CLSID_GraphPropPage_Value = Guid.initString("c3e5d3d3-1a03-11cf-942d-008029004347");
pub const CLSID_GraphPropPage = &CLSID_GraphPropPage_Value;

const CLSID_SourcePropPage_Value = Guid.initString("0cf32aa1-7571-11d0-93c4-00aa00a3ddea");
pub const CLSID_SourcePropPage = &CLSID_SourcePropPage_Value;

const CLSID_CounterPropPage_Value = Guid.initString("cf948561-ede8-11ce-941e-008029004347");
pub const CLSID_CounterPropPage = &CLSID_CounterPropPage_Value;

pub const DisplayTypeConstants = enum(i32) {
    LineGraph = 1,
    Histogram = 2,
    Report = 3,
    ChartArea = 4,
    ChartStackedArea = 5,
};
pub const sysmonLineGraph = DisplayTypeConstants.LineGraph;
pub const sysmonHistogram = DisplayTypeConstants.Histogram;
pub const sysmonReport = DisplayTypeConstants.Report;
pub const sysmonChartArea = DisplayTypeConstants.ChartArea;
pub const sysmonChartStackedArea = DisplayTypeConstants.ChartStackedArea;

pub const ReportValueTypeConstants = enum(i32) {
    DefaultValue = 0,
    CurrentValue = 1,
    Average = 2,
    Minimum = 3,
    Maximum = 4,
};
pub const sysmonDefaultValue = ReportValueTypeConstants.DefaultValue;
pub const sysmonCurrentValue = ReportValueTypeConstants.CurrentValue;
pub const sysmonAverage = ReportValueTypeConstants.Average;
pub const sysmonMinimum = ReportValueTypeConstants.Minimum;
pub const sysmonMaximum = ReportValueTypeConstants.Maximum;

pub const DataSourceTypeConstants = enum(i32) {
    NullDataSource = -1,
    CurrentActivity = 1,
    LogFiles = 2,
    SqlLog = 3,
};
pub const sysmonNullDataSource = DataSourceTypeConstants.NullDataSource;
pub const sysmonCurrentActivity = DataSourceTypeConstants.CurrentActivity;
pub const sysmonLogFiles = DataSourceTypeConstants.LogFiles;
pub const sysmonSqlLog = DataSourceTypeConstants.SqlLog;

pub const SysmonFileType = enum(i32) {
    Html = 1,
    Report = 2,
    Csv = 3,
    Tsv = 4,
    Blg = 5,
    RetiredBlg = 6,
    Gif = 7,
};
pub const sysmonFileHtml = SysmonFileType.Html;
pub const sysmonFileReport = SysmonFileType.Report;
pub const sysmonFileCsv = SysmonFileType.Csv;
pub const sysmonFileTsv = SysmonFileType.Tsv;
pub const sysmonFileBlg = SysmonFileType.Blg;
pub const sysmonFileRetiredBlg = SysmonFileType.RetiredBlg;
pub const sysmonFileGif = SysmonFileType.Gif;

pub const SysmonDataType = enum(i32) {
    Avg = 1,
    Min = 2,
    Max = 3,
    Time = 4,
    Count = 5,
};
pub const sysmonDataAvg = SysmonDataType.Avg;
pub const sysmonDataMin = SysmonDataType.Min;
pub const sysmonDataMax = SysmonDataType.Max;
pub const sysmonDataTime = SysmonDataType.Time;
pub const sysmonDataCount = SysmonDataType.Count;

pub const SysmonBatchReason = enum(i32) {
    None = 0,
    AddFiles = 1,
    AddCounters = 2,
    AddFilesAutoCounters = 3,
};
pub const sysmonBatchNone = SysmonBatchReason.None;
pub const sysmonBatchAddFiles = SysmonBatchReason.AddFiles;
pub const sysmonBatchAddCounters = SysmonBatchReason.AddCounters;
pub const sysmonBatchAddFilesAutoCounters = SysmonBatchReason.AddFilesAutoCounters;

const IID_ICounterItem_Value = Guid.initString("771a9520-ee28-11ce-941e-008029004347");
pub const IID_ICounterItem = &IID_ICounterItem_Value;
pub const ICounterItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            pdbl_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Color: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Color: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            i_width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LineStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            i_line_style: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LineStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ScaleFactor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            i_scale: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScaleFactor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem,
            pstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const ICounterItem,
            value: ?*f64,
            status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: *const fn (
            self: *const ICounterItem,
            max: ?*f64,
            min: ?*f64,
            avg: ?*f64,
            status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getValue(self: *const T, pdbl_value_: ?*f64) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).get_Value(@as(*const ICounterItem, @ptrCast(self)), pdbl_value_);
            }
            pub inline fn putColor(self: *const T, color_: u32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).put_Color(@as(*const ICounterItem, @ptrCast(self)), color_);
            }
            pub inline fn getColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).get_Color(@as(*const ICounterItem, @ptrCast(self)), p_color_);
            }
            pub inline fn putWidth(self: *const T, i_width_: i32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).put_Width(@as(*const ICounterItem, @ptrCast(self)), i_width_);
            }
            pub inline fn getWidth(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).get_Width(@as(*const ICounterItem, @ptrCast(self)), pi_value_);
            }
            pub inline fn putLineStyle(self: *const T, i_line_style_: i32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).put_LineStyle(@as(*const ICounterItem, @ptrCast(self)), i_line_style_);
            }
            pub inline fn getLineStyle(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).get_LineStyle(@as(*const ICounterItem, @ptrCast(self)), pi_value_);
            }
            pub inline fn putScaleFactor(self: *const T, i_scale_: i32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).put_ScaleFactor(@as(*const ICounterItem, @ptrCast(self)), i_scale_);
            }
            pub inline fn getScaleFactor(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).get_ScaleFactor(@as(*const ICounterItem, @ptrCast(self)), pi_value_);
            }
            pub inline fn getPath(self: *const T, pstr_value_: ?*?BSTR) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).get_Path(@as(*const ICounterItem, @ptrCast(self)), pstr_value_);
            }
            pub inline fn getValue1(self: *const T, value_: ?*f64, status_: ?*i32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).GetValue(@as(*const ICounterItem, @ptrCast(self)), value_, status_);
            }
            pub inline fn getStatistics(self: *const T, max_: ?*f64, min_: ?*f64, avg_: ?*f64, status_: ?*i32) HRESULT {
                return @as(*const ICounterItem.VTable, @ptrCast(self.vtable)).GetStatistics(@as(*const ICounterItem, @ptrCast(self)), max_, min_, avg_, status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICounterItem2_Value = Guid.initString("eefcd4e1-ea1c-4435-b7f4-e341ba03b4f9");
pub const IID_ICounterItem2 = &IID_ICounterItem2_Value;
pub const ICounterItem2 = extern struct {
    pub const VTable = extern struct {
        base: ICounterItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Selected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem2,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem2,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Visible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem2,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Visible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounterItem2,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataAt: *const fn (
            self: *const ICounterItem2,
            i_index: i32,
            i_which: SysmonDataType,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICounterItem.MethodMixin(T);
            pub inline fn putSelected(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ICounterItem2.VTable, @ptrCast(self.vtable)).put_Selected(@as(*const ICounterItem2, @ptrCast(self)), b_state_);
            }
            pub inline fn getSelected(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ICounterItem2.VTable, @ptrCast(self.vtable)).get_Selected(@as(*const ICounterItem2, @ptrCast(self)), pb_state_);
            }
            pub inline fn putVisible(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ICounterItem2.VTable, @ptrCast(self.vtable)).put_Visible(@as(*const ICounterItem2, @ptrCast(self)), b_state_);
            }
            pub inline fn getVisible(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ICounterItem2.VTable, @ptrCast(self.vtable)).get_Visible(@as(*const ICounterItem2, @ptrCast(self)), pb_state_);
            }
            pub inline fn getDataAt(self: *const T, i_index_: i32, i_which_: SysmonDataType, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ICounterItem2.VTable, @ptrCast(self.vtable)).GetDataAt(@as(*const ICounterItem2, @ptrCast(self)), i_index_, i_which_, p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__ICounterItemUnion_Value = Guid.initString("de1a6b74-9182-4c41-8e2c-24c2cd30ee83");
pub const IID__ICounterItemUnion = &IID__ICounterItemUnion_Value;
pub const _ICounterItemUnion = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            pdbl_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Color: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Color: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            i_width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LineStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            i_line_style: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LineStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ScaleFactor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            i_scale: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScaleFactor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            pstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const _ICounterItemUnion,
            value: ?*f64,
            status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: *const fn (
            self: *const _ICounterItemUnion,
            max: ?*f64,
            min: ?*f64,
            avg: ?*f64,
            status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Selected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Visible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Visible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ICounterItemUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataAt: *const fn (
            self: *const _ICounterItemUnion,
            i_index: i32,
            i_which: SysmonDataType,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getValue(self: *const T, pdbl_value_: ?*f64) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).get_Value(@as(*const _ICounterItemUnion, @ptrCast(self)), pdbl_value_);
            }
            pub inline fn putColor(self: *const T, color_: u32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).put_Color(@as(*const _ICounterItemUnion, @ptrCast(self)), color_);
            }
            pub inline fn getColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).get_Color(@as(*const _ICounterItemUnion, @ptrCast(self)), p_color_);
            }
            pub inline fn putWidth(self: *const T, i_width_: i32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).put_Width(@as(*const _ICounterItemUnion, @ptrCast(self)), i_width_);
            }
            pub inline fn getWidth(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).get_Width(@as(*const _ICounterItemUnion, @ptrCast(self)), pi_value_);
            }
            pub inline fn putLineStyle(self: *const T, i_line_style_: i32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).put_LineStyle(@as(*const _ICounterItemUnion, @ptrCast(self)), i_line_style_);
            }
            pub inline fn getLineStyle(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).get_LineStyle(@as(*const _ICounterItemUnion, @ptrCast(self)), pi_value_);
            }
            pub inline fn putScaleFactor(self: *const T, i_scale_: i32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).put_ScaleFactor(@as(*const _ICounterItemUnion, @ptrCast(self)), i_scale_);
            }
            pub inline fn getScaleFactor(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).get_ScaleFactor(@as(*const _ICounterItemUnion, @ptrCast(self)), pi_value_);
            }
            pub inline fn getPath(self: *const T, pstr_value_: ?*?BSTR) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).get_Path(@as(*const _ICounterItemUnion, @ptrCast(self)), pstr_value_);
            }
            pub inline fn getValue1(self: *const T, value_: ?*f64, status_: ?*i32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).GetValue(@as(*const _ICounterItemUnion, @ptrCast(self)), value_, status_);
            }
            pub inline fn getStatistics(self: *const T, max_: ?*f64, min_: ?*f64, avg_: ?*f64, status_: ?*i32) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).GetStatistics(@as(*const _ICounterItemUnion, @ptrCast(self)), max_, min_, avg_, status_);
            }
            pub inline fn putSelected(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).put_Selected(@as(*const _ICounterItemUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getSelected(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).get_Selected(@as(*const _ICounterItemUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putVisible(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).put_Visible(@as(*const _ICounterItemUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getVisible(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).get_Visible(@as(*const _ICounterItemUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn getDataAt(self: *const T, i_index_: i32, i_which_: SysmonDataType, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const _ICounterItemUnion.VTable, @ptrCast(self.vtable)).GetDataAt(@as(*const _ICounterItemUnion, @ptrCast(self)), i_index_, i_which_, p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DICounterItem_Value = Guid.initString("c08c4ff2-0e2e-11cf-942c-008029004347");
pub const IID_DICounterItem = &IID_DICounterItem_Value;
pub const DICounterItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICounters_Value = Guid.initString("79167962-28fc-11cf-942f-008029004347");
pub const IID_ICounters = &IID_ICounters_Value;
pub const ICounters = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounters,
            p_long: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounters,
            pp_iunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICounters,
            index: VARIANT,
            pp_i: ?*?*DICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ICounters,
            pathname: ?BSTR,
            pp_i: ?*?*DICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ICounters,
            index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_long_: ?*i32) HRESULT {
                return @as(*const ICounters.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICounters, @ptrCast(self)), p_long_);
            }
            pub inline fn getNewEnum(self: *const T, pp_iunk_: ?*?*IUnknown) HRESULT {
                return @as(*const ICounters.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICounters, @ptrCast(self)), pp_iunk_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, pp_i_: ?*?*DICounterItem) HRESULT {
                return @as(*const ICounters.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ICounters, @ptrCast(self)), index_, pp_i_);
            }
            pub inline fn add(self: *const T, pathname_: ?BSTR, pp_i_: ?*?*DICounterItem) HRESULT {
                return @as(*const ICounters.VTable, @ptrCast(self.vtable)).Add(@as(*const ICounters, @ptrCast(self)), pathname_, pp_i_);
            }
            pub inline fn remove(self: *const T, index_: VARIANT) HRESULT {
                return @as(*const ICounters.VTable, @ptrCast(self.vtable)).Remove(@as(*const ICounters, @ptrCast(self)), index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ILogFileItem_Value = Guid.initString("d6b518dd-05c7-418a-89e6-4f9ce8c6841e");
pub const IID_ILogFileItem = &IID_ILogFileItem_Value;
pub const ILogFileItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ILogFileItem,
            pstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPath(self: *const T, pstr_value_: ?*?BSTR) HRESULT {
                return @as(*const ILogFileItem.VTable, @ptrCast(self.vtable)).get_Path(@as(*const ILogFileItem, @ptrCast(self)), pstr_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DILogFileItem_Value = Guid.initString("8d093ffc-f777-4917-82d1-833fbc54c58f");
pub const IID_DILogFileItem = &IID_DILogFileItem_Value;
pub const DILogFileItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ILogFiles_Value = Guid.initString("6a2a97e6-6851-41ea-87ad-2a8225335865");
pub const IID_ILogFiles = &IID_ILogFiles_Value;
pub const ILogFiles = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ILogFiles,
            p_long: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ILogFiles,
            pp_iunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ILogFiles,
            index: VARIANT,
            pp_i: ?*?*DILogFileItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ILogFiles,
            pathname: ?BSTR,
            pp_i: ?*?*DILogFileItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ILogFiles,
            index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_long_: ?*i32) HRESULT {
                return @as(*const ILogFiles.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ILogFiles, @ptrCast(self)), p_long_);
            }
            pub inline fn getNewEnum(self: *const T, pp_iunk_: ?*?*IUnknown) HRESULT {
                return @as(*const ILogFiles.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ILogFiles, @ptrCast(self)), pp_iunk_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, pp_i_: ?*?*DILogFileItem) HRESULT {
                return @as(*const ILogFiles.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ILogFiles, @ptrCast(self)), index_, pp_i_);
            }
            pub inline fn add(self: *const T, pathname_: ?BSTR, pp_i_: ?*?*DILogFileItem) HRESULT {
                return @as(*const ILogFiles.VTable, @ptrCast(self.vtable)).Add(@as(*const ILogFiles, @ptrCast(self)), pathname_, pp_i_);
            }
            pub inline fn remove(self: *const T, index_: VARIANT) HRESULT {
                return @as(*const ILogFiles.VTable, @ptrCast(self.vtable)).Remove(@as(*const ILogFiles, @ptrCast(self)), index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISystemMonitor_Value = Guid.initString("194eb241-c32c-11cf-9398-00aa00a3ddea");
pub const IID_ISystemMonitor = &IID_ISystemMonitor_Value;
pub const ISystemMonitor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Appearance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            i_appearance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Appearance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            i_appearance: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BorderStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            i_border_style: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BorderStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            i_border_style: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForeColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ForeColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Font: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pp_font: ?*?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Font: *const fn (
            self: *const ISystemMonitor,
            p_font: ?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Counters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pp_i_counters: ?*?*ICounters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowVerticalGrid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowVerticalGrid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowHorizontalGrid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowHorizontalGrid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowLegend: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowLegend: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowScaleLabels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowScaleLabels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowValueBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowValueBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaximumScale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            i_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaximumScale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinimumScale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            i_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinimumScale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UpdateInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            f_value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UpdateInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pf_value: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            e_display_type: DisplayTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pe_display_type: ?*DisplayTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ManualUpdate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ManualUpdate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GraphTitle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            bs_title: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GraphTitle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pbs_title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_YAxisLabel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            bs_title: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_YAxisLabel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pbs_title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollectSample: *const fn (
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateGraph: *const fn (
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseCounters: *const fn (
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayProperties: *const fn (
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Counter: *const fn (
            self: *const ISystemMonitor,
            i_index: i32,
            pp_i_counter: ?*?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCounter: *const fn (
            self: *const ISystemMonitor,
            bs_path: ?BSTR,
            pp_i_counter: ?*?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCounter: *const fn (
            self: *const ISystemMonitor,
            p_ctr: ?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColorCtl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColorCtl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            bs_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            bs_file_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogViewStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            start_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogViewStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            start_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogViewStop: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            stop_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogViewStop: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            stop_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GridColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GridColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TimeBarColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TimeBarColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Highlight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Highlight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowToolbar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowToolbar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Paste: *const fn (
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: *const fn (
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ISystemMonitor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReadOnly: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReadOnly: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportValueType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            e_report_value_type: ReportValueTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportValueType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pe_report_value_type: ?*ReportValueTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonitorDuplicateInstances: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonitorDuplicateInstances: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            i_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFiles: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pp_i_log_files: ?*?*ILogFiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataSourceType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            e_data_source_type: DataSourceTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataSourceType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            pe_data_source_type: ?*DataSourceTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SqlDsnName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            bs_sql_dsn_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SqlDsnName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            bs_sql_dsn_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SqlLogSetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            bs_sql_log_set_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SqlLogSetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor,
            bs_sql_log_set_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAppearance(self: *const T, i_appearance_: ?*i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_Appearance(@as(*const ISystemMonitor, @ptrCast(self)), i_appearance_);
            }
            pub inline fn putAppearance(self: *const T, i_appearance_: i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_Appearance(@as(*const ISystemMonitor, @ptrCast(self)), i_appearance_);
            }
            pub inline fn getBackColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_BackColor(@as(*const ISystemMonitor, @ptrCast(self)), p_color_);
            }
            pub inline fn putBackColor(self: *const T, color_: u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_BackColor(@as(*const ISystemMonitor, @ptrCast(self)), color_);
            }
            pub inline fn getBorderStyle(self: *const T, i_border_style_: ?*i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_BorderStyle(@as(*const ISystemMonitor, @ptrCast(self)), i_border_style_);
            }
            pub inline fn putBorderStyle(self: *const T, i_border_style_: i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_BorderStyle(@as(*const ISystemMonitor, @ptrCast(self)), i_border_style_);
            }
            pub inline fn getForeColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ForeColor(@as(*const ISystemMonitor, @ptrCast(self)), p_color_);
            }
            pub inline fn putForeColor(self: *const T, color_: u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ForeColor(@as(*const ISystemMonitor, @ptrCast(self)), color_);
            }
            pub inline fn getFont(self: *const T, pp_font_: ?*?*IFontDisp) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_Font(@as(*const ISystemMonitor, @ptrCast(self)), pp_font_);
            }
            pub inline fn putrefFont(self: *const T, p_font_: ?*IFontDisp) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).putref_Font(@as(*const ISystemMonitor, @ptrCast(self)), p_font_);
            }
            pub inline fn getCounters(self: *const T, pp_i_counters_: ?*?*ICounters) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_Counters(@as(*const ISystemMonitor, @ptrCast(self)), pp_i_counters_);
            }
            pub inline fn putShowVerticalGrid(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ShowVerticalGrid(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowVerticalGrid(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ShowVerticalGrid(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowHorizontalGrid(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ShowHorizontalGrid(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowHorizontalGrid(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ShowHorizontalGrid(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowLegend(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ShowLegend(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowLegend(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ShowLegend(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowScaleLabels(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ShowScaleLabels(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowScaleLabels(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ShowScaleLabels(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowValueBar(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ShowValueBar(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowValueBar(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ShowValueBar(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putMaximumScale(self: *const T, i_value_: i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_MaximumScale(@as(*const ISystemMonitor, @ptrCast(self)), i_value_);
            }
            pub inline fn getMaximumScale(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_MaximumScale(@as(*const ISystemMonitor, @ptrCast(self)), pi_value_);
            }
            pub inline fn putMinimumScale(self: *const T, i_value_: i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_MinimumScale(@as(*const ISystemMonitor, @ptrCast(self)), i_value_);
            }
            pub inline fn getMinimumScale(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_MinimumScale(@as(*const ISystemMonitor, @ptrCast(self)), pi_value_);
            }
            pub inline fn putUpdateInterval(self: *const T, f_value_: f32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_UpdateInterval(@as(*const ISystemMonitor, @ptrCast(self)), f_value_);
            }
            pub inline fn getUpdateInterval(self: *const T, pf_value_: ?*f32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_UpdateInterval(@as(*const ISystemMonitor, @ptrCast(self)), pf_value_);
            }
            pub inline fn putDisplayType(self: *const T, e_display_type_: DisplayTypeConstants) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_DisplayType(@as(*const ISystemMonitor, @ptrCast(self)), e_display_type_);
            }
            pub inline fn getDisplayType(self: *const T, pe_display_type_: ?*DisplayTypeConstants) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_DisplayType(@as(*const ISystemMonitor, @ptrCast(self)), pe_display_type_);
            }
            pub inline fn putManualUpdate(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ManualUpdate(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn getManualUpdate(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ManualUpdate(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putGraphTitle(self: *const T, bs_title_: ?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_GraphTitle(@as(*const ISystemMonitor, @ptrCast(self)), bs_title_);
            }
            pub inline fn getGraphTitle(self: *const T, pbs_title_: ?*?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_GraphTitle(@as(*const ISystemMonitor, @ptrCast(self)), pbs_title_);
            }
            pub inline fn putYAxisLabel(self: *const T, bs_title_: ?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_YAxisLabel(@as(*const ISystemMonitor, @ptrCast(self)), bs_title_);
            }
            pub inline fn getYAxisLabel(self: *const T, pbs_title_: ?*?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_YAxisLabel(@as(*const ISystemMonitor, @ptrCast(self)), pbs_title_);
            }
            pub inline fn collectSample(self: *const T) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).CollectSample(@as(*const ISystemMonitor, @ptrCast(self)));
            }
            pub inline fn updateGraph(self: *const T) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).UpdateGraph(@as(*const ISystemMonitor, @ptrCast(self)));
            }
            pub inline fn browseCounters(self: *const T) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).BrowseCounters(@as(*const ISystemMonitor, @ptrCast(self)));
            }
            pub inline fn displayProperties(self: *const T) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).DisplayProperties(@as(*const ISystemMonitor, @ptrCast(self)));
            }
            pub inline fn counter(self: *const T, i_index_: i32, pp_i_counter_: ?*?*ICounterItem) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).Counter(@as(*const ISystemMonitor, @ptrCast(self)), i_index_, pp_i_counter_);
            }
            pub inline fn addCounter(self: *const T, bs_path_: ?BSTR, pp_i_counter_: ?*?*ICounterItem) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).AddCounter(@as(*const ISystemMonitor, @ptrCast(self)), bs_path_, pp_i_counter_);
            }
            pub inline fn deleteCounter(self: *const T, p_ctr_: ?*ICounterItem) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).DeleteCounter(@as(*const ISystemMonitor, @ptrCast(self)), p_ctr_);
            }
            pub inline fn getBackColorCtl(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_BackColorCtl(@as(*const ISystemMonitor, @ptrCast(self)), p_color_);
            }
            pub inline fn putBackColorCtl(self: *const T, color_: u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_BackColorCtl(@as(*const ISystemMonitor, @ptrCast(self)), color_);
            }
            pub inline fn putLogFileName(self: *const T, bs_file_name_: ?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_LogFileName(@as(*const ISystemMonitor, @ptrCast(self)), bs_file_name_);
            }
            pub inline fn getLogFileName(self: *const T, bs_file_name_: ?*?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_LogFileName(@as(*const ISystemMonitor, @ptrCast(self)), bs_file_name_);
            }
            pub inline fn putLogViewStart(self: *const T, start_time_: f64) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_LogViewStart(@as(*const ISystemMonitor, @ptrCast(self)), start_time_);
            }
            pub inline fn getLogViewStart(self: *const T, start_time_: ?*f64) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_LogViewStart(@as(*const ISystemMonitor, @ptrCast(self)), start_time_);
            }
            pub inline fn putLogViewStop(self: *const T, stop_time_: f64) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_LogViewStop(@as(*const ISystemMonitor, @ptrCast(self)), stop_time_);
            }
            pub inline fn getLogViewStop(self: *const T, stop_time_: ?*f64) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_LogViewStop(@as(*const ISystemMonitor, @ptrCast(self)), stop_time_);
            }
            pub inline fn getGridColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_GridColor(@as(*const ISystemMonitor, @ptrCast(self)), p_color_);
            }
            pub inline fn putGridColor(self: *const T, color_: u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_GridColor(@as(*const ISystemMonitor, @ptrCast(self)), color_);
            }
            pub inline fn getTimeBarColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_TimeBarColor(@as(*const ISystemMonitor, @ptrCast(self)), p_color_);
            }
            pub inline fn putTimeBarColor(self: *const T, color_: u32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_TimeBarColor(@as(*const ISystemMonitor, @ptrCast(self)), color_);
            }
            pub inline fn getHighlight(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_Highlight(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putHighlight(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_Highlight(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowToolbar(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ShowToolbar(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowToolbar(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ShowToolbar(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn paste(self: *const T) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).Paste(@as(*const ISystemMonitor, @ptrCast(self)));
            }
            pub inline fn copy(self: *const T) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).Copy(@as(*const ISystemMonitor, @ptrCast(self)));
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).Reset(@as(*const ISystemMonitor, @ptrCast(self)));
            }
            pub inline fn putReadOnly(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ReadOnly(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn getReadOnly(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ReadOnly(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putReportValueType(self: *const T, e_report_value_type_: ReportValueTypeConstants) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_ReportValueType(@as(*const ISystemMonitor, @ptrCast(self)), e_report_value_type_);
            }
            pub inline fn getReportValueType(self: *const T, pe_report_value_type_: ?*ReportValueTypeConstants) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_ReportValueType(@as(*const ISystemMonitor, @ptrCast(self)), pe_report_value_type_);
            }
            pub inline fn putMonitorDuplicateInstances(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_MonitorDuplicateInstances(@as(*const ISystemMonitor, @ptrCast(self)), b_state_);
            }
            pub inline fn getMonitorDuplicateInstances(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_MonitorDuplicateInstances(@as(*const ISystemMonitor, @ptrCast(self)), pb_state_);
            }
            pub inline fn putDisplayFilter(self: *const T, i_value_: i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_DisplayFilter(@as(*const ISystemMonitor, @ptrCast(self)), i_value_);
            }
            pub inline fn getDisplayFilter(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_DisplayFilter(@as(*const ISystemMonitor, @ptrCast(self)), pi_value_);
            }
            pub inline fn getLogFiles(self: *const T, pp_i_log_files_: ?*?*ILogFiles) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_LogFiles(@as(*const ISystemMonitor, @ptrCast(self)), pp_i_log_files_);
            }
            pub inline fn putDataSourceType(self: *const T, e_data_source_type_: DataSourceTypeConstants) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_DataSourceType(@as(*const ISystemMonitor, @ptrCast(self)), e_data_source_type_);
            }
            pub inline fn getDataSourceType(self: *const T, pe_data_source_type_: ?*DataSourceTypeConstants) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_DataSourceType(@as(*const ISystemMonitor, @ptrCast(self)), pe_data_source_type_);
            }
            pub inline fn putSqlDsnName(self: *const T, bs_sql_dsn_name_: ?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_SqlDsnName(@as(*const ISystemMonitor, @ptrCast(self)), bs_sql_dsn_name_);
            }
            pub inline fn getSqlDsnName(self: *const T, bs_sql_dsn_name_: ?*?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_SqlDsnName(@as(*const ISystemMonitor, @ptrCast(self)), bs_sql_dsn_name_);
            }
            pub inline fn putSqlLogSetName(self: *const T, bs_sql_log_set_name_: ?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).put_SqlLogSetName(@as(*const ISystemMonitor, @ptrCast(self)), bs_sql_log_set_name_);
            }
            pub inline fn getSqlLogSetName(self: *const T, bs_sql_log_set_name_: ?*?BSTR) HRESULT {
                return @as(*const ISystemMonitor.VTable, @ptrCast(self.vtable)).get_SqlLogSetName(@as(*const ISystemMonitor, @ptrCast(self)), bs_sql_log_set_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISystemMonitor2_Value = Guid.initString("08e3206a-5fd2-4fde-a8a5-8cb3b63d2677");
pub const IID_ISystemMonitor2 = &IID_ISystemMonitor2_Value;
pub const ISystemMonitor2 = extern struct {
    pub const VTable = extern struct {
        base: ISystemMonitor.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableDigitGrouping: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableDigitGrouping: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableToolTips: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableToolTips: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowTimeAxisLabels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowTimeAxisLabels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ChartScroll: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            b_scroll: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ChartScroll: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            pb_scroll: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataPointCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            i_new_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataPointCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            pi_data_point_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleToFit: *const fn (
            self: *const ISystemMonitor2,
            b_selected_counters_only: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAs: *const fn (
            self: *const ISystemMonitor2,
            bstr_file_name: ?BSTR,
            e_sysmon_file_type: SysmonFileType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Relog: *const fn (
            self: *const ISystemMonitor2,
            bstr_file_name: ?BSTR,
            e_sysmon_file_type: SysmonFileType,
            i_filter: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearData: *const fn (
            self: *const ISystemMonitor2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogSourceStartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogSourceStopTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISystemMonitor2,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLogViewRange: *const fn (
            self: *const ISystemMonitor2,
            start_time: f64,
            stop_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogViewRange: *const fn (
            self: *const ISystemMonitor2,
            start_time: ?*f64,
            stop_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BatchingLock: *const fn (
            self: *const ISystemMonitor2,
            f_lock: i16,
            e_batch_reason: SysmonBatchReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadSettings: *const fn (
            self: *const ISystemMonitor2,
            bstr_setting_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISystemMonitor.MethodMixin(T);
            pub inline fn putEnableDigitGrouping(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).put_EnableDigitGrouping(@as(*const ISystemMonitor2, @ptrCast(self)), b_state_);
            }
            pub inline fn getEnableDigitGrouping(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).get_EnableDigitGrouping(@as(*const ISystemMonitor2, @ptrCast(self)), pb_state_);
            }
            pub inline fn putEnableToolTips(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).put_EnableToolTips(@as(*const ISystemMonitor2, @ptrCast(self)), b_state_);
            }
            pub inline fn getEnableToolTips(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).get_EnableToolTips(@as(*const ISystemMonitor2, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowTimeAxisLabels(self: *const T, b_state_: i16) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).put_ShowTimeAxisLabels(@as(*const ISystemMonitor2, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowTimeAxisLabels(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).get_ShowTimeAxisLabels(@as(*const ISystemMonitor2, @ptrCast(self)), pb_state_);
            }
            pub inline fn putChartScroll(self: *const T, b_scroll_: i16) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).put_ChartScroll(@as(*const ISystemMonitor2, @ptrCast(self)), b_scroll_);
            }
            pub inline fn getChartScroll(self: *const T, pb_scroll_: ?*i16) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).get_ChartScroll(@as(*const ISystemMonitor2, @ptrCast(self)), pb_scroll_);
            }
            pub inline fn putDataPointCount(self: *const T, i_new_count_: i32) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).put_DataPointCount(@as(*const ISystemMonitor2, @ptrCast(self)), i_new_count_);
            }
            pub inline fn getDataPointCount(self: *const T, pi_data_point_count_: ?*i32) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).get_DataPointCount(@as(*const ISystemMonitor2, @ptrCast(self)), pi_data_point_count_);
            }
            pub inline fn scaleToFit(self: *const T, b_selected_counters_only_: i16) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).ScaleToFit(@as(*const ISystemMonitor2, @ptrCast(self)), b_selected_counters_only_);
            }
            pub inline fn saveAs(self: *const T, bstr_file_name_: ?BSTR, e_sysmon_file_type_: SysmonFileType) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).SaveAs(@as(*const ISystemMonitor2, @ptrCast(self)), bstr_file_name_, e_sysmon_file_type_);
            }
            pub inline fn relog(self: *const T, bstr_file_name_: ?BSTR, e_sysmon_file_type_: SysmonFileType, i_filter_: i32) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).Relog(@as(*const ISystemMonitor2, @ptrCast(self)), bstr_file_name_, e_sysmon_file_type_, i_filter_);
            }
            pub inline fn clearData(self: *const T) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).ClearData(@as(*const ISystemMonitor2, @ptrCast(self)));
            }
            pub inline fn getLogSourceStartTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).get_LogSourceStartTime(@as(*const ISystemMonitor2, @ptrCast(self)), p_date_);
            }
            pub inline fn getLogSourceStopTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).get_LogSourceStopTime(@as(*const ISystemMonitor2, @ptrCast(self)), p_date_);
            }
            pub inline fn setLogViewRange(self: *const T, start_time_: f64, stop_time_: f64) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).SetLogViewRange(@as(*const ISystemMonitor2, @ptrCast(self)), start_time_, stop_time_);
            }
            pub inline fn getLogViewRange(self: *const T, start_time_: ?*f64, stop_time_: ?*f64) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).GetLogViewRange(@as(*const ISystemMonitor2, @ptrCast(self)), start_time_, stop_time_);
            }
            pub inline fn batchingLock(self: *const T, f_lock_: i16, e_batch_reason_: SysmonBatchReason) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).BatchingLock(@as(*const ISystemMonitor2, @ptrCast(self)), f_lock_, e_batch_reason_);
            }
            pub inline fn loadSettings(self: *const T, bstr_setting_file_name_: ?BSTR) HRESULT {
                return @as(*const ISystemMonitor2.VTable, @ptrCast(self.vtable)).LoadSettings(@as(*const ISystemMonitor2, @ptrCast(self)), bstr_setting_file_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__ISystemMonitorUnion_Value = Guid.initString("c8a77338-265f-4de5-aa25-c7da1ce5a8f4");
pub const IID__ISystemMonitorUnion = &IID__ISystemMonitorUnion_Value;
pub const _ISystemMonitorUnion = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Appearance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            i_appearance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Appearance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            i_appearance: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BorderStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            i_border_style: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BorderStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            i_border_style: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForeColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ForeColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Font: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pp_font: ?*?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Font: *const fn (
            self: *const _ISystemMonitorUnion,
            p_font: ?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Counters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pp_i_counters: ?*?*ICounters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowVerticalGrid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowVerticalGrid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowHorizontalGrid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowHorizontalGrid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowLegend: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowLegend: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowScaleLabels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowScaleLabels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowValueBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowValueBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaximumScale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            i_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaximumScale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinimumScale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            i_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinimumScale: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UpdateInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            f_value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UpdateInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pf_value: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            e_display_type: DisplayTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pe_display_type: ?*DisplayTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ManualUpdate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ManualUpdate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GraphTitle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            bs_title: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GraphTitle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pbs_title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_YAxisLabel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            bs_title: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_YAxisLabel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pbs_title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollectSample: *const fn (
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateGraph: *const fn (
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseCounters: *const fn (
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayProperties: *const fn (
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Counter: *const fn (
            self: *const _ISystemMonitorUnion,
            i_index: i32,
            pp_i_counter: ?*?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCounter: *const fn (
            self: *const _ISystemMonitorUnion,
            bs_path: ?BSTR,
            pp_i_counter: ?*?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCounter: *const fn (
            self: *const _ISystemMonitorUnion,
            p_ctr: ?*ICounterItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColorCtl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColorCtl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            bs_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            bs_file_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogViewStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            start_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogViewStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            start_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogViewStop: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            stop_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogViewStop: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            stop_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GridColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GridColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TimeBarColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TimeBarColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Highlight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Highlight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowToolbar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowToolbar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Paste: *const fn (
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: *const fn (
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReadOnly: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReadOnly: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportValueType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            e_report_value_type: ReportValueTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportValueType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pe_report_value_type: ?*ReportValueTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonitorDuplicateInstances: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonitorDuplicateInstances: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            i_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pi_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogFiles: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pp_i_log_files: ?*?*ILogFiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataSourceType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            e_data_source_type: DataSourceTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataSourceType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pe_data_source_type: ?*DataSourceTypeConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SqlDsnName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            bs_sql_dsn_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SqlDsnName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            bs_sql_dsn_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SqlLogSetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            bs_sql_log_set_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SqlLogSetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            bs_sql_log_set_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableDigitGrouping: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableDigitGrouping: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableToolTips: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableToolTips: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowTimeAxisLabels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowTimeAxisLabels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_state: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ChartScroll: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            b_scroll: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ChartScroll: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pb_scroll: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataPointCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            i_new_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataPointCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            pi_data_point_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleToFit: *const fn (
            self: *const _ISystemMonitorUnion,
            b_selected_counters_only: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAs: *const fn (
            self: *const _ISystemMonitorUnion,
            bstr_file_name: ?BSTR,
            e_sysmon_file_type: SysmonFileType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Relog: *const fn (
            self: *const _ISystemMonitorUnion,
            bstr_file_name: ?BSTR,
            e_sysmon_file_type: SysmonFileType,
            i_filter: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearData: *const fn (
            self: *const _ISystemMonitorUnion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogSourceStartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogSourceStopTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _ISystemMonitorUnion,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLogViewRange: *const fn (
            self: *const _ISystemMonitorUnion,
            start_time: f64,
            stop_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogViewRange: *const fn (
            self: *const _ISystemMonitorUnion,
            start_time: ?*f64,
            stop_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BatchingLock: *const fn (
            self: *const _ISystemMonitorUnion,
            f_lock: i16,
            e_batch_reason: SysmonBatchReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadSettings: *const fn (
            self: *const _ISystemMonitorUnion,
            bstr_setting_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAppearance(self: *const T, i_appearance_: ?*i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_Appearance(@as(*const _ISystemMonitorUnion, @ptrCast(self)), i_appearance_);
            }
            pub inline fn putAppearance(self: *const T, i_appearance_: i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_Appearance(@as(*const _ISystemMonitorUnion, @ptrCast(self)), i_appearance_);
            }
            pub inline fn getBackColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_BackColor(@as(*const _ISystemMonitorUnion, @ptrCast(self)), p_color_);
            }
            pub inline fn putBackColor(self: *const T, color_: u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_BackColor(@as(*const _ISystemMonitorUnion, @ptrCast(self)), color_);
            }
            pub inline fn getBorderStyle(self: *const T, i_border_style_: ?*i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_BorderStyle(@as(*const _ISystemMonitorUnion, @ptrCast(self)), i_border_style_);
            }
            pub inline fn putBorderStyle(self: *const T, i_border_style_: i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_BorderStyle(@as(*const _ISystemMonitorUnion, @ptrCast(self)), i_border_style_);
            }
            pub inline fn getForeColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ForeColor(@as(*const _ISystemMonitorUnion, @ptrCast(self)), p_color_);
            }
            pub inline fn putForeColor(self: *const T, color_: u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ForeColor(@as(*const _ISystemMonitorUnion, @ptrCast(self)), color_);
            }
            pub inline fn getFont(self: *const T, pp_font_: ?*?*IFontDisp) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_Font(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pp_font_);
            }
            pub inline fn putrefFont(self: *const T, p_font_: ?*IFontDisp) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).putref_Font(@as(*const _ISystemMonitorUnion, @ptrCast(self)), p_font_);
            }
            pub inline fn getCounters(self: *const T, pp_i_counters_: ?*?*ICounters) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_Counters(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pp_i_counters_);
            }
            pub inline fn putShowVerticalGrid(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ShowVerticalGrid(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowVerticalGrid(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ShowVerticalGrid(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowHorizontalGrid(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ShowHorizontalGrid(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowHorizontalGrid(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ShowHorizontalGrid(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowLegend(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ShowLegend(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowLegend(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ShowLegend(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowScaleLabels(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ShowScaleLabels(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowScaleLabels(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ShowScaleLabels(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowValueBar(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ShowValueBar(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowValueBar(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ShowValueBar(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putMaximumScale(self: *const T, i_value_: i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_MaximumScale(@as(*const _ISystemMonitorUnion, @ptrCast(self)), i_value_);
            }
            pub inline fn getMaximumScale(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_MaximumScale(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pi_value_);
            }
            pub inline fn putMinimumScale(self: *const T, i_value_: i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_MinimumScale(@as(*const _ISystemMonitorUnion, @ptrCast(self)), i_value_);
            }
            pub inline fn getMinimumScale(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_MinimumScale(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pi_value_);
            }
            pub inline fn putUpdateInterval(self: *const T, f_value_: f32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_UpdateInterval(@as(*const _ISystemMonitorUnion, @ptrCast(self)), f_value_);
            }
            pub inline fn getUpdateInterval(self: *const T, pf_value_: ?*f32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_UpdateInterval(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pf_value_);
            }
            pub inline fn putDisplayType(self: *const T, e_display_type_: DisplayTypeConstants) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_DisplayType(@as(*const _ISystemMonitorUnion, @ptrCast(self)), e_display_type_);
            }
            pub inline fn getDisplayType(self: *const T, pe_display_type_: ?*DisplayTypeConstants) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_DisplayType(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pe_display_type_);
            }
            pub inline fn putManualUpdate(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ManualUpdate(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getManualUpdate(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ManualUpdate(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putGraphTitle(self: *const T, bs_title_: ?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_GraphTitle(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bs_title_);
            }
            pub inline fn getGraphTitle(self: *const T, pbs_title_: ?*?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_GraphTitle(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pbs_title_);
            }
            pub inline fn putYAxisLabel(self: *const T, bs_title_: ?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_YAxisLabel(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bs_title_);
            }
            pub inline fn getYAxisLabel(self: *const T, pbs_title_: ?*?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_YAxisLabel(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pbs_title_);
            }
            pub inline fn collectSample(self: *const T) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).CollectSample(@as(*const _ISystemMonitorUnion, @ptrCast(self)));
            }
            pub inline fn updateGraph(self: *const T) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).UpdateGraph(@as(*const _ISystemMonitorUnion, @ptrCast(self)));
            }
            pub inline fn browseCounters(self: *const T) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).BrowseCounters(@as(*const _ISystemMonitorUnion, @ptrCast(self)));
            }
            pub inline fn displayProperties(self: *const T) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).DisplayProperties(@as(*const _ISystemMonitorUnion, @ptrCast(self)));
            }
            pub inline fn counter(self: *const T, i_index_: i32, pp_i_counter_: ?*?*ICounterItem) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).Counter(@as(*const _ISystemMonitorUnion, @ptrCast(self)), i_index_, pp_i_counter_);
            }
            pub inline fn addCounter(self: *const T, bs_path_: ?BSTR, pp_i_counter_: ?*?*ICounterItem) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).AddCounter(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bs_path_, pp_i_counter_);
            }
            pub inline fn deleteCounter(self: *const T, p_ctr_: ?*ICounterItem) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).DeleteCounter(@as(*const _ISystemMonitorUnion, @ptrCast(self)), p_ctr_);
            }
            pub inline fn getBackColorCtl(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_BackColorCtl(@as(*const _ISystemMonitorUnion, @ptrCast(self)), p_color_);
            }
            pub inline fn putBackColorCtl(self: *const T, color_: u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_BackColorCtl(@as(*const _ISystemMonitorUnion, @ptrCast(self)), color_);
            }
            pub inline fn putLogFileName(self: *const T, bs_file_name_: ?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_LogFileName(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bs_file_name_);
            }
            pub inline fn getLogFileName(self: *const T, bs_file_name_: ?*?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_LogFileName(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bs_file_name_);
            }
            pub inline fn putLogViewStart(self: *const T, start_time_: f64) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_LogViewStart(@as(*const _ISystemMonitorUnion, @ptrCast(self)), start_time_);
            }
            pub inline fn getLogViewStart(self: *const T, start_time_: ?*f64) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_LogViewStart(@as(*const _ISystemMonitorUnion, @ptrCast(self)), start_time_);
            }
            pub inline fn putLogViewStop(self: *const T, stop_time_: f64) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_LogViewStop(@as(*const _ISystemMonitorUnion, @ptrCast(self)), stop_time_);
            }
            pub inline fn getLogViewStop(self: *const T, stop_time_: ?*f64) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_LogViewStop(@as(*const _ISystemMonitorUnion, @ptrCast(self)), stop_time_);
            }
            pub inline fn getGridColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_GridColor(@as(*const _ISystemMonitorUnion, @ptrCast(self)), p_color_);
            }
            pub inline fn putGridColor(self: *const T, color_: u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_GridColor(@as(*const _ISystemMonitorUnion, @ptrCast(self)), color_);
            }
            pub inline fn getTimeBarColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_TimeBarColor(@as(*const _ISystemMonitorUnion, @ptrCast(self)), p_color_);
            }
            pub inline fn putTimeBarColor(self: *const T, color_: u32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_TimeBarColor(@as(*const _ISystemMonitorUnion, @ptrCast(self)), color_);
            }
            pub inline fn getHighlight(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_Highlight(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putHighlight(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_Highlight(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowToolbar(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ShowToolbar(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowToolbar(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ShowToolbar(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn paste(self: *const T) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).Paste(@as(*const _ISystemMonitorUnion, @ptrCast(self)));
            }
            pub inline fn copy(self: *const T) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).Copy(@as(*const _ISystemMonitorUnion, @ptrCast(self)));
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).Reset(@as(*const _ISystemMonitorUnion, @ptrCast(self)));
            }
            pub inline fn putReadOnly(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ReadOnly(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getReadOnly(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ReadOnly(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putReportValueType(self: *const T, e_report_value_type_: ReportValueTypeConstants) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ReportValueType(@as(*const _ISystemMonitorUnion, @ptrCast(self)), e_report_value_type_);
            }
            pub inline fn getReportValueType(self: *const T, pe_report_value_type_: ?*ReportValueTypeConstants) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ReportValueType(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pe_report_value_type_);
            }
            pub inline fn putMonitorDuplicateInstances(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_MonitorDuplicateInstances(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getMonitorDuplicateInstances(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_MonitorDuplicateInstances(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putDisplayFilter(self: *const T, i_value_: i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_DisplayFilter(@as(*const _ISystemMonitorUnion, @ptrCast(self)), i_value_);
            }
            pub inline fn getDisplayFilter(self: *const T, pi_value_: ?*i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_DisplayFilter(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pi_value_);
            }
            pub inline fn getLogFiles(self: *const T, pp_i_log_files_: ?*?*ILogFiles) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_LogFiles(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pp_i_log_files_);
            }
            pub inline fn putDataSourceType(self: *const T, e_data_source_type_: DataSourceTypeConstants) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_DataSourceType(@as(*const _ISystemMonitorUnion, @ptrCast(self)), e_data_source_type_);
            }
            pub inline fn getDataSourceType(self: *const T, pe_data_source_type_: ?*DataSourceTypeConstants) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_DataSourceType(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pe_data_source_type_);
            }
            pub inline fn putSqlDsnName(self: *const T, bs_sql_dsn_name_: ?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_SqlDsnName(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bs_sql_dsn_name_);
            }
            pub inline fn getSqlDsnName(self: *const T, bs_sql_dsn_name_: ?*?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_SqlDsnName(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bs_sql_dsn_name_);
            }
            pub inline fn putSqlLogSetName(self: *const T, bs_sql_log_set_name_: ?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_SqlLogSetName(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bs_sql_log_set_name_);
            }
            pub inline fn getSqlLogSetName(self: *const T, bs_sql_log_set_name_: ?*?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_SqlLogSetName(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bs_sql_log_set_name_);
            }
            pub inline fn putEnableDigitGrouping(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_EnableDigitGrouping(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getEnableDigitGrouping(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_EnableDigitGrouping(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putEnableToolTips(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_EnableToolTips(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getEnableToolTips(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_EnableToolTips(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putShowTimeAxisLabels(self: *const T, b_state_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ShowTimeAxisLabels(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_state_);
            }
            pub inline fn getShowTimeAxisLabels(self: *const T, pb_state_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ShowTimeAxisLabels(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_state_);
            }
            pub inline fn putChartScroll(self: *const T, b_scroll_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_ChartScroll(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_scroll_);
            }
            pub inline fn getChartScroll(self: *const T, pb_scroll_: ?*i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_ChartScroll(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pb_scroll_);
            }
            pub inline fn putDataPointCount(self: *const T, i_new_count_: i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).put_DataPointCount(@as(*const _ISystemMonitorUnion, @ptrCast(self)), i_new_count_);
            }
            pub inline fn getDataPointCount(self: *const T, pi_data_point_count_: ?*i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_DataPointCount(@as(*const _ISystemMonitorUnion, @ptrCast(self)), pi_data_point_count_);
            }
            pub inline fn scaleToFit(self: *const T, b_selected_counters_only_: i16) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).ScaleToFit(@as(*const _ISystemMonitorUnion, @ptrCast(self)), b_selected_counters_only_);
            }
            pub inline fn saveAs(self: *const T, bstr_file_name_: ?BSTR, e_sysmon_file_type_: SysmonFileType) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).SaveAs(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bstr_file_name_, e_sysmon_file_type_);
            }
            pub inline fn relog(self: *const T, bstr_file_name_: ?BSTR, e_sysmon_file_type_: SysmonFileType, i_filter_: i32) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).Relog(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bstr_file_name_, e_sysmon_file_type_, i_filter_);
            }
            pub inline fn clearData(self: *const T) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).ClearData(@as(*const _ISystemMonitorUnion, @ptrCast(self)));
            }
            pub inline fn getLogSourceStartTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_LogSourceStartTime(@as(*const _ISystemMonitorUnion, @ptrCast(self)), p_date_);
            }
            pub inline fn getLogSourceStopTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).get_LogSourceStopTime(@as(*const _ISystemMonitorUnion, @ptrCast(self)), p_date_);
            }
            pub inline fn setLogViewRange(self: *const T, start_time_: f64, stop_time_: f64) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).SetLogViewRange(@as(*const _ISystemMonitorUnion, @ptrCast(self)), start_time_, stop_time_);
            }
            pub inline fn getLogViewRange(self: *const T, start_time_: ?*f64, stop_time_: ?*f64) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).GetLogViewRange(@as(*const _ISystemMonitorUnion, @ptrCast(self)), start_time_, stop_time_);
            }
            pub inline fn batchingLock(self: *const T, f_lock_: i16, e_batch_reason_: SysmonBatchReason) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).BatchingLock(@as(*const _ISystemMonitorUnion, @ptrCast(self)), f_lock_, e_batch_reason_);
            }
            pub inline fn loadSettings(self: *const T, bstr_setting_file_name_: ?BSTR) HRESULT {
                return @as(*const _ISystemMonitorUnion.VTable, @ptrCast(self.vtable)).LoadSettings(@as(*const _ISystemMonitorUnion, @ptrCast(self)), bstr_setting_file_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DISystemMonitor_Value = Guid.initString("13d73d81-c32e-11cf-9398-00aa00a3ddea");
pub const IID_DISystemMonitor = &IID_DISystemMonitor_Value;
pub const DISystemMonitor = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DISystemMonitorInternal_Value = Guid.initString("194eb242-c32c-11cf-9398-00aa00a3ddea");
pub const IID_DISystemMonitorInternal = &IID_DISystemMonitorInternal_Value;
pub const DISystemMonitorInternal = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISystemMonitorEvents_Value = Guid.initString("ee660ea0-4abd-11cf-943a-008029004347");
pub const IID_ISystemMonitorEvents = &IID_ISystemMonitorEvents_Value;
pub const ISystemMonitorEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCounterSelected: *const fn (
            self: *const ISystemMonitorEvents,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnCounterAdded: *const fn (
            self: *const ISystemMonitorEvents,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnCounterDeleted: *const fn (
            self: *const ISystemMonitorEvents,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnSampleCollected: *const fn (
            self: *const ISystemMonitorEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnDblClick: *const fn (
            self: *const ISystemMonitorEvents,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onCounterSelected(self: *const T, index_: i32) void {
                return @as(*const ISystemMonitorEvents.VTable, @ptrCast(self.vtable)).OnCounterSelected(@as(*const ISystemMonitorEvents, @ptrCast(self)), index_);
            }
            pub inline fn onCounterAdded(self: *const T, index_: i32) void {
                return @as(*const ISystemMonitorEvents.VTable, @ptrCast(self.vtable)).OnCounterAdded(@as(*const ISystemMonitorEvents, @ptrCast(self)), index_);
            }
            pub inline fn onCounterDeleted(self: *const T, index_: i32) void {
                return @as(*const ISystemMonitorEvents.VTable, @ptrCast(self.vtable)).OnCounterDeleted(@as(*const ISystemMonitorEvents, @ptrCast(self)), index_);
            }
            pub inline fn onSampleCollected(self: *const T) void {
                return @as(*const ISystemMonitorEvents.VTable, @ptrCast(self.vtable)).OnSampleCollected(@as(*const ISystemMonitorEvents, @ptrCast(self)));
            }
            pub inline fn onDblClick(self: *const T, index_: i32) void {
                return @as(*const ISystemMonitorEvents.VTable, @ptrCast(self.vtable)).OnDblClick(@as(*const ISystemMonitorEvents, @ptrCast(self)), index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DISystemMonitorEvents_Value = Guid.initString("84979930-4ab3-11cf-943a-008029004347");
pub const IID_DISystemMonitorEvents = &IID_DISystemMonitorEvents_Value;
pub const DISystemMonitorEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PERF_OBJECT_TYPE = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        TotalByteLength: u32,
        DefinitionLength: u32,
        HeaderLength: u32,
        ObjectNameTitleIndex: u32,
        ObjectNameTitle: u32,
        ObjectHelpTitleIndex: u32,
        ObjectHelpTitle: u32,
        DetailLevel: u32,
        NumCounters: u32,
        DefaultCounter: i32,
        NumInstances: i32,
        CodePage: u32,
        PerfTime: LARGE_INTEGER,
        PerfFreq: LARGE_INTEGER,
    },
    .X86 => extern struct {
        TotalByteLength: u32,
        DefinitionLength: u32,
        HeaderLength: u32,
        ObjectNameTitleIndex: u32,
        ObjectNameTitle: ?PWSTR,
        ObjectHelpTitleIndex: u32,
        ObjectHelpTitle: ?PWSTR,
        DetailLevel: u32,
        NumCounters: u32,
        DefaultCounter: i32,
        NumInstances: i32,
        CodePage: u32,
        PerfTime: LARGE_INTEGER,
        PerfFreq: LARGE_INTEGER,
    },
};
pub const PERF_COUNTER_DEFINITION = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        ByteLength: u32,
        CounterNameTitleIndex: u32,
        CounterNameTitle: u32,
        CounterHelpTitleIndex: u32,
        CounterHelpTitle: u32,
        DefaultScale: i32,
        DetailLevel: u32,
        CounterType: u32,
        CounterSize: u32,
        CounterOffset: u32,
    },
    .X86 => extern struct {
        ByteLength: u32,
        CounterNameTitleIndex: u32,
        CounterNameTitle: ?PWSTR,
        CounterHelpTitleIndex: u32,
        CounterHelpTitle: ?PWSTR,
        DefaultScale: i32,
        DetailLevel: u32,
        CounterType: u32,
        CounterSize: u32,
        CounterOffset: u32,
    },
};

//--------------------------------------------------------------------------------
// Section: Functions (135)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn QueryPerformanceCounter(
    lp_performance_count: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn QueryPerformanceFrequency(
    lp_frequency: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "loadperf" fn InstallPerfDllW(
    sz_computer_name: ?[*:0]const u16,
    lp_ini_file: ?[*:0]const u16,
    dw_flags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn InstallPerfDllA(
    sz_computer_name: ?[*:0]const u8,
    lp_ini_file: ?[*:0]const u8,
    dw_flags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn LoadPerfCounterTextStringsA(
    lp_command_line: ?PSTR,
    b_quiet_mode_arg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn LoadPerfCounterTextStringsW(
    lp_command_line: ?PWSTR,
    b_quiet_mode_arg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn UnloadPerfCounterTextStringsW(
    lp_command_line: ?PWSTR,
    b_quiet_mode_arg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "loadperf" fn UnloadPerfCounterTextStringsA(
    lp_command_line: ?PSTR,
    b_quiet_mode_arg: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn UpdatePerfNameFilesA(
    sz_new_ctr_file_path: ?[*:0]const u8,
    sz_new_hlp_file_path: ?[*:0]const u8,
    sz_language_i_d: ?PSTR,
    dw_flags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn UpdatePerfNameFilesW(
    sz_new_ctr_file_path: ?[*:0]const u16,
    sz_new_hlp_file_path: ?[*:0]const u16,
    sz_language_i_d: ?PWSTR,
    dw_flags: usize,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn SetServiceAsTrustedA(
    sz_reserved: ?[*:0]const u8,
    sz_service_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn SetServiceAsTrustedW(
    sz_reserved: ?[*:0]const u16,
    sz_service_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn BackupPerfRegistryToFileW(
    sz_file_name: ?[*:0]const u16,
    sz_comment_string: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "loadperf" fn RestorePerfRegistryFromFileW(
    sz_file_name: ?[*:0]const u16,
    sz_lang_id: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfStartProvider(
    provider_guid: ?*Guid,
    control_callback: ?PERFLIBREQUEST,
    ph_provider: ?*PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfStartProviderEx(
    provider_guid: ?*Guid,
    provider_context: ?*PERF_PROVIDER_CONTEXT,
    provider: ?*PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfStopProvider(
    provider_handle: PerfProviderHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfSetCounterSetInfo(
    provider_handle: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    template: ?*PERF_COUNTERSET_INFO,
    template_size: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfCreateInstance(
    provider_handle: PerfProviderHandle,
    counter_set_guid: ?*const Guid,
    name: ?[*:0]const u16,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) ?*PERF_COUNTERSET_INSTANCE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfDeleteInstance(
    provider: PerfProviderHandle,
    instance_block: ?*PERF_COUNTERSET_INSTANCE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfQueryInstance(
    provider_handle: ?HANDLE,
    counter_set_guid: ?*const Guid,
    name: ?[*:0]const u16,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) ?*PERF_COUNTERSET_INSTANCE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfSetCounterRefValue(
    provider: ?HANDLE,
    instance: ?*PERF_COUNTERSET_INSTANCE,
    counter_id: u32,
    address: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfSetULongCounterValue(
    provider: ?HANDLE,
    instance: ?*PERF_COUNTERSET_INSTANCE,
    counter_id: u32,
    value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfSetULongLongCounterValue(
    provider: ?HANDLE,
    instance: ?*PERF_COUNTERSET_INSTANCE,
    counter_id: u32,
    value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfIncrementULongCounterValue(
    provider: ?HANDLE,
    instance: ?*PERF_COUNTERSET_INSTANCE,
    counter_id: u32,
    value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfIncrementULongLongCounterValue(
    provider: ?HANDLE,
    instance: ?*PERF_COUNTERSET_INSTANCE,
    counter_id: u32,
    value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfDecrementULongCounterValue(
    provider: ?HANDLE,
    instance: ?*PERF_COUNTERSET_INSTANCE,
    counter_id: u32,
    value: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn PerfDecrementULongLongCounterValue(
    provider: ?HANDLE,
    instance: ?*PERF_COUNTERSET_INSTANCE,
    counter_id: u32,
    value: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "advapi32" fn PerfEnumerateCounterSet(
    sz_machine: ?[*:0]const u16,
    p_counter_set_ids: ?[*]Guid,
    c_counter_set_ids: u32,
    pc_counter_set_ids_actual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "advapi32" fn PerfEnumerateCounterSetInstances(
    sz_machine: ?[*:0]const u16,
    p_counter_set_id: ?*const Guid,
    // TODO: what to do with BytesParamIndex 3?
    p_instances: ?*PERF_INSTANCE_HEADER,
    cb_instances: u32,
    pcb_instances_actual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "advapi32" fn PerfQueryCounterSetRegistrationInfo(
    sz_machine: ?[*:0]const u16,
    p_counter_set_id: ?*const Guid,
    request_code: PerfRegInfoType,
    request_lang_id: u32,
    // TODO: what to do with BytesParamIndex 5?
    pb_reg_info: ?*u8,
    cb_reg_info: u32,
    pcb_reg_info_actual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "advapi32" fn PerfOpenQueryHandle(
    sz_machine: ?[*:0]const u16,
    ph_query: ?*PerfQueryHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "advapi32" fn PerfCloseQueryHandle(
    h_query: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "advapi32" fn PerfQueryCounterInfo(
    h_query: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    p_counters: ?*PERF_COUNTER_IDENTIFIER,
    cb_counters: u32,
    pcb_counters_actual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "advapi32" fn PerfQueryCounterData(
    h_query: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    p_counter_block: ?*PERF_DATA_HEADER,
    cb_counter_block: u32,
    pcb_counter_block_actual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "advapi32" fn PerfAddCounters(
    h_query: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    p_counters: ?*PERF_COUNTER_IDENTIFIER,
    cb_counters: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.14393'
pub extern "advapi32" fn PerfDeleteCounters(
    h_query: PerfQueryHandle,
    // TODO: what to do with BytesParamIndex 2?
    p_counters: ?*PERF_COUNTER_IDENTIFIER,
    cb_counters: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDllVersion(
    lpdw_version: ?*PDH_DLL_VERSION,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenQueryW(
    sz_data_source: ?[*:0]const u16,
    dw_user_data: usize,
    ph_query: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenQueryA(
    sz_data_source: ?[*:0]const u8,
    dw_user_data: usize,
    ph_query: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhAddCounterW(
    h_query: isize,
    sz_full_counter_path: ?[*:0]const u16,
    dw_user_data: usize,
    ph_counter: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhAddCounterA(
    h_query: isize,
    sz_full_counter_path: ?[*:0]const u8,
    dw_user_data: usize,
    ph_counter: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhAddEnglishCounterW(
    h_query: isize,
    sz_full_counter_path: ?[*:0]const u16,
    dw_user_data: usize,
    ph_counter: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhAddEnglishCounterA(
    h_query: isize,
    sz_full_counter_path: ?[*:0]const u8,
    dw_user_data: usize,
    ph_counter: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhCollectQueryDataWithTime(
    h_query: isize,
    pll_time_stamp: ?*i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhValidatePathExW(
    h_data_source: isize,
    sz_full_path_buffer: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "pdh" fn PdhValidatePathExA(
    h_data_source: isize,
    sz_full_path_buffer: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhRemoveCounter(
    h_counter: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCollectQueryData(
    h_query: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCloseQuery(
    h_query: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetFormattedCounterValue(
    h_counter: isize,
    dw_format: PDH_FMT,
    lpdw_type: ?*u32,
    p_value: ?*PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetFormattedCounterArrayA(
    h_counter: isize,
    dw_format: PDH_FMT,
    lpdw_buffer_size: ?*u32,
    lpdw_item_count: ?*u32,
    item_buffer: ?*PDH_FMT_COUNTERVALUE_ITEM_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetFormattedCounterArrayW(
    h_counter: isize,
    dw_format: PDH_FMT,
    lpdw_buffer_size: ?*u32,
    lpdw_item_count: ?*u32,
    item_buffer: ?*PDH_FMT_COUNTERVALUE_ITEM_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetRawCounterValue(
    h_counter: isize,
    lpdw_type: ?*u32,
    p_value: ?*PDH_RAW_COUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetRawCounterArrayA(
    h_counter: isize,
    lpdw_buffer_size: ?*u32,
    lpdw_item_count: ?*u32,
    item_buffer: ?*PDH_RAW_COUNTER_ITEM_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetRawCounterArrayW(
    h_counter: isize,
    lpdw_buffer_size: ?*u32,
    lpdw_item_count: ?*u32,
    item_buffer: ?*PDH_RAW_COUNTER_ITEM_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCalculateCounterFromRawValue(
    h_counter: isize,
    dw_format: PDH_FMT,
    raw_value1: ?*PDH_RAW_COUNTER,
    raw_value2: ?*PDH_RAW_COUNTER,
    fmt_value: ?*PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhComputeCounterStatistics(
    h_counter: isize,
    dw_format: PDH_FMT,
    dw_first_entry: u32,
    dw_num_entries: u32,
    lp_raw_value_array: ?*PDH_RAW_COUNTER,
    data: ?*PDH_STATISTICS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetCounterInfoW(
    h_counter: isize,
    b_retrieve_explain_text: BOOLEAN,
    pdw_buffer_size: ?*u32,
    lp_buffer: ?*PDH_COUNTER_INFO_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetCounterInfoA(
    h_counter: isize,
    b_retrieve_explain_text: BOOLEAN,
    pdw_buffer_size: ?*u32,
    lp_buffer: ?*PDH_COUNTER_INFO_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSetCounterScaleFactor(
    h_counter: isize,
    l_factor: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhConnectMachineW(
    sz_machine_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhConnectMachineA(
    sz_machine_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesW(
    sz_data_source: ?[*:0]const u16,
    msz_machine_list: ?[*]u16,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesA(
    sz_data_source: ?[*:0]const u8,
    msz_machine_list: ?[*]u8,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsW(
    sz_data_source: ?[*:0]const u16,
    sz_machine_name: ?[*:0]const u16,
    msz_object_list: ?[*]u16,
    pcch_buffer_size: ?*u32,
    dw_detail_level: PERF_DETAIL,
    b_refresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsA(
    sz_data_source: ?[*:0]const u8,
    sz_machine_name: ?[*:0]const u8,
    msz_object_list: ?[*]u8,
    pcch_buffer_size: ?*u32,
    dw_detail_level: PERF_DETAIL,
    b_refresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsW(
    sz_data_source: ?[*:0]const u16,
    sz_machine_name: ?[*:0]const u16,
    sz_object_name: ?[*:0]const u16,
    msz_counter_list: ?[*]u16,
    pcch_counter_list_length: ?*u32,
    msz_instance_list: ?[*]u16,
    pcch_instance_list_length: ?*u32,
    dw_detail_level: PERF_DETAIL,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsA(
    sz_data_source: ?[*:0]const u8,
    sz_machine_name: ?[*:0]const u8,
    sz_object_name: ?[*:0]const u8,
    msz_counter_list: ?[*]u8,
    pcch_counter_list_length: ?*u32,
    msz_instance_list: ?[*]u8,
    pcch_instance_list_length: ?*u32,
    dw_detail_level: PERF_DETAIL,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhMakeCounterPathW(
    p_counter_path_elements: ?*PDH_COUNTER_PATH_ELEMENTS_W,
    sz_full_path_buffer: ?PWSTR,
    pcch_buffer_size: ?*u32,
    dw_flags: PDH_PATH_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhMakeCounterPathA(
    p_counter_path_elements: ?*PDH_COUNTER_PATH_ELEMENTS_A,
    sz_full_path_buffer: ?PSTR,
    pcch_buffer_size: ?*u32,
    dw_flags: PDH_PATH_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseCounterPathW(
    sz_full_path_buffer: ?[*:0]const u16,
    p_counter_path_elements: ?*PDH_COUNTER_PATH_ELEMENTS_W,
    pdw_buffer_size: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseCounterPathA(
    sz_full_path_buffer: ?[*:0]const u8,
    p_counter_path_elements: ?*PDH_COUNTER_PATH_ELEMENTS_A,
    pdw_buffer_size: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseInstanceNameW(
    sz_instance_string: ?[*:0]const u16,
    sz_instance_name: ?PWSTR,
    pcch_instance_name_length: ?*u32,
    sz_parent_name: ?PWSTR,
    pcch_parent_name_length: ?*u32,
    lp_index: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhParseInstanceNameA(
    sz_instance_string: ?[*:0]const u8,
    sz_instance_name: ?PSTR,
    pcch_instance_name_length: ?*u32,
    sz_parent_name: ?PSTR,
    pcch_parent_name_length: ?*u32,
    lp_index: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhValidatePathW(
    sz_full_path_buffer: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhValidatePathA(
    sz_full_path_buffer: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectW(
    sz_data_source: ?[*:0]const u16,
    sz_machine_name: ?[*:0]const u16,
    sz_default_object_name: ?PWSTR,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectA(
    sz_data_source: ?[*:0]const u8,
    sz_machine_name: ?[*:0]const u8,
    sz_default_object_name: ?PSTR,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterW(
    sz_data_source: ?[*:0]const u16,
    sz_machine_name: ?[*:0]const u16,
    sz_object_name: ?[*:0]const u16,
    sz_default_counter_name: ?PWSTR,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterA(
    sz_data_source: ?[*:0]const u8,
    sz_machine_name: ?[*:0]const u8,
    sz_object_name: ?[*:0]const u8,
    sz_default_counter_name: ?PSTR,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersW(
    p_browse_dlg_data: ?*PDH_BROWSE_DLG_CONFIG_W,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersA(
    p_browse_dlg_data: ?*PDH_BROWSE_DLG_CONFIG_A,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandCounterPathW(
    sz_wild_card_path: ?[*:0]const u16,
    msz_expanded_path_list: ?[*]u16,
    pcch_path_list_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandCounterPathA(
    sz_wild_card_path: ?[*:0]const u8,
    msz_expanded_path_list: ?[*]u8,
    pcch_path_list_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfNameByIndexW(
    sz_machine_name: ?[*:0]const u16,
    dw_name_index: u32,
    sz_name_buffer: ?PWSTR,
    pcch_name_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfNameByIndexA(
    sz_machine_name: ?[*:0]const u8,
    dw_name_index: u32,
    sz_name_buffer: ?PSTR,
    pcch_name_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfIndexByNameW(
    sz_machine_name: ?[*:0]const u16,
    sz_name_buffer: ?[*:0]const u16,
    pdw_index: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhLookupPerfIndexByNameA(
    sz_machine_name: ?[*:0]const u8,
    sz_name_buffer: ?[*:0]const u8,
    pdw_index: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathA(
    sz_data_source: ?[*:0]const u8,
    sz_wild_card_path: ?[*:0]const u8,
    msz_expanded_path_list: ?[*]u8,
    pcch_path_list_length: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathW(
    sz_data_source: ?[*:0]const u16,
    sz_wild_card_path: ?[*:0]const u16,
    msz_expanded_path_list: ?[*]u16,
    pcch_path_list_length: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenLogW(
    sz_log_file_name: ?[*:0]const u16,
    dw_access_flags: PDH_LOG,
    lpdw_log_type: ?*PDH_LOG_TYPE,
    h_query: isize,
    dw_max_size: u32,
    sz_user_caption: ?[*:0]const u16,
    ph_log: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenLogA(
    sz_log_file_name: ?[*:0]const u8,
    dw_access_flags: PDH_LOG,
    lpdw_log_type: ?*PDH_LOG_TYPE,
    h_query: isize,
    dw_max_size: u32,
    sz_user_caption: ?[*:0]const u8,
    ph_log: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhUpdateLogW(
    h_log: isize,
    sz_user_string: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhUpdateLogA(
    h_log: isize,
    sz_user_string: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhUpdateLogFileCatalog(
    h_log: isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetLogFileSize(
    h_log: isize,
    ll_size: ?*i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCloseLog(
    h_log: isize,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSelectDataSourceW(
    h_wnd_owner: ?HWND,
    dw_flags: PDH_SELECT_DATA_SOURCE_FLAGS,
    sz_data_source: ?PWSTR,
    pcch_buffer_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSelectDataSourceA(
    h_wnd_owner: ?HWND,
    dw_flags: PDH_SELECT_DATA_SOURCE_FLAGS,
    sz_data_source: ?PSTR,
    pcch_buffer_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhIsRealTimeQuery(
    h_query: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSetQueryTimeRange(
    h_query: isize,
    p_info: ?*PDH_TIME_INFO,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDataSourceTimeRangeW(
    sz_data_source: ?[*:0]const u16,
    pdw_num_entries: ?*u32,
    p_info: ?*PDH_TIME_INFO,
    pdw_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDataSourceTimeRangeA(
    sz_data_source: ?[*:0]const u8,
    pdw_num_entries: ?*u32,
    p_info: ?*PDH_TIME_INFO,
    pdw_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhCollectQueryDataEx(
    h_query: isize,
    dw_interval_time: u32,
    h_new_data_event: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhFormatFromRawValue(
    dw_counter_type: u32,
    dw_format: PDH_FMT,
    p_time_base: ?*i64,
    p_raw_value1: ?*PDH_RAW_COUNTER,
    p_raw_value2: ?*PDH_RAW_COUNTER,
    p_fmt_value: ?*PDH_FMT_COUNTERVALUE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetCounterTimeBase(
    h_counter: isize,
    p_time_base: ?*i64,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhReadRawLogRecord(
    h_log: isize,
    ft_record: FILETIME,
    p_raw_log_record: ?*PDH_RAW_LOG_RECORD,
    pdw_buffer_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhSetDefaultRealTimeDataSource(
    dw_data_source_id: REAL_TIME_DATA_SOURCE_ID_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBindInputDataSourceW(
    ph_data_source: ?*isize,
    log_file_name_list: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBindInputDataSourceA(
    ph_data_source: ?*isize,
    log_file_name_list: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhOpenQueryH(
    h_data_source: isize,
    dw_user_data: usize,
    ph_query: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesHW(
    h_data_source: isize,
    msz_machine_list: ?[*]u16,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumMachinesHA(
    h_data_source: isize,
    msz_machine_list: ?[*]u8,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsHW(
    h_data_source: isize,
    sz_machine_name: ?[*:0]const u16,
    msz_object_list: ?[*]u16,
    pcch_buffer_size: ?*u32,
    dw_detail_level: PERF_DETAIL,
    b_refresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectsHA(
    h_data_source: isize,
    sz_machine_name: ?[*:0]const u8,
    msz_object_list: ?[*]u8,
    pcch_buffer_size: ?*u32,
    dw_detail_level: PERF_DETAIL,
    b_refresh: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsHW(
    h_data_source: isize,
    sz_machine_name: ?[*:0]const u16,
    sz_object_name: ?[*:0]const u16,
    msz_counter_list: ?[*]u16,
    pcch_counter_list_length: ?*u32,
    msz_instance_list: ?[*]u16,
    pcch_instance_list_length: ?*u32,
    dw_detail_level: PERF_DETAIL,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumObjectItemsHA(
    h_data_source: isize,
    sz_machine_name: ?[*:0]const u8,
    sz_object_name: ?[*:0]const u8,
    msz_counter_list: ?[*]u8,
    pcch_counter_list_length: ?*u32,
    msz_instance_list: ?[*]u8,
    pcch_instance_list_length: ?*u32,
    dw_detail_level: PERF_DETAIL,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathHW(
    h_data_source: isize,
    sz_wild_card_path: ?[*:0]const u16,
    msz_expanded_path_list: ?[*]u16,
    pcch_path_list_length: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhExpandWildCardPathHA(
    h_data_source: isize,
    sz_wild_card_path: ?[*:0]const u8,
    msz_expanded_path_list: ?[*]u8,
    pcch_path_list_length: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDataSourceTimeRangeH(
    h_data_source: isize,
    pdw_num_entries: ?*u32,
    p_info: ?*PDH_TIME_INFO,
    pdw_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectHW(
    h_data_source: isize,
    sz_machine_name: ?[*:0]const u16,
    sz_default_object_name: ?PWSTR,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfObjectHA(
    h_data_source: isize,
    sz_machine_name: ?[*:0]const u8,
    sz_default_object_name: ?PSTR,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterHW(
    h_data_source: isize,
    sz_machine_name: ?[*:0]const u16,
    sz_object_name: ?[*:0]const u16,
    sz_default_counter_name: ?PWSTR,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhGetDefaultPerfCounterHA(
    h_data_source: isize,
    sz_machine_name: ?[*:0]const u8,
    sz_object_name: ?[*:0]const u8,
    sz_default_counter_name: ?PSTR,
    pcch_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersHW(
    p_browse_dlg_data: ?*PDH_BROWSE_DLG_CONFIG_HW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhBrowseCountersHA(
    p_browse_dlg_data: ?*PDH_BROWSE_DLG_CONFIG_HA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhVerifySQLDBW(
    sz_data_source: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhVerifySQLDBA(
    sz_data_source: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhCreateSQLTablesW(
    sz_data_source: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhCreateSQLTablesA(
    sz_data_source: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumLogSetNamesW(
    sz_data_source: ?[*:0]const u16,
    msz_data_set_name_list: ?[*]u16,
    pcch_buffer_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "pdh" fn PdhEnumLogSetNamesA(
    sz_data_source: ?[*:0]const u8,
    msz_data_set_name_list: ?[*]u8,
    pcch_buffer_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhGetLogSetGUID(
    h_log: isize,
    p_guid: ?*Guid,
    p_run_id: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "pdh" fn PdhSetLogSetRunID(
    h_log: isize,
    run_id: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (50)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const PDH_RAW_COUNTER_ITEM_ = thismodule.PDH_RAW_COUNTER_ITEM_A;
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = thismodule.PDH_FMT_COUNTERVALUE_ITEM_A;
        pub const PDH_COUNTER_PATH_ELEMENTS_ = thismodule.PDH_COUNTER_PATH_ELEMENTS_A;
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = thismodule.PDH_DATA_ITEM_PATH_ELEMENTS_A;
        pub const PDH_COUNTER_INFO_ = thismodule.PDH_COUNTER_INFO_A;
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = thismodule.PDH_LOG_SERVICE_QUERY_INFO_A;
        pub const PDH_BROWSE_DLG_CONFIG_H = thismodule.PDH_BROWSE_DLG_CONFIG_HA;
        pub const PDH_BROWSE_DLG_CONFIG_ = thismodule.PDH_BROWSE_DLG_CONFIG_A;
        pub const InstallPerfDll = thismodule.InstallPerfDllA;
        pub const LoadPerfCounterTextStrings = thismodule.LoadPerfCounterTextStringsA;
        pub const UnloadPerfCounterTextStrings = thismodule.UnloadPerfCounterTextStringsA;
        pub const UpdatePerfNameFiles = thismodule.UpdatePerfNameFilesA;
        pub const SetServiceAsTrusted = thismodule.SetServiceAsTrustedA;
        pub const PdhOpenQuery = thismodule.PdhOpenQueryA;
        pub const PdhAddCounter = thismodule.PdhAddCounterA;
        pub const PdhAddEnglishCounter = thismodule.PdhAddEnglishCounterA;
        pub const PdhValidatePathEx = thismodule.PdhValidatePathExA;
        pub const PdhGetFormattedCounterArray = thismodule.PdhGetFormattedCounterArrayA;
        pub const PdhGetRawCounterArray = thismodule.PdhGetRawCounterArrayA;
        pub const PdhGetCounterInfo = thismodule.PdhGetCounterInfoA;
        pub const PdhConnectMachine = thismodule.PdhConnectMachineA;
        pub const PdhEnumMachines = thismodule.PdhEnumMachinesA;
        pub const PdhEnumObjects = thismodule.PdhEnumObjectsA;
        pub const PdhEnumObjectItems = thismodule.PdhEnumObjectItemsA;
        pub const PdhMakeCounterPath = thismodule.PdhMakeCounterPathA;
        pub const PdhParseCounterPath = thismodule.PdhParseCounterPathA;
        pub const PdhParseInstanceName = thismodule.PdhParseInstanceNameA;
        pub const PdhValidatePath = thismodule.PdhValidatePathA;
        pub const PdhGetDefaultPerfObject = thismodule.PdhGetDefaultPerfObjectA;
        pub const PdhGetDefaultPerfCounter = thismodule.PdhGetDefaultPerfCounterA;
        pub const PdhBrowseCounters = thismodule.PdhBrowseCountersA;
        pub const PdhExpandCounterPath = thismodule.PdhExpandCounterPathA;
        pub const PdhLookupPerfNameByIndex = thismodule.PdhLookupPerfNameByIndexA;
        pub const PdhLookupPerfIndexByName = thismodule.PdhLookupPerfIndexByNameA;
        pub const PdhExpandWildCardPath = thismodule.PdhExpandWildCardPathA;
        pub const PdhOpenLog = thismodule.PdhOpenLogA;
        pub const PdhUpdateLog = thismodule.PdhUpdateLogA;
        pub const PdhSelectDataSource = thismodule.PdhSelectDataSourceA;
        pub const PdhGetDataSourceTimeRange = thismodule.PdhGetDataSourceTimeRangeA;
        pub const PdhBindInputDataSource = thismodule.PdhBindInputDataSourceA;
        pub const PdhEnumMachinesH = thismodule.PdhEnumMachinesHA;
        pub const PdhEnumObjectsH = thismodule.PdhEnumObjectsHA;
        pub const PdhEnumObjectItemsH = thismodule.PdhEnumObjectItemsHA;
        pub const PdhExpandWildCardPathH = thismodule.PdhExpandWildCardPathHA;
        pub const PdhGetDefaultPerfObjectH = thismodule.PdhGetDefaultPerfObjectHA;
        pub const PdhGetDefaultPerfCounterH = thismodule.PdhGetDefaultPerfCounterHA;
        pub const PdhBrowseCountersH = thismodule.PdhBrowseCountersHA;
        pub const PdhVerifySQLDB = thismodule.PdhVerifySQLDBA;
        pub const PdhCreateSQLTables = thismodule.PdhCreateSQLTablesA;
        pub const PdhEnumLogSetNames = thismodule.PdhEnumLogSetNamesA;
    },
    .wide => struct {
        pub const PDH_RAW_COUNTER_ITEM_ = thismodule.PDH_RAW_COUNTER_ITEM_W;
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = thismodule.PDH_FMT_COUNTERVALUE_ITEM_W;
        pub const PDH_COUNTER_PATH_ELEMENTS_ = thismodule.PDH_COUNTER_PATH_ELEMENTS_W;
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = thismodule.PDH_DATA_ITEM_PATH_ELEMENTS_W;
        pub const PDH_COUNTER_INFO_ = thismodule.PDH_COUNTER_INFO_W;
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = thismodule.PDH_LOG_SERVICE_QUERY_INFO_W;
        pub const PDH_BROWSE_DLG_CONFIG_H = thismodule.PDH_BROWSE_DLG_CONFIG_HW;
        pub const PDH_BROWSE_DLG_CONFIG_ = thismodule.PDH_BROWSE_DLG_CONFIG_W;
        pub const InstallPerfDll = thismodule.InstallPerfDllW;
        pub const LoadPerfCounterTextStrings = thismodule.LoadPerfCounterTextStringsW;
        pub const UnloadPerfCounterTextStrings = thismodule.UnloadPerfCounterTextStringsW;
        pub const UpdatePerfNameFiles = thismodule.UpdatePerfNameFilesW;
        pub const SetServiceAsTrusted = thismodule.SetServiceAsTrustedW;
        pub const PdhOpenQuery = thismodule.PdhOpenQueryW;
        pub const PdhAddCounter = thismodule.PdhAddCounterW;
        pub const PdhAddEnglishCounter = thismodule.PdhAddEnglishCounterW;
        pub const PdhValidatePathEx = thismodule.PdhValidatePathExW;
        pub const PdhGetFormattedCounterArray = thismodule.PdhGetFormattedCounterArrayW;
        pub const PdhGetRawCounterArray = thismodule.PdhGetRawCounterArrayW;
        pub const PdhGetCounterInfo = thismodule.PdhGetCounterInfoW;
        pub const PdhConnectMachine = thismodule.PdhConnectMachineW;
        pub const PdhEnumMachines = thismodule.PdhEnumMachinesW;
        pub const PdhEnumObjects = thismodule.PdhEnumObjectsW;
        pub const PdhEnumObjectItems = thismodule.PdhEnumObjectItemsW;
        pub const PdhMakeCounterPath = thismodule.PdhMakeCounterPathW;
        pub const PdhParseCounterPath = thismodule.PdhParseCounterPathW;
        pub const PdhParseInstanceName = thismodule.PdhParseInstanceNameW;
        pub const PdhValidatePath = thismodule.PdhValidatePathW;
        pub const PdhGetDefaultPerfObject = thismodule.PdhGetDefaultPerfObjectW;
        pub const PdhGetDefaultPerfCounter = thismodule.PdhGetDefaultPerfCounterW;
        pub const PdhBrowseCounters = thismodule.PdhBrowseCountersW;
        pub const PdhExpandCounterPath = thismodule.PdhExpandCounterPathW;
        pub const PdhLookupPerfNameByIndex = thismodule.PdhLookupPerfNameByIndexW;
        pub const PdhLookupPerfIndexByName = thismodule.PdhLookupPerfIndexByNameW;
        pub const PdhExpandWildCardPath = thismodule.PdhExpandWildCardPathW;
        pub const PdhOpenLog = thismodule.PdhOpenLogW;
        pub const PdhUpdateLog = thismodule.PdhUpdateLogW;
        pub const PdhSelectDataSource = thismodule.PdhSelectDataSourceW;
        pub const PdhGetDataSourceTimeRange = thismodule.PdhGetDataSourceTimeRangeW;
        pub const PdhBindInputDataSource = thismodule.PdhBindInputDataSourceW;
        pub const PdhEnumMachinesH = thismodule.PdhEnumMachinesHW;
        pub const PdhEnumObjectsH = thismodule.PdhEnumObjectsHW;
        pub const PdhEnumObjectItemsH = thismodule.PdhEnumObjectItemsHW;
        pub const PdhExpandWildCardPathH = thismodule.PdhExpandWildCardPathHW;
        pub const PdhGetDefaultPerfObjectH = thismodule.PdhGetDefaultPerfObjectHW;
        pub const PdhGetDefaultPerfCounterH = thismodule.PdhGetDefaultPerfCounterHW;
        pub const PdhBrowseCountersH = thismodule.PdhBrowseCountersHW;
        pub const PdhVerifySQLDB = thismodule.PdhVerifySQLDBW;
        pub const PdhCreateSQLTables = thismodule.PdhCreateSQLTablesW;
        pub const PdhEnumLogSetNames = thismodule.PdhEnumLogSetNamesW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const PDH_RAW_COUNTER_ITEM_ = *opaque {};
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = *opaque {};
        pub const PDH_COUNTER_PATH_ELEMENTS_ = *opaque {};
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = *opaque {};
        pub const PDH_COUNTER_INFO_ = *opaque {};
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = *opaque {};
        pub const PDH_BROWSE_DLG_CONFIG_H = *opaque {};
        pub const PDH_BROWSE_DLG_CONFIG_ = *opaque {};
        pub const InstallPerfDll = *opaque {};
        pub const LoadPerfCounterTextStrings = *opaque {};
        pub const UnloadPerfCounterTextStrings = *opaque {};
        pub const UpdatePerfNameFiles = *opaque {};
        pub const SetServiceAsTrusted = *opaque {};
        pub const PdhOpenQuery = *opaque {};
        pub const PdhAddCounter = *opaque {};
        pub const PdhAddEnglishCounter = *opaque {};
        pub const PdhValidatePathEx = *opaque {};
        pub const PdhGetFormattedCounterArray = *opaque {};
        pub const PdhGetRawCounterArray = *opaque {};
        pub const PdhGetCounterInfo = *opaque {};
        pub const PdhConnectMachine = *opaque {};
        pub const PdhEnumMachines = *opaque {};
        pub const PdhEnumObjects = *opaque {};
        pub const PdhEnumObjectItems = *opaque {};
        pub const PdhMakeCounterPath = *opaque {};
        pub const PdhParseCounterPath = *opaque {};
        pub const PdhParseInstanceName = *opaque {};
        pub const PdhValidatePath = *opaque {};
        pub const PdhGetDefaultPerfObject = *opaque {};
        pub const PdhGetDefaultPerfCounter = *opaque {};
        pub const PdhBrowseCounters = *opaque {};
        pub const PdhExpandCounterPath = *opaque {};
        pub const PdhLookupPerfNameByIndex = *opaque {};
        pub const PdhLookupPerfIndexByName = *opaque {};
        pub const PdhExpandWildCardPath = *opaque {};
        pub const PdhOpenLog = *opaque {};
        pub const PdhUpdateLog = *opaque {};
        pub const PdhSelectDataSource = *opaque {};
        pub const PdhGetDataSourceTimeRange = *opaque {};
        pub const PdhBindInputDataSource = *opaque {};
        pub const PdhEnumMachinesH = *opaque {};
        pub const PdhEnumObjectsH = *opaque {};
        pub const PdhEnumObjectItemsH = *opaque {};
        pub const PdhExpandWildCardPathH = *opaque {};
        pub const PdhGetDefaultPerfObjectH = *opaque {};
        pub const PdhGetDefaultPerfCounterH = *opaque {};
        pub const PdhBrowseCountersH = *opaque {};
        pub const PdhVerifySQLDB = *opaque {};
        pub const PdhCreateSQLTables = *opaque {};
        pub const PdhEnumLogSetNames = *opaque {};
    } else struct {
        pub const PDH_RAW_COUNTER_ITEM_ = @compileError("'PDH_RAW_COUNTER_ITEM_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_FMT_COUNTERVALUE_ITEM_ = @compileError("'PDH_FMT_COUNTERVALUE_ITEM_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_COUNTER_PATH_ELEMENTS_ = @compileError("'PDH_COUNTER_PATH_ELEMENTS_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_DATA_ITEM_PATH_ELEMENTS_ = @compileError("'PDH_DATA_ITEM_PATH_ELEMENTS_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_COUNTER_INFO_ = @compileError("'PDH_COUNTER_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_LOG_SERVICE_QUERY_INFO_ = @compileError("'PDH_LOG_SERVICE_QUERY_INFO_' requires that UNICODE be set to true or false in the root module");
        pub const PDH_BROWSE_DLG_CONFIG_H = @compileError("'PDH_BROWSE_DLG_CONFIG_H' requires that UNICODE be set to true or false in the root module");
        pub const PDH_BROWSE_DLG_CONFIG_ = @compileError("'PDH_BROWSE_DLG_CONFIG_' requires that UNICODE be set to true or false in the root module");
        pub const InstallPerfDll = @compileError("'InstallPerfDll' requires that UNICODE be set to true or false in the root module");
        pub const LoadPerfCounterTextStrings = @compileError("'LoadPerfCounterTextStrings' requires that UNICODE be set to true or false in the root module");
        pub const UnloadPerfCounterTextStrings = @compileError("'UnloadPerfCounterTextStrings' requires that UNICODE be set to true or false in the root module");
        pub const UpdatePerfNameFiles = @compileError("'UpdatePerfNameFiles' requires that UNICODE be set to true or false in the root module");
        pub const SetServiceAsTrusted = @compileError("'SetServiceAsTrusted' requires that UNICODE be set to true or false in the root module");
        pub const PdhOpenQuery = @compileError("'PdhOpenQuery' requires that UNICODE be set to true or false in the root module");
        pub const PdhAddCounter = @compileError("'PdhAddCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhAddEnglishCounter = @compileError("'PdhAddEnglishCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhValidatePathEx = @compileError("'PdhValidatePathEx' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetFormattedCounterArray = @compileError("'PdhGetFormattedCounterArray' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetRawCounterArray = @compileError("'PdhGetRawCounterArray' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetCounterInfo = @compileError("'PdhGetCounterInfo' requires that UNICODE be set to true or false in the root module");
        pub const PdhConnectMachine = @compileError("'PdhConnectMachine' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumMachines = @compileError("'PdhEnumMachines' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjects = @compileError("'PdhEnumObjects' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectItems = @compileError("'PdhEnumObjectItems' requires that UNICODE be set to true or false in the root module");
        pub const PdhMakeCounterPath = @compileError("'PdhMakeCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhParseCounterPath = @compileError("'PdhParseCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhParseInstanceName = @compileError("'PdhParseInstanceName' requires that UNICODE be set to true or false in the root module");
        pub const PdhValidatePath = @compileError("'PdhValidatePath' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfObject = @compileError("'PdhGetDefaultPerfObject' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfCounter = @compileError("'PdhGetDefaultPerfCounter' requires that UNICODE be set to true or false in the root module");
        pub const PdhBrowseCounters = @compileError("'PdhBrowseCounters' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandCounterPath = @compileError("'PdhExpandCounterPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhLookupPerfNameByIndex = @compileError("'PdhLookupPerfNameByIndex' requires that UNICODE be set to true or false in the root module");
        pub const PdhLookupPerfIndexByName = @compileError("'PdhLookupPerfIndexByName' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandWildCardPath = @compileError("'PdhExpandWildCardPath' requires that UNICODE be set to true or false in the root module");
        pub const PdhOpenLog = @compileError("'PdhOpenLog' requires that UNICODE be set to true or false in the root module");
        pub const PdhUpdateLog = @compileError("'PdhUpdateLog' requires that UNICODE be set to true or false in the root module");
        pub const PdhSelectDataSource = @compileError("'PdhSelectDataSource' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDataSourceTimeRange = @compileError("'PdhGetDataSourceTimeRange' requires that UNICODE be set to true or false in the root module");
        pub const PdhBindInputDataSource = @compileError("'PdhBindInputDataSource' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumMachinesH = @compileError("'PdhEnumMachinesH' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectsH = @compileError("'PdhEnumObjectsH' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumObjectItemsH = @compileError("'PdhEnumObjectItemsH' requires that UNICODE be set to true or false in the root module");
        pub const PdhExpandWildCardPathH = @compileError("'PdhExpandWildCardPathH' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfObjectH = @compileError("'PdhGetDefaultPerfObjectH' requires that UNICODE be set to true or false in the root module");
        pub const PdhGetDefaultPerfCounterH = @compileError("'PdhGetDefaultPerfCounterH' requires that UNICODE be set to true or false in the root module");
        pub const PdhBrowseCountersH = @compileError("'PdhBrowseCountersH' requires that UNICODE be set to true or false in the root module");
        pub const PdhVerifySQLDB = @compileError("'PdhVerifySQLDB' requires that UNICODE be set to true or false in the root module");
        pub const PdhCreateSQLTables = @compileError("'PdhCreateSQLTables' requires that UNICODE be set to true or false in the root module");
        pub const PdhEnumLogSetNames = @compileError("'PdhEnumLogSetNames' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (17)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const BSTR = @import("../foundation.zig").BSTR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IFontDisp = @import("../system/ole.zig").IFontDisp;
const IUnknown = @import("../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PLA_CABEXTRACT_CALLBACK")) {
        _ = PLA_CABEXTRACT_CALLBACK;
    }
    if (@hasDecl(@This(), "PERFLIBREQUEST")) {
        _ = PERFLIBREQUEST;
    }
    if (@hasDecl(@This(), "PERF_MEM_ALLOC")) {
        _ = PERF_MEM_ALLOC;
    }
    if (@hasDecl(@This(), "PERF_MEM_FREE")) {
        _ = PERF_MEM_FREE;
    }
    if (@hasDecl(@This(), "PM_OPEN_PROC")) {
        _ = PM_OPEN_PROC;
    }
    if (@hasDecl(@This(), "PM_COLLECT_PROC")) {
        _ = PM_COLLECT_PROC;
    }
    if (@hasDecl(@This(), "PM_CLOSE_PROC")) {
        _ = PM_CLOSE_PROC;
    }
    if (@hasDecl(@This(), "CounterPathCallBack")) {
        _ = CounterPathCallBack;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (1)
//--------------------------------------------------------------------------------
pub const hardware_counter_profiling = @import("performance/hardware_counter_profiling.zig");
