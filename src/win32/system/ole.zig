//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (625)
//--------------------------------------------------------------------------------
pub const CTL_E_ILLEGALFUNCTIONCALL = @as(i32, -2146828283);
pub const CONNECT_E_FIRST = @as(i32, -2147220992);
pub const SELFREG_E_FIRST = @as(i32, -2147220992);
pub const PERPROP_E_FIRST = @as(i32, -2147220992);
pub const OLECMDERR_E_FIRST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221248));
pub const OLECMDERR_E_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221247));
pub const OLECMDERR_E_NOHELP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221246));
pub const OLECMDERR_E_CANCELED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221245));
pub const OLECMDERR_E_UNKNOWNGROUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221244));
pub const CONNECT_E_NOCONNECTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220992));
pub const CONNECT_E_ADVISELIMIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220991));
pub const CONNECT_E_CANNOTCONNECT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220990));
pub const CONNECT_E_OVERRIDDEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220989));
pub const SELFREG_E_TYPELIB = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220992));
pub const SELFREG_E_CLASS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220991));
pub const PERPROP_E_NOPAGEAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220992));
pub const CLSID_CFontPropPage = Guid.initString("0be35200-8f91-11ce-9de3-00aa004bb851");
pub const CLSID_CColorPropPage = Guid.initString("0be35201-8f91-11ce-9de3-00aa004bb851");
pub const CLSID_CPicturePropPage = Guid.initString("0be35202-8f91-11ce-9de3-00aa004bb851");
pub const CLSID_PersistPropset = Guid.initString("fb8f0821-0164-101b-84ed-08002b2ec713");
pub const CLSID_ConvertVBX = Guid.initString("fb8f0822-0164-101b-84ed-08002b2ec713");
pub const CLSID_StdFont = Guid.initString("0be35203-8f91-11ce-9de3-00aa004bb851");
pub const CLSID_StdPicture = Guid.initString("0be35204-8f91-11ce-9de3-00aa004bb851");
pub const GUID_HIMETRIC = Guid.initString("66504300-be0f-101a-8bbb-00aa00300cab");
pub const GUID_COLOR = Guid.initString("66504301-be0f-101a-8bbb-00aa00300cab");
pub const GUID_XPOSPIXEL = Guid.initString("66504302-be0f-101a-8bbb-00aa00300cab");
pub const GUID_YPOSPIXEL = Guid.initString("66504303-be0f-101a-8bbb-00aa00300cab");
pub const GUID_XSIZEPIXEL = Guid.initString("66504304-be0f-101a-8bbb-00aa00300cab");
pub const GUID_YSIZEPIXEL = Guid.initString("66504305-be0f-101a-8bbb-00aa00300cab");
pub const GUID_XPOS = Guid.initString("66504306-be0f-101a-8bbb-00aa00300cab");
pub const GUID_YPOS = Guid.initString("66504307-be0f-101a-8bbb-00aa00300cab");
pub const GUID_XSIZE = Guid.initString("66504308-be0f-101a-8bbb-00aa00300cab");
pub const GUID_YSIZE = Guid.initString("66504309-be0f-101a-8bbb-00aa00300cab");
pub const GUID_TRISTATE = Guid.initString("6650430a-be0f-101a-8bbb-00aa00300cab");
pub const GUID_OPTIONVALUEEXCLUSIVE = Guid.initString("6650430b-be0f-101a-8bbb-00aa00300cab");
pub const GUID_CHECKVALUEEXCLUSIVE = Guid.initString("6650430c-be0f-101a-8bbb-00aa00300cab");
pub const GUID_FONTNAME = Guid.initString("6650430d-be0f-101a-8bbb-00aa00300cab");
pub const GUID_FONTSIZE = Guid.initString("6650430e-be0f-101a-8bbb-00aa00300cab");
pub const GUID_FONTBOLD = Guid.initString("6650430f-be0f-101a-8bbb-00aa00300cab");
pub const GUID_FONTITALIC = Guid.initString("66504310-be0f-101a-8bbb-00aa00300cab");
pub const GUID_FONTUNDERSCORE = Guid.initString("66504311-be0f-101a-8bbb-00aa00300cab");
pub const GUID_FONTSTRIKETHROUGH = Guid.initString("66504312-be0f-101a-8bbb-00aa00300cab");
pub const GUID_HANDLE = Guid.initString("66504313-be0f-101a-8bbb-00aa00300cab");
pub const PICTYPE_UNINITIALIZED = @as(i32, -1);
pub const PICTYPE_NONE = @as(u32, 0);
pub const PICTYPE_BITMAP = @as(u32, 1);
pub const PICTYPE_METAFILE = @as(u32, 2);
pub const PICTYPE_ICON = @as(u32, 3);
pub const PICTYPE_ENHMETAFILE = @as(u32, 4);
pub const CONNECT_E_LAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220977));
pub const CONNECT_S_FIRST = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262656));
pub const CONNECT_S_LAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262671));
pub const SELFREG_E_LAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220977));
pub const SELFREG_S_FIRST = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262656));
pub const SELFREG_S_LAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262671));
pub const PERPROP_E_LAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147220977));
pub const PERPROP_S_FIRST = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262656));
pub const PERPROP_S_LAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262671));
pub const OLEIVERB_PROPERTIES = @as(i32, -7);
pub const VT_STREAMED_PROPSET = @as(u32, 73);
pub const VT_STORED_PROPSET = @as(u32, 74);
pub const VT_BLOB_PROPSET = @as(u32, 75);
pub const VT_VERBOSE_ENUM = @as(u32, 76);
pub const OCM__BASE = @as(u32, 8192);
pub const LP_DEFAULT = @as(u32, 0);
pub const LP_MONOCHROME = @as(u32, 1);
pub const LP_VGACOLOR = @as(u32, 2);
pub const LP_COLOR = @as(u32, 4);
pub const DISPID_AUTOSIZE = @as(i32, -500);
pub const DISPID_BACKCOLOR = @as(i32, -501);
pub const DISPID_BACKSTYLE = @as(i32, -502);
pub const DISPID_BORDERCOLOR = @as(i32, -503);
pub const DISPID_BORDERSTYLE = @as(i32, -504);
pub const DISPID_BORDERWIDTH = @as(i32, -505);
pub const DISPID_DRAWMODE = @as(i32, -507);
pub const DISPID_DRAWSTYLE = @as(i32, -508);
pub const DISPID_DRAWWIDTH = @as(i32, -509);
pub const DISPID_FILLCOLOR = @as(i32, -510);
pub const DISPID_FILLSTYLE = @as(i32, -511);
pub const DISPID_FONT = @as(i32, -512);
pub const DISPID_FORECOLOR = @as(i32, -513);
pub const DISPID_ENABLED = @as(i32, -514);
pub const DISPID_HWND = @as(i32, -515);
pub const DISPID_TABSTOP = @as(i32, -516);
pub const DISPID_TEXT = @as(i32, -517);
pub const DISPID_CAPTION = @as(i32, -518);
pub const DISPID_BORDERVISIBLE = @as(i32, -519);
pub const DISPID_APPEARANCE = @as(i32, -520);
pub const DISPID_MOUSEPOINTER = @as(i32, -521);
pub const DISPID_MOUSEICON = @as(i32, -522);
pub const DISPID_PICTURE = @as(i32, -523);
pub const DISPID_VALID = @as(i32, -524);
pub const DISPID_READYSTATE = @as(i32, -525);
pub const DISPID_LISTINDEX = @as(i32, -526);
pub const DISPID_SELECTED = @as(i32, -527);
pub const DISPID_LIST = @as(i32, -528);
pub const DISPID_COLUMN = @as(i32, -529);
pub const DISPID_LISTCOUNT = @as(i32, -531);
pub const DISPID_MULTISELECT = @as(i32, -532);
pub const DISPID_MAXLENGTH = @as(i32, -533);
pub const DISPID_PASSWORDCHAR = @as(i32, -534);
pub const DISPID_SCROLLBARS = @as(i32, -535);
pub const DISPID_WORDWRAP = @as(i32, -536);
pub const DISPID_MULTILINE = @as(i32, -537);
pub const DISPID_NUMBEROFROWS = @as(i32, -538);
pub const DISPID_NUMBEROFCOLUMNS = @as(i32, -539);
pub const DISPID_DISPLAYSTYLE = @as(i32, -540);
pub const DISPID_GROUPNAME = @as(i32, -541);
pub const DISPID_IMEMODE = @as(i32, -542);
pub const DISPID_ACCELERATOR = @as(i32, -543);
pub const DISPID_ENTERKEYBEHAVIOR = @as(i32, -544);
pub const DISPID_TABKEYBEHAVIOR = @as(i32, -545);
pub const DISPID_SELTEXT = @as(i32, -546);
pub const DISPID_SELSTART = @as(i32, -547);
pub const DISPID_SELLENGTH = @as(i32, -548);
pub const DISPID_REFRESH = @as(i32, -550);
pub const DISPID_DOCLICK = @as(i32, -551);
pub const DISPID_ABOUTBOX = @as(i32, -552);
pub const DISPID_ADDITEM = @as(i32, -553);
pub const DISPID_CLEAR = @as(i32, -554);
pub const DISPID_REMOVEITEM = @as(i32, -555);
pub const DISPID_CLICK = @as(i32, -600);
pub const DISPID_DBLCLICK = @as(i32, -601);
pub const DISPID_KEYDOWN = @as(i32, -602);
pub const DISPID_KEYPRESS = @as(i32, -603);
pub const DISPID_KEYUP = @as(i32, -604);
pub const DISPID_MOUSEDOWN = @as(i32, -605);
pub const DISPID_MOUSEMOVE = @as(i32, -606);
pub const DISPID_MOUSEUP = @as(i32, -607);
pub const DISPID_ERROREVENT = @as(i32, -608);
pub const DISPID_READYSTATECHANGE = @as(i32, -609);
pub const DISPID_CLICK_VALUE = @as(i32, -610);
pub const DISPID_RIGHTTOLEFT = @as(i32, -611);
pub const DISPID_TOPTOBOTTOM = @as(i32, -612);
pub const DISPID_THIS = @as(i32, -613);
pub const DISPID_AMBIENT_BACKCOLOR = @as(i32, -701);
pub const DISPID_AMBIENT_DISPLAYNAME = @as(i32, -702);
pub const DISPID_AMBIENT_FONT = @as(i32, -703);
pub const DISPID_AMBIENT_FORECOLOR = @as(i32, -704);
pub const DISPID_AMBIENT_LOCALEID = @as(i32, -705);
pub const DISPID_AMBIENT_MESSAGEREFLECT = @as(i32, -706);
pub const DISPID_AMBIENT_SCALEUNITS = @as(i32, -707);
pub const DISPID_AMBIENT_TEXTALIGN = @as(i32, -708);
pub const DISPID_AMBIENT_USERMODE = @as(i32, -709);
pub const DISPID_AMBIENT_UIDEAD = @as(i32, -710);
pub const DISPID_AMBIENT_SHOWGRABHANDLES = @as(i32, -711);
pub const DISPID_AMBIENT_SHOWHATCHING = @as(i32, -712);
pub const DISPID_AMBIENT_DISPLAYASDEFAULT = @as(i32, -713);
pub const DISPID_AMBIENT_SUPPORTSMNEMONICS = @as(i32, -714);
pub const DISPID_AMBIENT_AUTOCLIP = @as(i32, -715);
pub const DISPID_AMBIENT_APPEARANCE = @as(i32, -716);
pub const DISPID_AMBIENT_CODEPAGE = @as(i32, -725);
pub const DISPID_AMBIENT_PALETTE = @as(i32, -726);
pub const DISPID_AMBIENT_CHARSET = @as(i32, -727);
pub const DISPID_AMBIENT_TRANSFERPRIORITY = @as(i32, -728);
pub const DISPID_AMBIENT_RIGHTTOLEFT = @as(i32, -732);
pub const DISPID_AMBIENT_TOPTOBOTTOM = @as(i32, -733);
pub const DISPID_Name = @as(i32, -800);
pub const DISPID_Delete = @as(i32, -801);
pub const DISPID_Object = @as(i32, -802);
pub const DISPID_Parent = @as(i32, -803);
pub const DISPID_FONT_NAME = @as(u32, 0);
pub const DISPID_FONT_SIZE = @as(u32, 2);
pub const DISPID_FONT_BOLD = @as(u32, 3);
pub const DISPID_FONT_ITALIC = @as(u32, 4);
pub const DISPID_FONT_UNDER = @as(u32, 5);
pub const DISPID_FONT_STRIKE = @as(u32, 6);
pub const DISPID_FONT_WEIGHT = @as(u32, 7);
pub const DISPID_FONT_CHARSET = @as(u32, 8);
pub const DISPID_FONT_CHANGED = @as(u32, 9);
pub const DISPID_PICT_HANDLE = @as(u32, 0);
pub const DISPID_PICT_HPAL = @as(u32, 2);
pub const DISPID_PICT_TYPE = @as(u32, 3);
pub const DISPID_PICT_WIDTH = @as(u32, 4);
pub const DISPID_PICT_HEIGHT = @as(u32, 5);
pub const DISPID_PICT_RENDER = @as(u32, 6);
pub const STDOLE_TLB = "stdole2.tlb";
pub const STDTYPE_TLB = "stdole2.tlb";
pub const GC_WCH_SIBLING = @as(i32, 1);
pub const TIFLAGS_EXTENDDISPATCHONLY = @as(u32, 1);
pub const OLECMDERR_E_NOTSUPPORTED = @as(i32, -2147221248);
pub const MSOCMDERR_E_FIRST = @as(i32, -2147221248);
pub const MSOCMDERR_E_NOTSUPPORTED = @as(i32, -2147221248);
pub const MSOCMDERR_E_DISABLED = @as(i32, -2147221247);
pub const MSOCMDERR_E_NOHELP = @as(i32, -2147221246);
pub const MSOCMDERR_E_CANCELED = @as(i32, -2147221245);
pub const MSOCMDERR_E_UNKNOWNGROUP = @as(i32, -2147221244);
pub const OLECMD_TASKDLGID_ONBEFOREUNLOAD = @as(u32, 1);
pub const OLECMDARGINDEX_SHOWPAGEACTIONMENU_HWND = @as(u32, 0);
pub const OLECMDARGINDEX_SHOWPAGEACTIONMENU_X = @as(u32, 1);
pub const OLECMDARGINDEX_SHOWPAGEACTIONMENU_Y = @as(u32, 2);
pub const OLECMDARGINDEX_ACTIVEXINSTALL_PUBLISHER = @as(u32, 0);
pub const OLECMDARGINDEX_ACTIVEXINSTALL_DISPLAYNAME = @as(u32, 1);
pub const OLECMDARGINDEX_ACTIVEXINSTALL_CLSID = @as(u32, 2);
pub const OLECMDARGINDEX_ACTIVEXINSTALL_INSTALLSCOPE = @as(u32, 3);
pub const OLECMDARGINDEX_ACTIVEXINSTALL_SOURCEURL = @as(u32, 4);
pub const INSTALL_SCOPE_INVALID = @as(u32, 0);
pub const INSTALL_SCOPE_MACHINE = @as(u32, 1);
pub const INSTALL_SCOPE_USER = @as(u32, 2);
pub const MK_ALT = @as(u32, 32);
pub const DROPEFFECT_NONE = @as(u32, 0);
pub const DROPEFFECT_COPY = @as(u32, 1);
pub const DROPEFFECT_MOVE = @as(u32, 2);
pub const DROPEFFECT_LINK = @as(u32, 4);
pub const DROPEFFECT_SCROLL = @as(u32, 2147483648);
pub const DD_DEFSCROLLINSET = @as(u32, 11);
pub const DD_DEFSCROLLDELAY = @as(u32, 50);
pub const DD_DEFSCROLLINTERVAL = @as(u32, 50);
pub const DD_DEFDRAGDELAY = @as(u32, 200);
pub const DD_DEFDRAGMINDIST = @as(u32, 2);
pub const OT_LINK = @as(i32, 1);
pub const OT_EMBEDDED = @as(i32, 2);
pub const OT_STATIC = @as(i32, 3);
pub const OLEVERB_PRIMARY = @as(u32, 0);
pub const OF_SET = @as(u32, 1);
pub const OF_GET = @as(u32, 2);
pub const OF_HANDLER = @as(u32, 4);
pub const WIN32 = @as(u32, 100);
pub const OLEIVERB_PRIMARY = @as(i32, 0);
pub const OLEIVERB_SHOW = @as(i32, -1);
pub const OLEIVERB_OPEN = @as(i32, -2);
pub const OLEIVERB_HIDE = @as(i32, -3);
pub const OLEIVERB_UIACTIVATE = @as(i32, -4);
pub const OLEIVERB_INPLACEACTIVATE = @as(i32, -5);
pub const OLEIVERB_DISCARDUNDOSTATE = @as(i32, -6);
pub const EMBDHLP_INPROC_HANDLER = @as(i32, 0);
pub const EMBDHLP_INPROC_SERVER = @as(i32, 1);
pub const EMBDHLP_CREATENOW = @as(i32, 0);
pub const EMBDHLP_DELAYCREATE = @as(i32, 65536);
pub const OLECREATE_LEAVERUNNING = @as(u32, 1);
pub const IDC_OLEUIHELP = @as(u32, 99);
pub const IDC_IO_CREATENEW = @as(u32, 2100);
pub const IDC_IO_CREATEFROMFILE = @as(u32, 2101);
pub const IDC_IO_LINKFILE = @as(u32, 2102);
pub const IDC_IO_OBJECTTYPELIST = @as(u32, 2103);
pub const IDC_IO_DISPLAYASICON = @as(u32, 2104);
pub const IDC_IO_CHANGEICON = @as(u32, 2105);
pub const IDC_IO_FILE = @as(u32, 2106);
pub const IDC_IO_FILEDISPLAY = @as(u32, 2107);
pub const IDC_IO_RESULTIMAGE = @as(u32, 2108);
pub const IDC_IO_RESULTTEXT = @as(u32, 2109);
pub const IDC_IO_ICONDISPLAY = @as(u32, 2110);
pub const IDC_IO_OBJECTTYPETEXT = @as(u32, 2111);
pub const IDC_IO_FILETEXT = @as(u32, 2112);
pub const IDC_IO_FILETYPE = @as(u32, 2113);
pub const IDC_IO_INSERTCONTROL = @as(u32, 2114);
pub const IDC_IO_ADDCONTROL = @as(u32, 2115);
pub const IDC_IO_CONTROLTYPELIST = @as(u32, 2116);
pub const IDC_PS_PASTE = @as(u32, 500);
pub const IDC_PS_PASTELINK = @as(u32, 501);
pub const IDC_PS_SOURCETEXT = @as(u32, 502);
pub const IDC_PS_PASTELIST = @as(u32, 503);
pub const IDC_PS_PASTELINKLIST = @as(u32, 504);
pub const IDC_PS_DISPLAYLIST = @as(u32, 505);
pub const IDC_PS_DISPLAYASICON = @as(u32, 506);
pub const IDC_PS_ICONDISPLAY = @as(u32, 507);
pub const IDC_PS_CHANGEICON = @as(u32, 508);
pub const IDC_PS_RESULTIMAGE = @as(u32, 509);
pub const IDC_PS_RESULTTEXT = @as(u32, 510);
pub const IDC_CI_GROUP = @as(u32, 120);
pub const IDC_CI_CURRENT = @as(u32, 121);
pub const IDC_CI_CURRENTICON = @as(u32, 122);
pub const IDC_CI_DEFAULT = @as(u32, 123);
pub const IDC_CI_DEFAULTICON = @as(u32, 124);
pub const IDC_CI_FROMFILE = @as(u32, 125);
pub const IDC_CI_FROMFILEEDIT = @as(u32, 126);
pub const IDC_CI_ICONLIST = @as(u32, 127);
pub const IDC_CI_LABEL = @as(u32, 128);
pub const IDC_CI_LABELEDIT = @as(u32, 129);
pub const IDC_CI_BROWSE = @as(u32, 130);
pub const IDC_CI_ICONDISPLAY = @as(u32, 131);
pub const IDC_CV_OBJECTTYPE = @as(u32, 150);
pub const IDC_CV_DISPLAYASICON = @as(u32, 152);
pub const IDC_CV_CHANGEICON = @as(u32, 153);
pub const IDC_CV_ACTIVATELIST = @as(u32, 154);
pub const IDC_CV_CONVERTTO = @as(u32, 155);
pub const IDC_CV_ACTIVATEAS = @as(u32, 156);
pub const IDC_CV_RESULTTEXT = @as(u32, 157);
pub const IDC_CV_CONVERTLIST = @as(u32, 158);
pub const IDC_CV_ICONDISPLAY = @as(u32, 165);
pub const IDC_EL_CHANGESOURCE = @as(u32, 201);
pub const IDC_EL_AUTOMATIC = @as(u32, 202);
pub const IDC_EL_CANCELLINK = @as(u32, 209);
pub const IDC_EL_UPDATENOW = @as(u32, 210);
pub const IDC_EL_OPENSOURCE = @as(u32, 211);
pub const IDC_EL_MANUAL = @as(u32, 212);
pub const IDC_EL_LINKSOURCE = @as(u32, 216);
pub const IDC_EL_LINKTYPE = @as(u32, 217);
pub const IDC_EL_LINKSLISTBOX = @as(u32, 206);
pub const IDC_EL_COL1 = @as(u32, 220);
pub const IDC_EL_COL2 = @as(u32, 221);
pub const IDC_EL_COL3 = @as(u32, 222);
pub const IDC_BZ_RETRY = @as(u32, 600);
pub const IDC_BZ_ICON = @as(u32, 601);
pub const IDC_BZ_MESSAGE1 = @as(u32, 602);
pub const IDC_BZ_SWITCHTO = @as(u32, 604);
pub const IDC_UL_METER = @as(u32, 1029);
pub const IDC_UL_STOP = @as(u32, 1030);
pub const IDC_UL_PERCENT = @as(u32, 1031);
pub const IDC_UL_PROGRESS = @as(u32, 1032);
pub const IDC_PU_LINKS = @as(u32, 900);
pub const IDC_PU_TEXT = @as(u32, 901);
pub const IDC_PU_CONVERT = @as(u32, 902);
pub const IDC_PU_ICON = @as(u32, 908);
pub const IDC_GP_OBJECTNAME = @as(u32, 1009);
pub const IDC_GP_OBJECTTYPE = @as(u32, 1010);
pub const IDC_GP_OBJECTSIZE = @as(u32, 1011);
pub const IDC_GP_CONVERT = @as(u32, 1013);
pub const IDC_GP_OBJECTICON = @as(u32, 1014);
pub const IDC_GP_OBJECTLOCATION = @as(u32, 1022);
pub const IDC_VP_PERCENT = @as(u32, 1000);
pub const IDC_VP_CHANGEICON = @as(u32, 1001);
pub const IDC_VP_EDITABLE = @as(u32, 1002);
pub const IDC_VP_ASICON = @as(u32, 1003);
pub const IDC_VP_RELATIVE = @as(u32, 1005);
pub const IDC_VP_SPIN = @as(u32, 1006);
pub const IDC_VP_SCALETXT = @as(u32, 1034);
pub const IDC_VP_ICONDISPLAY = @as(u32, 1021);
pub const IDC_VP_RESULTIMAGE = @as(u32, 1033);
pub const IDC_LP_OPENSOURCE = @as(u32, 1006);
pub const IDC_LP_UPDATENOW = @as(u32, 1007);
pub const IDC_LP_BREAKLINK = @as(u32, 1008);
pub const IDC_LP_LINKSOURCE = @as(u32, 1012);
pub const IDC_LP_CHANGESOURCE = @as(u32, 1015);
pub const IDC_LP_AUTOMATIC = @as(u32, 1016);
pub const IDC_LP_MANUAL = @as(u32, 1017);
pub const IDC_LP_DATE = @as(u32, 1018);
pub const IDC_LP_TIME = @as(u32, 1019);
pub const IDD_INSERTOBJECT = @as(u32, 1000);
pub const IDD_CHANGEICON = @as(u32, 1001);
pub const IDD_CONVERT = @as(u32, 1002);
pub const IDD_PASTESPECIAL = @as(u32, 1003);
pub const IDD_EDITLINKS = @as(u32, 1004);
pub const IDD_BUSY = @as(u32, 1006);
pub const IDD_UPDATELINKS = @as(u32, 1007);
pub const IDD_CHANGESOURCE = @as(u32, 1009);
pub const IDD_INSERTFILEBROWSE = @as(u32, 1010);
pub const IDD_CHANGEICONBROWSE = @as(u32, 1011);
pub const IDD_CONVERTONLY = @as(u32, 1012);
pub const IDD_CHANGESOURCE4 = @as(u32, 1013);
pub const IDD_GNRLPROPS = @as(u32, 1100);
pub const IDD_VIEWPROPS = @as(u32, 1101);
pub const IDD_LINKPROPS = @as(u32, 1102);
pub const IDD_CONVERT4 = @as(u32, 1103);
pub const IDD_CONVERTONLY4 = @as(u32, 1104);
pub const IDD_EDITLINKS4 = @as(u32, 1105);
pub const IDD_GNRLPROPS4 = @as(u32, 1106);
pub const IDD_LINKPROPS4 = @as(u32, 1107);
pub const IDD_PASTESPECIAL4 = @as(u32, 1108);
pub const IDD_CANNOTUPDATELINK = @as(u32, 1008);
pub const IDD_LINKSOURCEUNAVAILABLE = @as(u32, 1020);
pub const IDD_SERVERNOTFOUND = @as(u32, 1023);
pub const IDD_OUTOFMEMORY = @as(u32, 1024);
pub const IDD_SERVERNOTREGW = @as(u32, 1021);
pub const IDD_LINKTYPECHANGEDW = @as(u32, 1022);
pub const IDD_SERVERNOTREGA = @as(u32, 1025);
pub const IDD_LINKTYPECHANGEDA = @as(u32, 1026);
pub const IDD_SERVERNOTREG = @as(u32, 1021);
pub const IDD_LINKTYPECHANGED = @as(u32, 1022);
pub const OLESTDDELIM = "\\";
pub const SZOLEUI_MSG_HELP = "OLEUI_MSG_HELP";
pub const SZOLEUI_MSG_ENDDIALOG = "OLEUI_MSG_ENDDIALOG";
pub const SZOLEUI_MSG_BROWSE = "OLEUI_MSG_BROWSE";
pub const SZOLEUI_MSG_CHANGEICON = "OLEUI_MSG_CHANGEICON";
pub const SZOLEUI_MSG_CLOSEBUSYDIALOG = "OLEUI_MSG_CLOSEBUSYDIALOG";
pub const SZOLEUI_MSG_CONVERT = "OLEUI_MSG_CONVERT";
pub const SZOLEUI_MSG_CHANGESOURCE = "OLEUI_MSG_CHANGESOURCE";
pub const SZOLEUI_MSG_ADDCONTROL = "OLEUI_MSG_ADDCONTROL";
pub const SZOLEUI_MSG_BROWSE_OFN = "OLEUI_MSG_BROWSE_OFN";
pub const ID_BROWSE_CHANGEICON = @as(u32, 1);
pub const ID_BROWSE_INSERTFILE = @as(u32, 2);
pub const ID_BROWSE_ADDCONTROL = @as(u32, 3);
pub const ID_BROWSE_CHANGESOURCE = @as(u32, 4);
pub const OLEUI_FALSE = @as(u32, 0);
pub const OLEUI_SUCCESS = @as(u32, 1);
pub const OLEUI_OK = @as(u32, 1);
pub const OLEUI_CANCEL = @as(u32, 2);
pub const OLEUI_ERR_STANDARDMIN = @as(u32, 100);
pub const OLEUI_ERR_OLEMEMALLOC = @as(u32, 100);
pub const OLEUI_ERR_STRUCTURENULL = @as(u32, 101);
pub const OLEUI_ERR_STRUCTUREINVALID = @as(u32, 102);
pub const OLEUI_ERR_CBSTRUCTINCORRECT = @as(u32, 103);
pub const OLEUI_ERR_HWNDOWNERINVALID = @as(u32, 104);
pub const OLEUI_ERR_LPSZCAPTIONINVALID = @as(u32, 105);
pub const OLEUI_ERR_LPFNHOOKINVALID = @as(u32, 106);
pub const OLEUI_ERR_HINSTANCEINVALID = @as(u32, 107);
pub const OLEUI_ERR_LPSZTEMPLATEINVALID = @as(u32, 108);
pub const OLEUI_ERR_HRESOURCEINVALID = @as(u32, 109);
pub const OLEUI_ERR_FINDTEMPLATEFAILURE = @as(u32, 110);
pub const OLEUI_ERR_LOADTEMPLATEFAILURE = @as(u32, 111);
pub const OLEUI_ERR_DIALOGFAILURE = @as(u32, 112);
pub const OLEUI_ERR_LOCALMEMALLOC = @as(u32, 113);
pub const OLEUI_ERR_GLOBALMEMALLOC = @as(u32, 114);
pub const OLEUI_ERR_LOADSTRING = @as(u32, 115);
pub const OLEUI_ERR_STANDARDMAX = @as(u32, 116);
pub const IOF_SHOWHELP = @as(i32, 1);
pub const IOF_SELECTCREATENEW = @as(i32, 2);
pub const IOF_SELECTCREATEFROMFILE = @as(i32, 4);
pub const IOF_CHECKLINK = @as(i32, 8);
pub const IOF_CHECKDISPLAYASICON = @as(i32, 16);
pub const IOF_CREATENEWOBJECT = @as(i32, 32);
pub const IOF_CREATEFILEOBJECT = @as(i32, 64);
pub const IOF_CREATELINKOBJECT = @as(i32, 128);
pub const IOF_DISABLELINK = @as(i32, 256);
pub const IOF_VERIFYSERVERSEXIST = @as(i32, 512);
pub const IOF_DISABLEDISPLAYASICON = @as(i32, 1024);
pub const IOF_HIDECHANGEICON = @as(i32, 2048);
pub const IOF_SHOWINSERTCONTROL = @as(i32, 4096);
pub const IOF_SELECTCREATECONTROL = @as(i32, 8192);
pub const OLEUI_IOERR_LPSZFILEINVALID = @as(u32, 116);
pub const OLEUI_IOERR_LPSZLABELINVALID = @as(u32, 117);
pub const OLEUI_IOERR_HICONINVALID = @as(u32, 118);
pub const OLEUI_IOERR_LPFORMATETCINVALID = @as(u32, 119);
pub const OLEUI_IOERR_PPVOBJINVALID = @as(u32, 120);
pub const OLEUI_IOERR_LPIOLECLIENTSITEINVALID = @as(u32, 121);
pub const OLEUI_IOERR_LPISTORAGEINVALID = @as(u32, 122);
pub const OLEUI_IOERR_SCODEHASERROR = @as(u32, 123);
pub const OLEUI_IOERR_LPCLSIDEXCLUDEINVALID = @as(u32, 124);
pub const OLEUI_IOERR_CCHFILEINVALID = @as(u32, 125);
pub const PS_MAXLINKTYPES = @as(u32, 8);
pub const PSF_SHOWHELP = @as(i32, 1);
pub const PSF_SELECTPASTE = @as(i32, 2);
pub const PSF_SELECTPASTELINK = @as(i32, 4);
pub const PSF_CHECKDISPLAYASICON = @as(i32, 8);
pub const PSF_DISABLEDISPLAYASICON = @as(i32, 16);
pub const PSF_HIDECHANGEICON = @as(i32, 32);
pub const PSF_STAYONCLIPBOARDCHANGE = @as(i32, 64);
pub const PSF_NOREFRESHDATAOBJECT = @as(i32, 128);
pub const OLEUI_IOERR_SRCDATAOBJECTINVALID = @as(u32, 116);
pub const OLEUI_IOERR_ARRPASTEENTRIESINVALID = @as(u32, 117);
pub const OLEUI_IOERR_ARRLINKTYPESINVALID = @as(u32, 118);
pub const OLEUI_PSERR_CLIPBOARDCHANGED = @as(u32, 119);
pub const OLEUI_PSERR_GETCLIPBOARDFAILED = @as(u32, 120);
pub const OLEUI_ELERR_LINKCNTRNULL = @as(u32, 116);
pub const OLEUI_ELERR_LINKCNTRINVALID = @as(u32, 117);
pub const ELF_SHOWHELP = @as(i32, 1);
pub const ELF_DISABLEUPDATENOW = @as(i32, 2);
pub const ELF_DISABLEOPENSOURCE = @as(i32, 4);
pub const ELF_DISABLECHANGESOURCE = @as(i32, 8);
pub const ELF_DISABLECANCELLINK = @as(i32, 16);
pub const CIF_SHOWHELP = @as(i32, 1);
pub const CIF_SELECTCURRENT = @as(i32, 2);
pub const CIF_SELECTDEFAULT = @as(i32, 4);
pub const CIF_SELECTFROMFILE = @as(i32, 8);
pub const CIF_USEICONEXE = @as(i32, 16);
pub const OLEUI_CIERR_MUSTHAVECLSID = @as(u32, 116);
pub const OLEUI_CIERR_MUSTHAVECURRENTMETAFILE = @as(u32, 117);
pub const OLEUI_CIERR_SZICONEXEINVALID = @as(u32, 118);
pub const PROP_HWND_CHGICONDLG = "HWND_CIDLG";
pub const CF_SHOWHELPBUTTON = @as(i32, 1);
pub const CF_SETCONVERTDEFAULT = @as(i32, 2);
pub const CF_SETACTIVATEDEFAULT = @as(i32, 4);
pub const CF_SELECTCONVERTTO = @as(i32, 8);
pub const CF_SELECTACTIVATEAS = @as(i32, 16);
pub const CF_DISABLEDISPLAYASICON = @as(i32, 32);
pub const CF_DISABLEACTIVATEAS = @as(i32, 64);
pub const CF_HIDECHANGEICON = @as(i32, 128);
pub const CF_CONVERTONLY = @as(i32, 256);
pub const OLEUI_CTERR_CLASSIDINVALID = @as(u32, 117);
pub const OLEUI_CTERR_DVASPECTINVALID = @as(u32, 118);
pub const OLEUI_CTERR_CBFORMATINVALID = @as(u32, 119);
pub const OLEUI_CTERR_HMETAPICTINVALID = @as(u32, 120);
pub const OLEUI_CTERR_STRINGINVALID = @as(u32, 121);
pub const BZ_DISABLECANCELBUTTON = @as(i32, 1);
pub const BZ_DISABLESWITCHTOBUTTON = @as(i32, 2);
pub const BZ_DISABLERETRYBUTTON = @as(i32, 4);
pub const BZ_NOTRESPONDINGDIALOG = @as(i32, 8);
pub const OLEUI_BZERR_HTASKINVALID = @as(u32, 116);
pub const OLEUI_BZ_SWITCHTOSELECTED = @as(u32, 117);
pub const OLEUI_BZ_RETRYSELECTED = @as(u32, 118);
pub const OLEUI_BZ_CALLUNBLOCKED = @as(u32, 119);
pub const CSF_SHOWHELP = @as(i32, 1);
pub const CSF_VALIDSOURCE = @as(i32, 2);
pub const CSF_ONLYGETSOURCE = @as(i32, 4);
pub const CSF_EXPLORER = @as(i32, 8);
pub const OLEUI_CSERR_LINKCNTRNULL = @as(u32, 116);
pub const OLEUI_CSERR_LINKCNTRINVALID = @as(u32, 117);
pub const OLEUI_CSERR_FROMNOTNULL = @as(u32, 118);
pub const OLEUI_CSERR_TONOTNULL = @as(u32, 119);
pub const OLEUI_CSERR_SOURCENULL = @as(u32, 120);
pub const OLEUI_CSERR_SOURCEINVALID = @as(u32, 121);
pub const OLEUI_CSERR_SOURCEPARSERROR = @as(u32, 122);
pub const OLEUI_CSERR_SOURCEPARSEERROR = @as(u32, 122);
pub const VPF_SELECTRELATIVE = @as(i32, 1);
pub const VPF_DISABLERELATIVE = @as(i32, 2);
pub const VPF_DISABLESCALE = @as(i32, 4);
pub const OPF_OBJECTISLINK = @as(i32, 1);
pub const OPF_NOFILLDEFAULT = @as(i32, 2);
pub const OPF_SHOWHELP = @as(i32, 4);
pub const OPF_DISABLECONVERT = @as(i32, 8);
pub const OLEUI_OPERR_SUBPROPNULL = @as(u32, 116);
pub const OLEUI_OPERR_SUBPROPINVALID = @as(u32, 117);
pub const OLEUI_OPERR_PROPSHEETNULL = @as(u32, 118);
pub const OLEUI_OPERR_PROPSHEETINVALID = @as(u32, 119);
pub const OLEUI_OPERR_SUPPROP = @as(u32, 120);
pub const OLEUI_OPERR_PROPSINVALID = @as(u32, 121);
pub const OLEUI_OPERR_PAGESINCORRECT = @as(u32, 122);
pub const OLEUI_OPERR_INVALIDPAGES = @as(u32, 123);
pub const OLEUI_OPERR_NOTSUPPORTED = @as(u32, 124);
pub const OLEUI_OPERR_DLGPROCNOTNULL = @as(u32, 125);
pub const OLEUI_OPERR_LPARAMNOTZERO = @as(u32, 126);
pub const OLEUI_GPERR_STRINGINVALID = @as(u32, 127);
pub const OLEUI_GPERR_CLASSIDINVALID = @as(u32, 128);
pub const OLEUI_GPERR_LPCLSIDEXCLUDEINVALID = @as(u32, 129);
pub const OLEUI_GPERR_CBFORMATINVALID = @as(u32, 130);
pub const OLEUI_VPERR_METAPICTINVALID = @as(u32, 131);
pub const OLEUI_VPERR_DVASPECTINVALID = @as(u32, 132);
pub const OLEUI_LPERR_LINKCNTRNULL = @as(u32, 133);
pub const OLEUI_LPERR_LINKCNTRINVALID = @as(u32, 134);
pub const OLEUI_OPERR_PROPERTYSHEET = @as(u32, 135);
pub const OLEUI_OPERR_OBJINFOINVALID = @as(u32, 136);
pub const OLEUI_OPERR_LINKINFOINVALID = @as(u32, 137);
pub const OLEUI_QUERY_GETCLASSID = @as(u32, 65280);
pub const OLEUI_QUERY_LINKBROKEN = @as(u32, 65281);
pub const FADF_AUTO = @as(u32, 1);
pub const FADF_STATIC = @as(u32, 2);
pub const FADF_EMBEDDED = @as(u32, 4);
pub const FADF_FIXEDSIZE = @as(u32, 16);
pub const FADF_RECORD = @as(u32, 32);
pub const FADF_HAVEIID = @as(u32, 64);
pub const FADF_HAVEVARTYPE = @as(u32, 128);
pub const FADF_BSTR = @as(u32, 256);
pub const FADF_UNKNOWN = @as(u32, 512);
pub const FADF_DISPATCH = @as(u32, 1024);
pub const FADF_VARIANT = @as(u32, 2048);
pub const FADF_RESERVED = @as(u32, 61448);
pub const PARAMFLAG_NONE = @as(u32, 0);
pub const PARAMFLAG_FIN = @as(u32, 1);
pub const PARAMFLAG_FOUT = @as(u32, 2);
pub const PARAMFLAG_FLCID = @as(u32, 4);
pub const PARAMFLAG_FRETVAL = @as(u32, 8);
pub const PARAMFLAG_FOPT = @as(u32, 16);
pub const PARAMFLAG_FHASDEFAULT = @as(u32, 32);
pub const PARAMFLAG_FHASCUSTDATA = @as(u32, 64);
pub const IDLFLAG_NONE = @as(u32, 0);
pub const IDLFLAG_FIN = @as(u32, 1);
pub const IDLFLAG_FOUT = @as(u32, 2);
pub const IDLFLAG_FLCID = @as(u32, 4);
pub const IDLFLAG_FRETVAL = @as(u32, 8);
pub const IMPLTYPEFLAG_FDEFAULT = @as(u32, 1);
pub const IMPLTYPEFLAG_FSOURCE = @as(u32, 2);
pub const IMPLTYPEFLAG_FRESTRICTED = @as(u32, 4);
pub const IMPLTYPEFLAG_FDEFAULTVTABLE = @as(u32, 8);
pub const DISPID_UNKNOWN = @as(i32, -1);
pub const DISPID_VALUE = @as(u32, 0);
pub const DISPID_PROPERTYPUT = @as(i32, -3);
pub const DISPID_NEWENUM = @as(i32, -4);
pub const DISPID_EVALUATE = @as(i32, -5);
pub const DISPID_CONSTRUCTOR = @as(i32, -6);
pub const DISPID_DESTRUCTOR = @as(i32, -7);
pub const DISPID_COLLECT = @as(i32, -8);
pub const STDOLE_MAJORVERNUM = @as(u32, 1);
pub const STDOLE_MINORVERNUM = @as(u32, 0);
pub const STDOLE_LCID = @as(u32, 0);
pub const STDOLE2_MAJORVERNUM = @as(u32, 2);
pub const STDOLE2_MINORVERNUM = @as(u32, 0);
pub const STDOLE2_LCID = @as(u32, 0);
pub const VARIANT_NOVALUEPROP = @as(u32, 1);
pub const VARIANT_ALPHABOOL = @as(u32, 2);
pub const VARIANT_NOUSEROVERRIDE = @as(u32, 4);
pub const VARIANT_CALENDAR_HIJRI = @as(u32, 8);
pub const VARIANT_LOCALBOOL = @as(u32, 16);
pub const VARIANT_CALENDAR_THAI = @as(u32, 32);
pub const VARIANT_CALENDAR_GREGORIAN = @as(u32, 64);
pub const VARIANT_USE_NLS = @as(u32, 128);
pub const LOCALE_USE_NLS = @as(u32, 268435456);
pub const VTDATEGRE_MAX = @as(u32, 2958465);
pub const VTDATEGRE_MIN = @as(i32, -657434);
pub const NUMPRS_LEADING_WHITE = @as(u32, 1);
pub const NUMPRS_TRAILING_WHITE = @as(u32, 2);
pub const NUMPRS_LEADING_PLUS = @as(u32, 4);
pub const NUMPRS_TRAILING_PLUS = @as(u32, 8);
pub const NUMPRS_LEADING_MINUS = @as(u32, 16);
pub const NUMPRS_TRAILING_MINUS = @as(u32, 32);
pub const NUMPRS_HEX_OCT = @as(u32, 64);
pub const NUMPRS_PARENS = @as(u32, 128);
pub const NUMPRS_DECIMAL = @as(u32, 256);
pub const NUMPRS_THOUSANDS = @as(u32, 512);
pub const NUMPRS_CURRENCY = @as(u32, 1024);
pub const NUMPRS_EXPONENT = @as(u32, 2048);
pub const NUMPRS_USE_ALL = @as(u32, 4096);
pub const NUMPRS_STD = @as(u32, 8191);
pub const NUMPRS_NEG = @as(u32, 65536);
pub const NUMPRS_INEXACT = @as(u32, 131072);
pub const VARCMP_LT = @as(u32, 0);
pub const VARCMP_EQ = @as(u32, 1);
pub const VARCMP_GT = @as(u32, 2);
pub const VARCMP_NULL = @as(u32, 3);
pub const MEMBERID_NIL = @as(i32, -1);
pub const ID_DEFAULTINST = @as(i32, -2);
pub const DISPATCH_METHOD = @as(u32, 1);
pub const DISPATCH_PROPERTYGET = @as(u32, 2);
pub const DISPATCH_PROPERTYPUT = @as(u32, 4);
pub const DISPATCH_PROPERTYPUTREF = @as(u32, 8);
pub const LOAD_TLB_AS_32BIT = @as(u32, 32);
pub const LOAD_TLB_AS_64BIT = @as(u32, 64);
pub const ACTIVEOBJECT_STRONG = @as(u32, 0);
pub const ACTIVEOBJECT_WEAK = @as(u32, 1);
pub const fdexNameCaseSensitive = @as(i32, 1);
pub const fdexNameEnsure = @as(i32, 2);
pub const fdexNameImplicit = @as(i32, 4);
pub const fdexNameCaseInsensitive = @as(i32, 8);
pub const fdexNameInternal = @as(i32, 16);
pub const fdexNameNoDynamicProperties = @as(i32, 32);
pub const fdexPropCanGet = @as(i32, 1);
pub const fdexPropCannotGet = @as(i32, 2);
pub const fdexPropCanPut = @as(i32, 4);
pub const fdexPropCannotPut = @as(i32, 8);
pub const fdexPropCanPutRef = @as(i32, 16);
pub const fdexPropCannotPutRef = @as(i32, 32);
pub const fdexPropNoSideEffects = @as(i32, 64);
pub const fdexPropDynamicType = @as(i32, 128);
pub const fdexPropCanCall = @as(i32, 256);
pub const fdexPropCannotCall = @as(i32, 512);
pub const fdexPropCanConstruct = @as(i32, 1024);
pub const fdexPropCannotConstruct = @as(i32, 2048);
pub const fdexPropCanSourceEvents = @as(i32, 4096);
pub const fdexPropCannotSourceEvents = @as(i32, 8192);
pub const fdexEnumDefault = @as(i32, 1);
pub const fdexEnumAll = @as(i32, 2);
pub const DISPATCH_CONSTRUCT = @as(u32, 16384);
pub const DISPID_STARTENUM = @as(i32, -1);
pub const SID_VariantConversion = Guid.initString("1f101481-bccd-11d0-9336-00a0c90dcaa9");
pub const SID_GetCaller = Guid.initString("4717cc40-bcb9-11d0-9336-00a0c90dcaa9");
pub const SID_ProvideRuntimeContext = Guid.initString("74a5040c-dd0c-48f0-ac85-194c3259180a");

//--------------------------------------------------------------------------------
// Section: Types (217)
//--------------------------------------------------------------------------------
pub const UPDFCACHE_FLAGS = enum(u32) {
    ALL = 2147483647,
    ALLBUTNODATACACHE = 2147483646,
    NORMALCACHE = 8,
    IFBLANK = 16,
    ONLYIFBLANK = 2147483648,
    NODATACACHE = 1,
    ONSAVECACHE = 2,
    ONSTOPCACHE = 4,
    IFBLANKORONSAVECACHE = 18,
    _,
    pub fn initFlags(o: struct {
        ALL: u1 = 0,
        ALLBUTNODATACACHE: u1 = 0,
        NORMALCACHE: u1 = 0,
        IFBLANK: u1 = 0,
        ONLYIFBLANK: u1 = 0,
        NODATACACHE: u1 = 0,
        ONSAVECACHE: u1 = 0,
        ONSTOPCACHE: u1 = 0,
        IFBLANKORONSAVECACHE: u1 = 0,
    }) UPDFCACHE_FLAGS {
        return @as(UPDFCACHE_FLAGS, @enumFromInt((if (o.ALL == 1) @intFromEnum(UPDFCACHE_FLAGS.ALL) else 0) | (if (o.ALLBUTNODATACACHE == 1) @intFromEnum(UPDFCACHE_FLAGS.ALLBUTNODATACACHE) else 0) | (if (o.NORMALCACHE == 1) @intFromEnum(UPDFCACHE_FLAGS.NORMALCACHE) else 0) | (if (o.IFBLANK == 1) @intFromEnum(UPDFCACHE_FLAGS.IFBLANK) else 0) | (if (o.ONLYIFBLANK == 1) @intFromEnum(UPDFCACHE_FLAGS.ONLYIFBLANK) else 0) | (if (o.NODATACACHE == 1) @intFromEnum(UPDFCACHE_FLAGS.NODATACACHE) else 0) | (if (o.ONSAVECACHE == 1) @intFromEnum(UPDFCACHE_FLAGS.ONSAVECACHE) else 0) | (if (o.ONSTOPCACHE == 1) @intFromEnum(UPDFCACHE_FLAGS.ONSTOPCACHE) else 0) | (if (o.IFBLANKORONSAVECACHE == 1) @intFromEnum(UPDFCACHE_FLAGS.IFBLANKORONSAVECACHE) else 0)));
    }
};
pub const UPDFCACHE_ALL = UPDFCACHE_FLAGS.ALL;
pub const UPDFCACHE_ALLBUTNODATACACHE = UPDFCACHE_FLAGS.ALLBUTNODATACACHE;
pub const UPDFCACHE_NORMALCACHE = UPDFCACHE_FLAGS.NORMALCACHE;
pub const UPDFCACHE_IFBLANK = UPDFCACHE_FLAGS.IFBLANK;
pub const UPDFCACHE_ONLYIFBLANK = UPDFCACHE_FLAGS.ONLYIFBLANK;
pub const UPDFCACHE_NODATACACHE = UPDFCACHE_FLAGS.NODATACACHE;
pub const UPDFCACHE_ONSAVECACHE = UPDFCACHE_FLAGS.ONSAVECACHE;
pub const UPDFCACHE_ONSTOPCACHE = UPDFCACHE_FLAGS.ONSTOPCACHE;
pub const UPDFCACHE_IFBLANKORONSAVECACHE = UPDFCACHE_FLAGS.IFBLANKORONSAVECACHE;

pub const ENUM_CONTROLS_WHICH_FLAGS = enum(u32) {
    W_WCH_SIBLING = 1,
    _WCH_CONTAINER = 2,
    _WCH_CONTAINED = 3,
    _WCH_ALL = 4,
    _WCH_FREVERSEDIR = 134217728,
    _WCH_FONLYAFTER = 268435456,
    _WCH_FONLYBEFORE = 536870912,
    _WCH_FSELECTED = 1073741824,
};
pub const GCW_WCH_SIBLING = ENUM_CONTROLS_WHICH_FLAGS.W_WCH_SIBLING;
pub const GC_WCH_CONTAINER = ENUM_CONTROLS_WHICH_FLAGS._WCH_CONTAINER;
pub const GC_WCH_CONTAINED = ENUM_CONTROLS_WHICH_FLAGS._WCH_CONTAINED;
pub const GC_WCH_ALL = ENUM_CONTROLS_WHICH_FLAGS._WCH_ALL;
pub const GC_WCH_FREVERSEDIR = ENUM_CONTROLS_WHICH_FLAGS._WCH_FREVERSEDIR;
pub const GC_WCH_FONLYAFTER = ENUM_CONTROLS_WHICH_FLAGS._WCH_FONLYAFTER;
pub const GC_WCH_FONLYBEFORE = ENUM_CONTROLS_WHICH_FLAGS._WCH_FONLYBEFORE;
pub const GC_WCH_FSELECTED = ENUM_CONTROLS_WHICH_FLAGS._WCH_FSELECTED;

pub const MULTICLASSINFO_FLAGS = enum(u32) {
    TYPEINFO = 1,
    NUMRESERVEDDISPIDS = 2,
    IIDPRIMARY = 4,
    IIDSOURCE = 8,
};
pub const MULTICLASSINFO_GETTYPEINFO = MULTICLASSINFO_FLAGS.TYPEINFO;
pub const MULTICLASSINFO_GETNUMRESERVEDDISPIDS = MULTICLASSINFO_FLAGS.NUMRESERVEDDISPIDS;
pub const MULTICLASSINFO_GETIIDPRIMARY = MULTICLASSINFO_FLAGS.IIDPRIMARY;
pub const MULTICLASSINFO_GETIIDSOURCE = MULTICLASSINFO_FLAGS.IIDSOURCE;

pub const VARENUM = enum(i32) {
    EMPTY = 0,
    NULL = 1,
    I2 = 2,
    I4 = 3,
    R4 = 4,
    R8 = 5,
    CY = 6,
    DATE = 7,
    BSTR = 8,
    DISPATCH = 9,
    ERROR = 10,
    BOOL = 11,
    VARIANT = 12,
    UNKNOWN = 13,
    DECIMAL = 14,
    I1 = 16,
    UI1 = 17,
    UI2 = 18,
    UI4 = 19,
    I8 = 20,
    UI8 = 21,
    INT = 22,
    UINT = 23,
    VOID = 24,
    HRESULT = 25,
    PTR = 26,
    SAFEARRAY = 27,
    CARRAY = 28,
    USERDEFINED = 29,
    LPSTR = 30,
    LPWSTR = 31,
    RECORD = 36,
    INT_PTR = 37,
    UINT_PTR = 38,
    FILETIME = 64,
    BLOB = 65,
    STREAM = 66,
    STORAGE = 67,
    STREAMED_OBJECT = 68,
    STORED_OBJECT = 69,
    BLOB_OBJECT = 70,
    CF = 71,
    CLSID = 72,
    VERSIONED_STREAM = 73,
    BSTR_BLOB = 4095,
    VECTOR = 4096,
    ARRAY = 8192,
    BYREF = 16384,
    RESERVED = 32768,
    ILLEGAL = 65535,
    // ILLEGALMASKED = 4095, this enum value conflicts with BSTR_BLOB
    // TYPEMASK = 4095, this enum value conflicts with BSTR_BLOB
};
pub const VT_EMPTY = VARENUM.EMPTY;
pub const VT_NULL = VARENUM.NULL;
pub const VT_I2 = VARENUM.I2;
pub const VT_I4 = VARENUM.I4;
pub const VT_R4 = VARENUM.R4;
pub const VT_R8 = VARENUM.R8;
pub const VT_CY = VARENUM.CY;
pub const VT_DATE = VARENUM.DATE;
pub const VT_BSTR = VARENUM.BSTR;
pub const VT_DISPATCH = VARENUM.DISPATCH;
pub const VT_ERROR = VARENUM.ERROR;
pub const VT_BOOL = VARENUM.BOOL;
pub const VT_VARIANT = VARENUM.VARIANT;
pub const VT_UNKNOWN = VARENUM.UNKNOWN;
pub const VT_DECIMAL = VARENUM.DECIMAL;
pub const VT_I1 = VARENUM.I1;
pub const VT_UI1 = VARENUM.UI1;
pub const VT_UI2 = VARENUM.UI2;
pub const VT_UI4 = VARENUM.UI4;
pub const VT_I8 = VARENUM.I8;
pub const VT_UI8 = VARENUM.UI8;
pub const VT_INT = VARENUM.INT;
pub const VT_UINT = VARENUM.UINT;
pub const VT_VOID = VARENUM.VOID;
pub const VT_HRESULT = VARENUM.HRESULT;
pub const VT_PTR = VARENUM.PTR;
pub const VT_SAFEARRAY = VARENUM.SAFEARRAY;
pub const VT_CARRAY = VARENUM.CARRAY;
pub const VT_USERDEFINED = VARENUM.USERDEFINED;
pub const VT_LPSTR = VARENUM.LPSTR;
pub const VT_LPWSTR = VARENUM.LPWSTR;
pub const VT_RECORD = VARENUM.RECORD;
pub const VT_INT_PTR = VARENUM.INT_PTR;
pub const VT_UINT_PTR = VARENUM.UINT_PTR;
pub const VT_FILETIME = VARENUM.FILETIME;
pub const VT_BLOB = VARENUM.BLOB;
pub const VT_STREAM = VARENUM.STREAM;
pub const VT_STORAGE = VARENUM.STORAGE;
pub const VT_STREAMED_OBJECT = VARENUM.STREAMED_OBJECT;
pub const VT_STORED_OBJECT = VARENUM.STORED_OBJECT;
pub const VT_BLOB_OBJECT = VARENUM.BLOB_OBJECT;
pub const VT_CF = VARENUM.CF;
pub const VT_CLSID = VARENUM.CLSID;
pub const VT_VERSIONED_STREAM = VARENUM.VERSIONED_STREAM;
pub const VT_BSTR_BLOB = VARENUM.BSTR_BLOB;
pub const VT_VECTOR = VARENUM.VECTOR;
pub const VT_ARRAY = VARENUM.ARRAY;
pub const VT_BYREF = VARENUM.BYREF;
pub const VT_RESERVED = VARENUM.RESERVED;
pub const VT_ILLEGAL = VARENUM.ILLEGAL;
pub const VT_ILLEGALMASKED = VARENUM.BSTR_BLOB;
pub const VT_TYPEMASK = VARENUM.BSTR_BLOB;

pub const _wireSAFEARR_BSTR = extern struct {
    Size: u32,
    aBstr: ?*?*FLAGGED_WORD_BLOB,
};

pub const _wireSAFEARR_UNKNOWN = extern struct {
    Size: u32,
    apUnknown: ?*?*IUnknown,
};

pub const _wireSAFEARR_DISPATCH = extern struct {
    Size: u32,
    apDispatch: ?*?*IDispatch,
};

pub const _wireSAFEARR_VARIANT = extern struct {
    Size: u32,
    aVariant: ?*?*_wireVARIANT,
};

pub const _wireSAFEARR_BRECORD = extern struct {
    Size: u32,
    aRecord: ?*?*_wireBRECORD,
};

pub const _wireSAFEARR_HAVEIID = extern struct {
    Size: u32,
    apUnknown: ?*?*IUnknown,
    iid: Guid,
};

pub const SF_TYPE = enum(i32) {
    ERROR = 10,
    I1 = 16,
    I2 = 2,
    I4 = 3,
    I8 = 20,
    BSTR = 8,
    UNKNOWN = 13,
    DISPATCH = 9,
    VARIANT = 12,
    RECORD = 36,
    HAVEIID = 32781,
};
pub const SF_ERROR = SF_TYPE.ERROR;
pub const SF_I1 = SF_TYPE.I1;
pub const SF_I2 = SF_TYPE.I2;
pub const SF_I4 = SF_TYPE.I4;
pub const SF_I8 = SF_TYPE.I8;
pub const SF_BSTR = SF_TYPE.BSTR;
pub const SF_UNKNOWN = SF_TYPE.UNKNOWN;
pub const SF_DISPATCH = SF_TYPE.DISPATCH;
pub const SF_VARIANT = SF_TYPE.VARIANT;
pub const SF_RECORD = SF_TYPE.RECORD;
pub const SF_HAVEIID = SF_TYPE.HAVEIID;

pub const _wireSAFEARRAY_UNION = extern struct {
    sfType: u32,
    u: extern struct {
        BstrStr: _wireSAFEARR_BSTR,
        UnknownStr: _wireSAFEARR_UNKNOWN,
        DispatchStr: _wireSAFEARR_DISPATCH,
        VariantStr: _wireSAFEARR_VARIANT,
        RecordStr: _wireSAFEARR_BRECORD,
        HaveIidStr: _wireSAFEARR_HAVEIID,
        ByteStr: BYTE_SIZEDARR,
        WordStr: SHORT_SIZEDARR,
        LongStr: LONG_SIZEDARR,
        HyperStr: HYPER_SIZEDARR,
    },
};

pub const _wireSAFEARRAY = extern struct {
    cDims: u16,
    fFeatures: u16,
    cbElements: u32,
    cLocks: u32,
    uArrayStructs: _wireSAFEARRAY_UNION,
    rgsabound: [1]SAFEARRAYBOUND,
};

pub const _wireBRECORD = extern struct {
    fFlags: u32,
    clSize: u32,
    pRecInfo: ?*IRecordInfo,
    pRecord: ?*u8,
};

pub const _wireVARIANT = extern struct {
    clSize: u32,
    rpcReserved: u32,
    vt: u16,
    wReserved1: u16,
    wReserved2: u16,
    wReserved3: u16,
    Anonymous: extern union {
        llVal: i64,
        lVal: i32,
        bVal: u8,
        iVal: i16,
        fltVal: f32,
        dblVal: f64,
        boolVal: i16,
        scode: i32,
        cyVal: CY,
        date: f64,
        bstrVal: ?*FLAGGED_WORD_BLOB,
        punkVal: ?*IUnknown,
        pdispVal: ?*IDispatch,
        parray: ?*?*_wireSAFEARRAY,
        brecVal: ?*_wireBRECORD,
        pbVal: ?*u8,
        piVal: ?*i16,
        plVal: ?*i32,
        pllVal: ?*i64,
        pfltVal: ?*f32,
        pdblVal: ?*f64,
        pboolVal: ?*i16,
        pscode: ?*i32,
        pcyVal: ?*CY,
        pdate: ?*f64,
        pbstrVal: ?*?*FLAGGED_WORD_BLOB,
        ppunkVal: ?*?*IUnknown,
        ppdispVal: ?*?*IDispatch,
        pparray: ?*?*?*_wireSAFEARRAY,
        pvarVal: ?*?*_wireVARIANT,
        cVal: CHAR,
        uiVal: u16,
        ulVal: u32,
        ullVal: u64,
        intVal: i32,
        uintVal: u32,
        decVal: DECIMAL,
        pdecVal: ?*DECIMAL,
        pcVal: ?PSTR,
        puiVal: ?*u16,
        pulVal: ?*u32,
        pullVal: ?*u64,
        pintVal: ?*i32,
        puintVal: ?*u32,
    },
};

pub const ARRAYDESC = extern struct {
    tdescElem: TYPEDESC,
    cDims: u16,
    rgbounds: [1]SAFEARRAYBOUND,
};

pub const PARAMDESCEX = extern struct {
    cBytes: u32,
    varDefaultValue: VARIANT,
};

pub const PARAMDESC = extern struct {
    pparamdescex: ?*PARAMDESCEX,
    wParamFlags: u16,
};

pub const TYPEFLAGS = enum(i32) {
    APPOBJECT = 1,
    CANCREATE = 2,
    LICENSED = 4,
    PREDECLID = 8,
    HIDDEN = 16,
    CONTROL = 32,
    DUAL = 64,
    NONEXTENSIBLE = 128,
    OLEAUTOMATION = 256,
    RESTRICTED = 512,
    AGGREGATABLE = 1024,
    REPLACEABLE = 2048,
    DISPATCHABLE = 4096,
    REVERSEBIND = 8192,
    PROXY = 16384,
};
pub const TYPEFLAG_FAPPOBJECT = TYPEFLAGS.APPOBJECT;
pub const TYPEFLAG_FCANCREATE = TYPEFLAGS.CANCREATE;
pub const TYPEFLAG_FLICENSED = TYPEFLAGS.LICENSED;
pub const TYPEFLAG_FPREDECLID = TYPEFLAGS.PREDECLID;
pub const TYPEFLAG_FHIDDEN = TYPEFLAGS.HIDDEN;
pub const TYPEFLAG_FCONTROL = TYPEFLAGS.CONTROL;
pub const TYPEFLAG_FDUAL = TYPEFLAGS.DUAL;
pub const TYPEFLAG_FNONEXTENSIBLE = TYPEFLAGS.NONEXTENSIBLE;
pub const TYPEFLAG_FOLEAUTOMATION = TYPEFLAGS.OLEAUTOMATION;
pub const TYPEFLAG_FRESTRICTED = TYPEFLAGS.RESTRICTED;
pub const TYPEFLAG_FAGGREGATABLE = TYPEFLAGS.AGGREGATABLE;
pub const TYPEFLAG_FREPLACEABLE = TYPEFLAGS.REPLACEABLE;
pub const TYPEFLAG_FDISPATCHABLE = TYPEFLAGS.DISPATCHABLE;
pub const TYPEFLAG_FREVERSEBIND = TYPEFLAGS.REVERSEBIND;
pub const TYPEFLAG_FPROXY = TYPEFLAGS.PROXY;

pub const FUNCFLAGS = enum(i32) {
    RESTRICTED = 1,
    SOURCE = 2,
    BINDABLE = 4,
    REQUESTEDIT = 8,
    DISPLAYBIND = 16,
    DEFAULTBIND = 32,
    HIDDEN = 64,
    USESGETLASTERROR = 128,
    DEFAULTCOLLELEM = 256,
    UIDEFAULT = 512,
    NONBROWSABLE = 1024,
    REPLACEABLE = 2048,
    IMMEDIATEBIND = 4096,
};
pub const FUNCFLAG_FRESTRICTED = FUNCFLAGS.RESTRICTED;
pub const FUNCFLAG_FSOURCE = FUNCFLAGS.SOURCE;
pub const FUNCFLAG_FBINDABLE = FUNCFLAGS.BINDABLE;
pub const FUNCFLAG_FREQUESTEDIT = FUNCFLAGS.REQUESTEDIT;
pub const FUNCFLAG_FDISPLAYBIND = FUNCFLAGS.DISPLAYBIND;
pub const FUNCFLAG_FDEFAULTBIND = FUNCFLAGS.DEFAULTBIND;
pub const FUNCFLAG_FHIDDEN = FUNCFLAGS.HIDDEN;
pub const FUNCFLAG_FUSESGETLASTERROR = FUNCFLAGS.USESGETLASTERROR;
pub const FUNCFLAG_FDEFAULTCOLLELEM = FUNCFLAGS.DEFAULTCOLLELEM;
pub const FUNCFLAG_FUIDEFAULT = FUNCFLAGS.UIDEFAULT;
pub const FUNCFLAG_FNONBROWSABLE = FUNCFLAGS.NONBROWSABLE;
pub const FUNCFLAG_FREPLACEABLE = FUNCFLAGS.REPLACEABLE;
pub const FUNCFLAG_FIMMEDIATEBIND = FUNCFLAGS.IMMEDIATEBIND;

pub const VARFLAGS = enum(i32) {
    READONLY = 1,
    SOURCE = 2,
    BINDABLE = 4,
    REQUESTEDIT = 8,
    DISPLAYBIND = 16,
    DEFAULTBIND = 32,
    HIDDEN = 64,
    RESTRICTED = 128,
    DEFAULTCOLLELEM = 256,
    UIDEFAULT = 512,
    NONBROWSABLE = 1024,
    REPLACEABLE = 2048,
    IMMEDIATEBIND = 4096,
};
pub const VARFLAG_FREADONLY = VARFLAGS.READONLY;
pub const VARFLAG_FSOURCE = VARFLAGS.SOURCE;
pub const VARFLAG_FBINDABLE = VARFLAGS.BINDABLE;
pub const VARFLAG_FREQUESTEDIT = VARFLAGS.REQUESTEDIT;
pub const VARFLAG_FDISPLAYBIND = VARFLAGS.DISPLAYBIND;
pub const VARFLAG_FDEFAULTBIND = VARFLAGS.DEFAULTBIND;
pub const VARFLAG_FHIDDEN = VARFLAGS.HIDDEN;
pub const VARFLAG_FRESTRICTED = VARFLAGS.RESTRICTED;
pub const VARFLAG_FDEFAULTCOLLELEM = VARFLAGS.DEFAULTCOLLELEM;
pub const VARFLAG_FUIDEFAULT = VARFLAGS.UIDEFAULT;
pub const VARFLAG_FNONBROWSABLE = VARFLAGS.NONBROWSABLE;
pub const VARFLAG_FREPLACEABLE = VARFLAGS.REPLACEABLE;
pub const VARFLAG_FIMMEDIATEBIND = VARFLAGS.IMMEDIATEBIND;

pub const CLEANLOCALSTORAGE = extern struct {
    pInterface: ?*IUnknown,
    pStorage: ?*anyopaque,
    flags: u32,
};

const IID_ICreateTypeInfo_Value = Guid.initString("00020405-0000-0000-c000-000000000046");
pub const IID_ICreateTypeInfo = &IID_ICreateTypeInfo_Value;
pub const ICreateTypeInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetGuid: *const fn (
            self: *const ICreateTypeInfo,
            guid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypeFlags: *const fn (
            self: *const ICreateTypeInfo,
            u_type_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDocString: *const fn (
            self: *const ICreateTypeInfo,
            p_str_doc: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHelpContext: *const fn (
            self: *const ICreateTypeInfo,
            dw_help_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVersion: *const fn (
            self: *const ICreateTypeInfo,
            w_major_ver_num: u16,
            w_minor_ver_num: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRefTypeInfo: *const fn (
            self: *const ICreateTypeInfo,
            p_t_info: ?*ITypeInfo,
            ph_ref_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFuncDesc: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            p_func_desc: ?*FUNCDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddImplType: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            h_ref_type: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetImplTypeFlags: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            impl_type_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlignment: *const fn (
            self: *const ICreateTypeInfo,
            cb_alignment: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSchema: *const fn (
            self: *const ICreateTypeInfo,
            p_str_schema: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddVarDesc: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            p_var_desc: ?*VARDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFuncAndParamNames: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            rgsz_names: [*]?PWSTR,
            c_names: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVarName: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            sz_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypeDescAlias: *const fn (
            self: *const ICreateTypeInfo,
            p_t_desc_alias: ?*TYPEDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DefineFuncAsDllEntry: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            sz_dll_name: ?PWSTR,
            sz_proc_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFuncDocString: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            sz_doc_string: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVarDocString: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            sz_doc_string: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFuncHelpContext: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            dw_help_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVarHelpContext: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            dw_help_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMops: *const fn (
            self: *const ICreateTypeInfo,
            index: u32,
            bstr_mops: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypeIdldesc: *const fn (
            self: *const ICreateTypeInfo,
            p_idl_desc: ?*IDLDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LayOut: *const fn (
            self: *const ICreateTypeInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setGuid(self: *const T, guid_: ?*const Guid) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetGuid(@as(*const ICreateTypeInfo, @ptrCast(self)), guid_);
            }
            pub inline fn setTypeFlags(self: *const T, u_type_flags_: u32) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetTypeFlags(@as(*const ICreateTypeInfo, @ptrCast(self)), u_type_flags_);
            }
            pub inline fn setDocString(self: *const T, p_str_doc_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetDocString(@as(*const ICreateTypeInfo, @ptrCast(self)), p_str_doc_);
            }
            pub inline fn setHelpContext(self: *const T, dw_help_context_: u32) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetHelpContext(@as(*const ICreateTypeInfo, @ptrCast(self)), dw_help_context_);
            }
            pub inline fn setVersion(self: *const T, w_major_ver_num_: u16, w_minor_ver_num_: u16) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetVersion(@as(*const ICreateTypeInfo, @ptrCast(self)), w_major_ver_num_, w_minor_ver_num_);
            }
            pub inline fn addRefTypeInfo(self: *const T, p_t_info_: ?*ITypeInfo, ph_ref_type_: ?*u32) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).AddRefTypeInfo(@as(*const ICreateTypeInfo, @ptrCast(self)), p_t_info_, ph_ref_type_);
            }
            pub inline fn addFuncDesc(self: *const T, index_: u32, p_func_desc_: ?*FUNCDESC) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).AddFuncDesc(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, p_func_desc_);
            }
            pub inline fn addImplType(self: *const T, index_: u32, h_ref_type_: u32) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).AddImplType(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, h_ref_type_);
            }
            pub inline fn setImplTypeFlags(self: *const T, index_: u32, impl_type_flags_: i32) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetImplTypeFlags(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, impl_type_flags_);
            }
            pub inline fn setAlignment(self: *const T, cb_alignment_: u16) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetAlignment(@as(*const ICreateTypeInfo, @ptrCast(self)), cb_alignment_);
            }
            pub inline fn setSchema(self: *const T, p_str_schema_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetSchema(@as(*const ICreateTypeInfo, @ptrCast(self)), p_str_schema_);
            }
            pub inline fn addVarDesc(self: *const T, index_: u32, p_var_desc_: ?*VARDESC) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).AddVarDesc(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, p_var_desc_);
            }
            pub inline fn setFuncAndParamNames(self: *const T, index_: u32, rgsz_names_: [*]?PWSTR, c_names_: u32) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetFuncAndParamNames(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, rgsz_names_, c_names_);
            }
            pub inline fn setVarName(self: *const T, index_: u32, sz_name_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetVarName(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, sz_name_);
            }
            pub inline fn setTypeDescAlias(self: *const T, p_t_desc_alias_: ?*TYPEDESC) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetTypeDescAlias(@as(*const ICreateTypeInfo, @ptrCast(self)), p_t_desc_alias_);
            }
            pub inline fn defineFuncAsDllEntry(self: *const T, index_: u32, sz_dll_name_: ?PWSTR, sz_proc_name_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).DefineFuncAsDllEntry(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, sz_dll_name_, sz_proc_name_);
            }
            pub inline fn setFuncDocString(self: *const T, index_: u32, sz_doc_string_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetFuncDocString(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, sz_doc_string_);
            }
            pub inline fn setVarDocString(self: *const T, index_: u32, sz_doc_string_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetVarDocString(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, sz_doc_string_);
            }
            pub inline fn setFuncHelpContext(self: *const T, index_: u32, dw_help_context_: u32) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetFuncHelpContext(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, dw_help_context_);
            }
            pub inline fn setVarHelpContext(self: *const T, index_: u32, dw_help_context_: u32) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetVarHelpContext(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, dw_help_context_);
            }
            pub inline fn setMops(self: *const T, index_: u32, bstr_mops_: ?BSTR) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetMops(@as(*const ICreateTypeInfo, @ptrCast(self)), index_, bstr_mops_);
            }
            pub inline fn setTypeIdldesc(self: *const T, p_idl_desc_: ?*IDLDESC) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).SetTypeIdldesc(@as(*const ICreateTypeInfo, @ptrCast(self)), p_idl_desc_);
            }
            pub inline fn layOut(self: *const T) HRESULT {
                return @as(*const ICreateTypeInfo.VTable, @ptrCast(self.vtable)).LayOut(@as(*const ICreateTypeInfo, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreateTypeInfo2_Value = Guid.initString("0002040e-0000-0000-c000-000000000046");
pub const IID_ICreateTypeInfo2 = &IID_ICreateTypeInfo2_Value;
pub const ICreateTypeInfo2 = extern struct {
    pub const VTable = extern struct {
        base: ICreateTypeInfo.VTable,
        DeleteFuncDesc: *const fn (
            self: *const ICreateTypeInfo2,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFuncDescByMemId: *const fn (
            self: *const ICreateTypeInfo2,
            memid: i32,
            inv_kind: INVOKEKIND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteVarDesc: *const fn (
            self: *const ICreateTypeInfo2,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteVarDescByMemId: *const fn (
            self: *const ICreateTypeInfo2,
            memid: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteImplType: *const fn (
            self: *const ICreateTypeInfo2,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCustData: *const fn (
            self: *const ICreateTypeInfo2,
            guid: ?*const Guid,
            p_var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFuncCustData: *const fn (
            self: *const ICreateTypeInfo2,
            index: u32,
            guid: ?*const Guid,
            p_var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParamCustData: *const fn (
            self: *const ICreateTypeInfo2,
            index_func: u32,
            index_param: u32,
            guid: ?*const Guid,
            p_var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVarCustData: *const fn (
            self: *const ICreateTypeInfo2,
            index: u32,
            guid: ?*const Guid,
            p_var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetImplTypeCustData: *const fn (
            self: *const ICreateTypeInfo2,
            index: u32,
            guid: ?*const Guid,
            p_var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHelpStringContext: *const fn (
            self: *const ICreateTypeInfo2,
            dw_help_string_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFuncHelpStringContext: *const fn (
            self: *const ICreateTypeInfo2,
            index: u32,
            dw_help_string_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVarHelpStringContext: *const fn (
            self: *const ICreateTypeInfo2,
            index: u32,
            dw_help_string_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invalidate: *const fn (
            self: *const ICreateTypeInfo2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: *const fn (
            self: *const ICreateTypeInfo2,
            sz_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICreateTypeInfo.MethodMixin(T);
            pub inline fn deleteFuncDesc(self: *const T, index_: u32) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).DeleteFuncDesc(@as(*const ICreateTypeInfo2, @ptrCast(self)), index_);
            }
            pub inline fn deleteFuncDescByMemId(self: *const T, memid_: i32, inv_kind_: INVOKEKIND) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).DeleteFuncDescByMemId(@as(*const ICreateTypeInfo2, @ptrCast(self)), memid_, inv_kind_);
            }
            pub inline fn deleteVarDesc(self: *const T, index_: u32) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).DeleteVarDesc(@as(*const ICreateTypeInfo2, @ptrCast(self)), index_);
            }
            pub inline fn deleteVarDescByMemId(self: *const T, memid_: i32) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).DeleteVarDescByMemId(@as(*const ICreateTypeInfo2, @ptrCast(self)), memid_);
            }
            pub inline fn deleteImplType(self: *const T, index_: u32) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).DeleteImplType(@as(*const ICreateTypeInfo2, @ptrCast(self)), index_);
            }
            pub inline fn setCustData(self: *const T, guid_: ?*const Guid, p_var_val_: ?*VARIANT) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).SetCustData(@as(*const ICreateTypeInfo2, @ptrCast(self)), guid_, p_var_val_);
            }
            pub inline fn setFuncCustData(self: *const T, index_: u32, guid_: ?*const Guid, p_var_val_: ?*VARIANT) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).SetFuncCustData(@as(*const ICreateTypeInfo2, @ptrCast(self)), index_, guid_, p_var_val_);
            }
            pub inline fn setParamCustData(self: *const T, index_func_: u32, index_param_: u32, guid_: ?*const Guid, p_var_val_: ?*VARIANT) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).SetParamCustData(@as(*const ICreateTypeInfo2, @ptrCast(self)), index_func_, index_param_, guid_, p_var_val_);
            }
            pub inline fn setVarCustData(self: *const T, index_: u32, guid_: ?*const Guid, p_var_val_: ?*VARIANT) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).SetVarCustData(@as(*const ICreateTypeInfo2, @ptrCast(self)), index_, guid_, p_var_val_);
            }
            pub inline fn setImplTypeCustData(self: *const T, index_: u32, guid_: ?*const Guid, p_var_val_: ?*VARIANT) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).SetImplTypeCustData(@as(*const ICreateTypeInfo2, @ptrCast(self)), index_, guid_, p_var_val_);
            }
            pub inline fn setHelpStringContext(self: *const T, dw_help_string_context_: u32) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).SetHelpStringContext(@as(*const ICreateTypeInfo2, @ptrCast(self)), dw_help_string_context_);
            }
            pub inline fn setFuncHelpStringContext(self: *const T, index_: u32, dw_help_string_context_: u32) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).SetFuncHelpStringContext(@as(*const ICreateTypeInfo2, @ptrCast(self)), index_, dw_help_string_context_);
            }
            pub inline fn setVarHelpStringContext(self: *const T, index_: u32, dw_help_string_context_: u32) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).SetVarHelpStringContext(@as(*const ICreateTypeInfo2, @ptrCast(self)), index_, dw_help_string_context_);
            }
            pub inline fn invalidate(self: *const T) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).Invalidate(@as(*const ICreateTypeInfo2, @ptrCast(self)));
            }
            pub inline fn setName(self: *const T, sz_name_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeInfo2.VTable, @ptrCast(self.vtable)).SetName(@as(*const ICreateTypeInfo2, @ptrCast(self)), sz_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreateTypeLib_Value = Guid.initString("00020406-0000-0000-c000-000000000046");
pub const IID_ICreateTypeLib = &IID_ICreateTypeLib_Value;
pub const ICreateTypeLib = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTypeInfo: *const fn (
            self: *const ICreateTypeLib,
            sz_name: ?PWSTR,
            tkind: TYPEKIND,
            pp_c_t_info: ?*?*ICreateTypeInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: *const fn (
            self: *const ICreateTypeLib,
            sz_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVersion: *const fn (
            self: *const ICreateTypeLib,
            w_major_ver_num: u16,
            w_minor_ver_num: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGuid: *const fn (
            self: *const ICreateTypeLib,
            guid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDocString: *const fn (
            self: *const ICreateTypeLib,
            sz_doc: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHelpFileName: *const fn (
            self: *const ICreateTypeLib,
            sz_help_file_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHelpContext: *const fn (
            self: *const ICreateTypeLib,
            dw_help_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLcid: *const fn (
            self: *const ICreateTypeLib,
            lcid: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLibFlags: *const fn (
            self: *const ICreateTypeLib,
            u_lib_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAllChanges: *const fn (
            self: *const ICreateTypeLib,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createTypeInfo(self: *const T, sz_name_: ?PWSTR, tkind_: TYPEKIND, pp_c_t_info_: ?*?*ICreateTypeInfo) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).CreateTypeInfo(@as(*const ICreateTypeLib, @ptrCast(self)), sz_name_, tkind_, pp_c_t_info_);
            }
            pub inline fn setName(self: *const T, sz_name_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).SetName(@as(*const ICreateTypeLib, @ptrCast(self)), sz_name_);
            }
            pub inline fn setVersion(self: *const T, w_major_ver_num_: u16, w_minor_ver_num_: u16) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).SetVersion(@as(*const ICreateTypeLib, @ptrCast(self)), w_major_ver_num_, w_minor_ver_num_);
            }
            pub inline fn setGuid(self: *const T, guid_: ?*const Guid) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).SetGuid(@as(*const ICreateTypeLib, @ptrCast(self)), guid_);
            }
            pub inline fn setDocString(self: *const T, sz_doc_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).SetDocString(@as(*const ICreateTypeLib, @ptrCast(self)), sz_doc_);
            }
            pub inline fn setHelpFileName(self: *const T, sz_help_file_name_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).SetHelpFileName(@as(*const ICreateTypeLib, @ptrCast(self)), sz_help_file_name_);
            }
            pub inline fn setHelpContext(self: *const T, dw_help_context_: u32) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).SetHelpContext(@as(*const ICreateTypeLib, @ptrCast(self)), dw_help_context_);
            }
            pub inline fn setLcid(self: *const T, lcid_: u32) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).SetLcid(@as(*const ICreateTypeLib, @ptrCast(self)), lcid_);
            }
            pub inline fn setLibFlags(self: *const T, u_lib_flags_: u32) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).SetLibFlags(@as(*const ICreateTypeLib, @ptrCast(self)), u_lib_flags_);
            }
            pub inline fn saveAllChanges(self: *const T) HRESULT {
                return @as(*const ICreateTypeLib.VTable, @ptrCast(self.vtable)).SaveAllChanges(@as(*const ICreateTypeLib, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreateTypeLib2_Value = Guid.initString("0002040f-0000-0000-c000-000000000046");
pub const IID_ICreateTypeLib2 = &IID_ICreateTypeLib2_Value;
pub const ICreateTypeLib2 = extern struct {
    pub const VTable = extern struct {
        base: ICreateTypeLib.VTable,
        DeleteTypeInfo: *const fn (
            self: *const ICreateTypeLib2,
            sz_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCustData: *const fn (
            self: *const ICreateTypeLib2,
            guid: ?*const Guid,
            p_var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHelpStringContext: *const fn (
            self: *const ICreateTypeLib2,
            dw_help_string_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHelpStringDll: *const fn (
            self: *const ICreateTypeLib2,
            sz_file_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICreateTypeLib.MethodMixin(T);
            pub inline fn deleteTypeInfo(self: *const T, sz_name_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeLib2.VTable, @ptrCast(self.vtable)).DeleteTypeInfo(@as(*const ICreateTypeLib2, @ptrCast(self)), sz_name_);
            }
            pub inline fn setCustData(self: *const T, guid_: ?*const Guid, p_var_val_: ?*VARIANT) HRESULT {
                return @as(*const ICreateTypeLib2.VTable, @ptrCast(self.vtable)).SetCustData(@as(*const ICreateTypeLib2, @ptrCast(self)), guid_, p_var_val_);
            }
            pub inline fn setHelpStringContext(self: *const T, dw_help_string_context_: u32) HRESULT {
                return @as(*const ICreateTypeLib2.VTable, @ptrCast(self.vtable)).SetHelpStringContext(@as(*const ICreateTypeLib2, @ptrCast(self)), dw_help_string_context_);
            }
            pub inline fn setHelpStringDll(self: *const T, sz_file_name_: ?PWSTR) HRESULT {
                return @as(*const ICreateTypeLib2.VTable, @ptrCast(self.vtable)).SetHelpStringDll(@as(*const ICreateTypeLib2, @ptrCast(self)), sz_file_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumVARIANT_Value = Guid.initString("00020404-0000-0000-c000-000000000046");
pub const IID_IEnumVARIANT = &IID_IEnumVARIANT_Value;
pub const IEnumVARIANT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumVARIANT,
            celt: u32,
            rg_var: [*]VARIANT,
            p_celt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumVARIANT,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumVARIANT,
            pp_enum: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rg_var_: [*]VARIANT, p_celt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumVARIANT.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumVARIANT, @ptrCast(self)), celt_, rg_var_, p_celt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumVARIANT.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumVARIANT, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumVARIANT.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumVARIANT, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IEnumVARIANT.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumVARIANT, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const LIBFLAGS = enum(i32) {
    RESTRICTED = 1,
    CONTROL = 2,
    HIDDEN = 4,
    HASDISKIMAGE = 8,
};
pub const LIBFLAG_FRESTRICTED = LIBFLAGS.RESTRICTED;
pub const LIBFLAG_FCONTROL = LIBFLAGS.CONTROL;
pub const LIBFLAG_FHIDDEN = LIBFLAGS.HIDDEN;
pub const LIBFLAG_FHASDISKIMAGE = LIBFLAGS.HASDISKIMAGE;

pub const CHANGEKIND = enum(i32) {
    ADDMEMBER = 0,
    DELETEMEMBER = 1,
    SETNAMES = 2,
    SETDOCUMENTATION = 3,
    GENERAL = 4,
    INVALIDATE = 5,
    CHANGEFAILED = 6,
    MAX = 7,
};
pub const CHANGEKIND_ADDMEMBER = CHANGEKIND.ADDMEMBER;
pub const CHANGEKIND_DELETEMEMBER = CHANGEKIND.DELETEMEMBER;
pub const CHANGEKIND_SETNAMES = CHANGEKIND.SETNAMES;
pub const CHANGEKIND_SETDOCUMENTATION = CHANGEKIND.SETDOCUMENTATION;
pub const CHANGEKIND_GENERAL = CHANGEKIND.GENERAL;
pub const CHANGEKIND_INVALIDATE = CHANGEKIND.INVALIDATE;
pub const CHANGEKIND_CHANGEFAILED = CHANGEKIND.CHANGEFAILED;
pub const CHANGEKIND_MAX = CHANGEKIND.MAX;

const IID_ITypeChangeEvents_Value = Guid.initString("00020410-0000-0000-c000-000000000046");
pub const IID_ITypeChangeEvents = &IID_ITypeChangeEvents_Value;
pub const ITypeChangeEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestTypeChange: *const fn (
            self: *const ITypeChangeEvents,
            change_kind: CHANGEKIND,
            p_t_info_before: ?*ITypeInfo,
            p_str_name: ?PWSTR,
            pf_cancel: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AfterTypeChange: *const fn (
            self: *const ITypeChangeEvents,
            change_kind: CHANGEKIND,
            p_t_info_after: ?*ITypeInfo,
            p_str_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn requestTypeChange(self: *const T, change_kind_: CHANGEKIND, p_t_info_before_: ?*ITypeInfo, p_str_name_: ?PWSTR, pf_cancel_: ?*i32) HRESULT {
                return @as(*const ITypeChangeEvents.VTable, @ptrCast(self.vtable)).RequestTypeChange(@as(*const ITypeChangeEvents, @ptrCast(self)), change_kind_, p_t_info_before_, p_str_name_, pf_cancel_);
            }
            pub inline fn afterTypeChange(self: *const T, change_kind_: CHANGEKIND, p_t_info_after_: ?*ITypeInfo, p_str_name_: ?PWSTR) HRESULT {
                return @as(*const ITypeChangeEvents.VTable, @ptrCast(self.vtable)).AfterTypeChange(@as(*const ITypeChangeEvents, @ptrCast(self)), change_kind_, p_t_info_after_, p_str_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreateErrorInfo_Value = Guid.initString("22f03340-547d-101b-8e65-08002b2bd119");
pub const IID_ICreateErrorInfo = &IID_ICreateErrorInfo_Value;
pub const ICreateErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetGUID: *const fn (
            self: *const ICreateErrorInfo,
            rguid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSource: *const fn (
            self: *const ICreateErrorInfo,
            sz_source: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: *const fn (
            self: *const ICreateErrorInfo,
            sz_description: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHelpFile: *const fn (
            self: *const ICreateErrorInfo,
            sz_help_file: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHelpContext: *const fn (
            self: *const ICreateErrorInfo,
            dw_help_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setGUID(self: *const T, rguid_: ?*const Guid) HRESULT {
                return @as(*const ICreateErrorInfo.VTable, @ptrCast(self.vtable)).SetGUID(@as(*const ICreateErrorInfo, @ptrCast(self)), rguid_);
            }
            pub inline fn setSource(self: *const T, sz_source_: ?PWSTR) HRESULT {
                return @as(*const ICreateErrorInfo.VTable, @ptrCast(self.vtable)).SetSource(@as(*const ICreateErrorInfo, @ptrCast(self)), sz_source_);
            }
            pub inline fn setDescription(self: *const T, sz_description_: ?PWSTR) HRESULT {
                return @as(*const ICreateErrorInfo.VTable, @ptrCast(self.vtable)).SetDescription(@as(*const ICreateErrorInfo, @ptrCast(self)), sz_description_);
            }
            pub inline fn setHelpFile(self: *const T, sz_help_file_: ?PWSTR) HRESULT {
                return @as(*const ICreateErrorInfo.VTable, @ptrCast(self.vtable)).SetHelpFile(@as(*const ICreateErrorInfo, @ptrCast(self)), sz_help_file_);
            }
            pub inline fn setHelpContext(self: *const T, dw_help_context_: u32) HRESULT {
                return @as(*const ICreateErrorInfo.VTable, @ptrCast(self.vtable)).SetHelpContext(@as(*const ICreateErrorInfo, @ptrCast(self)), dw_help_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITypeFactory_Value = Guid.initString("0000002e-0000-0000-c000-000000000046");
pub const IID_ITypeFactory = &IID_ITypeFactory_Value;
pub const ITypeFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateFromTypeInfo: *const fn (
            self: *const ITypeFactory,
            p_type_info: ?*ITypeInfo,
            riid: ?*const Guid,
            ppv: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createFromTypeInfo(self: *const T, p_type_info_: ?*ITypeInfo, riid_: ?*const Guid, ppv_: ?*?*IUnknown) HRESULT {
                return @as(*const ITypeFactory.VTable, @ptrCast(self.vtable)).CreateFromTypeInfo(@as(*const ITypeFactory, @ptrCast(self)), p_type_info_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITypeMarshal_Value = Guid.initString("0000002d-0000-0000-c000-000000000046");
pub const IID_ITypeMarshal = &IID_ITypeMarshal_Value;
pub const ITypeMarshal = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Size: *const fn (
            self: *const ITypeMarshal,
            pv_type: ?*anyopaque,
            dw_dest_context: u32,
            pv_dest_context: ?*anyopaque,
            p_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Marshal: *const fn (
            self: *const ITypeMarshal,
            pv_type: ?*anyopaque,
            dw_dest_context: u32,
            pv_dest_context: ?*anyopaque,
            cb_buffer_length: u32,
            // TODO: what to do with BytesParamIndex 3?
            p_buffer: ?*u8,
            pcb_written: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unmarshal: *const fn (
            self: *const ITypeMarshal,
            pv_type: ?*anyopaque,
            dw_flags: u32,
            cb_buffer_length: u32,
            p_buffer: [*:0]u8,
            pcb_read: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Free: *const fn (
            self: *const ITypeMarshal,
            pv_type: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn size(self: *const T, pv_type_: ?*anyopaque, dw_dest_context_: u32, pv_dest_context_: ?*anyopaque, p_size_: ?*u32) HRESULT {
                return @as(*const ITypeMarshal.VTable, @ptrCast(self.vtable)).Size(@as(*const ITypeMarshal, @ptrCast(self)), pv_type_, dw_dest_context_, pv_dest_context_, p_size_);
            }
            pub inline fn marshal(self: *const T, pv_type_: ?*anyopaque, dw_dest_context_: u32, pv_dest_context_: ?*anyopaque, cb_buffer_length_: u32, p_buffer_: ?*u8, pcb_written_: ?*u32) HRESULT {
                return @as(*const ITypeMarshal.VTable, @ptrCast(self.vtable)).Marshal(@as(*const ITypeMarshal, @ptrCast(self)), pv_type_, dw_dest_context_, pv_dest_context_, cb_buffer_length_, p_buffer_, pcb_written_);
            }
            pub inline fn unmarshal(self: *const T, pv_type_: ?*anyopaque, dw_flags_: u32, cb_buffer_length_: u32, p_buffer_: [*:0]u8, pcb_read_: ?*u32) HRESULT {
                return @as(*const ITypeMarshal.VTable, @ptrCast(self.vtable)).Unmarshal(@as(*const ITypeMarshal, @ptrCast(self)), pv_type_, dw_flags_, cb_buffer_length_, p_buffer_, pcb_read_);
            }
            pub inline fn free(self: *const T, pv_type_: ?*anyopaque) HRESULT {
                return @as(*const ITypeMarshal.VTable, @ptrCast(self.vtable)).Free(@as(*const ITypeMarshal, @ptrCast(self)), pv_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRecordInfo_Value = Guid.initString("0000002f-0000-0000-c000-000000000046");
pub const IID_IRecordInfo = &IID_IRecordInfo_Value;
pub const IRecordInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RecordInit: *const fn (
            self: *const IRecordInfo,
            pv_new: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecordClear: *const fn (
            self: *const IRecordInfo,
            pv_existing: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecordCopy: *const fn (
            self: *const IRecordInfo,
            pv_existing: ?*anyopaque,
            pv_new: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGuid: *const fn (
            self: *const IRecordInfo,
            pguid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IRecordInfo,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn (
            self: *const IRecordInfo,
            pcb_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeInfo: *const fn (
            self: *const IRecordInfo,
            pp_type_info: ?*?*ITypeInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetField: *const fn (
            self: *const IRecordInfo,
            pv_data: ?*anyopaque,
            sz_field_name: ?[*:0]const u16,
            pvar_field: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldNoCopy: *const fn (
            self: *const IRecordInfo,
            pv_data: ?*anyopaque,
            sz_field_name: ?[*:0]const u16,
            pvar_field: ?*VARIANT,
            ppv_data_c_array: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutField: *const fn (
            self: *const IRecordInfo,
            w_flags: u32,
            pv_data: ?*anyopaque,
            sz_field_name: ?[*:0]const u16,
            pvar_field: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutFieldNoCopy: *const fn (
            self: *const IRecordInfo,
            w_flags: u32,
            pv_data: ?*anyopaque,
            sz_field_name: ?[*:0]const u16,
            pvar_field: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldNames: *const fn (
            self: *const IRecordInfo,
            pc_names: ?*u32,
            rg_bstr_names: [*]?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMatchingType: *const fn (
            self: *const IRecordInfo,
            p_record_info: ?*IRecordInfo,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        RecordCreate: *const fn (
            self: *const IRecordInfo,
        ) callconv(@import("std").os.windows.WINAPI) ?*anyopaque,
        RecordCreateCopy: *const fn (
            self: *const IRecordInfo,
            pv_source: ?*anyopaque,
            ppv_dest: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecordDestroy: *const fn (
            self: *const IRecordInfo,
            pv_record: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn recordInit(self: *const T, pv_new_: ?*anyopaque) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).RecordInit(@as(*const IRecordInfo, @ptrCast(self)), pv_new_);
            }
            pub inline fn recordClear(self: *const T, pv_existing_: ?*anyopaque) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).RecordClear(@as(*const IRecordInfo, @ptrCast(self)), pv_existing_);
            }
            pub inline fn recordCopy(self: *const T, pv_existing_: ?*anyopaque, pv_new_: ?*anyopaque) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).RecordCopy(@as(*const IRecordInfo, @ptrCast(self)), pv_existing_, pv_new_);
            }
            pub inline fn getGuid(self: *const T, pguid_: ?*Guid) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).GetGuid(@as(*const IRecordInfo, @ptrCast(self)), pguid_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).GetName(@as(*const IRecordInfo, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getSize(self: *const T, pcb_size_: ?*u32) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IRecordInfo, @ptrCast(self)), pcb_size_);
            }
            pub inline fn getTypeInfo(self: *const T, pp_type_info_: ?*?*ITypeInfo) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).GetTypeInfo(@as(*const IRecordInfo, @ptrCast(self)), pp_type_info_);
            }
            pub inline fn getField(self: *const T, pv_data_: ?*anyopaque, sz_field_name_: ?[*:0]const u16, pvar_field_: ?*VARIANT) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).GetField(@as(*const IRecordInfo, @ptrCast(self)), pv_data_, sz_field_name_, pvar_field_);
            }
            pub inline fn getFieldNoCopy(self: *const T, pv_data_: ?*anyopaque, sz_field_name_: ?[*:0]const u16, pvar_field_: ?*VARIANT, ppv_data_c_array_: ?*?*anyopaque) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).GetFieldNoCopy(@as(*const IRecordInfo, @ptrCast(self)), pv_data_, sz_field_name_, pvar_field_, ppv_data_c_array_);
            }
            pub inline fn putField(self: *const T, w_flags_: u32, pv_data_: ?*anyopaque, sz_field_name_: ?[*:0]const u16, pvar_field_: ?*VARIANT) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).PutField(@as(*const IRecordInfo, @ptrCast(self)), w_flags_, pv_data_, sz_field_name_, pvar_field_);
            }
            pub inline fn putFieldNoCopy(self: *const T, w_flags_: u32, pv_data_: ?*anyopaque, sz_field_name_: ?[*:0]const u16, pvar_field_: ?*VARIANT) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).PutFieldNoCopy(@as(*const IRecordInfo, @ptrCast(self)), w_flags_, pv_data_, sz_field_name_, pvar_field_);
            }
            pub inline fn getFieldNames(self: *const T, pc_names_: ?*u32, rg_bstr_names_: [*]?BSTR) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).GetFieldNames(@as(*const IRecordInfo, @ptrCast(self)), pc_names_, rg_bstr_names_);
            }
            pub inline fn isMatchingType(self: *const T, p_record_info_: ?*IRecordInfo) BOOL {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).IsMatchingType(@as(*const IRecordInfo, @ptrCast(self)), p_record_info_);
            }
            pub inline fn recordCreate(self: *const T) ?*anyopaque {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).RecordCreate(@as(*const IRecordInfo, @ptrCast(self)));
            }
            pub inline fn recordCreateCopy(self: *const T, pv_source_: ?*anyopaque, ppv_dest_: ?*?*anyopaque) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).RecordCreateCopy(@as(*const IRecordInfo, @ptrCast(self)), pv_source_, ppv_dest_);
            }
            pub inline fn recordDestroy(self: *const T, pv_record_: ?*anyopaque) HRESULT {
                return @as(*const IRecordInfo.VTable, @ptrCast(self.vtable)).RecordDestroy(@as(*const IRecordInfo, @ptrCast(self)), pv_record_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleAdviseHolder_Value = Guid.initString("00000111-0000-0000-c000-000000000046");
pub const IID_IOleAdviseHolder = &IID_IOleAdviseHolder_Value;
pub const IOleAdviseHolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn (
            self: *const IOleAdviseHolder,
            p_advise: ?*IAdviseSink,
            pdw_connection: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const IOleAdviseHolder,
            dw_connection: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAdvise: *const fn (
            self: *const IOleAdviseHolder,
            ppenum_advise: ?*?*IEnumSTATDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendOnRename: *const fn (
            self: *const IOleAdviseHolder,
            pmk: ?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendOnSave: *const fn (
            self: *const IOleAdviseHolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendOnClose: *const fn (
            self: *const IOleAdviseHolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn advise(self: *const T, p_advise_: ?*IAdviseSink, pdw_connection_: ?*u32) HRESULT {
                return @as(*const IOleAdviseHolder.VTable, @ptrCast(self.vtable)).Advise(@as(*const IOleAdviseHolder, @ptrCast(self)), p_advise_, pdw_connection_);
            }
            pub inline fn unadvise(self: *const T, dw_connection_: u32) HRESULT {
                return @as(*const IOleAdviseHolder.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const IOleAdviseHolder, @ptrCast(self)), dw_connection_);
            }
            pub inline fn enumAdvise(self: *const T, ppenum_advise_: ?*?*IEnumSTATDATA) HRESULT {
                return @as(*const IOleAdviseHolder.VTable, @ptrCast(self.vtable)).EnumAdvise(@as(*const IOleAdviseHolder, @ptrCast(self)), ppenum_advise_);
            }
            pub inline fn sendOnRename(self: *const T, pmk_: ?*IMoniker) HRESULT {
                return @as(*const IOleAdviseHolder.VTable, @ptrCast(self.vtable)).SendOnRename(@as(*const IOleAdviseHolder, @ptrCast(self)), pmk_);
            }
            pub inline fn sendOnSave(self: *const T) HRESULT {
                return @as(*const IOleAdviseHolder.VTable, @ptrCast(self.vtable)).SendOnSave(@as(*const IOleAdviseHolder, @ptrCast(self)));
            }
            pub inline fn sendOnClose(self: *const T) HRESULT {
                return @as(*const IOleAdviseHolder.VTable, @ptrCast(self.vtable)).SendOnClose(@as(*const IOleAdviseHolder, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleCache_Value = Guid.initString("0000011e-0000-0000-c000-000000000046");
pub const IID_IOleCache = &IID_IOleCache_Value;
pub const IOleCache = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Cache: *const fn (
            self: *const IOleCache,
            pformatetc: ?*FORMATETC,
            advf: u32,
            pdw_connection: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uncache: *const fn (
            self: *const IOleCache,
            dw_connection: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCache: *const fn (
            self: *const IOleCache,
            ppenum_s_t_a_t_d_a_t_a: ?*?*IEnumSTATDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitCache: *const fn (
            self: *const IOleCache,
            p_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetData: *const fn (
            self: *const IOleCache,
            pformatetc: ?*FORMATETC,
            pmedium: ?*STGMEDIUM,
            f_release: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn cache(self: *const T, pformatetc_: ?*FORMATETC, advf_: u32, pdw_connection_: ?*u32) HRESULT {
                return @as(*const IOleCache.VTable, @ptrCast(self.vtable)).Cache(@as(*const IOleCache, @ptrCast(self)), pformatetc_, advf_, pdw_connection_);
            }
            pub inline fn uncache(self: *const T, dw_connection_: u32) HRESULT {
                return @as(*const IOleCache.VTable, @ptrCast(self.vtable)).Uncache(@as(*const IOleCache, @ptrCast(self)), dw_connection_);
            }
            pub inline fn enumCache(self: *const T, ppenum_s_t_a_t_d_a_t_a_: ?*?*IEnumSTATDATA) HRESULT {
                return @as(*const IOleCache.VTable, @ptrCast(self.vtable)).EnumCache(@as(*const IOleCache, @ptrCast(self)), ppenum_s_t_a_t_d_a_t_a_);
            }
            pub inline fn initCache(self: *const T, p_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IOleCache.VTable, @ptrCast(self.vtable)).InitCache(@as(*const IOleCache, @ptrCast(self)), p_data_object_);
            }
            pub inline fn setData(self: *const T, pformatetc_: ?*FORMATETC, pmedium_: ?*STGMEDIUM, f_release_: BOOL) HRESULT {
                return @as(*const IOleCache.VTable, @ptrCast(self.vtable)).SetData(@as(*const IOleCache, @ptrCast(self)), pformatetc_, pmedium_, f_release_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DISCARDCACHE = enum(i32) {
    SAVEIFDIRTY = 0,
    NOSAVE = 1,
};
pub const DISCARDCACHE_SAVEIFDIRTY = DISCARDCACHE.SAVEIFDIRTY;
pub const DISCARDCACHE_NOSAVE = DISCARDCACHE.NOSAVE;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleCache2_Value = Guid.initString("00000128-0000-0000-c000-000000000046");
pub const IID_IOleCache2 = &IID_IOleCache2_Value;
pub const IOleCache2 = extern struct {
    pub const VTable = extern struct {
        base: IOleCache.VTable,
        UpdateCache: *const fn (
            self: *const IOleCache2,
            p_data_object: ?*IDataObject,
            grf_updf: UPDFCACHE_FLAGS,
            p_reserved: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiscardCache: *const fn (
            self: *const IOleCache2,
            dw_discard_options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleCache.MethodMixin(T);
            pub inline fn updateCache(self: *const T, p_data_object_: ?*IDataObject, grf_updf_: UPDFCACHE_FLAGS, p_reserved_: ?*anyopaque) HRESULT {
                return @as(*const IOleCache2.VTable, @ptrCast(self.vtable)).UpdateCache(@as(*const IOleCache2, @ptrCast(self)), p_data_object_, grf_updf_, p_reserved_);
            }
            pub inline fn discardCache(self: *const T, dw_discard_options_: u32) HRESULT {
                return @as(*const IOleCache2.VTable, @ptrCast(self.vtable)).DiscardCache(@as(*const IOleCache2, @ptrCast(self)), dw_discard_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleCacheControl_Value = Guid.initString("00000129-0000-0000-c000-000000000046");
pub const IID_IOleCacheControl = &IID_IOleCacheControl_Value;
pub const IOleCacheControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnRun: *const fn (
            self: *const IOleCacheControl,
            p_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStop: *const fn (
            self: *const IOleCacheControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onRun(self: *const T, p_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IOleCacheControl.VTable, @ptrCast(self.vtable)).OnRun(@as(*const IOleCacheControl, @ptrCast(self)), p_data_object_);
            }
            pub inline fn onStop(self: *const T) HRESULT {
                return @as(*const IOleCacheControl.VTable, @ptrCast(self.vtable)).OnStop(@as(*const IOleCacheControl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IParseDisplayName_Value = Guid.initString("0000011a-0000-0000-c000-000000000046");
pub const IID_IParseDisplayName = &IID_IParseDisplayName_Value;
pub const IParseDisplayName = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ParseDisplayName: *const fn (
            self: *const IParseDisplayName,
            pbc: ?*IBindCtx,
            psz_display_name: ?PWSTR,
            pch_eaten: ?*u32,
            ppmk_out: ?*?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn parseDisplayName(self: *const T, pbc_: ?*IBindCtx, psz_display_name_: ?PWSTR, pch_eaten_: ?*u32, ppmk_out_: ?*?*IMoniker) HRESULT {
                return @as(*const IParseDisplayName.VTable, @ptrCast(self.vtable)).ParseDisplayName(@as(*const IParseDisplayName, @ptrCast(self)), pbc_, psz_display_name_, pch_eaten_, ppmk_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleContainer_Value = Guid.initString("0000011b-0000-0000-c000-000000000046");
pub const IID_IOleContainer = &IID_IOleContainer_Value;
pub const IOleContainer = extern struct {
    pub const VTable = extern struct {
        base: IParseDisplayName.VTable,
        EnumObjects: *const fn (
            self: *const IOleContainer,
            grf_flags: u32,
            ppenum: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockContainer: *const fn (
            self: *const IOleContainer,
            f_lock: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IParseDisplayName.MethodMixin(T);
            pub inline fn enumObjects(self: *const T, grf_flags_: u32, ppenum_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const IOleContainer.VTable, @ptrCast(self.vtable)).EnumObjects(@as(*const IOleContainer, @ptrCast(self)), grf_flags_, ppenum_);
            }
            pub inline fn lockContainer(self: *const T, f_lock_: BOOL) HRESULT {
                return @as(*const IOleContainer.VTable, @ptrCast(self.vtable)).LockContainer(@as(*const IOleContainer, @ptrCast(self)), f_lock_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleClientSite_Value = Guid.initString("00000118-0000-0000-c000-000000000046");
pub const IID_IOleClientSite = &IID_IOleClientSite_Value;
pub const IOleClientSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SaveObject: *const fn (
            self: *const IOleClientSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMoniker: *const fn (
            self: *const IOleClientSite,
            dw_assign: u32,
            dw_which_moniker: u32,
            ppmk: ?*?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainer: *const fn (
            self: *const IOleClientSite,
            pp_container: ?*?*IOleContainer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowObject: *const fn (
            self: *const IOleClientSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnShowWindow: *const fn (
            self: *const IOleClientSite,
            f_show: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestNewObjectLayout: *const fn (
            self: *const IOleClientSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn saveObject(self: *const T) HRESULT {
                return @as(*const IOleClientSite.VTable, @ptrCast(self.vtable)).SaveObject(@as(*const IOleClientSite, @ptrCast(self)));
            }
            pub inline fn getMoniker(self: *const T, dw_assign_: u32, dw_which_moniker_: u32, ppmk_: ?*?*IMoniker) HRESULT {
                return @as(*const IOleClientSite.VTable, @ptrCast(self.vtable)).GetMoniker(@as(*const IOleClientSite, @ptrCast(self)), dw_assign_, dw_which_moniker_, ppmk_);
            }
            pub inline fn getContainer(self: *const T, pp_container_: ?*?*IOleContainer) HRESULT {
                return @as(*const IOleClientSite.VTable, @ptrCast(self.vtable)).GetContainer(@as(*const IOleClientSite, @ptrCast(self)), pp_container_);
            }
            pub inline fn showObject(self: *const T) HRESULT {
                return @as(*const IOleClientSite.VTable, @ptrCast(self.vtable)).ShowObject(@as(*const IOleClientSite, @ptrCast(self)));
            }
            pub inline fn onShowWindow(self: *const T, f_show_: BOOL) HRESULT {
                return @as(*const IOleClientSite.VTable, @ptrCast(self.vtable)).OnShowWindow(@as(*const IOleClientSite, @ptrCast(self)), f_show_);
            }
            pub inline fn requestNewObjectLayout(self: *const T) HRESULT {
                return @as(*const IOleClientSite.VTable, @ptrCast(self.vtable)).RequestNewObjectLayout(@as(*const IOleClientSite, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OLEGETMONIKER = enum(i32) {
    ONLYIFTHERE = 1,
    FORCEASSIGN = 2,
    UNASSIGN = 3,
    TEMPFORUSER = 4,
};
pub const OLEGETMONIKER_ONLYIFTHERE = OLEGETMONIKER.ONLYIFTHERE;
pub const OLEGETMONIKER_FORCEASSIGN = OLEGETMONIKER.FORCEASSIGN;
pub const OLEGETMONIKER_UNASSIGN = OLEGETMONIKER.UNASSIGN;
pub const OLEGETMONIKER_TEMPFORUSER = OLEGETMONIKER.TEMPFORUSER;

pub const OLEWHICHMK = enum(i32) {
    CONTAINER = 1,
    OBJREL = 2,
    OBJFULL = 3,
};
pub const OLEWHICHMK_CONTAINER = OLEWHICHMK.CONTAINER;
pub const OLEWHICHMK_OBJREL = OLEWHICHMK.OBJREL;
pub const OLEWHICHMK_OBJFULL = OLEWHICHMK.OBJFULL;

pub const USERCLASSTYPE = enum(i32) {
    FULL = 1,
    SHORT = 2,
    APPNAME = 3,
};
pub const USERCLASSTYPE_FULL = USERCLASSTYPE.FULL;
pub const USERCLASSTYPE_SHORT = USERCLASSTYPE.SHORT;
pub const USERCLASSTYPE_APPNAME = USERCLASSTYPE.APPNAME;

pub const OLEMISC = enum(i32) {
    RECOMPOSEONRESIZE = 1,
    ONLYICONIC = 2,
    INSERTNOTREPLACE = 4,
    STATIC = 8,
    CANTLINKINSIDE = 16,
    CANLINKBYOLE1 = 32,
    ISLINKOBJECT = 64,
    INSIDEOUT = 128,
    ACTIVATEWHENVISIBLE = 256,
    RENDERINGISDEVICEINDEPENDENT = 512,
    INVISIBLEATRUNTIME = 1024,
    ALWAYSRUN = 2048,
    ACTSLIKEBUTTON = 4096,
    ACTSLIKELABEL = 8192,
    NOUIACTIVATE = 16384,
    ALIGNABLE = 32768,
    SIMPLEFRAME = 65536,
    SETCLIENTSITEFIRST = 131072,
    IMEMODE = 262144,
    IGNOREACTIVATEWHENVISIBLE = 524288,
    WANTSTOMENUMERGE = 1048576,
    SUPPORTSMULTILEVELUNDO = 2097152,
};
// TODO: enum 'OLEMISC' has known issues with its value aliases

pub const OLECLOSE = enum(i32) {
    SAVEIFDIRTY = 0,
    NOSAVE = 1,
    PROMPTSAVE = 2,
};
pub const OLECLOSE_SAVEIFDIRTY = OLECLOSE.SAVEIFDIRTY;
pub const OLECLOSE_NOSAVE = OLECLOSE.NOSAVE;
pub const OLECLOSE_PROMPTSAVE = OLECLOSE.PROMPTSAVE;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleObject_Value = Guid.initString("00000112-0000-0000-c000-000000000046");
pub const IID_IOleObject = &IID_IOleObject_Value;
pub const IOleObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetClientSite: *const fn (
            self: *const IOleObject,
            p_client_site: ?*IOleClientSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientSite: *const fn (
            self: *const IOleObject,
            pp_client_site: ?*?*IOleClientSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHostNames: *const fn (
            self: *const IOleObject,
            sz_container_app: ?[*:0]const u16,
            sz_container_obj: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IOleObject,
            dw_save_option: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMoniker: *const fn (
            self: *const IOleObject,
            dw_which_moniker: u32,
            pmk: ?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMoniker: *const fn (
            self: *const IOleObject,
            dw_assign: u32,
            dw_which_moniker: u32,
            ppmk: ?*?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitFromData: *const fn (
            self: *const IOleObject,
            p_data_object: ?*IDataObject,
            f_creation: BOOL,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipboardData: *const fn (
            self: *const IOleObject,
            dw_reserved: u32,
            pp_data_object: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoVerb: *const fn (
            self: *const IOleObject,
            i_verb: i32,
            lpmsg: ?*MSG,
            p_active_site: ?*IOleClientSite,
            lindex: i32,
            hwnd_parent: ?HWND,
            lprc_pos_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumVerbs: *const fn (
            self: *const IOleObject,
            pp_enum_ole_verb: ?*?*IEnumOLEVERB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IOleObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUpToDate: *const fn (
            self: *const IOleObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserClassID: *const fn (
            self: *const IOleObject,
            p_clsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserType: *const fn (
            self: *const IOleObject,
            dw_form_of_type: u32,
            psz_user_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExtent: *const fn (
            self: *const IOleObject,
            dw_draw_aspect: u32,
            psizel: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtent: *const fn (
            self: *const IOleObject,
            dw_draw_aspect: u32,
            psizel: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn (
            self: *const IOleObject,
            p_adv_sink: ?*IAdviseSink,
            pdw_connection: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const IOleObject,
            dw_connection: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAdvise: *const fn (
            self: *const IOleObject,
            ppenum_advise: ?*?*IEnumSTATDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMiscStatus: *const fn (
            self: *const IOleObject,
            dw_aspect: u32,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorScheme: *const fn (
            self: *const IOleObject,
            p_logpal: ?*LOGPALETTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setClientSite(self: *const T, p_client_site_: ?*IOleClientSite) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).SetClientSite(@as(*const IOleObject, @ptrCast(self)), p_client_site_);
            }
            pub inline fn getClientSite(self: *const T, pp_client_site_: ?*?*IOleClientSite) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).GetClientSite(@as(*const IOleObject, @ptrCast(self)), pp_client_site_);
            }
            pub inline fn setHostNames(self: *const T, sz_container_app_: ?[*:0]const u16, sz_container_obj_: ?[*:0]const u16) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).SetHostNames(@as(*const IOleObject, @ptrCast(self)), sz_container_app_, sz_container_obj_);
            }
            pub inline fn close(self: *const T, dw_save_option_: u32) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).Close(@as(*const IOleObject, @ptrCast(self)), dw_save_option_);
            }
            pub inline fn setMoniker(self: *const T, dw_which_moniker_: u32, pmk_: ?*IMoniker) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).SetMoniker(@as(*const IOleObject, @ptrCast(self)), dw_which_moniker_, pmk_);
            }
            pub inline fn getMoniker(self: *const T, dw_assign_: u32, dw_which_moniker_: u32, ppmk_: ?*?*IMoniker) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).GetMoniker(@as(*const IOleObject, @ptrCast(self)), dw_assign_, dw_which_moniker_, ppmk_);
            }
            pub inline fn initFromData(self: *const T, p_data_object_: ?*IDataObject, f_creation_: BOOL, dw_reserved_: u32) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).InitFromData(@as(*const IOleObject, @ptrCast(self)), p_data_object_, f_creation_, dw_reserved_);
            }
            pub inline fn getClipboardData(self: *const T, dw_reserved_: u32, pp_data_object_: ?*?*IDataObject) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).GetClipboardData(@as(*const IOleObject, @ptrCast(self)), dw_reserved_, pp_data_object_);
            }
            pub inline fn doVerb(self: *const T, i_verb_: i32, lpmsg_: ?*MSG, p_active_site_: ?*IOleClientSite, lindex_: i32, hwnd_parent_: ?HWND, lprc_pos_rect_: ?*RECT) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).DoVerb(@as(*const IOleObject, @ptrCast(self)), i_verb_, lpmsg_, p_active_site_, lindex_, hwnd_parent_, lprc_pos_rect_);
            }
            pub inline fn enumVerbs(self: *const T, pp_enum_ole_verb_: ?*?*IEnumOLEVERB) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).EnumVerbs(@as(*const IOleObject, @ptrCast(self)), pp_enum_ole_verb_);
            }
            pub inline fn update(self: *const T) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).Update(@as(*const IOleObject, @ptrCast(self)));
            }
            pub inline fn isUpToDate(self: *const T) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).IsUpToDate(@as(*const IOleObject, @ptrCast(self)));
            }
            pub inline fn getUserClassID(self: *const T, p_clsid_: ?*Guid) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).GetUserClassID(@as(*const IOleObject, @ptrCast(self)), p_clsid_);
            }
            pub inline fn getUserType(self: *const T, dw_form_of_type_: u32, psz_user_type_: ?*?PWSTR) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).GetUserType(@as(*const IOleObject, @ptrCast(self)), dw_form_of_type_, psz_user_type_);
            }
            pub inline fn setExtent(self: *const T, dw_draw_aspect_: u32, psizel_: ?*SIZE) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).SetExtent(@as(*const IOleObject, @ptrCast(self)), dw_draw_aspect_, psizel_);
            }
            pub inline fn getExtent(self: *const T, dw_draw_aspect_: u32, psizel_: ?*SIZE) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).GetExtent(@as(*const IOleObject, @ptrCast(self)), dw_draw_aspect_, psizel_);
            }
            pub inline fn advise(self: *const T, p_adv_sink_: ?*IAdviseSink, pdw_connection_: ?*u32) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).Advise(@as(*const IOleObject, @ptrCast(self)), p_adv_sink_, pdw_connection_);
            }
            pub inline fn unadvise(self: *const T, dw_connection_: u32) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const IOleObject, @ptrCast(self)), dw_connection_);
            }
            pub inline fn enumAdvise(self: *const T, ppenum_advise_: ?*?*IEnumSTATDATA) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).EnumAdvise(@as(*const IOleObject, @ptrCast(self)), ppenum_advise_);
            }
            pub inline fn getMiscStatus(self: *const T, dw_aspect_: u32, pdw_status_: ?*u32) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).GetMiscStatus(@as(*const IOleObject, @ptrCast(self)), dw_aspect_, pdw_status_);
            }
            pub inline fn setColorScheme(self: *const T, p_logpal_: ?*LOGPALETTE) HRESULT {
                return @as(*const IOleObject.VTable, @ptrCast(self.vtable)).SetColorScheme(@as(*const IOleObject, @ptrCast(self)), p_logpal_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OLERENDER = enum(i32) {
    NONE = 0,
    DRAW = 1,
    FORMAT = 2,
    ASIS = 3,
};
pub const OLERENDER_NONE = OLERENDER.NONE;
pub const OLERENDER_DRAW = OLERENDER.DRAW;
pub const OLERENDER_FORMAT = OLERENDER.FORMAT;
pub const OLERENDER_ASIS = OLERENDER.ASIS;

pub const OBJECTDESCRIPTOR = extern struct {
    cbSize: u32,
    clsid: Guid,
    dwDrawAspect: u32,
    sizel: SIZE,
    pointl: POINTL,
    dwStatus: u32,
    dwFullUserTypeName: u32,
    dwSrcOfCopy: u32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleWindow_Value = Guid.initString("00000114-0000-0000-c000-000000000046");
pub const IID_IOleWindow = &IID_IOleWindow_Value;
pub const IOleWindow = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWindow: *const fn (
            self: *const IOleWindow,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContextSensitiveHelp: *const fn (
            self: *const IOleWindow,
            f_enter_mode: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getWindow(self: *const T, phwnd_: ?*?HWND) HRESULT {
                return @as(*const IOleWindow.VTable, @ptrCast(self.vtable)).GetWindow(@as(*const IOleWindow, @ptrCast(self)), phwnd_);
            }
            pub inline fn contextSensitiveHelp(self: *const T, f_enter_mode_: BOOL) HRESULT {
                return @as(*const IOleWindow.VTable, @ptrCast(self.vtable)).ContextSensitiveHelp(@as(*const IOleWindow, @ptrCast(self)), f_enter_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OLEUPDATE = enum(i32) {
    ALWAYS = 1,
    ONCALL = 3,
};
pub const OLEUPDATE_ALWAYS = OLEUPDATE.ALWAYS;
pub const OLEUPDATE_ONCALL = OLEUPDATE.ONCALL;

pub const OLELINKBIND = enum(i32) {
    F = 1,
};
pub const OLELINKBIND_EVENIFCLASSDIFF = OLELINKBIND.F;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleLink_Value = Guid.initString("0000011d-0000-0000-c000-000000000046");
pub const IID_IOleLink = &IID_IOleLink_Value;
pub const IOleLink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUpdateOptions: *const fn (
            self: *const IOleLink,
            dw_update_opt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUpdateOptions: *const fn (
            self: *const IOleLink,
            pdw_update_opt: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSourceMoniker: *const fn (
            self: *const IOleLink,
            pmk: ?*IMoniker,
            rclsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceMoniker: *const fn (
            self: *const IOleLink,
            ppmk: ?*?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSourceDisplayName: *const fn (
            self: *const IOleLink,
            psz_status_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceDisplayName: *const fn (
            self: *const IOleLink,
            ppsz_display_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToSource: *const fn (
            self: *const IOleLink,
            bindflags: u32,
            pbc: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindIfRunning: *const fn (
            self: *const IOleLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBoundSource: *const fn (
            self: *const IOleLink,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnbindSource: *const fn (
            self: *const IOleLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IOleLink,
            pbc: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setUpdateOptions(self: *const T, dw_update_opt_: u32) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).SetUpdateOptions(@as(*const IOleLink, @ptrCast(self)), dw_update_opt_);
            }
            pub inline fn getUpdateOptions(self: *const T, pdw_update_opt_: ?*u32) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).GetUpdateOptions(@as(*const IOleLink, @ptrCast(self)), pdw_update_opt_);
            }
            pub inline fn setSourceMoniker(self: *const T, pmk_: ?*IMoniker, rclsid_: ?*const Guid) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).SetSourceMoniker(@as(*const IOleLink, @ptrCast(self)), pmk_, rclsid_);
            }
            pub inline fn getSourceMoniker(self: *const T, ppmk_: ?*?*IMoniker) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).GetSourceMoniker(@as(*const IOleLink, @ptrCast(self)), ppmk_);
            }
            pub inline fn setSourceDisplayName(self: *const T, psz_status_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).SetSourceDisplayName(@as(*const IOleLink, @ptrCast(self)), psz_status_text_);
            }
            pub inline fn getSourceDisplayName(self: *const T, ppsz_display_name_: ?*?PWSTR) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).GetSourceDisplayName(@as(*const IOleLink, @ptrCast(self)), ppsz_display_name_);
            }
            pub inline fn bindToSource(self: *const T, bindflags_: u32, pbc_: ?*IBindCtx) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).BindToSource(@as(*const IOleLink, @ptrCast(self)), bindflags_, pbc_);
            }
            pub inline fn bindIfRunning(self: *const T) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).BindIfRunning(@as(*const IOleLink, @ptrCast(self)));
            }
            pub inline fn getBoundSource(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).GetBoundSource(@as(*const IOleLink, @ptrCast(self)), ppunk_);
            }
            pub inline fn unbindSource(self: *const T) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).UnbindSource(@as(*const IOleLink, @ptrCast(self)));
            }
            pub inline fn update(self: *const T, pbc_: ?*IBindCtx) HRESULT {
                return @as(*const IOleLink.VTable, @ptrCast(self.vtable)).Update(@as(*const IOleLink, @ptrCast(self)), pbc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const BINDSPEED = enum(i32) {
    INDEFINITE = 1,
    MODERATE = 2,
    IMMEDIATE = 3,
};
pub const BINDSPEED_INDEFINITE = BINDSPEED.INDEFINITE;
pub const BINDSPEED_MODERATE = BINDSPEED.MODERATE;
pub const BINDSPEED_IMMEDIATE = BINDSPEED.IMMEDIATE;

pub const OLECONTF = enum(i32) {
    EMBEDDINGS = 1,
    LINKS = 2,
    OTHERS = 4,
    ONLYUSER = 8,
    ONLYIFRUNNING = 16,
};
pub const OLECONTF_EMBEDDINGS = OLECONTF.EMBEDDINGS;
pub const OLECONTF_LINKS = OLECONTF.LINKS;
pub const OLECONTF_OTHERS = OLECONTF.OTHERS;
pub const OLECONTF_ONLYUSER = OLECONTF.ONLYUSER;
pub const OLECONTF_ONLYIFRUNNING = OLECONTF.ONLYIFRUNNING;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleItemContainer_Value = Guid.initString("0000011c-0000-0000-c000-000000000046");
pub const IID_IOleItemContainer = &IID_IOleItemContainer_Value;
pub const IOleItemContainer = extern struct {
    pub const VTable = extern struct {
        base: IOleContainer.VTable,
        GetObject: *const fn (
            self: *const IOleItemContainer,
            psz_item: ?PWSTR,
            dw_speed_needed: u32,
            pbc: ?*IBindCtx,
            riid: ?*const Guid,
            ppv_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectStorage: *const fn (
            self: *const IOleItemContainer,
            psz_item: ?PWSTR,
            pbc: ?*IBindCtx,
            riid: ?*const Guid,
            ppv_storage: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRunning: *const fn (
            self: *const IOleItemContainer,
            psz_item: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleContainer.MethodMixin(T);
            pub inline fn getObject(self: *const T, psz_item_: ?PWSTR, dw_speed_needed_: u32, pbc_: ?*IBindCtx, riid_: ?*const Guid, ppv_object_: ?*?*anyopaque) HRESULT {
                return @as(*const IOleItemContainer.VTable, @ptrCast(self.vtable)).GetObject(@as(*const IOleItemContainer, @ptrCast(self)), psz_item_, dw_speed_needed_, pbc_, riid_, ppv_object_);
            }
            pub inline fn getObjectStorage(self: *const T, psz_item_: ?PWSTR, pbc_: ?*IBindCtx, riid_: ?*const Guid, ppv_storage_: ?*?*anyopaque) HRESULT {
                return @as(*const IOleItemContainer.VTable, @ptrCast(self.vtable)).GetObjectStorage(@as(*const IOleItemContainer, @ptrCast(self)), psz_item_, pbc_, riid_, ppv_storage_);
            }
            pub inline fn isRunning(self: *const T, psz_item_: ?PWSTR) HRESULT {
                return @as(*const IOleItemContainer.VTable, @ptrCast(self.vtable)).IsRunning(@as(*const IOleItemContainer, @ptrCast(self)), psz_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleInPlaceUIWindow_Value = Guid.initString("00000115-0000-0000-c000-000000000046");
pub const IID_IOleInPlaceUIWindow = &IID_IOleInPlaceUIWindow_Value;
pub const IOleInPlaceUIWindow = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        GetBorder: *const fn (
            self: *const IOleInPlaceUIWindow,
            lprect_border: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestBorderSpace: *const fn (
            self: *const IOleInPlaceUIWindow,
            pborderwidths: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderSpace: *const fn (
            self: *const IOleInPlaceUIWindow,
            pborderwidths: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActiveObject: *const fn (
            self: *const IOleInPlaceUIWindow,
            p_active_object: ?*IOleInPlaceActiveObject,
            psz_obj_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn getBorder(self: *const T, lprect_border_: ?*RECT) HRESULT {
                return @as(*const IOleInPlaceUIWindow.VTable, @ptrCast(self.vtable)).GetBorder(@as(*const IOleInPlaceUIWindow, @ptrCast(self)), lprect_border_);
            }
            pub inline fn requestBorderSpace(self: *const T, pborderwidths_: ?*RECT) HRESULT {
                return @as(*const IOleInPlaceUIWindow.VTable, @ptrCast(self.vtable)).RequestBorderSpace(@as(*const IOleInPlaceUIWindow, @ptrCast(self)), pborderwidths_);
            }
            pub inline fn setBorderSpace(self: *const T, pborderwidths_: ?*RECT) HRESULT {
                return @as(*const IOleInPlaceUIWindow.VTable, @ptrCast(self.vtable)).SetBorderSpace(@as(*const IOleInPlaceUIWindow, @ptrCast(self)), pborderwidths_);
            }
            pub inline fn setActiveObject(self: *const T, p_active_object_: ?*IOleInPlaceActiveObject, psz_obj_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IOleInPlaceUIWindow.VTable, @ptrCast(self.vtable)).SetActiveObject(@as(*const IOleInPlaceUIWindow, @ptrCast(self)), p_active_object_, psz_obj_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleInPlaceActiveObject_Value = Guid.initString("00000117-0000-0000-c000-000000000046");
pub const IID_IOleInPlaceActiveObject = &IID_IOleInPlaceActiveObject_Value;
pub const IOleInPlaceActiveObject = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        TranslateAccelerator: *const fn (
            self: *const IOleInPlaceActiveObject,
            lpmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFrameWindowActivate: *const fn (
            self: *const IOleInPlaceActiveObject,
            f_activate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDocWindowActivate: *const fn (
            self: *const IOleInPlaceActiveObject,
            f_activate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResizeBorder: *const fn (
            self: *const IOleInPlaceActiveObject,
            prc_border: ?*RECT,
            p_u_i_window: ?*IOleInPlaceUIWindow,
            f_frame_window: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModeless: *const fn (
            self: *const IOleInPlaceActiveObject,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn translateAccelerator(self: *const T, lpmsg_: ?*MSG) HRESULT {
                return @as(*const IOleInPlaceActiveObject.VTable, @ptrCast(self.vtable)).TranslateAccelerator(@as(*const IOleInPlaceActiveObject, @ptrCast(self)), lpmsg_);
            }
            pub inline fn onFrameWindowActivate(self: *const T, f_activate_: BOOL) HRESULT {
                return @as(*const IOleInPlaceActiveObject.VTable, @ptrCast(self.vtable)).OnFrameWindowActivate(@as(*const IOleInPlaceActiveObject, @ptrCast(self)), f_activate_);
            }
            pub inline fn onDocWindowActivate(self: *const T, f_activate_: BOOL) HRESULT {
                return @as(*const IOleInPlaceActiveObject.VTable, @ptrCast(self.vtable)).OnDocWindowActivate(@as(*const IOleInPlaceActiveObject, @ptrCast(self)), f_activate_);
            }
            pub inline fn resizeBorder(self: *const T, prc_border_: ?*RECT, p_u_i_window_: ?*IOleInPlaceUIWindow, f_frame_window_: BOOL) HRESULT {
                return @as(*const IOleInPlaceActiveObject.VTable, @ptrCast(self.vtable)).ResizeBorder(@as(*const IOleInPlaceActiveObject, @ptrCast(self)), prc_border_, p_u_i_window_, f_frame_window_);
            }
            pub inline fn enableModeless(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IOleInPlaceActiveObject.VTable, @ptrCast(self.vtable)).EnableModeless(@as(*const IOleInPlaceActiveObject, @ptrCast(self)), f_enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OIFI = extern struct {
    cb: u32,
    fMDIApp: BOOL,
    hwndFrame: ?HWND,
    haccel: ?HACCEL,
    cAccelEntries: u32,
};

pub const OleMenuGroupWidths = extern struct {
    width: [6]i32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleInPlaceFrame_Value = Guid.initString("00000116-0000-0000-c000-000000000046");
pub const IID_IOleInPlaceFrame = &IID_IOleInPlaceFrame_Value;
pub const IOleInPlaceFrame = extern struct {
    pub const VTable = extern struct {
        base: IOleInPlaceUIWindow.VTable,
        InsertMenus: *const fn (
            self: *const IOleInPlaceFrame,
            hmenu_shared: ?HMENU,
            lp_menu_widths: ?*OleMenuGroupWidths,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenu: *const fn (
            self: *const IOleInPlaceFrame,
            hmenu_shared: ?HMENU,
            holemenu: isize,
            hwnd_active_object: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMenus: *const fn (
            self: *const IOleInPlaceFrame,
            hmenu_shared: ?HMENU,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatusText: *const fn (
            self: *const IOleInPlaceFrame,
            psz_status_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModeless: *const fn (
            self: *const IOleInPlaceFrame,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAccelerator: *const fn (
            self: *const IOleInPlaceFrame,
            lpmsg: ?*MSG,
            w_i_d: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleInPlaceUIWindow.MethodMixin(T);
            pub inline fn insertMenus(self: *const T, hmenu_shared_: ?HMENU, lp_menu_widths_: ?*OleMenuGroupWidths) HRESULT {
                return @as(*const IOleInPlaceFrame.VTable, @ptrCast(self.vtable)).InsertMenus(@as(*const IOleInPlaceFrame, @ptrCast(self)), hmenu_shared_, lp_menu_widths_);
            }
            pub inline fn setMenu(self: *const T, hmenu_shared_: ?HMENU, holemenu_: isize, hwnd_active_object_: ?HWND) HRESULT {
                return @as(*const IOleInPlaceFrame.VTable, @ptrCast(self.vtable)).SetMenu(@as(*const IOleInPlaceFrame, @ptrCast(self)), hmenu_shared_, holemenu_, hwnd_active_object_);
            }
            pub inline fn removeMenus(self: *const T, hmenu_shared_: ?HMENU) HRESULT {
                return @as(*const IOleInPlaceFrame.VTable, @ptrCast(self.vtable)).RemoveMenus(@as(*const IOleInPlaceFrame, @ptrCast(self)), hmenu_shared_);
            }
            pub inline fn setStatusText(self: *const T, psz_status_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IOleInPlaceFrame.VTable, @ptrCast(self.vtable)).SetStatusText(@as(*const IOleInPlaceFrame, @ptrCast(self)), psz_status_text_);
            }
            pub inline fn enableModeless(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IOleInPlaceFrame.VTable, @ptrCast(self.vtable)).EnableModeless(@as(*const IOleInPlaceFrame, @ptrCast(self)), f_enable_);
            }
            pub inline fn translateAccelerator(self: *const T, lpmsg_: ?*MSG, w_i_d_: u16) HRESULT {
                return @as(*const IOleInPlaceFrame.VTable, @ptrCast(self.vtable)).TranslateAccelerator(@as(*const IOleInPlaceFrame, @ptrCast(self)), lpmsg_, w_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleInPlaceObject_Value = Guid.initString("00000113-0000-0000-c000-000000000046");
pub const IID_IOleInPlaceObject = &IID_IOleInPlaceObject_Value;
pub const IOleInPlaceObject = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        InPlaceDeactivate: *const fn (
            self: *const IOleInPlaceObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UIDeactivate: *const fn (
            self: *const IOleInPlaceObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectRects: *const fn (
            self: *const IOleInPlaceObject,
            lprc_pos_rect: ?*RECT,
            lprc_clip_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReactivateAndUndo: *const fn (
            self: *const IOleInPlaceObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn inPlaceDeactivate(self: *const T) HRESULT {
                return @as(*const IOleInPlaceObject.VTable, @ptrCast(self.vtable)).InPlaceDeactivate(@as(*const IOleInPlaceObject, @ptrCast(self)));
            }
            pub inline fn uiDeactivate(self: *const T) HRESULT {
                return @as(*const IOleInPlaceObject.VTable, @ptrCast(self.vtable)).UIDeactivate(@as(*const IOleInPlaceObject, @ptrCast(self)));
            }
            pub inline fn setObjectRects(self: *const T, lprc_pos_rect_: ?*RECT, lprc_clip_rect_: ?*RECT) HRESULT {
                return @as(*const IOleInPlaceObject.VTable, @ptrCast(self.vtable)).SetObjectRects(@as(*const IOleInPlaceObject, @ptrCast(self)), lprc_pos_rect_, lprc_clip_rect_);
            }
            pub inline fn reactivateAndUndo(self: *const T) HRESULT {
                return @as(*const IOleInPlaceObject.VTable, @ptrCast(self.vtable)).ReactivateAndUndo(@as(*const IOleInPlaceObject, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleInPlaceSite_Value = Guid.initString("00000119-0000-0000-c000-000000000046");
pub const IID_IOleInPlaceSite = &IID_IOleInPlaceSite_Value;
pub const IOleInPlaceSite = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        CanInPlaceActivate: *const fn (
            self: *const IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInPlaceActivate: *const fn (
            self: *const IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnUIActivate: *const fn (
            self: *const IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowContext: *const fn (
            self: *const IOleInPlaceSite,
            pp_frame: ?*?*IOleInPlaceFrame,
            pp_doc: ?*?*IOleInPlaceUIWindow,
            lprc_pos_rect: ?*RECT,
            lprc_clip_rect: ?*RECT,
            lp_frame_info: ?*OIFI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scroll: *const fn (
            self: *const IOleInPlaceSite,
            scroll_extant: SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnUIDeactivate: *const fn (
            self: *const IOleInPlaceSite,
            f_undoable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInPlaceDeactivate: *const fn (
            self: *const IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiscardUndoState: *const fn (
            self: *const IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeactivateAndUndo: *const fn (
            self: *const IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPosRectChange: *const fn (
            self: *const IOleInPlaceSite,
            lprc_pos_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn canInPlaceActivate(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).CanInPlaceActivate(@as(*const IOleInPlaceSite, @ptrCast(self)));
            }
            pub inline fn onInPlaceActivate(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).OnInPlaceActivate(@as(*const IOleInPlaceSite, @ptrCast(self)));
            }
            pub inline fn onUIActivate(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).OnUIActivate(@as(*const IOleInPlaceSite, @ptrCast(self)));
            }
            pub inline fn getWindowContext(self: *const T, pp_frame_: ?*?*IOleInPlaceFrame, pp_doc_: ?*?*IOleInPlaceUIWindow, lprc_pos_rect_: ?*RECT, lprc_clip_rect_: ?*RECT, lp_frame_info_: ?*OIFI) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).GetWindowContext(@as(*const IOleInPlaceSite, @ptrCast(self)), pp_frame_, pp_doc_, lprc_pos_rect_, lprc_clip_rect_, lp_frame_info_);
            }
            pub inline fn scroll(self: *const T, scroll_extant_: SIZE) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).Scroll(@as(*const IOleInPlaceSite, @ptrCast(self)), scroll_extant_);
            }
            pub inline fn onUIDeactivate(self: *const T, f_undoable_: BOOL) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).OnUIDeactivate(@as(*const IOleInPlaceSite, @ptrCast(self)), f_undoable_);
            }
            pub inline fn onInPlaceDeactivate(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).OnInPlaceDeactivate(@as(*const IOleInPlaceSite, @ptrCast(self)));
            }
            pub inline fn discardUndoState(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).DiscardUndoState(@as(*const IOleInPlaceSite, @ptrCast(self)));
            }
            pub inline fn deactivateAndUndo(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).DeactivateAndUndo(@as(*const IOleInPlaceSite, @ptrCast(self)));
            }
            pub inline fn onPosRectChange(self: *const T, lprc_pos_rect_: ?*RECT) HRESULT {
                return @as(*const IOleInPlaceSite.VTable, @ptrCast(self.vtable)).OnPosRectChange(@as(*const IOleInPlaceSite, @ptrCast(self)), lprc_pos_rect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContinue_Value = Guid.initString("0000012a-0000-0000-c000-000000000046");
pub const IID_IContinue = &IID_IContinue_Value;
pub const IContinue = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FContinue: *const fn (
            self: *const IContinue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn fContinue(self: *const T) HRESULT {
                return @as(*const IContinue.VTable, @ptrCast(self.vtable)).FContinue(@as(*const IContinue, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IViewObject_Value = Guid.initString("0000010d-0000-0000-c000-000000000046");
pub const IID_IViewObject = &IID_IViewObject_Value;
pub const IViewObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Draw: *const fn (
            self: *const IViewObject,
            dw_draw_aspect: u32,
            lindex: i32,
            pv_aspect: ?*anyopaque,
            ptd: ?*DVTARGETDEVICE,
            hdc_target_dev: ?HDC,
            hdc_draw: ?HDC,
            lprc_bounds: ?*RECTL,
            lprc_w_bounds: ?*RECTL,
            pfn_continue: isize,
            dw_continue: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorSet: *const fn (
            self: *const IViewObject,
            dw_draw_aspect: u32,
            lindex: i32,
            pv_aspect: ?*anyopaque,
            ptd: ?*DVTARGETDEVICE,
            hic_target_dev: ?HDC,
            pp_color_set: ?*?*LOGPALETTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Freeze: *const fn (
            self: *const IViewObject,
            dw_draw_aspect: u32,
            lindex: i32,
            pv_aspect: ?*anyopaque,
            pdw_freeze: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unfreeze: *const fn (
            self: *const IViewObject,
            dw_freeze: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAdvise: *const fn (
            self: *const IViewObject,
            aspects: u32,
            advf: u32,
            p_adv_sink: ?*IAdviseSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdvise: *const fn (
            self: *const IViewObject,
            p_aspects: ?*u32,
            p_advf: ?*u32,
            pp_adv_sink: ?*?*IAdviseSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn draw(self: *const T, dw_draw_aspect_: u32, lindex_: i32, pv_aspect_: ?*anyopaque, ptd_: ?*DVTARGETDEVICE, hdc_target_dev_: ?HDC, hdc_draw_: ?HDC, lprc_bounds_: ?*RECTL, lprc_w_bounds_: ?*RECTL, pfn_continue_: isize, dw_continue_: usize) HRESULT {
                return @as(*const IViewObject.VTable, @ptrCast(self.vtable)).Draw(@as(*const IViewObject, @ptrCast(self)), dw_draw_aspect_, lindex_, pv_aspect_, ptd_, hdc_target_dev_, hdc_draw_, lprc_bounds_, lprc_w_bounds_, pfn_continue_, dw_continue_);
            }
            pub inline fn getColorSet(self: *const T, dw_draw_aspect_: u32, lindex_: i32, pv_aspect_: ?*anyopaque, ptd_: ?*DVTARGETDEVICE, hic_target_dev_: ?HDC, pp_color_set_: ?*?*LOGPALETTE) HRESULT {
                return @as(*const IViewObject.VTable, @ptrCast(self.vtable)).GetColorSet(@as(*const IViewObject, @ptrCast(self)), dw_draw_aspect_, lindex_, pv_aspect_, ptd_, hic_target_dev_, pp_color_set_);
            }
            pub inline fn freeze(self: *const T, dw_draw_aspect_: u32, lindex_: i32, pv_aspect_: ?*anyopaque, pdw_freeze_: ?*u32) HRESULT {
                return @as(*const IViewObject.VTable, @ptrCast(self.vtable)).Freeze(@as(*const IViewObject, @ptrCast(self)), dw_draw_aspect_, lindex_, pv_aspect_, pdw_freeze_);
            }
            pub inline fn unfreeze(self: *const T, dw_freeze_: u32) HRESULT {
                return @as(*const IViewObject.VTable, @ptrCast(self.vtable)).Unfreeze(@as(*const IViewObject, @ptrCast(self)), dw_freeze_);
            }
            pub inline fn setAdvise(self: *const T, aspects_: u32, advf_: u32, p_adv_sink_: ?*IAdviseSink) HRESULT {
                return @as(*const IViewObject.VTable, @ptrCast(self.vtable)).SetAdvise(@as(*const IViewObject, @ptrCast(self)), aspects_, advf_, p_adv_sink_);
            }
            pub inline fn getAdvise(self: *const T, p_aspects_: ?*u32, p_advf_: ?*u32, pp_adv_sink_: ?*?*IAdviseSink) HRESULT {
                return @as(*const IViewObject.VTable, @ptrCast(self.vtable)).GetAdvise(@as(*const IViewObject, @ptrCast(self)), p_aspects_, p_advf_, pp_adv_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IViewObject2_Value = Guid.initString("00000127-0000-0000-c000-000000000046");
pub const IID_IViewObject2 = &IID_IViewObject2_Value;
pub const IViewObject2 = extern struct {
    pub const VTable = extern struct {
        base: IViewObject.VTable,
        GetExtent: *const fn (
            self: *const IViewObject2,
            dw_draw_aspect: u32,
            lindex: i32,
            ptd: ?*DVTARGETDEVICE,
            lpsizel: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IViewObject.MethodMixin(T);
            pub inline fn getExtent(self: *const T, dw_draw_aspect_: u32, lindex_: i32, ptd_: ?*DVTARGETDEVICE, lpsizel_: ?*SIZE) HRESULT {
                return @as(*const IViewObject2.VTable, @ptrCast(self.vtable)).GetExtent(@as(*const IViewObject2, @ptrCast(self)), dw_draw_aspect_, lindex_, ptd_, lpsizel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDropSource_Value = Guid.initString("00000121-0000-0000-c000-000000000046");
pub const IID_IDropSource = &IID_IDropSource_Value;
pub const IDropSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryContinueDrag: *const fn (
            self: *const IDropSource,
            f_escape_pressed: BOOL,
            grf_key_state: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GiveFeedback: *const fn (
            self: *const IDropSource,
            dw_effect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryContinueDrag(self: *const T, f_escape_pressed_: BOOL, grf_key_state_: u32) HRESULT {
                return @as(*const IDropSource.VTable, @ptrCast(self.vtable)).QueryContinueDrag(@as(*const IDropSource, @ptrCast(self)), f_escape_pressed_, grf_key_state_);
            }
            pub inline fn giveFeedback(self: *const T, dw_effect_: u32) HRESULT {
                return @as(*const IDropSource.VTable, @ptrCast(self.vtable)).GiveFeedback(@as(*const IDropSource, @ptrCast(self)), dw_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDropTarget_Value = Guid.initString("00000122-0000-0000-c000-000000000046");
pub const IID_IDropTarget = &IID_IDropTarget_Value;
pub const IDropTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DragEnter: *const fn (
            self: *const IDropTarget,
            p_data_obj: ?*IDataObject,
            grf_key_state: u32,
            pt: POINTL,
            pdw_effect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DragOver: *const fn (
            self: *const IDropTarget,
            grf_key_state: u32,
            pt: POINTL,
            pdw_effect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DragLeave: *const fn (
            self: *const IDropTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Drop: *const fn (
            self: *const IDropTarget,
            p_data_obj: ?*IDataObject,
            grf_key_state: u32,
            pt: POINTL,
            pdw_effect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn dragEnter(self: *const T, p_data_obj_: ?*IDataObject, grf_key_state_: u32, pt_: POINTL, pdw_effect_: ?*u32) HRESULT {
                return @as(*const IDropTarget.VTable, @ptrCast(self.vtable)).DragEnter(@as(*const IDropTarget, @ptrCast(self)), p_data_obj_, grf_key_state_, pt_, pdw_effect_);
            }
            pub inline fn dragOver(self: *const T, grf_key_state_: u32, pt_: POINTL, pdw_effect_: ?*u32) HRESULT {
                return @as(*const IDropTarget.VTable, @ptrCast(self.vtable)).DragOver(@as(*const IDropTarget, @ptrCast(self)), grf_key_state_, pt_, pdw_effect_);
            }
            pub inline fn dragLeave(self: *const T) HRESULT {
                return @as(*const IDropTarget.VTable, @ptrCast(self.vtable)).DragLeave(@as(*const IDropTarget, @ptrCast(self)));
            }
            pub inline fn drop(self: *const T, p_data_obj_: ?*IDataObject, grf_key_state_: u32, pt_: POINTL, pdw_effect_: ?*u32) HRESULT {
                return @as(*const IDropTarget.VTable, @ptrCast(self.vtable)).Drop(@as(*const IDropTarget, @ptrCast(self)), p_data_obj_, grf_key_state_, pt_, pdw_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDropSourceNotify_Value = Guid.initString("0000012b-0000-0000-c000-000000000046");
pub const IID_IDropSourceNotify = &IID_IDropSourceNotify_Value;
pub const IDropSourceNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DragEnterTarget: *const fn (
            self: *const IDropSourceNotify,
            hwnd_target: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DragLeaveTarget: *const fn (
            self: *const IDropSourceNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn dragEnterTarget(self: *const T, hwnd_target_: ?HWND) HRESULT {
                return @as(*const IDropSourceNotify.VTable, @ptrCast(self.vtable)).DragEnterTarget(@as(*const IDropSourceNotify, @ptrCast(self)), hwnd_target_);
            }
            pub inline fn dragLeaveTarget(self: *const T) HRESULT {
                return @as(*const IDropSourceNotify.VTable, @ptrCast(self.vtable)).DragLeaveTarget(@as(*const IDropSourceNotify, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IEnterpriseDropTarget_Value = Guid.initString("390e3878-fd55-4e18-819d-4682081c0cfd");
pub const IID_IEnterpriseDropTarget = &IID_IEnterpriseDropTarget_Value;
pub const IEnterpriseDropTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDropSourceEnterpriseId: *const fn (
            self: *const IEnterpriseDropTarget,
            identity: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEvaluatingEdpPolicy: *const fn (
            self: *const IEnterpriseDropTarget,
            value: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setDropSourceEnterpriseId(self: *const T, identity_: ?[*:0]const u16) HRESULT {
                return @as(*const IEnterpriseDropTarget.VTable, @ptrCast(self.vtable)).SetDropSourceEnterpriseId(@as(*const IEnterpriseDropTarget, @ptrCast(self)), identity_);
            }
            pub inline fn isEvaluatingEdpPolicy(self: *const T, value_: ?*BOOL) HRESULT {
                return @as(*const IEnterpriseDropTarget.VTable, @ptrCast(self.vtable)).IsEvaluatingEdpPolicy(@as(*const IEnterpriseDropTarget, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OLEVERB = extern struct {
    lVerb: i32,
    lpszVerbName: ?PWSTR,
    fuFlags: u32,
    grfAttribs: u32,
};

pub const OLEVERBATTRIB = enum(i32) {
    NEVERDIRTIES = 1,
    ONCONTAINERMENU = 2,
};
pub const OLEVERBATTRIB_NEVERDIRTIES = OLEVERBATTRIB.NEVERDIRTIES;
pub const OLEVERBATTRIB_ONCONTAINERMENU = OLEVERBATTRIB.ONCONTAINERMENU;

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumOLEVERB_Value = Guid.initString("00000104-0000-0000-c000-000000000046");
pub const IID_IEnumOLEVERB = &IID_IEnumOLEVERB_Value;
pub const IEnumOLEVERB = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumOLEVERB,
            celt: u32,
            rgelt: [*]OLEVERB,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumOLEVERB,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumOLEVERB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumOLEVERB,
            ppenum: ?*?*IEnumOLEVERB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]OLEVERB, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumOLEVERB.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumOLEVERB, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumOLEVERB.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumOLEVERB, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumOLEVERB.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumOLEVERB, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumOLEVERB) HRESULT {
                return @as(*const IEnumOLEVERB.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumOLEVERB, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NUMPARSE = extern struct {
    cDig: i32,
    dwInFlags: u32,
    dwOutFlags: u32,
    cchUsed: i32,
    nBaseShift: i32,
    nPwr10: i32,
};

pub const UDATE = extern struct {
    st: SYSTEMTIME,
    wDayOfYear: u16,
};

pub const REGKIND = enum(i32) {
    DEFAULT = 0,
    REGISTER = 1,
    NONE = 2,
};
pub const REGKIND_DEFAULT = REGKIND.DEFAULT;
pub const REGKIND_REGISTER = REGKIND.REGISTER;
pub const REGKIND_NONE = REGKIND.NONE;

pub const PARAMDATA = extern struct {
    szName: ?PWSTR,
    vt: u16,
};

pub const METHODDATA = extern struct {
    szName: ?PWSTR,
    ppdata: ?*PARAMDATA,
    dispid: i32,
    iMeth: u32,
    cc: CALLCONV,
    cArgs: u32,
    wFlags: u16,
    vtReturn: u16,
};

pub const INTERFACEDATA = extern struct {
    pmethdata: ?*METHODDATA,
    cMembers: u32,
};

pub const UASFLAGS = enum(i32) {
    NORMAL = 0,
    BLOCKED = 1,
    NOPARENTENABLE = 2,
    MASK = 3,
};
pub const UAS_NORMAL = UASFLAGS.NORMAL;
pub const UAS_BLOCKED = UASFLAGS.BLOCKED;
pub const UAS_NOPARENTENABLE = UASFLAGS.NOPARENTENABLE;
pub const UAS_MASK = UASFLAGS.MASK;

pub const READYSTATE = enum(i32) {
    UNINITIALIZED = 0,
    LOADING = 1,
    LOADED = 2,
    INTERACTIVE = 3,
    COMPLETE = 4,
};
pub const READYSTATE_UNINITIALIZED = READYSTATE.UNINITIALIZED;
pub const READYSTATE_LOADING = READYSTATE.LOADING;
pub const READYSTATE_LOADED = READYSTATE.LOADED;
pub const READYSTATE_INTERACTIVE = READYSTATE.INTERACTIVE;
pub const READYSTATE_COMPLETE = READYSTATE.COMPLETE;

pub const LICINFO = extern struct {
    cbLicInfo: i32,
    fRuntimeKeyAvail: BOOL,
    fLicVerified: BOOL,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IClassFactory2_Value = Guid.initString("b196b28f-bab4-101a-b69c-00aa00341d07");
pub const IID_IClassFactory2 = &IID_IClassFactory2_Value;
pub const IClassFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IClassFactory.VTable,
        GetLicInfo: *const fn (
            self: *const IClassFactory2,
            p_lic_info: ?*LICINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestLicKey: *const fn (
            self: *const IClassFactory2,
            dw_reserved: u32,
            p_bstr_key: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstanceLic: *const fn (
            self: *const IClassFactory2,
            p_unk_outer: ?*IUnknown,
            p_unk_reserved: ?*IUnknown,
            riid: ?*const Guid,
            bstr_key: ?BSTR,
            ppv_obj: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IClassFactory.MethodMixin(T);
            pub inline fn getLicInfo(self: *const T, p_lic_info_: ?*LICINFO) HRESULT {
                return @as(*const IClassFactory2.VTable, @ptrCast(self.vtable)).GetLicInfo(@as(*const IClassFactory2, @ptrCast(self)), p_lic_info_);
            }
            pub inline fn requestLicKey(self: *const T, dw_reserved_: u32, p_bstr_key_: ?*?BSTR) HRESULT {
                return @as(*const IClassFactory2.VTable, @ptrCast(self.vtable)).RequestLicKey(@as(*const IClassFactory2, @ptrCast(self)), dw_reserved_, p_bstr_key_);
            }
            pub inline fn createInstanceLic(self: *const T, p_unk_outer_: ?*IUnknown, p_unk_reserved_: ?*IUnknown, riid_: ?*const Guid, bstr_key_: ?BSTR, ppv_obj_: ?*?*anyopaque) HRESULT {
                return @as(*const IClassFactory2.VTable, @ptrCast(self.vtable)).CreateInstanceLic(@as(*const IClassFactory2, @ptrCast(self)), p_unk_outer_, p_unk_reserved_, riid_, bstr_key_, ppv_obj_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IProvideClassInfo_Value = Guid.initString("b196b283-bab4-101a-b69c-00aa00341d07");
pub const IID_IProvideClassInfo = &IID_IProvideClassInfo_Value;
pub const IProvideClassInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClassInfo: *const fn (
            self: *const IProvideClassInfo,
            pp_t_i: ?*?*ITypeInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getClassInfo(self: *const T, pp_t_i_: ?*?*ITypeInfo) HRESULT {
                return @as(*const IProvideClassInfo.VTable, @ptrCast(self.vtable)).GetClassInfo(@as(*const IProvideClassInfo, @ptrCast(self)), pp_t_i_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const GUIDKIND = enum(i32) {
    D = 1,
};
pub const GUIDKIND_DEFAULT_SOURCE_DISP_IID = GUIDKIND.D;

// TODO: this type is limited to platform 'windows5.0'
const IID_IProvideClassInfo2_Value = Guid.initString("a6bc3ac0-dbaa-11ce-9de3-00aa004bb851");
pub const IID_IProvideClassInfo2 = &IID_IProvideClassInfo2_Value;
pub const IProvideClassInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IProvideClassInfo.VTable,
        GetGUID: *const fn (
            self: *const IProvideClassInfo2,
            dw_guid_kind: u32,
            p_g_u_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IProvideClassInfo.MethodMixin(T);
            pub inline fn getGUID(self: *const T, dw_guid_kind_: u32, p_g_u_i_d_: ?*Guid) HRESULT {
                return @as(*const IProvideClassInfo2.VTable, @ptrCast(self.vtable)).GetGUID(@as(*const IProvideClassInfo2, @ptrCast(self)), dw_guid_kind_, p_g_u_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IProvideMultipleClassInfo_Value = Guid.initString("a7aba9c1-8983-11cf-8f20-00805f2cd064");
pub const IID_IProvideMultipleClassInfo = &IID_IProvideMultipleClassInfo_Value;
pub const IProvideMultipleClassInfo = extern struct {
    pub const VTable = extern struct {
        base: IProvideClassInfo2.VTable,
        GetMultiTypeInfoCount: *const fn (
            self: *const IProvideMultipleClassInfo,
            pcti: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfoOfIndex: *const fn (
            self: *const IProvideMultipleClassInfo,
            iti: u32,
            dw_flags: MULTICLASSINFO_FLAGS,
            ppti_co_class: ?*?*ITypeInfo,
            pdw_t_i_flags: ?*u32,
            pcdispid_reserved: ?*u32,
            piid_primary: ?*Guid,
            piid_source: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IProvideClassInfo2.MethodMixin(T);
            pub inline fn getMultiTypeInfoCount(self: *const T, pcti_: ?*u32) HRESULT {
                return @as(*const IProvideMultipleClassInfo.VTable, @ptrCast(self.vtable)).GetMultiTypeInfoCount(@as(*const IProvideMultipleClassInfo, @ptrCast(self)), pcti_);
            }
            pub inline fn getInfoOfIndex(self: *const T, iti_: u32, dw_flags_: MULTICLASSINFO_FLAGS, ppti_co_class_: ?*?*ITypeInfo, pdw_t_i_flags_: ?*u32, pcdispid_reserved_: ?*u32, piid_primary_: ?*Guid, piid_source_: ?*Guid) HRESULT {
                return @as(*const IProvideMultipleClassInfo.VTable, @ptrCast(self.vtable)).GetInfoOfIndex(@as(*const IProvideMultipleClassInfo, @ptrCast(self)), iti_, dw_flags_, ppti_co_class_, pdw_t_i_flags_, pcdispid_reserved_, piid_primary_, piid_source_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CONTROLINFO = extern struct {
    cb: u32,
    hAccel: ?HACCEL,
    cAccel: u16,
    dwFlags: u32,
};

pub const CTRLINFO = enum(i32) {
    RETURN = 1,
    ESCAPE = 2,
};
pub const CTRLINFO_EATS_RETURN = CTRLINFO.RETURN;
pub const CTRLINFO_EATS_ESCAPE = CTRLINFO.ESCAPE;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleControl_Value = Guid.initString("b196b288-bab4-101a-b69c-00aa00341d07");
pub const IID_IOleControl = &IID_IOleControl_Value;
pub const IOleControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetControlInfo: *const fn (
            self: *const IOleControl,
            p_c_i: ?*CONTROLINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMnemonic: *const fn (
            self: *const IOleControl,
            p_msg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAmbientPropertyChange: *const fn (
            self: *const IOleControl,
            disp_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreezeEvents: *const fn (
            self: *const IOleControl,
            b_freeze: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getControlInfo(self: *const T, p_c_i_: ?*CONTROLINFO) HRESULT {
                return @as(*const IOleControl.VTable, @ptrCast(self.vtable)).GetControlInfo(@as(*const IOleControl, @ptrCast(self)), p_c_i_);
            }
            pub inline fn onMnemonic(self: *const T, p_msg_: ?*MSG) HRESULT {
                return @as(*const IOleControl.VTable, @ptrCast(self.vtable)).OnMnemonic(@as(*const IOleControl, @ptrCast(self)), p_msg_);
            }
            pub inline fn onAmbientPropertyChange(self: *const T, disp_i_d_: i32) HRESULT {
                return @as(*const IOleControl.VTable, @ptrCast(self.vtable)).OnAmbientPropertyChange(@as(*const IOleControl, @ptrCast(self)), disp_i_d_);
            }
            pub inline fn freezeEvents(self: *const T, b_freeze_: BOOL) HRESULT {
                return @as(*const IOleControl.VTable, @ptrCast(self.vtable)).FreezeEvents(@as(*const IOleControl, @ptrCast(self)), b_freeze_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const POINTF = extern struct {
    x: f32,
    y: f32,
};

pub const XFORMCOORDS = enum(i32) {
    POSITION = 1,
    SIZE = 2,
    HIMETRICTOCONTAINER = 4,
    CONTAINERTOHIMETRIC = 8,
    EVENTCOMPAT = 16,
};
pub const XFORMCOORDS_POSITION = XFORMCOORDS.POSITION;
pub const XFORMCOORDS_SIZE = XFORMCOORDS.SIZE;
pub const XFORMCOORDS_HIMETRICTOCONTAINER = XFORMCOORDS.HIMETRICTOCONTAINER;
pub const XFORMCOORDS_CONTAINERTOHIMETRIC = XFORMCOORDS.CONTAINERTOHIMETRIC;
pub const XFORMCOORDS_EVENTCOMPAT = XFORMCOORDS.EVENTCOMPAT;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleControlSite_Value = Guid.initString("b196b289-bab4-101a-b69c-00aa00341d07");
pub const IID_IOleControlSite = &IID_IOleControlSite_Value;
pub const IOleControlSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnControlInfoChanged: *const fn (
            self: *const IOleControlSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockInPlaceActive: *const fn (
            self: *const IOleControlSite,
            f_lock: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtendedControl: *const fn (
            self: *const IOleControlSite,
            pp_disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransformCoords: *const fn (
            self: *const IOleControlSite,
            p_ptl_himetric: ?*POINTL,
            p_ptf_container: ?*POINTF,
            dw_flags: XFORMCOORDS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAccelerator: *const fn (
            self: *const IOleControlSite,
            p_msg: ?*MSG,
            grf_modifiers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFocus: *const fn (
            self: *const IOleControlSite,
            f_got_focus: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowPropertyFrame: *const fn (
            self: *const IOleControlSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onControlInfoChanged(self: *const T) HRESULT {
                return @as(*const IOleControlSite.VTable, @ptrCast(self.vtable)).OnControlInfoChanged(@as(*const IOleControlSite, @ptrCast(self)));
            }
            pub inline fn lockInPlaceActive(self: *const T, f_lock_: BOOL) HRESULT {
                return @as(*const IOleControlSite.VTable, @ptrCast(self.vtable)).LockInPlaceActive(@as(*const IOleControlSite, @ptrCast(self)), f_lock_);
            }
            pub inline fn getExtendedControl(self: *const T, pp_disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IOleControlSite.VTable, @ptrCast(self.vtable)).GetExtendedControl(@as(*const IOleControlSite, @ptrCast(self)), pp_disp_);
            }
            pub inline fn transformCoords(self: *const T, p_ptl_himetric_: ?*POINTL, p_ptf_container_: ?*POINTF, dw_flags_: XFORMCOORDS) HRESULT {
                return @as(*const IOleControlSite.VTable, @ptrCast(self.vtable)).TransformCoords(@as(*const IOleControlSite, @ptrCast(self)), p_ptl_himetric_, p_ptf_container_, dw_flags_);
            }
            pub inline fn translateAccelerator(self: *const T, p_msg_: ?*MSG, grf_modifiers_: u32) HRESULT {
                return @as(*const IOleControlSite.VTable, @ptrCast(self.vtable)).TranslateAccelerator(@as(*const IOleControlSite, @ptrCast(self)), p_msg_, grf_modifiers_);
            }
            pub inline fn onFocus(self: *const T, f_got_focus_: BOOL) HRESULT {
                return @as(*const IOleControlSite.VTable, @ptrCast(self.vtable)).OnFocus(@as(*const IOleControlSite, @ptrCast(self)), f_got_focus_);
            }
            pub inline fn showPropertyFrame(self: *const T) HRESULT {
                return @as(*const IOleControlSite.VTable, @ptrCast(self.vtable)).ShowPropertyFrame(@as(*const IOleControlSite, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PROPPAGEINFO = extern struct {
    cb: u32,
    pszTitle: ?PWSTR,
    size: SIZE,
    pszDocString: ?PWSTR,
    pszHelpFile: ?PWSTR,
    dwHelpContext: u32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPropertyPage_Value = Guid.initString("b196b28d-bab4-101a-b69c-00aa00341d07");
pub const IID_IPropertyPage = &IID_IPropertyPage_Value;
pub const IPropertyPage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetPageSite: *const fn (
            self: *const IPropertyPage,
            p_page_site: ?*IPropertyPageSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn (
            self: *const IPropertyPage,
            h_wnd_parent: ?HWND,
            p_rect: ?*RECT,
            b_modal: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: *const fn (
            self: *const IPropertyPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageInfo: *const fn (
            self: *const IPropertyPage,
            p_page_info: ?*PROPPAGEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjects: *const fn (
            self: *const IPropertyPage,
            c_objects: u32,
            pp_unk: [*]?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn (
            self: *const IPropertyPage,
            n_cmd_show: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IPropertyPage,
            p_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPageDirty: *const fn (
            self: *const IPropertyPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Apply: *const fn (
            self: *const IPropertyPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Help: *const fn (
            self: *const IPropertyPage,
            psz_help_dir: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAccelerator: *const fn (
            self: *const IPropertyPage,
            p_msg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setPageSite(self: *const T, p_page_site_: ?*IPropertyPageSite) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).SetPageSite(@as(*const IPropertyPage, @ptrCast(self)), p_page_site_);
            }
            pub inline fn activate(self: *const T, h_wnd_parent_: ?HWND, p_rect_: ?*RECT, b_modal_: BOOL) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).Activate(@as(*const IPropertyPage, @ptrCast(self)), h_wnd_parent_, p_rect_, b_modal_);
            }
            pub inline fn deactivate(self: *const T) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).Deactivate(@as(*const IPropertyPage, @ptrCast(self)));
            }
            pub inline fn getPageInfo(self: *const T, p_page_info_: ?*PROPPAGEINFO) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).GetPageInfo(@as(*const IPropertyPage, @ptrCast(self)), p_page_info_);
            }
            pub inline fn setObjects(self: *const T, c_objects_: u32, pp_unk_: [*]?*IUnknown) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).SetObjects(@as(*const IPropertyPage, @ptrCast(self)), c_objects_, pp_unk_);
            }
            pub inline fn show(self: *const T, n_cmd_show_: u32) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).Show(@as(*const IPropertyPage, @ptrCast(self)), n_cmd_show_);
            }
            pub inline fn move(self: *const T, p_rect_: ?*RECT) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).Move(@as(*const IPropertyPage, @ptrCast(self)), p_rect_);
            }
            pub inline fn isPageDirty(self: *const T) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).IsPageDirty(@as(*const IPropertyPage, @ptrCast(self)));
            }
            pub inline fn apply(self: *const T) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).Apply(@as(*const IPropertyPage, @ptrCast(self)));
            }
            pub inline fn help(self: *const T, psz_help_dir_: ?[*:0]const u16) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).Help(@as(*const IPropertyPage, @ptrCast(self)), psz_help_dir_);
            }
            pub inline fn translateAccelerator(self: *const T, p_msg_: ?*MSG) HRESULT {
                return @as(*const IPropertyPage.VTable, @ptrCast(self.vtable)).TranslateAccelerator(@as(*const IPropertyPage, @ptrCast(self)), p_msg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPropertyPage2_Value = Guid.initString("01e44665-24ac-101b-84ed-08002b2ec713");
pub const IID_IPropertyPage2 = &IID_IPropertyPage2_Value;
pub const IPropertyPage2 = extern struct {
    pub const VTable = extern struct {
        base: IPropertyPage.VTable,
        EditProperty: *const fn (
            self: *const IPropertyPage2,
            disp_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyPage.MethodMixin(T);
            pub inline fn editProperty(self: *const T, disp_i_d_: i32) HRESULT {
                return @as(*const IPropertyPage2.VTable, @ptrCast(self.vtable)).EditProperty(@as(*const IPropertyPage2, @ptrCast(self)), disp_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PROPPAGESTATUS = enum(i32) {
    DIRTY = 1,
    VALIDATE = 2,
    CLEAN = 4,
};
pub const PROPPAGESTATUS_DIRTY = PROPPAGESTATUS.DIRTY;
pub const PROPPAGESTATUS_VALIDATE = PROPPAGESTATUS.VALIDATE;
pub const PROPPAGESTATUS_CLEAN = PROPPAGESTATUS.CLEAN;

// TODO: this type is limited to platform 'windows5.0'
const IID_IPropertyPageSite_Value = Guid.initString("b196b28c-bab4-101a-b69c-00aa00341d07");
pub const IID_IPropertyPageSite = &IID_IPropertyPageSite_Value;
pub const IPropertyPageSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStatusChange: *const fn (
            self: *const IPropertyPageSite,
            dw_flags: PROPPAGESTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleID: *const fn (
            self: *const IPropertyPageSite,
            p_locale_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageContainer: *const fn (
            self: *const IPropertyPageSite,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAccelerator: *const fn (
            self: *const IPropertyPageSite,
            p_msg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onStatusChange(self: *const T, dw_flags_: PROPPAGESTATUS) HRESULT {
                return @as(*const IPropertyPageSite.VTable, @ptrCast(self.vtable)).OnStatusChange(@as(*const IPropertyPageSite, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getLocaleID(self: *const T, p_locale_i_d_: ?*u32) HRESULT {
                return @as(*const IPropertyPageSite.VTable, @ptrCast(self.vtable)).GetLocaleID(@as(*const IPropertyPageSite, @ptrCast(self)), p_locale_i_d_);
            }
            pub inline fn getPageContainer(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IPropertyPageSite.VTable, @ptrCast(self.vtable)).GetPageContainer(@as(*const IPropertyPageSite, @ptrCast(self)), pp_unk_);
            }
            pub inline fn translateAccelerator(self: *const T, p_msg_: ?*MSG) HRESULT {
                return @as(*const IPropertyPageSite.VTable, @ptrCast(self.vtable)).TranslateAccelerator(@as(*const IPropertyPageSite, @ptrCast(self)), p_msg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPropertyNotifySink_Value = Guid.initString("9bfbbc02-eff1-101a-84ed-00aa00341d07");
pub const IID_IPropertyNotifySink = &IID_IPropertyNotifySink_Value;
pub const IPropertyNotifySink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnChanged: *const fn (
            self: *const IPropertyNotifySink,
            disp_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnRequestEdit: *const fn (
            self: *const IPropertyNotifySink,
            disp_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onChanged(self: *const T, disp_i_d_: i32) HRESULT {
                return @as(*const IPropertyNotifySink.VTable, @ptrCast(self.vtable)).OnChanged(@as(*const IPropertyNotifySink, @ptrCast(self)), disp_i_d_);
            }
            pub inline fn onRequestEdit(self: *const T, disp_i_d_: i32) HRESULT {
                return @as(*const IPropertyNotifySink.VTable, @ptrCast(self.vtable)).OnRequestEdit(@as(*const IPropertyNotifySink, @ptrCast(self)), disp_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CAUUID = extern struct {
    cElems: u32,
    pElems: ?*Guid,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISpecifyPropertyPages_Value = Guid.initString("b196b28b-bab4-101a-b69c-00aa00341d07");
pub const IID_ISpecifyPropertyPages = &IID_ISpecifyPropertyPages_Value;
pub const ISpecifyPropertyPages = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPages: *const fn (
            self: *const ISpecifyPropertyPages,
            p_pages: ?*CAUUID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPages(self: *const T, p_pages_: ?*CAUUID) HRESULT {
                return @as(*const ISpecifyPropertyPages.VTable, @ptrCast(self.vtable)).GetPages(@as(*const ISpecifyPropertyPages, @ptrCast(self)), p_pages_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPersistPropertyBag_Value = Guid.initString("37d84f60-42cb-11ce-8135-00aa004bb851");
pub const IID_IPersistPropertyBag = &IID_IPersistPropertyBag_Value;
pub const IPersistPropertyBag = extern struct {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        InitNew: *const fn (
            self: *const IPersistPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: *const fn (
            self: *const IPersistPropertyBag,
            p_prop_bag: ?*IPropertyBag,
            p_error_log: ?*IErrorLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IPersistPropertyBag,
            p_prop_bag: ?*IPropertyBag,
            f_clear_dirty: BOOL,
            f_save_all_properties: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPersist.MethodMixin(T);
            pub inline fn initNew(self: *const T) HRESULT {
                return @as(*const IPersistPropertyBag.VTable, @ptrCast(self.vtable)).InitNew(@as(*const IPersistPropertyBag, @ptrCast(self)));
            }
            pub inline fn load(self: *const T, p_prop_bag_: ?*IPropertyBag, p_error_log_: ?*IErrorLog) HRESULT {
                return @as(*const IPersistPropertyBag.VTable, @ptrCast(self.vtable)).Load(@as(*const IPersistPropertyBag, @ptrCast(self)), p_prop_bag_, p_error_log_);
            }
            pub inline fn save(self: *const T, p_prop_bag_: ?*IPropertyBag, f_clear_dirty_: BOOL, f_save_all_properties_: BOOL) HRESULT {
                return @as(*const IPersistPropertyBag.VTable, @ptrCast(self.vtable)).Save(@as(*const IPersistPropertyBag, @ptrCast(self)), p_prop_bag_, f_clear_dirty_, f_save_all_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISimpleFrameSite_Value = Guid.initString("742b0e01-14e6-101b-914e-00aa00300cab");
pub const IID_ISimpleFrameSite = &IID_ISimpleFrameSite_Value;
pub const ISimpleFrameSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PreMessageFilter: *const fn (
            self: *const ISimpleFrameSite,
            h_wnd: ?HWND,
            msg: u32,
            wp: WPARAM,
            lp: LPARAM,
            pl_result: ?*LRESULT,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostMessageFilter: *const fn (
            self: *const ISimpleFrameSite,
            h_wnd: ?HWND,
            msg: u32,
            wp: WPARAM,
            lp: LPARAM,
            pl_result: ?*LRESULT,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn preMessageFilter(self: *const T, h_wnd_: ?HWND, msg_: u32, wp_: WPARAM, lp_: LPARAM, pl_result_: ?*LRESULT, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const ISimpleFrameSite.VTable, @ptrCast(self.vtable)).PreMessageFilter(@as(*const ISimpleFrameSite, @ptrCast(self)), h_wnd_, msg_, wp_, lp_, pl_result_, pdw_cookie_);
            }
            pub inline fn postMessageFilter(self: *const T, h_wnd_: ?HWND, msg_: u32, wp_: WPARAM, lp_: LPARAM, pl_result_: ?*LRESULT, dw_cookie_: u32) HRESULT {
                return @as(*const ISimpleFrameSite.VTable, @ptrCast(self.vtable)).PostMessageFilter(@as(*const ISimpleFrameSite, @ptrCast(self)), h_wnd_, msg_, wp_, lp_, pl_result_, dw_cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IFont_Value = Guid.initString("bef6e002-a874-101a-8bba-00aa00300cab");
pub const IID_IFont = &IID_IFont_Value;
pub const IFont = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            p_size: ?*CY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            size: CY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Bold: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            p_bold: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Bold: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            bold: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Italic: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            p_italic: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Italic: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            italic: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Underline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            p_underline: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Underline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            underline: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Strikethrough: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            p_strikethrough: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Strikethrough: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            strikethrough: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Weight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            p_weight: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Weight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            weight: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Charset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            p_charset: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Charset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            charset: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hFont: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFont,
            ph_font: ?*?HFONT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IFont,
            pp_font: ?*?*IFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEqual: *const fn (
            self: *const IFont,
            p_font_other: ?*IFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRatio: *const fn (
            self: *const IFont,
            cy_logical: i32,
            cy_himetric: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryTextMetrics: *const fn (
            self: *const IFont,
            p_t_m: ?*TEXTMETRICW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRefHfont: *const fn (
            self: *const IFont,
            h_font: ?HFONT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseHfont: *const fn (
            self: *const IFont,
            h_font: ?HFONT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHdc: *const fn (
            self: *const IFont,
            h_d_c: ?HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFont, @ptrCast(self)), p_name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFont, @ptrCast(self)), name_);
            }
            pub inline fn getSize(self: *const T, p_size_: ?*CY) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IFont, @ptrCast(self)), p_size_);
            }
            pub inline fn putSize(self: *const T, size_: CY) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).put_Size(@as(*const IFont, @ptrCast(self)), size_);
            }
            pub inline fn getBold(self: *const T, p_bold_: ?*BOOL) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).get_Bold(@as(*const IFont, @ptrCast(self)), p_bold_);
            }
            pub inline fn putBold(self: *const T, bold_: BOOL) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).put_Bold(@as(*const IFont, @ptrCast(self)), bold_);
            }
            pub inline fn getItalic(self: *const T, p_italic_: ?*BOOL) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).get_Italic(@as(*const IFont, @ptrCast(self)), p_italic_);
            }
            pub inline fn putItalic(self: *const T, italic_: BOOL) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).put_Italic(@as(*const IFont, @ptrCast(self)), italic_);
            }
            pub inline fn getUnderline(self: *const T, p_underline_: ?*BOOL) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).get_Underline(@as(*const IFont, @ptrCast(self)), p_underline_);
            }
            pub inline fn putUnderline(self: *const T, underline_: BOOL) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).put_Underline(@as(*const IFont, @ptrCast(self)), underline_);
            }
            pub inline fn getStrikethrough(self: *const T, p_strikethrough_: ?*BOOL) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).get_Strikethrough(@as(*const IFont, @ptrCast(self)), p_strikethrough_);
            }
            pub inline fn putStrikethrough(self: *const T, strikethrough_: BOOL) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).put_Strikethrough(@as(*const IFont, @ptrCast(self)), strikethrough_);
            }
            pub inline fn getWeight(self: *const T, p_weight_: ?*i16) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).get_Weight(@as(*const IFont, @ptrCast(self)), p_weight_);
            }
            pub inline fn putWeight(self: *const T, weight_: i16) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).put_Weight(@as(*const IFont, @ptrCast(self)), weight_);
            }
            pub inline fn getCharset(self: *const T, p_charset_: ?*i16) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).get_Charset(@as(*const IFont, @ptrCast(self)), p_charset_);
            }
            pub inline fn putCharset(self: *const T, charset_: i16) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).put_Charset(@as(*const IFont, @ptrCast(self)), charset_);
            }
            pub inline fn getHFont(self: *const T, ph_font_: ?*?HFONT) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).get_hFont(@as(*const IFont, @ptrCast(self)), ph_font_);
            }
            pub inline fn clone(self: *const T, pp_font_: ?*?*IFont) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).Clone(@as(*const IFont, @ptrCast(self)), pp_font_);
            }
            pub inline fn isEqual(self: *const T, p_font_other_: ?*IFont) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).IsEqual(@as(*const IFont, @ptrCast(self)), p_font_other_);
            }
            pub inline fn setRatio(self: *const T, cy_logical_: i32, cy_himetric_: i32) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).SetRatio(@as(*const IFont, @ptrCast(self)), cy_logical_, cy_himetric_);
            }
            pub inline fn queryTextMetrics(self: *const T, p_t_m_: ?*TEXTMETRICW) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).QueryTextMetrics(@as(*const IFont, @ptrCast(self)), p_t_m_);
            }
            pub inline fn addRefHfont(self: *const T, h_font_: ?HFONT) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).AddRefHfont(@as(*const IFont, @ptrCast(self)), h_font_);
            }
            pub inline fn releaseHfont(self: *const T, h_font_: ?HFONT) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).ReleaseHfont(@as(*const IFont, @ptrCast(self)), h_font_);
            }
            pub inline fn setHdc(self: *const T, h_d_c_: ?HDC) HRESULT {
                return @as(*const IFont.VTable, @ptrCast(self.vtable)).SetHdc(@as(*const IFont, @ptrCast(self)), h_d_c_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PictureAttributes = enum(i32) {
    SCALABLE = 1,
    TRANSPARENT = 2,
};
pub const PICTURE_SCALABLE = PictureAttributes.SCALABLE;
pub const PICTURE_TRANSPARENT = PictureAttributes.TRANSPARENT;

// TODO: this type is limited to platform 'windows5.0'
const IID_IPicture_Value = Guid.initString("7bf80980-bf32-101a-8bbb-00aa00300cab");
pub const IID_IPicture = &IID_IPicture_Value;
pub const IPicture = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture,
            p_handle: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hPal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture,
            ph_pal: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture,
            p_type: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture,
            p_width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Height: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture,
            p_height: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Render: *const fn (
            self: *const IPicture,
            h_d_c: ?HDC,
            x: i32,
            y: i32,
            cx: i32,
            cy: i32,
            x_src: i32,
            y_src: i32,
            cx_src: i32,
            cy_src: i32,
            p_rc_w_bounds: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        set_hPal: *const fn (
            self: *const IPicture,
            h_pal: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture,
            ph_d_c: ?*?HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectPicture: *const fn (
            self: *const IPicture,
            h_d_c_in: ?HDC,
            ph_d_c_out: ?*?HDC,
            ph_bmp_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeepOriginalFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture,
            p_keep: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeepOriginalFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture,
            keep: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PictureChanged: *const fn (
            self: *const IPicture,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAsFile: *const fn (
            self: *const IPicture,
            p_stream: ?*IStream,
            f_save_mem_copy: BOOL,
            p_cb_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Attributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture,
            p_dw_attr: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getHandle(self: *const T, p_handle_: ?*u32) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).get_Handle(@as(*const IPicture, @ptrCast(self)), p_handle_);
            }
            pub inline fn getHPal(self: *const T, ph_pal_: ?*u32) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).get_hPal(@as(*const IPicture, @ptrCast(self)), ph_pal_);
            }
            pub inline fn getType(self: *const T, p_type_: ?*i16) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IPicture, @ptrCast(self)), p_type_);
            }
            pub inline fn getWidth(self: *const T, p_width_: ?*i32) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).get_Width(@as(*const IPicture, @ptrCast(self)), p_width_);
            }
            pub inline fn getHeight(self: *const T, p_height_: ?*i32) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).get_Height(@as(*const IPicture, @ptrCast(self)), p_height_);
            }
            pub inline fn render(self: *const T, h_d_c_: ?HDC, x_: i32, y_: i32, cx_: i32, cy_: i32, x_src_: i32, y_src_: i32, cx_src_: i32, cy_src_: i32, p_rc_w_bounds_: ?*RECT) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).Render(@as(*const IPicture, @ptrCast(self)), h_d_c_, x_, y_, cx_, cy_, x_src_, y_src_, cx_src_, cy_src_, p_rc_w_bounds_);
            }
            pub inline fn setHPal(self: *const T, h_pal_: u32) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).set_hPal(@as(*const IPicture, @ptrCast(self)), h_pal_);
            }
            pub inline fn getCurDC(self: *const T, ph_d_c_: ?*?HDC) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).get_CurDC(@as(*const IPicture, @ptrCast(self)), ph_d_c_);
            }
            pub inline fn selectPicture(self: *const T, h_d_c_in_: ?HDC, ph_d_c_out_: ?*?HDC, ph_bmp_out_: ?*u32) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).SelectPicture(@as(*const IPicture, @ptrCast(self)), h_d_c_in_, ph_d_c_out_, ph_bmp_out_);
            }
            pub inline fn getKeepOriginalFormat(self: *const T, p_keep_: ?*BOOL) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).get_KeepOriginalFormat(@as(*const IPicture, @ptrCast(self)), p_keep_);
            }
            pub inline fn putKeepOriginalFormat(self: *const T, keep_: BOOL) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).put_KeepOriginalFormat(@as(*const IPicture, @ptrCast(self)), keep_);
            }
            pub inline fn pictureChanged(self: *const T) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).PictureChanged(@as(*const IPicture, @ptrCast(self)));
            }
            pub inline fn saveAsFile(self: *const T, p_stream_: ?*IStream, f_save_mem_copy_: BOOL, p_cb_size_: ?*i32) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).SaveAsFile(@as(*const IPicture, @ptrCast(self)), p_stream_, f_save_mem_copy_, p_cb_size_);
            }
            pub inline fn getAttributes(self: *const T, p_dw_attr_: ?*u32) HRESULT {
                return @as(*const IPicture.VTable, @ptrCast(self.vtable)).get_Attributes(@as(*const IPicture, @ptrCast(self)), p_dw_attr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPicture2_Value = Guid.initString("f5185dd8-2012-4b0b-aad9-f052c6bd482b");
pub const IID_IPicture2 = &IID_IPicture2_Value;
pub const IPicture2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture2,
            p_handle: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hPal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture2,
            ph_pal: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture2,
            p_type: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture2,
            p_width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Height: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture2,
            p_height: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Render: *const fn (
            self: *const IPicture2,
            h_d_c: ?HDC,
            x: i32,
            y: i32,
            cx: i32,
            cy: i32,
            x_src: i32,
            y_src: i32,
            cx_src: i32,
            cy_src: i32,
            p_rc_w_bounds: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        set_hPal: *const fn (
            self: *const IPicture2,
            h_pal: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture2,
            ph_d_c: ?*?HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectPicture: *const fn (
            self: *const IPicture2,
            h_d_c_in: ?HDC,
            ph_d_c_out: ?*?HDC,
            ph_bmp_out: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeepOriginalFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture2,
            p_keep: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeepOriginalFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture2,
            keep: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PictureChanged: *const fn (
            self: *const IPicture2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAsFile: *const fn (
            self: *const IPicture2,
            p_stream: ?*IStream,
            f_save_mem_copy: BOOL,
            p_cb_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Attributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPicture2,
            p_dw_attr: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getHandle(self: *const T, p_handle_: ?*usize) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).get_Handle(@as(*const IPicture2, @ptrCast(self)), p_handle_);
            }
            pub inline fn getHPal(self: *const T, ph_pal_: ?*usize) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).get_hPal(@as(*const IPicture2, @ptrCast(self)), ph_pal_);
            }
            pub inline fn getType(self: *const T, p_type_: ?*i16) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IPicture2, @ptrCast(self)), p_type_);
            }
            pub inline fn getWidth(self: *const T, p_width_: ?*i32) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).get_Width(@as(*const IPicture2, @ptrCast(self)), p_width_);
            }
            pub inline fn getHeight(self: *const T, p_height_: ?*i32) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).get_Height(@as(*const IPicture2, @ptrCast(self)), p_height_);
            }
            pub inline fn render(self: *const T, h_d_c_: ?HDC, x_: i32, y_: i32, cx_: i32, cy_: i32, x_src_: i32, y_src_: i32, cx_src_: i32, cy_src_: i32, p_rc_w_bounds_: ?*RECT) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).Render(@as(*const IPicture2, @ptrCast(self)), h_d_c_, x_, y_, cx_, cy_, x_src_, y_src_, cx_src_, cy_src_, p_rc_w_bounds_);
            }
            pub inline fn setHPal(self: *const T, h_pal_: usize) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).set_hPal(@as(*const IPicture2, @ptrCast(self)), h_pal_);
            }
            pub inline fn getCurDC(self: *const T, ph_d_c_: ?*?HDC) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).get_CurDC(@as(*const IPicture2, @ptrCast(self)), ph_d_c_);
            }
            pub inline fn selectPicture(self: *const T, h_d_c_in_: ?HDC, ph_d_c_out_: ?*?HDC, ph_bmp_out_: ?*usize) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).SelectPicture(@as(*const IPicture2, @ptrCast(self)), h_d_c_in_, ph_d_c_out_, ph_bmp_out_);
            }
            pub inline fn getKeepOriginalFormat(self: *const T, p_keep_: ?*BOOL) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).get_KeepOriginalFormat(@as(*const IPicture2, @ptrCast(self)), p_keep_);
            }
            pub inline fn putKeepOriginalFormat(self: *const T, keep_: BOOL) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).put_KeepOriginalFormat(@as(*const IPicture2, @ptrCast(self)), keep_);
            }
            pub inline fn pictureChanged(self: *const T) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).PictureChanged(@as(*const IPicture2, @ptrCast(self)));
            }
            pub inline fn saveAsFile(self: *const T, p_stream_: ?*IStream, f_save_mem_copy_: BOOL, p_cb_size_: ?*i32) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).SaveAsFile(@as(*const IPicture2, @ptrCast(self)), p_stream_, f_save_mem_copy_, p_cb_size_);
            }
            pub inline fn getAttributes(self: *const T, p_dw_attr_: ?*u32) HRESULT {
                return @as(*const IPicture2.VTable, @ptrCast(self.vtable)).get_Attributes(@as(*const IPicture2, @ptrCast(self)), p_dw_attr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFontEventsDisp_Value = Guid.initString("4ef6100a-af88-11d0-9846-00c04fc29993");
pub const IID_IFontEventsDisp = &IID_IFontEventsDisp_Value;
pub const IFontEventsDisp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IFontDisp_Value = Guid.initString("bef6e003-a874-101a-8bba-00aa00300cab");
pub const IID_IFontDisp = &IID_IFontDisp_Value;
pub const IFontDisp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPictureDisp_Value = Guid.initString("7bf80981-bf32-101a-8bbb-00aa00300cab");
pub const IID_IPictureDisp = &IID_IPictureDisp_Value;
pub const IPictureDisp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleInPlaceObjectWindowless_Value = Guid.initString("1c2056cc-5ef4-101b-8bc8-00aa003e3b29");
pub const IID_IOleInPlaceObjectWindowless = &IID_IOleInPlaceObjectWindowless_Value;
pub const IOleInPlaceObjectWindowless = extern struct {
    pub const VTable = extern struct {
        base: IOleInPlaceObject.VTable,
        OnWindowMessage: *const fn (
            self: *const IOleInPlaceObjectWindowless,
            msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
            pl_result: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDropTarget: *const fn (
            self: *const IOleInPlaceObjectWindowless,
            pp_drop_target: ?*?*IDropTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleInPlaceObject.MethodMixin(T);
            pub inline fn onWindowMessage(self: *const T, msg_: u32, w_param_: WPARAM, l_param_: LPARAM, pl_result_: ?*LRESULT) HRESULT {
                return @as(*const IOleInPlaceObjectWindowless.VTable, @ptrCast(self.vtable)).OnWindowMessage(@as(*const IOleInPlaceObjectWindowless, @ptrCast(self)), msg_, w_param_, l_param_, pl_result_);
            }
            pub inline fn getDropTarget(self: *const T, pp_drop_target_: ?*?*IDropTarget) HRESULT {
                return @as(*const IOleInPlaceObjectWindowless.VTable, @ptrCast(self.vtable)).GetDropTarget(@as(*const IOleInPlaceObjectWindowless, @ptrCast(self)), pp_drop_target_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const ACTIVATEFLAGS = enum(i32) {
    S = 1,
};
pub const ACTIVATE_WINDOWLESS = ACTIVATEFLAGS.S;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleInPlaceSiteEx_Value = Guid.initString("9c2cad80-3424-11cf-b670-00aa004cd6d8");
pub const IID_IOleInPlaceSiteEx = &IID_IOleInPlaceSiteEx_Value;
pub const IOleInPlaceSiteEx = extern struct {
    pub const VTable = extern struct {
        base: IOleInPlaceSite.VTable,
        OnInPlaceActivateEx: *const fn (
            self: *const IOleInPlaceSiteEx,
            pf_no_redraw: ?*BOOL,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInPlaceDeactivateEx: *const fn (
            self: *const IOleInPlaceSiteEx,
            f_no_redraw: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestUIActivate: *const fn (
            self: *const IOleInPlaceSiteEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleInPlaceSite.MethodMixin(T);
            pub inline fn onInPlaceActivateEx(self: *const T, pf_no_redraw_: ?*BOOL, dw_flags_: u32) HRESULT {
                return @as(*const IOleInPlaceSiteEx.VTable, @ptrCast(self.vtable)).OnInPlaceActivateEx(@as(*const IOleInPlaceSiteEx, @ptrCast(self)), pf_no_redraw_, dw_flags_);
            }
            pub inline fn onInPlaceDeactivateEx(self: *const T, f_no_redraw_: BOOL) HRESULT {
                return @as(*const IOleInPlaceSiteEx.VTable, @ptrCast(self.vtable)).OnInPlaceDeactivateEx(@as(*const IOleInPlaceSiteEx, @ptrCast(self)), f_no_redraw_);
            }
            pub inline fn requestUIActivate(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSiteEx.VTable, @ptrCast(self.vtable)).RequestUIActivate(@as(*const IOleInPlaceSiteEx, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OLEDCFLAGS = enum(i32) {
    NODRAW = 1,
    PAINTBKGND = 2,
    OFFSCREEN = 4,
};
pub const OLEDC_NODRAW = OLEDCFLAGS.NODRAW;
pub const OLEDC_PAINTBKGND = OLEDCFLAGS.PAINTBKGND;
pub const OLEDC_OFFSCREEN = OLEDCFLAGS.OFFSCREEN;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleInPlaceSiteWindowless_Value = Guid.initString("922eada0-3424-11cf-b670-00aa004cd6d8");
pub const IID_IOleInPlaceSiteWindowless = &IID_IOleInPlaceSiteWindowless_Value;
pub const IOleInPlaceSiteWindowless = extern struct {
    pub const VTable = extern struct {
        base: IOleInPlaceSiteEx.VTable,
        CanWindowlessActivate: *const fn (
            self: *const IOleInPlaceSiteWindowless,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapture: *const fn (
            self: *const IOleInPlaceSiteWindowless,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCapture: *const fn (
            self: *const IOleInPlaceSiteWindowless,
            f_capture: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFocus: *const fn (
            self: *const IOleInPlaceSiteWindowless,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFocus: *const fn (
            self: *const IOleInPlaceSiteWindowless,
            f_focus: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDC: *const fn (
            self: *const IOleInPlaceSiteWindowless,
            p_rect: ?*RECT,
            grf_flags: u32,
            ph_d_c: ?*?HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseDC: *const fn (
            self: *const IOleInPlaceSiteWindowless,
            h_d_c: ?HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvalidateRect: *const fn (
            self: *const IOleInPlaceSiteWindowless,
            p_rect: ?*RECT,
            f_erase: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvalidateRgn: *const fn (
            self: *const IOleInPlaceSiteWindowless,
            h_r_g_n: ?HRGN,
            f_erase: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScrollRect: *const fn (
            self: *const IOleInPlaceSiteWindowless,
            dx: i32,
            dy: i32,
            p_rect_scroll: ?*RECT,
            p_rect_clip: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdjustRect: *const fn (
            self: *const IOleInPlaceSiteWindowless,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDefWindowMessage: *const fn (
            self: *const IOleInPlaceSiteWindowless,
            msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
            pl_result: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleInPlaceSiteEx.MethodMixin(T);
            pub inline fn canWindowlessActivate(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).CanWindowlessActivate(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)));
            }
            pub inline fn getCapture(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).GetCapture(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)));
            }
            pub inline fn setCapture(self: *const T, f_capture_: BOOL) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).SetCapture(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)), f_capture_);
            }
            pub inline fn getFocus(self: *const T) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).GetFocus(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)));
            }
            pub inline fn setFocus(self: *const T, f_focus_: BOOL) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).SetFocus(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)), f_focus_);
            }
            pub inline fn getDC(self: *const T, p_rect_: ?*RECT, grf_flags_: u32, ph_d_c_: ?*?HDC) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).GetDC(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)), p_rect_, grf_flags_, ph_d_c_);
            }
            pub inline fn releaseDC(self: *const T, h_d_c_: ?HDC) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).ReleaseDC(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)), h_d_c_);
            }
            pub inline fn invalidateRect(self: *const T, p_rect_: ?*RECT, f_erase_: BOOL) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).InvalidateRect(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)), p_rect_, f_erase_);
            }
            pub inline fn invalidateRgn(self: *const T, h_r_g_n_: ?HRGN, f_erase_: BOOL) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).InvalidateRgn(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)), h_r_g_n_, f_erase_);
            }
            pub inline fn scrollRect(self: *const T, dx_: i32, dy_: i32, p_rect_scroll_: ?*RECT, p_rect_clip_: ?*RECT) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).ScrollRect(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)), dx_, dy_, p_rect_scroll_, p_rect_clip_);
            }
            pub inline fn adjustRect(self: *const T, prc_: ?*RECT) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).AdjustRect(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)), prc_);
            }
            pub inline fn onDefWindowMessage(self: *const T, msg_: u32, w_param_: WPARAM, l_param_: LPARAM, pl_result_: ?*LRESULT) HRESULT {
                return @as(*const IOleInPlaceSiteWindowless.VTable, @ptrCast(self.vtable)).OnDefWindowMessage(@as(*const IOleInPlaceSiteWindowless, @ptrCast(self)), msg_, w_param_, l_param_, pl_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const VIEWSTATUS = enum(i32) {
    OPAQUE = 1,
    SOLIDBKGND = 2,
    DVASPECTOPAQUE = 4,
    DVASPECTTRANSPARENT = 8,
    SURFACE = 16,
    @"3DSURFACE" = 32,
};
pub const VIEWSTATUS_OPAQUE = VIEWSTATUS.OPAQUE;
pub const VIEWSTATUS_SOLIDBKGND = VIEWSTATUS.SOLIDBKGND;
pub const VIEWSTATUS_DVASPECTOPAQUE = VIEWSTATUS.DVASPECTOPAQUE;
pub const VIEWSTATUS_DVASPECTTRANSPARENT = VIEWSTATUS.DVASPECTTRANSPARENT;
pub const VIEWSTATUS_SURFACE = VIEWSTATUS.SURFACE;
pub const VIEWSTATUS_3DSURFACE = VIEWSTATUS.@"3DSURFACE";

pub const HITRESULT = enum(i32) {
    OUTSIDE = 0,
    TRANSPARENT = 1,
    CLOSE = 2,
    HIT = 3,
};
pub const HITRESULT_OUTSIDE = HITRESULT.OUTSIDE;
pub const HITRESULT_TRANSPARENT = HITRESULT.TRANSPARENT;
pub const HITRESULT_CLOSE = HITRESULT.CLOSE;
pub const HITRESULT_HIT = HITRESULT.HIT;

pub const DVASPECT2 = enum(i32) {
    OPAQUE = 16,
    TRANSPARENT = 32,
};
pub const DVASPECT_OPAQUE = DVASPECT2.OPAQUE;
pub const DVASPECT_TRANSPARENT = DVASPECT2.TRANSPARENT;

pub const ExtentInfo = extern struct {
    cb: u32,
    dwExtentMode: u32,
    sizelProposed: SIZE,
};

pub const ExtentMode = enum(i32) {
    CONTENT = 0,
    INTEGRAL = 1,
};
pub const DVEXTENT_CONTENT = ExtentMode.CONTENT;
pub const DVEXTENT_INTEGRAL = ExtentMode.INTEGRAL;

pub const AspectInfoFlag = enum(i32) {
    E = 1,
};
pub const DVASPECTINFOFLAG_CANOPTIMIZE = AspectInfoFlag.E;

pub const AspectInfo = extern struct {
    cb: u32,
    dwFlags: u32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IViewObjectEx_Value = Guid.initString("3af24292-0c96-11ce-a0cf-00aa00600ab8");
pub const IID_IViewObjectEx = &IID_IViewObjectEx_Value;
pub const IViewObjectEx = extern struct {
    pub const VTable = extern struct {
        base: IViewObject2.VTable,
        GetRect: *const fn (
            self: *const IViewObjectEx,
            dw_aspect: u32,
            p_rect: ?*RECTL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewStatus: *const fn (
            self: *const IViewObjectEx,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryHitPoint: *const fn (
            self: *const IViewObjectEx,
            dw_aspect: u32,
            p_rect_bounds: ?*RECT,
            ptl_loc: POINT,
            l_close_hint: i32,
            p_hit_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryHitRect: *const fn (
            self: *const IViewObjectEx,
            dw_aspect: u32,
            p_rect_bounds: ?*RECT,
            p_rect_loc: ?*RECT,
            l_close_hint: i32,
            p_hit_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNaturalExtent: *const fn (
            self: *const IViewObjectEx,
            dw_aspect: DVASPECT,
            lindex: i32,
            ptd: ?*DVTARGETDEVICE,
            hic_target_dev: ?HDC,
            p_extent_info: ?*ExtentInfo,
            p_sizel: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IViewObject2.MethodMixin(T);
            pub inline fn getRect(self: *const T, dw_aspect_: u32, p_rect_: ?*RECTL) HRESULT {
                return @as(*const IViewObjectEx.VTable, @ptrCast(self.vtable)).GetRect(@as(*const IViewObjectEx, @ptrCast(self)), dw_aspect_, p_rect_);
            }
            pub inline fn getViewStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IViewObjectEx.VTable, @ptrCast(self.vtable)).GetViewStatus(@as(*const IViewObjectEx, @ptrCast(self)), pdw_status_);
            }
            pub inline fn queryHitPoint(self: *const T, dw_aspect_: u32, p_rect_bounds_: ?*RECT, ptl_loc_: POINT, l_close_hint_: i32, p_hit_result_: ?*u32) HRESULT {
                return @as(*const IViewObjectEx.VTable, @ptrCast(self.vtable)).QueryHitPoint(@as(*const IViewObjectEx, @ptrCast(self)), dw_aspect_, p_rect_bounds_, ptl_loc_, l_close_hint_, p_hit_result_);
            }
            pub inline fn queryHitRect(self: *const T, dw_aspect_: u32, p_rect_bounds_: ?*RECT, p_rect_loc_: ?*RECT, l_close_hint_: i32, p_hit_result_: ?*u32) HRESULT {
                return @as(*const IViewObjectEx.VTable, @ptrCast(self.vtable)).QueryHitRect(@as(*const IViewObjectEx, @ptrCast(self)), dw_aspect_, p_rect_bounds_, p_rect_loc_, l_close_hint_, p_hit_result_);
            }
            pub inline fn getNaturalExtent(self: *const T, dw_aspect_: DVASPECT, lindex_: i32, ptd_: ?*DVTARGETDEVICE, hic_target_dev_: ?HDC, p_extent_info_: ?*ExtentInfo, p_sizel_: ?*SIZE) HRESULT {
                return @as(*const IViewObjectEx.VTable, @ptrCast(self.vtable)).GetNaturalExtent(@as(*const IViewObjectEx, @ptrCast(self)), dw_aspect_, lindex_, ptd_, hic_target_dev_, p_extent_info_, p_sizel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleUndoUnit_Value = Guid.initString("894ad3b0-ef97-11ce-9bc9-00aa00608e01");
pub const IID_IOleUndoUnit = &IID_IOleUndoUnit_Value;
pub const IOleUndoUnit = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Do: *const fn (
            self: *const IOleUndoUnit,
            p_undo_manager: ?*IOleUndoManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const IOleUndoUnit,
            p_bstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnitType: *const fn (
            self: *const IOleUndoUnit,
            p_clsid: ?*Guid,
            pl_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNextAdd: *const fn (
            self: *const IOleUndoUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn do(self: *const T, p_undo_manager_: ?*IOleUndoManager) HRESULT {
                return @as(*const IOleUndoUnit.VTable, @ptrCast(self.vtable)).Do(@as(*const IOleUndoUnit, @ptrCast(self)), p_undo_manager_);
            }
            pub inline fn getDescription(self: *const T, p_bstr_: ?*?BSTR) HRESULT {
                return @as(*const IOleUndoUnit.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const IOleUndoUnit, @ptrCast(self)), p_bstr_);
            }
            pub inline fn getUnitType(self: *const T, p_clsid_: ?*Guid, pl_i_d_: ?*i32) HRESULT {
                return @as(*const IOleUndoUnit.VTable, @ptrCast(self.vtable)).GetUnitType(@as(*const IOleUndoUnit, @ptrCast(self)), p_clsid_, pl_i_d_);
            }
            pub inline fn onNextAdd(self: *const T) HRESULT {
                return @as(*const IOleUndoUnit.VTable, @ptrCast(self.vtable)).OnNextAdd(@as(*const IOleUndoUnit, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleParentUndoUnit_Value = Guid.initString("a1faf330-ef97-11ce-9bc9-00aa00608e01");
pub const IID_IOleParentUndoUnit = &IID_IOleParentUndoUnit_Value;
pub const IOleParentUndoUnit = extern struct {
    pub const VTable = extern struct {
        base: IOleUndoUnit.VTable,
        Open: *const fn (
            self: *const IOleParentUndoUnit,
            p_p_u_u: ?*IOleParentUndoUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IOleParentUndoUnit,
            p_p_u_u: ?*IOleParentUndoUnit,
            f_commit: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IOleParentUndoUnit,
            p_u_u: ?*IOleUndoUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindUnit: *const fn (
            self: *const IOleParentUndoUnit,
            p_u_u: ?*IOleUndoUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentState: *const fn (
            self: *const IOleParentUndoUnit,
            pdw_state: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleUndoUnit.MethodMixin(T);
            pub inline fn open(self: *const T, p_p_u_u_: ?*IOleParentUndoUnit) HRESULT {
                return @as(*const IOleParentUndoUnit.VTable, @ptrCast(self.vtable)).Open(@as(*const IOleParentUndoUnit, @ptrCast(self)), p_p_u_u_);
            }
            pub inline fn close(self: *const T, p_p_u_u_: ?*IOleParentUndoUnit, f_commit_: BOOL) HRESULT {
                return @as(*const IOleParentUndoUnit.VTable, @ptrCast(self.vtable)).Close(@as(*const IOleParentUndoUnit, @ptrCast(self)), p_p_u_u_, f_commit_);
            }
            pub inline fn add(self: *const T, p_u_u_: ?*IOleUndoUnit) HRESULT {
                return @as(*const IOleParentUndoUnit.VTable, @ptrCast(self.vtable)).Add(@as(*const IOleParentUndoUnit, @ptrCast(self)), p_u_u_);
            }
            pub inline fn findUnit(self: *const T, p_u_u_: ?*IOleUndoUnit) HRESULT {
                return @as(*const IOleParentUndoUnit.VTable, @ptrCast(self.vtable)).FindUnit(@as(*const IOleParentUndoUnit, @ptrCast(self)), p_u_u_);
            }
            pub inline fn getParentState(self: *const T, pdw_state_: ?*u32) HRESULT {
                return @as(*const IOleParentUndoUnit.VTable, @ptrCast(self.vtable)).GetParentState(@as(*const IOleParentUndoUnit, @ptrCast(self)), pdw_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumOleUndoUnits_Value = Guid.initString("b3e7c340-ef97-11ce-9bc9-00aa00608e01");
pub const IID_IEnumOleUndoUnits = &IID_IEnumOleUndoUnits_Value;
pub const IEnumOleUndoUnits = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumOleUndoUnits,
            c_elt: u32,
            rg_elt: [*]?*IOleUndoUnit,
            pc_elt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumOleUndoUnits,
            c_elt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumOleUndoUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumOleUndoUnits,
            pp_enum: ?*?*IEnumOleUndoUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_elt_: u32, rg_elt_: [*]?*IOleUndoUnit, pc_elt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumOleUndoUnits.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumOleUndoUnits, @ptrCast(self)), c_elt_, rg_elt_, pc_elt_fetched_);
            }
            pub inline fn skip(self: *const T, c_elt_: u32) HRESULT {
                return @as(*const IEnumOleUndoUnits.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumOleUndoUnits, @ptrCast(self)), c_elt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumOleUndoUnits.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumOleUndoUnits, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumOleUndoUnits) HRESULT {
                return @as(*const IEnumOleUndoUnits.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumOleUndoUnits, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleUndoManager_Value = Guid.initString("d001f200-ef97-11ce-9bc9-00aa00608e01");
pub const IID_IOleUndoManager = &IID_IOleUndoManager_Value;
pub const IOleUndoManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn (
            self: *const IOleUndoManager,
            p_p_u_u: ?*IOleParentUndoUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IOleUndoManager,
            p_p_u_u: ?*IOleParentUndoUnit,
            f_commit: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IOleUndoManager,
            p_u_u: ?*IOleUndoUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpenParentState: *const fn (
            self: *const IOleUndoManager,
            pdw_state: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiscardFrom: *const fn (
            self: *const IOleUndoManager,
            p_u_u: ?*IOleUndoUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UndoTo: *const fn (
            self: *const IOleUndoManager,
            p_u_u: ?*IOleUndoUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RedoTo: *const fn (
            self: *const IOleUndoManager,
            p_u_u: ?*IOleUndoUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumUndoable: *const fn (
            self: *const IOleUndoManager,
            pp_enum: ?*?*IEnumOleUndoUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumRedoable: *const fn (
            self: *const IOleUndoManager,
            pp_enum: ?*?*IEnumOleUndoUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastUndoDescription: *const fn (
            self: *const IOleUndoManager,
            p_bstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastRedoDescription: *const fn (
            self: *const IOleUndoManager,
            p_bstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const IOleUndoManager,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn open(self: *const T, p_p_u_u_: ?*IOleParentUndoUnit) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).Open(@as(*const IOleUndoManager, @ptrCast(self)), p_p_u_u_);
            }
            pub inline fn close(self: *const T, p_p_u_u_: ?*IOleParentUndoUnit, f_commit_: BOOL) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).Close(@as(*const IOleUndoManager, @ptrCast(self)), p_p_u_u_, f_commit_);
            }
            pub inline fn add(self: *const T, p_u_u_: ?*IOleUndoUnit) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).Add(@as(*const IOleUndoManager, @ptrCast(self)), p_u_u_);
            }
            pub inline fn getOpenParentState(self: *const T, pdw_state_: ?*u32) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).GetOpenParentState(@as(*const IOleUndoManager, @ptrCast(self)), pdw_state_);
            }
            pub inline fn discardFrom(self: *const T, p_u_u_: ?*IOleUndoUnit) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).DiscardFrom(@as(*const IOleUndoManager, @ptrCast(self)), p_u_u_);
            }
            pub inline fn undoTo(self: *const T, p_u_u_: ?*IOleUndoUnit) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).UndoTo(@as(*const IOleUndoManager, @ptrCast(self)), p_u_u_);
            }
            pub inline fn redoTo(self: *const T, p_u_u_: ?*IOleUndoUnit) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).RedoTo(@as(*const IOleUndoManager, @ptrCast(self)), p_u_u_);
            }
            pub inline fn enumUndoable(self: *const T, pp_enum_: ?*?*IEnumOleUndoUnits) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).EnumUndoable(@as(*const IOleUndoManager, @ptrCast(self)), pp_enum_);
            }
            pub inline fn enumRedoable(self: *const T, pp_enum_: ?*?*IEnumOleUndoUnits) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).EnumRedoable(@as(*const IOleUndoManager, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getLastUndoDescription(self: *const T, p_bstr_: ?*?BSTR) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).GetLastUndoDescription(@as(*const IOleUndoManager, @ptrCast(self)), p_bstr_);
            }
            pub inline fn getLastRedoDescription(self: *const T, p_bstr_: ?*?BSTR) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).GetLastRedoDescription(@as(*const IOleUndoManager, @ptrCast(self)), p_bstr_);
            }
            pub inline fn enable(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IOleUndoManager.VTable, @ptrCast(self.vtable)).Enable(@as(*const IOleUndoManager, @ptrCast(self)), f_enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const POINTERINACTIVE = enum(i32) {
    ACTIVATEONENTRY = 1,
    DEACTIVATEONLEAVE = 2,
    ACTIVATEONDRAG = 4,
};
pub const POINTERINACTIVE_ACTIVATEONENTRY = POINTERINACTIVE.ACTIVATEONENTRY;
pub const POINTERINACTIVE_DEACTIVATEONLEAVE = POINTERINACTIVE.DEACTIVATEONLEAVE;
pub const POINTERINACTIVE_ACTIVATEONDRAG = POINTERINACTIVE.ACTIVATEONDRAG;

// TODO: this type is limited to platform 'windows5.0'
const IID_IPointerInactive_Value = Guid.initString("55980ba0-35aa-11cf-b671-00aa004cd6d8");
pub const IID_IPointerInactive = &IID_IPointerInactive_Value;
pub const IPointerInactive = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetActivationPolicy: *const fn (
            self: *const IPointerInactive,
            pdw_policy: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInactiveMouseMove: *const fn (
            self: *const IPointerInactive,
            p_rect_bounds: ?*RECT,
            x: i32,
            y: i32,
            grf_key_state: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInactiveSetCursor: *const fn (
            self: *const IPointerInactive,
            p_rect_bounds: ?*RECT,
            x: i32,
            y: i32,
            dw_mouse_msg: u32,
            f_set_always: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getActivationPolicy(self: *const T, pdw_policy_: ?*u32) HRESULT {
                return @as(*const IPointerInactive.VTable, @ptrCast(self.vtable)).GetActivationPolicy(@as(*const IPointerInactive, @ptrCast(self)), pdw_policy_);
            }
            pub inline fn onInactiveMouseMove(self: *const T, p_rect_bounds_: ?*RECT, x_: i32, y_: i32, grf_key_state_: u32) HRESULT {
                return @as(*const IPointerInactive.VTable, @ptrCast(self.vtable)).OnInactiveMouseMove(@as(*const IPointerInactive, @ptrCast(self)), p_rect_bounds_, x_, y_, grf_key_state_);
            }
            pub inline fn onInactiveSetCursor(self: *const T, p_rect_bounds_: ?*RECT, x_: i32, y_: i32, dw_mouse_msg_: u32, f_set_always_: BOOL) HRESULT {
                return @as(*const IPointerInactive.VTable, @ptrCast(self.vtable)).OnInactiveSetCursor(@as(*const IPointerInactive, @ptrCast(self)), p_rect_bounds_, x_, y_, dw_mouse_msg_, f_set_always_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjectWithSite_Value = Guid.initString("fc4801a3-2ba9-11cf-a229-00aa003d7352");
pub const IID_IObjectWithSite = &IID_IObjectWithSite_Value;
pub const IObjectWithSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSite: *const fn (
            self: *const IObjectWithSite,
            p_unk_site: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSite: *const fn (
            self: *const IObjectWithSite,
            riid: ?*const Guid,
            ppv_site: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setSite(self: *const T, p_unk_site_: ?*IUnknown) HRESULT {
                return @as(*const IObjectWithSite.VTable, @ptrCast(self.vtable)).SetSite(@as(*const IObjectWithSite, @ptrCast(self)), p_unk_site_);
            }
            pub inline fn getSite(self: *const T, riid_: ?*const Guid, ppv_site_: ?*?*anyopaque) HRESULT {
                return @as(*const IObjectWithSite.VTable, @ptrCast(self.vtable)).GetSite(@as(*const IObjectWithSite, @ptrCast(self)), riid_, ppv_site_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CALPOLESTR = extern struct {
    cElems: u32,
    pElems: ?*?PWSTR,
};

pub const CADWORD = extern struct {
    cElems: u32,
    pElems: ?*u32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPerPropertyBrowsing_Value = Guid.initString("376bd3aa-3845-101b-84ed-08002b2ec713");
pub const IID_IPerPropertyBrowsing = &IID_IPerPropertyBrowsing_Value;
pub const IPerPropertyBrowsing = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDisplayString: *const fn (
            self: *const IPerPropertyBrowsing,
            disp_i_d: i32,
            p_bstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapPropertyToPage: *const fn (
            self: *const IPerPropertyBrowsing,
            disp_i_d: i32,
            p_clsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPredefinedStrings: *const fn (
            self: *const IPerPropertyBrowsing,
            disp_i_d: i32,
            p_ca_strings_out: ?*CALPOLESTR,
            p_ca_cookies_out: ?*CADWORD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPredefinedValue: *const fn (
            self: *const IPerPropertyBrowsing,
            disp_i_d: i32,
            dw_cookie: u32,
            p_var_out: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDisplayString(self: *const T, disp_i_d_: i32, p_bstr_: ?*?BSTR) HRESULT {
                return @as(*const IPerPropertyBrowsing.VTable, @ptrCast(self.vtable)).GetDisplayString(@as(*const IPerPropertyBrowsing, @ptrCast(self)), disp_i_d_, p_bstr_);
            }
            pub inline fn mapPropertyToPage(self: *const T, disp_i_d_: i32, p_clsid_: ?*Guid) HRESULT {
                return @as(*const IPerPropertyBrowsing.VTable, @ptrCast(self.vtable)).MapPropertyToPage(@as(*const IPerPropertyBrowsing, @ptrCast(self)), disp_i_d_, p_clsid_);
            }
            pub inline fn getPredefinedStrings(self: *const T, disp_i_d_: i32, p_ca_strings_out_: ?*CALPOLESTR, p_ca_cookies_out_: ?*CADWORD) HRESULT {
                return @as(*const IPerPropertyBrowsing.VTable, @ptrCast(self.vtable)).GetPredefinedStrings(@as(*const IPerPropertyBrowsing, @ptrCast(self)), disp_i_d_, p_ca_strings_out_, p_ca_cookies_out_);
            }
            pub inline fn getPredefinedValue(self: *const T, disp_i_d_: i32, dw_cookie_: u32, p_var_out_: ?*VARIANT) HRESULT {
                return @as(*const IPerPropertyBrowsing.VTable, @ptrCast(self.vtable)).GetPredefinedValue(@as(*const IPerPropertyBrowsing, @ptrCast(self)), disp_i_d_, dw_cookie_, p_var_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PROPBAG2_TYPE = enum(i32) {
    UNDEFINED = 0,
    DATA = 1,
    URL = 2,
    OBJECT = 3,
    STREAM = 4,
    STORAGE = 5,
    MONIKER = 6,
};
pub const PROPBAG2_TYPE_UNDEFINED = PROPBAG2_TYPE.UNDEFINED;
pub const PROPBAG2_TYPE_DATA = PROPBAG2_TYPE.DATA;
pub const PROPBAG2_TYPE_URL = PROPBAG2_TYPE.URL;
pub const PROPBAG2_TYPE_OBJECT = PROPBAG2_TYPE.OBJECT;
pub const PROPBAG2_TYPE_STREAM = PROPBAG2_TYPE.STREAM;
pub const PROPBAG2_TYPE_STORAGE = PROPBAG2_TYPE.STORAGE;
pub const PROPBAG2_TYPE_MONIKER = PROPBAG2_TYPE.MONIKER;

const IID_IPersistPropertyBag2_Value = Guid.initString("22f55881-280b-11d0-a8a9-00a0c90c2004");
pub const IID_IPersistPropertyBag2 = &IID_IPersistPropertyBag2_Value;
pub const IPersistPropertyBag2 = extern struct {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        InitNew: *const fn (
            self: *const IPersistPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: *const fn (
            self: *const IPersistPropertyBag2,
            p_prop_bag: ?*IPropertyBag2,
            p_err_log: ?*IErrorLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IPersistPropertyBag2,
            p_prop_bag: ?*IPropertyBag2,
            f_clear_dirty: BOOL,
            f_save_all_properties: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDirty: *const fn (
            self: *const IPersistPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPersist.MethodMixin(T);
            pub inline fn initNew(self: *const T) HRESULT {
                return @as(*const IPersistPropertyBag2.VTable, @ptrCast(self.vtable)).InitNew(@as(*const IPersistPropertyBag2, @ptrCast(self)));
            }
            pub inline fn load(self: *const T, p_prop_bag_: ?*IPropertyBag2, p_err_log_: ?*IErrorLog) HRESULT {
                return @as(*const IPersistPropertyBag2.VTable, @ptrCast(self.vtable)).Load(@as(*const IPersistPropertyBag2, @ptrCast(self)), p_prop_bag_, p_err_log_);
            }
            pub inline fn save(self: *const T, p_prop_bag_: ?*IPropertyBag2, f_clear_dirty_: BOOL, f_save_all_properties_: BOOL) HRESULT {
                return @as(*const IPersistPropertyBag2.VTable, @ptrCast(self.vtable)).Save(@as(*const IPersistPropertyBag2, @ptrCast(self)), p_prop_bag_, f_clear_dirty_, f_save_all_properties_);
            }
            pub inline fn isDirty(self: *const T) HRESULT {
                return @as(*const IPersistPropertyBag2.VTable, @ptrCast(self.vtable)).IsDirty(@as(*const IPersistPropertyBag2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IAdviseSinkEx_Value = Guid.initString("3af24290-0c96-11ce-a0cf-00aa00600ab8");
pub const IID_IAdviseSinkEx = &IID_IAdviseSinkEx_Value;
pub const IAdviseSinkEx = extern struct {
    pub const VTable = extern struct {
        base: IAdviseSink.VTable,
        OnViewStatusChange: *const fn (
            self: *const IAdviseSinkEx,
            dw_view_status: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAdviseSink.MethodMixin(T);
            pub inline fn onViewStatusChange(self: *const T, dw_view_status_: u32) void {
                return @as(*const IAdviseSinkEx.VTable, @ptrCast(self.vtable)).OnViewStatusChange(@as(*const IAdviseSinkEx, @ptrCast(self)), dw_view_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const QACONTAINERFLAGS = enum(i32) {
    SHOWHATCHING = 1,
    SHOWGRABHANDLES = 2,
    USERMODE = 4,
    DISPLAYASDEFAULT = 8,
    UIDEAD = 16,
    AUTOCLIP = 32,
    MESSAGEREFLECT = 64,
    SUPPORTSMNEMONICS = 128,
};
pub const QACONTAINER_SHOWHATCHING = QACONTAINERFLAGS.SHOWHATCHING;
pub const QACONTAINER_SHOWGRABHANDLES = QACONTAINERFLAGS.SHOWGRABHANDLES;
pub const QACONTAINER_USERMODE = QACONTAINERFLAGS.USERMODE;
pub const QACONTAINER_DISPLAYASDEFAULT = QACONTAINERFLAGS.DISPLAYASDEFAULT;
pub const QACONTAINER_UIDEAD = QACONTAINERFLAGS.UIDEAD;
pub const QACONTAINER_AUTOCLIP = QACONTAINERFLAGS.AUTOCLIP;
pub const QACONTAINER_MESSAGEREFLECT = QACONTAINERFLAGS.MESSAGEREFLECT;
pub const QACONTAINER_SUPPORTSMNEMONICS = QACONTAINERFLAGS.SUPPORTSMNEMONICS;

pub const QACONTAINER = extern struct {
    cbSize: u32,
    pClientSite: ?*IOleClientSite,
    pAdviseSink: ?*IAdviseSinkEx,
    pPropertyNotifySink: ?*IPropertyNotifySink,
    pUnkEventSink: ?*IUnknown,
    dwAmbientFlags: u32,
    colorFore: u32,
    colorBack: u32,
    pFont: ?*IFont,
    pUndoMgr: ?*IOleUndoManager,
    dwAppearance: u32,
    lcid: i32,
    hpal: ?HPALETTE,
    pBindHost: ?*IBindHost,
    pOleControlSite: ?*IOleControlSite,
    pServiceProvider: ?*IServiceProvider,
};

pub const QACONTROL = extern struct {
    cbSize: u32,
    dwMiscStatus: u32,
    dwViewStatus: u32,
    dwEventCookie: u32,
    dwPropNotifyCookie: u32,
    dwPointerActivationPolicy: u32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IQuickActivate_Value = Guid.initString("cf51ed10-62fe-11cf-bf86-00a0c9034836");
pub const IID_IQuickActivate = &IID_IQuickActivate_Value;
pub const IQuickActivate = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QuickActivate: *const fn (
            self: *const IQuickActivate,
            p_qa_container: ?*QACONTAINER,
            p_qa_control: ?*QACONTROL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContentExtent: *const fn (
            self: *const IQuickActivate,
            p_sizel: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentExtent: *const fn (
            self: *const IQuickActivate,
            p_sizel: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn quickActivate(self: *const T, p_qa_container_: ?*QACONTAINER, p_qa_control_: ?*QACONTROL) HRESULT {
                return @as(*const IQuickActivate.VTable, @ptrCast(self.vtable)).QuickActivate(@as(*const IQuickActivate, @ptrCast(self)), p_qa_container_, p_qa_control_);
            }
            pub inline fn setContentExtent(self: *const T, p_sizel_: ?*SIZE) HRESULT {
                return @as(*const IQuickActivate.VTable, @ptrCast(self.vtable)).SetContentExtent(@as(*const IQuickActivate, @ptrCast(self)), p_sizel_);
            }
            pub inline fn getContentExtent(self: *const T, p_sizel_: ?*SIZE) HRESULT {
                return @as(*const IQuickActivate.VTable, @ptrCast(self.vtable)).GetContentExtent(@as(*const IQuickActivate, @ptrCast(self)), p_sizel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OCPFIPARAMS = extern struct {
    cbStructSize: u32,
    hWndOwner: ?HWND,
    x: i32,
    y: i32,
    lpszCaption: ?[*:0]const u16,
    cObjects: u32,
    lplpUnk: ?*?*IUnknown,
    cPages: u32,
    lpPages: ?*Guid,
    lcid: u32,
    dispidInitialProperty: i32,
};

pub const FONTDESC = extern struct {
    cbSizeofstruct: u32,
    lpstrName: ?PWSTR,
    cySize: CY,
    sWeight: i16,
    sCharset: i16,
    fItalic: BOOL,
    fUnderline: BOOL,
    fStrikethrough: BOOL,
};

pub const PICTDESC = extern struct {
    cbSizeofstruct: u32,
    picType: u32,
    Anonymous: extern union {
        bmp: extern struct {
            hbitmap: ?HBITMAP,
            hpal: ?HPALETTE,
        },
        wmf: extern struct {
            hmeta: ?HMETAFILE,
            xExt: i32,
            yExt: i32,
        },
        icon: extern struct {
            hicon: ?HICON,
        },
        emf: extern struct {
            hemf: ?HENHMETAFILE,
        },
    },
};

pub const OLE_TRISTATE = enum(i32) {
    Unchecked = 0,
    Checked = 1,
    Gray = 2,
};
pub const triUnchecked = OLE_TRISTATE.Unchecked;
pub const triChecked = OLE_TRISTATE.Checked;
pub const triGray = OLE_TRISTATE.Gray;

const IID_IVBGetControl_Value = Guid.initString("40a050a0-3c31-101b-a82e-08002b2b2337");
pub const IID_IVBGetControl = &IID_IVBGetControl_Value;
pub const IVBGetControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumControls: *const fn (
            self: *const IVBGetControl,
            dw_ole_cont_f: OLECONTF,
            dw_which: ENUM_CONTROLS_WHICH_FLAGS,
            ppenum_unk: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enumControls(self: *const T, dw_ole_cont_f_: OLECONTF, dw_which_: ENUM_CONTROLS_WHICH_FLAGS, ppenum_unk_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const IVBGetControl.VTable, @ptrCast(self.vtable)).EnumControls(@as(*const IVBGetControl, @ptrCast(self)), dw_ole_cont_f_, dw_which_, ppenum_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetOleObject_Value = Guid.initString("8a701da0-4feb-101b-a82e-08002b2b2337");
pub const IID_IGetOleObject = &IID_IGetOleObject_Value;
pub const IGetOleObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOleObject: *const fn (
            self: *const IGetOleObject,
            riid: ?*const Guid,
            ppv_obj: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOleObject(self: *const T, riid_: ?*const Guid, ppv_obj_: ?*?*anyopaque) HRESULT {
                return @as(*const IGetOleObject.VTable, @ptrCast(self.vtable)).GetOleObject(@as(*const IGetOleObject, @ptrCast(self)), riid_, ppv_obj_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBFormat_Value = Guid.initString("9849fd60-3768-101b-8d72-ae6164ffe3cf");
pub const IID_IVBFormat = &IID_IVBFormat_Value;
pub const IVBFormat = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Format: *const fn (
            self: *const IVBFormat,
            v_data: ?*VARIANT,
            bstr_format: ?BSTR,
            lp_buffer: ?*anyopaque,
            cb: u16,
            lcid: i32,
            s_first_day_of_week: i16,
            s_first_week_of_year: u16,
            rcb: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn format(self: *const T, v_data_: ?*VARIANT, bstr_format_: ?BSTR, lp_buffer_: ?*anyopaque, cb_: u16, lcid_: i32, s_first_day_of_week_: i16, s_first_week_of_year_: u16, rcb_: ?*u16) HRESULT {
                return @as(*const IVBFormat.VTable, @ptrCast(self.vtable)).Format(@as(*const IVBFormat, @ptrCast(self)), v_data_, bstr_format_, lp_buffer_, cb_, lcid_, s_first_day_of_week_, s_first_week_of_year_, rcb_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetVBAObject_Value = Guid.initString("91733a60-3f4c-101b-a3f6-00aa0034e4e9");
pub const IID_IGetVBAObject = &IID_IGetVBAObject_Value;
pub const IGetVBAObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetObject: *const fn (
            self: *const IGetVBAObject,
            riid: ?*const Guid,
            ppv_obj: ?*?*anyopaque,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getObject(self: *const T, riid_: ?*const Guid, ppv_obj_: ?*?*anyopaque, dw_reserved_: u32) HRESULT {
                return @as(*const IGetVBAObject.VTable, @ptrCast(self.vtable)).GetObject(@as(*const IGetVBAObject, @ptrCast(self)), riid_, ppv_obj_, dw_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DOCMISC = enum(i32) {
    CANCREATEMULTIPLEVIEWS = 1,
    SUPPORTCOMPLEXRECTANGLES = 2,
    CANTOPENEDIT = 4,
    NOFILESUPPORT = 8,
};
pub const DOCMISC_CANCREATEMULTIPLEVIEWS = DOCMISC.CANCREATEMULTIPLEVIEWS;
pub const DOCMISC_SUPPORTCOMPLEXRECTANGLES = DOCMISC.SUPPORTCOMPLEXRECTANGLES;
pub const DOCMISC_CANTOPENEDIT = DOCMISC.CANTOPENEDIT;
pub const DOCMISC_NOFILESUPPORT = DOCMISC.NOFILESUPPORT;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleDocument_Value = Guid.initString("b722bcc5-4e68-101b-a2bc-00aa00404770");
pub const IID_IOleDocument = &IID_IOleDocument_Value;
pub const IOleDocument = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateView: *const fn (
            self: *const IOleDocument,
            p_i_p_site: ?*IOleInPlaceSite,
            pstm: ?*IStream,
            dw_reserved: u32,
            pp_view: ?*?*IOleDocumentView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocMiscStatus: *const fn (
            self: *const IOleDocument,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumViews: *const fn (
            self: *const IOleDocument,
            pp_enum: ?*?*IEnumOleDocumentViews,
            pp_view: ?*?*IOleDocumentView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createView(self: *const T, p_i_p_site_: ?*IOleInPlaceSite, pstm_: ?*IStream, dw_reserved_: u32, pp_view_: ?*?*IOleDocumentView) HRESULT {
                return @as(*const IOleDocument.VTable, @ptrCast(self.vtable)).CreateView(@as(*const IOleDocument, @ptrCast(self)), p_i_p_site_, pstm_, dw_reserved_, pp_view_);
            }
            pub inline fn getDocMiscStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IOleDocument.VTable, @ptrCast(self.vtable)).GetDocMiscStatus(@as(*const IOleDocument, @ptrCast(self)), pdw_status_);
            }
            pub inline fn enumViews(self: *const T, pp_enum_: ?*?*IEnumOleDocumentViews, pp_view_: ?*?*IOleDocumentView) HRESULT {
                return @as(*const IOleDocument.VTable, @ptrCast(self.vtable)).EnumViews(@as(*const IOleDocument, @ptrCast(self)), pp_enum_, pp_view_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleDocumentSite_Value = Guid.initString("b722bcc7-4e68-101b-a2bc-00aa00404770");
pub const IID_IOleDocumentSite = &IID_IOleDocumentSite_Value;
pub const IOleDocumentSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ActivateMe: *const fn (
            self: *const IOleDocumentSite,
            p_view_to_activate: ?*IOleDocumentView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn activateMe(self: *const T, p_view_to_activate_: ?*IOleDocumentView) HRESULT {
                return @as(*const IOleDocumentSite.VTable, @ptrCast(self.vtable)).ActivateMe(@as(*const IOleDocumentSite, @ptrCast(self)), p_view_to_activate_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleDocumentView_Value = Guid.initString("b722bcc6-4e68-101b-a2bc-00aa00404770");
pub const IID_IOleDocumentView = &IID_IOleDocumentView_Value;
pub const IOleDocumentView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetInPlaceSite: *const fn (
            self: *const IOleDocumentView,
            p_i_p_site: ?*IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInPlaceSite: *const fn (
            self: *const IOleDocumentView,
            pp_i_p_site: ?*?*IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocument: *const fn (
            self: *const IOleDocumentView,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRect: *const fn (
            self: *const IOleDocumentView,
            prc_view: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRect: *const fn (
            self: *const IOleDocumentView,
            prc_view: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRectComplex: *const fn (
            self: *const IOleDocumentView,
            prc_view: ?*RECT,
            prc_h_scroll: ?*RECT,
            prc_v_scroll: ?*RECT,
            prc_size_box: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn (
            self: *const IOleDocumentView,
            f_show: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UIActivate: *const fn (
            self: *const IOleDocumentView,
            f_u_i_activate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IOleDocumentView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseView: *const fn (
            self: *const IOleDocumentView,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveViewState: *const fn (
            self: *const IOleDocumentView,
            pstm: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyViewState: *const fn (
            self: *const IOleDocumentView,
            pstm: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOleDocumentView,
            p_i_p_site_new: ?*IOleInPlaceSite,
            pp_view_new: ?*?*IOleDocumentView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setInPlaceSite(self: *const T, p_i_p_site_: ?*IOleInPlaceSite) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).SetInPlaceSite(@as(*const IOleDocumentView, @ptrCast(self)), p_i_p_site_);
            }
            pub inline fn getInPlaceSite(self: *const T, pp_i_p_site_: ?*?*IOleInPlaceSite) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).GetInPlaceSite(@as(*const IOleDocumentView, @ptrCast(self)), pp_i_p_site_);
            }
            pub inline fn getDocument(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).GetDocument(@as(*const IOleDocumentView, @ptrCast(self)), ppunk_);
            }
            pub inline fn setRect(self: *const T, prc_view_: ?*RECT) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).SetRect(@as(*const IOleDocumentView, @ptrCast(self)), prc_view_);
            }
            pub inline fn getRect(self: *const T, prc_view_: ?*RECT) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).GetRect(@as(*const IOleDocumentView, @ptrCast(self)), prc_view_);
            }
            pub inline fn setRectComplex(self: *const T, prc_view_: ?*RECT, prc_h_scroll_: ?*RECT, prc_v_scroll_: ?*RECT, prc_size_box_: ?*RECT) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).SetRectComplex(@as(*const IOleDocumentView, @ptrCast(self)), prc_view_, prc_h_scroll_, prc_v_scroll_, prc_size_box_);
            }
            pub inline fn show(self: *const T, f_show_: BOOL) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).Show(@as(*const IOleDocumentView, @ptrCast(self)), f_show_);
            }
            pub inline fn uiActivate(self: *const T, f_u_i_activate_: BOOL) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).UIActivate(@as(*const IOleDocumentView, @ptrCast(self)), f_u_i_activate_);
            }
            pub inline fn open(self: *const T) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).Open(@as(*const IOleDocumentView, @ptrCast(self)));
            }
            pub inline fn closeView(self: *const T, dw_reserved_: u32) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).CloseView(@as(*const IOleDocumentView, @ptrCast(self)), dw_reserved_);
            }
            pub inline fn saveViewState(self: *const T, pstm_: ?*IStream) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).SaveViewState(@as(*const IOleDocumentView, @ptrCast(self)), pstm_);
            }
            pub inline fn applyViewState(self: *const T, pstm_: ?*IStream) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).ApplyViewState(@as(*const IOleDocumentView, @ptrCast(self)), pstm_);
            }
            pub inline fn clone(self: *const T, p_i_p_site_new_: ?*IOleInPlaceSite, pp_view_new_: ?*?*IOleDocumentView) HRESULT {
                return @as(*const IOleDocumentView.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOleDocumentView, @ptrCast(self)), p_i_p_site_new_, pp_view_new_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumOleDocumentViews_Value = Guid.initString("b722bcc8-4e68-101b-a2bc-00aa00404770");
pub const IID_IEnumOleDocumentViews = &IID_IEnumOleDocumentViews_Value;
pub const IEnumOleDocumentViews = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumOleDocumentViews,
            c_views: u32,
            rgp_view: ?*?*IOleDocumentView,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumOleDocumentViews,
            c_views: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumOleDocumentViews,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumOleDocumentViews,
            pp_enum: ?*?*IEnumOleDocumentViews,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_views_: u32, rgp_view_: ?*?*IOleDocumentView, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumOleDocumentViews.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumOleDocumentViews, @ptrCast(self)), c_views_, rgp_view_, pc_fetched_);
            }
            pub inline fn skip(self: *const T, c_views_: u32) HRESULT {
                return @as(*const IEnumOleDocumentViews.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumOleDocumentViews, @ptrCast(self)), c_views_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumOleDocumentViews.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumOleDocumentViews, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumOleDocumentViews) HRESULT {
                return @as(*const IEnumOleDocumentViews.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumOleDocumentViews, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IContinueCallback_Value = Guid.initString("b722bcca-4e68-101b-a2bc-00aa00404770");
pub const IID_IContinueCallback = &IID_IContinueCallback_Value;
pub const IContinueCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FContinue: *const fn (
            self: *const IContinueCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FContinuePrinting: *const fn (
            self: *const IContinueCallback,
            n_cnt_printed: i32,
            n_cur_page: i32,
            pwsz_print_status: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn fContinue(self: *const T) HRESULT {
                return @as(*const IContinueCallback.VTable, @ptrCast(self.vtable)).FContinue(@as(*const IContinueCallback, @ptrCast(self)));
            }
            pub inline fn fContinuePrinting(self: *const T, n_cnt_printed_: i32, n_cur_page_: i32, pwsz_print_status_: ?PWSTR) HRESULT {
                return @as(*const IContinueCallback.VTable, @ptrCast(self.vtable)).FContinuePrinting(@as(*const IContinueCallback, @ptrCast(self)), n_cnt_printed_, n_cur_page_, pwsz_print_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PRINTFLAG = enum(u32) {
    MAYBOTHERUSER = 1,
    PROMPTUSER = 2,
    USERMAYCHANGEPRINTER = 4,
    RECOMPOSETODEVICE = 8,
    DONTACTUALLYPRINT = 16,
    FORCEPROPERTIES = 32,
    PRINTTOFILE = 64,
    _,
    pub fn initFlags(o: struct {
        MAYBOTHERUSER: u1 = 0,
        PROMPTUSER: u1 = 0,
        USERMAYCHANGEPRINTER: u1 = 0,
        RECOMPOSETODEVICE: u1 = 0,
        DONTACTUALLYPRINT: u1 = 0,
        FORCEPROPERTIES: u1 = 0,
        PRINTTOFILE: u1 = 0,
    }) PRINTFLAG {
        return @as(PRINTFLAG, @enumFromInt((if (o.MAYBOTHERUSER == 1) @intFromEnum(PRINTFLAG.MAYBOTHERUSER) else 0) | (if (o.PROMPTUSER == 1) @intFromEnum(PRINTFLAG.PROMPTUSER) else 0) | (if (o.USERMAYCHANGEPRINTER == 1) @intFromEnum(PRINTFLAG.USERMAYCHANGEPRINTER) else 0) | (if (o.RECOMPOSETODEVICE == 1) @intFromEnum(PRINTFLAG.RECOMPOSETODEVICE) else 0) | (if (o.DONTACTUALLYPRINT == 1) @intFromEnum(PRINTFLAG.DONTACTUALLYPRINT) else 0) | (if (o.FORCEPROPERTIES == 1) @intFromEnum(PRINTFLAG.FORCEPROPERTIES) else 0) | (if (o.PRINTTOFILE == 1) @intFromEnum(PRINTFLAG.PRINTTOFILE) else 0)));
    }
};
pub const PRINTFLAG_MAYBOTHERUSER = PRINTFLAG.MAYBOTHERUSER;
pub const PRINTFLAG_PROMPTUSER = PRINTFLAG.PROMPTUSER;
pub const PRINTFLAG_USERMAYCHANGEPRINTER = PRINTFLAG.USERMAYCHANGEPRINTER;
pub const PRINTFLAG_RECOMPOSETODEVICE = PRINTFLAG.RECOMPOSETODEVICE;
pub const PRINTFLAG_DONTACTUALLYPRINT = PRINTFLAG.DONTACTUALLYPRINT;
pub const PRINTFLAG_FORCEPROPERTIES = PRINTFLAG.FORCEPROPERTIES;
pub const PRINTFLAG_PRINTTOFILE = PRINTFLAG.PRINTTOFILE;

pub const PAGERANGE = extern struct {
    nFromPage: i32,
    nToPage: i32,
};

pub const PAGESET = extern struct {
    cbStruct: u32,
    fOddPages: BOOL,
    fEvenPages: BOOL,
    cPageRange: u32,
    rgPages: [1]PAGERANGE,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPrint_Value = Guid.initString("b722bcc9-4e68-101b-a2bc-00aa00404770");
pub const IID_IPrint = &IID_IPrint_Value;
pub const IPrint = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetInitialPageNum: *const fn (
            self: *const IPrint,
            n_first_page: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageInfo: *const fn (
            self: *const IPrint,
            pn_first_page: ?*i32,
            pc_pages: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Print: *const fn (
            self: *const IPrint,
            grf_flags: u32,
            pptd: ?*?*DVTARGETDEVICE,
            pp_page_set: ?*?*PAGESET,
            pstgm_options: ?*STGMEDIUM,
            pcallback: ?*IContinueCallback,
            n_first_page: i32,
            pc_pages_printed: ?*i32,
            pn_last_page: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setInitialPageNum(self: *const T, n_first_page_: i32) HRESULT {
                return @as(*const IPrint.VTable, @ptrCast(self.vtable)).SetInitialPageNum(@as(*const IPrint, @ptrCast(self)), n_first_page_);
            }
            pub inline fn getPageInfo(self: *const T, pn_first_page_: ?*i32, pc_pages_: ?*i32) HRESULT {
                return @as(*const IPrint.VTable, @ptrCast(self.vtable)).GetPageInfo(@as(*const IPrint, @ptrCast(self)), pn_first_page_, pc_pages_);
            }
            pub inline fn print(self: *const T, grf_flags_: u32, pptd_: ?*?*DVTARGETDEVICE, pp_page_set_: ?*?*PAGESET, pstgm_options_: ?*STGMEDIUM, pcallback_: ?*IContinueCallback, n_first_page_: i32, pc_pages_printed_: ?*i32, pn_last_page_: ?*i32) HRESULT {
                return @as(*const IPrint.VTable, @ptrCast(self.vtable)).Print(@as(*const IPrint, @ptrCast(self)), grf_flags_, pptd_, pp_page_set_, pstgm_options_, pcallback_, n_first_page_, pc_pages_printed_, pn_last_page_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OLECMDF = enum(i32) {
    SUPPORTED = 1,
    ENABLED = 2,
    LATCHED = 4,
    NINCHED = 8,
    INVISIBLE = 16,
    DEFHIDEONCTXTMENU = 32,
};
pub const OLECMDF_SUPPORTED = OLECMDF.SUPPORTED;
pub const OLECMDF_ENABLED = OLECMDF.ENABLED;
pub const OLECMDF_LATCHED = OLECMDF.LATCHED;
pub const OLECMDF_NINCHED = OLECMDF.NINCHED;
pub const OLECMDF_INVISIBLE = OLECMDF.INVISIBLE;
pub const OLECMDF_DEFHIDEONCTXTMENU = OLECMDF.DEFHIDEONCTXTMENU;

pub const OLECMD = extern struct {
    cmdID: u32,
    cmdf: u32,
};

pub const OLECMDTEXT = extern struct {
    cmdtextf: u32,
    cwActual: u32,
    cwBuf: u32,
    rgwz: [1]u16,
};

pub const OLECMDTEXTF = enum(i32) {
    NONE = 0,
    NAME = 1,
    STATUS = 2,
};
pub const OLECMDTEXTF_NONE = OLECMDTEXTF.NONE;
pub const OLECMDTEXTF_NAME = OLECMDTEXTF.NAME;
pub const OLECMDTEXTF_STATUS = OLECMDTEXTF.STATUS;

pub const OLECMDEXECOPT = enum(i32) {
    DODEFAULT = 0,
    PROMPTUSER = 1,
    DONTPROMPTUSER = 2,
    SHOWHELP = 3,
};
pub const OLECMDEXECOPT_DODEFAULT = OLECMDEXECOPT.DODEFAULT;
pub const OLECMDEXECOPT_PROMPTUSER = OLECMDEXECOPT.PROMPTUSER;
pub const OLECMDEXECOPT_DONTPROMPTUSER = OLECMDEXECOPT.DONTPROMPTUSER;
pub const OLECMDEXECOPT_SHOWHELP = OLECMDEXECOPT.SHOWHELP;

pub const OLECMDID = enum(i32) {
    OPEN = 1,
    NEW = 2,
    SAVE = 3,
    SAVEAS = 4,
    SAVECOPYAS = 5,
    PRINT = 6,
    PRINTPREVIEW = 7,
    PAGESETUP = 8,
    SPELL = 9,
    PROPERTIES = 10,
    CUT = 11,
    COPY = 12,
    PASTE = 13,
    PASTESPECIAL = 14,
    UNDO = 15,
    REDO = 16,
    SELECTALL = 17,
    CLEARSELECTION = 18,
    ZOOM = 19,
    GETZOOMRANGE = 20,
    UPDATECOMMANDS = 21,
    REFRESH = 22,
    STOP = 23,
    HIDETOOLBARS = 24,
    SETPROGRESSMAX = 25,
    SETPROGRESSPOS = 26,
    SETPROGRESSTEXT = 27,
    SETTITLE = 28,
    SETDOWNLOADSTATE = 29,
    STOPDOWNLOAD = 30,
    ONTOOLBARACTIVATED = 31,
    FIND = 32,
    DELETE = 33,
    HTTPEQUIV = 34,
    HTTPEQUIV_DONE = 35,
    ENABLE_INTERACTION = 36,
    ONUNLOAD = 37,
    PROPERTYBAG2 = 38,
    PREREFRESH = 39,
    SHOWSCRIPTERROR = 40,
    SHOWMESSAGE = 41,
    SHOWFIND = 42,
    SHOWPAGESETUP = 43,
    SHOWPRINT = 44,
    CLOSE = 45,
    ALLOWUILESSSAVEAS = 46,
    DONTDOWNLOADCSS = 47,
    UPDATEPAGESTATUS = 48,
    PRINT2 = 49,
    PRINTPREVIEW2 = 50,
    SETPRINTTEMPLATE = 51,
    GETPRINTTEMPLATE = 52,
    PAGEACTIONBLOCKED = 55,
    PAGEACTIONUIQUERY = 56,
    FOCUSVIEWCONTROLS = 57,
    FOCUSVIEWCONTROLSQUERY = 58,
    SHOWPAGEACTIONMENU = 59,
    ADDTRAVELENTRY = 60,
    UPDATETRAVELENTRY = 61,
    UPDATEBACKFORWARDSTATE = 62,
    OPTICAL_ZOOM = 63,
    OPTICAL_GETZOOMRANGE = 64,
    WINDOWSTATECHANGED = 65,
    ACTIVEXINSTALLSCOPE = 66,
    UPDATETRAVELENTRY_DATARECOVERY = 67,
    SHOWTASKDLG = 68,
    POPSTATEEVENT = 69,
    VIEWPORT_MODE = 70,
    LAYOUT_VIEWPORT_WIDTH = 71,
    VISUAL_VIEWPORT_EXCLUDE_BOTTOM = 72,
    USER_OPTICAL_ZOOM = 73,
    PAGEAVAILABLE = 74,
    GETUSERSCALABLE = 75,
    UPDATE_CARET = 76,
    ENABLE_VISIBILITY = 77,
    MEDIA_PLAYBACK = 78,
    SETFAVICON = 79,
    SET_HOST_FULLSCREENMODE = 80,
    EXITFULLSCREEN = 81,
    SCROLLCOMPLETE = 82,
    ONBEFOREUNLOAD = 83,
    SHOWMESSAGE_BLOCKABLE = 84,
    SHOWTASKDLG_BLOCKABLE = 85,
};
pub const OLECMDID_OPEN = OLECMDID.OPEN;
pub const OLECMDID_NEW = OLECMDID.NEW;
pub const OLECMDID_SAVE = OLECMDID.SAVE;
pub const OLECMDID_SAVEAS = OLECMDID.SAVEAS;
pub const OLECMDID_SAVECOPYAS = OLECMDID.SAVECOPYAS;
pub const OLECMDID_PRINT = OLECMDID.PRINT;
pub const OLECMDID_PRINTPREVIEW = OLECMDID.PRINTPREVIEW;
pub const OLECMDID_PAGESETUP = OLECMDID.PAGESETUP;
pub const OLECMDID_SPELL = OLECMDID.SPELL;
pub const OLECMDID_PROPERTIES = OLECMDID.PROPERTIES;
pub const OLECMDID_CUT = OLECMDID.CUT;
pub const OLECMDID_COPY = OLECMDID.COPY;
pub const OLECMDID_PASTE = OLECMDID.PASTE;
pub const OLECMDID_PASTESPECIAL = OLECMDID.PASTESPECIAL;
pub const OLECMDID_UNDO = OLECMDID.UNDO;
pub const OLECMDID_REDO = OLECMDID.REDO;
pub const OLECMDID_SELECTALL = OLECMDID.SELECTALL;
pub const OLECMDID_CLEARSELECTION = OLECMDID.CLEARSELECTION;
pub const OLECMDID_ZOOM = OLECMDID.ZOOM;
pub const OLECMDID_GETZOOMRANGE = OLECMDID.GETZOOMRANGE;
pub const OLECMDID_UPDATECOMMANDS = OLECMDID.UPDATECOMMANDS;
pub const OLECMDID_REFRESH = OLECMDID.REFRESH;
pub const OLECMDID_STOP = OLECMDID.STOP;
pub const OLECMDID_HIDETOOLBARS = OLECMDID.HIDETOOLBARS;
pub const OLECMDID_SETPROGRESSMAX = OLECMDID.SETPROGRESSMAX;
pub const OLECMDID_SETPROGRESSPOS = OLECMDID.SETPROGRESSPOS;
pub const OLECMDID_SETPROGRESSTEXT = OLECMDID.SETPROGRESSTEXT;
pub const OLECMDID_SETTITLE = OLECMDID.SETTITLE;
pub const OLECMDID_SETDOWNLOADSTATE = OLECMDID.SETDOWNLOADSTATE;
pub const OLECMDID_STOPDOWNLOAD = OLECMDID.STOPDOWNLOAD;
pub const OLECMDID_ONTOOLBARACTIVATED = OLECMDID.ONTOOLBARACTIVATED;
pub const OLECMDID_FIND = OLECMDID.FIND;
pub const OLECMDID_DELETE = OLECMDID.DELETE;
pub const OLECMDID_HTTPEQUIV = OLECMDID.HTTPEQUIV;
pub const OLECMDID_HTTPEQUIV_DONE = OLECMDID.HTTPEQUIV_DONE;
pub const OLECMDID_ENABLE_INTERACTION = OLECMDID.ENABLE_INTERACTION;
pub const OLECMDID_ONUNLOAD = OLECMDID.ONUNLOAD;
pub const OLECMDID_PROPERTYBAG2 = OLECMDID.PROPERTYBAG2;
pub const OLECMDID_PREREFRESH = OLECMDID.PREREFRESH;
pub const OLECMDID_SHOWSCRIPTERROR = OLECMDID.SHOWSCRIPTERROR;
pub const OLECMDID_SHOWMESSAGE = OLECMDID.SHOWMESSAGE;
pub const OLECMDID_SHOWFIND = OLECMDID.SHOWFIND;
pub const OLECMDID_SHOWPAGESETUP = OLECMDID.SHOWPAGESETUP;
pub const OLECMDID_SHOWPRINT = OLECMDID.SHOWPRINT;
pub const OLECMDID_CLOSE = OLECMDID.CLOSE;
pub const OLECMDID_ALLOWUILESSSAVEAS = OLECMDID.ALLOWUILESSSAVEAS;
pub const OLECMDID_DONTDOWNLOADCSS = OLECMDID.DONTDOWNLOADCSS;
pub const OLECMDID_UPDATEPAGESTATUS = OLECMDID.UPDATEPAGESTATUS;
pub const OLECMDID_PRINT2 = OLECMDID.PRINT2;
pub const OLECMDID_PRINTPREVIEW2 = OLECMDID.PRINTPREVIEW2;
pub const OLECMDID_SETPRINTTEMPLATE = OLECMDID.SETPRINTTEMPLATE;
pub const OLECMDID_GETPRINTTEMPLATE = OLECMDID.GETPRINTTEMPLATE;
pub const OLECMDID_PAGEACTIONBLOCKED = OLECMDID.PAGEACTIONBLOCKED;
pub const OLECMDID_PAGEACTIONUIQUERY = OLECMDID.PAGEACTIONUIQUERY;
pub const OLECMDID_FOCUSVIEWCONTROLS = OLECMDID.FOCUSVIEWCONTROLS;
pub const OLECMDID_FOCUSVIEWCONTROLSQUERY = OLECMDID.FOCUSVIEWCONTROLSQUERY;
pub const OLECMDID_SHOWPAGEACTIONMENU = OLECMDID.SHOWPAGEACTIONMENU;
pub const OLECMDID_ADDTRAVELENTRY = OLECMDID.ADDTRAVELENTRY;
pub const OLECMDID_UPDATETRAVELENTRY = OLECMDID.UPDATETRAVELENTRY;
pub const OLECMDID_UPDATEBACKFORWARDSTATE = OLECMDID.UPDATEBACKFORWARDSTATE;
pub const OLECMDID_OPTICAL_ZOOM = OLECMDID.OPTICAL_ZOOM;
pub const OLECMDID_OPTICAL_GETZOOMRANGE = OLECMDID.OPTICAL_GETZOOMRANGE;
pub const OLECMDID_WINDOWSTATECHANGED = OLECMDID.WINDOWSTATECHANGED;
pub const OLECMDID_ACTIVEXINSTALLSCOPE = OLECMDID.ACTIVEXINSTALLSCOPE;
pub const OLECMDID_UPDATETRAVELENTRY_DATARECOVERY = OLECMDID.UPDATETRAVELENTRY_DATARECOVERY;
pub const OLECMDID_SHOWTASKDLG = OLECMDID.SHOWTASKDLG;
pub const OLECMDID_POPSTATEEVENT = OLECMDID.POPSTATEEVENT;
pub const OLECMDID_VIEWPORT_MODE = OLECMDID.VIEWPORT_MODE;
pub const OLECMDID_LAYOUT_VIEWPORT_WIDTH = OLECMDID.LAYOUT_VIEWPORT_WIDTH;
pub const OLECMDID_VISUAL_VIEWPORT_EXCLUDE_BOTTOM = OLECMDID.VISUAL_VIEWPORT_EXCLUDE_BOTTOM;
pub const OLECMDID_USER_OPTICAL_ZOOM = OLECMDID.USER_OPTICAL_ZOOM;
pub const OLECMDID_PAGEAVAILABLE = OLECMDID.PAGEAVAILABLE;
pub const OLECMDID_GETUSERSCALABLE = OLECMDID.GETUSERSCALABLE;
pub const OLECMDID_UPDATE_CARET = OLECMDID.UPDATE_CARET;
pub const OLECMDID_ENABLE_VISIBILITY = OLECMDID.ENABLE_VISIBILITY;
pub const OLECMDID_MEDIA_PLAYBACK = OLECMDID.MEDIA_PLAYBACK;
pub const OLECMDID_SETFAVICON = OLECMDID.SETFAVICON;
pub const OLECMDID_SET_HOST_FULLSCREENMODE = OLECMDID.SET_HOST_FULLSCREENMODE;
pub const OLECMDID_EXITFULLSCREEN = OLECMDID.EXITFULLSCREEN;
pub const OLECMDID_SCROLLCOMPLETE = OLECMDID.SCROLLCOMPLETE;
pub const OLECMDID_ONBEFOREUNLOAD = OLECMDID.ONBEFOREUNLOAD;
pub const OLECMDID_SHOWMESSAGE_BLOCKABLE = OLECMDID.SHOWMESSAGE_BLOCKABLE;
pub const OLECMDID_SHOWTASKDLG_BLOCKABLE = OLECMDID.SHOWTASKDLG_BLOCKABLE;

pub const MEDIAPLAYBACK_STATE = enum(i32) {
    RESUME = 0,
    PAUSE = 1,
    PAUSE_AND_SUSPEND = 2,
    RESUME_FROM_SUSPEND = 3,
};
pub const MEDIAPLAYBACK_RESUME = MEDIAPLAYBACK_STATE.RESUME;
pub const MEDIAPLAYBACK_PAUSE = MEDIAPLAYBACK_STATE.PAUSE;
pub const MEDIAPLAYBACK_PAUSE_AND_SUSPEND = MEDIAPLAYBACK_STATE.PAUSE_AND_SUSPEND;
pub const MEDIAPLAYBACK_RESUME_FROM_SUSPEND = MEDIAPLAYBACK_STATE.RESUME_FROM_SUSPEND;

pub const IGNOREMIME = enum(i32) {
    PROMPT = 1,
    TEXT = 2,
};
pub const IGNOREMIME_PROMPT = IGNOREMIME.PROMPT;
pub const IGNOREMIME_TEXT = IGNOREMIME.TEXT;

pub const WPCSETTING = enum(i32) {
    LOGGING_ENABLED = 1,
    FILEDOWNLOAD_BLOCKED = 2,
};
pub const WPCSETTING_LOGGING_ENABLED = WPCSETTING.LOGGING_ENABLED;
pub const WPCSETTING_FILEDOWNLOAD_BLOCKED = WPCSETTING.FILEDOWNLOAD_BLOCKED;

// TODO: this type is limited to platform 'windows5.0'
const IID_IOleCommandTarget_Value = Guid.initString("b722bccb-4e68-101b-a2bc-00aa00404770");
pub const IID_IOleCommandTarget = &IID_IOleCommandTarget_Value;
pub const IOleCommandTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryStatus: *const fn (
            self: *const IOleCommandTarget,
            pguid_cmd_group: ?*const Guid,
            c_cmds: u32,
            prg_cmds: ?*OLECMD,
            p_cmd_text: ?*OLECMDTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Exec: *const fn (
            self: *const IOleCommandTarget,
            pguid_cmd_group: ?*const Guid,
            n_cmd_i_d: u32,
            n_cmdexecopt: u32,
            pva_in: ?*VARIANT,
            pva_out: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryStatus(self: *const T, pguid_cmd_group_: ?*const Guid, c_cmds_: u32, prg_cmds_: ?*OLECMD, p_cmd_text_: ?*OLECMDTEXT) HRESULT {
                return @as(*const IOleCommandTarget.VTable, @ptrCast(self.vtable)).QueryStatus(@as(*const IOleCommandTarget, @ptrCast(self)), pguid_cmd_group_, c_cmds_, prg_cmds_, p_cmd_text_);
            }
            pub inline fn exec(self: *const T, pguid_cmd_group_: ?*const Guid, n_cmd_i_d_: u32, n_cmdexecopt_: u32, pva_in_: ?*VARIANT, pva_out_: ?*VARIANT) HRESULT {
                return @as(*const IOleCommandTarget.VTable, @ptrCast(self.vtable)).Exec(@as(*const IOleCommandTarget, @ptrCast(self)), pguid_cmd_group_, n_cmd_i_d_, n_cmdexecopt_, pva_in_, pva_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OLECMDID_REFRESHFLAG = enum(i32) {
    NORMAL = 0,
    IFEXPIRED = 1,
    CONTINUE = 2,
    COMPLETELY = 3,
    NO_CACHE = 4,
    RELOAD = 5,
    LEVELMASK = 255,
    CLEARUSERINPUT = 4096,
    PROMPTIFOFFLINE = 8192,
    THROUGHSCRIPT = 16384,
    SKIPBEFOREUNLOADEVENT = 32768,
    PAGEACTION_ACTIVEXINSTALL = 65536,
    PAGEACTION_FILEDOWNLOAD = 131072,
    PAGEACTION_LOCALMACHINE = 262144,
    PAGEACTION_POPUPWINDOW = 524288,
    PAGEACTION_PROTLOCKDOWNLOCALMACHINE = 1048576,
    PAGEACTION_PROTLOCKDOWNTRUSTED = 2097152,
    PAGEACTION_PROTLOCKDOWNINTRANET = 4194304,
    PAGEACTION_PROTLOCKDOWNINTERNET = 8388608,
    PAGEACTION_PROTLOCKDOWNRESTRICTED = 16777216,
    PAGEACTION_MIXEDCONTENT = 33554432,
    PAGEACTION_INVALID_CERT = 67108864,
    PAGEACTION_ALLOW_VERSION = 134217728,
};
pub const OLECMDIDF_REFRESH_NORMAL = OLECMDID_REFRESHFLAG.NORMAL;
pub const OLECMDIDF_REFRESH_IFEXPIRED = OLECMDID_REFRESHFLAG.IFEXPIRED;
pub const OLECMDIDF_REFRESH_CONTINUE = OLECMDID_REFRESHFLAG.CONTINUE;
pub const OLECMDIDF_REFRESH_COMPLETELY = OLECMDID_REFRESHFLAG.COMPLETELY;
pub const OLECMDIDF_REFRESH_NO_CACHE = OLECMDID_REFRESHFLAG.NO_CACHE;
pub const OLECMDIDF_REFRESH_RELOAD = OLECMDID_REFRESHFLAG.RELOAD;
pub const OLECMDIDF_REFRESH_LEVELMASK = OLECMDID_REFRESHFLAG.LEVELMASK;
pub const OLECMDIDF_REFRESH_CLEARUSERINPUT = OLECMDID_REFRESHFLAG.CLEARUSERINPUT;
pub const OLECMDIDF_REFRESH_PROMPTIFOFFLINE = OLECMDID_REFRESHFLAG.PROMPTIFOFFLINE;
pub const OLECMDIDF_REFRESH_THROUGHSCRIPT = OLECMDID_REFRESHFLAG.THROUGHSCRIPT;
pub const OLECMDIDF_REFRESH_SKIPBEFOREUNLOADEVENT = OLECMDID_REFRESHFLAG.SKIPBEFOREUNLOADEVENT;
pub const OLECMDIDF_REFRESH_PAGEACTION_ACTIVEXINSTALL = OLECMDID_REFRESHFLAG.PAGEACTION_ACTIVEXINSTALL;
pub const OLECMDIDF_REFRESH_PAGEACTION_FILEDOWNLOAD = OLECMDID_REFRESHFLAG.PAGEACTION_FILEDOWNLOAD;
pub const OLECMDIDF_REFRESH_PAGEACTION_LOCALMACHINE = OLECMDID_REFRESHFLAG.PAGEACTION_LOCALMACHINE;
pub const OLECMDIDF_REFRESH_PAGEACTION_POPUPWINDOW = OLECMDID_REFRESHFLAG.PAGEACTION_POPUPWINDOW;
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNLOCALMACHINE = OLECMDID_REFRESHFLAG.PAGEACTION_PROTLOCKDOWNLOCALMACHINE;
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNTRUSTED = OLECMDID_REFRESHFLAG.PAGEACTION_PROTLOCKDOWNTRUSTED;
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTRANET = OLECMDID_REFRESHFLAG.PAGEACTION_PROTLOCKDOWNINTRANET;
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTERNET = OLECMDID_REFRESHFLAG.PAGEACTION_PROTLOCKDOWNINTERNET;
pub const OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNRESTRICTED = OLECMDID_REFRESHFLAG.PAGEACTION_PROTLOCKDOWNRESTRICTED;
pub const OLECMDIDF_REFRESH_PAGEACTION_MIXEDCONTENT = OLECMDID_REFRESHFLAG.PAGEACTION_MIXEDCONTENT;
pub const OLECMDIDF_REFRESH_PAGEACTION_INVALID_CERT = OLECMDID_REFRESHFLAG.PAGEACTION_INVALID_CERT;
pub const OLECMDIDF_REFRESH_PAGEACTION_ALLOW_VERSION = OLECMDID_REFRESHFLAG.PAGEACTION_ALLOW_VERSION;

pub const OLECMDID_PAGEACTIONFLAG = enum(i32) {
    FILEDOWNLOAD = 1,
    ACTIVEXINSTALL = 2,
    ACTIVEXTRUSTFAIL = 4,
    ACTIVEXUSERDISABLE = 8,
    ACTIVEXDISALLOW = 16,
    ACTIVEXUNSAFE = 32,
    POPUPWINDOW = 64,
    LOCALMACHINE = 128,
    MIMETEXTPLAIN = 256,
    SCRIPTNAVIGATE = 512,
    // SCRIPTNAVIGATE_ACTIVEXINSTALL = 512, this enum value conflicts with SCRIPTNAVIGATE
    PROTLOCKDOWNLOCALMACHINE = 1024,
    PROTLOCKDOWNTRUSTED = 2048,
    PROTLOCKDOWNINTRANET = 4096,
    PROTLOCKDOWNINTERNET = 8192,
    PROTLOCKDOWNRESTRICTED = 16384,
    PROTLOCKDOWNDENY = 32768,
    POPUPALLOWED = 65536,
    SCRIPTPROMPT = 131072,
    ACTIVEXUSERAPPROVAL = 262144,
    MIXEDCONTENT = 524288,
    INVALID_CERT = 1048576,
    INTRANETZONEREQUEST = 2097152,
    XSSFILTERED = 4194304,
    SPOOFABLEIDNHOST = 8388608,
    ACTIVEX_EPM_INCOMPATIBLE = 16777216,
    SCRIPTNAVIGATE_ACTIVEXUSERAPPROVAL = 33554432,
    WPCBLOCKED = 67108864,
    WPCBLOCKED_ACTIVEX = 134217728,
    EXTENSION_COMPAT_BLOCKED = 268435456,
    NORESETACTIVEX = 536870912,
    GENERIC_STATE = 1073741824,
    RESET = -2147483648,
};
pub const OLECMDIDF_PAGEACTION_FILEDOWNLOAD = OLECMDID_PAGEACTIONFLAG.FILEDOWNLOAD;
pub const OLECMDIDF_PAGEACTION_ACTIVEXINSTALL = OLECMDID_PAGEACTIONFLAG.ACTIVEXINSTALL;
pub const OLECMDIDF_PAGEACTION_ACTIVEXTRUSTFAIL = OLECMDID_PAGEACTIONFLAG.ACTIVEXTRUSTFAIL;
pub const OLECMDIDF_PAGEACTION_ACTIVEXUSERDISABLE = OLECMDID_PAGEACTIONFLAG.ACTIVEXUSERDISABLE;
pub const OLECMDIDF_PAGEACTION_ACTIVEXDISALLOW = OLECMDID_PAGEACTIONFLAG.ACTIVEXDISALLOW;
pub const OLECMDIDF_PAGEACTION_ACTIVEXUNSAFE = OLECMDID_PAGEACTIONFLAG.ACTIVEXUNSAFE;
pub const OLECMDIDF_PAGEACTION_POPUPWINDOW = OLECMDID_PAGEACTIONFLAG.POPUPWINDOW;
pub const OLECMDIDF_PAGEACTION_LOCALMACHINE = OLECMDID_PAGEACTIONFLAG.LOCALMACHINE;
pub const OLECMDIDF_PAGEACTION_MIMETEXTPLAIN = OLECMDID_PAGEACTIONFLAG.MIMETEXTPLAIN;
pub const OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE = OLECMDID_PAGEACTIONFLAG.SCRIPTNAVIGATE;
pub const OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXINSTALL = OLECMDID_PAGEACTIONFLAG.SCRIPTNAVIGATE;
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNLOCALMACHINE = OLECMDID_PAGEACTIONFLAG.PROTLOCKDOWNLOCALMACHINE;
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNTRUSTED = OLECMDID_PAGEACTIONFLAG.PROTLOCKDOWNTRUSTED;
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTRANET = OLECMDID_PAGEACTIONFLAG.PROTLOCKDOWNINTRANET;
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTERNET = OLECMDID_PAGEACTIONFLAG.PROTLOCKDOWNINTERNET;
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNRESTRICTED = OLECMDID_PAGEACTIONFLAG.PROTLOCKDOWNRESTRICTED;
pub const OLECMDIDF_PAGEACTION_PROTLOCKDOWNDENY = OLECMDID_PAGEACTIONFLAG.PROTLOCKDOWNDENY;
pub const OLECMDIDF_PAGEACTION_POPUPALLOWED = OLECMDID_PAGEACTIONFLAG.POPUPALLOWED;
pub const OLECMDIDF_PAGEACTION_SCRIPTPROMPT = OLECMDID_PAGEACTIONFLAG.SCRIPTPROMPT;
pub const OLECMDIDF_PAGEACTION_ACTIVEXUSERAPPROVAL = OLECMDID_PAGEACTIONFLAG.ACTIVEXUSERAPPROVAL;
pub const OLECMDIDF_PAGEACTION_MIXEDCONTENT = OLECMDID_PAGEACTIONFLAG.MIXEDCONTENT;
pub const OLECMDIDF_PAGEACTION_INVALID_CERT = OLECMDID_PAGEACTIONFLAG.INVALID_CERT;
pub const OLECMDIDF_PAGEACTION_INTRANETZONEREQUEST = OLECMDID_PAGEACTIONFLAG.INTRANETZONEREQUEST;
pub const OLECMDIDF_PAGEACTION_XSSFILTERED = OLECMDID_PAGEACTIONFLAG.XSSFILTERED;
pub const OLECMDIDF_PAGEACTION_SPOOFABLEIDNHOST = OLECMDID_PAGEACTIONFLAG.SPOOFABLEIDNHOST;
pub const OLECMDIDF_PAGEACTION_ACTIVEX_EPM_INCOMPATIBLE = OLECMDID_PAGEACTIONFLAG.ACTIVEX_EPM_INCOMPATIBLE;
pub const OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXUSERAPPROVAL = OLECMDID_PAGEACTIONFLAG.SCRIPTNAVIGATE_ACTIVEXUSERAPPROVAL;
pub const OLECMDIDF_PAGEACTION_WPCBLOCKED = OLECMDID_PAGEACTIONFLAG.WPCBLOCKED;
pub const OLECMDIDF_PAGEACTION_WPCBLOCKED_ACTIVEX = OLECMDID_PAGEACTIONFLAG.WPCBLOCKED_ACTIVEX;
pub const OLECMDIDF_PAGEACTION_EXTENSION_COMPAT_BLOCKED = OLECMDID_PAGEACTIONFLAG.EXTENSION_COMPAT_BLOCKED;
pub const OLECMDIDF_PAGEACTION_NORESETACTIVEX = OLECMDID_PAGEACTIONFLAG.NORESETACTIVEX;
pub const OLECMDIDF_PAGEACTION_GENERIC_STATE = OLECMDID_PAGEACTIONFLAG.GENERIC_STATE;
pub const OLECMDIDF_PAGEACTION_RESET = OLECMDID_PAGEACTIONFLAG.RESET;

pub const OLECMDID_BROWSERSTATEFLAG = enum(i32) {
    EXTENSIONSOFF = 1,
    IESECURITY = 2,
    PROTECTEDMODE_OFF = 4,
    RESET = 8,
    REQUIRESACTIVEX = 16,
    DESKTOPHTMLDIALOG = 32,
    BLOCKEDVERSION = 64,
};
pub const OLECMDIDF_BROWSERSTATE_EXTENSIONSOFF = OLECMDID_BROWSERSTATEFLAG.EXTENSIONSOFF;
pub const OLECMDIDF_BROWSERSTATE_IESECURITY = OLECMDID_BROWSERSTATEFLAG.IESECURITY;
pub const OLECMDIDF_BROWSERSTATE_PROTECTEDMODE_OFF = OLECMDID_BROWSERSTATEFLAG.PROTECTEDMODE_OFF;
pub const OLECMDIDF_BROWSERSTATE_RESET = OLECMDID_BROWSERSTATEFLAG.RESET;
pub const OLECMDIDF_BROWSERSTATE_REQUIRESACTIVEX = OLECMDID_BROWSERSTATEFLAG.REQUIRESACTIVEX;
pub const OLECMDIDF_BROWSERSTATE_DESKTOPHTMLDIALOG = OLECMDID_BROWSERSTATEFLAG.DESKTOPHTMLDIALOG;
pub const OLECMDIDF_BROWSERSTATE_BLOCKEDVERSION = OLECMDID_BROWSERSTATEFLAG.BLOCKEDVERSION;

pub const OLECMDID_OPTICAL_ZOOMFLAG = enum(i32) {
    NOPERSIST = 1,
    NOLAYOUT = 16,
    NOTRANSIENT = 32,
    RELOADFORNEWTAB = 64,
};
pub const OLECMDIDF_OPTICAL_ZOOM_NOPERSIST = OLECMDID_OPTICAL_ZOOMFLAG.NOPERSIST;
pub const OLECMDIDF_OPTICAL_ZOOM_NOLAYOUT = OLECMDID_OPTICAL_ZOOMFLAG.NOLAYOUT;
pub const OLECMDIDF_OPTICAL_ZOOM_NOTRANSIENT = OLECMDID_OPTICAL_ZOOMFLAG.NOTRANSIENT;
pub const OLECMDIDF_OPTICAL_ZOOM_RELOADFORNEWTAB = OLECMDID_OPTICAL_ZOOMFLAG.RELOADFORNEWTAB;

pub const PAGEACTION_UI = enum(i32) {
    DEFAULT = 0,
    MODAL = 1,
    MODELESS = 2,
    SILENT = 3,
};
pub const PAGEACTION_UI_DEFAULT = PAGEACTION_UI.DEFAULT;
pub const PAGEACTION_UI_MODAL = PAGEACTION_UI.MODAL;
pub const PAGEACTION_UI_MODELESS = PAGEACTION_UI.MODELESS;
pub const PAGEACTION_UI_SILENT = PAGEACTION_UI.SILENT;

pub const OLECMDID_WINDOWSTATE_FLAG = enum(i32) {
    USERVISIBLE = 1,
    ENABLED = 2,
    USERVISIBLE_VALID = 65536,
    ENABLED_VALID = 131072,
};
pub const OLECMDIDF_WINDOWSTATE_USERVISIBLE = OLECMDID_WINDOWSTATE_FLAG.USERVISIBLE;
pub const OLECMDIDF_WINDOWSTATE_ENABLED = OLECMDID_WINDOWSTATE_FLAG.ENABLED;
pub const OLECMDIDF_WINDOWSTATE_USERVISIBLE_VALID = OLECMDID_WINDOWSTATE_FLAG.USERVISIBLE_VALID;
pub const OLECMDIDF_WINDOWSTATE_ENABLED_VALID = OLECMDID_WINDOWSTATE_FLAG.ENABLED_VALID;

pub const OLECMDID_VIEWPORT_MODE_FLAG = enum(i32) {
    FIXED_LAYOUT_WIDTH = 1,
    EXCLUDE_VISUAL_BOTTOM = 2,
    FIXED_LAYOUT_WIDTH_VALID = 65536,
    EXCLUDE_VISUAL_BOTTOM_VALID = 131072,
};
pub const OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH = OLECMDID_VIEWPORT_MODE_FLAG.FIXED_LAYOUT_WIDTH;
pub const OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM = OLECMDID_VIEWPORT_MODE_FLAG.EXCLUDE_VISUAL_BOTTOM;
pub const OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH_VALID = OLECMDID_VIEWPORT_MODE_FLAG.FIXED_LAYOUT_WIDTH_VALID;
pub const OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM_VALID = OLECMDID_VIEWPORT_MODE_FLAG.EXCLUDE_VISUAL_BOTTOM_VALID;

const IID_IZoomEvents_Value = Guid.initString("41b68150-904c-4e17-a0ba-a438182e359d");
pub const IID_IZoomEvents = &IID_IZoomEvents_Value;
pub const IZoomEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnZoomPercentChanged: *const fn (
            self: *const IZoomEvents,
            ul_zoom_percent: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onZoomPercentChanged(self: *const T, ul_zoom_percent_: u32) HRESULT {
                return @as(*const IZoomEvents.VTable, @ptrCast(self.vtable)).OnZoomPercentChanged(@as(*const IZoomEvents, @ptrCast(self)), ul_zoom_percent_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IProtectFocus_Value = Guid.initString("d81f90a3-8156-44f7-ad28-5abb87003274");
pub const IID_IProtectFocus = &IID_IProtectFocus_Value;
pub const IProtectFocus = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllowFocusChange: *const fn (
            self: *const IProtectFocus,
            pf_allow: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn allowFocusChange(self: *const T, pf_allow_: ?*BOOL) HRESULT {
                return @as(*const IProtectFocus.VTable, @ptrCast(self.vtable)).AllowFocusChange(@as(*const IProtectFocus, @ptrCast(self)), pf_allow_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IProtectedModeMenuServices_Value = Guid.initString("73c105ee-9dff-4a07-b83c-7eff290c266e");
pub const IID_IProtectedModeMenuServices = &IID_IProtectedModeMenuServices_Value;
pub const IProtectedModeMenuServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateMenu: *const fn (
            self: *const IProtectedModeMenuServices,
            ph_menu: ?*?HMENU,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadMenu: *const fn (
            self: *const IProtectedModeMenuServices,
            psz_module_name: ?[*:0]const u16,
            psz_menu_name: ?[*:0]const u16,
            ph_menu: ?*?HMENU,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadMenuID: *const fn (
            self: *const IProtectedModeMenuServices,
            psz_module_name: ?[*:0]const u16,
            w_resource_i_d: u16,
            ph_menu: ?*?HMENU,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createMenu(self: *const T, ph_menu_: ?*?HMENU) HRESULT {
                return @as(*const IProtectedModeMenuServices.VTable, @ptrCast(self.vtable)).CreateMenu(@as(*const IProtectedModeMenuServices, @ptrCast(self)), ph_menu_);
            }
            pub inline fn loadMenu(self: *const T, psz_module_name_: ?[*:0]const u16, psz_menu_name_: ?[*:0]const u16, ph_menu_: ?*?HMENU) HRESULT {
                return @as(*const IProtectedModeMenuServices.VTable, @ptrCast(self.vtable)).LoadMenu(@as(*const IProtectedModeMenuServices, @ptrCast(self)), psz_module_name_, psz_menu_name_, ph_menu_);
            }
            pub inline fn loadMenuID(self: *const T, psz_module_name_: ?[*:0]const u16, w_resource_i_d_: u16, ph_menu_: ?*?HMENU) HRESULT {
                return @as(*const IProtectedModeMenuServices.VTable, @ptrCast(self.vtable)).LoadMenuID(@as(*const IProtectedModeMenuServices, @ptrCast(self)), psz_module_name_, w_resource_i_d_, ph_menu_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const LPFNOLEUIHOOK = *const fn (
    param0: ?HWND,
    param1: u32,
    param2: WPARAM,
    param3: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const OLEUIINSERTOBJECTW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u16,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u16,
    hResource: ?HRSRC,
    clsid: Guid,
    lpszFile: ?PWSTR,
    cchFile: u32,
    cClsidExclude: u32,
    lpClsidExclude: ?*Guid,
    iid: Guid,
    oleRender: u32,
    lpFormatEtc: ?*FORMATETC,
    lpIOleClientSite: ?*IOleClientSite,
    lpIStorage: ?*IStorage,
    ppvObj: ?*?*anyopaque,
    sc: i32,
    hMetaPict: isize,
};

pub const OLEUIINSERTOBJECTA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u8,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u8,
    hResource: ?HRSRC,
    clsid: Guid,
    lpszFile: ?PSTR,
    cchFile: u32,
    cClsidExclude: u32,
    lpClsidExclude: ?*Guid,
    iid: Guid,
    oleRender: u32,
    lpFormatEtc: ?*FORMATETC,
    lpIOleClientSite: ?*IOleClientSite,
    lpIStorage: ?*IStorage,
    ppvObj: ?*?*anyopaque,
    sc: i32,
    hMetaPict: isize,
};

pub const OLEUIPASTEFLAG = enum(i32) {
    ENABLEICON = 2048,
    PASTEONLY = 0,
    PASTE = 512,
    LINKANYTYPE = 1024,
    LINKTYPE1 = 1,
    LINKTYPE2 = 2,
    LINKTYPE3 = 4,
    LINKTYPE4 = 8,
    LINKTYPE5 = 16,
    LINKTYPE6 = 32,
    LINKTYPE7 = 64,
    LINKTYPE8 = 128,
};
pub const OLEUIPASTE_ENABLEICON = OLEUIPASTEFLAG.ENABLEICON;
pub const OLEUIPASTE_PASTEONLY = OLEUIPASTEFLAG.PASTEONLY;
pub const OLEUIPASTE_PASTE = OLEUIPASTEFLAG.PASTE;
pub const OLEUIPASTE_LINKANYTYPE = OLEUIPASTEFLAG.LINKANYTYPE;
pub const OLEUIPASTE_LINKTYPE1 = OLEUIPASTEFLAG.LINKTYPE1;
pub const OLEUIPASTE_LINKTYPE2 = OLEUIPASTEFLAG.LINKTYPE2;
pub const OLEUIPASTE_LINKTYPE3 = OLEUIPASTEFLAG.LINKTYPE3;
pub const OLEUIPASTE_LINKTYPE4 = OLEUIPASTEFLAG.LINKTYPE4;
pub const OLEUIPASTE_LINKTYPE5 = OLEUIPASTEFLAG.LINKTYPE5;
pub const OLEUIPASTE_LINKTYPE6 = OLEUIPASTEFLAG.LINKTYPE6;
pub const OLEUIPASTE_LINKTYPE7 = OLEUIPASTEFLAG.LINKTYPE7;
pub const OLEUIPASTE_LINKTYPE8 = OLEUIPASTEFLAG.LINKTYPE8;

pub const OLEUIPASTEENTRYW = extern struct {
    fmtetc: FORMATETC,
    lpstrFormatName: ?[*:0]const u16,
    lpstrResultText: ?[*:0]const u16,
    dwFlags: u32,
    dwScratchSpace: u32,
};

pub const OLEUIPASTEENTRYA = extern struct {
    fmtetc: FORMATETC,
    lpstrFormatName: ?[*:0]const u8,
    lpstrResultText: ?[*:0]const u8,
    dwFlags: u32,
    dwScratchSpace: u32,
};

pub const OLEUIPASTESPECIALW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u16,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u16,
    hResource: ?HRSRC,
    lpSrcDataObj: ?*IDataObject,
    arrPasteEntries: ?*OLEUIPASTEENTRYW,
    cPasteEntries: i32,
    arrLinkTypes: ?*u32,
    cLinkTypes: i32,
    cClsidExclude: u32,
    lpClsidExclude: ?*Guid,
    nSelectedIndex: i32,
    fLink: BOOL,
    hMetaPict: isize,
    sizel: SIZE,
};

pub const OLEUIPASTESPECIALA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u8,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u8,
    hResource: ?HRSRC,
    lpSrcDataObj: ?*IDataObject,
    arrPasteEntries: ?*OLEUIPASTEENTRYA,
    cPasteEntries: i32,
    arrLinkTypes: ?*u32,
    cLinkTypes: i32,
    cClsidExclude: u32,
    lpClsidExclude: ?*Guid,
    nSelectedIndex: i32,
    fLink: BOOL,
    hMetaPict: isize,
    sizel: SIZE,
};

// TODO: this type is limited to platform 'windows5.0'
pub const IOleUILinkContainerW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNextLink: *const fn (
            self: *const IOleUILinkContainerW,
            dw_link: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        SetLinkUpdateOptions: *const fn (
            self: *const IOleUILinkContainerW,
            dw_link: u32,
            dw_update_opt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkUpdateOptions: *const fn (
            self: *const IOleUILinkContainerW,
            dw_link: u32,
            lpdw_update_opt: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLinkSource: *const fn (
            self: *const IOleUILinkContainerW,
            dw_link: u32,
            lpsz_display_name: ?PWSTR,
            len_file_name: u32,
            pch_eaten: ?*u32,
            f_validate_source: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkSource: *const fn (
            self: *const IOleUILinkContainerW,
            dw_link: u32,
            lplpsz_display_name: ?*?PWSTR,
            lplen_file_name: ?*u32,
            lplpsz_full_link_type: ?*?PWSTR,
            lplpsz_short_link_type: ?*?PWSTR,
            lpf_source_available: ?*BOOL,
            lpf_is_selected: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenLinkSource: *const fn (
            self: *const IOleUILinkContainerW,
            dw_link: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateLink: *const fn (
            self: *const IOleUILinkContainerW,
            dw_link: u32,
            f_error_message: BOOL,
            f_reserved: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelLink: *const fn (
            self: *const IOleUILinkContainerW,
            dw_link: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNextLink(self: *const T, dw_link_: u32) u32 {
                return @as(*const IOleUILinkContainerW.VTable, @ptrCast(self.vtable)).GetNextLink(@as(*const IOleUILinkContainerW, @ptrCast(self)), dw_link_);
            }
            pub inline fn setLinkUpdateOptions(self: *const T, dw_link_: u32, dw_update_opt_: u32) HRESULT {
                return @as(*const IOleUILinkContainerW.VTable, @ptrCast(self.vtable)).SetLinkUpdateOptions(@as(*const IOleUILinkContainerW, @ptrCast(self)), dw_link_, dw_update_opt_);
            }
            pub inline fn getLinkUpdateOptions(self: *const T, dw_link_: u32, lpdw_update_opt_: ?*u32) HRESULT {
                return @as(*const IOleUILinkContainerW.VTable, @ptrCast(self.vtable)).GetLinkUpdateOptions(@as(*const IOleUILinkContainerW, @ptrCast(self)), dw_link_, lpdw_update_opt_);
            }
            pub inline fn setLinkSource(self: *const T, dw_link_: u32, lpsz_display_name_: ?PWSTR, len_file_name_: u32, pch_eaten_: ?*u32, f_validate_source_: BOOL) HRESULT {
                return @as(*const IOleUILinkContainerW.VTable, @ptrCast(self.vtable)).SetLinkSource(@as(*const IOleUILinkContainerW, @ptrCast(self)), dw_link_, lpsz_display_name_, len_file_name_, pch_eaten_, f_validate_source_);
            }
            pub inline fn getLinkSource(self: *const T, dw_link_: u32, lplpsz_display_name_: ?*?PWSTR, lplen_file_name_: ?*u32, lplpsz_full_link_type_: ?*?PWSTR, lplpsz_short_link_type_: ?*?PWSTR, lpf_source_available_: ?*BOOL, lpf_is_selected_: ?*BOOL) HRESULT {
                return @as(*const IOleUILinkContainerW.VTable, @ptrCast(self.vtable)).GetLinkSource(@as(*const IOleUILinkContainerW, @ptrCast(self)), dw_link_, lplpsz_display_name_, lplen_file_name_, lplpsz_full_link_type_, lplpsz_short_link_type_, lpf_source_available_, lpf_is_selected_);
            }
            pub inline fn openLinkSource(self: *const T, dw_link_: u32) HRESULT {
                return @as(*const IOleUILinkContainerW.VTable, @ptrCast(self.vtable)).OpenLinkSource(@as(*const IOleUILinkContainerW, @ptrCast(self)), dw_link_);
            }
            pub inline fn updateLink(self: *const T, dw_link_: u32, f_error_message_: BOOL, f_reserved_: BOOL) HRESULT {
                return @as(*const IOleUILinkContainerW.VTable, @ptrCast(self.vtable)).UpdateLink(@as(*const IOleUILinkContainerW, @ptrCast(self)), dw_link_, f_error_message_, f_reserved_);
            }
            pub inline fn cancelLink(self: *const T, dw_link_: u32) HRESULT {
                return @as(*const IOleUILinkContainerW.VTable, @ptrCast(self.vtable)).CancelLink(@as(*const IOleUILinkContainerW, @ptrCast(self)), dw_link_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
pub const IOleUILinkContainerA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNextLink: *const fn (
            self: *const IOleUILinkContainerA,
            dw_link: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        SetLinkUpdateOptions: *const fn (
            self: *const IOleUILinkContainerA,
            dw_link: u32,
            dw_update_opt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkUpdateOptions: *const fn (
            self: *const IOleUILinkContainerA,
            dw_link: u32,
            lpdw_update_opt: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLinkSource: *const fn (
            self: *const IOleUILinkContainerA,
            dw_link: u32,
            lpsz_display_name: ?PSTR,
            len_file_name: u32,
            pch_eaten: ?*u32,
            f_validate_source: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkSource: *const fn (
            self: *const IOleUILinkContainerA,
            dw_link: u32,
            lplpsz_display_name: ?*?PSTR,
            lplen_file_name: ?*u32,
            lplpsz_full_link_type: ?*?PSTR,
            lplpsz_short_link_type: ?*?PSTR,
            lpf_source_available: ?*BOOL,
            lpf_is_selected: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenLinkSource: *const fn (
            self: *const IOleUILinkContainerA,
            dw_link: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateLink: *const fn (
            self: *const IOleUILinkContainerA,
            dw_link: u32,
            f_error_message: BOOL,
            f_reserved: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelLink: *const fn (
            self: *const IOleUILinkContainerA,
            dw_link: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNextLink(self: *const T, dw_link_: u32) u32 {
                return @as(*const IOleUILinkContainerA.VTable, @ptrCast(self.vtable)).GetNextLink(@as(*const IOleUILinkContainerA, @ptrCast(self)), dw_link_);
            }
            pub inline fn setLinkUpdateOptions(self: *const T, dw_link_: u32, dw_update_opt_: u32) HRESULT {
                return @as(*const IOleUILinkContainerA.VTable, @ptrCast(self.vtable)).SetLinkUpdateOptions(@as(*const IOleUILinkContainerA, @ptrCast(self)), dw_link_, dw_update_opt_);
            }
            pub inline fn getLinkUpdateOptions(self: *const T, dw_link_: u32, lpdw_update_opt_: ?*u32) HRESULT {
                return @as(*const IOleUILinkContainerA.VTable, @ptrCast(self.vtable)).GetLinkUpdateOptions(@as(*const IOleUILinkContainerA, @ptrCast(self)), dw_link_, lpdw_update_opt_);
            }
            pub inline fn setLinkSource(self: *const T, dw_link_: u32, lpsz_display_name_: ?PSTR, len_file_name_: u32, pch_eaten_: ?*u32, f_validate_source_: BOOL) HRESULT {
                return @as(*const IOleUILinkContainerA.VTable, @ptrCast(self.vtable)).SetLinkSource(@as(*const IOleUILinkContainerA, @ptrCast(self)), dw_link_, lpsz_display_name_, len_file_name_, pch_eaten_, f_validate_source_);
            }
            pub inline fn getLinkSource(self: *const T, dw_link_: u32, lplpsz_display_name_: ?*?PSTR, lplen_file_name_: ?*u32, lplpsz_full_link_type_: ?*?PSTR, lplpsz_short_link_type_: ?*?PSTR, lpf_source_available_: ?*BOOL, lpf_is_selected_: ?*BOOL) HRESULT {
                return @as(*const IOleUILinkContainerA.VTable, @ptrCast(self.vtable)).GetLinkSource(@as(*const IOleUILinkContainerA, @ptrCast(self)), dw_link_, lplpsz_display_name_, lplen_file_name_, lplpsz_full_link_type_, lplpsz_short_link_type_, lpf_source_available_, lpf_is_selected_);
            }
            pub inline fn openLinkSource(self: *const T, dw_link_: u32) HRESULT {
                return @as(*const IOleUILinkContainerA.VTable, @ptrCast(self.vtable)).OpenLinkSource(@as(*const IOleUILinkContainerA, @ptrCast(self)), dw_link_);
            }
            pub inline fn updateLink(self: *const T, dw_link_: u32, f_error_message_: BOOL, f_reserved_: BOOL) HRESULT {
                return @as(*const IOleUILinkContainerA.VTable, @ptrCast(self.vtable)).UpdateLink(@as(*const IOleUILinkContainerA, @ptrCast(self)), dw_link_, f_error_message_, f_reserved_);
            }
            pub inline fn cancelLink(self: *const T, dw_link_: u32) HRESULT {
                return @as(*const IOleUILinkContainerA.VTable, @ptrCast(self.vtable)).CancelLink(@as(*const IOleUILinkContainerA, @ptrCast(self)), dw_link_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OLEUIEDITLINKSW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u16,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u16,
    hResource: ?HRSRC,
    lpOleUILinkContainer: ?*IOleUILinkContainerW,
};

pub const OLEUIEDITLINKSA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u8,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u8,
    hResource: ?HRSRC,
    lpOleUILinkContainer: ?*IOleUILinkContainerA,
};

pub const OLEUICHANGEICONW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u16,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u16,
    hResource: ?HRSRC,
    hMetaPict: isize,
    clsid: Guid,
    szIconExe: [260]u16,
    cchIconExe: i32,
};

pub const OLEUICHANGEICONA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u8,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u8,
    hResource: ?HRSRC,
    hMetaPict: isize,
    clsid: Guid,
    szIconExe: [260]CHAR,
    cchIconExe: i32,
};

pub const OLEUICONVERTW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u16,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u16,
    hResource: ?HRSRC,
    clsid: Guid,
    clsidConvertDefault: Guid,
    clsidActivateDefault: Guid,
    clsidNew: Guid,
    dvAspect: u32,
    wFormat: u16,
    fIsLinkedObject: BOOL,
    hMetaPict: isize,
    lpszUserType: ?PWSTR,
    fObjectsIconChanged: BOOL,
    lpszDefLabel: ?PWSTR,
    cClsidExclude: u32,
    lpClsidExclude: ?*Guid,
};

pub const OLEUICONVERTA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u8,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u8,
    hResource: ?HRSRC,
    clsid: Guid,
    clsidConvertDefault: Guid,
    clsidActivateDefault: Guid,
    clsidNew: Guid,
    dvAspect: u32,
    wFormat: u16,
    fIsLinkedObject: BOOL,
    hMetaPict: isize,
    lpszUserType: ?PSTR,
    fObjectsIconChanged: BOOL,
    lpszDefLabel: ?PSTR,
    cClsidExclude: u32,
    lpClsidExclude: ?*Guid,
};

pub const OLEUIBUSYW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u16,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u16,
    hResource: ?HRSRC,
    hTask: ?HTASK,
    lphWndDialog: ?*?HWND,
};

pub const OLEUIBUSYA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u8,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u8,
    hResource: ?HRSRC,
    hTask: ?HTASK,
    lphWndDialog: ?*?HWND,
};

pub const OLEUICHANGESOURCEW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u16,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u16,
    hResource: ?HRSRC,
    lpOFN: ?*OPENFILENAMEW,
    dwReserved1: [4]u32,
    lpOleUILinkContainer: ?*IOleUILinkContainerW,
    dwLink: u32,
    lpszDisplayName: ?PWSTR,
    nFileLength: u32,
    lpszFrom: ?PWSTR,
    lpszTo: ?PWSTR,
};

pub const OLEUICHANGESOURCEA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hWndOwner: ?HWND,
    lpszCaption: ?[*:0]const u8,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    hInstance: ?HINSTANCE,
    lpszTemplate: ?[*:0]const u8,
    hResource: ?HRSRC,
    lpOFN: ?*OPENFILENAMEA,
    dwReserved1: [4]u32,
    lpOleUILinkContainer: ?*IOleUILinkContainerA,
    dwLink: u32,
    lpszDisplayName: ?PSTR,
    nFileLength: u32,
    lpszFrom: ?PSTR,
    lpszTo: ?PSTR,
};

// TODO: this type is limited to platform 'windows5.0'
pub const IOleUIObjInfoW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetObjectInfo: *const fn (
            self: *const IOleUIObjInfoW,
            dw_object: u32,
            lpdw_obj_size: ?*u32,
            lplpsz_label: ?*?PWSTR,
            lplpsz_type: ?*?PWSTR,
            lplpsz_short_type: ?*?PWSTR,
            lplpsz_location: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConvertInfo: *const fn (
            self: *const IOleUIObjInfoW,
            dw_object: u32,
            lp_class_i_d: ?*Guid,
            lpw_format: ?*u16,
            lp_convert_default_class_i_d: ?*Guid,
            lplp_clsid_exclude: ?*?*Guid,
            lpc_clsid_exclude: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertObject: *const fn (
            self: *const IOleUIObjInfoW,
            dw_object: u32,
            clsid_new: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewInfo: *const fn (
            self: *const IOleUIObjInfoW,
            dw_object: u32,
            ph_meta_pict: ?*isize,
            pdv_aspect: ?*u32,
            pn_current_scale: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewInfo: *const fn (
            self: *const IOleUIObjInfoW,
            dw_object: u32,
            h_meta_pict: isize,
            dv_aspect: u32,
            n_current_scale: i32,
            b_relative_to_orig: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getObjectInfo(self: *const T, dw_object_: u32, lpdw_obj_size_: ?*u32, lplpsz_label_: ?*?PWSTR, lplpsz_type_: ?*?PWSTR, lplpsz_short_type_: ?*?PWSTR, lplpsz_location_: ?*?PWSTR) HRESULT {
                return @as(*const IOleUIObjInfoW.VTable, @ptrCast(self.vtable)).GetObjectInfo(@as(*const IOleUIObjInfoW, @ptrCast(self)), dw_object_, lpdw_obj_size_, lplpsz_label_, lplpsz_type_, lplpsz_short_type_, lplpsz_location_);
            }
            pub inline fn getConvertInfo(self: *const T, dw_object_: u32, lp_class_i_d_: ?*Guid, lpw_format_: ?*u16, lp_convert_default_class_i_d_: ?*Guid, lplp_clsid_exclude_: ?*?*Guid, lpc_clsid_exclude_: ?*u32) HRESULT {
                return @as(*const IOleUIObjInfoW.VTable, @ptrCast(self.vtable)).GetConvertInfo(@as(*const IOleUIObjInfoW, @ptrCast(self)), dw_object_, lp_class_i_d_, lpw_format_, lp_convert_default_class_i_d_, lplp_clsid_exclude_, lpc_clsid_exclude_);
            }
            pub inline fn convertObject(self: *const T, dw_object_: u32, clsid_new_: ?*const Guid) HRESULT {
                return @as(*const IOleUIObjInfoW.VTable, @ptrCast(self.vtable)).ConvertObject(@as(*const IOleUIObjInfoW, @ptrCast(self)), dw_object_, clsid_new_);
            }
            pub inline fn getViewInfo(self: *const T, dw_object_: u32, ph_meta_pict_: ?*isize, pdv_aspect_: ?*u32, pn_current_scale_: ?*i32) HRESULT {
                return @as(*const IOleUIObjInfoW.VTable, @ptrCast(self.vtable)).GetViewInfo(@as(*const IOleUIObjInfoW, @ptrCast(self)), dw_object_, ph_meta_pict_, pdv_aspect_, pn_current_scale_);
            }
            pub inline fn setViewInfo(self: *const T, dw_object_: u32, h_meta_pict_: isize, dv_aspect_: u32, n_current_scale_: i32, b_relative_to_orig_: BOOL) HRESULT {
                return @as(*const IOleUIObjInfoW.VTable, @ptrCast(self.vtable)).SetViewInfo(@as(*const IOleUIObjInfoW, @ptrCast(self)), dw_object_, h_meta_pict_, dv_aspect_, n_current_scale_, b_relative_to_orig_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
pub const IOleUIObjInfoA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetObjectInfo: *const fn (
            self: *const IOleUIObjInfoA,
            dw_object: u32,
            lpdw_obj_size: ?*u32,
            lplpsz_label: ?*?PSTR,
            lplpsz_type: ?*?PSTR,
            lplpsz_short_type: ?*?PSTR,
            lplpsz_location: ?*?PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConvertInfo: *const fn (
            self: *const IOleUIObjInfoA,
            dw_object: u32,
            lp_class_i_d: ?*Guid,
            lpw_format: ?*u16,
            lp_convert_default_class_i_d: ?*Guid,
            lplp_clsid_exclude: ?*?*Guid,
            lpc_clsid_exclude: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertObject: *const fn (
            self: *const IOleUIObjInfoA,
            dw_object: u32,
            clsid_new: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewInfo: *const fn (
            self: *const IOleUIObjInfoA,
            dw_object: u32,
            ph_meta_pict: ?*isize,
            pdv_aspect: ?*u32,
            pn_current_scale: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewInfo: *const fn (
            self: *const IOleUIObjInfoA,
            dw_object: u32,
            h_meta_pict: isize,
            dv_aspect: u32,
            n_current_scale: i32,
            b_relative_to_orig: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getObjectInfo(self: *const T, dw_object_: u32, lpdw_obj_size_: ?*u32, lplpsz_label_: ?*?PSTR, lplpsz_type_: ?*?PSTR, lplpsz_short_type_: ?*?PSTR, lplpsz_location_: ?*?PSTR) HRESULT {
                return @as(*const IOleUIObjInfoA.VTable, @ptrCast(self.vtable)).GetObjectInfo(@as(*const IOleUIObjInfoA, @ptrCast(self)), dw_object_, lpdw_obj_size_, lplpsz_label_, lplpsz_type_, lplpsz_short_type_, lplpsz_location_);
            }
            pub inline fn getConvertInfo(self: *const T, dw_object_: u32, lp_class_i_d_: ?*Guid, lpw_format_: ?*u16, lp_convert_default_class_i_d_: ?*Guid, lplp_clsid_exclude_: ?*?*Guid, lpc_clsid_exclude_: ?*u32) HRESULT {
                return @as(*const IOleUIObjInfoA.VTable, @ptrCast(self.vtable)).GetConvertInfo(@as(*const IOleUIObjInfoA, @ptrCast(self)), dw_object_, lp_class_i_d_, lpw_format_, lp_convert_default_class_i_d_, lplp_clsid_exclude_, lpc_clsid_exclude_);
            }
            pub inline fn convertObject(self: *const T, dw_object_: u32, clsid_new_: ?*const Guid) HRESULT {
                return @as(*const IOleUIObjInfoA.VTable, @ptrCast(self.vtable)).ConvertObject(@as(*const IOleUIObjInfoA, @ptrCast(self)), dw_object_, clsid_new_);
            }
            pub inline fn getViewInfo(self: *const T, dw_object_: u32, ph_meta_pict_: ?*isize, pdv_aspect_: ?*u32, pn_current_scale_: ?*i32) HRESULT {
                return @as(*const IOleUIObjInfoA.VTable, @ptrCast(self.vtable)).GetViewInfo(@as(*const IOleUIObjInfoA, @ptrCast(self)), dw_object_, ph_meta_pict_, pdv_aspect_, pn_current_scale_);
            }
            pub inline fn setViewInfo(self: *const T, dw_object_: u32, h_meta_pict_: isize, dv_aspect_: u32, n_current_scale_: i32, b_relative_to_orig_: BOOL) HRESULT {
                return @as(*const IOleUIObjInfoA.VTable, @ptrCast(self.vtable)).SetViewInfo(@as(*const IOleUIObjInfoA, @ptrCast(self)), dw_object_, h_meta_pict_, dv_aspect_, n_current_scale_, b_relative_to_orig_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
pub const IOleUILinkInfoW = extern struct {
    pub const VTable = extern struct {
        base: IOleUILinkContainerW.VTable,
        GetLastUpdate: *const fn (
            self: *const IOleUILinkInfoW,
            dw_link: u32,
            lp_last_update: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleUILinkContainerW.MethodMixin(T);
            pub inline fn getLastUpdate(self: *const T, dw_link_: u32, lp_last_update_: ?*FILETIME) HRESULT {
                return @as(*const IOleUILinkInfoW.VTable, @ptrCast(self.vtable)).GetLastUpdate(@as(*const IOleUILinkInfoW, @ptrCast(self)), dw_link_, lp_last_update_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
pub const IOleUILinkInfoA = extern struct {
    pub const VTable = extern struct {
        base: IOleUILinkContainerA.VTable,
        GetLastUpdate: *const fn (
            self: *const IOleUILinkInfoA,
            dw_link: u32,
            lp_last_update: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleUILinkContainerA.MethodMixin(T);
            pub inline fn getLastUpdate(self: *const T, dw_link_: u32, lp_last_update_: ?*FILETIME) HRESULT {
                return @as(*const IOleUILinkInfoA.VTable, @ptrCast(self.vtable)).GetLastUpdate(@as(*const IOleUILinkInfoA, @ptrCast(self)), dw_link_, lp_last_update_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OLEUIGNRLPROPSW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    dwReserved1: [2]u32,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    dwReserved2: [3]u32,
    lpOP: ?*OLEUIOBJECTPROPSW,
};

pub const OLEUIGNRLPROPSA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    dwReserved1: [2]u32,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    dwReserved2: [3]u32,
    lpOP: ?*OLEUIOBJECTPROPSA,
};

pub const OLEUIVIEWPROPSW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    dwReserved1: [2]u32,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    dwReserved2: [3]u32,
    lpOP: ?*OLEUIOBJECTPROPSW,
    nScaleMin: i32,
    nScaleMax: i32,
};

pub const OLEUIVIEWPROPSA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    dwReserved1: [2]u32,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    dwReserved2: [3]u32,
    lpOP: ?*OLEUIOBJECTPROPSA,
    nScaleMin: i32,
    nScaleMax: i32,
};

pub const OLEUILINKPROPSW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    dwReserved1: [2]u32,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    dwReserved2: [3]u32,
    lpOP: ?*OLEUIOBJECTPROPSW,
};

pub const OLEUILINKPROPSA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    dwReserved1: [2]u32,
    lpfnHook: ?LPFNOLEUIHOOK,
    lCustData: LPARAM,
    dwReserved2: [3]u32,
    lpOP: ?*OLEUIOBJECTPROPSA,
};

pub const OLEUIOBJECTPROPSW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    lpPS: ?*PROPSHEETHEADERW_V2,
    dwObject: u32,
    lpObjInfo: ?*IOleUIObjInfoW,
    dwLink: u32,
    lpLinkInfo: ?*IOleUILinkInfoW,
    lpGP: ?*OLEUIGNRLPROPSW,
    lpVP: ?*OLEUIVIEWPROPSW,
    lpLP: ?*OLEUILINKPROPSW,
};

pub const OLEUIOBJECTPROPSA = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    lpPS: ?*PROPSHEETHEADERA_V2,
    dwObject: u32,
    lpObjInfo: ?*IOleUIObjInfoA,
    dwLink: u32,
    lpLinkInfo: ?*IOleUILinkInfoA,
    lpGP: ?*OLEUIGNRLPROPSA,
    lpVP: ?*OLEUIVIEWPROPSA,
    lpLP: ?*OLEUILINKPROPSA,
};

const IID_IDispatchEx_Value = Guid.initString("a6ef9860-c720-11d0-9337-00a0c90dcaa9");
pub const IID_IDispatchEx = &IID_IDispatchEx_Value;
pub const IDispatchEx = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetDispID: *const fn (
            self: *const IDispatchEx,
            bstr_name: ?BSTR,
            grfdex: u32,
            pid: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeEx: *const fn (
            self: *const IDispatchEx,
            id: i32,
            lcid: u32,
            w_flags: u16,
            pdp: ?*DISPPARAMS,
            pvar_res: ?*VARIANT,
            pei: ?*EXCEPINFO,
            psp_caller: ?*IServiceProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMemberByName: *const fn (
            self: *const IDispatchEx,
            bstr_name: ?BSTR,
            grfdex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMemberByDispID: *const fn (
            self: *const IDispatchEx,
            id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMemberProperties: *const fn (
            self: *const IDispatchEx,
            id: i32,
            grfdex_fetch: u32,
            pgrfdex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMemberName: *const fn (
            self: *const IDispatchEx,
            id: i32,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextDispID: *const fn (
            self: *const IDispatchEx,
            grfdex: u32,
            id: i32,
            pid: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameSpaceParent: *const fn (
            self: *const IDispatchEx,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDispID(self: *const T, bstr_name_: ?BSTR, grfdex_: u32, pid_: ?*i32) HRESULT {
                return @as(*const IDispatchEx.VTable, @ptrCast(self.vtable)).GetDispID(@as(*const IDispatchEx, @ptrCast(self)), bstr_name_, grfdex_, pid_);
            }
            pub inline fn invokeEx(self: *const T, id_: i32, lcid_: u32, w_flags_: u16, pdp_: ?*DISPPARAMS, pvar_res_: ?*VARIANT, pei_: ?*EXCEPINFO, psp_caller_: ?*IServiceProvider) HRESULT {
                return @as(*const IDispatchEx.VTable, @ptrCast(self.vtable)).InvokeEx(@as(*const IDispatchEx, @ptrCast(self)), id_, lcid_, w_flags_, pdp_, pvar_res_, pei_, psp_caller_);
            }
            pub inline fn deleteMemberByName(self: *const T, bstr_name_: ?BSTR, grfdex_: u32) HRESULT {
                return @as(*const IDispatchEx.VTable, @ptrCast(self.vtable)).DeleteMemberByName(@as(*const IDispatchEx, @ptrCast(self)), bstr_name_, grfdex_);
            }
            pub inline fn deleteMemberByDispID(self: *const T, id_: i32) HRESULT {
                return @as(*const IDispatchEx.VTable, @ptrCast(self.vtable)).DeleteMemberByDispID(@as(*const IDispatchEx, @ptrCast(self)), id_);
            }
            pub inline fn getMemberProperties(self: *const T, id_: i32, grfdex_fetch_: u32, pgrfdex_: ?*u32) HRESULT {
                return @as(*const IDispatchEx.VTable, @ptrCast(self.vtable)).GetMemberProperties(@as(*const IDispatchEx, @ptrCast(self)), id_, grfdex_fetch_, pgrfdex_);
            }
            pub inline fn getMemberName(self: *const T, id_: i32, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IDispatchEx.VTable, @ptrCast(self.vtable)).GetMemberName(@as(*const IDispatchEx, @ptrCast(self)), id_, pbstr_name_);
            }
            pub inline fn getNextDispID(self: *const T, grfdex_: u32, id_: i32, pid_: ?*i32) HRESULT {
                return @as(*const IDispatchEx.VTable, @ptrCast(self.vtable)).GetNextDispID(@as(*const IDispatchEx, @ptrCast(self)), grfdex_, id_, pid_);
            }
            pub inline fn getNameSpaceParent(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IDispatchEx.VTable, @ptrCast(self.vtable)).GetNameSpaceParent(@as(*const IDispatchEx, @ptrCast(self)), ppunk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDispError_Value = Guid.initString("a6ef9861-c720-11d0-9337-00a0c90dcaa9");
pub const IID_IDispError = &IID_IDispError_Value;
pub const IDispError = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryErrorInfo: *const fn (
            self: *const IDispError,
            guid_error_type: Guid,
            ppde: ?*?*IDispError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNext: *const fn (
            self: *const IDispError,
            ppde: ?*?*IDispError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHresult: *const fn (
            self: *const IDispError,
            phr: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSource: *const fn (
            self: *const IDispError,
            pbstr_source: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHelpInfo: *const fn (
            self: *const IDispError,
            pbstr_file_name: ?*?BSTR,
            pdw_context: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const IDispError,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryErrorInfo(self: *const T, guid_error_type_: Guid, ppde_: ?*?*IDispError) HRESULT {
                return @as(*const IDispError.VTable, @ptrCast(self.vtable)).QueryErrorInfo(@as(*const IDispError, @ptrCast(self)), guid_error_type_, ppde_);
            }
            pub inline fn getNext(self: *const T, ppde_: ?*?*IDispError) HRESULT {
                return @as(*const IDispError.VTable, @ptrCast(self.vtable)).GetNext(@as(*const IDispError, @ptrCast(self)), ppde_);
            }
            pub inline fn getHresult(self: *const T, phr_: ?*HRESULT) HRESULT {
                return @as(*const IDispError.VTable, @ptrCast(self.vtable)).GetHresult(@as(*const IDispError, @ptrCast(self)), phr_);
            }
            pub inline fn getSource(self: *const T, pbstr_source_: ?*?BSTR) HRESULT {
                return @as(*const IDispError.VTable, @ptrCast(self.vtable)).GetSource(@as(*const IDispError, @ptrCast(self)), pbstr_source_);
            }
            pub inline fn getHelpInfo(self: *const T, pbstr_file_name_: ?*?BSTR, pdw_context_: ?*u32) HRESULT {
                return @as(*const IDispError.VTable, @ptrCast(self.vtable)).GetHelpInfo(@as(*const IDispError, @ptrCast(self)), pbstr_file_name_, pdw_context_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IDispError.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const IDispError, @ptrCast(self)), pbstr_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVariantChangeType_Value = Guid.initString("a6ef9862-c720-11d0-9337-00a0c90dcaa9");
pub const IID_IVariantChangeType = &IID_IVariantChangeType_Value;
pub const IVariantChangeType = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ChangeType: *const fn (
            self: *const IVariantChangeType,
            pvar_dst: ?*VARIANT,
            pvar_src: ?*VARIANT,
            lcid: u32,
            vt_new: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn changeType(self: *const T, pvar_dst_: ?*VARIANT, pvar_src_: ?*VARIANT, lcid_: u32, vt_new_: u16) HRESULT {
                return @as(*const IVariantChangeType.VTable, @ptrCast(self.vtable)).ChangeType(@as(*const IVariantChangeType, @ptrCast(self)), pvar_dst_, pvar_src_, lcid_, vt_new_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectIdentity_Value = Guid.initString("ca04b7e6-0d21-11d1-8cc5-00c04fc2b085");
pub const IID_IObjectIdentity = &IID_IObjectIdentity_Value;
pub const IObjectIdentity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsEqualObject: *const fn (
            self: *const IObjectIdentity,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isEqualObject(self: *const T, punk_: ?*IUnknown) HRESULT {
                return @as(*const IObjectIdentity.VTable, @ptrCast(self.vtable)).IsEqualObject(@as(*const IObjectIdentity, @ptrCast(self)), punk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICanHandleException_Value = Guid.initString("c5598e60-b307-11d1-b27d-006008c3fbfb");
pub const IID_ICanHandleException = &IID_ICanHandleException_Value;
pub const ICanHandleException = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CanHandleException: *const fn (
            self: *const ICanHandleException,
            p_excep_info: ?*EXCEPINFO,
            pvar: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn canHandleException(self: *const T, p_excep_info_: ?*EXCEPINFO, pvar_: ?*VARIANT) HRESULT {
                return @as(*const ICanHandleException.VTable, @ptrCast(self.vtable)).CanHandleException(@as(*const ICanHandleException, @ptrCast(self)), p_excep_info_, pvar_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IProvideRuntimeContext_Value = Guid.initString("10e2414a-ec59-49d2-bc51-5add2c36febc");
pub const IID_IProvideRuntimeContext = &IID_IProvideRuntimeContext_Value;
pub const IProvideRuntimeContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCurrentSourceContext: *const fn (
            self: *const IProvideRuntimeContext,
            pdw_context: ?*usize,
            pf_executing_global_code: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCurrentSourceContext(self: *const T, pdw_context_: ?*usize, pf_executing_global_code_: ?*i16) HRESULT {
                return @as(*const IProvideRuntimeContext.VTable, @ptrCast(self.vtable)).GetCurrentSourceContext(@as(*const IProvideRuntimeContext, @ptrCast(self)), pdw_context_, pf_executing_global_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (456)
//--------------------------------------------------------------------------------
pub extern "oleaut32" fn DosDateTimeToVariantTime(
    w_dos_date: u16,
    w_dos_time: u16,
    pvtime: ?*f64,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "oleaut32" fn VariantTimeToDosDateTime(
    vtime: f64,
    pw_dos_date: ?*u16,
    pw_dos_time: ?*u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "oleaut32" fn SystemTimeToVariantTime(
    lp_system_time: ?*SYSTEMTIME,
    pvtime: ?*f64,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "oleaut32" fn VariantTimeToSystemTime(
    vtime: f64,
    lp_system_time: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "oleaut32" fn SafeArrayAllocDescriptor(
    c_dims: u32,
    ppsa_out: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayAllocDescriptorEx(
    vt: u16,
    c_dims: u32,
    ppsa_out: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayAllocData(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayCreate(
    vt: u16,
    c_dims: u32,
    rgsabound: ?*SAFEARRAYBOUND,
) callconv(@import("std").os.windows.WINAPI) ?*SAFEARRAY;

pub extern "oleaut32" fn SafeArrayCreateEx(
    vt: u16,
    c_dims: u32,
    rgsabound: ?*SAFEARRAYBOUND,
    pv_extra: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?*SAFEARRAY;

pub extern "oleaut32" fn SafeArrayCopyData(
    psa_source: ?*SAFEARRAY,
    psa_target: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "oleaut32" fn SafeArrayReleaseDescriptor(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "oleaut32" fn SafeArrayDestroyDescriptor(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "oleaut32" fn SafeArrayReleaseData(
    p_data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "oleaut32" fn SafeArrayDestroyData(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "oleaut32" fn SafeArrayAddRef(
    psa: ?*SAFEARRAY,
    pp_data_to_release: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayDestroy(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayRedim(
    psa: ?*SAFEARRAY,
    psabound_new: ?*SAFEARRAYBOUND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayGetDim(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "oleaut32" fn SafeArrayGetElemsize(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "oleaut32" fn SafeArrayGetUBound(
    psa: ?*SAFEARRAY,
    n_dim: u32,
    pl_ubound: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayGetLBound(
    psa: ?*SAFEARRAY,
    n_dim: u32,
    pl_lbound: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayLock(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayUnlock(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayAccessData(
    psa: ?*SAFEARRAY,
    ppv_data: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayUnaccessData(
    psa: ?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayGetElement(
    psa: ?*SAFEARRAY,
    rg_indices: ?*i32,
    pv: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayPutElement(
    psa: ?*SAFEARRAY,
    rg_indices: ?*i32,
    pv: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayCopy(
    psa: ?*SAFEARRAY,
    ppsa_out: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayPtrOfIndex(
    psa: ?*SAFEARRAY,
    rg_indices: ?*i32,
    ppv_data: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArraySetRecordInfo(
    psa: ?*SAFEARRAY,
    prinfo: ?*IRecordInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayGetRecordInfo(
    psa: ?*SAFEARRAY,
    prinfo: ?*?*IRecordInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArraySetIID(
    psa: ?*SAFEARRAY,
    guid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayGetIID(
    psa: ?*SAFEARRAY,
    pguid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayGetVartype(
    psa: ?*SAFEARRAY,
    pvt: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn SafeArrayCreateVector(
    vt: u16,
    l_lbound: i32,
    c_elements: u32,
) callconv(@import("std").os.windows.WINAPI) ?*SAFEARRAY;

pub extern "oleaut32" fn SafeArrayCreateVectorEx(
    vt: u16,
    l_lbound: i32,
    c_elements: u32,
    pv_extra: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?*SAFEARRAY;

pub extern "oleaut32" fn VariantInit(
    pvarg: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "oleaut32" fn VariantClear(
    pvarg: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VariantCopy(
    pvarg_dest: ?*VARIANT,
    pvarg_src: ?*const VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VariantCopyInd(
    pvar_dest: ?*VARIANT,
    pvarg_src: ?*const VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VariantChangeType(
    pvarg_dest: ?*VARIANT,
    pvar_src: ?*const VARIANT,
    w_flags: u16,
    vt: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VariantChangeTypeEx(
    pvarg_dest: ?*VARIANT,
    pvar_src: ?*const VARIANT,
    lcid: u32,
    w_flags: u16,
    vt: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VectorFromBstr(
    bstr: ?BSTR,
    ppsa: ?*?*SAFEARRAY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn BstrFromVector(
    psa: ?*SAFEARRAY,
    pbstr: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromI2(
    s_in: i16,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromI4(
    l_in: i32,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromI8(
    i64_in: i64,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromR4(
    flt_in: f32,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromR8(
    dbl_in: f64,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromCy(
    cy_in: CY,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromDate(
    date_in: f64,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromBool(
    bool_in: i16,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromI1(
    c_in: CHAR,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromUI2(
    ui_in: u16,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromUI4(
    ul_in: u32,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromUI8(
    ui64_in: u64,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI1FromDec(
    pdec_in: ?*const DECIMAL,
    pb_out: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromUI1(
    b_in: u8,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromI4(
    l_in: i32,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromI8(
    i64_in: i64,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromR4(
    flt_in: f32,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromR8(
    dbl_in: f64,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromCy(
    cy_in: CY,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromDate(
    date_in: f64,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromBool(
    bool_in: i16,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromI1(
    c_in: CHAR,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromUI2(
    ui_in: u16,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromUI4(
    ul_in: u32,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromUI8(
    ui64_in: u64,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI2FromDec(
    pdec_in: ?*const DECIMAL,
    ps_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromUI1(
    b_in: u8,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromI2(
    s_in: i16,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromI8(
    i64_in: i64,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromR4(
    flt_in: f32,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromR8(
    dbl_in: f64,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromCy(
    cy_in: CY,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromDate(
    date_in: f64,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromBool(
    bool_in: i16,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromI1(
    c_in: CHAR,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromUI2(
    ui_in: u16,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromUI4(
    ul_in: u32,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromUI8(
    ui64_in: u64,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI4FromDec(
    pdec_in: ?*const DECIMAL,
    pl_out: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromUI1(
    b_in: u8,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromI2(
    s_in: i16,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromR4(
    flt_in: f32,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromR8(
    dbl_in: f64,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromCy(
    cy_in: CY,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromDate(
    date_in: f64,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromBool(
    bool_in: i16,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromI1(
    c_in: CHAR,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromUI2(
    ui_in: u16,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromUI4(
    ul_in: u32,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromUI8(
    ui64_in: u64,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI8FromDec(
    pdec_in: ?*const DECIMAL,
    pi64_out: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromUI1(
    b_in: u8,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromI2(
    s_in: i16,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromI4(
    l_in: i32,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromI8(
    i64_in: i64,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromR8(
    dbl_in: f64,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromCy(
    cy_in: CY,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromDate(
    date_in: f64,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromBool(
    bool_in: i16,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromI1(
    c_in: CHAR,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromUI2(
    ui_in: u16,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromUI4(
    ul_in: u32,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromUI8(
    ui64_in: u64,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4FromDec(
    pdec_in: ?*const DECIMAL,
    pflt_out: ?*f32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromUI1(
    b_in: u8,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromI2(
    s_in: i16,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromI4(
    l_in: i32,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromI8(
    i64_in: i64,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromR4(
    flt_in: f32,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromCy(
    cy_in: CY,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromDate(
    date_in: f64,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromBool(
    bool_in: i16,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromI1(
    c_in: CHAR,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromUI2(
    ui_in: u16,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromUI4(
    ul_in: u32,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromUI8(
    ui64_in: u64,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8FromDec(
    pdec_in: ?*const DECIMAL,
    pdbl_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromUI1(
    b_in: u8,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromI2(
    s_in: i16,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromI4(
    l_in: i32,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromI8(
    i64_in: i64,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromR4(
    flt_in: f32,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromR8(
    dbl_in: f64,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromCy(
    cy_in: CY,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromBool(
    bool_in: i16,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromI1(
    c_in: CHAR,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromUI2(
    ui_in: u16,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromUI4(
    ul_in: u32,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromUI8(
    ui64_in: u64,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromDec(
    pdec_in: ?*const DECIMAL,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromUI1(
    b_in: u8,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromI2(
    s_in: i16,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromI4(
    l_in: i32,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromI8(
    i64_in: i64,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromR4(
    flt_in: f32,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromR8(
    dbl_in: f64,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromDate(
    date_in: f64,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromBool(
    bool_in: i16,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromI1(
    c_in: CHAR,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromUI2(
    ui_in: u16,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromUI4(
    ul_in: u32,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromUI8(
    ui64_in: u64,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFromDec(
    pdec_in: ?*const DECIMAL,
    pcy_out: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromUI1(
    b_val: u8,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromI2(
    i_val: i16,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromI4(
    l_in: i32,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromI8(
    i64_in: i64,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromR4(
    flt_in: f32,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromR8(
    dbl_in: f64,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromCy(
    cy_in: CY,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromDate(
    date_in: f64,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromBool(
    bool_in: i16,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromI1(
    c_in: CHAR,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromUI2(
    ui_in: u16,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromUI4(
    ul_in: u32,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromUI8(
    ui64_in: u64,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrFromDec(
    pdec_in: ?*const DECIMAL,
    lcid: u32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromUI1(
    b_in: u8,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromI2(
    s_in: i16,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromI4(
    l_in: i32,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromI8(
    i64_in: i64,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromR4(
    flt_in: f32,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromR8(
    dbl_in: f64,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromDate(
    date_in: f64,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromCy(
    cy_in: CY,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromI1(
    c_in: CHAR,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromUI2(
    ui_in: u16,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromUI4(
    ul_in: u32,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromUI8(
    i64_in: u64,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBoolFromDec(
    pdec_in: ?*const DECIMAL,
    pbool_out: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromUI1(
    b_in: u8,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromI2(
    ui_in: i16,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromI4(
    l_in: i32,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromI8(
    i64_in: i64,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromR4(
    flt_in: f32,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromR8(
    dbl_in: f64,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromDate(
    date_in: f64,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromCy(
    cy_in: CY,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromBool(
    bool_in: i16,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromUI2(
    ui_in: u16,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromUI4(
    ul_in: u32,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromUI8(
    i64_in: u64,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarI1FromDec(
    pdec_in: ?*const DECIMAL,
    pc_out: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromUI1(
    b_in: u8,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromI2(
    ui_in: i16,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromI4(
    l_in: i32,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromI8(
    i64_in: i64,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromR4(
    flt_in: f32,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromR8(
    dbl_in: f64,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromDate(
    date_in: f64,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromCy(
    cy_in: CY,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromBool(
    bool_in: i16,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromI1(
    c_in: CHAR,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromUI4(
    ul_in: u32,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromUI8(
    i64_in: u64,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI2FromDec(
    pdec_in: ?*const DECIMAL,
    pui_out: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromUI1(
    b_in: u8,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromI2(
    ui_in: i16,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromI4(
    l_in: i32,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromI8(
    i64_in: i64,
    pl_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromR4(
    flt_in: f32,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromR8(
    dbl_in: f64,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromDate(
    date_in: f64,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromCy(
    cy_in: CY,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromBool(
    bool_in: i16,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromI1(
    c_in: CHAR,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromUI2(
    ui_in: u16,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromUI8(
    ui64_in: u64,
    pl_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI4FromDec(
    pdec_in: ?*const DECIMAL,
    pul_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromUI1(
    b_in: u8,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromI2(
    s_in: i16,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromI8(
    ui64_in: i64,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromR4(
    flt_in: f32,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromR8(
    dbl_in: f64,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromCy(
    cy_in: CY,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromDate(
    date_in: f64,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromBool(
    bool_in: i16,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromI1(
    c_in: CHAR,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromUI2(
    ui_in: u16,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromUI4(
    ul_in: u32,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUI8FromDec(
    pdec_in: ?*const DECIMAL,
    pi64_out: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromUI1(
    b_in: u8,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromI2(
    ui_in: i16,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromI4(
    l_in: i32,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromI8(
    i64_in: i64,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromR4(
    flt_in: f32,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromR8(
    dbl_in: f64,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromDate(
    date_in: f64,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromCy(
    cy_in: CY,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromDisp(
    pdisp_in: ?*IDispatch,
    lcid: u32,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromBool(
    bool_in: i16,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromI1(
    c_in: CHAR,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromUI2(
    ui_in: u16,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromUI4(
    ul_in: u32,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFromUI8(
    ui64_in: u64,
    pdec_out: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarParseNumFromStr(
    str_in: ?[*:0]const u16,
    lcid: u32,
    dw_flags: u32,
    pnumprs: ?*NUMPARSE,
    rgb_dig: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarNumFromParseNum(
    pnumprs: ?*NUMPARSE,
    rgb_dig: ?*u8,
    dw_vt_bits: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarAdd(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarAnd(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCat(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDiv(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarEqv(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarIdiv(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarImp(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarMod(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarMul(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarOr(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarPow(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarSub(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarXor(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarAbs(
    pvar_in: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarFix(
    pvar_in: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarInt(
    pvar_in: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarNeg(
    pvar_in: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarNot(
    pvar_in: ?*VARIANT,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarRound(
    pvar_in: ?*VARIANT,
    c_decimals: i32,
    pvar_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCmp(
    pvar_left: ?*VARIANT,
    pvar_right: ?*VARIANT,
    lcid: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecAdd(
    pdec_left: ?*DECIMAL,
    pdec_right: ?*DECIMAL,
    pdec_result: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecDiv(
    pdec_left: ?*DECIMAL,
    pdec_right: ?*DECIMAL,
    pdec_result: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecMul(
    pdec_left: ?*DECIMAL,
    pdec_right: ?*DECIMAL,
    pdec_result: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecSub(
    pdec_left: ?*DECIMAL,
    pdec_right: ?*DECIMAL,
    pdec_result: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecAbs(
    pdec_in: ?*DECIMAL,
    pdec_result: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecFix(
    pdec_in: ?*DECIMAL,
    pdec_result: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecInt(
    pdec_in: ?*DECIMAL,
    pdec_result: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecNeg(
    pdec_in: ?*DECIMAL,
    pdec_result: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecRound(
    pdec_in: ?*DECIMAL,
    c_decimals: i32,
    pdec_result: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecCmp(
    pdec_left: ?*DECIMAL,
    pdec_right: ?*DECIMAL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDecCmpR8(
    pdec_left: ?*DECIMAL,
    dbl_right: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyAdd(
    cy_left: CY,
    cy_right: CY,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyMul(
    cy_left: CY,
    cy_right: CY,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyMulI4(
    cy_left: CY,
    l_right: i32,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyMulI8(
    cy_left: CY,
    l_right: i64,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCySub(
    cy_left: CY,
    cy_right: CY,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyAbs(
    cy_in: CY,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyFix(
    cy_in: CY,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyInt(
    cy_in: CY,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyNeg(
    cy_in: CY,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyRound(
    cy_in: CY,
    c_decimals: i32,
    pcy_result: ?*CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyCmp(
    cy_left: CY,
    cy_right: CY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarCyCmpR8(
    cy_left: CY,
    dbl_right: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrCat(
    bstr_left: ?BSTR,
    bstr_right: ?BSTR,
    pbstr_result: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarBstrCmp(
    bstr_left: ?BSTR,
    bstr_right: ?BSTR,
    lcid: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8Pow(
    dbl_left: f64,
    dbl_right: f64,
    pdbl_result: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR4CmpR8(
    flt_left: f32,
    dbl_right: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarR8Round(
    dbl_in: f64,
    c_decimals: i32,
    pdbl_result: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromUdate(
    pudate_in: ?*UDATE,
    dw_flags: u32,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarDateFromUdateEx(
    pudate_in: ?*UDATE,
    lcid: u32,
    dw_flags: u32,
    pdate_out: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarUdateFromDate(
    date_in: f64,
    dw_flags: u32,
    pudate_out: ?*UDATE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn GetAltMonthNames(
    lcid: u32,
    prgp: ?*?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarFormat(
    pvar_in: ?*VARIANT,
    pstr_format: ?PWSTR,
    i_first_day: i32,
    i_first_week: i32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarFormatDateTime(
    pvar_in: ?*VARIANT,
    i_named_format: i32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarFormatNumber(
    pvar_in: ?*VARIANT,
    i_num_dig: i32,
    i_inc_lead: i32,
    i_use_parens: i32,
    i_group: i32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarFormatPercent(
    pvar_in: ?*VARIANT,
    i_num_dig: i32,
    i_inc_lead: i32,
    i_use_parens: i32,
    i_group: i32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarFormatCurrency(
    pvar_in: ?*VARIANT,
    i_num_dig: i32,
    i_inc_lead: i32,
    i_use_parens: i32,
    i_group: i32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarWeekdayName(
    i_weekday: i32,
    f_abbrev: i32,
    i_first_day: i32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarMonthName(
    i_month: i32,
    f_abbrev: i32,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarFormatFromTokens(
    pvar_in: ?*VARIANT,
    pstr_format: ?PWSTR,
    pb_tok_cur: ?*u8,
    dw_flags: u32,
    pbstr_out: ?*?BSTR,
    lcid: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn VarTokenizeFormatString(
    pstr_format: ?PWSTR,
    rgb_tok: [*:0]u8,
    cb_tok: i32,
    i_first_day: i32,
    i_first_week: i32,
    lcid: u32,
    pcb_actual: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn LHashValOfNameSysA(
    syskind: SYSKIND,
    lcid: u32,
    sz_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "oleaut32" fn LHashValOfNameSys(
    syskind: SYSKIND,
    lcid: u32,
    sz_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "oleaut32" fn LoadTypeLib(
    sz_file: ?[*:0]const u16,
    pptlib: ?*?*ITypeLib,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn LoadTypeLibEx(
    sz_file: ?[*:0]const u16,
    regkind: REGKIND,
    pptlib: ?*?*ITypeLib,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn LoadRegTypeLib(
    rguid: ?*const Guid,
    w_ver_major: u16,
    w_ver_minor: u16,
    lcid: u32,
    pptlib: ?*?*ITypeLib,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn QueryPathOfRegTypeLib(
    guid: ?*const Guid,
    w_maj: u16,
    w_min: u16,
    lcid: u32,
    lpbstr_path_name: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn RegisterTypeLib(
    ptlib: ?*ITypeLib,
    sz_full_path: ?[*:0]const u16,
    sz_help_dir: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn UnRegisterTypeLib(
    lib_i_d: ?*const Guid,
    w_ver_major: u16,
    w_ver_minor: u16,
    lcid: u32,
    syskind: SYSKIND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn RegisterTypeLibForUser(
    ptlib: ?*ITypeLib,
    sz_full_path: ?PWSTR,
    sz_help_dir: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn UnRegisterTypeLibForUser(
    lib_i_d: ?*const Guid,
    w_major_ver_num: u16,
    w_minor_ver_num: u16,
    lcid: u32,
    syskind: SYSKIND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn CreateTypeLib(
    syskind: SYSKIND,
    sz_file: ?[*:0]const u16,
    ppctlib: ?*?*ICreateTypeLib,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn CreateTypeLib2(
    syskind: SYSKIND,
    sz_file: ?[*:0]const u16,
    ppctlib: ?*?*ICreateTypeLib2,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn DispGetParam(
    pdispparams: ?*DISPPARAMS,
    position: u32,
    vt_targ: u16,
    pvar_result: ?*VARIANT,
    pu_arg_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn DispGetIDsOfNames(
    ptinfo: ?*ITypeInfo,
    rgsz_names: [*]?PWSTR,
    c_names: u32,
    rgdispid: [*]i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn DispInvoke(
    _this: ?*anyopaque,
    ptinfo: ?*ITypeInfo,
    dispid_member: i32,
    w_flags: u16,
    pparams: ?*DISPPARAMS,
    pvar_result: ?*VARIANT,
    pexcepinfo: ?*EXCEPINFO,
    pu_arg_err: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn CreateDispTypeInfo(
    pidata: ?*INTERFACEDATA,
    lcid: u32,
    pptinfo: ?*?*ITypeInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn CreateStdDispatch(
    punk_outer: ?*IUnknown,
    pv_this: ?*anyopaque,
    ptinfo: ?*ITypeInfo,
    ppunk_std_disp: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn DispCallFunc(
    pv_instance: ?*anyopaque,
    o_vft: usize,
    cc: CALLCONV,
    vt_return: u16,
    c_actuals: u32,
    prgvt: [*:0]u16,
    prgpvarg: [*]?*VARIANT,
    pvarg_result: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn RegisterActiveObject(
    punk: ?*IUnknown,
    rclsid: ?*const Guid,
    dw_flags: u32,
    pdw_register: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn RevokeActiveObject(
    dw_register: u32,
    pv_reserved: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn GetActiveObject(
    rclsid: ?*const Guid,
    pv_reserved: ?*anyopaque,
    ppunk: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn CreateErrorInfo(
    pperrinfo: ?*?*ICreateErrorInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn GetRecordInfoFromTypeInfo(
    p_type_info: ?*ITypeInfo,
    pp_rec_info: ?*?*IRecordInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn GetRecordInfoFromGuids(
    r_guid_type_lib: ?*const Guid,
    u_ver_major: u32,
    u_ver_minor: u32,
    lcid: u32,
    r_guid_type_info: ?*const Guid,
    pp_rec_info: ?*?*IRecordInfo,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn OaBuildVersion() callconv(@import("std").os.windows.WINAPI) u32;

pub extern "oleaut32" fn ClearCustData(
    p_cust_data: ?*CUSTDATA,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "oleaut32" fn OaEnablePerUserTLibRegistration() callconv(@import("std").os.windows.WINAPI) void;

pub extern "ole32" fn OleBuildVersion() callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleInitialize(
    pv_reserved: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleUninitialize() callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleQueryLinkFromData(
    p_src_data_object: ?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleQueryCreateFromData(
    p_src_data_object: ?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreate(
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    renderopt: u32,
    p_format_etc: ?*FORMATETC,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateEx(
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    dw_flags: u32,
    renderopt: u32,
    c_formats: u32,
    rg_advf: ?*u32,
    rg_format_etc: ?*FORMATETC,
    lp_advise_sink: ?*IAdviseSink,
    rgdw_connection: ?*u32,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateFromData(
    p_src_data_obj: ?*IDataObject,
    riid: ?*const Guid,
    renderopt: u32,
    p_format_etc: ?*FORMATETC,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateFromDataEx(
    p_src_data_obj: ?*IDataObject,
    riid: ?*const Guid,
    dw_flags: u32,
    renderopt: u32,
    c_formats: u32,
    rg_advf: ?*u32,
    rg_format_etc: ?*FORMATETC,
    lp_advise_sink: ?*IAdviseSink,
    rgdw_connection: ?*u32,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateLinkFromData(
    p_src_data_obj: ?*IDataObject,
    riid: ?*const Guid,
    renderopt: u32,
    p_format_etc: ?*FORMATETC,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateLinkFromDataEx(
    p_src_data_obj: ?*IDataObject,
    riid: ?*const Guid,
    dw_flags: u32,
    renderopt: u32,
    c_formats: u32,
    rg_advf: ?*u32,
    rg_format_etc: ?*FORMATETC,
    lp_advise_sink: ?*IAdviseSink,
    rgdw_connection: ?*u32,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateStaticFromData(
    p_src_data_obj: ?*IDataObject,
    iid: ?*const Guid,
    renderopt: u32,
    p_format_etc: ?*FORMATETC,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateLink(
    pmk_link_src: ?*IMoniker,
    riid: ?*const Guid,
    renderopt: u32,
    lp_format_etc: ?*FORMATETC,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateLinkEx(
    pmk_link_src: ?*IMoniker,
    riid: ?*const Guid,
    dw_flags: u32,
    renderopt: u32,
    c_formats: u32,
    rg_advf: ?*u32,
    rg_format_etc: ?*FORMATETC,
    lp_advise_sink: ?*IAdviseSink,
    rgdw_connection: ?*u32,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateLinkToFile(
    lpsz_file_name: ?[*:0]const u16,
    riid: ?*const Guid,
    renderopt: u32,
    lp_format_etc: ?*FORMATETC,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateLinkToFileEx(
    lpsz_file_name: ?[*:0]const u16,
    riid: ?*const Guid,
    dw_flags: u32,
    renderopt: u32,
    c_formats: u32,
    rg_advf: ?*u32,
    rg_format_etc: ?*FORMATETC,
    lp_advise_sink: ?*IAdviseSink,
    rgdw_connection: ?*u32,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateFromFile(
    rclsid: ?*const Guid,
    lpsz_file_name: ?[*:0]const u16,
    riid: ?*const Guid,
    renderopt: u32,
    lp_format_etc: ?*FORMATETC,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateFromFileEx(
    rclsid: ?*const Guid,
    lpsz_file_name: ?[*:0]const u16,
    riid: ?*const Guid,
    dw_flags: u32,
    renderopt: u32,
    c_formats: u32,
    rg_advf: ?*u32,
    rg_format_etc: ?*FORMATETC,
    lp_advise_sink: ?*IAdviseSink,
    rgdw_connection: ?*u32,
    p_client_site: ?*IOleClientSite,
    p_stg: ?*IStorage,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleLoad(
    p_stg: ?*IStorage,
    riid: ?*const Guid,
    p_client_site: ?*IOleClientSite,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleSave(
    p_p_s: ?*IPersistStorage,
    p_stg: ?*IStorage,
    f_same_as_load: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleLoadFromStream(
    p_stm: ?*IStream,
    iid_interface: ?*const Guid,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleSaveToStream(
    p_p_stm: ?*IPersistStream,
    p_stm: ?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleSetContainedObject(
    p_unknown: ?*IUnknown,
    f_contained: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleNoteObjectVisible(
    p_unknown: ?*IUnknown,
    f_visible: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn RegisterDragDrop(
    hwnd: ?HWND,
    p_drop_target: ?*IDropTarget,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn RevokeDragDrop(
    hwnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn DoDragDrop(
    p_data_obj: ?*IDataObject,
    p_drop_source: ?*IDropSource,
    dw_o_k_effects: u32,
    pdw_effect: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleSetClipboard(
    p_data_obj: ?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleGetClipboard(
    pp_data_obj: ?*?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "ole32" fn OleGetClipboardWithEnterpriseInfo(
    data_object: ?*?*IDataObject,
    data_enterprise_id: ?*?PWSTR,
    source_description: ?*?PWSTR,
    target_description: ?*?PWSTR,
    data_description: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleFlushClipboard() callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleIsCurrentClipboard(
    p_data_obj: ?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateMenuDescriptor(
    hmenu_combined: ?HMENU,
    lp_menu_widths: ?*OleMenuGroupWidths,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleSetMenuDescriptor(
    holemenu: isize,
    hwnd_frame: ?HWND,
    hwnd_active_object: ?HWND,
    lp_frame: ?*IOleInPlaceFrame,
    lp_active_obj: ?*IOleInPlaceActiveObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleDestroyMenuDescriptor(
    holemenu: isize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleTranslateAccelerator(
    lp_frame: ?*IOleInPlaceFrame,
    lp_frame_info: ?*OIFI,
    lpmsg: ?*MSG,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleDuplicateData(
    h_src: ?HANDLE,
    cf_format: u16,
    ui_flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleDraw(
    p_unknown: ?*IUnknown,
    dw_aspect: u32,
    hdc_draw: ?HDC,
    lprc_bounds: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleRun(
    p_unknown: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleIsRunning(
    p_object: ?*IOleObject,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleLockRunning(
    p_unknown: ?*IUnknown,
    f_lock: BOOL,
    f_last_unlock_closes: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn ReleaseStgMedium(
    param0: ?*STGMEDIUM,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn CreateOleAdviseHolder(
    pp_o_a_holder: ?*?*IOleAdviseHolder,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateDefaultHandler(
    clsid: ?*const Guid,
    p_unk_outer: ?*IUnknown,
    riid: ?*const Guid,
    lplp_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleCreateEmbeddingHelper(
    clsid: ?*const Guid,
    p_unk_outer: ?*IUnknown,
    flags: u32,
    p_c_f: ?*IClassFactory,
    riid: ?*const Guid,
    lplp_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn IsAccelerator(
    h_accel: ?HACCEL,
    c_accel_entries: i32,
    lp_msg: ?*MSG,
    lpw_cmd: ?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleGetIconOfFile(
    lpsz_path: ?PWSTR,
    f_use_file_as_label: BOOL,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleGetIconOfClass(
    rclsid: ?*const Guid,
    lpsz_label: ?PWSTR,
    f_use_type_as_label: BOOL,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleMetafilePictFromIconAndLabel(
    h_icon: ?HICON,
    lpsz_label: ?PWSTR,
    lpsz_source_file: ?PWSTR,
    i_icon_index: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleRegGetUserType(
    clsid: ?*const Guid,
    dw_form_of_type: u32,
    psz_user_type: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleRegGetMiscStatus(
    clsid: ?*const Guid,
    dw_aspect: u32,
    pdw_status: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleRegEnumFormatEtc(
    clsid: ?*const Guid,
    dw_direction: u32,
    ppenum: ?*?*IEnumFORMATETC,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleRegEnumVerbs(
    clsid: ?*const Guid,
    ppenum: ?*?*IEnumOLEVERB,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleDoAutoConvert(
    p_stg: ?*IStorage,
    p_clsid_new: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleGetAutoConvert(
    clsid_old: ?*const Guid,
    p_clsid_new: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "ole32" fn OleSetAutoConvert(
    clsid_old: ?*const Guid,
    clsid_new: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn HRGN_UserSize(
    param0: ?*u32,
    param1: u32,
    param2: ?*?HRGN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ole32" fn HRGN_UserMarshal(
    param0: ?*u32,
    param1: ?*u8,
    param2: ?*?HRGN,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HRGN_UserUnmarshal(
    param0: ?*u32,
    param1: [*:0]u8,
    param2: ?*?HRGN,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HRGN_UserFree(
    param0: ?*u32,
    param1: ?*?HRGN,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-marshal-l1-1-0" fn HRGN_UserSize64(
    param0: ?*u32,
    param1: u32,
    param2: ?*?HRGN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-marshal-l1-1-0" fn HRGN_UserMarshal64(
    param0: ?*u32,
    param1: ?*u8,
    param2: ?*?HRGN,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "api-ms-win-core-marshal-l1-1-0" fn HRGN_UserUnmarshal64(
    param0: ?*u32,
    param1: [*:0]u8,
    param2: ?*?HRGN,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "api-ms-win-core-marshal-l1-1-0" fn HRGN_UserFree64(
    param0: ?*u32,
    param1: ?*?HRGN,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oleaut32" fn OleCreatePropertyFrame(
    hwnd_owner: ?HWND,
    x: u32,
    y: u32,
    lpsz_caption: ?[*:0]const u16,
    c_objects: u32,
    pp_unk: ?*?*IUnknown,
    c_pages: u32,
    p_page_cls_i_d: ?*Guid,
    lcid: u32,
    dw_reserved: u32,
    pv_reserved: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oleaut32" fn OleCreatePropertyFrameIndirect(
    lp_params: ?*OCPFIPARAMS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oleaut32" fn OleTranslateColor(
    clr: u32,
    hpal: ?HPALETTE,
    lpcolorref: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oleaut32" fn OleCreateFontIndirect(
    lp_font_desc: ?*FONTDESC,
    riid: ?*const Guid,
    lplpv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oleaut32" fn OleCreatePictureIndirect(
    lp_pict_desc: ?*PICTDESC,
    riid: ?*const Guid,
    f_own: BOOL,
    lplpv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oleaut32" fn OleLoadPicture(
    lpstream: ?*IStream,
    l_size: i32,
    f_runmode: BOOL,
    riid: ?*const Guid,
    lplpv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oleaut32" fn OleLoadPictureEx(
    lpstream: ?*IStream,
    l_size: i32,
    f_runmode: BOOL,
    riid: ?*const Guid,
    x_size_desired: u32,
    y_size_desired: u32,
    dw_flags: u32,
    lplpv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oleaut32" fn OleLoadPicturePath(
    sz_u_r_lor_path: ?PWSTR,
    punk_caller: ?*IUnknown,
    dw_reserved: u32,
    clr_reserved: u32,
    riid: ?*const Guid,
    ppv_ret: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn OleLoadPictureFile(
    var_file_name: VARIANT,
    lplpdisp_picture: ?*?*IDispatch,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn OleLoadPictureFileEx(
    var_file_name: VARIANT,
    x_size_desired: u32,
    y_size_desired: u32,
    dw_flags: u32,
    lplpdisp_picture: ?*?*IDispatch,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "oleaut32" fn OleSavePictureFile(
    lpdisp_picture: ?*IDispatch,
    bstr_file_name: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oleaut32" fn OleIconToCursor(
    hinst_exe: ?HINSTANCE,
    h_icon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) ?HCURSOR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIAddVerbMenuW(
    lp_ole_obj: ?*IOleObject,
    lpsz_short_type: ?[*:0]const u16,
    h_menu: ?HMENU,
    u_pos: u32,
    u_i_d_verb_min: u32,
    u_i_d_verb_max: u32,
    b_add_convert: BOOL,
    id_convert: u32,
    lph_menu: ?*?HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIAddVerbMenuA(
    lp_ole_obj: ?*IOleObject,
    lpsz_short_type: ?[*:0]const u8,
    h_menu: ?HMENU,
    u_pos: u32,
    u_i_d_verb_min: u32,
    u_i_d_verb_max: u32,
    b_add_convert: BOOL,
    id_convert: u32,
    lph_menu: ?*?HMENU,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIInsertObjectW(
    param0: ?*OLEUIINSERTOBJECTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIInsertObjectA(
    param0: ?*OLEUIINSERTOBJECTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIPasteSpecialW(
    param0: ?*OLEUIPASTESPECIALW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIPasteSpecialA(
    param0: ?*OLEUIPASTESPECIALA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIEditLinksW(
    param0: ?*OLEUIEDITLINKSW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIEditLinksA(
    param0: ?*OLEUIEDITLINKSA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIChangeIconW(
    param0: ?*OLEUICHANGEICONW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIChangeIconA(
    param0: ?*OLEUICHANGEICONA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIConvertW(
    param0: ?*OLEUICONVERTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIConvertA(
    param0: ?*OLEUICONVERTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUICanConvertOrActivateAs(
    r_clsid: ?*const Guid,
    f_is_linked_object: BOOL,
    w_format: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIBusyW(
    param0: ?*OLEUIBUSYW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIBusyA(
    param0: ?*OLEUIBUSYA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIChangeSourceW(
    param0: ?*OLEUICHANGESOURCEW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIChangeSourceA(
    param0: ?*OLEUICHANGESOURCEA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIObjectPropertiesW(
    param0: ?*OLEUIOBJECTPROPSW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIObjectPropertiesA(
    param0: ?*OLEUIOBJECTPROPSA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIPromptUserW(
    n_template: i32,
    hwnd_parent: ?HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIPromptUserA(
    n_template: i32,
    hwnd_parent: ?HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIUpdateLinksW(
    lp_ole_u_i_link_cntr: ?*IOleUILinkContainerW,
    hwnd_parent: ?HWND,
    lpsz_title: ?PWSTR,
    c_links: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "oledlg" fn OleUIUpdateLinksA(
    lp_ole_u_i_link_cntr: ?*IOleUILinkContainerA,
    hwnd_parent: ?HWND,
    lpsz_title: ?PSTR,
    c_links: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (26)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const OLEUIINSERTOBJECT = thismodule.OLEUIINSERTOBJECTA;
        pub const OLEUIPASTEENTRY = thismodule.OLEUIPASTEENTRYA;
        pub const OLEUIPASTESPECIAL = thismodule.OLEUIPASTESPECIALA;
        pub const IOleUILinkContainer = thismodule.IOleUILinkContainerA;
        pub const OLEUIEDITLINKS = thismodule.OLEUIEDITLINKSA;
        pub const OLEUICHANGEICON = thismodule.OLEUICHANGEICONA;
        pub const OLEUICONVERT = thismodule.OLEUICONVERTA;
        pub const OLEUIBUSY = thismodule.OLEUIBUSYA;
        pub const OLEUICHANGESOURCE = thismodule.OLEUICHANGESOURCEA;
        pub const IOleUIObjInfo = thismodule.IOleUIObjInfoA;
        pub const IOleUILinkInfo = thismodule.IOleUILinkInfoA;
        pub const OLEUIGNRLPROPS = thismodule.OLEUIGNRLPROPSA;
        pub const OLEUIVIEWPROPS = thismodule.OLEUIVIEWPROPSA;
        pub const OLEUILINKPROPS = thismodule.OLEUILINKPROPSA;
        pub const OLEUIOBJECTPROPS = thismodule.OLEUIOBJECTPROPSA;
        pub const OleUIAddVerbMenu = thismodule.OleUIAddVerbMenuA;
        pub const OleUIInsertObject = thismodule.OleUIInsertObjectA;
        pub const OleUIPasteSpecial = thismodule.OleUIPasteSpecialA;
        pub const OleUIEditLinks = thismodule.OleUIEditLinksA;
        pub const OleUIChangeIcon = thismodule.OleUIChangeIconA;
        pub const OleUIConvert = thismodule.OleUIConvertA;
        pub const OleUIBusy = thismodule.OleUIBusyA;
        pub const OleUIChangeSource = thismodule.OleUIChangeSourceA;
        pub const OleUIObjectProperties = thismodule.OleUIObjectPropertiesA;
        pub const OleUIPromptUser = thismodule.OleUIPromptUserA;
        pub const OleUIUpdateLinks = thismodule.OleUIUpdateLinksA;
    },
    .wide => struct {
        pub const OLEUIINSERTOBJECT = thismodule.OLEUIINSERTOBJECTW;
        pub const OLEUIPASTEENTRY = thismodule.OLEUIPASTEENTRYW;
        pub const OLEUIPASTESPECIAL = thismodule.OLEUIPASTESPECIALW;
        pub const IOleUILinkContainer = thismodule.IOleUILinkContainerW;
        pub const OLEUIEDITLINKS = thismodule.OLEUIEDITLINKSW;
        pub const OLEUICHANGEICON = thismodule.OLEUICHANGEICONW;
        pub const OLEUICONVERT = thismodule.OLEUICONVERTW;
        pub const OLEUIBUSY = thismodule.OLEUIBUSYW;
        pub const OLEUICHANGESOURCE = thismodule.OLEUICHANGESOURCEW;
        pub const IOleUIObjInfo = thismodule.IOleUIObjInfoW;
        pub const IOleUILinkInfo = thismodule.IOleUILinkInfoW;
        pub const OLEUIGNRLPROPS = thismodule.OLEUIGNRLPROPSW;
        pub const OLEUIVIEWPROPS = thismodule.OLEUIVIEWPROPSW;
        pub const OLEUILINKPROPS = thismodule.OLEUILINKPROPSW;
        pub const OLEUIOBJECTPROPS = thismodule.OLEUIOBJECTPROPSW;
        pub const OleUIAddVerbMenu = thismodule.OleUIAddVerbMenuW;
        pub const OleUIInsertObject = thismodule.OleUIInsertObjectW;
        pub const OleUIPasteSpecial = thismodule.OleUIPasteSpecialW;
        pub const OleUIEditLinks = thismodule.OleUIEditLinksW;
        pub const OleUIChangeIcon = thismodule.OleUIChangeIconW;
        pub const OleUIConvert = thismodule.OleUIConvertW;
        pub const OleUIBusy = thismodule.OleUIBusyW;
        pub const OleUIChangeSource = thismodule.OleUIChangeSourceW;
        pub const OleUIObjectProperties = thismodule.OleUIObjectPropertiesW;
        pub const OleUIPromptUser = thismodule.OleUIPromptUserW;
        pub const OleUIUpdateLinks = thismodule.OleUIUpdateLinksW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const OLEUIINSERTOBJECT = *opaque {};
        pub const OLEUIPASTEENTRY = *opaque {};
        pub const OLEUIPASTESPECIAL = *opaque {};
        pub const IOleUILinkContainer = *opaque {};
        pub const OLEUIEDITLINKS = *opaque {};
        pub const OLEUICHANGEICON = *opaque {};
        pub const OLEUICONVERT = *opaque {};
        pub const OLEUIBUSY = *opaque {};
        pub const OLEUICHANGESOURCE = *opaque {};
        pub const IOleUIObjInfo = *opaque {};
        pub const IOleUILinkInfo = *opaque {};
        pub const OLEUIGNRLPROPS = *opaque {};
        pub const OLEUIVIEWPROPS = *opaque {};
        pub const OLEUILINKPROPS = *opaque {};
        pub const OLEUIOBJECTPROPS = *opaque {};
        pub const OleUIAddVerbMenu = *opaque {};
        pub const OleUIInsertObject = *opaque {};
        pub const OleUIPasteSpecial = *opaque {};
        pub const OleUIEditLinks = *opaque {};
        pub const OleUIChangeIcon = *opaque {};
        pub const OleUIConvert = *opaque {};
        pub const OleUIBusy = *opaque {};
        pub const OleUIChangeSource = *opaque {};
        pub const OleUIObjectProperties = *opaque {};
        pub const OleUIPromptUser = *opaque {};
        pub const OleUIUpdateLinks = *opaque {};
    } else struct {
        pub const OLEUIINSERTOBJECT = @compileError("'OLEUIINSERTOBJECT' requires that UNICODE be set to true or false in the root module");
        pub const OLEUIPASTEENTRY = @compileError("'OLEUIPASTEENTRY' requires that UNICODE be set to true or false in the root module");
        pub const OLEUIPASTESPECIAL = @compileError("'OLEUIPASTESPECIAL' requires that UNICODE be set to true or false in the root module");
        pub const IOleUILinkContainer = @compileError("'IOleUILinkContainer' requires that UNICODE be set to true or false in the root module");
        pub const OLEUIEDITLINKS = @compileError("'OLEUIEDITLINKS' requires that UNICODE be set to true or false in the root module");
        pub const OLEUICHANGEICON = @compileError("'OLEUICHANGEICON' requires that UNICODE be set to true or false in the root module");
        pub const OLEUICONVERT = @compileError("'OLEUICONVERT' requires that UNICODE be set to true or false in the root module");
        pub const OLEUIBUSY = @compileError("'OLEUIBUSY' requires that UNICODE be set to true or false in the root module");
        pub const OLEUICHANGESOURCE = @compileError("'OLEUICHANGESOURCE' requires that UNICODE be set to true or false in the root module");
        pub const IOleUIObjInfo = @compileError("'IOleUIObjInfo' requires that UNICODE be set to true or false in the root module");
        pub const IOleUILinkInfo = @compileError("'IOleUILinkInfo' requires that UNICODE be set to true or false in the root module");
        pub const OLEUIGNRLPROPS = @compileError("'OLEUIGNRLPROPS' requires that UNICODE be set to true or false in the root module");
        pub const OLEUIVIEWPROPS = @compileError("'OLEUIVIEWPROPS' requires that UNICODE be set to true or false in the root module");
        pub const OLEUILINKPROPS = @compileError("'OLEUILINKPROPS' requires that UNICODE be set to true or false in the root module");
        pub const OLEUIOBJECTPROPS = @compileError("'OLEUIOBJECTPROPS' requires that UNICODE be set to true or false in the root module");
        pub const OleUIAddVerbMenu = @compileError("'OleUIAddVerbMenu' requires that UNICODE be set to true or false in the root module");
        pub const OleUIInsertObject = @compileError("'OleUIInsertObject' requires that UNICODE be set to true or false in the root module");
        pub const OleUIPasteSpecial = @compileError("'OleUIPasteSpecial' requires that UNICODE be set to true or false in the root module");
        pub const OleUIEditLinks = @compileError("'OleUIEditLinks' requires that UNICODE be set to true or false in the root module");
        pub const OleUIChangeIcon = @compileError("'OleUIChangeIcon' requires that UNICODE be set to true or false in the root module");
        pub const OleUIConvert = @compileError("'OleUIConvert' requires that UNICODE be set to true or false in the root module");
        pub const OleUIBusy = @compileError("'OleUIBusy' requires that UNICODE be set to true or false in the root module");
        pub const OleUIChangeSource = @compileError("'OleUIChangeSource' requires that UNICODE be set to true or false in the root module");
        pub const OleUIObjectProperties = @compileError("'OleUIObjectProperties' requires that UNICODE be set to true or false in the root module");
        pub const OleUIPromptUser = @compileError("'OleUIPromptUser' requires that UNICODE be set to true or false in the root module");
        pub const OleUIUpdateLinks = @compileError("'OleUIUpdateLinks' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (87)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const BYTE_SIZEDARR = @import("../system/com.zig").BYTE_SIZEDARR;
const CALLCONV = @import("../system/com.zig").CALLCONV;
const CHAR = @import("../foundation.zig").CHAR;
const CUSTDATA = @import("../system/com.zig").CUSTDATA;
const CY = @import("../system/com.zig").CY;
const DECIMAL = @import("../foundation.zig").DECIMAL;
const DISPPARAMS = @import("../system/com.zig").DISPPARAMS;
const DVASPECT = @import("../system/com.zig").DVASPECT;
const DVTARGETDEVICE = @import("../system/com.zig").DVTARGETDEVICE;
const EXCEPINFO = @import("../system/com.zig").EXCEPINFO;
const FILETIME = @import("../foundation.zig").FILETIME;
const FLAGGED_WORD_BLOB = @import("../system/com.zig").FLAGGED_WORD_BLOB;
const FORMATETC = @import("../system/com.zig").FORMATETC;
const FUNCDESC = @import("../system/com.zig").FUNCDESC;
const HACCEL = @import("../ui/windows_and_messaging.zig").HACCEL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HCURSOR = @import("../ui/windows_and_messaging.zig").HCURSOR;
const HDC = @import("../graphics/gdi.zig").HDC;
const HENHMETAFILE = @import("../graphics/gdi.zig").HENHMETAFILE;
const HFONT = @import("../graphics/gdi.zig").HFONT;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HMENU = @import("../ui/windows_and_messaging.zig").HMENU;
const HMETAFILE = @import("../graphics/gdi.zig").HMETAFILE;
const HPALETTE = @import("../graphics/gdi.zig").HPALETTE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HRGN = @import("../graphics/gdi.zig").HRGN;
const HRSRC = @import("../foundation.zig").HRSRC;
const HTASK = @import("../media.zig").HTASK;
const HWND = @import("../foundation.zig").HWND;
const HYPER_SIZEDARR = @import("../system/com.zig").HYPER_SIZEDARR;
const IAdviseSink = @import("../system/com.zig").IAdviseSink;
const IBindCtx = @import("../system/com.zig").IBindCtx;
const IBindHost = @import("../system/com.zig").IBindHost;
const IClassFactory = @import("../system/com.zig").IClassFactory;
const IDataObject = @import("../system/com.zig").IDataObject;
const IDispatch = @import("../system/com.zig").IDispatch;
const IDLDESC = @import("../system/com.zig").IDLDESC;
const IEnumFORMATETC = @import("../system/com.zig").IEnumFORMATETC;
const IEnumSTATDATA = @import("../system/com.zig").IEnumSTATDATA;
const IEnumUnknown = @import("../system/com.zig").IEnumUnknown;
const IErrorLog = @import("../system/com.zig").IErrorLog;
const IMoniker = @import("../system/com.zig").IMoniker;
const INVOKEKIND = @import("../system/com.zig").INVOKEKIND;
const IPersist = @import("../system/com.zig").IPersist;
const IPersistStorage = @import("../system/com/structured_storage.zig").IPersistStorage;
const IPersistStream = @import("../system/com.zig").IPersistStream;
const IPropertyBag = @import("../system/com/structured_storage.zig").IPropertyBag;
const IPropertyBag2 = @import("../system/com/structured_storage.zig").IPropertyBag2;
const IServiceProvider = @import("../system/com.zig").IServiceProvider;
const IStorage = @import("../system/com/structured_storage.zig").IStorage;
const IStream = @import("../system/com.zig").IStream;
const ITypeInfo = @import("../system/com.zig").ITypeInfo;
const ITypeLib = @import("../system/com.zig").ITypeLib;
const IUnknown = @import("../system/com.zig").IUnknown;
const LOGPALETTE = @import("../graphics/gdi.zig").LOGPALETTE;
const LONG_SIZEDARR = @import("../system/com.zig").LONG_SIZEDARR;
const LPARAM = @import("../foundation.zig").LPARAM;
const LRESULT = @import("../foundation.zig").LRESULT;
const MSG = @import("../ui/windows_and_messaging.zig").MSG;
const OPENFILENAMEA = @import("../ui/controls/dialogs.zig").OPENFILENAMEA;
const OPENFILENAMEW = @import("../ui/controls/dialogs.zig").OPENFILENAMEW;
const POINT = @import("../foundation.zig").POINT;
const POINTL = @import("../foundation.zig").POINTL;
const PROPSHEETHEADERA_V2 = @import("../ui/controls.zig").PROPSHEETHEADERA_V2;
const PROPSHEETHEADERW_V2 = @import("../ui/controls.zig").PROPSHEETHEADERW_V2;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const RECTL = @import("../foundation.zig").RECTL;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const SAFEARRAYBOUND = @import("../system/com.zig").SAFEARRAYBOUND;
const SHORT_SIZEDARR = @import("../system/com.zig").SHORT_SIZEDARR;
const SIZE = @import("../foundation.zig").SIZE;
const STGMEDIUM = @import("../system/com.zig").STGMEDIUM;
const SYSKIND = @import("../system/com.zig").SYSKIND;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const TEXTMETRICW = @import("../graphics/gdi.zig").TEXTMETRICW;
const TYPEDESC = @import("../system/com.zig").TYPEDESC;
const TYPEKIND = @import("../system/com.zig").TYPEKIND;
const VARDESC = @import("../system/com.zig").VARDESC;
const VARIANT = @import("../system/com.zig").VARIANT;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "LPFNOLEUIHOOK")) {
        _ = LPFNOLEUIHOOK;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
