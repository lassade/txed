//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (105)
//--------------------------------------------------------------------------------
pub const CGD_DEFAULT = @as(u32, 0);
pub const CGD_UNKNOWN_PROPERTY = @as(u32, 0);
pub const CGD_STRING_PROPERTY = @as(u32, 1);
pub const CGD_DATE_PROPERTY = @as(u32, 2);
pub const CGD_BINARY_PROPERTY = @as(u32, 4);
pub const CGD_ARRAY_NODE = @as(u32, 8);
pub const CLSID_ContactAggregationManager = Guid.initString("96c8ad95-c199-44de-b34e-ac33c442df39");
pub const CONTACTPROP_PUB_NOTES = "Notes";
pub const CONTACTPROP_PUB_MAILER = "Mailer";
pub const CONTACTPROP_PUB_PROGID = "ProgID";
pub const CONTACTPROP_PUB_GENDER = "Gender";
pub const CONTACTPROP_PUB_GENDER_UNSPECIFIED = "Unspecified";
pub const CONTACTPROP_PUB_GENDER_MALE = "Male";
pub const CONTACTPROP_PUB_GENDER_FEMALE = "Female";
pub const CONTACTPROP_PUB_CREATIONDATE = "CreationDate";
pub const CONTACTPROP_PUB_L1_CONTACTIDCOLLECTION = "ContactIDCollection";
pub const CONTACTPROP_PUB_L2_CONTACTID = "/ContactID";
pub const CONTACTPROP_PUB_L3_VALUE = "/Value";
pub const CONTACTPROP_PUB_L1_NAMECOLLECTION = "NameCollection";
pub const CONTACTPROP_PUB_L2_NAME = "/Name";
pub const CONTACTPROP_PUB_L3_FORMATTEDNAME = "/FormattedName";
pub const CONTACTPROP_PUB_L3_PHONETIC = "/Phonetic";
pub const CONTACTPROP_PUB_L3_PREFIX = "/Prefix";
pub const CONTACTPROP_PUB_L3_TITLE = "/Title";
pub const CONTACTPROP_PUB_L3_GIVENNAME = "/GivenName";
pub const CONTACTPROP_PUB_L3_FAMILYNAME = "/FamilyName";
pub const CONTACTPROP_PUB_L3_MIDDLENAME = "/MiddleName";
pub const CONTACTPROP_PUB_L3_GENERATION = "/Generation";
pub const CONTACTPROP_PUB_L3_SUFFIX = "/Suffix";
pub const CONTACTPROP_PUB_L3_NICKNAME = "/NickName";
pub const CONTACTPROP_PUB_L1_POSITIONCOLLECTION = "PositionCollection";
pub const CONTACTPROP_PUB_L2_POSITION = "/Position";
pub const CONTACTPROP_PUB_L3_ORGANIZATION = "/Organization";
pub const CONTACTPROP_PUB_L3_COMPANY = "/Company";
pub const CONTACTPROP_PUB_L3_DEPARTMENT = "/Department";
pub const CONTACTPROP_PUB_L3_OFFICE = "/Office";
pub const CONTACTPROP_PUB_L3_JOB_TITLE = "/JobTitle";
pub const CONTACTPROP_PUB_L3_PROFESSION = "/Profession";
pub const CONTACTPROP_PUB_L3_ROLE = "/Role";
pub const CONTACTPROP_PUB_L1_PERSONCOLLECTION = "PersonCollection";
pub const CONTACTPROP_PUB_L2_PERSON = "/Person";
pub const CONTACTPROP_PUB_L3_PERSONID = "/PersonID";
pub const CONTACTPROP_PUB_L1_DATECOLLECTION = "DateCollection";
pub const CONTACTPROP_PUB_L2_DATE = "/Date";
pub const CONTACTPROP_PUB_L1_EMAILADDRESSCOLLECTION = "EmailAddressCollection";
pub const CONTACTPROP_PUB_L2_EMAILADDRESS = "/EmailAddress";
pub const CONTACTPROP_PUB_L3_ADDRESS = "/Address";
pub const CONTACTPROP_PUB_L3_TYPE = "/Type";
pub const CONTACTPROP_PUB_L1_CERTIFICATECOLLECTION = "CertificateCollection";
pub const CONTACTPROP_PUB_L2_CERTIFICATE = "/Certificate";
pub const CONTACTPROP_PUB_L3_THUMBPRINT = "/ThumbPrint";
pub const CONTACTPROP_PUB_L1_PHONENUMBERCOLLECTION = "PhoneNumberCollection";
pub const CONTACTPROP_PUB_L2_PHONENUMBER = "/PhoneNumber";
pub const CONTACTPROP_PUB_L3_NUMBER = "/Number";
pub const CONTACTPROP_PUB_L3_ALTERNATE = "/Alternate";
pub const CONTACTPROP_PUB_L1_PHYSICALADDRESSCOLLECTION = "PhysicalAddressCollection";
pub const CONTACTPROP_PUB_L2_PHYSICALADDRESS = "/PhysicalAddress";
pub const CONTACTPROP_PUB_L3_ADDRESSLABEL = "/AddressLabel";
pub const CONTACTPROP_PUB_L3_STREET = "/Street";
pub const CONTACTPROP_PUB_L3_LOCALITY = "/Locality";
pub const CONTACTPROP_PUB_L3_REGION = "/Region";
pub const CONTACTPROP_PUB_L3_POSTALCODE = "/PostalCode";
pub const CONTACTPROP_PUB_L3_COUNTRY = "/Country";
pub const CONTACTPROP_PUB_L3_POBOX = "/POBox";
pub const CONTACTPROP_PUB_L3_EXTENDEDADDRESS = "/ExtendedAddress";
pub const CONTACTPROP_PUB_L1_IMADDRESSCOLLECTION = "IMAddressCollection";
pub const CONTACTPROP_PUB_L2_IMADDRESSENTRY = "/IMAddress";
pub const CONTACTPROP_PUB_L3_PROTOCOL = "/Protocol";
pub const CONTACTPROP_PUB_L1_URLCOLLECTION = "UrlCollection";
pub const CONTACTPROP_PUB_L2_URL = "/Url";
pub const CONTACTPROP_PUB_L1_PHOTOCOLLECTION = "PhotoCollection";
pub const CONTACTPROP_PUB_L2_PHOTO = "/Photo";
pub const CONTACTPROP_PUB_L3_URL = "/Url";
pub const CONTACTLABEL_PUB_PREFERRED = "Preferred";
pub const CONTACTLABEL_PUB_PERSONAL = "Personal";
pub const CONTACTLABEL_PUB_BUSINESS = "Business";
pub const CONTACTLABEL_PUB_OTHER = "Other";
pub const CONTACTLABEL_PUB_VOICE = "Voice";
pub const CONTACTLABEL_PUB_MOBILE = "Mobile";
pub const CONTACTLABEL_PUB_PCS = "PCS";
pub const CONTACTLABEL_PUB_CELLULAR = "Cellular";
pub const CONTACTLABEL_PUB_CAR = "Car";
pub const CONTACTLABEL_PUB_PAGER = "Pager";
pub const CONTACTLABEL_PUB_TTY = "TTY";
pub const CONTACTLABEL_PUB_FAX = "Fax";
pub const CONTACTLABEL_PUB_VIDEO = "Video";
pub const CONTACTLABEL_PUB_MODEM = "Modem";
pub const CONTACTLABEL_PUB_BBS = "BBS";
pub const CONTACTLABEL_PUB_ISDN = "ISDN";
pub const CONTACTLABEL_PUB_AGENT = "Agent";
pub const CONTACTLABEL_PUB_DOMESTIC = "Domestic";
pub const CONTACTLABEL_PUB_INTERNATIONAL = "International";
pub const CONTACTLABEL_PUB_POSTAL = "Postal";
pub const CONTACTLABEL_PUB_PARCEL = "Parcel";
pub const CONTACTLABEL_PUB_USERTILE = "UserTile";
pub const CONTACTLABEL_PUB_LOGO = "Logo";
pub const CONTACTLABEL_WAB_SPOUSE = "wab:Spouse";
pub const CONTACTLABEL_WAB_CHILD = "wab:Child";
pub const CONTACTLABEL_WAB_MANAGER = "wab:Manager";
pub const CONTACTLABEL_WAB_ASSISTANT = "wab:Assistant";
pub const CONTACTLABEL_WAB_BIRTHDAY = "wab:Birthday";
pub const CONTACTLABEL_WAB_ANNIVERSARY = "wab:Anniversary";
pub const CONTACTLABEL_WAB_SOCIALNETWORK = "wab:SocialNetwork";
pub const CONTACTLABEL_WAB_SCHOOL = "wab:School";
pub const CONTACTLABEL_WAB_WISHLIST = "wab:WishList";

//--------------------------------------------------------------------------------
// Section: Types (21)
//--------------------------------------------------------------------------------
const CLSID_Contact_Value = Guid.initString("61b68808-8eee-4fd1-acb8-3d804c8db056");
pub const CLSID_Contact = &CLSID_Contact_Value;

const CLSID_ContactManager_Value = Guid.initString("7165c8ab-af88-42bd-86fd-5310b4285a02");
pub const CLSID_ContactManager = &CLSID_ContactManager_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactManager_Value = Guid.initString("ad553d98-deb1-474a-8e17-fc0c2075b738");
pub const IID_IContactManager = &IID_IContactManager_Value;
pub const IContactManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IContactManager,
            psz_app_name: ?[*:0]const u16,
            psz_app_version: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: *const fn (
            self: *const IContactManager,
            psz_contact_i_d: ?[*:0]const u16,
            pp_contact: ?*?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MergeContactIDs: *const fn (
            self: *const IContactManager,
            psz_new_contact_i_d: ?[*:0]const u16,
            psz_old_contact_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMeContact: *const fn (
            self: *const IContactManager,
            pp_me_contact: ?*?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMeContact: *const fn (
            self: *const IContactManager,
            p_me_contact: ?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContactCollection: *const fn (
            self: *const IContactManager,
            pp_contact_collection: ?*?*IContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psz_app_name_: ?[*:0]const u16, psz_app_version_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IContactManager, @ptrCast(self)), psz_app_name_, psz_app_version_);
            }
            pub inline fn load(self: *const T, psz_contact_i_d_: ?[*:0]const u16, pp_contact_: ?*?*IContact) HRESULT {
                return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).Load(@as(*const IContactManager, @ptrCast(self)), psz_contact_i_d_, pp_contact_);
            }
            pub inline fn mergeContactIDs(self: *const T, psz_new_contact_i_d_: ?[*:0]const u16, psz_old_contact_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).MergeContactIDs(@as(*const IContactManager, @ptrCast(self)), psz_new_contact_i_d_, psz_old_contact_i_d_);
            }
            pub inline fn getMeContact(self: *const T, pp_me_contact_: ?*?*IContact) HRESULT {
                return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).GetMeContact(@as(*const IContactManager, @ptrCast(self)), pp_me_contact_);
            }
            pub inline fn setMeContact(self: *const T, p_me_contact_: ?*IContact) HRESULT {
                return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).SetMeContact(@as(*const IContactManager, @ptrCast(self)), p_me_contact_);
            }
            pub inline fn getContactCollection(self: *const T, pp_contact_collection_: ?*?*IContactCollection) HRESULT {
                return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).GetContactCollection(@as(*const IContactManager, @ptrCast(self)), pp_contact_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactCollection_Value = Guid.initString("b6afa338-d779-11d9-8bde-f66bad1e3f3a");
pub const IID_IContactCollection = &IID_IContactCollection_Value;
pub const IContactCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: *const fn (
            self: *const IContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IContactCollection,
            pp_contact: ?*?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IContactCollection.VTable, @ptrCast(self.vtable)).Reset(@as(*const IContactCollection, @ptrCast(self)));
            }
            pub inline fn next(self: *const T) HRESULT {
                return @as(*const IContactCollection.VTable, @ptrCast(self.vtable)).Next(@as(*const IContactCollection, @ptrCast(self)));
            }
            pub inline fn getCurrent(self: *const T, pp_contact_: ?*?*IContact) HRESULT {
                return @as(*const IContactCollection.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IContactCollection, @ptrCast(self)), pp_contact_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactProperties_Value = Guid.initString("70dd27dd-5cbd-46e8-bef0-23b6b346288f");
pub const IID_IContactProperties = &IID_IContactProperties_Value;
pub const IContactProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetString: *const fn (
            self: *const IContactProperties,
            psz_property_name: ?[*:0]const u16,
            dw_flags: u32,
            psz_value: [*:0]u16,
            cch_value: u32,
            pdwcch_property_value_required: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDate: *const fn (
            self: *const IContactProperties,
            psz_property_name: ?[*:0]const u16,
            dw_flags: u32,
            pft_date_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBinary: *const fn (
            self: *const IContactProperties,
            psz_property_name: ?[*:0]const u16,
            dw_flags: u32,
            psz_content_type: [*:0]u16,
            cch_content_type: u32,
            pdwcch_content_type_required: ?*u32,
            pp_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLabels: *const fn (
            self: *const IContactProperties,
            psz_array_element_name: ?[*:0]const u16,
            dw_flags: u32,
            psz_labels: [*:0]u16,
            cch_labels: u32,
            pdwcch_labels_required: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetString: *const fn (
            self: *const IContactProperties,
            psz_property_name: ?[*:0]const u16,
            dw_flags: u32,
            psz_value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDate: *const fn (
            self: *const IContactProperties,
            psz_property_name: ?[*:0]const u16,
            dw_flags: u32,
            ft_date_time: FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBinary: *const fn (
            self: *const IContactProperties,
            psz_property_name: ?[*:0]const u16,
            dw_flags: u32,
            psz_content_type: ?[*:0]const u16,
            p_stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLabels: *const fn (
            self: *const IContactProperties,
            psz_array_element_name: ?[*:0]const u16,
            dw_flags: u32,
            dw_label_count: u32,
            ppsz_labels: [*]?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateArrayNode: *const fn (
            self: *const IContactProperties,
            psz_array_name: ?[*:0]const u16,
            dw_flags: u32,
            f_append: BOOL,
            psz_new_array_element_name: [*:0]u16,
            cch_new_array_element_name: u32,
            pdwcch_new_array_element_name_required: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProperty: *const fn (
            self: *const IContactProperties,
            psz_property_name: ?[*:0]const u16,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteArrayNode: *const fn (
            self: *const IContactProperties,
            psz_array_element_name: ?[*:0]const u16,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteLabels: *const fn (
            self: *const IContactProperties,
            psz_array_element_name: ?[*:0]const u16,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyCollection: *const fn (
            self: *const IContactProperties,
            pp_property_collection: ?*?*IContactPropertyCollection,
            dw_flags: u32,
            psz_multi_value_name: ?[*:0]const u16,
            dw_label_count: u32,
            ppsz_labels: [*]?PWSTR,
            f_any_label_matches: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getString(self: *const T, psz_property_name_: ?[*:0]const u16, dw_flags_: u32, psz_value_: [*:0]u16, cch_value_: u32, pdwcch_property_value_required_: ?*u32) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetString(@as(*const IContactProperties, @ptrCast(self)), psz_property_name_, dw_flags_, psz_value_, cch_value_, pdwcch_property_value_required_);
            }
            pub inline fn getDate(self: *const T, psz_property_name_: ?[*:0]const u16, dw_flags_: u32, pft_date_time_: ?*FILETIME) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetDate(@as(*const IContactProperties, @ptrCast(self)), psz_property_name_, dw_flags_, pft_date_time_);
            }
            pub inline fn getBinary(self: *const T, psz_property_name_: ?[*:0]const u16, dw_flags_: u32, psz_content_type_: [*:0]u16, cch_content_type_: u32, pdwcch_content_type_required_: ?*u32, pp_stream_: ?*?*IStream) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetBinary(@as(*const IContactProperties, @ptrCast(self)), psz_property_name_, dw_flags_, psz_content_type_, cch_content_type_, pdwcch_content_type_required_, pp_stream_);
            }
            pub inline fn getLabels(self: *const T, psz_array_element_name_: ?[*:0]const u16, dw_flags_: u32, psz_labels_: [*:0]u16, cch_labels_: u32, pdwcch_labels_required_: ?*u32) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetLabels(@as(*const IContactProperties, @ptrCast(self)), psz_array_element_name_, dw_flags_, psz_labels_, cch_labels_, pdwcch_labels_required_);
            }
            pub inline fn setString(self: *const T, psz_property_name_: ?[*:0]const u16, dw_flags_: u32, psz_value_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).SetString(@as(*const IContactProperties, @ptrCast(self)), psz_property_name_, dw_flags_, psz_value_);
            }
            pub inline fn setDate(self: *const T, psz_property_name_: ?[*:0]const u16, dw_flags_: u32, ft_date_time_: FILETIME) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).SetDate(@as(*const IContactProperties, @ptrCast(self)), psz_property_name_, dw_flags_, ft_date_time_);
            }
            pub inline fn setBinary(self: *const T, psz_property_name_: ?[*:0]const u16, dw_flags_: u32, psz_content_type_: ?[*:0]const u16, p_stream_: ?*IStream) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).SetBinary(@as(*const IContactProperties, @ptrCast(self)), psz_property_name_, dw_flags_, psz_content_type_, p_stream_);
            }
            pub inline fn setLabels(self: *const T, psz_array_element_name_: ?[*:0]const u16, dw_flags_: u32, dw_label_count_: u32, ppsz_labels_: [*]?PWSTR) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).SetLabels(@as(*const IContactProperties, @ptrCast(self)), psz_array_element_name_, dw_flags_, dw_label_count_, ppsz_labels_);
            }
            pub inline fn createArrayNode(self: *const T, psz_array_name_: ?[*:0]const u16, dw_flags_: u32, f_append_: BOOL, psz_new_array_element_name_: [*:0]u16, cch_new_array_element_name_: u32, pdwcch_new_array_element_name_required_: ?*u32) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).CreateArrayNode(@as(*const IContactProperties, @ptrCast(self)), psz_array_name_, dw_flags_, f_append_, psz_new_array_element_name_, cch_new_array_element_name_, pdwcch_new_array_element_name_required_);
            }
            pub inline fn deleteProperty(self: *const T, psz_property_name_: ?[*:0]const u16, dw_flags_: u32) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).DeleteProperty(@as(*const IContactProperties, @ptrCast(self)), psz_property_name_, dw_flags_);
            }
            pub inline fn deleteArrayNode(self: *const T, psz_array_element_name_: ?[*:0]const u16, dw_flags_: u32) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).DeleteArrayNode(@as(*const IContactProperties, @ptrCast(self)), psz_array_element_name_, dw_flags_);
            }
            pub inline fn deleteLabels(self: *const T, psz_array_element_name_: ?[*:0]const u16, dw_flags_: u32) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).DeleteLabels(@as(*const IContactProperties, @ptrCast(self)), psz_array_element_name_, dw_flags_);
            }
            pub inline fn getPropertyCollection(self: *const T, pp_property_collection_: ?*?*IContactPropertyCollection, dw_flags_: u32, psz_multi_value_name_: ?[*:0]const u16, dw_label_count_: u32, ppsz_labels_: [*]?PWSTR, f_any_label_matches_: BOOL) HRESULT {
                return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetPropertyCollection(@as(*const IContactProperties, @ptrCast(self)), pp_property_collection_, dw_flags_, psz_multi_value_name_, dw_label_count_, ppsz_labels_, f_any_label_matches_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContact_Value = Guid.initString("f941b671-bda7-4f77-884a-f46462f226a7");
pub const IID_IContact = &IID_IContact_Value;
pub const IContact = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetContactID: *const fn (
            self: *const IContact,
            psz_contact_i_d: [*:0]u16,
            cch_contact_i_d: u32,
            pdwcch_contact_i_d_required: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn (
            self: *const IContact,
            psz_path: [*:0]u16,
            cch_path: u32,
            pdwcch_path_required: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitChanges: *const fn (
            self: *const IContact,
            dw_commit_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getContactID(self: *const T, psz_contact_i_d_: [*:0]u16, cch_contact_i_d_: u32, pdwcch_contact_i_d_required_: ?*u32) HRESULT {
                return @as(*const IContact.VTable, @ptrCast(self.vtable)).GetContactID(@as(*const IContact, @ptrCast(self)), psz_contact_i_d_, cch_contact_i_d_, pdwcch_contact_i_d_required_);
            }
            pub inline fn getPath(self: *const T, psz_path_: [*:0]u16, cch_path_: u32, pdwcch_path_required_: ?*u32) HRESULT {
                return @as(*const IContact.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IContact, @ptrCast(self)), psz_path_, cch_path_, pdwcch_path_required_);
            }
            pub inline fn commitChanges(self: *const T, dw_commit_flags_: u32) HRESULT {
                return @as(*const IContact.VTable, @ptrCast(self.vtable)).CommitChanges(@as(*const IContact, @ptrCast(self)), dw_commit_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactPropertyCollection_Value = Guid.initString("ffd3adf8-fa64-4328-b1b6-2e0db509cb3c");
pub const IID_IContactPropertyCollection = &IID_IContactPropertyCollection_Value;
pub const IContactPropertyCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: *const fn (
            self: *const IContactPropertyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IContactPropertyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyName: *const fn (
            self: *const IContactPropertyCollection,
            psz_property_name: [*:0]u16,
            cch_property_name: u32,
            pdwcch_property_name_required: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyType: *const fn (
            self: *const IContactPropertyCollection,
            pdw_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyVersion: *const fn (
            self: *const IContactPropertyCollection,
            pdw_version: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyModificationDate: *const fn (
            self: *const IContactPropertyCollection,
            pft_modification_date: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyArrayElementID: *const fn (
            self: *const IContactPropertyCollection,
            psz_array_element_i_d: [*:0]u16,
            cch_array_element_i_d: u32,
            pdwcch_array_element_i_d_required: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).Reset(@as(*const IContactPropertyCollection, @ptrCast(self)));
            }
            pub inline fn next(self: *const T) HRESULT {
                return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).Next(@as(*const IContactPropertyCollection, @ptrCast(self)));
            }
            pub inline fn getPropertyName(self: *const T, psz_property_name_: [*:0]u16, cch_property_name_: u32, pdwcch_property_name_required_: ?*u32) HRESULT {
                return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyName(@as(*const IContactPropertyCollection, @ptrCast(self)), psz_property_name_, cch_property_name_, pdwcch_property_name_required_);
            }
            pub inline fn getPropertyType(self: *const T, pdw_type_: ?*u32) HRESULT {
                return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyType(@as(*const IContactPropertyCollection, @ptrCast(self)), pdw_type_);
            }
            pub inline fn getPropertyVersion(self: *const T, pdw_version_: ?*u32) HRESULT {
                return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyVersion(@as(*const IContactPropertyCollection, @ptrCast(self)), pdw_version_);
            }
            pub inline fn getPropertyModificationDate(self: *const T, pft_modification_date_: ?*FILETIME) HRESULT {
                return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyModificationDate(@as(*const IContactPropertyCollection, @ptrCast(self)), pft_modification_date_);
            }
            pub inline fn getPropertyArrayElementID(self: *const T, psz_array_element_i_d_: [*:0]u16, cch_array_element_i_d_: u32, pdwcch_array_element_i_d_required_: ?*u32) HRESULT {
                return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyArrayElementID(@as(*const IContactPropertyCollection, @ptrCast(self)), psz_array_element_i_d_, cch_array_element_i_d_, pdwcch_array_element_i_d_required_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS = enum(i32) {
    LOCAL = 0,
    EXTERNAL = 1,
};
pub const CA_CREATE_LOCAL = CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS.LOCAL;
pub const CA_CREATE_EXTERNAL = CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS.EXTERNAL;

pub const CONTACT_AGGREGATION_COLLECTION_OPTIONS = enum(i32) {
    DEFAULT = 0,
    INCLUDE_EXTERNAL = 1,
    EXTERNAL_ONLY = 2,
};
pub const CACO_DEFAULT = CONTACT_AGGREGATION_COLLECTION_OPTIONS.DEFAULT;
pub const CACO_INCLUDE_EXTERNAL = CONTACT_AGGREGATION_COLLECTION_OPTIONS.INCLUDE_EXTERNAL;
pub const CACO_EXTERNAL_ONLY = CONTACT_AGGREGATION_COLLECTION_OPTIONS.EXTERNAL_ONLY;

pub const CONTACT_AGGREGATION_BLOB = extern struct {
    dwCount: u32,
    lpb: ?*u8,
};

const IID_IContactAggregationManager_Value = Guid.initString("1d865989-4b1f-4b60-8f34-c2ad468b2b50");
pub const IID_IContactAggregationManager = &IID_IContactAggregationManager_Value;
pub const IContactAggregationManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetVersionInfo: *const fn (
            self: *const IContactAggregationManager,
            pl_major_version: ?*i32,
            pl_minor_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOrOpenGroup: *const fn (
            self: *const IContactAggregationManager,
            p_group_name: ?[*:0]const u16,
            options: CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS,
            p_created_group: ?*BOOL,
            pp_group: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateExternalContact: *const fn (
            self: *const IContactAggregationManager,
            pp_item: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateServerPerson: *const fn (
            self: *const IContactAggregationManager,
            pp_server_person: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateServerContactLink: *const fn (
            self: *const IContactAggregationManager,
            pp_server_contact_link: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: *const fn (
            self: *const IContactAggregationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenAggregateContact: *const fn (
            self: *const IContactAggregationManager,
            p_item_id: ?[*:0]const u16,
            pp_item: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenContact: *const fn (
            self: *const IContactAggregationManager,
            p_item_id: ?[*:0]const u16,
            pp_item: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenServerContactLink: *const fn (
            self: *const IContactAggregationManager,
            p_item_id: ?[*:0]const u16,
            pp_item: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenServerPerson: *const fn (
            self: *const IContactAggregationManager,
            p_item_id: ?[*:0]const u16,
            pp_item: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Contacts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationManager,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            pp_items: ?*?*IContactAggregationContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AggregateContacts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationManager,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            pp_aggregates: ?*?*IContactAggregationAggregateCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Groups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationManager,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            pp_groups: ?*?*IContactAggregationGroupCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerPersons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationManager,
            pp_server_person_collection: ?*?*IContactAggregationServerPersonCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerContactLinks: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationManager,
            p_person_item_id: ?[*:0]const u16,
            pp_server_contact_link_collection: ?*?*IContactAggregationLinkCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getVersionInfo(self: *const T, pl_major_version_: ?*i32, pl_minor_version_: ?*i32) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).GetVersionInfo(@as(*const IContactAggregationManager, @ptrCast(self)), pl_major_version_, pl_minor_version_);
            }
            pub inline fn createOrOpenGroup(self: *const T, p_group_name_: ?[*:0]const u16, options_: CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS, p_created_group_: ?*BOOL, pp_group_: ?*?*IContactAggregationGroup) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).CreateOrOpenGroup(@as(*const IContactAggregationManager, @ptrCast(self)), p_group_name_, options_, p_created_group_, pp_group_);
            }
            pub inline fn createExternalContact(self: *const T, pp_item_: ?*?*IContactAggregationContact) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).CreateExternalContact(@as(*const IContactAggregationManager, @ptrCast(self)), pp_item_);
            }
            pub inline fn createServerPerson(self: *const T, pp_server_person_: ?*?*IContactAggregationServerPerson) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).CreateServerPerson(@as(*const IContactAggregationManager, @ptrCast(self)), pp_server_person_);
            }
            pub inline fn createServerContactLink(self: *const T, pp_server_contact_link_: ?*?*IContactAggregationLink) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).CreateServerContactLink(@as(*const IContactAggregationManager, @ptrCast(self)), pp_server_contact_link_);
            }
            pub inline fn flush(self: *const T) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).Flush(@as(*const IContactAggregationManager, @ptrCast(self)));
            }
            pub inline fn openAggregateContact(self: *const T, p_item_id_: ?[*:0]const u16, pp_item_: ?*?*IContactAggregationAggregate) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).OpenAggregateContact(@as(*const IContactAggregationManager, @ptrCast(self)), p_item_id_, pp_item_);
            }
            pub inline fn openContact(self: *const T, p_item_id_: ?[*:0]const u16, pp_item_: ?*?*IContactAggregationContact) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).OpenContact(@as(*const IContactAggregationManager, @ptrCast(self)), p_item_id_, pp_item_);
            }
            pub inline fn openServerContactLink(self: *const T, p_item_id_: ?[*:0]const u16, pp_item_: ?*?*IContactAggregationLink) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).OpenServerContactLink(@as(*const IContactAggregationManager, @ptrCast(self)), p_item_id_, pp_item_);
            }
            pub inline fn openServerPerson(self: *const T, p_item_id_: ?[*:0]const u16, pp_item_: ?*?*IContactAggregationServerPerson) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).OpenServerPerson(@as(*const IContactAggregationManager, @ptrCast(self)), p_item_id_, pp_item_);
            }
            pub inline fn getContacts(self: *const T, options_: CONTACT_AGGREGATION_COLLECTION_OPTIONS, pp_items_: ?*?*IContactAggregationContactCollection) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_Contacts(@as(*const IContactAggregationManager, @ptrCast(self)), options_, pp_items_);
            }
            pub inline fn getAggregateContacts(self: *const T, options_: CONTACT_AGGREGATION_COLLECTION_OPTIONS, pp_aggregates_: ?*?*IContactAggregationAggregateCollection) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_AggregateContacts(@as(*const IContactAggregationManager, @ptrCast(self)), options_, pp_aggregates_);
            }
            pub inline fn getGroups(self: *const T, options_: CONTACT_AGGREGATION_COLLECTION_OPTIONS, pp_groups_: ?*?*IContactAggregationGroupCollection) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_Groups(@as(*const IContactAggregationManager, @ptrCast(self)), options_, pp_groups_);
            }
            pub inline fn getServerPersons(self: *const T, pp_server_person_collection_: ?*?*IContactAggregationServerPersonCollection) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_ServerPersons(@as(*const IContactAggregationManager, @ptrCast(self)), pp_server_person_collection_);
            }
            pub inline fn getServerContactLinks(self: *const T, p_person_item_id_: ?[*:0]const u16, pp_server_contact_link_collection_: ?*?*IContactAggregationLinkCollection) HRESULT {
                return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_ServerContactLinks(@as(*const IContactAggregationManager, @ptrCast(self)), p_person_item_id_, pp_server_contact_link_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationContact_Value = Guid.initString("1eb22e86-4c86-41f0-9f9f-c251e9fda6c3");
pub const IID_IContactAggregationContact = &IID_IContactAggregationContact_Value;
pub const IContactAggregationContact = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: *const fn (
            self: *const IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveToAggregate: *const fn (
            self: *const IContactAggregationContact,
            p_aggregate_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlink: *const fn (
            self: *const IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccountId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            pp_account_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AccountId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            p_account_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AggregateId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            pp_aggregate_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            pp_item_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsMe: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            p_is_me: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsExternal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            p_is_external: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSourceId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            p_network_source_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSourceId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            network_source_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSourceIdString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            pp_network_source_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSourceIdString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            p_network_source_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            pp_remote_object_id: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            p_remote_object_id: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SyncIdentityHash: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            pp_sync_identity_hash: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SyncIdentityHash: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContact,
            p_sync_identity_hash: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).Delete(@as(*const IContactAggregationContact, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationContact, @ptrCast(self)));
            }
            pub inline fn moveToAggregate(self: *const T, p_aggregate_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).MoveToAggregate(@as(*const IContactAggregationContact, @ptrCast(self)), p_aggregate_id_);
            }
            pub inline fn unlink(self: *const T) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).Unlink(@as(*const IContactAggregationContact, @ptrCast(self)));
            }
            pub inline fn getAccountId(self: *const T, pp_account_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_AccountId(@as(*const IContactAggregationContact, @ptrCast(self)), pp_account_id_);
            }
            pub inline fn putAccountId(self: *const T, p_account_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_AccountId(@as(*const IContactAggregationContact, @ptrCast(self)), p_account_id_);
            }
            pub inline fn getAggregateId(self: *const T, pp_aggregate_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_AggregateId(@as(*const IContactAggregationContact, @ptrCast(self)), pp_aggregate_id_);
            }
            pub inline fn getId(self: *const T, pp_item_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationContact, @ptrCast(self)), pp_item_id_);
            }
            pub inline fn getIsMe(self: *const T, p_is_me_: ?*BOOL) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_IsMe(@as(*const IContactAggregationContact, @ptrCast(self)), p_is_me_);
            }
            pub inline fn getIsExternal(self: *const T, p_is_external_: ?*BOOL) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_IsExternal(@as(*const IContactAggregationContact, @ptrCast(self)), p_is_external_);
            }
            pub inline fn getNetworkSourceId(self: *const T, p_network_source_id_: ?*u32) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_NetworkSourceId(@as(*const IContactAggregationContact, @ptrCast(self)), p_network_source_id_);
            }
            pub inline fn putNetworkSourceId(self: *const T, network_source_id_: u32) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_NetworkSourceId(@as(*const IContactAggregationContact, @ptrCast(self)), network_source_id_);
            }
            pub inline fn getNetworkSourceIdString(self: *const T, pp_network_source_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_NetworkSourceIdString(@as(*const IContactAggregationContact, @ptrCast(self)), pp_network_source_id_);
            }
            pub inline fn putNetworkSourceIdString(self: *const T, p_network_source_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_NetworkSourceIdString(@as(*const IContactAggregationContact, @ptrCast(self)), p_network_source_id_);
            }
            pub inline fn getRemoteObjectId(self: *const T, pp_remote_object_id_: ?*?*CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_RemoteObjectId(@as(*const IContactAggregationContact, @ptrCast(self)), pp_remote_object_id_);
            }
            pub inline fn putRemoteObjectId(self: *const T, p_remote_object_id_: ?*const CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_RemoteObjectId(@as(*const IContactAggregationContact, @ptrCast(self)), p_remote_object_id_);
            }
            pub inline fn getSyncIdentityHash(self: *const T, pp_sync_identity_hash_: ?*?*CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_SyncIdentityHash(@as(*const IContactAggregationContact, @ptrCast(self)), pp_sync_identity_hash_);
            }
            pub inline fn putSyncIdentityHash(self: *const T, p_sync_identity_hash_: ?*const CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_SyncIdentityHash(@as(*const IContactAggregationContact, @ptrCast(self)), p_sync_identity_hash_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationContactCollection_Value = Guid.initString("826e66fa-81de-43ca-a6fb-8c785cd996c6");
pub const IID_IContactAggregationContactCollection = &IID_IContactAggregationContactCollection_Value;
pub const IContactAggregationContactCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn (
            self: *const IContactAggregationContactCollection,
            pp_item: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn (
            self: *const IContactAggregationContactCollection,
            pp_item: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByIdentityHash: *const fn (
            self: *const IContactAggregationContactCollection,
            p_source_type: ?[*:0]const u16,
            p_account_id: ?[*:0]const u16,
            p_identity_hash: ?*const CONTACT_AGGREGATION_BLOB,
            pp_item: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationContactCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByRemoteId: *const fn (
            self: *const IContactAggregationContactCollection,
            p_source_type: ?[*:0]const u16,
            p_account_id: ?[*:0]const u16,
            p_remote_object_id: ?*const CONTACT_AGGREGATION_BLOB,
            pp_item: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findFirst(self: *const T, pp_item_: ?*?*IContactAggregationContact) HRESULT {
                return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationContactCollection, @ptrCast(self)), pp_item_);
            }
            pub inline fn findNext(self: *const T, pp_item_: ?*?*IContactAggregationContact) HRESULT {
                return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationContactCollection, @ptrCast(self)), pp_item_);
            }
            pub inline fn findFirstByIdentityHash(self: *const T, p_source_type_: ?[*:0]const u16, p_account_id_: ?[*:0]const u16, p_identity_hash_: ?*const CONTACT_AGGREGATION_BLOB, pp_item_: ?*?*IContactAggregationContact) HRESULT {
                return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).FindFirstByIdentityHash(@as(*const IContactAggregationContactCollection, @ptrCast(self)), p_source_type_, p_account_id_, p_identity_hash_, pp_item_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationContactCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn findFirstByRemoteId(self: *const T, p_source_type_: ?[*:0]const u16, p_account_id_: ?[*:0]const u16, p_remote_object_id_: ?*const CONTACT_AGGREGATION_BLOB, pp_item_: ?*?*IContactAggregationContact) HRESULT {
                return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).FindFirstByRemoteId(@as(*const IContactAggregationContactCollection, @ptrCast(self)), p_source_type_, p_account_id_, p_remote_object_id_, pp_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationAggregate_Value = Guid.initString("7ed1c814-cd30-43c8-9b8d-2e489e53d54b");
pub const IID_IContactAggregationAggregate = &IID_IContactAggregationAggregate_Value;
pub const IContactAggregationAggregate = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Save: *const fn (
            self: *const IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentItems: *const fn (
            self: *const IContactAggregationAggregate,
            p_component_items: ?*?*IContactAggregationContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Link: *const fn (
            self: *const IContactAggregationAggregate,
            p_aggregate_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Groups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationAggregate,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            pp_groups: ?*?*IContactAggregationGroupCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiLink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationAggregate,
            pp_anti_link: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiLink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationAggregate,
            p_anti_link: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FavoriteOrder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationAggregate,
            p_favorite_order: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FavoriteOrder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationAggregate,
            favorite_order: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationAggregate,
            pp_item_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationAggregate, @ptrCast(self)));
            }
            pub inline fn getComponentItems(self: *const T, p_component_items_: ?*?*IContactAggregationContactCollection) HRESULT {
                return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).GetComponentItems(@as(*const IContactAggregationAggregate, @ptrCast(self)), p_component_items_);
            }
            pub inline fn link(self: *const T, p_aggregate_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).Link(@as(*const IContactAggregationAggregate, @ptrCast(self)), p_aggregate_id_);
            }
            pub inline fn getGroups(self: *const T, options_: CONTACT_AGGREGATION_COLLECTION_OPTIONS, pp_groups_: ?*?*IContactAggregationGroupCollection) HRESULT {
                return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).get_Groups(@as(*const IContactAggregationAggregate, @ptrCast(self)), options_, pp_groups_);
            }
            pub inline fn getAntiLink(self: *const T, pp_anti_link_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).get_AntiLink(@as(*const IContactAggregationAggregate, @ptrCast(self)), pp_anti_link_);
            }
            pub inline fn putAntiLink(self: *const T, p_anti_link_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).put_AntiLink(@as(*const IContactAggregationAggregate, @ptrCast(self)), p_anti_link_);
            }
            pub inline fn getFavoriteOrder(self: *const T, p_favorite_order_: ?*u32) HRESULT {
                return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).get_FavoriteOrder(@as(*const IContactAggregationAggregate, @ptrCast(self)), p_favorite_order_);
            }
            pub inline fn putFavoriteOrder(self: *const T, favorite_order_: u32) HRESULT {
                return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).put_FavoriteOrder(@as(*const IContactAggregationAggregate, @ptrCast(self)), favorite_order_);
            }
            pub inline fn getId(self: *const T, pp_item_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationAggregate, @ptrCast(self)), pp_item_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationAggregateCollection_Value = Guid.initString("2359f3a6-3a68-40af-98db-0f9eb143c3bb");
pub const IID_IContactAggregationAggregateCollection = &IID_IContactAggregationAggregateCollection_Value;
pub const IContactAggregationAggregateCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn (
            self: *const IContactAggregationAggregateCollection,
            pp_aggregate: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByAntiLinkId: *const fn (
            self: *const IContactAggregationAggregateCollection,
            p_anti_link_id: ?[*:0]const u16,
            pp_aggregate: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn (
            self: *const IContactAggregationAggregateCollection,
            pp_aggregate: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationAggregateCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findFirst(self: *const T, pp_aggregate_: ?*?*IContactAggregationAggregate) HRESULT {
                return @as(*const IContactAggregationAggregateCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationAggregateCollection, @ptrCast(self)), pp_aggregate_);
            }
            pub inline fn findFirstByAntiLinkId(self: *const T, p_anti_link_id_: ?[*:0]const u16, pp_aggregate_: ?*?*IContactAggregationAggregate) HRESULT {
                return @as(*const IContactAggregationAggregateCollection.VTable, @ptrCast(self.vtable)).FindFirstByAntiLinkId(@as(*const IContactAggregationAggregateCollection, @ptrCast(self)), p_anti_link_id_, pp_aggregate_);
            }
            pub inline fn findNext(self: *const T, pp_aggregate_: ?*?*IContactAggregationAggregate) HRESULT {
                return @as(*const IContactAggregationAggregateCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationAggregateCollection, @ptrCast(self)), pp_aggregate_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const IContactAggregationAggregateCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationAggregateCollection, @ptrCast(self)), p_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationGroup_Value = Guid.initString("c93c545f-1284-499b-96af-07372af473e0");
pub const IID_IContactAggregationGroup = &IID_IContactAggregationGroup_Value;
pub const IContactAggregationGroup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: *const fn (
            self: *const IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IContactAggregationGroup,
            p_aggregate_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IContactAggregationGroup,
            p_aggregate_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Members: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationGroup,
            pp_aggregate_contact_collection: ?*?*IContactAggregationAggregateCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GlobalObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationGroup,
            p_global_object_id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GlobalObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationGroup,
            p_global_object_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationGroup,
            pp_item_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationGroup,
            pp_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationGroup,
            p_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).Delete(@as(*const IContactAggregationGroup, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationGroup, @ptrCast(self)));
            }
            pub inline fn add(self: *const T, p_aggregate_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).Add(@as(*const IContactAggregationGroup, @ptrCast(self)), p_aggregate_id_);
            }
            pub inline fn remove(self: *const T, p_aggregate_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).Remove(@as(*const IContactAggregationGroup, @ptrCast(self)), p_aggregate_id_);
            }
            pub inline fn getMembers(self: *const T, pp_aggregate_contact_collection_: ?*?*IContactAggregationAggregateCollection) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).get_Members(@as(*const IContactAggregationGroup, @ptrCast(self)), pp_aggregate_contact_collection_);
            }
            pub inline fn getGlobalObjectId(self: *const T, p_global_object_id_: ?*Guid) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).get_GlobalObjectId(@as(*const IContactAggregationGroup, @ptrCast(self)), p_global_object_id_);
            }
            pub inline fn putGlobalObjectId(self: *const T, p_global_object_id_: ?*const Guid) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).put_GlobalObjectId(@as(*const IContactAggregationGroup, @ptrCast(self)), p_global_object_id_);
            }
            pub inline fn getId(self: *const T, pp_item_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationGroup, @ptrCast(self)), pp_item_id_);
            }
            pub inline fn getName(self: *const T, pp_name_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IContactAggregationGroup, @ptrCast(self)), pp_name_);
            }
            pub inline fn putName(self: *const T, p_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IContactAggregationGroup, @ptrCast(self)), p_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationGroupCollection_Value = Guid.initString("20a19a9c-d2f3-4b83-9143-beffd2cc226d");
pub const IID_IContactAggregationGroupCollection = &IID_IContactAggregationGroupCollection_Value;
pub const IContactAggregationGroupCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn (
            self: *const IContactAggregationGroupCollection,
            pp_group: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByGlobalObjectId: *const fn (
            self: *const IContactAggregationGroupCollection,
            p_global_object_id: ?*const Guid,
            pp_group: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn (
            self: *const IContactAggregationGroupCollection,
            pp_group: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationGroupCollection,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findFirst(self: *const T, pp_group_: ?*?*IContactAggregationGroup) HRESULT {
                return @as(*const IContactAggregationGroupCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationGroupCollection, @ptrCast(self)), pp_group_);
            }
            pub inline fn findFirstByGlobalObjectId(self: *const T, p_global_object_id_: ?*const Guid, pp_group_: ?*?*IContactAggregationGroup) HRESULT {
                return @as(*const IContactAggregationGroupCollection.VTable, @ptrCast(self.vtable)).FindFirstByGlobalObjectId(@as(*const IContactAggregationGroupCollection, @ptrCast(self)), p_global_object_id_, pp_group_);
            }
            pub inline fn findNext(self: *const T, pp_group_: ?*?*IContactAggregationGroup) HRESULT {
                return @as(*const IContactAggregationGroupCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationGroupCollection, @ptrCast(self)), pp_group_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IContactAggregationGroupCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationGroupCollection, @ptrCast(self)), p_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationLink_Value = Guid.initString("b6813323-a183-4654-8627-79b30de3a0ec");
pub const IID_IContactAggregationLink = &IID_IContactAggregationLink_Value;
pub const IContactAggregationLink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: *const fn (
            self: *const IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccountId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            pp_account_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AccountId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            p_account_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            pp_item_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLinkResolved: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            p_is_link_resolved: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsLinkResolved: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            is_link_resolved: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSourceIdString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            pp_network_source_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSourceIdString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            p_network_source_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            pp_remote_object_id: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            p_remote_object_id: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerPerson: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            pp_server_person_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServerPerson: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            p_server_person_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerPersonBaseline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            pp_server_person_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServerPersonBaseline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            p_server_person_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SyncIdentityHash: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            pp_sync_identity_hash: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SyncIdentityHash: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLink,
            p_sync_identity_hash: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).Delete(@as(*const IContactAggregationLink, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationLink, @ptrCast(self)));
            }
            pub inline fn getAccountId(self: *const T, pp_account_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_AccountId(@as(*const IContactAggregationLink, @ptrCast(self)), pp_account_id_);
            }
            pub inline fn putAccountId(self: *const T, p_account_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_AccountId(@as(*const IContactAggregationLink, @ptrCast(self)), p_account_id_);
            }
            pub inline fn getId(self: *const T, pp_item_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationLink, @ptrCast(self)), pp_item_id_);
            }
            pub inline fn getIsLinkResolved(self: *const T, p_is_link_resolved_: ?*BOOL) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_IsLinkResolved(@as(*const IContactAggregationLink, @ptrCast(self)), p_is_link_resolved_);
            }
            pub inline fn putIsLinkResolved(self: *const T, is_link_resolved_: BOOL) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_IsLinkResolved(@as(*const IContactAggregationLink, @ptrCast(self)), is_link_resolved_);
            }
            pub inline fn getNetworkSourceIdString(self: *const T, pp_network_source_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_NetworkSourceIdString(@as(*const IContactAggregationLink, @ptrCast(self)), pp_network_source_id_);
            }
            pub inline fn putNetworkSourceIdString(self: *const T, p_network_source_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_NetworkSourceIdString(@as(*const IContactAggregationLink, @ptrCast(self)), p_network_source_id_);
            }
            pub inline fn getRemoteObjectId(self: *const T, pp_remote_object_id_: ?*?*CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_RemoteObjectId(@as(*const IContactAggregationLink, @ptrCast(self)), pp_remote_object_id_);
            }
            pub inline fn putRemoteObjectId(self: *const T, p_remote_object_id_: ?*const CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_RemoteObjectId(@as(*const IContactAggregationLink, @ptrCast(self)), p_remote_object_id_);
            }
            pub inline fn getServerPerson(self: *const T, pp_server_person_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_ServerPerson(@as(*const IContactAggregationLink, @ptrCast(self)), pp_server_person_id_);
            }
            pub inline fn putServerPerson(self: *const T, p_server_person_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_ServerPerson(@as(*const IContactAggregationLink, @ptrCast(self)), p_server_person_id_);
            }
            pub inline fn getServerPersonBaseline(self: *const T, pp_server_person_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_ServerPersonBaseline(@as(*const IContactAggregationLink, @ptrCast(self)), pp_server_person_id_);
            }
            pub inline fn putServerPersonBaseline(self: *const T, p_server_person_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_ServerPersonBaseline(@as(*const IContactAggregationLink, @ptrCast(self)), p_server_person_id_);
            }
            pub inline fn getSyncIdentityHash(self: *const T, pp_sync_identity_hash_: ?*?*CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_SyncIdentityHash(@as(*const IContactAggregationLink, @ptrCast(self)), pp_sync_identity_hash_);
            }
            pub inline fn putSyncIdentityHash(self: *const T, p_sync_identity_hash_: ?*const CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_SyncIdentityHash(@as(*const IContactAggregationLink, @ptrCast(self)), p_sync_identity_hash_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationLinkCollection_Value = Guid.initString("f8bc0e93-fb55-4f28-b9fa-b1c274153292");
pub const IID_IContactAggregationLinkCollection = &IID_IContactAggregationLinkCollection_Value;
pub const IContactAggregationLinkCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn (
            self: *const IContactAggregationLinkCollection,
            pp_server_contact_link: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByRemoteId: *const fn (
            self: *const IContactAggregationLinkCollection,
            p_source_type: ?[*:0]const u16,
            p_account_id: ?[*:0]const u16,
            p_remote_id: ?*const CONTACT_AGGREGATION_BLOB,
            pp_server_contact_link: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn (
            self: *const IContactAggregationLinkCollection,
            pp_server_contact_link: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationLinkCollection,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findFirst(self: *const T, pp_server_contact_link_: ?*?*IContactAggregationLink) HRESULT {
                return @as(*const IContactAggregationLinkCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationLinkCollection, @ptrCast(self)), pp_server_contact_link_);
            }
            pub inline fn findFirstByRemoteId(self: *const T, p_source_type_: ?[*:0]const u16, p_account_id_: ?[*:0]const u16, p_remote_id_: ?*const CONTACT_AGGREGATION_BLOB, pp_server_contact_link_: ?*?*IContactAggregationLink) HRESULT {
                return @as(*const IContactAggregationLinkCollection.VTable, @ptrCast(self.vtable)).FindFirstByRemoteId(@as(*const IContactAggregationLinkCollection, @ptrCast(self)), p_source_type_, p_account_id_, p_remote_id_, pp_server_contact_link_);
            }
            pub inline fn findNext(self: *const T, pp_server_contact_link_: ?*?*IContactAggregationLink) HRESULT {
                return @as(*const IContactAggregationLinkCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationLinkCollection, @ptrCast(self)), pp_server_contact_link_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IContactAggregationLinkCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationLinkCollection, @ptrCast(self)), p_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationServerPerson_Value = Guid.initString("7fdc3d4b-1b82-4334-85c5-25184ee5a5f2");
pub const IID_IContactAggregationServerPerson = &IID_IContactAggregationServerPerson_Value;
pub const IContactAggregationServerPerson = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: *const fn (
            self: *const IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AggregateId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            pp_aggregate_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AggregateId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_aggregate_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiLink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            pp_anti_link: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiLink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_anti_link: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiLinkBaseline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            pp_anti_link: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiLinkBaseline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_anti_link: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FavoriteOrder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_favorite_order: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FavoriteOrder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            favorite_order: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FavoriteOrderBaseline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_favorite_order: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FavoriteOrderBaseline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            favorite_order: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Groups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_groups: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Groups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_groups: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupsBaseline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            pp_groups: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupsBaseline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_groups: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            pp_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTombstone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_is_tombstone: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsTombstone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            is_tombstone: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LinkedAggregateId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            pp_linked_aggregate_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LinkedAggregateId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_linked_aggregate_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            pp_object_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPerson,
            p_object_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).Delete(@as(*const IContactAggregationServerPerson, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationServerPerson, @ptrCast(self)));
            }
            pub inline fn getAggregateId(self: *const T, pp_aggregate_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_AggregateId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pp_aggregate_id_);
            }
            pub inline fn putAggregateId(self: *const T, p_aggregate_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_AggregateId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_aggregate_id_);
            }
            pub inline fn getAntiLink(self: *const T, pp_anti_link_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_AntiLink(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pp_anti_link_);
            }
            pub inline fn putAntiLink(self: *const T, p_anti_link_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_AntiLink(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_anti_link_);
            }
            pub inline fn getAntiLinkBaseline(self: *const T, pp_anti_link_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_AntiLinkBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pp_anti_link_);
            }
            pub inline fn putAntiLinkBaseline(self: *const T, p_anti_link_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_AntiLinkBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_anti_link_);
            }
            pub inline fn getFavoriteOrder(self: *const T, p_favorite_order_: ?*u32) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_FavoriteOrder(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_favorite_order_);
            }
            pub inline fn putFavoriteOrder(self: *const T, favorite_order_: u32) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_FavoriteOrder(@as(*const IContactAggregationServerPerson, @ptrCast(self)), favorite_order_);
            }
            pub inline fn getFavoriteOrderBaseline(self: *const T, p_favorite_order_: ?*u32) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_FavoriteOrderBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_favorite_order_);
            }
            pub inline fn putFavoriteOrderBaseline(self: *const T, favorite_order_: u32) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_FavoriteOrderBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), favorite_order_);
            }
            pub inline fn getGroups(self: *const T, p_groups_: ?*?*CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_Groups(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_groups_);
            }
            pub inline fn putGroups(self: *const T, p_groups_: ?*const CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_Groups(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_groups_);
            }
            pub inline fn getGroupsBaseline(self: *const T, pp_groups_: ?*?*CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_GroupsBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pp_groups_);
            }
            pub inline fn putGroupsBaseline(self: *const T, p_groups_: ?*const CONTACT_AGGREGATION_BLOB) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_GroupsBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_groups_);
            }
            pub inline fn getId(self: *const T, pp_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pp_id_);
            }
            pub inline fn getIsTombstone(self: *const T, p_is_tombstone_: ?*BOOL) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_IsTombstone(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_is_tombstone_);
            }
            pub inline fn putIsTombstone(self: *const T, is_tombstone_: BOOL) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_IsTombstone(@as(*const IContactAggregationServerPerson, @ptrCast(self)), is_tombstone_);
            }
            pub inline fn getLinkedAggregateId(self: *const T, pp_linked_aggregate_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_LinkedAggregateId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pp_linked_aggregate_id_);
            }
            pub inline fn putLinkedAggregateId(self: *const T, p_linked_aggregate_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_LinkedAggregateId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_linked_aggregate_id_);
            }
            pub inline fn getObjectId(self: *const T, pp_object_id_: ?*?PWSTR) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_ObjectId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pp_object_id_);
            }
            pub inline fn putObjectId(self: *const T, p_object_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_ObjectId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), p_object_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IContactAggregationServerPersonCollection_Value = Guid.initString("4f730a4a-6604-47b6-a987-669ecf1e5751");
pub const IID_IContactAggregationServerPersonCollection = &IID_IContactAggregationServerPersonCollection_Value;
pub const IContactAggregationServerPersonCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn (
            self: *const IContactAggregationServerPersonCollection,
            pp_server_person: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByServerId: *const fn (
            self: *const IContactAggregationServerPersonCollection,
            p_server_id: ?[*:0]const u16,
            pp_server_person: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByAggregateId: *const fn (
            self: *const IContactAggregationServerPersonCollection,
            p_aggregate_id: ?[*:0]const u16,
            pp_server_person: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByLinkedAggregateId: *const fn (
            self: *const IContactAggregationServerPersonCollection,
            p_aggregate_id: ?[*:0]const u16,
            pp_server_person: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn (
            self: *const IContactAggregationServerPersonCollection,
            pp_server_person: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IContactAggregationServerPersonCollection,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findFirst(self: *const T, pp_server_person_: ?*?*IContactAggregationServerPerson) HRESULT {
                return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), pp_server_person_);
            }
            pub inline fn findFirstByServerId(self: *const T, p_server_id_: ?[*:0]const u16, pp_server_person_: ?*?*IContactAggregationServerPerson) HRESULT {
                return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindFirstByServerId(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), p_server_id_, pp_server_person_);
            }
            pub inline fn findFirstByAggregateId(self: *const T, p_aggregate_id_: ?[*:0]const u16, pp_server_person_: ?*?*IContactAggregationServerPerson) HRESULT {
                return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindFirstByAggregateId(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), p_aggregate_id_, pp_server_person_);
            }
            pub inline fn findFirstByLinkedAggregateId(self: *const T, p_aggregate_id_: ?[*:0]const u16, pp_server_person_: ?*?*IContactAggregationServerPerson) HRESULT {
                return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindFirstByLinkedAggregateId(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), p_aggregate_id_, pp_server_person_);
            }
            pub inline fn findNext(self: *const T, pp_server_person_: ?*?*IContactAggregationServerPerson) HRESULT {
                return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), pp_server_person_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), p_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const FILETIME = @import("../foundation.zig").FILETIME;
const HRESULT = @import("../foundation.zig").HRESULT;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
