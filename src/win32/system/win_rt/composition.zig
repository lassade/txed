//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (9)
//--------------------------------------------------------------------------------
const IID_ICompositionDrawingSurfaceInterop_Value = Guid.initString("fd04e6e3-fe0c-4c3c-ab19-a07601a576ee");
pub const IID_ICompositionDrawingSurfaceInterop = &IID_ICompositionDrawingSurfaceInterop_Value;
pub const ICompositionDrawingSurfaceInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginDraw: *const fn (
            self: *const ICompositionDrawingSurfaceInterop,
            update_rect: ?*const RECT,
            iid: ?*const Guid,
            update_object: ?*?*anyopaque,
            update_offset: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndDraw: *const fn (
            self: *const ICompositionDrawingSurfaceInterop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resize: *const fn (
            self: *const ICompositionDrawingSurfaceInterop,
            size_pixels: SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scroll: *const fn (
            self: *const ICompositionDrawingSurfaceInterop,
            scroll_rect: ?*const RECT,
            clip_rect: ?*const RECT,
            offset_x: i32,
            offset_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeDraw: *const fn (
            self: *const ICompositionDrawingSurfaceInterop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SuspendDraw: *const fn (
            self: *const ICompositionDrawingSurfaceInterop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginDraw(self: *const T, update_rect_: ?*const RECT, iid_: ?*const Guid, update_object_: ?*?*anyopaque, update_offset_: ?*POINT) HRESULT {
                return @as(*const ICompositionDrawingSurfaceInterop.VTable, @ptrCast(self.vtable)).BeginDraw(@as(*const ICompositionDrawingSurfaceInterop, @ptrCast(self)), update_rect_, iid_, update_object_, update_offset_);
            }
            pub inline fn endDraw(self: *const T) HRESULT {
                return @as(*const ICompositionDrawingSurfaceInterop.VTable, @ptrCast(self.vtable)).EndDraw(@as(*const ICompositionDrawingSurfaceInterop, @ptrCast(self)));
            }
            pub inline fn resize(self: *const T, size_pixels_: SIZE) HRESULT {
                return @as(*const ICompositionDrawingSurfaceInterop.VTable, @ptrCast(self.vtable)).Resize(@as(*const ICompositionDrawingSurfaceInterop, @ptrCast(self)), size_pixels_);
            }
            pub inline fn scroll(self: *const T, scroll_rect_: ?*const RECT, clip_rect_: ?*const RECT, offset_x_: i32, offset_y_: i32) HRESULT {
                return @as(*const ICompositionDrawingSurfaceInterop.VTable, @ptrCast(self.vtable)).Scroll(@as(*const ICompositionDrawingSurfaceInterop, @ptrCast(self)), scroll_rect_, clip_rect_, offset_x_, offset_y_);
            }
            pub inline fn resumeDraw(self: *const T) HRESULT {
                return @as(*const ICompositionDrawingSurfaceInterop.VTable, @ptrCast(self.vtable)).ResumeDraw(@as(*const ICompositionDrawingSurfaceInterop, @ptrCast(self)));
            }
            pub inline fn suspendDraw(self: *const T) HRESULT {
                return @as(*const ICompositionDrawingSurfaceInterop.VTable, @ptrCast(self.vtable)).SuspendDraw(@as(*const ICompositionDrawingSurfaceInterop, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositionDrawingSurfaceInterop2_Value = Guid.initString("41e64aae-98c0-4239-8e95-a330dd6aa18b");
pub const IID_ICompositionDrawingSurfaceInterop2 = &IID_ICompositionDrawingSurfaceInterop2_Value;
pub const ICompositionDrawingSurfaceInterop2 = extern struct {
    pub const VTable = extern struct {
        base: ICompositionDrawingSurfaceInterop.VTable,
        CopySurface: *const fn (
            self: *const ICompositionDrawingSurfaceInterop2,
            destination_resource: ?*IUnknown,
            destination_offset_x: i32,
            destination_offset_y: i32,
            source_rectangle: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICompositionDrawingSurfaceInterop.MethodMixin(T);
            pub inline fn copySurface(self: *const T, destination_resource_: ?*IUnknown, destination_offset_x_: i32, destination_offset_y_: i32, source_rectangle_: ?*const RECT) HRESULT {
                return @as(*const ICompositionDrawingSurfaceInterop2.VTable, @ptrCast(self.vtable)).CopySurface(@as(*const ICompositionDrawingSurfaceInterop2, @ptrCast(self)), destination_resource_, destination_offset_x_, destination_offset_y_, source_rectangle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositionGraphicsDeviceInterop_Value = Guid.initString("a116ff71-f8bf-4c8a-9c98-70779a32a9c8");
pub const IID_ICompositionGraphicsDeviceInterop = &IID_ICompositionGraphicsDeviceInterop_Value;
pub const ICompositionGraphicsDeviceInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRenderingDevice: *const fn (
            self: *const ICompositionGraphicsDeviceInterop,
            value: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRenderingDevice: *const fn (
            self: *const ICompositionGraphicsDeviceInterop,
            value: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRenderingDevice(self: *const T, value_: ?*?*IUnknown) HRESULT {
                return @as(*const ICompositionGraphicsDeviceInterop.VTable, @ptrCast(self.vtable)).GetRenderingDevice(@as(*const ICompositionGraphicsDeviceInterop, @ptrCast(self)), value_);
            }
            pub inline fn setRenderingDevice(self: *const T, value_: ?*IUnknown) HRESULT {
                return @as(*const ICompositionGraphicsDeviceInterop.VTable, @ptrCast(self.vtable)).SetRenderingDevice(@as(*const ICompositionGraphicsDeviceInterop, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositorInterop_Value = Guid.initString("25297d5c-3ad4-4c9c-b5cf-e36a38512330");
pub const IID_ICompositorInterop = &IID_ICompositorInterop_Value;
pub const ICompositorInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateCompositionSurfaceForHandle: *const fn (
            self: *const ICompositorInterop,
            swap_chain: ?HANDLE,
            result: ?**struct { comment: []const u8 = "MissingClrType ICompositionSurface.Windows.UI.Composition" },
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCompositionSurfaceForSwapChain: *const fn (
            self: *const ICompositorInterop,
            swap_chain: ?*IUnknown,
            result: ?**struct { comment: []const u8 = "MissingClrType ICompositionSurface.Windows.UI.Composition" },
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGraphicsDevice: *const fn (
            self: *const ICompositorInterop,
            rendering_device: ?*IUnknown,
            result: ?**struct { comment: []const u8 = "MissingClrType CompositionGraphicsDevice.Windows.UI.Composition" },
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createCompositionSurfaceForHandle(self: *const T, swap_chain_: ?HANDLE, result_: ?**struct { comment: []const u8 = "MissingClrType ICompositionSurface.Windows.UI.Composition" }) HRESULT {
                return @as(*const ICompositorInterop.VTable, @ptrCast(self.vtable)).CreateCompositionSurfaceForHandle(@as(*const ICompositorInterop, @ptrCast(self)), swap_chain_, result_);
            }
            pub inline fn createCompositionSurfaceForSwapChain(self: *const T, swap_chain_: ?*IUnknown, result_: ?**struct { comment: []const u8 = "MissingClrType ICompositionSurface.Windows.UI.Composition" }) HRESULT {
                return @as(*const ICompositorInterop.VTable, @ptrCast(self.vtable)).CreateCompositionSurfaceForSwapChain(@as(*const ICompositorInterop, @ptrCast(self)), swap_chain_, result_);
            }
            pub inline fn createGraphicsDevice(self: *const T, rendering_device_: ?*IUnknown, result_: ?**struct { comment: []const u8 = "MissingClrType CompositionGraphicsDevice.Windows.UI.Composition" }) HRESULT {
                return @as(*const ICompositorInterop.VTable, @ptrCast(self.vtable)).CreateGraphicsDevice(@as(*const ICompositorInterop, @ptrCast(self)), rendering_device_, result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISwapChainInterop_Value = Guid.initString("26f496a0-7f38-45fb-88f7-faaabe67dd59");
pub const IID_ISwapChainInterop = &IID_ISwapChainInterop_Value;
pub const ISwapChainInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSwapChain: *const fn (
            self: *const ISwapChainInterop,
            swap_chain: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setSwapChain(self: *const T, swap_chain_: ?*IUnknown) HRESULT {
                return @as(*const ISwapChainInterop.VTable, @ptrCast(self.vtable)).SetSwapChain(@as(*const ISwapChainInterop, @ptrCast(self)), swap_chain_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVisualInteractionSourceInterop_Value = Guid.initString("11f62cd1-2f9d-42d3-b05f-d6790d9e9f8e");
pub const IID_IVisualInteractionSourceInterop = &IID_IVisualInteractionSourceInterop_Value;
pub const IVisualInteractionSourceInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TryRedirectForManipulation: *const fn (
            self: *const IVisualInteractionSourceInterop,
            pointer_info: ?*const POINTER_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn tryRedirectForManipulation(self: *const T, pointer_info_: ?*const POINTER_INFO) HRESULT {
                return @as(*const IVisualInteractionSourceInterop.VTable, @ptrCast(self.vtable)).TryRedirectForManipulation(@as(*const IVisualInteractionSourceInterop, @ptrCast(self)), pointer_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositionCapabilitiesInteropFactory_Value = Guid.initString("2c9db356-e70d-4642-8298-bc4aa5b4865c");
pub const IID_ICompositionCapabilitiesInteropFactory = &IID_ICompositionCapabilitiesInteropFactory_Value;
pub const ICompositionCapabilitiesInteropFactory = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn (
            self: *const ICompositionCapabilitiesInteropFactory,
            hwnd: ?HWND,
            result: ?**struct { comment: []const u8 = "MissingClrType CompositionCapabilities.Windows.UI.Composition" },
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn getForWindow(self: *const T, hwnd_: ?HWND, result_: ?**struct { comment: []const u8 = "MissingClrType CompositionCapabilities.Windows.UI.Composition" }) HRESULT {
                return @as(*const ICompositionCapabilitiesInteropFactory.VTable, @ptrCast(self.vtable)).GetForWindow(@as(*const ICompositionCapabilitiesInteropFactory, @ptrCast(self)), hwnd_, result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICompositorDesktopInterop_Value = Guid.initString("29e691fa-4567-4dca-b319-d0f207eb6807");
pub const IID_ICompositorDesktopInterop = &IID_ICompositorDesktopInterop_Value;
pub const ICompositorDesktopInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDesktopWindowTarget: *const fn (
            self: *const ICompositorDesktopInterop,
            hwnd_target: ?HWND,
            is_topmost: BOOL,
            result: ?**struct { comment: []const u8 = "MissingClrType DesktopWindowTarget.Windows.UI.Composition.Desktop" },
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnsureOnThread: *const fn (
            self: *const ICompositorDesktopInterop,
            thread_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createDesktopWindowTarget(self: *const T, hwnd_target_: ?HWND, is_topmost_: BOOL, result_: ?**struct { comment: []const u8 = "MissingClrType DesktopWindowTarget.Windows.UI.Composition.Desktop" }) HRESULT {
                return @as(*const ICompositorDesktopInterop.VTable, @ptrCast(self.vtable)).CreateDesktopWindowTarget(@as(*const ICompositorDesktopInterop, @ptrCast(self)), hwnd_target_, is_topmost_, result_);
            }
            pub inline fn ensureOnThread(self: *const T, thread_id_: u32) HRESULT {
                return @as(*const ICompositorDesktopInterop.VTable, @ptrCast(self.vtable)).EnsureOnThread(@as(*const ICompositorDesktopInterop, @ptrCast(self)), thread_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDesktopWindowTargetInterop_Value = Guid.initString("35dbf59e-e3f9-45b0-81e7-fe75f4145dc9");
pub const IID_IDesktopWindowTargetInterop = &IID_IDesktopWindowTargetInterop_Value;
pub const IDesktopWindowTargetInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hwnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDesktopWindowTargetInterop,
            value: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getHwnd(self: *const T, value_: ?*?HWND) HRESULT {
                return @as(*const IDesktopWindowTargetInterop.VTable, @ptrCast(self.vtable)).get_Hwnd(@as(*const IDesktopWindowTargetInterop, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (11)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const HANDLE = @import("../../foundation.zig").HANDLE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IInspectable = @import("../../system/win_rt.zig").IInspectable;
const IUnknown = @import("../../system/com.zig").IUnknown;
const POINT = @import("../../foundation.zig").POINT;
const POINTER_INFO = @import("../../ui/input/pointer.zig").POINTER_INFO;
const RECT = @import("../../foundation.zig").RECT;
const SIZE = @import("../../foundation.zig").SIZE;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
