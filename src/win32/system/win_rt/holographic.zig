//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (4)
//--------------------------------------------------------------------------------
const IID_IHolographicCameraInterop_Value = Guid.initString("7cc1f9c5-6d02-41fa-9500-e1809eb48eec");
pub const IID_IHolographicCameraInterop = &IID_IHolographicCameraInterop_Value;
pub const IHolographicCameraInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateDirect3D12BackBufferResource: *const fn (
            self: *const IHolographicCameraInterop,
            p_device: ?*ID3D12Device,
            p_texture2_d_desc: ?*D3D12_RESOURCE_DESC,
            pp_created_texture2_d_resource: ?*?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDirect3D12HardwareProtectedBackBufferResource: *const fn (
            self: *const IHolographicCameraInterop,
            p_device: ?*ID3D12Device,
            p_texture2_d_desc: ?*D3D12_RESOURCE_DESC,
            p_protected_resource_session: ?*ID3D12ProtectedResourceSession,
            pp_created_texture2_d_resource: ?*?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireDirect3D12BufferResource: *const fn (
            self: *const IHolographicCameraInterop,
            p_resource_to_acquire: ?*ID3D12Resource,
            p_command_queue: ?*ID3D12CommandQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireDirect3D12BufferResourceWithTimeout: *const fn (
            self: *const IHolographicCameraInterop,
            p_resource_to_acquire: ?*ID3D12Resource,
            p_command_queue: ?*ID3D12CommandQueue,
            duration: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnacquireDirect3D12BufferResource: *const fn (
            self: *const IHolographicCameraInterop,
            p_resource_to_unacquire: ?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn createDirect3D12BackBufferResource(self: *const T, p_device_: ?*ID3D12Device, p_texture2_d_desc_: ?*D3D12_RESOURCE_DESC, pp_created_texture2_d_resource_: ?*?*ID3D12Resource) HRESULT {
                return @as(*const IHolographicCameraInterop.VTable, @ptrCast(self.vtable)).CreateDirect3D12BackBufferResource(@as(*const IHolographicCameraInterop, @ptrCast(self)), p_device_, p_texture2_d_desc_, pp_created_texture2_d_resource_);
            }
            pub inline fn createDirect3D12HardwareProtectedBackBufferResource(self: *const T, p_device_: ?*ID3D12Device, p_texture2_d_desc_: ?*D3D12_RESOURCE_DESC, p_protected_resource_session_: ?*ID3D12ProtectedResourceSession, pp_created_texture2_d_resource_: ?*?*ID3D12Resource) HRESULT {
                return @as(*const IHolographicCameraInterop.VTable, @ptrCast(self.vtable)).CreateDirect3D12HardwareProtectedBackBufferResource(@as(*const IHolographicCameraInterop, @ptrCast(self)), p_device_, p_texture2_d_desc_, p_protected_resource_session_, pp_created_texture2_d_resource_);
            }
            pub inline fn acquireDirect3D12BufferResource(self: *const T, p_resource_to_acquire_: ?*ID3D12Resource, p_command_queue_: ?*ID3D12CommandQueue) HRESULT {
                return @as(*const IHolographicCameraInterop.VTable, @ptrCast(self.vtable)).AcquireDirect3D12BufferResource(@as(*const IHolographicCameraInterop, @ptrCast(self)), p_resource_to_acquire_, p_command_queue_);
            }
            pub inline fn acquireDirect3D12BufferResourceWithTimeout(self: *const T, p_resource_to_acquire_: ?*ID3D12Resource, p_command_queue_: ?*ID3D12CommandQueue, duration_: u64) HRESULT {
                return @as(*const IHolographicCameraInterop.VTable, @ptrCast(self.vtable)).AcquireDirect3D12BufferResourceWithTimeout(@as(*const IHolographicCameraInterop, @ptrCast(self)), p_resource_to_acquire_, p_command_queue_, duration_);
            }
            pub inline fn unacquireDirect3D12BufferResource(self: *const T, p_resource_to_unacquire_: ?*ID3D12Resource) HRESULT {
                return @as(*const IHolographicCameraInterop.VTable, @ptrCast(self.vtable)).UnacquireDirect3D12BufferResource(@as(*const IHolographicCameraInterop, @ptrCast(self)), p_resource_to_unacquire_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IHolographicCameraRenderingParametersInterop_Value = Guid.initString("f75b68d6-d1fd-4707-aafd-fa6f4c0e3bf4");
pub const IID_IHolographicCameraRenderingParametersInterop = &IID_IHolographicCameraRenderingParametersInterop_Value;
pub const IHolographicCameraRenderingParametersInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CommitDirect3D12Resource: *const fn (
            self: *const IHolographicCameraRenderingParametersInterop,
            p_color_resource_to_commit: ?*ID3D12Resource,
            p_color_resource_fence: ?*ID3D12Fence,
            color_resource_fence_signal_value: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitDirect3D12ResourceWithDepthData: *const fn (
            self: *const IHolographicCameraRenderingParametersInterop,
            p_color_resource_to_commit: ?*ID3D12Resource,
            p_color_resource_fence: ?*ID3D12Fence,
            color_resource_fence_signal_value: u64,
            p_depth_resource_to_commit: ?*ID3D12Resource,
            p_depth_resource_fence: ?*ID3D12Fence,
            depth_resource_fence_signal_value: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn commitDirect3D12Resource(self: *const T, p_color_resource_to_commit_: ?*ID3D12Resource, p_color_resource_fence_: ?*ID3D12Fence, color_resource_fence_signal_value_: u64) HRESULT {
                return @as(*const IHolographicCameraRenderingParametersInterop.VTable, @ptrCast(self.vtable)).CommitDirect3D12Resource(@as(*const IHolographicCameraRenderingParametersInterop, @ptrCast(self)), p_color_resource_to_commit_, p_color_resource_fence_, color_resource_fence_signal_value_);
            }
            pub inline fn commitDirect3D12ResourceWithDepthData(self: *const T, p_color_resource_to_commit_: ?*ID3D12Resource, p_color_resource_fence_: ?*ID3D12Fence, color_resource_fence_signal_value_: u64, p_depth_resource_to_commit_: ?*ID3D12Resource, p_depth_resource_fence_: ?*ID3D12Fence, depth_resource_fence_signal_value_: u64) HRESULT {
                return @as(*const IHolographicCameraRenderingParametersInterop.VTable, @ptrCast(self.vtable)).CommitDirect3D12ResourceWithDepthData(@as(*const IHolographicCameraRenderingParametersInterop, @ptrCast(self)), p_color_resource_to_commit_, p_color_resource_fence_, color_resource_fence_signal_value_, p_depth_resource_to_commit_, p_depth_resource_fence_, depth_resource_fence_signal_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IHolographicQuadLayerInterop_Value = Guid.initString("cfa688f0-639e-4a47-83d7-6b7f5ebf7fed");
pub const IID_IHolographicQuadLayerInterop = &IID_IHolographicQuadLayerInterop_Value;
pub const IHolographicQuadLayerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CreateDirect3D12ContentBufferResource: *const fn (
            self: *const IHolographicQuadLayerInterop,
            p_device: ?*ID3D12Device,
            p_texture2_d_desc: ?*D3D12_RESOURCE_DESC,
            pp_texture2_d_resource: ?*?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDirect3D12HardwareProtectedContentBufferResource: *const fn (
            self: *const IHolographicQuadLayerInterop,
            p_device: ?*ID3D12Device,
            p_texture2_d_desc: ?*D3D12_RESOURCE_DESC,
            p_protected_resource_session: ?*ID3D12ProtectedResourceSession,
            pp_created_texture2_d_resource: ?*?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireDirect3D12BufferResource: *const fn (
            self: *const IHolographicQuadLayerInterop,
            p_resource_to_acquire: ?*ID3D12Resource,
            p_command_queue: ?*ID3D12CommandQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireDirect3D12BufferResourceWithTimeout: *const fn (
            self: *const IHolographicQuadLayerInterop,
            p_resource_to_acquire: ?*ID3D12Resource,
            p_command_queue: ?*ID3D12CommandQueue,
            duration: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnacquireDirect3D12BufferResource: *const fn (
            self: *const IHolographicQuadLayerInterop,
            p_resource_to_unacquire: ?*ID3D12Resource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn createDirect3D12ContentBufferResource(self: *const T, p_device_: ?*ID3D12Device, p_texture2_d_desc_: ?*D3D12_RESOURCE_DESC, pp_texture2_d_resource_: ?*?*ID3D12Resource) HRESULT {
                return @as(*const IHolographicQuadLayerInterop.VTable, @ptrCast(self.vtable)).CreateDirect3D12ContentBufferResource(@as(*const IHolographicQuadLayerInterop, @ptrCast(self)), p_device_, p_texture2_d_desc_, pp_texture2_d_resource_);
            }
            pub inline fn createDirect3D12HardwareProtectedContentBufferResource(self: *const T, p_device_: ?*ID3D12Device, p_texture2_d_desc_: ?*D3D12_RESOURCE_DESC, p_protected_resource_session_: ?*ID3D12ProtectedResourceSession, pp_created_texture2_d_resource_: ?*?*ID3D12Resource) HRESULT {
                return @as(*const IHolographicQuadLayerInterop.VTable, @ptrCast(self.vtable)).CreateDirect3D12HardwareProtectedContentBufferResource(@as(*const IHolographicQuadLayerInterop, @ptrCast(self)), p_device_, p_texture2_d_desc_, p_protected_resource_session_, pp_created_texture2_d_resource_);
            }
            pub inline fn acquireDirect3D12BufferResource(self: *const T, p_resource_to_acquire_: ?*ID3D12Resource, p_command_queue_: ?*ID3D12CommandQueue) HRESULT {
                return @as(*const IHolographicQuadLayerInterop.VTable, @ptrCast(self.vtable)).AcquireDirect3D12BufferResource(@as(*const IHolographicQuadLayerInterop, @ptrCast(self)), p_resource_to_acquire_, p_command_queue_);
            }
            pub inline fn acquireDirect3D12BufferResourceWithTimeout(self: *const T, p_resource_to_acquire_: ?*ID3D12Resource, p_command_queue_: ?*ID3D12CommandQueue, duration_: u64) HRESULT {
                return @as(*const IHolographicQuadLayerInterop.VTable, @ptrCast(self.vtable)).AcquireDirect3D12BufferResourceWithTimeout(@as(*const IHolographicQuadLayerInterop, @ptrCast(self)), p_resource_to_acquire_, p_command_queue_, duration_);
            }
            pub inline fn unacquireDirect3D12BufferResource(self: *const T, p_resource_to_unacquire_: ?*ID3D12Resource) HRESULT {
                return @as(*const IHolographicQuadLayerInterop.VTable, @ptrCast(self.vtable)).UnacquireDirect3D12BufferResource(@as(*const IHolographicQuadLayerInterop, @ptrCast(self)), p_resource_to_unacquire_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IHolographicQuadLayerUpdateParametersInterop_Value = Guid.initString("e5f549cd-c909-444f-8809-7cc18a9c8920");
pub const IID_IHolographicQuadLayerUpdateParametersInterop = &IID_IHolographicQuadLayerUpdateParametersInterop_Value;
pub const IHolographicQuadLayerUpdateParametersInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        CommitDirect3D12Resource: *const fn (
            self: *const IHolographicQuadLayerUpdateParametersInterop,
            p_color_resource_to_commit: ?*ID3D12Resource,
            p_color_resource_fence: ?*ID3D12Fence,
            color_resource_fence_signal_value: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn commitDirect3D12Resource(self: *const T, p_color_resource_to_commit_: ?*ID3D12Resource, p_color_resource_fence_: ?*ID3D12Fence, color_resource_fence_signal_value_: u64) HRESULT {
                return @as(*const IHolographicQuadLayerUpdateParametersInterop.VTable, @ptrCast(self.vtable)).CommitDirect3D12Resource(@as(*const IHolographicQuadLayerUpdateParametersInterop, @ptrCast(self)), p_color_resource_to_commit_, p_color_resource_fence_, color_resource_fence_signal_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const D3D12_RESOURCE_DESC = @import("../../graphics/direct3d12.zig").D3D12_RESOURCE_DESC;
const HRESULT = @import("../../foundation.zig").HRESULT;
const ID3D12CommandQueue = @import("../../graphics/direct3d12.zig").ID3D12CommandQueue;
const ID3D12Device = @import("../../graphics/direct3d12.zig").ID3D12Device;
const ID3D12Fence = @import("../../graphics/direct3d12.zig").ID3D12Fence;
const ID3D12ProtectedResourceSession = @import("../../graphics/direct3d12.zig").ID3D12ProtectedResourceSession;
const ID3D12Resource = @import("../../graphics/direct3d12.zig").ID3D12Resource;
const IInspectable = @import("../../system/win_rt.zig").IInspectable;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
