//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (7)
//--------------------------------------------------------------------------------
const IID_IPrinting3DManagerInterop_Value = Guid.initString("9ca31010-1484-4587-b26b-dddf9f9caecd");
pub const IID_IPrinting3DManagerInterop = &IID_IPrinting3DManagerInterop_Value;
pub const IPrinting3DManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn (
            self: *const IPrinting3DManagerInterop,
            app_window: ?HWND,
            riid: ?*const Guid,
            print_manager: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowPrintUIForWindowAsync: *const fn (
            self: *const IPrinting3DManagerInterop,
            app_window: ?HWND,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn getForWindow(self: *const T, app_window_: ?HWND, riid_: ?*const Guid, print_manager_: ?*?*anyopaque) HRESULT {
                return @as(*const IPrinting3DManagerInterop.VTable, @ptrCast(self.vtable)).GetForWindow(@as(*const IPrinting3DManagerInterop, @ptrCast(self)), app_window_, riid_, print_manager_);
            }
            pub inline fn showPrintUIForWindowAsync(self: *const T, app_window_: ?HWND, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IPrinting3DManagerInterop.VTable, @ptrCast(self.vtable)).ShowPrintUIForWindowAsync(@as(*const IPrinting3DManagerInterop, @ptrCast(self)), app_window_, riid_, async_operation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IPrintManagerInterop_Value = Guid.initString("c5435a42-8d43-4e7b-a68a-ef311e392087");
pub const IID_IPrintManagerInterop = &IID_IPrintManagerInterop_Value;
pub const IPrintManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        GetForWindow: *const fn (
            self: *const IPrintManagerInterop,
            app_window: ?HWND,
            riid: ?*const Guid,
            print_manager: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowPrintUIForWindowAsync: *const fn (
            self: *const IPrintManagerInterop,
            app_window: ?HWND,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn getForWindow(self: *const T, app_window_: ?HWND, riid_: ?*const Guid, print_manager_: ?*?*anyopaque) HRESULT {
                return @as(*const IPrintManagerInterop.VTable, @ptrCast(self.vtable)).GetForWindow(@as(*const IPrintManagerInterop, @ptrCast(self)), app_window_, riid_, print_manager_);
            }
            pub inline fn showPrintUIForWindowAsync(self: *const T, app_window_: ?HWND, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IPrintManagerInterop.VTable, @ptrCast(self.vtable)).ShowPrintUIForWindowAsync(@as(*const IPrintManagerInterop, @ptrCast(self)), app_window_, riid_, async_operation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintWorkflowXpsReceiver_Value = Guid.initString("04097374-77b8-47f6-8167-aae29d4cf84b");
pub const IID_IPrintWorkflowXpsReceiver = &IID_IPrintWorkflowXpsReceiver_Value;
pub const IPrintWorkflowXpsReceiver = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDocumentSequencePrintTicket: *const fn (
            self: *const IPrintWorkflowXpsReceiver,
            document_sequence_print_ticket: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDocumentSequenceUri: *const fn (
            self: *const IPrintWorkflowXpsReceiver,
            document_sequence_uri: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDocumentData: *const fn (
            self: *const IPrintWorkflowXpsReceiver,
            document_id: u32,
            document_print_ticket: ?*IStream,
            document_uri: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPage: *const fn (
            self: *const IPrintWorkflowXpsReceiver,
            document_id: u32,
            page_id: u32,
            page_reference: ?*IXpsOMPageReference,
            page_uri: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IPrintWorkflowXpsReceiver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setDocumentSequencePrintTicket(self: *const T, document_sequence_print_ticket_: ?*IStream) HRESULT {
                return @as(*const IPrintWorkflowXpsReceiver.VTable, @ptrCast(self.vtable)).SetDocumentSequencePrintTicket(@as(*const IPrintWorkflowXpsReceiver, @ptrCast(self)), document_sequence_print_ticket_);
            }
            pub inline fn setDocumentSequenceUri(self: *const T, document_sequence_uri_: ?[*:0]const u16) HRESULT {
                return @as(*const IPrintWorkflowXpsReceiver.VTable, @ptrCast(self.vtable)).SetDocumentSequenceUri(@as(*const IPrintWorkflowXpsReceiver, @ptrCast(self)), document_sequence_uri_);
            }
            pub inline fn addDocumentData(self: *const T, document_id_: u32, document_print_ticket_: ?*IStream, document_uri_: ?[*:0]const u16) HRESULT {
                return @as(*const IPrintWorkflowXpsReceiver.VTable, @ptrCast(self.vtable)).AddDocumentData(@as(*const IPrintWorkflowXpsReceiver, @ptrCast(self)), document_id_, document_print_ticket_, document_uri_);
            }
            pub inline fn addPage(self: *const T, document_id_: u32, page_id_: u32, page_reference_: ?*IXpsOMPageReference, page_uri_: ?[*:0]const u16) HRESULT {
                return @as(*const IPrintWorkflowXpsReceiver.VTable, @ptrCast(self.vtable)).AddPage(@as(*const IPrintWorkflowXpsReceiver, @ptrCast(self)), document_id_, page_id_, page_reference_, page_uri_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IPrintWorkflowXpsReceiver.VTable, @ptrCast(self.vtable)).Close(@as(*const IPrintWorkflowXpsReceiver, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintWorkflowXpsReceiver2_Value = Guid.initString("023bcc0c-dfab-4a61-b074-490c6995580d");
pub const IID_IPrintWorkflowXpsReceiver2 = &IID_IPrintWorkflowXpsReceiver2_Value;
pub const IPrintWorkflowXpsReceiver2 = extern struct {
    pub const VTable = extern struct {
        base: IPrintWorkflowXpsReceiver.VTable,
        Failed: *const fn (
            self: *const IPrintWorkflowXpsReceiver2,
            xps_error: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintWorkflowXpsReceiver.MethodMixin(T);
            pub inline fn failed(self: *const T, xps_error_: HRESULT) HRESULT {
                return @as(*const IPrintWorkflowXpsReceiver2.VTable, @ptrCast(self.vtable)).Failed(@as(*const IPrintWorkflowXpsReceiver2, @ptrCast(self)), xps_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintWorkflowObjectModelSourceFileContentNative_Value = Guid.initString("68c9e477-993e-4052-8ac6-454eff58db9d");
pub const IID_IPrintWorkflowObjectModelSourceFileContentNative = &IID_IPrintWorkflowObjectModelSourceFileContentNative_Value;
pub const IPrintWorkflowObjectModelSourceFileContentNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartXpsOMGeneration: *const fn (
            self: *const IPrintWorkflowObjectModelSourceFileContentNative,
            receiver: ?*IPrintWorkflowXpsReceiver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectFactory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintWorkflowObjectModelSourceFileContentNative,
            value: ?*?*IXpsOMObjectFactory1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startXpsOMGeneration(self: *const T, receiver_: ?*IPrintWorkflowXpsReceiver) HRESULT {
                return @as(*const IPrintWorkflowObjectModelSourceFileContentNative.VTable, @ptrCast(self.vtable)).StartXpsOMGeneration(@as(*const IPrintWorkflowObjectModelSourceFileContentNative, @ptrCast(self)), receiver_);
            }
            pub inline fn getObjectFactory(self: *const T, value_: ?*?*IXpsOMObjectFactory1) HRESULT {
                return @as(*const IPrintWorkflowObjectModelSourceFileContentNative.VTable, @ptrCast(self.vtable)).get_ObjectFactory(@as(*const IPrintWorkflowObjectModelSourceFileContentNative, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintWorkflowXpsObjectModelTargetPackageNative_Value = Guid.initString("7d96bc74-9b54-4ca1-ad3a-979c3d44ddac");
pub const IID_IPrintWorkflowXpsObjectModelTargetPackageNative = &IID_IPrintWorkflowXpsObjectModelTargetPackageNative_Value;
pub const IPrintWorkflowXpsObjectModelTargetPackageNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DocumentPackageTarget: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintWorkflowXpsObjectModelTargetPackageNative,
            value: ?*?*IXpsDocumentPackageTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDocumentPackageTarget(self: *const T, value_: ?*?*IXpsDocumentPackageTarget) HRESULT {
                return @as(*const IPrintWorkflowXpsObjectModelTargetPackageNative.VTable, @ptrCast(self.vtable)).get_DocumentPackageTarget(@as(*const IPrintWorkflowXpsObjectModelTargetPackageNative, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintWorkflowConfigurationNative_Value = Guid.initString("c056be0a-9ee2-450a-9823-964f0006f2bb");
pub const IID_IPrintWorkflowConfigurationNative = &IID_IPrintWorkflowConfigurationNative_Value;
pub const IPrintWorkflowConfigurationNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrinterQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintWorkflowConfigurationNative,
            value: ?*?*IPrinterQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DriverProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintWorkflowConfigurationNative,
            value: ?*?*IPrinterPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintWorkflowConfigurationNative,
            value: ?*?*IPrinterPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPrinterQueue(self: *const T, value_: ?*?*IPrinterQueue) HRESULT {
                return @as(*const IPrintWorkflowConfigurationNative.VTable, @ptrCast(self.vtable)).get_PrinterQueue(@as(*const IPrintWorkflowConfigurationNative, @ptrCast(self)), value_);
            }
            pub inline fn getDriverProperties(self: *const T, value_: ?*?*IPrinterPropertyBag) HRESULT {
                return @as(*const IPrintWorkflowConfigurationNative.VTable, @ptrCast(self.vtable)).get_DriverProperties(@as(*const IPrintWorkflowConfigurationNative, @ptrCast(self)), value_);
            }
            pub inline fn getUserProperties(self: *const T, value_: ?*?*IPrinterPropertyBag) HRESULT {
                return @as(*const IPrintWorkflowConfigurationNative.VTable, @ptrCast(self.vtable)).get_UserProperties(@as(*const IPrintWorkflowConfigurationNative, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (12)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IInspectable = @import("../../system/win_rt.zig").IInspectable;
const IPrinterPropertyBag = @import("../../graphics/printing.zig").IPrinterPropertyBag;
const IPrinterQueue = @import("../../graphics/printing.zig").IPrinterQueue;
const IStream = @import("../../system/com.zig").IStream;
const IUnknown = @import("../../system/com.zig").IUnknown;
const IXpsDocumentPackageTarget = @import("../../storage/xps.zig").IXpsDocumentPackageTarget;
const IXpsOMObjectFactory1 = @import("../../storage/xps.zig").IXpsOMObjectFactory1;
const IXpsOMPageReference = @import("../../storage/xps.zig").IXpsOMPageReference;
const PWSTR = @import("../../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
