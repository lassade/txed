//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (3)
//--------------------------------------------------------------------------------
pub const PFN_PDF_CREATE_RENDERER = *const fn (
    param0: ?*IDXGIDevice,
    param1: ?*?*IPdfRendererNative,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PDF_RENDER_PARAMS = extern struct {
    SourceRect: D2D_RECT_F,
    DestinationWidth: u32,
    DestinationHeight: u32,
    BackgroundColor: D2D_COLOR_F,
    IgnoreHighContrast: BOOLEAN,
};

const IID_IPdfRendererNative_Value = Guid.initString("7d9dcd91-d277-4947-8527-07a0daeda94a");
pub const IID_IPdfRendererNative = &IID_IPdfRendererNative_Value;
pub const IPdfRendererNative = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RenderPageToSurface: *const fn (
            self: *const IPdfRendererNative,
            pdf_page: ?*IUnknown,
            p_surface: ?*IDXGISurface,
            offset: POINT,
            p_render_params: ?*PDF_RENDER_PARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenderPageToDeviceContext: *const fn (
            self: *const IPdfRendererNative,
            pdf_page: ?*IUnknown,
            p_d2_d_device_context: ?*ID2D1DeviceContext,
            p_render_params: ?*PDF_RENDER_PARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn renderPageToSurface(self: *const T, pdf_page_: ?*IUnknown, p_surface_: ?*IDXGISurface, offset_: POINT, p_render_params_: ?*PDF_RENDER_PARAMS) HRESULT {
                return @as(*const IPdfRendererNative.VTable, @ptrCast(self.vtable)).RenderPageToSurface(@as(*const IPdfRendererNative, @ptrCast(self)), pdf_page_, p_surface_, offset_, p_render_params_);
            }
            pub inline fn renderPageToDeviceContext(self: *const T, pdf_page_: ?*IUnknown, p_d2_d_device_context_: ?*ID2D1DeviceContext, p_render_params_: ?*PDF_RENDER_PARAMS) HRESULT {
                return @as(*const IPdfRendererNative.VTable, @ptrCast(self.vtable)).RenderPageToDeviceContext(@as(*const IPdfRendererNative, @ptrCast(self)), pdf_page_, p_d2_d_device_context_, p_render_params_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (1)
//--------------------------------------------------------------------------------
pub extern "windows.data.pdf" fn PdfCreateRenderer(
    p_device: ?*IDXGIDevice,
    pp_renderer: ?*?*IPdfRendererNative,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOLEAN = @import("../../foundation.zig").BOOLEAN;
const D2D_COLOR_F = @import("../../graphics/direct2d/common.zig").D2D_COLOR_F;
const D2D_RECT_F = @import("../../graphics/direct2d/common.zig").D2D_RECT_F;
const HRESULT = @import("../../foundation.zig").HRESULT;
const ID2D1DeviceContext = @import("../../graphics/direct2d.zig").ID2D1DeviceContext;
const IDXGIDevice = @import("../../graphics/dxgi.zig").IDXGIDevice;
const IDXGISurface = @import("../../graphics/dxgi.zig").IDXGISurface;
const IUnknown = @import("../../system/com.zig").IUnknown;
const POINT = @import("../../foundation.zig").POINT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFN_PDF_CREATE_RENDERER")) {
        _ = PFN_PDF_CREATE_RENDERER;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
