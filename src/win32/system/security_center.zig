//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (13)
//--------------------------------------------------------------------------------
const CLSID_WSCProductList_Value = Guid.initString("17072f7b-9abe-4a74-a261-1eb76b55107a");
pub const CLSID_WSCProductList = &CLSID_WSCProductList_Value;

const CLSID_WSCDefaultProduct_Value = Guid.initString("2981a36e-f22d-11e5-9ce9-5e5517507c66");
pub const CLSID_WSCDefaultProduct = &CLSID_WSCDefaultProduct_Value;

pub const WSC_SECURITY_PRODUCT_SUBSTATUS = enum(i32) {
    NOT_SET = 0,
    NO_ACTION = 1,
    ACTION_RECOMMENDED = 2,
    ACTION_NEEDED = 3,
};
pub const WSC_SECURITY_PRODUCT_SUBSTATUS_NOT_SET = WSC_SECURITY_PRODUCT_SUBSTATUS.NOT_SET;
pub const WSC_SECURITY_PRODUCT_SUBSTATUS_NO_ACTION = WSC_SECURITY_PRODUCT_SUBSTATUS.NO_ACTION;
pub const WSC_SECURITY_PRODUCT_SUBSTATUS_ACTION_RECOMMENDED = WSC_SECURITY_PRODUCT_SUBSTATUS.ACTION_RECOMMENDED;
pub const WSC_SECURITY_PRODUCT_SUBSTATUS_ACTION_NEEDED = WSC_SECURITY_PRODUCT_SUBSTATUS.ACTION_NEEDED;

pub const WSC_SECURITY_PRODUCT_STATE = enum(i32) {
    ON = 0,
    OFF = 1,
    SNOOZED = 2,
    EXPIRED = 3,
};
pub const WSC_SECURITY_PRODUCT_STATE_ON = WSC_SECURITY_PRODUCT_STATE.ON;
pub const WSC_SECURITY_PRODUCT_STATE_OFF = WSC_SECURITY_PRODUCT_STATE.OFF;
pub const WSC_SECURITY_PRODUCT_STATE_SNOOZED = WSC_SECURITY_PRODUCT_STATE.SNOOZED;
pub const WSC_SECURITY_PRODUCT_STATE_EXPIRED = WSC_SECURITY_PRODUCT_STATE.EXPIRED;

pub const SECURITY_PRODUCT_TYPE = enum(i32) {
    ANTIVIRUS = 0,
    FIREWALL = 1,
    ANTISPYWARE = 2,
};
pub const SECURITY_PRODUCT_TYPE_ANTIVIRUS = SECURITY_PRODUCT_TYPE.ANTIVIRUS;
pub const SECURITY_PRODUCT_TYPE_FIREWALL = SECURITY_PRODUCT_TYPE.FIREWALL;
pub const SECURITY_PRODUCT_TYPE_ANTISPYWARE = SECURITY_PRODUCT_TYPE.ANTISPYWARE;

pub const WSC_SECURITY_SIGNATURE_STATUS = enum(i32) {
    OUT_OF_DATE = 0,
    UP_TO_DATE = 1,
};
pub const WSC_SECURITY_PRODUCT_OUT_OF_DATE = WSC_SECURITY_SIGNATURE_STATUS.OUT_OF_DATE;
pub const WSC_SECURITY_PRODUCT_UP_TO_DATE = WSC_SECURITY_SIGNATURE_STATUS.UP_TO_DATE;

// TODO: this type is limited to platform 'windows8.0'
const IID_IWscProduct_Value = Guid.initString("8c38232e-3a45-4a27-92b0-1a16a975f669");
pub const IID_IWscProduct = &IID_IWscProduct_Value;
pub const IWscProduct = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProductName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProductState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct,
            p_val: ?*WSC_SECURITY_PRODUCT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignatureStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct,
            p_val: ?*WSC_SECURITY_SIGNATURE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemediationPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProductStateTimestamp: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProductGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProductIsDefault: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct,
            p_val: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProductName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IWscProduct.VTable, @ptrCast(self.vtable)).get_ProductName(@as(*const IWscProduct, @ptrCast(self)), p_val_);
            }
            pub inline fn getProductState(self: *const T, p_val_: ?*WSC_SECURITY_PRODUCT_STATE) HRESULT {
                return @as(*const IWscProduct.VTable, @ptrCast(self.vtable)).get_ProductState(@as(*const IWscProduct, @ptrCast(self)), p_val_);
            }
            pub inline fn getSignatureStatus(self: *const T, p_val_: ?*WSC_SECURITY_SIGNATURE_STATUS) HRESULT {
                return @as(*const IWscProduct.VTable, @ptrCast(self.vtable)).get_SignatureStatus(@as(*const IWscProduct, @ptrCast(self)), p_val_);
            }
            pub inline fn getRemediationPath(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IWscProduct.VTable, @ptrCast(self.vtable)).get_RemediationPath(@as(*const IWscProduct, @ptrCast(self)), p_val_);
            }
            pub inline fn getProductStateTimestamp(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IWscProduct.VTable, @ptrCast(self.vtable)).get_ProductStateTimestamp(@as(*const IWscProduct, @ptrCast(self)), p_val_);
            }
            pub inline fn getProductGuid(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IWscProduct.VTable, @ptrCast(self.vtable)).get_ProductGuid(@as(*const IWscProduct, @ptrCast(self)), p_val_);
            }
            pub inline fn getProductIsDefault(self: *const T, p_val_: ?*BOOL) HRESULT {
                return @as(*const IWscProduct.VTable, @ptrCast(self.vtable)).get_ProductIsDefault(@as(*const IWscProduct, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWscProduct2_Value = Guid.initString("f896ca54-fe09-4403-86d4-23cb488d81d8");
pub const IID_IWscProduct2 = &IID_IWscProduct2_Value;
pub const IWscProduct2 = extern struct {
    pub const VTable = extern struct {
        base: IWscProduct.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntivirusScanSubstatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct2,
            pe_status: ?*WSC_SECURITY_PRODUCT_SUBSTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntivirusSettingsSubstatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct2,
            pe_status: ?*WSC_SECURITY_PRODUCT_SUBSTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntivirusProtectionUpdateSubstatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct2,
            pe_status: ?*WSC_SECURITY_PRODUCT_SUBSTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FirewallDomainProfileSubstatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct2,
            pe_status: ?*WSC_SECURITY_PRODUCT_SUBSTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FirewallPrivateProfileSubstatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct2,
            pe_status: ?*WSC_SECURITY_PRODUCT_SUBSTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FirewallPublicProfileSubstatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct2,
            pe_status: ?*WSC_SECURITY_PRODUCT_SUBSTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWscProduct.MethodMixin(T);
            pub inline fn getAntivirusScanSubstatus(self: *const T, pe_status_: ?*WSC_SECURITY_PRODUCT_SUBSTATUS) HRESULT {
                return @as(*const IWscProduct2.VTable, @ptrCast(self.vtable)).get_AntivirusScanSubstatus(@as(*const IWscProduct2, @ptrCast(self)), pe_status_);
            }
            pub inline fn getAntivirusSettingsSubstatus(self: *const T, pe_status_: ?*WSC_SECURITY_PRODUCT_SUBSTATUS) HRESULT {
                return @as(*const IWscProduct2.VTable, @ptrCast(self.vtable)).get_AntivirusSettingsSubstatus(@as(*const IWscProduct2, @ptrCast(self)), pe_status_);
            }
            pub inline fn getAntivirusProtectionUpdateSubstatus(self: *const T, pe_status_: ?*WSC_SECURITY_PRODUCT_SUBSTATUS) HRESULT {
                return @as(*const IWscProduct2.VTable, @ptrCast(self.vtable)).get_AntivirusProtectionUpdateSubstatus(@as(*const IWscProduct2, @ptrCast(self)), pe_status_);
            }
            pub inline fn getFirewallDomainProfileSubstatus(self: *const T, pe_status_: ?*WSC_SECURITY_PRODUCT_SUBSTATUS) HRESULT {
                return @as(*const IWscProduct2.VTable, @ptrCast(self.vtable)).get_FirewallDomainProfileSubstatus(@as(*const IWscProduct2, @ptrCast(self)), pe_status_);
            }
            pub inline fn getFirewallPrivateProfileSubstatus(self: *const T, pe_status_: ?*WSC_SECURITY_PRODUCT_SUBSTATUS) HRESULT {
                return @as(*const IWscProduct2.VTable, @ptrCast(self.vtable)).get_FirewallPrivateProfileSubstatus(@as(*const IWscProduct2, @ptrCast(self)), pe_status_);
            }
            pub inline fn getFirewallPublicProfileSubstatus(self: *const T, pe_status_: ?*WSC_SECURITY_PRODUCT_SUBSTATUS) HRESULT {
                return @as(*const IWscProduct2.VTable, @ptrCast(self.vtable)).get_FirewallPublicProfileSubstatus(@as(*const IWscProduct2, @ptrCast(self)), pe_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWscProduct3_Value = Guid.initString("55536524-d1d1-4726-8c7c-04996a1904e7");
pub const IID_IWscProduct3 = &IID_IWscProduct3_Value;
pub const IWscProduct3 = extern struct {
    pub const VTable = extern struct {
        base: IWscProduct2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntivirusDaysUntilExpired: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWscProduct3,
            pdw_days: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWscProduct2.MethodMixin(T);
            pub inline fn getAntivirusDaysUntilExpired(self: *const T, pdw_days_: ?*u32) HRESULT {
                return @as(*const IWscProduct3.VTable, @ptrCast(self.vtable)).get_AntivirusDaysUntilExpired(@as(*const IWscProduct3, @ptrCast(self)), pdw_days_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWSCProductList_Value = Guid.initString("722a338c-6e8e-4e72-ac27-1417fb0c81c2");
pub const IID_IWSCProductList = &IID_IWSCProductList_Value;
pub const IWSCProductList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IWSCProductList,
            provider: WSC_SECURITY_PROVIDER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWSCProductList,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWSCProductList,
            index: u32,
            p_val: ?*?*IWscProduct,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, provider_: WSC_SECURITY_PROVIDER) HRESULT {
                return @as(*const IWSCProductList.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWSCProductList, @ptrCast(self)), provider_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IWSCProductList.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IWSCProductList, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, index_: u32, p_val_: ?*?*IWscProduct) HRESULT {
                return @as(*const IWSCProductList.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IWSCProductList, @ptrCast(self)), index_, p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWSCDefaultProduct_Value = Guid.initString("0476d69c-f21a-11e5-9ce9-5e5517507c66");
pub const IID_IWSCDefaultProduct = &IID_IWSCDefaultProduct_Value;
pub const IWSCDefaultProduct = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetDefaultProduct: *const fn (
            self: *const IWSCDefaultProduct,
            e_type: SECURITY_PRODUCT_TYPE,
            p_guid: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn setDefaultProduct(self: *const T, e_type_: SECURITY_PRODUCT_TYPE, p_guid_: ?BSTR) HRESULT {
                return @as(*const IWSCDefaultProduct.VTable, @ptrCast(self.vtable)).SetDefaultProduct(@as(*const IWSCDefaultProduct, @ptrCast(self)), e_type_, p_guid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WSC_SECURITY_PROVIDER = enum(i32) {
    FIREWALL = 1,
    AUTOUPDATE_SETTINGS = 2,
    ANTIVIRUS = 4,
    ANTISPYWARE = 8,
    INTERNET_SETTINGS = 16,
    USER_ACCOUNT_CONTROL = 32,
    SERVICE = 64,
    NONE = 0,
    ALL = 127,
};
pub const WSC_SECURITY_PROVIDER_FIREWALL = WSC_SECURITY_PROVIDER.FIREWALL;
pub const WSC_SECURITY_PROVIDER_AUTOUPDATE_SETTINGS = WSC_SECURITY_PROVIDER.AUTOUPDATE_SETTINGS;
pub const WSC_SECURITY_PROVIDER_ANTIVIRUS = WSC_SECURITY_PROVIDER.ANTIVIRUS;
pub const WSC_SECURITY_PROVIDER_ANTISPYWARE = WSC_SECURITY_PROVIDER.ANTISPYWARE;
pub const WSC_SECURITY_PROVIDER_INTERNET_SETTINGS = WSC_SECURITY_PROVIDER.INTERNET_SETTINGS;
pub const WSC_SECURITY_PROVIDER_USER_ACCOUNT_CONTROL = WSC_SECURITY_PROVIDER.USER_ACCOUNT_CONTROL;
pub const WSC_SECURITY_PROVIDER_SERVICE = WSC_SECURITY_PROVIDER.SERVICE;
pub const WSC_SECURITY_PROVIDER_NONE = WSC_SECURITY_PROVIDER.NONE;
pub const WSC_SECURITY_PROVIDER_ALL = WSC_SECURITY_PROVIDER.ALL;

pub const WSC_SECURITY_PROVIDER_HEALTH = enum(i32) {
    GOOD = 0,
    NOTMONITORED = 1,
    POOR = 2,
    SNOOZE = 3,
};
pub const WSC_SECURITY_PROVIDER_HEALTH_GOOD = WSC_SECURITY_PROVIDER_HEALTH.GOOD;
pub const WSC_SECURITY_PROVIDER_HEALTH_NOTMONITORED = WSC_SECURITY_PROVIDER_HEALTH.NOTMONITORED;
pub const WSC_SECURITY_PROVIDER_HEALTH_POOR = WSC_SECURITY_PROVIDER_HEALTH.POOR;
pub const WSC_SECURITY_PROVIDER_HEALTH_SNOOZE = WSC_SECURITY_PROVIDER_HEALTH.SNOOZE;

//--------------------------------------------------------------------------------
// Section: Functions (6)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wscapi" fn WscRegisterForChanges(
    reserved: ?*anyopaque,
    ph_callback_registration: ?*?HANDLE,
    lp_callback_address: ?LPTHREAD_START_ROUTINE,
    p_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wscapi" fn WscUnRegisterChanges(
    h_registration_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "wscapi" fn WscRegisterForUserNotifications() callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wscapi" fn WscGetSecurityProviderHealth(
    providers: u32,
    p_health: ?*WSC_SECURITY_PROVIDER_HEALTH,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "wscapi" fn WscQueryAntiMalwareUri() callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "wscapi" fn WscGetAntiMalwareUri(
    ppsz_uri: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const LPTHREAD_START_ROUTINE = @import("../system/threading.zig").LPTHREAD_START_ROUTINE;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
