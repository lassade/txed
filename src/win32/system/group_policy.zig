//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (103)
//--------------------------------------------------------------------------------
pub const GPM_USE_PDC = @as(u32, 0);
pub const GPM_USE_ANYDC = @as(u32, 1);
pub const GPM_DONOTUSE_W2KDC = @as(u32, 2);
pub const GPM_DONOT_VALIDATEDC = @as(u32, 1);
pub const GPM_MIGRATIONTABLE_ONLY = @as(u32, 1);
pub const GPM_PROCESS_SECURITY = @as(u32, 2);
pub const RSOP_NO_COMPUTER = @as(u32, 65536);
pub const RSOP_NO_USER = @as(u32, 131072);
pub const RSOP_PLANNING_ASSUME_SLOW_LINK = @as(u32, 1);
pub const RSOP_PLANNING_ASSUME_LOOPBACK_MERGE = @as(u32, 2);
pub const RSOP_PLANNING_ASSUME_LOOPBACK_REPLACE = @as(u32, 4);
pub const RSOP_PLANNING_ASSUME_USER_WQLFILTER_TRUE = @as(u32, 8);
pub const RSOP_PLANNING_ASSUME_COMP_WQLFILTER_TRUE = @as(u32, 16);
pub const PI_NOUI = @as(u32, 1);
pub const PI_APPLYPOLICY = @as(u32, 2);
pub const PT_TEMPORARY = @as(u32, 1);
pub const PT_ROAMING = @as(u32, 2);
pub const PT_MANDATORY = @as(u32, 4);
pub const PT_ROAMING_PREEXISTING = @as(u32, 8);
pub const RP_FORCE = @as(u32, 1);
pub const RP_SYNC = @as(u32, 2);
pub const GPC_BLOCK_POLICY = @as(u32, 1);
pub const GPO_FLAG_DISABLE = @as(u32, 1);
pub const GPO_FLAG_FORCE = @as(u32, 2);
pub const GPO_LIST_FLAG_MACHINE = @as(u32, 1);
pub const GPO_LIST_FLAG_SITEONLY = @as(u32, 2);
pub const GPO_LIST_FLAG_NO_WMIFILTERS = @as(u32, 4);
pub const GPO_LIST_FLAG_NO_SECURITYFILTERS = @as(u32, 8);
pub const GP_DLLNAME = "DllName";
pub const GP_ENABLEASYNCHRONOUSPROCESSING = "EnableAsynchronousProcessing";
pub const GP_MAXNOGPOLISTCHANGESINTERVAL = "MaxNoGPOListChangesInterval";
pub const GP_NOBACKGROUNDPOLICY = "NoBackgroundPolicy";
pub const GP_NOGPOLISTCHANGES = "NoGPOListChanges";
pub const GP_NOMACHINEPOLICY = "NoMachinePolicy";
pub const GP_NOSLOWLINK = "NoSlowLink";
pub const GP_NOTIFYLINKTRANSITION = "NotifyLinkTransition";
pub const GP_NOUSERPOLICY = "NoUserPolicy";
pub const GP_PERUSERLOCALSETTINGS = "PerUserLocalSettings";
pub const GP_PROCESSGROUPPOLICY = "ProcessGroupPolicy";
pub const GP_REQUIRESSUCCESSFULREGISTRY = "RequiresSuccessfulRegistry";
pub const GPO_INFO_FLAG_MACHINE = @as(u32, 1);
pub const GPO_INFO_FLAG_BACKGROUND = @as(u32, 16);
pub const GPO_INFO_FLAG_SLOWLINK = @as(u32, 32);
pub const GPO_INFO_FLAG_VERBOSE = @as(u32, 64);
pub const GPO_INFO_FLAG_NOCHANGES = @as(u32, 128);
pub const GPO_INFO_FLAG_LINKTRANSITION = @as(u32, 256);
pub const GPO_INFO_FLAG_LOGRSOP_TRANSITION = @as(u32, 512);
pub const GPO_INFO_FLAG_FORCED_REFRESH = @as(u32, 1024);
pub const GPO_INFO_FLAG_SAFEMODE_BOOT = @as(u32, 2048);
pub const GPO_INFO_FLAG_ASYNC_FOREGROUND = @as(u32, 4096);
pub const FLAG_NO_GPO_FILTER = @as(u32, 2147483648);
pub const FLAG_NO_CSE_INVOKE = @as(u32, 1073741824);
pub const FLAG_ASSUME_SLOW_LINK = @as(u32, 536870912);
pub const FLAG_LOOPBACK_MERGE = @as(u32, 268435456);
pub const FLAG_LOOPBACK_REPLACE = @as(u32, 134217728);
pub const FLAG_ASSUME_USER_WQLFILTER_TRUE = @as(u32, 67108864);
pub const FLAG_ASSUME_COMP_WQLFILTER_TRUE = @as(u32, 33554432);
pub const FLAG_PLANNING_MODE = @as(u32, 16777216);
pub const FLAG_NO_USER = @as(u32, 1);
pub const FLAG_NO_COMPUTER = @as(u32, 2);
pub const FLAG_FORCE_CREATENAMESPACE = @as(u32, 4);
pub const RSOP_USER_ACCESS_DENIED = @as(u32, 1);
pub const RSOP_COMPUTER_ACCESS_DENIED = @as(u32, 2);
pub const RSOP_TEMPNAMESPACE_EXISTS = @as(u32, 4);
pub const LOCALSTATE_ASSIGNED = @as(u32, 1);
pub const LOCALSTATE_PUBLISHED = @as(u32, 2);
pub const LOCALSTATE_UNINSTALL_UNMANAGED = @as(u32, 4);
pub const LOCALSTATE_POLICYREMOVE_ORPHAN = @as(u32, 8);
pub const LOCALSTATE_POLICYREMOVE_UNINSTALL = @as(u32, 16);
pub const LOCALSTATE_ORPHANED = @as(u32, 32);
pub const LOCALSTATE_UNINSTALLED = @as(u32, 64);
pub const MANAGED_APPS_USERAPPLICATIONS = @as(u32, 1);
pub const MANAGED_APPS_FROMCATEGORY = @as(u32, 2);
pub const MANAGED_APPS_INFOLEVEL_DEFAULT = @as(u32, 65536);
pub const MANAGED_APPTYPE_WINDOWSINSTALLER = @as(u32, 1);
pub const MANAGED_APPTYPE_SETUPEXE = @as(u32, 2);
pub const MANAGED_APPTYPE_UNSUPPORTED = @as(u32, 3);
pub const CLSID_GPESnapIn = Guid.initString("8fc0b734-a0e1-11d1-a7d3-0000f87571e3");
pub const NODEID_Machine = Guid.initString("8fc0b737-a0e1-11d1-a7d3-0000f87571e3");
pub const NODEID_MachineSWSettings = Guid.initString("8fc0b73a-a0e1-11d1-a7d3-0000f87571e3");
pub const NODEID_User = Guid.initString("8fc0b738-a0e1-11d1-a7d3-0000f87571e3");
pub const NODEID_UserSWSettings = Guid.initString("8fc0b73c-a0e1-11d1-a7d3-0000f87571e3");
pub const CLSID_GroupPolicyObject = Guid.initString("ea502722-a23d-11d1-a7d3-0000f87571e3");
pub const CLSID_RSOPSnapIn = Guid.initString("6dc3804b-7212-458d-adb0-9a07e2ae1fa2");
pub const NODEID_RSOPMachine = Guid.initString("bd4c1a2e-0b7a-4a62-a6b0-c0577539c97e");
pub const NODEID_RSOPMachineSWSettings = Guid.initString("6a76273e-eb8e-45db-94c5-25663a5f2c1a");
pub const NODEID_RSOPUser = Guid.initString("ab87364f-0cec-4cd8-9bf8-898f34628fb8");
pub const NODEID_RSOPUserSWSettings = Guid.initString("e52c5ce3-fd27-4402-84de-d9a5f2858910");
pub const GPO_SECTION_ROOT = @as(u32, 0);
pub const GPO_SECTION_USER = @as(u32, 1);
pub const GPO_SECTION_MACHINE = @as(u32, 2);
pub const GPO_OPEN_LOAD_REGISTRY = @as(u32, 1);
pub const GPO_OPEN_READ_ONLY = @as(u32, 2);
pub const GPO_OPTION_DISABLE_USER = @as(u32, 1);
pub const GPO_OPTION_DISABLE_MACHINE = @as(u32, 2);
pub const RSOP_INFO_FLAG_DIAGNOSTIC_MODE = @as(u32, 1);
pub const GPO_BROWSE_DISABLENEW = @as(u32, 1);
pub const GPO_BROWSE_NOCOMPUTERS = @as(u32, 2);
pub const GPO_BROWSE_NODSGPOS = @as(u32, 4);
pub const GPO_BROWSE_OPENBUTTON = @as(u32, 8);
pub const GPO_BROWSE_INITTOALL = @as(u32, 16);
pub const GPO_BROWSE_NOUSERGPOS = @as(u32, 32);
pub const GPO_BROWSE_SENDAPPLYONEDIT = @as(u32, 64);

//--------------------------------------------------------------------------------
// Section: Types (109)
//--------------------------------------------------------------------------------
// TODO: this type has a FreeFunc 'LeaveCriticalPolicySection', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const CriticalPolicySectionHandle = isize;

const CLSID_GPM_Value = Guid.initString("f5694708-88fe-4b35-babf-e56162d5fbc8");
pub const CLSID_GPM = &CLSID_GPM_Value;

const CLSID_GPMDomain_Value = Guid.initString("710901be-1050-4cb1-838a-c5cff259e183");
pub const CLSID_GPMDomain = &CLSID_GPMDomain_Value;

const CLSID_GPMSitesContainer_Value = Guid.initString("229f5c42-852c-4b30-945f-c522be9bd386");
pub const CLSID_GPMSitesContainer = &CLSID_GPMSitesContainer_Value;

const CLSID_GPMBackupDir_Value = Guid.initString("fce4a59d-0f21-4afa-b859-e6d0c62cd10c");
pub const CLSID_GPMBackupDir = &CLSID_GPMBackupDir_Value;

const CLSID_GPMSOM_Value = Guid.initString("32d93fac-450e-44cf-829c-8b22ff6bdae1");
pub const CLSID_GPMSOM = &CLSID_GPMSOM_Value;

const CLSID_GPMSearchCriteria_Value = Guid.initString("17aaca26-5ce0-44fa-8cc0-5259e6483566");
pub const CLSID_GPMSearchCriteria = &CLSID_GPMSearchCriteria_Value;

const CLSID_GPMPermission_Value = Guid.initString("5871a40a-e9c0-46ec-913e-944ef9225a94");
pub const CLSID_GPMPermission = &CLSID_GPMPermission_Value;

const CLSID_GPMSecurityInfo_Value = Guid.initString("547a5e8f-9162-4516-a4df-9ddb9686d846");
pub const CLSID_GPMSecurityInfo = &CLSID_GPMSecurityInfo_Value;

const CLSID_GPMBackup_Value = Guid.initString("ed1a54b8-5efa-482a-93c0-8ad86f0d68c3");
pub const CLSID_GPMBackup = &CLSID_GPMBackup_Value;

const CLSID_GPMBackupCollection_Value = Guid.initString("eb8f035b-70db-4a9f-9676-37c25994e9dc");
pub const CLSID_GPMBackupCollection = &CLSID_GPMBackupCollection_Value;

const CLSID_GPMSOMCollection_Value = Guid.initString("24c1f147-3720-4f5b-a9c3-06b4e4f931d2");
pub const CLSID_GPMSOMCollection = &CLSID_GPMSOMCollection_Value;

const CLSID_GPMWMIFilter_Value = Guid.initString("626745d8-0dea-4062-bf60-cfc5b1ca1286");
pub const CLSID_GPMWMIFilter = &CLSID_GPMWMIFilter_Value;

const CLSID_GPMWMIFilterCollection_Value = Guid.initString("74dc6d28-e820-47d6-a0b8-f08d93d7fa33");
pub const CLSID_GPMWMIFilterCollection = &CLSID_GPMWMIFilterCollection_Value;

const CLSID_GPMRSOP_Value = Guid.initString("489b0caf-9ec2-4eb7-91f5-b6f71d43da8c");
pub const CLSID_GPMRSOP = &CLSID_GPMRSOP_Value;

const CLSID_GPMGPO_Value = Guid.initString("d2ce2994-59b5-4064-b581-4d68486a16c4");
pub const CLSID_GPMGPO = &CLSID_GPMGPO_Value;

const CLSID_GPMGPOCollection_Value = Guid.initString("7a057325-832d-4de3-a41f-c780436a4e09");
pub const CLSID_GPMGPOCollection = &CLSID_GPMGPOCollection_Value;

const CLSID_GPMGPOLink_Value = Guid.initString("c1df9880-5303-42c6-8a3c-0488e1bf7364");
pub const CLSID_GPMGPOLink = &CLSID_GPMGPOLink_Value;

const CLSID_GPMGPOLinksCollection_Value = Guid.initString("f6ed581a-49a5-47e2-b771-fd8dc02b6259");
pub const CLSID_GPMGPOLinksCollection = &CLSID_GPMGPOLinksCollection_Value;

const CLSID_GPMAsyncCancel_Value = Guid.initString("372796a9-76ec-479d-ad6c-556318ed5f9d");
pub const CLSID_GPMAsyncCancel = &CLSID_GPMAsyncCancel_Value;

const CLSID_GPMStatusMsgCollection_Value = Guid.initString("2824e4be-4bcc-4cac-9e60-0e3ed7f12496");
pub const CLSID_GPMStatusMsgCollection = &CLSID_GPMStatusMsgCollection_Value;

const CLSID_GPMStatusMessage_Value = Guid.initString("4b77cc94-d255-409b-bc62-370881715a19");
pub const CLSID_GPMStatusMessage = &CLSID_GPMStatusMessage_Value;

const CLSID_GPMTrustee_Value = Guid.initString("c54a700d-19b6-4211-bcb0-e8e2475e471e");
pub const CLSID_GPMTrustee = &CLSID_GPMTrustee_Value;

const CLSID_GPMClientSideExtension_Value = Guid.initString("c1a2e70e-659c-4b1a-940b-f88b0af9c8a4");
pub const CLSID_GPMClientSideExtension = &CLSID_GPMClientSideExtension_Value;

const CLSID_GPMCSECollection_Value = Guid.initString("cf92b828-2d44-4b61-b10a-b327afd42da8");
pub const CLSID_GPMCSECollection = &CLSID_GPMCSECollection_Value;

const CLSID_GPMConstants_Value = Guid.initString("3855e880-cd9e-4d0c-9eaf-1579283a1888");
pub const CLSID_GPMConstants = &CLSID_GPMConstants_Value;

const CLSID_GPMResult_Value = Guid.initString("92101ac0-9287-4206-a3b2-4bdb73d225f6");
pub const CLSID_GPMResult = &CLSID_GPMResult_Value;

const CLSID_GPMMapEntryCollection_Value = Guid.initString("0cf75d5b-a3a1-4c55-b4fe-9e149c41f66d");
pub const CLSID_GPMMapEntryCollection = &CLSID_GPMMapEntryCollection_Value;

const CLSID_GPMMapEntry_Value = Guid.initString("8c975253-5431-4471-b35d-0626c928258a");
pub const CLSID_GPMMapEntry = &CLSID_GPMMapEntry_Value;

const CLSID_GPMMigrationTable_Value = Guid.initString("55af4043-2a06-4f72-abef-631b44079c76");
pub const CLSID_GPMMigrationTable = &CLSID_GPMMigrationTable_Value;

const CLSID_GPMBackupDirEx_Value = Guid.initString("e8c0988a-cf03-4c5b-8be2-2aa9ad32aada");
pub const CLSID_GPMBackupDirEx = &CLSID_GPMBackupDirEx_Value;

const CLSID_GPMStarterGPOBackupCollection_Value = Guid.initString("e75ea59d-1aeb-4cb5-a78a-281daa582406");
pub const CLSID_GPMStarterGPOBackupCollection = &CLSID_GPMStarterGPOBackupCollection_Value;

const CLSID_GPMStarterGPOBackup_Value = Guid.initString("389e400a-d8ef-455b-a861-5f9ca34a6a02");
pub const CLSID_GPMStarterGPOBackup = &CLSID_GPMStarterGPOBackup_Value;

const CLSID_GPMTemplate_Value = Guid.initString("ecf1d454-71da-4e2f-a8c0-8185465911d9");
pub const CLSID_GPMTemplate = &CLSID_GPMTemplate_Value;

const CLSID_GPMStarterGPOCollection_Value = Guid.initString("82f8aa8b-49ba-43b2-956e-3397f9b94c3a");
pub const CLSID_GPMStarterGPOCollection = &CLSID_GPMStarterGPOCollection_Value;

pub const GPMRSOPMode = enum(i32) {
    Unknown = 0,
    Planning = 1,
    Logging = 2,
};
pub const rsopUnknown = GPMRSOPMode.Unknown;
pub const rsopPlanning = GPMRSOPMode.Planning;
pub const rsopLogging = GPMRSOPMode.Logging;

pub const GPMPermissionType = enum(i32) {
    GPOApply = 65536,
    GPORead = 65792,
    GPOEdit = 65793,
    GPOEditSecurityAndDelete = 65794,
    GPOCustom = 65795,
    WMIFilterEdit = 131072,
    WMIFilterFullControl = 131073,
    WMIFilterCustom = 131074,
    SOMLink = 1835008,
    SOMLogging = 1573120,
    SOMPlanning = 1573376,
    SOMWMICreate = 1049344,
    SOMWMIFullControl = 1049345,
    SOMGPOCreate = 1049600,
    StarterGPORead = 197888,
    StarterGPOEdit = 197889,
    StarterGPOFullControl = 197890,
    StarterGPOCustom = 197891,
    SOMStarterGPOCreate = 1049856,
};
pub const permGPOApply = GPMPermissionType.GPOApply;
pub const permGPORead = GPMPermissionType.GPORead;
pub const permGPOEdit = GPMPermissionType.GPOEdit;
pub const permGPOEditSecurityAndDelete = GPMPermissionType.GPOEditSecurityAndDelete;
pub const permGPOCustom = GPMPermissionType.GPOCustom;
pub const permWMIFilterEdit = GPMPermissionType.WMIFilterEdit;
pub const permWMIFilterFullControl = GPMPermissionType.WMIFilterFullControl;
pub const permWMIFilterCustom = GPMPermissionType.WMIFilterCustom;
pub const permSOMLink = GPMPermissionType.SOMLink;
pub const permSOMLogging = GPMPermissionType.SOMLogging;
pub const permSOMPlanning = GPMPermissionType.SOMPlanning;
pub const permSOMWMICreate = GPMPermissionType.SOMWMICreate;
pub const permSOMWMIFullControl = GPMPermissionType.SOMWMIFullControl;
pub const permSOMGPOCreate = GPMPermissionType.SOMGPOCreate;
pub const permStarterGPORead = GPMPermissionType.StarterGPORead;
pub const permStarterGPOEdit = GPMPermissionType.StarterGPOEdit;
pub const permStarterGPOFullControl = GPMPermissionType.StarterGPOFullControl;
pub const permStarterGPOCustom = GPMPermissionType.StarterGPOCustom;
pub const permSOMStarterGPOCreate = GPMPermissionType.SOMStarterGPOCreate;

pub const GPMSearchProperty = enum(i32) {
    gpoPermissions = 0,
    gpoEffectivePermissions = 1,
    gpoDisplayName = 2,
    gpoWMIFilter = 3,
    gpoID = 4,
    gpoComputerExtensions = 5,
    gpoUserExtensions = 6,
    somLinks = 7,
    gpoDomain = 8,
    backupMostRecent = 9,
    starterGPOPermissions = 10,
    starterGPOEffectivePermissions = 11,
    starterGPODisplayName = 12,
    starterGPOID = 13,
    starterGPODomain = 14,
};
pub const gpoPermissions = GPMSearchProperty.gpoPermissions;
pub const gpoEffectivePermissions = GPMSearchProperty.gpoEffectivePermissions;
pub const gpoDisplayName = GPMSearchProperty.gpoDisplayName;
pub const gpoWMIFilter = GPMSearchProperty.gpoWMIFilter;
pub const gpoID = GPMSearchProperty.gpoID;
pub const gpoComputerExtensions = GPMSearchProperty.gpoComputerExtensions;
pub const gpoUserExtensions = GPMSearchProperty.gpoUserExtensions;
pub const somLinks = GPMSearchProperty.somLinks;
pub const gpoDomain = GPMSearchProperty.gpoDomain;
pub const backupMostRecent = GPMSearchProperty.backupMostRecent;
pub const starterGPOPermissions = GPMSearchProperty.starterGPOPermissions;
pub const starterGPOEffectivePermissions = GPMSearchProperty.starterGPOEffectivePermissions;
pub const starterGPODisplayName = GPMSearchProperty.starterGPODisplayName;
pub const starterGPOID = GPMSearchProperty.starterGPOID;
pub const starterGPODomain = GPMSearchProperty.starterGPODomain;

pub const GPMSearchOperation = enum(i32) {
    Equals = 0,
    Contains = 1,
    NotContains = 2,
    NotEquals = 3,
};
pub const opEquals = GPMSearchOperation.Equals;
pub const opContains = GPMSearchOperation.Contains;
pub const opNotContains = GPMSearchOperation.NotContains;
pub const opNotEquals = GPMSearchOperation.NotEquals;

pub const GPMReportType = enum(i32) {
    XML = 0,
    HTML = 1,
    InfraXML = 2,
    InfraRefreshXML = 3,
    ClientHealthXML = 4,
    ClientHealthRefreshXML = 5,
};
pub const repXML = GPMReportType.XML;
pub const repHTML = GPMReportType.HTML;
pub const repInfraXML = GPMReportType.InfraXML;
pub const repInfraRefreshXML = GPMReportType.InfraRefreshXML;
pub const repClientHealthXML = GPMReportType.ClientHealthXML;
pub const repClientHealthRefreshXML = GPMReportType.ClientHealthRefreshXML;

pub const GPMEntryType = enum(i32) {
    User = 0,
    Computer = 1,
    LocalGroup = 2,
    GlobalGroup = 3,
    UniversalGroup = 4,
    UNCPath = 5,
    Unknown = 6,
};
pub const typeUser = GPMEntryType.User;
pub const typeComputer = GPMEntryType.Computer;
pub const typeLocalGroup = GPMEntryType.LocalGroup;
pub const typeGlobalGroup = GPMEntryType.GlobalGroup;
pub const typeUniversalGroup = GPMEntryType.UniversalGroup;
pub const typeUNCPath = GPMEntryType.UNCPath;
pub const typeUnknown = GPMEntryType.Unknown;

pub const GPMDestinationOption = enum(i32) {
    SameAsSource = 0,
    None = 1,
    ByRelativeName = 2,
    Set = 3,
};
pub const opDestinationSameAsSource = GPMDestinationOption.SameAsSource;
pub const opDestinationNone = GPMDestinationOption.None;
pub const opDestinationByRelativeName = GPMDestinationOption.ByRelativeName;
pub const opDestinationSet = GPMDestinationOption.Set;

pub const GPMReportingOptions = enum(i32) {
    Legacy = 0,
    Comments = 1,
};
pub const opReportLegacy = GPMReportingOptions.Legacy;
pub const opReportComments = GPMReportingOptions.Comments;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPM_Value = Guid.initString("f5fae809-3bd6-4da9-a65e-17665b41d763");
pub const IID_IGPM = &IID_IGPM_Value;
pub const IGPM = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetDomain: *const fn (
            self: *const IGPM,
            bstr_domain: ?BSTR,
            bstr_domain_controller: ?BSTR,
            l_d_c_flags: i32,
            p_i_g_p_m_domain: ?*?*IGPMDomain,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackupDir: *const fn (
            self: *const IGPM,
            bstr_backup_dir: ?BSTR,
            p_i_g_p_m_backup_dir: ?*?*IGPMBackupDir,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSitesContainer: *const fn (
            self: *const IGPM,
            bstr_forest: ?BSTR,
            bstr_domain: ?BSTR,
            bstr_domain_controller: ?BSTR,
            l_d_c_flags: i32,
            pp_i_g_p_m_sites_container: ?*?*IGPMSitesContainer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRSOP: *const fn (
            self: *const IGPM,
            gpm_r_so_p_mode: GPMRSOPMode,
            bstr_namespace: ?BSTR,
            l_flags: i32,
            pp_i_g_p_m_r_s_o_p: ?*?*IGPMRSOP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePermission: *const fn (
            self: *const IGPM,
            bstr_trustee: ?BSTR,
            perm: GPMPermissionType,
            b_inheritable: i16,
            pp_perm: ?*?*IGPMPermission,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSearchCriteria: *const fn (
            self: *const IGPM,
            pp_i_g_p_m_search_criteria: ?*?*IGPMSearchCriteria,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTrustee: *const fn (
            self: *const IGPM,
            bstr_trustee: ?BSTR,
            pp_i_g_p_m_trustee: ?*?*IGPMTrustee,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientSideExtensions: *const fn (
            self: *const IGPM,
            pp_i_g_p_m_c_s_e_collection: ?*?*IGPMCSECollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConstants: *const fn (
            self: *const IGPM,
            pp_i_g_p_m_constants: ?*?*IGPMConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMigrationTable: *const fn (
            self: *const IGPM,
            bstr_migration_table_path: ?BSTR,
            pp_migration_table: ?*?*IGPMMigrationTable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMigrationTable: *const fn (
            self: *const IGPM,
            pp_migration_table: ?*?*IGPMMigrationTable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeReporting: *const fn (
            self: *const IGPM,
            bstr_adm_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDomain(self: *const T, bstr_domain_: ?BSTR, bstr_domain_controller_: ?BSTR, l_d_c_flags_: i32, p_i_g_p_m_domain_: ?*?*IGPMDomain) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).GetDomain(@as(*const IGPM, @ptrCast(self)), bstr_domain_, bstr_domain_controller_, l_d_c_flags_, p_i_g_p_m_domain_);
            }
            pub inline fn getBackupDir(self: *const T, bstr_backup_dir_: ?BSTR, p_i_g_p_m_backup_dir_: ?*?*IGPMBackupDir) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).GetBackupDir(@as(*const IGPM, @ptrCast(self)), bstr_backup_dir_, p_i_g_p_m_backup_dir_);
            }
            pub inline fn getSitesContainer(self: *const T, bstr_forest_: ?BSTR, bstr_domain_: ?BSTR, bstr_domain_controller_: ?BSTR, l_d_c_flags_: i32, pp_i_g_p_m_sites_container_: ?*?*IGPMSitesContainer) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).GetSitesContainer(@as(*const IGPM, @ptrCast(self)), bstr_forest_, bstr_domain_, bstr_domain_controller_, l_d_c_flags_, pp_i_g_p_m_sites_container_);
            }
            pub inline fn getRSOP(self: *const T, gpm_r_so_p_mode_: GPMRSOPMode, bstr_namespace_: ?BSTR, l_flags_: i32, pp_i_g_p_m_r_s_o_p_: ?*?*IGPMRSOP) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).GetRSOP(@as(*const IGPM, @ptrCast(self)), gpm_r_so_p_mode_, bstr_namespace_, l_flags_, pp_i_g_p_m_r_s_o_p_);
            }
            pub inline fn createPermission(self: *const T, bstr_trustee_: ?BSTR, perm_: GPMPermissionType, b_inheritable_: i16, pp_perm_: ?*?*IGPMPermission) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).CreatePermission(@as(*const IGPM, @ptrCast(self)), bstr_trustee_, perm_, b_inheritable_, pp_perm_);
            }
            pub inline fn createSearchCriteria(self: *const T, pp_i_g_p_m_search_criteria_: ?*?*IGPMSearchCriteria) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).CreateSearchCriteria(@as(*const IGPM, @ptrCast(self)), pp_i_g_p_m_search_criteria_);
            }
            pub inline fn createTrustee(self: *const T, bstr_trustee_: ?BSTR, pp_i_g_p_m_trustee_: ?*?*IGPMTrustee) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).CreateTrustee(@as(*const IGPM, @ptrCast(self)), bstr_trustee_, pp_i_g_p_m_trustee_);
            }
            pub inline fn getClientSideExtensions(self: *const T, pp_i_g_p_m_c_s_e_collection_: ?*?*IGPMCSECollection) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).GetClientSideExtensions(@as(*const IGPM, @ptrCast(self)), pp_i_g_p_m_c_s_e_collection_);
            }
            pub inline fn getConstants(self: *const T, pp_i_g_p_m_constants_: ?*?*IGPMConstants) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).GetConstants(@as(*const IGPM, @ptrCast(self)), pp_i_g_p_m_constants_);
            }
            pub inline fn getMigrationTable(self: *const T, bstr_migration_table_path_: ?BSTR, pp_migration_table_: ?*?*IGPMMigrationTable) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).GetMigrationTable(@as(*const IGPM, @ptrCast(self)), bstr_migration_table_path_, pp_migration_table_);
            }
            pub inline fn createMigrationTable(self: *const T, pp_migration_table_: ?*?*IGPMMigrationTable) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).CreateMigrationTable(@as(*const IGPM, @ptrCast(self)), pp_migration_table_);
            }
            pub inline fn initializeReporting(self: *const T, bstr_adm_path_: ?BSTR) HRESULT {
                return @as(*const IGPM.VTable, @ptrCast(self.vtable)).InitializeReporting(@as(*const IGPM, @ptrCast(self)), bstr_adm_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMDomain_Value = Guid.initString("6b21cc14-5a00-4f44-a738-feec8a94c7e3");
pub const IID_IGPMDomain = &IID_IGPMDomain_Value;
pub const IGPMDomain = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DomainController: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMDomain,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Domain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMDomain,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGPO: *const fn (
            self: *const IGPMDomain,
            pp_new_g_p_o: ?*?*IGPMGPO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGPO: *const fn (
            self: *const IGPMDomain,
            bstr_guid: ?BSTR,
            pp_g_p_o: ?*?*IGPMGPO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchGPOs: *const fn (
            self: *const IGPMDomain,
            p_i_g_p_m_search_criteria: ?*IGPMSearchCriteria,
            pp_i_g_p_m_g_p_o_collection: ?*?*IGPMGPOCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreGPO: *const fn (
            self: *const IGPMDomain,
            p_i_g_p_m_backup: ?*IGPMBackup,
            l_d_c_flags: i32,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSOM: *const fn (
            self: *const IGPMDomain,
            bstr_path: ?BSTR,
            pp_s_o_m: ?*?*IGPMSOM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchSOMs: *const fn (
            self: *const IGPMDomain,
            p_i_g_p_m_search_criteria: ?*IGPMSearchCriteria,
            pp_i_g_p_m_s_o_m_collection: ?*?*IGPMSOMCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWMIFilter: *const fn (
            self: *const IGPMDomain,
            bstr_path: ?BSTR,
            pp_w_m_i_filter: ?*?*IGPMWMIFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchWMIFilters: *const fn (
            self: *const IGPMDomain,
            p_i_g_p_m_search_criteria: ?*IGPMSearchCriteria,
            pp_i_g_p_m_w_m_i_filter_collection: ?*?*IGPMWMIFilterCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDomainController(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).get_DomainController(@as(*const IGPMDomain, @ptrCast(self)), p_val_);
            }
            pub inline fn getDomain(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).get_Domain(@as(*const IGPMDomain, @ptrCast(self)), p_val_);
            }
            pub inline fn createGPO(self: *const T, pp_new_g_p_o_: ?*?*IGPMGPO) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).CreateGPO(@as(*const IGPMDomain, @ptrCast(self)), pp_new_g_p_o_);
            }
            pub inline fn getGPO(self: *const T, bstr_guid_: ?BSTR, pp_g_p_o_: ?*?*IGPMGPO) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).GetGPO(@as(*const IGPMDomain, @ptrCast(self)), bstr_guid_, pp_g_p_o_);
            }
            pub inline fn searchGPOs(self: *const T, p_i_g_p_m_search_criteria_: ?*IGPMSearchCriteria, pp_i_g_p_m_g_p_o_collection_: ?*?*IGPMGPOCollection) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).SearchGPOs(@as(*const IGPMDomain, @ptrCast(self)), p_i_g_p_m_search_criteria_, pp_i_g_p_m_g_p_o_collection_);
            }
            pub inline fn restoreGPO(self: *const T, p_i_g_p_m_backup_: ?*IGPMBackup, l_d_c_flags_: i32, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).RestoreGPO(@as(*const IGPMDomain, @ptrCast(self)), p_i_g_p_m_backup_, l_d_c_flags_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn getSOM(self: *const T, bstr_path_: ?BSTR, pp_s_o_m_: ?*?*IGPMSOM) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).GetSOM(@as(*const IGPMDomain, @ptrCast(self)), bstr_path_, pp_s_o_m_);
            }
            pub inline fn searchSOMs(self: *const T, p_i_g_p_m_search_criteria_: ?*IGPMSearchCriteria, pp_i_g_p_m_s_o_m_collection_: ?*?*IGPMSOMCollection) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).SearchSOMs(@as(*const IGPMDomain, @ptrCast(self)), p_i_g_p_m_search_criteria_, pp_i_g_p_m_s_o_m_collection_);
            }
            pub inline fn getWMIFilter(self: *const T, bstr_path_: ?BSTR, pp_w_m_i_filter_: ?*?*IGPMWMIFilter) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).GetWMIFilter(@as(*const IGPMDomain, @ptrCast(self)), bstr_path_, pp_w_m_i_filter_);
            }
            pub inline fn searchWMIFilters(self: *const T, p_i_g_p_m_search_criteria_: ?*IGPMSearchCriteria, pp_i_g_p_m_w_m_i_filter_collection_: ?*?*IGPMWMIFilterCollection) HRESULT {
                return @as(*const IGPMDomain.VTable, @ptrCast(self.vtable)).SearchWMIFilters(@as(*const IGPMDomain, @ptrCast(self)), p_i_g_p_m_search_criteria_, pp_i_g_p_m_w_m_i_filter_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMBackupDir_Value = Guid.initString("b1568bed-0a93-4acc-810f-afe7081019b9");
pub const IID_IGPMBackupDir = &IID_IGPMBackupDir_Value;
pub const IGPMBackupDir = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackupDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackupDir,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackup: *const fn (
            self: *const IGPMBackupDir,
            bstr_i_d: ?BSTR,
            pp_backup: ?*?*IGPMBackup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchBackups: *const fn (
            self: *const IGPMBackupDir,
            p_i_g_p_m_search_criteria: ?*IGPMSearchCriteria,
            pp_i_g_p_m_backup_collection: ?*?*IGPMBackupCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBackupDirectory(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMBackupDir.VTable, @ptrCast(self.vtable)).get_BackupDirectory(@as(*const IGPMBackupDir, @ptrCast(self)), p_val_);
            }
            pub inline fn getBackup(self: *const T, bstr_i_d_: ?BSTR, pp_backup_: ?*?*IGPMBackup) HRESULT {
                return @as(*const IGPMBackupDir.VTable, @ptrCast(self.vtable)).GetBackup(@as(*const IGPMBackupDir, @ptrCast(self)), bstr_i_d_, pp_backup_);
            }
            pub inline fn searchBackups(self: *const T, p_i_g_p_m_search_criteria_: ?*IGPMSearchCriteria, pp_i_g_p_m_backup_collection_: ?*?*IGPMBackupCollection) HRESULT {
                return @as(*const IGPMBackupDir.VTable, @ptrCast(self.vtable)).SearchBackups(@as(*const IGPMBackupDir, @ptrCast(self)), p_i_g_p_m_search_criteria_, pp_i_g_p_m_backup_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMSitesContainer_Value = Guid.initString("4725a899-2782-4d27-a6bb-d499246ffd72");
pub const IID_IGPMSitesContainer = &IID_IGPMSitesContainer_Value;
pub const IGPMSitesContainer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DomainController: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSitesContainer,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Domain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSitesContainer,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Forest: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSitesContainer,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSite: *const fn (
            self: *const IGPMSitesContainer,
            bstr_site_name: ?BSTR,
            pp_s_o_m: ?*?*IGPMSOM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchSites: *const fn (
            self: *const IGPMSitesContainer,
            p_i_g_p_m_search_criteria: ?*IGPMSearchCriteria,
            pp_i_g_p_m_s_o_m_collection: ?*?*IGPMSOMCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDomainController(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMSitesContainer.VTable, @ptrCast(self.vtable)).get_DomainController(@as(*const IGPMSitesContainer, @ptrCast(self)), p_val_);
            }
            pub inline fn getDomain(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMSitesContainer.VTable, @ptrCast(self.vtable)).get_Domain(@as(*const IGPMSitesContainer, @ptrCast(self)), p_val_);
            }
            pub inline fn getForest(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMSitesContainer.VTable, @ptrCast(self.vtable)).get_Forest(@as(*const IGPMSitesContainer, @ptrCast(self)), p_val_);
            }
            pub inline fn getSite(self: *const T, bstr_site_name_: ?BSTR, pp_s_o_m_: ?*?*IGPMSOM) HRESULT {
                return @as(*const IGPMSitesContainer.VTable, @ptrCast(self.vtable)).GetSite(@as(*const IGPMSitesContainer, @ptrCast(self)), bstr_site_name_, pp_s_o_m_);
            }
            pub inline fn searchSites(self: *const T, p_i_g_p_m_search_criteria_: ?*IGPMSearchCriteria, pp_i_g_p_m_s_o_m_collection_: ?*?*IGPMSOMCollection) HRESULT {
                return @as(*const IGPMSitesContainer.VTable, @ptrCast(self.vtable)).SearchSites(@as(*const IGPMSitesContainer, @ptrCast(self)), p_i_g_p_m_search_criteria_, pp_i_g_p_m_s_o_m_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMSearchCriteria_Value = Guid.initString("d6f11c42-829b-48d4-83f5-3615b67dfc22");
pub const IID_IGPMSearchCriteria = &IID_IGPMSearchCriteria_Value;
pub const IGPMSearchCriteria = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Add: *const fn (
            self: *const IGPMSearchCriteria,
            search_property: GPMSearchProperty,
            search_operation: GPMSearchOperation,
            var_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn add(self: *const T, search_property_: GPMSearchProperty, search_operation_: GPMSearchOperation, var_value_: VARIANT) HRESULT {
                return @as(*const IGPMSearchCriteria.VTable, @ptrCast(self.vtable)).Add(@as(*const IGPMSearchCriteria, @ptrCast(self)), search_property_, search_operation_, var_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMTrustee_Value = Guid.initString("3b466da8-c1a4-4b2a-999a-befcdd56cefb");
pub const IID_IGPMTrustee = &IID_IGPMTrustee_Value;
pub const IGPMTrustee = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TrusteeSid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMTrustee,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TrusteeName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMTrustee,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TrusteeDomain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMTrustee,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TrusteeDSPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMTrustee,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TrusteeType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMTrustee,
            l_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTrusteeSid(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMTrustee.VTable, @ptrCast(self.vtable)).get_TrusteeSid(@as(*const IGPMTrustee, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getTrusteeName(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMTrustee.VTable, @ptrCast(self.vtable)).get_TrusteeName(@as(*const IGPMTrustee, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getTrusteeDomain(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMTrustee.VTable, @ptrCast(self.vtable)).get_TrusteeDomain(@as(*const IGPMTrustee, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getTrusteeDSPath(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMTrustee.VTable, @ptrCast(self.vtable)).get_TrusteeDSPath(@as(*const IGPMTrustee, @ptrCast(self)), p_val_);
            }
            pub inline fn getTrusteeType(self: *const T, l_val_: ?*i32) HRESULT {
                return @as(*const IGPMTrustee.VTable, @ptrCast(self.vtable)).get_TrusteeType(@as(*const IGPMTrustee, @ptrCast(self)), l_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMPermission_Value = Guid.initString("35ebca40-e1a1-4a02-8905-d79416fb464a");
pub const IID_IGPMPermission = &IID_IGPMPermission_Value;
pub const IGPMPermission = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Inherited: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMPermission,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Inheritable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMPermission,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Denied: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMPermission,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Permission: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMPermission,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trustee: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMPermission,
            pp_i_g_p_m_trustee: ?*?*IGPMTrustee,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getInherited(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IGPMPermission.VTable, @ptrCast(self.vtable)).get_Inherited(@as(*const IGPMPermission, @ptrCast(self)), p_val_);
            }
            pub inline fn getInheritable(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IGPMPermission.VTable, @ptrCast(self.vtable)).get_Inheritable(@as(*const IGPMPermission, @ptrCast(self)), p_val_);
            }
            pub inline fn getDenied(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IGPMPermission.VTable, @ptrCast(self.vtable)).get_Denied(@as(*const IGPMPermission, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermission(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMPermission.VTable, @ptrCast(self.vtable)).get_Permission(@as(*const IGPMPermission, @ptrCast(self)), p_val_);
            }
            pub inline fn getTrustee(self: *const T, pp_i_g_p_m_trustee_: ?*?*IGPMTrustee) HRESULT {
                return @as(*const IGPMPermission.VTable, @ptrCast(self.vtable)).get_Trustee(@as(*const IGPMPermission, @ptrCast(self)), pp_i_g_p_m_trustee_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMSecurityInfo_Value = Guid.initString("b6c31ed4-1c93-4d3e-ae84-eb6d61161b60");
pub const IID_IGPMSecurityInfo = &IID_IGPMSecurityInfo_Value;
pub const IGPMSecurityInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSecurityInfo,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSecurityInfo,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSecurityInfo,
            pp_enum: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IGPMSecurityInfo,
            p_perm: ?*IGPMPermission,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IGPMSecurityInfo,
            p_perm: ?*IGPMPermission,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveTrustee: *const fn (
            self: *const IGPMSecurityInfo,
            bstr_trustee: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMSecurityInfo.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMSecurityInfo, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMSecurityInfo.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMSecurityInfo, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMSecurityInfo.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMSecurityInfo, @ptrCast(self)), pp_enum_);
            }
            pub inline fn add(self: *const T, p_perm_: ?*IGPMPermission) HRESULT {
                return @as(*const IGPMSecurityInfo.VTable, @ptrCast(self.vtable)).Add(@as(*const IGPMSecurityInfo, @ptrCast(self)), p_perm_);
            }
            pub inline fn remove(self: *const T, p_perm_: ?*IGPMPermission) HRESULT {
                return @as(*const IGPMSecurityInfo.VTable, @ptrCast(self.vtable)).Remove(@as(*const IGPMSecurityInfo, @ptrCast(self)), p_perm_);
            }
            pub inline fn removeTrustee(self: *const T, bstr_trustee_: ?BSTR) HRESULT {
                return @as(*const IGPMSecurityInfo.VTable, @ptrCast(self.vtable)).RemoveTrustee(@as(*const IGPMSecurityInfo, @ptrCast(self)), bstr_trustee_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMBackup_Value = Guid.initString("d8a16a35-3b0d-416b-8d02-4df6f95a7119");
pub const IID_IGPMBackup = &IID_IGPMBackup_Value;
pub const IGPMBackup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackup,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GPOID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackup,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GPODomain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackup,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GPODisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackup,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Timestamp: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackup,
            p_val: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Comment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackup,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackupDir: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackup,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IGPMBackup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReport: *const fn (
            self: *const IGPMBackup,
            gpm_report_type: GPMReportType,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReportToFile: *const fn (
            self: *const IGPMBackup,
            gpm_report_type: GPMReportType,
            bstr_target_file_path: ?BSTR,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getID(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).get_ID(@as(*const IGPMBackup, @ptrCast(self)), p_val_);
            }
            pub inline fn getGPOID(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).get_GPOID(@as(*const IGPMBackup, @ptrCast(self)), p_val_);
            }
            pub inline fn getGPODomain(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).get_GPODomain(@as(*const IGPMBackup, @ptrCast(self)), p_val_);
            }
            pub inline fn getGPODisplayName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).get_GPODisplayName(@as(*const IGPMBackup, @ptrCast(self)), p_val_);
            }
            pub inline fn getTimestamp(self: *const T, p_val_: ?*f64) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).get_Timestamp(@as(*const IGPMBackup, @ptrCast(self)), p_val_);
            }
            pub inline fn getComment(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).get_Comment(@as(*const IGPMBackup, @ptrCast(self)), p_val_);
            }
            pub inline fn getBackupDir(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).get_BackupDir(@as(*const IGPMBackup, @ptrCast(self)), p_val_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).Delete(@as(*const IGPMBackup, @ptrCast(self)));
            }
            pub inline fn generateReport(self: *const T, gpm_report_type_: GPMReportType, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).GenerateReport(@as(*const IGPMBackup, @ptrCast(self)), gpm_report_type_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn generateReportToFile(self: *const T, gpm_report_type_: GPMReportType, bstr_target_file_path_: ?BSTR, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMBackup.VTable, @ptrCast(self.vtable)).GenerateReportToFile(@as(*const IGPMBackup, @ptrCast(self)), gpm_report_type_, bstr_target_file_path_, pp_i_g_p_m_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMBackupCollection_Value = Guid.initString("c786fc0f-26d8-4bab-a745-39ca7e800cac");
pub const IID_IGPMBackupCollection = &IID_IGPMBackupCollection_Value;
pub const IGPMBackupCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackupCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackupCollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackupCollection,
            pp_i_g_p_m_backup: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMBackupCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMBackupCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMBackupCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMBackupCollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, pp_i_g_p_m_backup_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMBackupCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMBackupCollection, @ptrCast(self)), pp_i_g_p_m_backup_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const GPMSOMType = enum(i32) {
    Site = 0,
    Domain = 1,
    OU = 2,
};
pub const somSite = GPMSOMType.Site;
pub const somDomain = GPMSOMType.Domain;
pub const somOU = GPMSOMType.OU;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMSOM_Value = Guid.initString("c0a7f09e-05a1-4f0c-8158-9e5c33684f6b");
pub const IID_IGPMSOM = &IID_IGPMSOM_Value;
pub const IGPMSOM = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GPOInheritanceBlocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSOM,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GPOInheritanceBlocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSOM,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSOM,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSOM,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGPOLink: *const fn (
            self: *const IGPMSOM,
            l_link_pos: i32,
            p_g_p_o: ?*IGPMGPO,
            pp_new_g_p_o_link: ?*?*IGPMGPOLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSOM,
            p_val: ?*GPMSOMType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGPOLinks: *const fn (
            self: *const IGPMSOM,
            pp_g_p_o_links: ?*?*IGPMGPOLinksCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInheritedGPOLinks: *const fn (
            self: *const IGPMSOM,
            pp_g_p_o_links: ?*?*IGPMGPOLinksCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityInfo: *const fn (
            self: *const IGPMSOM,
            pp_security_info: ?*?*IGPMSecurityInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityInfo: *const fn (
            self: *const IGPMSOM,
            p_security_info: ?*IGPMSecurityInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getGPOInheritanceBlocked(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).get_GPOInheritanceBlocked(@as(*const IGPMSOM, @ptrCast(self)), p_val_);
            }
            pub inline fn putGPOInheritanceBlocked(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).put_GPOInheritanceBlocked(@as(*const IGPMSOM, @ptrCast(self)), new_val_);
            }
            pub inline fn getName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IGPMSOM, @ptrCast(self)), p_val_);
            }
            pub inline fn getPath(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IGPMSOM, @ptrCast(self)), p_val_);
            }
            pub inline fn createGPOLink(self: *const T, l_link_pos_: i32, p_g_p_o_: ?*IGPMGPO, pp_new_g_p_o_link_: ?*?*IGPMGPOLink) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).CreateGPOLink(@as(*const IGPMSOM, @ptrCast(self)), l_link_pos_, p_g_p_o_, pp_new_g_p_o_link_);
            }
            pub inline fn getType(self: *const T, p_val_: ?*GPMSOMType) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IGPMSOM, @ptrCast(self)), p_val_);
            }
            pub inline fn getGPOLinks(self: *const T, pp_g_p_o_links_: ?*?*IGPMGPOLinksCollection) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).GetGPOLinks(@as(*const IGPMSOM, @ptrCast(self)), pp_g_p_o_links_);
            }
            pub inline fn getInheritedGPOLinks(self: *const T, pp_g_p_o_links_: ?*?*IGPMGPOLinksCollection) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).GetInheritedGPOLinks(@as(*const IGPMSOM, @ptrCast(self)), pp_g_p_o_links_);
            }
            pub inline fn getSecurityInfo(self: *const T, pp_security_info_: ?*?*IGPMSecurityInfo) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).GetSecurityInfo(@as(*const IGPMSOM, @ptrCast(self)), pp_security_info_);
            }
            pub inline fn setSecurityInfo(self: *const T, p_security_info_: ?*IGPMSecurityInfo) HRESULT {
                return @as(*const IGPMSOM.VTable, @ptrCast(self.vtable)).SetSecurityInfo(@as(*const IGPMSOM, @ptrCast(self)), p_security_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMSOMCollection_Value = Guid.initString("adc1688e-00e4-4495-abba-bed200df0cab");
pub const IID_IGPMSOMCollection = &IID_IGPMSOMCollection_Value;
pub const IGPMSOMCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSOMCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSOMCollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMSOMCollection,
            pp_i_g_p_m_s_o_m: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMSOMCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMSOMCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMSOMCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMSOMCollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, pp_i_g_p_m_s_o_m_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMSOMCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMSOMCollection, @ptrCast(self)), pp_i_g_p_m_s_o_m_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMWMIFilter_Value = Guid.initString("ef2ff9b4-3c27-459a-b979-038305cec75d");
pub const IID_IGPMWMIFilter = &IID_IGPMWMIFilter_Value;
pub const IGPMWMIFilter = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMWMIFilter,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMWMIFilter,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMWMIFilter,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMWMIFilter,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMWMIFilter,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQueryList: *const fn (
            self: *const IGPMWMIFilter,
            p_qry_list: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityInfo: *const fn (
            self: *const IGPMWMIFilter,
            pp_security_info: ?*?*IGPMSecurityInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityInfo: *const fn (
            self: *const IGPMWMIFilter,
            p_security_info: ?*IGPMSecurityInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPath(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMWMIFilter.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IGPMWMIFilter, @ptrCast(self)), p_val_);
            }
            pub inline fn putName(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IGPMWMIFilter.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IGPMWMIFilter, @ptrCast(self)), new_val_);
            }
            pub inline fn getName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMWMIFilter.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IGPMWMIFilter, @ptrCast(self)), p_val_);
            }
            pub inline fn putDescription(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IGPMWMIFilter.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IGPMWMIFilter, @ptrCast(self)), new_val_);
            }
            pub inline fn getDescription(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMWMIFilter.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IGPMWMIFilter, @ptrCast(self)), p_val_);
            }
            pub inline fn getQueryList(self: *const T, p_qry_list_: ?*VARIANT) HRESULT {
                return @as(*const IGPMWMIFilter.VTable, @ptrCast(self.vtable)).GetQueryList(@as(*const IGPMWMIFilter, @ptrCast(self)), p_qry_list_);
            }
            pub inline fn getSecurityInfo(self: *const T, pp_security_info_: ?*?*IGPMSecurityInfo) HRESULT {
                return @as(*const IGPMWMIFilter.VTable, @ptrCast(self.vtable)).GetSecurityInfo(@as(*const IGPMWMIFilter, @ptrCast(self)), pp_security_info_);
            }
            pub inline fn setSecurityInfo(self: *const T, p_security_info_: ?*IGPMSecurityInfo) HRESULT {
                return @as(*const IGPMWMIFilter.VTable, @ptrCast(self.vtable)).SetSecurityInfo(@as(*const IGPMWMIFilter, @ptrCast(self)), p_security_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMWMIFilterCollection_Value = Guid.initString("5782d582-1a36-4661-8a94-c3c32551945b");
pub const IID_IGPMWMIFilterCollection = &IID_IGPMWMIFilterCollection_Value;
pub const IGPMWMIFilterCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMWMIFilterCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMWMIFilterCollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMWMIFilterCollection,
            p_val: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMWMIFilterCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMWMIFilterCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMWMIFilterCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMWMIFilterCollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMWMIFilterCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMWMIFilterCollection, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMRSOP_Value = Guid.initString("49ed785a-3237-4ff2-b1f0-fdf5a8d5a1ee");
pub const IID_IGPMRSOP = &IID_IGPMRSOP_Value;
pub const IGPMRSOP = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Mode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            p_val: ?*GPMRSOPMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Namespace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LoggingComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoggingComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LoggingUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoggingUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LoggingFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            l_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoggingFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            l_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            l_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            l_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningDomainController: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningDomainController: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningSiteName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningSiteName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningUserSOM: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningUserSOM: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningUserWMIFilters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            var_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningUserWMIFilters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningUserSecurityGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            var_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningUserSecurityGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningComputerSOM: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningComputerSOM: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            bstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningComputerWMIFilters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            var_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningComputerWMIFilters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlanningComputerSecurityGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            var_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlanningComputerSecurityGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMRSOP,
            var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoggingEnumerateUsers: *const fn (
            self: *const IGPMRSOP,
            var_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQueryResults: *const fn (
            self: *const IGPMRSOP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseQueryResults: *const fn (
            self: *const IGPMRSOP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReport: *const fn (
            self: *const IGPMRSOP,
            gpm_report_type: GPMReportType,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReportToFile: *const fn (
            self: *const IGPMRSOP,
            gpm_report_type: GPMReportType,
            bstr_target_file_path: ?BSTR,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getMode(self: *const T, p_val_: ?*GPMRSOPMode) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_Mode(@as(*const IGPMRSOP, @ptrCast(self)), p_val_);
            }
            pub inline fn getNamespace(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_Namespace(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn putLoggingComputer(self: *const T, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_LoggingComputer(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getLoggingComputer(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_LoggingComputer(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn putLoggingUser(self: *const T, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_LoggingUser(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getLoggingUser(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_LoggingUser(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn putLoggingFlags(self: *const T, l_val_: i32) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_LoggingFlags(@as(*const IGPMRSOP, @ptrCast(self)), l_val_);
            }
            pub inline fn getLoggingFlags(self: *const T, l_val_: ?*i32) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_LoggingFlags(@as(*const IGPMRSOP, @ptrCast(self)), l_val_);
            }
            pub inline fn putPlanningFlags(self: *const T, l_val_: i32) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningFlags(@as(*const IGPMRSOP, @ptrCast(self)), l_val_);
            }
            pub inline fn getPlanningFlags(self: *const T, l_val_: ?*i32) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningFlags(@as(*const IGPMRSOP, @ptrCast(self)), l_val_);
            }
            pub inline fn putPlanningDomainController(self: *const T, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningDomainController(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getPlanningDomainController(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningDomainController(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn putPlanningSiteName(self: *const T, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningSiteName(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getPlanningSiteName(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningSiteName(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn putPlanningUser(self: *const T, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningUser(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getPlanningUser(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningUser(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn putPlanningUserSOM(self: *const T, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningUserSOM(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getPlanningUserSOM(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningUserSOM(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn putPlanningUserWMIFilters(self: *const T, var_val_: VARIANT) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningUserWMIFilters(@as(*const IGPMRSOP, @ptrCast(self)), var_val_);
            }
            pub inline fn getPlanningUserWMIFilters(self: *const T, var_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningUserWMIFilters(@as(*const IGPMRSOP, @ptrCast(self)), var_val_);
            }
            pub inline fn putPlanningUserSecurityGroups(self: *const T, var_val_: VARIANT) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningUserSecurityGroups(@as(*const IGPMRSOP, @ptrCast(self)), var_val_);
            }
            pub inline fn getPlanningUserSecurityGroups(self: *const T, var_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningUserSecurityGroups(@as(*const IGPMRSOP, @ptrCast(self)), var_val_);
            }
            pub inline fn putPlanningComputer(self: *const T, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningComputer(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getPlanningComputer(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningComputer(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn putPlanningComputerSOM(self: *const T, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningComputerSOM(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn getPlanningComputerSOM(self: *const T, bstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningComputerSOM(@as(*const IGPMRSOP, @ptrCast(self)), bstr_val_);
            }
            pub inline fn putPlanningComputerWMIFilters(self: *const T, var_val_: VARIANT) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningComputerWMIFilters(@as(*const IGPMRSOP, @ptrCast(self)), var_val_);
            }
            pub inline fn getPlanningComputerWMIFilters(self: *const T, var_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningComputerWMIFilters(@as(*const IGPMRSOP, @ptrCast(self)), var_val_);
            }
            pub inline fn putPlanningComputerSecurityGroups(self: *const T, var_val_: VARIANT) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).put_PlanningComputerSecurityGroups(@as(*const IGPMRSOP, @ptrCast(self)), var_val_);
            }
            pub inline fn getPlanningComputerSecurityGroups(self: *const T, var_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).get_PlanningComputerSecurityGroups(@as(*const IGPMRSOP, @ptrCast(self)), var_val_);
            }
            pub inline fn loggingEnumerateUsers(self: *const T, var_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).LoggingEnumerateUsers(@as(*const IGPMRSOP, @ptrCast(self)), var_val_);
            }
            pub inline fn createQueryResults(self: *const T) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).CreateQueryResults(@as(*const IGPMRSOP, @ptrCast(self)));
            }
            pub inline fn releaseQueryResults(self: *const T) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).ReleaseQueryResults(@as(*const IGPMRSOP, @ptrCast(self)));
            }
            pub inline fn generateReport(self: *const T, gpm_report_type_: GPMReportType, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).GenerateReport(@as(*const IGPMRSOP, @ptrCast(self)), gpm_report_type_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn generateReportToFile(self: *const T, gpm_report_type_: GPMReportType, bstr_target_file_path_: ?BSTR, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMRSOP.VTable, @ptrCast(self.vtable)).GenerateReportToFile(@as(*const IGPMRSOP, @ptrCast(self)), gpm_report_type_, bstr_target_file_path_, pp_i_g_p_m_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMGPO_Value = Guid.initString("58cc4352-1ca3-48e5-9864-1da4d6e0d60f");
pub const IID_IGPMGPO = &IID_IGPMGPO_Value;
pub const IGPMGPO = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DomainName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreationTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModificationTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserDSVersionNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ComputerDSVersionNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserSysvolVersionNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ComputerSysvolVersionNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWMIFilter: *const fn (
            self: *const IGPMGPO,
            pp_i_g_p_m_w_m_i_filter: ?*?*IGPMWMIFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWMIFilter: *const fn (
            self: *const IGPMGPO,
            p_i_g_p_m_w_m_i_filter: ?*IGPMWMIFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUserEnabled: *const fn (
            self: *const IGPMGPO,
            vb_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComputerEnabled: *const fn (
            self: *const IGPMGPO,
            vb_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUserEnabled: *const fn (
            self: *const IGPMGPO,
            pvb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsComputerEnabled: *const fn (
            self: *const IGPMGPO,
            pvb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityInfo: *const fn (
            self: *const IGPMGPO,
            pp_security_info: ?*?*IGPMSecurityInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityInfo: *const fn (
            self: *const IGPMGPO,
            p_security_info: ?*IGPMSecurityInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IGPMGPO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Backup: *const fn (
            self: *const IGPMGPO,
            bstr_backup_dir: ?BSTR,
            bstr_comment: ?BSTR,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Import: *const fn (
            self: *const IGPMGPO,
            l_flags: i32,
            p_i_g_p_m_backup: ?*IGPMBackup,
            pvar_migration_table: ?*VARIANT,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReport: *const fn (
            self: *const IGPMGPO,
            gpm_report_type: GPMReportType,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReportToFile: *const fn (
            self: *const IGPMGPO,
            gpm_report_type: GPMReportType,
            bstr_target_file_path: ?BSTR,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTo: *const fn (
            self: *const IGPMGPO,
            l_flags: i32,
            p_i_g_p_m_domain: ?*IGPMDomain,
            pvar_new_display_name: ?*VARIANT,
            pvar_migration_table: ?*VARIANT,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityDescriptor: *const fn (
            self: *const IGPMGPO,
            l_flags: i32,
            p_s_d: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityDescriptor: *const fn (
            self: *const IGPMGPO,
            l_flags: i32,
            pp_s_d: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsACLConsistent: *const fn (
            self: *const IGPMGPO,
            pvb_consistent: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeACLConsistent: *const fn (
            self: *const IGPMGPO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDisplayName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IGPMGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn putDisplayName(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).put_DisplayName(@as(*const IGPMGPO, @ptrCast(self)), new_val_);
            }
            pub inline fn getPath(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IGPMGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getID(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_ID(@as(*const IGPMGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getDomainName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_DomainName(@as(*const IGPMGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getCreationTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_CreationTime(@as(*const IGPMGPO, @ptrCast(self)), p_date_);
            }
            pub inline fn getModificationTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_ModificationTime(@as(*const IGPMGPO, @ptrCast(self)), p_date_);
            }
            pub inline fn getUserDSVersionNumber(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_UserDSVersionNumber(@as(*const IGPMGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getComputerDSVersionNumber(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_ComputerDSVersionNumber(@as(*const IGPMGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getUserSysvolVersionNumber(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_UserSysvolVersionNumber(@as(*const IGPMGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getComputerSysvolVersionNumber(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).get_ComputerSysvolVersionNumber(@as(*const IGPMGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getWMIFilter(self: *const T, pp_i_g_p_m_w_m_i_filter_: ?*?*IGPMWMIFilter) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).GetWMIFilter(@as(*const IGPMGPO, @ptrCast(self)), pp_i_g_p_m_w_m_i_filter_);
            }
            pub inline fn setWMIFilter(self: *const T, p_i_g_p_m_w_m_i_filter_: ?*IGPMWMIFilter) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).SetWMIFilter(@as(*const IGPMGPO, @ptrCast(self)), p_i_g_p_m_w_m_i_filter_);
            }
            pub inline fn setUserEnabled(self: *const T, vb_enabled_: i16) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).SetUserEnabled(@as(*const IGPMGPO, @ptrCast(self)), vb_enabled_);
            }
            pub inline fn setComputerEnabled(self: *const T, vb_enabled_: i16) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).SetComputerEnabled(@as(*const IGPMGPO, @ptrCast(self)), vb_enabled_);
            }
            pub inline fn isUserEnabled(self: *const T, pvb_enabled_: ?*i16) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).IsUserEnabled(@as(*const IGPMGPO, @ptrCast(self)), pvb_enabled_);
            }
            pub inline fn isComputerEnabled(self: *const T, pvb_enabled_: ?*i16) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).IsComputerEnabled(@as(*const IGPMGPO, @ptrCast(self)), pvb_enabled_);
            }
            pub inline fn getSecurityInfo(self: *const T, pp_security_info_: ?*?*IGPMSecurityInfo) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).GetSecurityInfo(@as(*const IGPMGPO, @ptrCast(self)), pp_security_info_);
            }
            pub inline fn setSecurityInfo(self: *const T, p_security_info_: ?*IGPMSecurityInfo) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).SetSecurityInfo(@as(*const IGPMGPO, @ptrCast(self)), p_security_info_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).Delete(@as(*const IGPMGPO, @ptrCast(self)));
            }
            pub inline fn backup(self: *const T, bstr_backup_dir_: ?BSTR, bstr_comment_: ?BSTR, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).Backup(@as(*const IGPMGPO, @ptrCast(self)), bstr_backup_dir_, bstr_comment_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn import(self: *const T, l_flags_: i32, p_i_g_p_m_backup_: ?*IGPMBackup, pvar_migration_table_: ?*VARIANT, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).Import(@as(*const IGPMGPO, @ptrCast(self)), l_flags_, p_i_g_p_m_backup_, pvar_migration_table_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn generateReport(self: *const T, gpm_report_type_: GPMReportType, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).GenerateReport(@as(*const IGPMGPO, @ptrCast(self)), gpm_report_type_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn generateReportToFile(self: *const T, gpm_report_type_: GPMReportType, bstr_target_file_path_: ?BSTR, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).GenerateReportToFile(@as(*const IGPMGPO, @ptrCast(self)), gpm_report_type_, bstr_target_file_path_, pp_i_g_p_m_result_);
            }
            pub inline fn copyTo(self: *const T, l_flags_: i32, p_i_g_p_m_domain_: ?*IGPMDomain, pvar_new_display_name_: ?*VARIANT, pvar_migration_table_: ?*VARIANT, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).CopyTo(@as(*const IGPMGPO, @ptrCast(self)), l_flags_, p_i_g_p_m_domain_, pvar_new_display_name_, pvar_migration_table_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn setSecurityDescriptor(self: *const T, l_flags_: i32, p_s_d_: ?*IDispatch) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).SetSecurityDescriptor(@as(*const IGPMGPO, @ptrCast(self)), l_flags_, p_s_d_);
            }
            pub inline fn getSecurityDescriptor(self: *const T, l_flags_: i32, pp_s_d_: ?*?*IDispatch) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).GetSecurityDescriptor(@as(*const IGPMGPO, @ptrCast(self)), l_flags_, pp_s_d_);
            }
            pub inline fn isACLConsistent(self: *const T, pvb_consistent_: ?*i16) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).IsACLConsistent(@as(*const IGPMGPO, @ptrCast(self)), pvb_consistent_);
            }
            pub inline fn makeACLConsistent(self: *const T) HRESULT {
                return @as(*const IGPMGPO.VTable, @ptrCast(self.vtable)).MakeACLConsistent(@as(*const IGPMGPO, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMGPOCollection_Value = Guid.initString("f0f0d5cf-70ca-4c39-9e29-b642f8726c01");
pub const IID_IGPMGPOCollection = &IID_IGPMGPOCollection_Value;
pub const IGPMGPOCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOCollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOCollection,
            pp_i_g_p_m_g_p_os: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMGPOCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMGPOCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMGPOCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMGPOCollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, pp_i_g_p_m_g_p_os_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMGPOCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMGPOCollection, @ptrCast(self)), pp_i_g_p_m_g_p_os_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMGPOLink_Value = Guid.initString("434b99bd-5de7-478a-809c-c251721df70c");
pub const IID_IGPMGPOLink = &IID_IGPMGPOLink_Value;
pub const IGPMGPOLink = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GPOID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLink,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GPODomain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLink,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLink,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLink,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enforced: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLink,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enforced: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLink,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SOMLinkOrder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLink,
            l_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SOM: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLink,
            pp_i_g_p_m_s_o_m: ?*?*IGPMSOM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IGPMGPOLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getGPOID(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMGPOLink.VTable, @ptrCast(self.vtable)).get_GPOID(@as(*const IGPMGPOLink, @ptrCast(self)), p_val_);
            }
            pub inline fn getGPODomain(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMGPOLink.VTable, @ptrCast(self.vtable)).get_GPODomain(@as(*const IGPMGPOLink, @ptrCast(self)), p_val_);
            }
            pub inline fn getEnabled(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IGPMGPOLink.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IGPMGPOLink, @ptrCast(self)), p_val_);
            }
            pub inline fn putEnabled(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IGPMGPOLink.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IGPMGPOLink, @ptrCast(self)), new_val_);
            }
            pub inline fn getEnforced(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IGPMGPOLink.VTable, @ptrCast(self.vtable)).get_Enforced(@as(*const IGPMGPOLink, @ptrCast(self)), p_val_);
            }
            pub inline fn putEnforced(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IGPMGPOLink.VTable, @ptrCast(self.vtable)).put_Enforced(@as(*const IGPMGPOLink, @ptrCast(self)), new_val_);
            }
            pub inline fn getSOMLinkOrder(self: *const T, l_val_: ?*i32) HRESULT {
                return @as(*const IGPMGPOLink.VTable, @ptrCast(self.vtable)).get_SOMLinkOrder(@as(*const IGPMGPOLink, @ptrCast(self)), l_val_);
            }
            pub inline fn getSOM(self: *const T, pp_i_g_p_m_s_o_m_: ?*?*IGPMSOM) HRESULT {
                return @as(*const IGPMGPOLink.VTable, @ptrCast(self.vtable)).get_SOM(@as(*const IGPMGPOLink, @ptrCast(self)), pp_i_g_p_m_s_o_m_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IGPMGPOLink.VTable, @ptrCast(self.vtable)).Delete(@as(*const IGPMGPOLink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMGPOLinksCollection_Value = Guid.initString("189d7b68-16bd-4d0d-a2ec-2e6aa2288c7f");
pub const IID_IGPMGPOLinksCollection = &IID_IGPMGPOLinksCollection_Value;
pub const IGPMGPOLinksCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLinksCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLinksCollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPOLinksCollection,
            pp_i_g_p_m_links: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMGPOLinksCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMGPOLinksCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMGPOLinksCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMGPOLinksCollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, pp_i_g_p_m_links_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMGPOLinksCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMGPOLinksCollection, @ptrCast(self)), pp_i_g_p_m_links_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMCSECollection_Value = Guid.initString("2e52a97d-0a4a-4a6f-85db-201622455da0");
pub const IID_IGPMCSECollection = &IID_IGPMCSECollection_Value;
pub const IGPMCSECollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMCSECollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMCSECollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMCSECollection,
            pp_i_g_p_m_c_s_es: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMCSECollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMCSECollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMCSECollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMCSECollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, pp_i_g_p_m_c_s_es_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMCSECollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMCSECollection, @ptrCast(self)), pp_i_g_p_m_c_s_es_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMClientSideExtension_Value = Guid.initString("69da7488-b8db-415e-9266-901be4d49928");
pub const IID_IGPMClientSideExtension = &IID_IGPMClientSideExtension_Value;
pub const IGPMClientSideExtension = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMClientSideExtension,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMClientSideExtension,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUserEnabled: *const fn (
            self: *const IGPMClientSideExtension,
            pvb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsComputerEnabled: *const fn (
            self: *const IGPMClientSideExtension,
            pvb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getID(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMClientSideExtension.VTable, @ptrCast(self.vtable)).get_ID(@as(*const IGPMClientSideExtension, @ptrCast(self)), p_val_);
            }
            pub inline fn getDisplayName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMClientSideExtension.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IGPMClientSideExtension, @ptrCast(self)), p_val_);
            }
            pub inline fn isUserEnabled(self: *const T, pvb_enabled_: ?*i16) HRESULT {
                return @as(*const IGPMClientSideExtension.VTable, @ptrCast(self.vtable)).IsUserEnabled(@as(*const IGPMClientSideExtension, @ptrCast(self)), pvb_enabled_);
            }
            pub inline fn isComputerEnabled(self: *const T, pvb_enabled_: ?*i16) HRESULT {
                return @as(*const IGPMClientSideExtension.VTable, @ptrCast(self.vtable)).IsComputerEnabled(@as(*const IGPMClientSideExtension, @ptrCast(self)), pvb_enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMAsyncCancel_Value = Guid.initString("ddc67754-be67-4541-8166-f48166868c9c");
pub const IID_IGPMAsyncCancel = &IID_IGPMAsyncCancel_Value;
pub const IGPMAsyncCancel = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Cancel: *const fn (
            self: *const IGPMAsyncCancel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IGPMAsyncCancel.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IGPMAsyncCancel, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMAsyncProgress_Value = Guid.initString("6aac29f8-5948-4324-bf70-423818942dbc");
pub const IID_IGPMAsyncProgress = &IID_IGPMAsyncProgress_Value;
pub const IGPMAsyncProgress = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Status: *const fn (
            self: *const IGPMAsyncProgress,
            l_progress_numerator: i32,
            l_progress_denominator: i32,
            hr_status: HRESULT,
            p_result: ?*VARIANT,
            pp_i_g_p_m_status_msg_collection: ?*IGPMStatusMsgCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn status(self: *const T, l_progress_numerator_: i32, l_progress_denominator_: i32, hr_status_: HRESULT, p_result_: ?*VARIANT, pp_i_g_p_m_status_msg_collection_: ?*IGPMStatusMsgCollection) HRESULT {
                return @as(*const IGPMAsyncProgress.VTable, @ptrCast(self.vtable)).Status(@as(*const IGPMAsyncProgress, @ptrCast(self)), l_progress_numerator_, l_progress_denominator_, hr_status_, p_result_, pp_i_g_p_m_status_msg_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMStatusMsgCollection_Value = Guid.initString("9b6e1af0-1a92-40f3-a59d-f36ac1f728b7");
pub const IID_IGPMStatusMsgCollection = &IID_IGPMStatusMsgCollection_Value;
pub const IGPMStatusMsgCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStatusMsgCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStatusMsgCollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStatusMsgCollection,
            p_val: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMStatusMsgCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMStatusMsgCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMStatusMsgCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMStatusMsgCollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMStatusMsgCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMStatusMsgCollection, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMStatusMessage_Value = Guid.initString("8496c22f-f3de-4a1f-8f58-603caaa93d7b");
pub const IID_IGPMStatusMessage = &IID_IGPMStatusMessage_Value;
pub const IGPMStatusMessage = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStatusMessage,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ErrorCode: *const fn (
            self: *const IGPMStatusMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtensionName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStatusMessage,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SettingsName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStatusMessage,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OperationCode: *const fn (
            self: *const IGPMStatusMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Message: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStatusMessage,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getObjectPath(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStatusMessage.VTable, @ptrCast(self.vtable)).get_ObjectPath(@as(*const IGPMStatusMessage, @ptrCast(self)), p_val_);
            }
            pub inline fn errorCode(self: *const T) HRESULT {
                return @as(*const IGPMStatusMessage.VTable, @ptrCast(self.vtable)).ErrorCode(@as(*const IGPMStatusMessage, @ptrCast(self)));
            }
            pub inline fn getExtensionName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStatusMessage.VTable, @ptrCast(self.vtable)).get_ExtensionName(@as(*const IGPMStatusMessage, @ptrCast(self)), p_val_);
            }
            pub inline fn getSettingsName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStatusMessage.VTable, @ptrCast(self.vtable)).get_SettingsName(@as(*const IGPMStatusMessage, @ptrCast(self)), p_val_);
            }
            pub inline fn operationCode(self: *const T) HRESULT {
                return @as(*const IGPMStatusMessage.VTable, @ptrCast(self.vtable)).OperationCode(@as(*const IGPMStatusMessage, @ptrCast(self)));
            }
            pub inline fn getMessage(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStatusMessage.VTable, @ptrCast(self.vtable)).get_Message(@as(*const IGPMStatusMessage, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMConstants_Value = Guid.initString("50ef73e6-d35c-4c8d-be63-7ea5d2aac5c4");
pub const IID_IGPMConstants = &IID_IGPMConstants_Value;
pub const IGPMConstants = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermGPOApply: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermGPORead: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermGPOEdit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermGPOEditSecurityAndDelete: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermGPOCustom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermWMIFilterEdit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermWMIFilterFullControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermWMIFilterCustom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermSOMLink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermSOMLogging: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermSOMPlanning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermSOMGPOCreate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermSOMWMICreate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermSOMWMIFullControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyGPOPermissions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyGPOEffectivePermissions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyGPODisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyGPOWMIFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyGPOID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyGPOComputerExtensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyGPOUserExtensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertySOMLinks: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyGPODomain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyBackupMostRecent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchOpEquals: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchOpContains: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchOpNotContains: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchOpNotEquals: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSearchOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UsePDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseAnyDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DoNotUseW2KDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SOMSite: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSOMType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SOMDomain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSOMType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SOMOU: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMSOMType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecurityFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            vb_owner: i16,
            vb_group: i16,
            vb_d_a_c_l: i16,
            vb_s_a_c_l: i16,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DoNotValidateDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportHTML: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMReportType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportXML: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMReportType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RSOPModeUnknown: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMRSOPMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RSOPModePlanning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMRSOPMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RSOPModeLogging: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMRSOPMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EntryTypeUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMEntryType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EntryTypeComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMEntryType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EntryTypeLocalGroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMEntryType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EntryTypeGlobalGroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMEntryType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EntryTypeUniversalGroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMEntryType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EntryTypeUNCPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMEntryType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EntryTypeUnknown: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMEntryType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationOptionSameAsSource: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMDestinationOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationOptionNone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMDestinationOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationOptionByRelativeName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMDestinationOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationOptionSet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*GPMDestinationOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MigrationTableOnly: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessSecurity: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RsopLoggingNoComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RsopLoggingNoUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RsopPlanningAssumeSlowLink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RsopPlanningLoopbackOption: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            vb_merge: i16,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RsopPlanningAssumeUserWQLFilterTrue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RsopPlanningAssumeCompWQLFilterTrue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPermGPOApply(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermGPOApply(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermGPORead(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermGPORead(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermGPOEdit(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermGPOEdit(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermGPOEditSecurityAndDelete(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermGPOEditSecurityAndDelete(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermGPOCustom(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermGPOCustom(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermWMIFilterEdit(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermWMIFilterEdit(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermWMIFilterFullControl(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermWMIFilterFullControl(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermWMIFilterCustom(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermWMIFilterCustom(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermSOMLink(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermSOMLink(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermSOMLogging(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermSOMLogging(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermSOMPlanning(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermSOMPlanning(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermSOMGPOCreate(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermSOMGPOCreate(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermSOMWMICreate(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermSOMWMICreate(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermSOMWMIFullControl(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_PermSOMWMIFullControl(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyGPOPermissions(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertyGPOPermissions(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyGPOEffectivePermissions(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertyGPOEffectivePermissions(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyGPODisplayName(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertyGPODisplayName(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyGPOWMIFilter(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertyGPOWMIFilter(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyGPOID(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertyGPOID(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyGPOComputerExtensions(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertyGPOComputerExtensions(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyGPOUserExtensions(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertyGPOUserExtensions(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertySOMLinks(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertySOMLinks(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyGPODomain(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertyGPODomain(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyBackupMostRecent(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchPropertyBackupMostRecent(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchOpEquals(self: *const T, p_val_: ?*GPMSearchOperation) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchOpEquals(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchOpContains(self: *const T, p_val_: ?*GPMSearchOperation) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchOpContains(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchOpNotContains(self: *const T, p_val_: ?*GPMSearchOperation) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchOpNotContains(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchOpNotEquals(self: *const T, p_val_: ?*GPMSearchOperation) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SearchOpNotEquals(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getUsePDC(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_UsePDC(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getUseAnyDC(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_UseAnyDC(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getDoNotUseW2KDC(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_DoNotUseW2KDC(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSOMSite(self: *const T, p_val_: ?*GPMSOMType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SOMSite(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSOMDomain(self: *const T, p_val_: ?*GPMSOMType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SOMDomain(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSOMOU(self: *const T, p_val_: ?*GPMSOMType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SOMOU(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getSecurityFlags(self: *const T, vb_owner_: i16, vb_group_: i16, vb_d_a_c_l_: i16, vb_s_a_c_l_: i16, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_SecurityFlags(@as(*const IGPMConstants, @ptrCast(self)), vb_owner_, vb_group_, vb_d_a_c_l_, vb_s_a_c_l_, p_val_);
            }
            pub inline fn getDoNotValidateDC(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_DoNotValidateDC(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getReportHTML(self: *const T, p_val_: ?*GPMReportType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_ReportHTML(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getReportXML(self: *const T, p_val_: ?*GPMReportType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_ReportXML(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getRSOPModeUnknown(self: *const T, p_val_: ?*GPMRSOPMode) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_RSOPModeUnknown(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getRSOPModePlanning(self: *const T, p_val_: ?*GPMRSOPMode) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_RSOPModePlanning(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getRSOPModeLogging(self: *const T, p_val_: ?*GPMRSOPMode) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_RSOPModeLogging(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getEntryTypeUser(self: *const T, p_val_: ?*GPMEntryType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_EntryTypeUser(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getEntryTypeComputer(self: *const T, p_val_: ?*GPMEntryType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_EntryTypeComputer(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getEntryTypeLocalGroup(self: *const T, p_val_: ?*GPMEntryType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_EntryTypeLocalGroup(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getEntryTypeGlobalGroup(self: *const T, p_val_: ?*GPMEntryType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_EntryTypeGlobalGroup(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getEntryTypeUniversalGroup(self: *const T, p_val_: ?*GPMEntryType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_EntryTypeUniversalGroup(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getEntryTypeUNCPath(self: *const T, p_val_: ?*GPMEntryType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_EntryTypeUNCPath(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getEntryTypeUnknown(self: *const T, p_val_: ?*GPMEntryType) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_EntryTypeUnknown(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getDestinationOptionSameAsSource(self: *const T, p_val_: ?*GPMDestinationOption) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_DestinationOptionSameAsSource(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getDestinationOptionNone(self: *const T, p_val_: ?*GPMDestinationOption) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_DestinationOptionNone(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getDestinationOptionByRelativeName(self: *const T, p_val_: ?*GPMDestinationOption) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_DestinationOptionByRelativeName(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getDestinationOptionSet(self: *const T, p_val_: ?*GPMDestinationOption) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_DestinationOptionSet(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getMigrationTableOnly(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_MigrationTableOnly(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getProcessSecurity(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_ProcessSecurity(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getRsopLoggingNoComputer(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_RsopLoggingNoComputer(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getRsopLoggingNoUser(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_RsopLoggingNoUser(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getRsopPlanningAssumeSlowLink(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_RsopPlanningAssumeSlowLink(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getRsopPlanningLoopbackOption(self: *const T, vb_merge_: i16, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_RsopPlanningLoopbackOption(@as(*const IGPMConstants, @ptrCast(self)), vb_merge_, p_val_);
            }
            pub inline fn getRsopPlanningAssumeUserWQLFilterTrue(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_RsopPlanningAssumeUserWQLFilterTrue(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
            pub inline fn getRsopPlanningAssumeCompWQLFilterTrue(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMConstants.VTable, @ptrCast(self.vtable)).get_RsopPlanningAssumeCompWQLFilterTrue(@as(*const IGPMConstants, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMResult_Value = Guid.initString("86dff7e9-f76f-42ab-9570-cebc6be8a52d");
pub const IID_IGPMResult = &IID_IGPMResult_Value;
pub const IGPMResult = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMResult,
            pp_i_g_p_m_status_msg_collection: ?*?*IGPMStatusMsgCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Result: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMResult,
            pvar_result: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OverallStatus: *const fn (
            self: *const IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStatus(self: *const T, pp_i_g_p_m_status_msg_collection_: ?*?*IGPMStatusMsgCollection) HRESULT {
                return @as(*const IGPMResult.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IGPMResult, @ptrCast(self)), pp_i_g_p_m_status_msg_collection_);
            }
            pub inline fn getResult(self: *const T, pvar_result_: ?*VARIANT) HRESULT {
                return @as(*const IGPMResult.VTable, @ptrCast(self.vtable)).get_Result(@as(*const IGPMResult, @ptrCast(self)), pvar_result_);
            }
            pub inline fn overallStatus(self: *const T) HRESULT {
                return @as(*const IGPMResult.VTable, @ptrCast(self.vtable)).OverallStatus(@as(*const IGPMResult, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMMapEntryCollection_Value = Guid.initString("bb0bf49b-e53f-443f-b807-8be22bfb6d42");
pub const IID_IGPMMapEntryCollection = &IID_IGPMMapEntryCollection_Value;
pub const IGPMMapEntryCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMMapEntryCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMMapEntryCollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMMapEntryCollection,
            p_val: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMMapEntryCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMMapEntryCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMMapEntryCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMMapEntryCollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMMapEntryCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMMapEntryCollection, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMMapEntry_Value = Guid.initString("8e79ad06-2381-4444-be4c-ff693e6e6f2b");
pub const IID_IGPMMapEntry = &IID_IGPMMapEntry_Value;
pub const IGPMMapEntry = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Source: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMMapEntry,
            pbstr_source: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Destination: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMMapEntry,
            pbstr_destination: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationOption: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMMapEntry,
            pgpm_dest_option: ?*GPMDestinationOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EntryType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMMapEntry,
            pgpm_entry_type: ?*GPMEntryType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSource(self: *const T, pbstr_source_: ?*?BSTR) HRESULT {
                return @as(*const IGPMMapEntry.VTable, @ptrCast(self.vtable)).get_Source(@as(*const IGPMMapEntry, @ptrCast(self)), pbstr_source_);
            }
            pub inline fn getDestination(self: *const T, pbstr_destination_: ?*?BSTR) HRESULT {
                return @as(*const IGPMMapEntry.VTable, @ptrCast(self.vtable)).get_Destination(@as(*const IGPMMapEntry, @ptrCast(self)), pbstr_destination_);
            }
            pub inline fn getDestinationOption(self: *const T, pgpm_dest_option_: ?*GPMDestinationOption) HRESULT {
                return @as(*const IGPMMapEntry.VTable, @ptrCast(self.vtable)).get_DestinationOption(@as(*const IGPMMapEntry, @ptrCast(self)), pgpm_dest_option_);
            }
            pub inline fn getEntryType(self: *const T, pgpm_entry_type_: ?*GPMEntryType) HRESULT {
                return @as(*const IGPMMapEntry.VTable, @ptrCast(self.vtable)).get_EntryType(@as(*const IGPMMapEntry, @ptrCast(self)), pgpm_entry_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMMigrationTable_Value = Guid.initString("48f823b1-efaf-470b-b6ed-40d14ee1a4ec");
pub const IID_IGPMMigrationTable = &IID_IGPMMigrationTable_Value;
pub const IGPMMigrationTable = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Save: *const fn (
            self: *const IGPMMigrationTable,
            bstr_migration_table_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IGPMMigrationTable,
            l_flags: i32,
            @"var": VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEntry: *const fn (
            self: *const IGPMMigrationTable,
            bstr_source: ?BSTR,
            gpm_entry_type: GPMEntryType,
            pvar_destination: ?*VARIANT,
            pp_entry: ?*?*IGPMMapEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEntry: *const fn (
            self: *const IGPMMigrationTable,
            bstr_source: ?BSTR,
            pp_entry: ?*?*IGPMMapEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteEntry: *const fn (
            self: *const IGPMMigrationTable,
            bstr_source: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateDestination: *const fn (
            self: *const IGPMMigrationTable,
            bstr_source: ?BSTR,
            pvar_destination: ?*VARIANT,
            pp_entry: ?*?*IGPMMapEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Validate: *const fn (
            self: *const IGPMMigrationTable,
            pp_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEntries: *const fn (
            self: *const IGPMMigrationTable,
            pp_entries: ?*?*IGPMMapEntryCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn save(self: *const T, bstr_migration_table_path_: ?BSTR) HRESULT {
                return @as(*const IGPMMigrationTable.VTable, @ptrCast(self.vtable)).Save(@as(*const IGPMMigrationTable, @ptrCast(self)), bstr_migration_table_path_);
            }
            pub inline fn add(self: *const T, l_flags_: i32, var_: VARIANT) HRESULT {
                return @as(*const IGPMMigrationTable.VTable, @ptrCast(self.vtable)).Add(@as(*const IGPMMigrationTable, @ptrCast(self)), l_flags_, var_);
            }
            pub inline fn addEntry(self: *const T, bstr_source_: ?BSTR, gpm_entry_type_: GPMEntryType, pvar_destination_: ?*VARIANT, pp_entry_: ?*?*IGPMMapEntry) HRESULT {
                return @as(*const IGPMMigrationTable.VTable, @ptrCast(self.vtable)).AddEntry(@as(*const IGPMMigrationTable, @ptrCast(self)), bstr_source_, gpm_entry_type_, pvar_destination_, pp_entry_);
            }
            pub inline fn getEntry(self: *const T, bstr_source_: ?BSTR, pp_entry_: ?*?*IGPMMapEntry) HRESULT {
                return @as(*const IGPMMigrationTable.VTable, @ptrCast(self.vtable)).GetEntry(@as(*const IGPMMigrationTable, @ptrCast(self)), bstr_source_, pp_entry_);
            }
            pub inline fn deleteEntry(self: *const T, bstr_source_: ?BSTR) HRESULT {
                return @as(*const IGPMMigrationTable.VTable, @ptrCast(self.vtable)).DeleteEntry(@as(*const IGPMMigrationTable, @ptrCast(self)), bstr_source_);
            }
            pub inline fn updateDestination(self: *const T, bstr_source_: ?BSTR, pvar_destination_: ?*VARIANT, pp_entry_: ?*?*IGPMMapEntry) HRESULT {
                return @as(*const IGPMMigrationTable.VTable, @ptrCast(self.vtable)).UpdateDestination(@as(*const IGPMMigrationTable, @ptrCast(self)), bstr_source_, pvar_destination_, pp_entry_);
            }
            pub inline fn validate(self: *const T, pp_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMMigrationTable.VTable, @ptrCast(self.vtable)).Validate(@as(*const IGPMMigrationTable, @ptrCast(self)), pp_result_);
            }
            pub inline fn getEntries(self: *const T, pp_entries_: ?*?*IGPMMapEntryCollection) HRESULT {
                return @as(*const IGPMMigrationTable.VTable, @ptrCast(self.vtable)).GetEntries(@as(*const IGPMMigrationTable, @ptrCast(self)), pp_entries_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const GPMBackupType = enum(i32) {
    GPO = 0,
    StarterGPO = 1,
};
pub const typeGPO = GPMBackupType.GPO;
pub const typeStarterGPO = GPMBackupType.StarterGPO;

pub const GPMStarterGPOType = enum(i32) {
    System = 0,
    Custom = 1,
};
pub const typeSystem = GPMStarterGPOType.System;
pub const typeCustom = GPMStarterGPOType.Custom;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMBackupDirEx_Value = Guid.initString("f8dc55ed-3ba0-4864-aad4-d365189ee1d5");
pub const IID_IGPMBackupDirEx = &IID_IGPMBackupDirEx_Value;
pub const IGPMBackupDirEx = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackupDir: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackupDirEx,
            pbstr_backup_dir: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackupType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMBackupDirEx,
            pgpm_backup_type: ?*GPMBackupType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackup: *const fn (
            self: *const IGPMBackupDirEx,
            bstr_i_d: ?BSTR,
            pvar_backup: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchBackups: *const fn (
            self: *const IGPMBackupDirEx,
            p_i_g_p_m_search_criteria: ?*IGPMSearchCriteria,
            pvar_backup_collection: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBackupDir(self: *const T, pbstr_backup_dir_: ?*?BSTR) HRESULT {
                return @as(*const IGPMBackupDirEx.VTable, @ptrCast(self.vtable)).get_BackupDir(@as(*const IGPMBackupDirEx, @ptrCast(self)), pbstr_backup_dir_);
            }
            pub inline fn getBackupType(self: *const T, pgpm_backup_type_: ?*GPMBackupType) HRESULT {
                return @as(*const IGPMBackupDirEx.VTable, @ptrCast(self.vtable)).get_BackupType(@as(*const IGPMBackupDirEx, @ptrCast(self)), pgpm_backup_type_);
            }
            pub inline fn getBackup(self: *const T, bstr_i_d_: ?BSTR, pvar_backup_: ?*VARIANT) HRESULT {
                return @as(*const IGPMBackupDirEx.VTable, @ptrCast(self.vtable)).GetBackup(@as(*const IGPMBackupDirEx, @ptrCast(self)), bstr_i_d_, pvar_backup_);
            }
            pub inline fn searchBackups(self: *const T, p_i_g_p_m_search_criteria_: ?*IGPMSearchCriteria, pvar_backup_collection_: ?*VARIANT) HRESULT {
                return @as(*const IGPMBackupDirEx.VTable, @ptrCast(self.vtable)).SearchBackups(@as(*const IGPMBackupDirEx, @ptrCast(self)), p_i_g_p_m_search_criteria_, pvar_backup_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMStarterGPOBackupCollection_Value = Guid.initString("c998031d-add0-4bb5-8dea-298505d8423b");
pub const IID_IGPMStarterGPOBackupCollection = &IID_IGPMStarterGPOBackupCollection_Value;
pub const IGPMStarterGPOBackupCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackupCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackupCollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackupCollection,
            pp_i_g_p_m_tmpl_backup: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMStarterGPOBackupCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMStarterGPOBackupCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMStarterGPOBackupCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMStarterGPOBackupCollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, pp_i_g_p_m_tmpl_backup_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMStarterGPOBackupCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMStarterGPOBackupCollection, @ptrCast(self)), pp_i_g_p_m_tmpl_backup_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMStarterGPOBackup_Value = Guid.initString("51d98eda-a87e-43dd-b80a-0b66ef1938d6");
pub const IID_IGPMStarterGPOBackup = &IID_IGPMStarterGPOBackup_Value;
pub const IGPMStarterGPOBackup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackupDir: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackup,
            pbstr_backup_dir: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Comment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackup,
            pbstr_comment: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackup,
            pbstr_display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Domain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackup,
            pbstr_template_domain: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StarterGPOID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackup,
            pbstr_template_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackup,
            pbstr_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Timestamp: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackup,
            p_timestamp: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOBackup,
            p_type: ?*GPMStarterGPOType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IGPMStarterGPOBackup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReport: *const fn (
            self: *const IGPMStarterGPOBackup,
            gpm_report_type: GPMReportType,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReportToFile: *const fn (
            self: *const IGPMStarterGPOBackup,
            gpm_report_type: GPMReportType,
            bstr_target_file_path: ?BSTR,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBackupDir(self: *const T, pbstr_backup_dir_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).get_BackupDir(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), pbstr_backup_dir_);
            }
            pub inline fn getComment(self: *const T, pbstr_comment_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).get_Comment(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), pbstr_comment_);
            }
            pub inline fn getDisplayName(self: *const T, pbstr_display_name_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), pbstr_display_name_);
            }
            pub inline fn getDomain(self: *const T, pbstr_template_domain_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).get_Domain(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), pbstr_template_domain_);
            }
            pub inline fn getStarterGPOID(self: *const T, pbstr_template_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).get_StarterGPOID(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), pbstr_template_i_d_);
            }
            pub inline fn getID(self: *const T, pbstr_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).get_ID(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), pbstr_i_d_);
            }
            pub inline fn getTimestamp(self: *const T, p_timestamp_: ?*f64) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).get_Timestamp(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), p_timestamp_);
            }
            pub inline fn getType(self: *const T, p_type_: ?*GPMStarterGPOType) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), p_type_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).Delete(@as(*const IGPMStarterGPOBackup, @ptrCast(self)));
            }
            pub inline fn generateReport(self: *const T, gpm_report_type_: GPMReportType, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).GenerateReport(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), gpm_report_type_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn generateReportToFile(self: *const T, gpm_report_type_: GPMReportType, bstr_target_file_path_: ?BSTR, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMStarterGPOBackup.VTable, @ptrCast(self.vtable)).GenerateReportToFile(@as(*const IGPMStarterGPOBackup, @ptrCast(self)), gpm_report_type_, bstr_target_file_path_, pp_i_g_p_m_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPM2_Value = Guid.initString("00238f8a-3d86-41ac-8f5e-06a6638a634a");
pub const IID_IGPM2 = &IID_IGPM2_Value;
pub const IGPM2 = extern struct {
    pub const VTable = extern struct {
        base: IGPM.VTable,
        GetBackupDirEx: *const fn (
            self: *const IGPM2,
            bstr_backup_dir: ?BSTR,
            backup_dir_type: GPMBackupType,
            pp_i_g_p_m_backup_dir_ex: ?*?*IGPMBackupDirEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeReportingEx: *const fn (
            self: *const IGPM2,
            bstr_adm_path: ?BSTR,
            reporting_options: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IGPM.MethodMixin(T);
            pub inline fn getBackupDirEx(self: *const T, bstr_backup_dir_: ?BSTR, backup_dir_type_: GPMBackupType, pp_i_g_p_m_backup_dir_ex_: ?*?*IGPMBackupDirEx) HRESULT {
                return @as(*const IGPM2.VTable, @ptrCast(self.vtable)).GetBackupDirEx(@as(*const IGPM2, @ptrCast(self)), bstr_backup_dir_, backup_dir_type_, pp_i_g_p_m_backup_dir_ex_);
            }
            pub inline fn initializeReportingEx(self: *const T, bstr_adm_path_: ?BSTR, reporting_options_: i32) HRESULT {
                return @as(*const IGPM2.VTable, @ptrCast(self.vtable)).InitializeReportingEx(@as(*const IGPM2, @ptrCast(self)), bstr_adm_path_, reporting_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMStarterGPO_Value = Guid.initString("dfc3f61b-8880-4490-9337-d29c7ba8c2f0");
pub const IID_IGPMStarterGPO = &IID_IGPMStarterGPO_Value;
pub const IGPMStarterGPO = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Author: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Product: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreationTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifiedTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*GPMStarterGPOType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ComputerVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StarterGPOVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPO,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IGPMStarterGPO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IGPMStarterGPO,
            bstr_save_file: ?BSTR,
            b_overwrite: i16,
            b_save_as_system: i16,
            bstr_language: ?*VARIANT,
            bstr_author: ?*VARIANT,
            bstr_product: ?*VARIANT,
            bstr_unique_i_d: ?*VARIANT,
            bstr_version: ?*VARIANT,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Backup: *const fn (
            self: *const IGPMStarterGPO,
            bstr_backup_dir: ?BSTR,
            bstr_comment: ?BSTR,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTo: *const fn (
            self: *const IGPMStarterGPO,
            pvar_new_display_name: ?*VARIANT,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReport: *const fn (
            self: *const IGPMStarterGPO,
            gpm_report_type: GPMReportType,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateReportToFile: *const fn (
            self: *const IGPMStarterGPO,
            gpm_report_type: GPMReportType,
            bstr_target_file_path: ?BSTR,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityInfo: *const fn (
            self: *const IGPMStarterGPO,
            pp_security_info: ?*?*IGPMSecurityInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityInfo: *const fn (
            self: *const IGPMStarterGPO,
            p_security_info: ?*IGPMSecurityInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDisplayName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn putDisplayName(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).put_DisplayName(@as(*const IGPMStarterGPO, @ptrCast(self)), new_val_);
            }
            pub inline fn getDescription(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn putDescription(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IGPMStarterGPO, @ptrCast(self)), new_val_);
            }
            pub inline fn getAuthor(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_Author(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getProduct(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_Product(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getCreationTime(self: *const T, p_val_: ?*f64) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_CreationTime(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getID(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_ID(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getModifiedTime(self: *const T, p_val_: ?*f64) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_ModifiedTime(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getType(self: *const T, p_val_: ?*GPMStarterGPOType) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getComputerVersion(self: *const T, p_val_: ?*u16) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_ComputerVersion(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getUserVersion(self: *const T, p_val_: ?*u16) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_UserVersion(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn getStarterGPOVersion(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).get_StarterGPOVersion(@as(*const IGPMStarterGPO, @ptrCast(self)), p_val_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).Delete(@as(*const IGPMStarterGPO, @ptrCast(self)));
            }
            pub inline fn save(self: *const T, bstr_save_file_: ?BSTR, b_overwrite_: i16, b_save_as_system_: i16, bstr_language_: ?*VARIANT, bstr_author_: ?*VARIANT, bstr_product_: ?*VARIANT, bstr_unique_i_d_: ?*VARIANT, bstr_version_: ?*VARIANT, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).Save(@as(*const IGPMStarterGPO, @ptrCast(self)), bstr_save_file_, b_overwrite_, b_save_as_system_, bstr_language_, bstr_author_, bstr_product_, bstr_unique_i_d_, bstr_version_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn backup(self: *const T, bstr_backup_dir_: ?BSTR, bstr_comment_: ?BSTR, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).Backup(@as(*const IGPMStarterGPO, @ptrCast(self)), bstr_backup_dir_, bstr_comment_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn copyTo(self: *const T, pvar_new_display_name_: ?*VARIANT, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).CopyTo(@as(*const IGPMStarterGPO, @ptrCast(self)), pvar_new_display_name_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn generateReport(self: *const T, gpm_report_type_: GPMReportType, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).GenerateReport(@as(*const IGPMStarterGPO, @ptrCast(self)), gpm_report_type_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn generateReportToFile(self: *const T, gpm_report_type_: GPMReportType, bstr_target_file_path_: ?BSTR, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).GenerateReportToFile(@as(*const IGPMStarterGPO, @ptrCast(self)), gpm_report_type_, bstr_target_file_path_, pp_i_g_p_m_result_);
            }
            pub inline fn getSecurityInfo(self: *const T, pp_security_info_: ?*?*IGPMSecurityInfo) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).GetSecurityInfo(@as(*const IGPMStarterGPO, @ptrCast(self)), pp_security_info_);
            }
            pub inline fn setSecurityInfo(self: *const T, p_security_info_: ?*IGPMSecurityInfo) HRESULT {
                return @as(*const IGPMStarterGPO.VTable, @ptrCast(self.vtable)).SetSecurityInfo(@as(*const IGPMStarterGPO, @ptrCast(self)), p_security_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMStarterGPOCollection_Value = Guid.initString("2e522729-2219-44ad-933a-64dfd650c423");
pub const IID_IGPMStarterGPOCollection = &IID_IGPMStarterGPOCollection_Value;
pub const IGPMStarterGPOCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOCollection,
            l_index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMStarterGPOCollection,
            pp_i_g_p_m_templates: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IGPMStarterGPOCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IGPMStarterGPOCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IGPMStarterGPOCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IGPMStarterGPOCollection, @ptrCast(self)), l_index_, p_val_);
            }
            pub inline fn getNewEnum(self: *const T, pp_i_g_p_m_templates_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IGPMStarterGPOCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IGPMStarterGPOCollection, @ptrCast(self)), pp_i_g_p_m_templates_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMDomain2_Value = Guid.initString("7ca6bb8b-f1eb-490a-938d-3c4e51c768e6");
pub const IID_IGPMDomain2 = &IID_IGPMDomain2_Value;
pub const IGPMDomain2 = extern struct {
    pub const VTable = extern struct {
        base: IGPMDomain.VTable,
        CreateStarterGPO: *const fn (
            self: *const IGPMDomain2,
            ppnew_template: ?*?*IGPMStarterGPO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGPOFromStarterGPO: *const fn (
            self: *const IGPMDomain2,
            p_g_p_o_template: ?*IGPMStarterGPO,
            ppnew_g_p_o: ?*?*IGPMGPO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStarterGPO: *const fn (
            self: *const IGPMDomain2,
            bstr_guid: ?BSTR,
            pp_template: ?*?*IGPMStarterGPO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchStarterGPOs: *const fn (
            self: *const IGPMDomain2,
            p_i_g_p_m_search_criteria: ?*IGPMSearchCriteria,
            pp_i_g_p_m_template_collection: ?*?*IGPMStarterGPOCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadStarterGPO: *const fn (
            self: *const IGPMDomain2,
            bstr_load_file: ?BSTR,
            b_overwrite: i16,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreStarterGPO: *const fn (
            self: *const IGPMDomain2,
            p_i_g_p_m_tmpl_backup: ?*IGPMStarterGPOBackup,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IGPMDomain.MethodMixin(T);
            pub inline fn createStarterGPO(self: *const T, ppnew_template_: ?*?*IGPMStarterGPO) HRESULT {
                return @as(*const IGPMDomain2.VTable, @ptrCast(self.vtable)).CreateStarterGPO(@as(*const IGPMDomain2, @ptrCast(self)), ppnew_template_);
            }
            pub inline fn createGPOFromStarterGPO(self: *const T, p_g_p_o_template_: ?*IGPMStarterGPO, ppnew_g_p_o_: ?*?*IGPMGPO) HRESULT {
                return @as(*const IGPMDomain2.VTable, @ptrCast(self.vtable)).CreateGPOFromStarterGPO(@as(*const IGPMDomain2, @ptrCast(self)), p_g_p_o_template_, ppnew_g_p_o_);
            }
            pub inline fn getStarterGPO(self: *const T, bstr_guid_: ?BSTR, pp_template_: ?*?*IGPMStarterGPO) HRESULT {
                return @as(*const IGPMDomain2.VTable, @ptrCast(self.vtable)).GetStarterGPO(@as(*const IGPMDomain2, @ptrCast(self)), bstr_guid_, pp_template_);
            }
            pub inline fn searchStarterGPOs(self: *const T, p_i_g_p_m_search_criteria_: ?*IGPMSearchCriteria, pp_i_g_p_m_template_collection_: ?*?*IGPMStarterGPOCollection) HRESULT {
                return @as(*const IGPMDomain2.VTable, @ptrCast(self.vtable)).SearchStarterGPOs(@as(*const IGPMDomain2, @ptrCast(self)), p_i_g_p_m_search_criteria_, pp_i_g_p_m_template_collection_);
            }
            pub inline fn loadStarterGPO(self: *const T, bstr_load_file_: ?BSTR, b_overwrite_: i16, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMDomain2.VTable, @ptrCast(self.vtable)).LoadStarterGPO(@as(*const IGPMDomain2, @ptrCast(self)), bstr_load_file_, b_overwrite_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn restoreStarterGPO(self: *const T, p_i_g_p_m_tmpl_backup_: ?*IGPMStarterGPOBackup, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMDomain2.VTable, @ptrCast(self.vtable)).RestoreStarterGPO(@as(*const IGPMDomain2, @ptrCast(self)), p_i_g_p_m_tmpl_backup_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMConstants2_Value = Guid.initString("05ae21b0-ac09-4032-a26f-9e7da786dc19");
pub const IID_IGPMConstants2 = &IID_IGPMConstants2_Value;
pub const IGPMConstants2 = extern struct {
    pub const VTable = extern struct {
        base: IGPMConstants.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackupTypeGPO: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMBackupType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackupTypeStarterGPO: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMBackupType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StarterGPOTypeSystem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMStarterGPOType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StarterGPOTypeCustom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMStarterGPOType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyStarterGPOPermissions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyStarterGPOEffectivePermissions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyStarterGPODisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyStarterGPOID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPropertyStarterGPODomain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMSearchProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermStarterGPORead: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermStarterGPOEdit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermStarterGPOFullControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermStarterGPOCustom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMPermissionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportLegacy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMReportingOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportComments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMConstants2,
            p_val: ?*GPMReportingOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IGPMConstants.MethodMixin(T);
            pub inline fn getBackupTypeGPO(self: *const T, p_val_: ?*GPMBackupType) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_BackupTypeGPO(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getBackupTypeStarterGPO(self: *const T, p_val_: ?*GPMBackupType) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_BackupTypeStarterGPO(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getStarterGPOTypeSystem(self: *const T, p_val_: ?*GPMStarterGPOType) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_StarterGPOTypeSystem(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getStarterGPOTypeCustom(self: *const T, p_val_: ?*GPMStarterGPOType) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_StarterGPOTypeCustom(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyStarterGPOPermissions(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_SearchPropertyStarterGPOPermissions(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyStarterGPOEffectivePermissions(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_SearchPropertyStarterGPOEffectivePermissions(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyStarterGPODisplayName(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_SearchPropertyStarterGPODisplayName(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyStarterGPOID(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_SearchPropertyStarterGPOID(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getSearchPropertyStarterGPODomain(self: *const T, p_val_: ?*GPMSearchProperty) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_SearchPropertyStarterGPODomain(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermStarterGPORead(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_PermStarterGPORead(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermStarterGPOEdit(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_PermStarterGPOEdit(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermStarterGPOFullControl(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_PermStarterGPOFullControl(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getPermStarterGPOCustom(self: *const T, p_val_: ?*GPMPermissionType) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_PermStarterGPOCustom(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getReportLegacy(self: *const T, p_val_: ?*GPMReportingOptions) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_ReportLegacy(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
            pub inline fn getReportComments(self: *const T, p_val_: ?*GPMReportingOptions) HRESULT {
                return @as(*const IGPMConstants2.VTable, @ptrCast(self.vtable)).get_ReportComments(@as(*const IGPMConstants2, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPMGPO2_Value = Guid.initString("8a66a210-b78b-4d99-88e2-c306a817c925");
pub const IID_IGPMGPO2 = &IID_IGPMGPO2_Value;
pub const IGPMGPO2 = extern struct {
    pub const VTable = extern struct {
        base: IGPMGPO.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO2,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO2,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IGPMGPO.MethodMixin(T);
            pub inline fn getDescription(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMGPO2.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IGPMGPO2, @ptrCast(self)), p_val_);
            }
            pub inline fn putDescription(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IGPMGPO2.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IGPMGPO2, @ptrCast(self)), new_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IGPMDomain3_Value = Guid.initString("0077fdfe-88c7-4acf-a11d-d10a7c310a03");
pub const IID_IGPMDomain3 = &IID_IGPMDomain3_Value;
pub const IGPMDomain3 = extern struct {
    pub const VTable = extern struct {
        base: IGPMDomain2.VTable,
        GenerateReport: *const fn (
            self: *const IGPMDomain3,
            gpm_report_type: GPMReportType,
            pvar_g_p_m_progress: ?*VARIANT,
            pvar_g_p_m_cancel: ?*VARIANT,
            pp_i_g_p_m_result: ?*?*IGPMResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InfrastructureDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMDomain3,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InfrastructureDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMDomain3,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InfrastructureFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMDomain3,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IGPMDomain2.MethodMixin(T);
            pub inline fn generateReport(self: *const T, gpm_report_type_: GPMReportType, pvar_g_p_m_progress_: ?*VARIANT, pvar_g_p_m_cancel_: ?*VARIANT, pp_i_g_p_m_result_: ?*?*IGPMResult) HRESULT {
                return @as(*const IGPMDomain3.VTable, @ptrCast(self.vtable)).GenerateReport(@as(*const IGPMDomain3, @ptrCast(self)), gpm_report_type_, pvar_g_p_m_progress_, pvar_g_p_m_cancel_, pp_i_g_p_m_result_);
            }
            pub inline fn getInfrastructureDC(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMDomain3.VTable, @ptrCast(self.vtable)).get_InfrastructureDC(@as(*const IGPMDomain3, @ptrCast(self)), p_val_);
            }
            pub inline fn putInfrastructureDC(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IGPMDomain3.VTable, @ptrCast(self.vtable)).put_InfrastructureDC(@as(*const IGPMDomain3, @ptrCast(self)), new_val_);
            }
            pub inline fn putInfrastructureFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IGPMDomain3.VTable, @ptrCast(self.vtable)).put_InfrastructureFlags(@as(*const IGPMDomain3, @ptrCast(self)), dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IGPMGPO3_Value = Guid.initString("7cf123a1-f94a-4112-bfae-6aa1db9cb248");
pub const IID_IGPMGPO3 = &IID_IGPMGPO3_Value;
pub const IGPMGPO3 = extern struct {
    pub const VTable = extern struct {
        base: IGPMGPO2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InfrastructureDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO3,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InfrastructureDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO3,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InfrastructureFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGPMGPO3,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IGPMGPO2.MethodMixin(T);
            pub inline fn getInfrastructureDC(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IGPMGPO3.VTable, @ptrCast(self.vtable)).get_InfrastructureDC(@as(*const IGPMGPO3, @ptrCast(self)), p_val_);
            }
            pub inline fn putInfrastructureDC(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IGPMGPO3.VTable, @ptrCast(self.vtable)).put_InfrastructureDC(@as(*const IGPMGPO3, @ptrCast(self)), new_val_);
            }
            pub inline fn putInfrastructureFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IGPMGPO3.VTable, @ptrCast(self.vtable)).put_InfrastructureFlags(@as(*const IGPMGPO3, @ptrCast(self)), dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const GPO_LINK = enum(i32) {
    Unknown = 0,
    Machine = 1,
    Site = 2,
    Domain = 3,
    OrganizationalUnit = 4,
};
pub const GPLinkUnknown = GPO_LINK.Unknown;
pub const GPLinkMachine = GPO_LINK.Machine;
pub const GPLinkSite = GPO_LINK.Site;
pub const GPLinkDomain = GPO_LINK.Domain;
pub const GPLinkOrganizationalUnit = GPO_LINK.OrganizationalUnit;

pub const GROUP_POLICY_OBJECTA = extern struct {
    dwOptions: u32,
    dwVersion: u32,
    lpDSPath: ?PSTR,
    lpFileSysPath: ?PSTR,
    lpDisplayName: ?PSTR,
    szGPOName: [50]CHAR,
    GPOLink: GPO_LINK,
    lParam: LPARAM,
    pNext: ?*GROUP_POLICY_OBJECTA,
    pPrev: ?*GROUP_POLICY_OBJECTA,
    lpExtensions: ?PSTR,
    lParam2: LPARAM,
    lpLink: ?PSTR,
};

pub const GROUP_POLICY_OBJECTW = extern struct {
    dwOptions: u32,
    dwVersion: u32,
    lpDSPath: ?PWSTR,
    lpFileSysPath: ?PWSTR,
    lpDisplayName: ?PWSTR,
    szGPOName: [50]u16,
    GPOLink: GPO_LINK,
    lParam: LPARAM,
    pNext: ?*GROUP_POLICY_OBJECTW,
    pPrev: ?*GROUP_POLICY_OBJECTW,
    lpExtensions: ?PWSTR,
    lParam2: LPARAM,
    lpLink: ?PWSTR,
};

pub const PFNSTATUSMESSAGECALLBACK = *const fn (
    b_verbose: BOOL,
    lp_message: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNPROCESSGROUPPOLICY = *const fn (
    dw_flags: u32,
    h_token: ?HANDLE,
    h_key_root: ?HKEY,
    p_deleted_g_p_o_list: ?*GROUP_POLICY_OBJECTA,
    p_changed_g_p_o_list: ?*GROUP_POLICY_OBJECTA,
    p_handle: usize,
    pb_abort: ?*BOOL,
    p_status_callback: ?PFNSTATUSMESSAGECALLBACK,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNPROCESSGROUPPOLICYEX = *const fn (
    dw_flags: u32,
    h_token: ?HANDLE,
    h_key_root: ?HKEY,
    p_deleted_g_p_o_list: ?*GROUP_POLICY_OBJECTA,
    p_changed_g_p_o_list: ?*GROUP_POLICY_OBJECTA,
    p_handle: usize,
    pb_abort: ?*BOOL,
    p_status_callback: ?PFNSTATUSMESSAGECALLBACK,
    p_wbem_services: ?*IWbemServices,
    p_rsop_status: ?*HRESULT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const RSOP_TARGET = extern struct {
    pwszAccountName: ?PWSTR,
    pwszNewSOM: ?PWSTR,
    psaSecurityGroups: ?*SAFEARRAY,
    pRsopToken: ?*anyopaque,
    pGPOList: ?*GROUP_POLICY_OBJECTA,
    pWbemServices: ?*IWbemServices,
};

pub const PFNGENERATEGROUPPOLICY = *const fn (
    dw_flags: u32,
    pb_abort: ?*BOOL,
    pwsz_site: ?PWSTR,
    p_computer_target: ?*RSOP_TARGET,
    p_user_target: ?*RSOP_TARGET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const SETTINGSTATUS = enum(i32) {
    Unspecified = 0,
    Applied = 1,
    Ignored = 2,
    Failed = 3,
    SubsettingFailed = 4,
};
pub const RSOPUnspecified = SETTINGSTATUS.Unspecified;
pub const RSOPApplied = SETTINGSTATUS.Applied;
pub const RSOPIgnored = SETTINGSTATUS.Ignored;
pub const RSOPFailed = SETTINGSTATUS.Failed;
pub const RSOPSubsettingFailed = SETTINGSTATUS.SubsettingFailed;

pub const POLICYSETTINGSTATUSINFO = extern struct {
    szKey: ?PWSTR,
    szEventSource: ?PWSTR,
    szEventLogName: ?PWSTR,
    dwEventID: u32,
    dwErrorCode: u32,
    status: SETTINGSTATUS,
    timeLogged: SYSTEMTIME,
};

pub const INSTALLSPECTYPE = enum(i32) {
    APPNAME = 1,
    FILEEXT = 2,
    PROGID = 3,
    COMCLASS = 4,
};
pub const APPNAME = INSTALLSPECTYPE.APPNAME;
pub const FILEEXT = INSTALLSPECTYPE.FILEEXT;
pub const PROGID = INSTALLSPECTYPE.PROGID;
pub const COMCLASS = INSTALLSPECTYPE.COMCLASS;

pub const INSTALLSPEC = extern union {
    AppName: extern struct {
        Name: ?PWSTR,
        GPOId: Guid,
    },
    FileExt: ?PWSTR,
    ProgId: ?PWSTR,
    COMClass: extern struct {
        Clsid: Guid,
        ClsCtx: u32,
    },
};

pub const INSTALLDATA = extern struct {
    Type: INSTALLSPECTYPE,
    Spec: INSTALLSPEC,
};

pub const APPSTATE = enum(i32) {
    ABSENT = 0,
    ASSIGNED = 1,
    PUBLISHED = 2,
};
pub const ABSENT = APPSTATE.ABSENT;
pub const ASSIGNED = APPSTATE.ASSIGNED;
pub const PUBLISHED = APPSTATE.PUBLISHED;

pub const LOCALMANAGEDAPPLICATION = extern struct {
    pszDeploymentName: ?PWSTR,
    pszPolicyName: ?PWSTR,
    pszProductId: ?PWSTR,
    dwState: u32,
};

pub const MANAGEDAPPLICATION = extern struct {
    pszPackageName: ?PWSTR,
    pszPublisher: ?PWSTR,
    dwVersionHi: u32,
    dwVersionLo: u32,
    dwRevision: u32,
    GpoId: Guid,
    pszPolicyName: ?PWSTR,
    ProductId: Guid,
    Language: u16,
    pszOwner: ?PWSTR,
    pszCompany: ?PWSTR,
    pszComments: ?PWSTR,
    pszContact: ?PWSTR,
    pszSupportUrl: ?PWSTR,
    dwPathType: u32,
    bInstalled: BOOL,
};

pub const GROUP_POLICY_OBJECT_TYPE = enum(i32) {
    Local = 0,
    Remote = 1,
    DS = 2,
    LocalUser = 3,
    LocalGroup = 4,
};
pub const GPOTypeLocal = GROUP_POLICY_OBJECT_TYPE.Local;
pub const GPOTypeRemote = GROUP_POLICY_OBJECT_TYPE.Remote;
pub const GPOTypeDS = GROUP_POLICY_OBJECT_TYPE.DS;
pub const GPOTypeLocalUser = GROUP_POLICY_OBJECT_TYPE.LocalUser;
pub const GPOTypeLocalGroup = GROUP_POLICY_OBJECT_TYPE.LocalGroup;

pub const GROUP_POLICY_HINT_TYPE = enum(i32) {
    Unknown = 0,
    Machine = 1,
    Site = 2,
    Domain = 3,
    OrganizationalUnit = 4,
};
pub const GPHintUnknown = GROUP_POLICY_HINT_TYPE.Unknown;
pub const GPHintMachine = GROUP_POLICY_HINT_TYPE.Machine;
pub const GPHintSite = GROUP_POLICY_HINT_TYPE.Site;
pub const GPHintDomain = GROUP_POLICY_HINT_TYPE.Domain;
pub const GPHintOrganizationalUnit = GROUP_POLICY_HINT_TYPE.OrganizationalUnit;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGPEInformation_Value = Guid.initString("8fc0b735-a0e1-11d1-a7d3-0000f87571e3");
pub const IID_IGPEInformation = &IID_IGPEInformation_Value;
pub const IGPEInformation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn (
            self: *const IGPEInformation,
            psz_name: [*:0]u16,
            cch_max_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: *const fn (
            self: *const IGPEInformation,
            psz_name: [*:0]u16,
            cch_max_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegistryKey: *const fn (
            self: *const IGPEInformation,
            dw_section: u32,
            h_key: ?*?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDSPath: *const fn (
            self: *const IGPEInformation,
            dw_section: u32,
            psz_path: [*:0]u16,
            cch_max_path: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSysPath: *const fn (
            self: *const IGPEInformation,
            dw_section: u32,
            psz_path: [*:0]u16,
            cch_max_path: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn (
            self: *const IGPEInformation,
            dw_options: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IGPEInformation,
            gpo_type: ?*GROUP_POLICY_OBJECT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHint: *const fn (
            self: *const IGPEInformation,
            gp_hint: ?*GROUP_POLICY_HINT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PolicyChanged: *const fn (
            self: *const IGPEInformation,
            b_machine: BOOL,
            b_add: BOOL,
            p_guid_extension: ?*Guid,
            p_guid_snapin: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, psz_name_: [*:0]u16, cch_max_length_: i32) HRESULT {
                return @as(*const IGPEInformation.VTable, @ptrCast(self.vtable)).GetName(@as(*const IGPEInformation, @ptrCast(self)), psz_name_, cch_max_length_);
            }
            pub inline fn getDisplayName(self: *const T, psz_name_: [*:0]u16, cch_max_length_: i32) HRESULT {
                return @as(*const IGPEInformation.VTable, @ptrCast(self.vtable)).GetDisplayName(@as(*const IGPEInformation, @ptrCast(self)), psz_name_, cch_max_length_);
            }
            pub inline fn getRegistryKey(self: *const T, dw_section_: u32, h_key_: ?*?HKEY) HRESULT {
                return @as(*const IGPEInformation.VTable, @ptrCast(self.vtable)).GetRegistryKey(@as(*const IGPEInformation, @ptrCast(self)), dw_section_, h_key_);
            }
            pub inline fn getDSPath(self: *const T, dw_section_: u32, psz_path_: [*:0]u16, cch_max_path_: i32) HRESULT {
                return @as(*const IGPEInformation.VTable, @ptrCast(self.vtable)).GetDSPath(@as(*const IGPEInformation, @ptrCast(self)), dw_section_, psz_path_, cch_max_path_);
            }
            pub inline fn getFileSysPath(self: *const T, dw_section_: u32, psz_path_: [*:0]u16, cch_max_path_: i32) HRESULT {
                return @as(*const IGPEInformation.VTable, @ptrCast(self.vtable)).GetFileSysPath(@as(*const IGPEInformation, @ptrCast(self)), dw_section_, psz_path_, cch_max_path_);
            }
            pub inline fn getOptions(self: *const T, dw_options_: ?*u32) HRESULT {
                return @as(*const IGPEInformation.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const IGPEInformation, @ptrCast(self)), dw_options_);
            }
            pub inline fn getType(self: *const T, gpo_type_: ?*GROUP_POLICY_OBJECT_TYPE) HRESULT {
                return @as(*const IGPEInformation.VTable, @ptrCast(self.vtable)).GetType(@as(*const IGPEInformation, @ptrCast(self)), gpo_type_);
            }
            pub inline fn getHint(self: *const T, gp_hint_: ?*GROUP_POLICY_HINT_TYPE) HRESULT {
                return @as(*const IGPEInformation.VTable, @ptrCast(self.vtable)).GetHint(@as(*const IGPEInformation, @ptrCast(self)), gp_hint_);
            }
            pub inline fn policyChanged(self: *const T, b_machine_: BOOL, b_add_: BOOL, p_guid_extension_: ?*Guid, p_guid_snapin_: ?*Guid) HRESULT {
                return @as(*const IGPEInformation.VTable, @ptrCast(self.vtable)).PolicyChanged(@as(*const IGPEInformation, @ptrCast(self)), b_machine_, b_add_, p_guid_extension_, p_guid_snapin_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IGroupPolicyObject_Value = Guid.initString("ea502723-a23d-11d1-a7d3-0000f87571e3");
pub const IID_IGroupPolicyObject = &IID_IGroupPolicyObject_Value;
pub const IGroupPolicyObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        New: *const fn (
            self: *const IGroupPolicyObject,
            psz_domain_name: ?PWSTR,
            psz_display_name: ?PWSTR,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenDSGPO: *const fn (
            self: *const IGroupPolicyObject,
            psz_path: ?PWSTR,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenLocalMachineGPO: *const fn (
            self: *const IGroupPolicyObject,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRemoteMachineGPO: *const fn (
            self: *const IGroupPolicyObject,
            psz_computer_name: ?PWSTR,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IGroupPolicyObject,
            b_machine: BOOL,
            b_add: BOOL,
            p_guid_extension: ?*Guid,
            p_guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IGroupPolicyObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IGroupPolicyObject,
            psz_name: [*:0]u16,
            cch_max_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: *const fn (
            self: *const IGroupPolicyObject,
            psz_name: [*:0]u16,
            cch_max_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDisplayName: *const fn (
            self: *const IGroupPolicyObject,
            psz_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn (
            self: *const IGroupPolicyObject,
            psz_path: [*:0]u16,
            cch_max_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDSPath: *const fn (
            self: *const IGroupPolicyObject,
            dw_section: u32,
            psz_path: [*:0]u16,
            cch_max_path: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSysPath: *const fn (
            self: *const IGroupPolicyObject,
            dw_section: u32,
            psz_path: [*:0]u16,
            cch_max_path: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegistryKey: *const fn (
            self: *const IGroupPolicyObject,
            dw_section: u32,
            h_key: ?*?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn (
            self: *const IGroupPolicyObject,
            dw_options: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: *const fn (
            self: *const IGroupPolicyObject,
            dw_options: u32,
            dw_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IGroupPolicyObject,
            gpo_type: ?*GROUP_POLICY_OBJECT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMachineName: *const fn (
            self: *const IGroupPolicyObject,
            psz_name: [*:0]u16,
            cch_max_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertySheetPages: *const fn (
            self: *const IGroupPolicyObject,
            h_pages: ?*?*?HPROPSHEETPAGE,
            u_page_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn new(self: *const T, psz_domain_name_: ?PWSTR, psz_display_name_: ?PWSTR, dw_flags_: u32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).New(@as(*const IGroupPolicyObject, @ptrCast(self)), psz_domain_name_, psz_display_name_, dw_flags_);
            }
            pub inline fn openDSGPO(self: *const T, psz_path_: ?PWSTR, dw_flags_: u32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).OpenDSGPO(@as(*const IGroupPolicyObject, @ptrCast(self)), psz_path_, dw_flags_);
            }
            pub inline fn openLocalMachineGPO(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).OpenLocalMachineGPO(@as(*const IGroupPolicyObject, @ptrCast(self)), dw_flags_);
            }
            pub inline fn openRemoteMachineGPO(self: *const T, psz_computer_name_: ?PWSTR, dw_flags_: u32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).OpenRemoteMachineGPO(@as(*const IGroupPolicyObject, @ptrCast(self)), psz_computer_name_, dw_flags_);
            }
            pub inline fn save(self: *const T, b_machine_: BOOL, b_add_: BOOL, p_guid_extension_: ?*Guid, p_guid_: ?*Guid) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).Save(@as(*const IGroupPolicyObject, @ptrCast(self)), b_machine_, b_add_, p_guid_extension_, p_guid_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).Delete(@as(*const IGroupPolicyObject, @ptrCast(self)));
            }
            pub inline fn getName(self: *const T, psz_name_: [*:0]u16, cch_max_length_: i32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetName(@as(*const IGroupPolicyObject, @ptrCast(self)), psz_name_, cch_max_length_);
            }
            pub inline fn getDisplayName(self: *const T, psz_name_: [*:0]u16, cch_max_length_: i32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetDisplayName(@as(*const IGroupPolicyObject, @ptrCast(self)), psz_name_, cch_max_length_);
            }
            pub inline fn setDisplayName(self: *const T, psz_name_: ?PWSTR) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).SetDisplayName(@as(*const IGroupPolicyObject, @ptrCast(self)), psz_name_);
            }
            pub inline fn getPath(self: *const T, psz_path_: [*:0]u16, cch_max_length_: i32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IGroupPolicyObject, @ptrCast(self)), psz_path_, cch_max_length_);
            }
            pub inline fn getDSPath(self: *const T, dw_section_: u32, psz_path_: [*:0]u16, cch_max_path_: i32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetDSPath(@as(*const IGroupPolicyObject, @ptrCast(self)), dw_section_, psz_path_, cch_max_path_);
            }
            pub inline fn getFileSysPath(self: *const T, dw_section_: u32, psz_path_: [*:0]u16, cch_max_path_: i32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetFileSysPath(@as(*const IGroupPolicyObject, @ptrCast(self)), dw_section_, psz_path_, cch_max_path_);
            }
            pub inline fn getRegistryKey(self: *const T, dw_section_: u32, h_key_: ?*?HKEY) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetRegistryKey(@as(*const IGroupPolicyObject, @ptrCast(self)), dw_section_, h_key_);
            }
            pub inline fn getOptions(self: *const T, dw_options_: ?*u32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const IGroupPolicyObject, @ptrCast(self)), dw_options_);
            }
            pub inline fn setOptions(self: *const T, dw_options_: u32, dw_mask_: u32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).SetOptions(@as(*const IGroupPolicyObject, @ptrCast(self)), dw_options_, dw_mask_);
            }
            pub inline fn getType(self: *const T, gpo_type_: ?*GROUP_POLICY_OBJECT_TYPE) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetType(@as(*const IGroupPolicyObject, @ptrCast(self)), gpo_type_);
            }
            pub inline fn getMachineName(self: *const T, psz_name_: [*:0]u16, cch_max_length_: i32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetMachineName(@as(*const IGroupPolicyObject, @ptrCast(self)), psz_name_, cch_max_length_);
            }
            pub inline fn getPropertySheetPages(self: *const T, h_pages_: ?*?*?HPROPSHEETPAGE, u_page_count_: ?*u32) HRESULT {
                return @as(*const IGroupPolicyObject.VTable, @ptrCast(self.vtable)).GetPropertySheetPages(@as(*const IGroupPolicyObject, @ptrCast(self)), h_pages_, u_page_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRSOPInformation_Value = Guid.initString("9a5a81b5-d9c7-49ef-9d11-ddf50968c48d");
pub const IID_IRSOPInformation = &IID_IRSOPInformation_Value;
pub const IRSOPInformation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNamespace: *const fn (
            self: *const IRSOPInformation,
            dw_section: u32,
            psz_name: [*:0]u16,
            cch_max_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IRSOPInformation,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventLogEntryText: *const fn (
            self: *const IRSOPInformation,
            psz_event_source: ?PWSTR,
            psz_event_log_name: ?PWSTR,
            psz_event_time: ?PWSTR,
            dw_event_i_d: u32,
            ppsz_text: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNamespace(self: *const T, dw_section_: u32, psz_name_: [*:0]u16, cch_max_length_: i32) HRESULT {
                return @as(*const IRSOPInformation.VTable, @ptrCast(self.vtable)).GetNamespace(@as(*const IRSOPInformation, @ptrCast(self)), dw_section_, psz_name_, cch_max_length_);
            }
            pub inline fn getFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IRSOPInformation.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IRSOPInformation, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn getEventLogEntryText(self: *const T, psz_event_source_: ?PWSTR, psz_event_log_name_: ?PWSTR, psz_event_time_: ?PWSTR, dw_event_i_d_: u32, ppsz_text_: ?*?PWSTR) HRESULT {
                return @as(*const IRSOPInformation.VTable, @ptrCast(self.vtable)).GetEventLogEntryText(@as(*const IRSOPInformation, @ptrCast(self)), psz_event_source_, psz_event_log_name_, psz_event_time_, dw_event_i_d_, ppsz_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const GPOBROWSEINFO = extern struct {
    dwSize: u32,
    dwFlags: u32,
    hwndOwner: ?HWND,
    lpTitle: ?PWSTR,
    lpInitialOU: ?PWSTR,
    lpDSPath: ?PWSTR,
    dwDSPathSize: u32,
    lpName: ?PWSTR,
    dwNameSize: u32,
    gpoType: GROUP_POLICY_OBJECT_TYPE,
    gpoHint: GROUP_POLICY_HINT_TYPE,
};

//--------------------------------------------------------------------------------
// Section: Functions (32)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn RefreshPolicy(
    b_machine: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn RefreshPolicyEx(
    b_machine: BOOL,
    dw_options: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn EnterCriticalPolicySection(
    b_machine: BOOL,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn LeaveCriticalPolicySection(
    h_section: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn RegisterGPNotification(
    h_event: ?HANDLE,
    b_machine: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn UnregisterGPNotification(
    h_event: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn GetGPOListA(
    h_token: ?HANDLE,
    lp_name: ?[*:0]const u8,
    lp_host_name: ?[*:0]const u8,
    lp_computer_name: ?[*:0]const u8,
    dw_flags: u32,
    p_g_p_o_list: ?*?*GROUP_POLICY_OBJECTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn GetGPOListW(
    h_token: ?HANDLE,
    lp_name: ?[*:0]const u16,
    lp_host_name: ?[*:0]const u16,
    lp_computer_name: ?[*:0]const u16,
    dw_flags: u32,
    p_g_p_o_list: ?*?*GROUP_POLICY_OBJECTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn FreeGPOListA(
    p_g_p_o_list: ?*GROUP_POLICY_OBJECTA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn FreeGPOListW(
    p_g_p_o_list: ?*GROUP_POLICY_OBJECTW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn GetAppliedGPOListA(
    dw_flags: u32,
    p_machine_name: ?[*:0]const u8,
    p_sid_user: ?PSID,
    p_guid_extension: ?*Guid,
    pp_g_p_o_list: ?*?*GROUP_POLICY_OBJECTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn GetAppliedGPOListW(
    dw_flags: u32,
    p_machine_name: ?[*:0]const u16,
    p_sid_user: ?PSID,
    p_guid_extension: ?*Guid,
    pp_g_p_o_list: ?*?*GROUP_POLICY_OBJECTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn ProcessGroupPolicyCompleted(
    extension_id: ?*Guid,
    p_async_handle: usize,
    dw_status: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn ProcessGroupPolicyCompletedEx(
    extension_id: ?*Guid,
    p_async_handle: usize,
    dw_status: u32,
    rsop_status: HRESULT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn RsopAccessCheckByType(
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
    p_principal_self_sid: ?PSID,
    p_rsop_token: ?*anyopaque,
    dw_desired_access_mask: u32,
    p_object_type_list: ?[*]OBJECT_TYPE_LIST,
    object_type_list_length: u32,
    p_generic_mapping: ?*GENERIC_MAPPING,
    // TODO: what to do with BytesParamIndex 8?
    p_privilege_set: ?*PRIVILEGE_SET,
    pdw_privilege_set_length: ?*u32,
    pdw_granted_access_mask: ?*u32,
    pb_access_status: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn RsopFileAccessCheck(
    psz_file_name: ?PWSTR,
    p_rsop_token: ?*anyopaque,
    dw_desired_access_mask: u32,
    pdw_granted_access_mask: ?*u32,
    pb_access_status: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn RsopSetPolicySettingStatus(
    dw_flags: u32,
    p_services: ?*IWbemServices,
    p_setting_instance: ?*IWbemClassObject,
    n_info: u32,
    p_status: [*]POLICYSETTINGSTATUSINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn RsopResetPolicySettingStatus(
    dw_flags: u32,
    p_services: ?*IWbemServices,
    p_setting_instance: ?*IWbemClassObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "userenv" fn GenerateGPNotification(
    b_machine: BOOL,
    lpwsz_mgmt_product: ?[*:0]const u16,
    dw_mgmt_product_options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn InstallApplication(
    p_install_info: ?*INSTALLDATA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn UninstallApplication(
    product_code: ?PWSTR,
    dw_status: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "advapi32" fn CommandLineFromMsiDescriptor(
    descriptor: ?PWSTR,
    command_line: [*:0]u16,
    command_line_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn GetManagedApplications(
    p_category: ?*Guid,
    dw_query_flags: u32,
    dw_info_level: u32,
    pdw_apps: ?*u32,
    prg_managed_apps: ?*?*MANAGEDAPPLICATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn GetLocalManagedApplications(
    b_user_apps: BOOL,
    pdw_apps: ?*u32,
    prg_local_apps: ?*?*LOCALMANAGEDAPPLICATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "advapi32" fn GetLocalManagedApplicationData(
    product_code: ?PWSTR,
    display_name: ?*?PWSTR,
    support_url: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn GetManagedApplicationCategories(
    dw_reserved: u32,
    p_app_category: ?*APPCATEGORYINFOLIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "gpedit" fn CreateGPOLink(
    lp_g_p_o: ?PWSTR,
    lp_container: ?PWSTR,
    f_high_priority: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "gpedit" fn DeleteGPOLink(
    lp_g_p_o: ?PWSTR,
    lp_container: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "gpedit" fn DeleteAllGPOLinks(
    lp_container: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "gpedit" fn BrowseForGPO(
    lp_browse_info: ?*GPOBROWSEINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "gpedit" fn ImportRSoPData(
    lp_name_space: ?PWSTR,
    lp_file_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "gpedit" fn ExportRSoPData(
    lp_name_space: ?PWSTR,
    lp_file_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (4)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const GROUP_POLICY_OBJECT = thismodule.GROUP_POLICY_OBJECTA;
        pub const GetGPOList = thismodule.GetGPOListA;
        pub const FreeGPOList = thismodule.FreeGPOListA;
        pub const GetAppliedGPOList = thismodule.GetAppliedGPOListA;
    },
    .wide => struct {
        pub const GROUP_POLICY_OBJECT = thismodule.GROUP_POLICY_OBJECTW;
        pub const GetGPOList = thismodule.GetGPOListW;
        pub const FreeGPOList = thismodule.FreeGPOListW;
        pub const GetAppliedGPOList = thismodule.GetAppliedGPOListW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const GROUP_POLICY_OBJECT = *opaque {};
        pub const GetGPOList = *opaque {};
        pub const FreeGPOList = *opaque {};
        pub const GetAppliedGPOList = *opaque {};
    } else struct {
        pub const GROUP_POLICY_OBJECT = @compileError("'GROUP_POLICY_OBJECT' requires that UNICODE be set to true or false in the root module");
        pub const GetGPOList = @compileError("'GetGPOList' requires that UNICODE be set to true or false in the root module");
        pub const FreeGPOList = @compileError("'FreeGPOList' requires that UNICODE be set to true or false in the root module");
        pub const GetAppliedGPOList = @compileError("'GetAppliedGPOList' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (26)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const APPCATEGORYINFOLIST = @import("../ui/shell.zig").APPCATEGORYINFOLIST;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const CHAR = @import("../foundation.zig").CHAR;
const GENERIC_MAPPING = @import("../security.zig").GENERIC_MAPPING;
const HANDLE = @import("../foundation.zig").HANDLE;
const HKEY = @import("../system/registry.zig").HKEY;
const HPROPSHEETPAGE = @import("../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IEnumVARIANT = @import("../system/ole.zig").IEnumVARIANT;
const IUnknown = @import("../system/com.zig").IUnknown;
const IWbemClassObject = @import("../system/wmi.zig").IWbemClassObject;
const IWbemServices = @import("../system/wmi.zig").IWbemServices;
const LPARAM = @import("../foundation.zig").LPARAM;
const OBJECT_TYPE_LIST = @import("../security.zig").OBJECT_TYPE_LIST;
const PRIVILEGE_SET = @import("../security.zig").PRIVILEGE_SET;
const PSECURITY_DESCRIPTOR = @import("../security.zig").PSECURITY_DESCRIPTOR;
const PSID = @import("../foundation.zig").PSID;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFNSTATUSMESSAGECALLBACK")) {
        _ = PFNSTATUSMESSAGECALLBACK;
    }
    if (@hasDecl(@This(), "PFNPROCESSGROUPPOLICY")) {
        _ = PFNPROCESSGROUPPOLICY;
    }
    if (@hasDecl(@This(), "PFNPROCESSGROUPPOLICYEX")) {
        _ = PFNPROCESSGROUPPOLICYEX;
    }
    if (@hasDecl(@This(), "PFNGENERATEGROUPPOLICY")) {
        _ = PFNGENERATEGROUPPOLICY;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
