//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (62)
//--------------------------------------------------------------------------------
pub const WCM_SETTINGS_ID_NAME = "name";
pub const WCM_SETTINGS_ID_VERSION = "version";
pub const WCM_SETTINGS_ID_LANGUAGE = "language";
pub const WCM_SETTINGS_ID_ARCHITECTURE = "architecture";
pub const WCM_SETTINGS_ID_TOKEN = "token";
pub const WCM_SETTINGS_ID_URI = "uri";
pub const WCM_SETTINGS_ID_VERSION_SCOPE = "versionScope";
pub const WCM_SETTINGS_ID_FLAG_REFERENCE = @as(u32, 0);
pub const WCM_SETTINGS_ID_FLAG_DEFINITION = @as(u32, 1);
pub const LINK_STORE_TO_ENGINE_INSTANCE = @as(u32, 1);
pub const LIMITED_VALIDATION_MODE = @as(u32, 1);
pub const WCM_E_INTERNALERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255424));
pub const WCM_E_STATENODENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255423));
pub const WCM_E_STATENODENOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255422));
pub const WCM_E_ATTRIBUTENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255421));
pub const WCM_E_ATTRIBUTENOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255420));
pub const WCM_E_INVALIDVALUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255419));
pub const WCM_E_INVALIDVALUEFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255418));
pub const WCM_E_TYPENOTSPECIFIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255417));
pub const WCM_E_INVALIDDATATYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255416));
pub const WCM_E_NOTPOSITIONED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255415));
pub const WCM_E_READONLYITEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255414));
pub const WCM_E_INVALIDPATH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255413));
pub const WCM_E_WRONGESCAPESTRING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255412));
pub const WCM_E_INVALIDVERSIONFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255411));
pub const WCM_E_INVALIDLANGUAGEFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255410));
pub const WCM_E_KEYNOTCHANGEABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255409));
pub const WCM_E_EXPRESSIONNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255408));
pub const WCM_E_SUBSTITUTIONNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255407));
pub const WCM_E_USERALREADYREGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255406));
pub const WCM_E_USERNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255405));
pub const WCM_E_NAMESPACENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255404));
pub const WCM_E_NAMESPACEALREADYREGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255403));
pub const WCM_E_STORECORRUPTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255402));
pub const WCM_E_INVALIDEXPRESSIONSYNTAX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255401));
pub const WCM_E_NOTIFICATIONNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255400));
pub const WCM_E_CONFLICTINGASSERTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255399));
pub const WCM_E_ASSERTIONFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255398));
pub const WCM_E_DUPLICATENAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255397));
pub const WCM_E_INVALIDKEY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255396));
pub const WCM_E_INVALIDSTREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255395));
pub const WCM_E_HANDLERNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255394));
pub const WCM_E_INVALIDHANDLERSYNTAX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255393));
pub const WCM_E_VALIDATIONFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255392));
pub const WCM_E_RESTRICTIONFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255391));
pub const WCM_E_MANIFESTCOMPILATIONFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255390));
pub const WCM_E_CYCLICREFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255389));
pub const WCM_E_MIXTYPEASSERTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255388));
pub const WCM_E_NOTSUPPORTEDFUNCTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255387));
pub const WCM_E_VALUETOOBIG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255386));
pub const WCM_E_INVALIDATTRIBUTECOMBINATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255385));
pub const WCM_E_ABORTOPERATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255384));
pub const WCM_E_MISSINGCONFIGURATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255383));
pub const WCM_E_INVALIDPROCESSORFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255382));
pub const WCM_E_SOURCEMANEMPTYVALUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255381));
pub const WCM_S_INTERNALERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232320));
pub const WCM_S_ATTRIBUTENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232321));
pub const WCM_S_LEGACYSETTINGWARNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232322));
pub const WCM_S_INVALIDATTRIBUTECOMBINATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232324));
pub const WCM_S_ATTRIBUTENOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232325));
pub const WCM_S_NAMESPACENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232326));
pub const WCM_E_UNKNOWNRESULT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145251325));

//--------------------------------------------------------------------------------
// Section: Types (16)
//--------------------------------------------------------------------------------
const CLSID_SettingsEngine_Value = Guid.initString("9f7d7bb5-20b3-11da-81a5-0030f1642e3c");
pub const CLSID_SettingsEngine = &CLSID_SettingsEngine_Value;

pub const WcmTargetMode = enum(i32) {
    fflineMode = 1,
    nlineMode = 2,
};
pub const OfflineMode = WcmTargetMode.fflineMode;
pub const OnlineMode = WcmTargetMode.nlineMode;

pub const WcmNamespaceEnumerationFlags = enum(i32) {
    SharedEnumeration = 1,
    UserEnumeration = 2,
    AllEnumeration = 3,
};
pub const SharedEnumeration = WcmNamespaceEnumerationFlags.SharedEnumeration;
pub const UserEnumeration = WcmNamespaceEnumerationFlags.UserEnumeration;
pub const AllEnumeration = WcmNamespaceEnumerationFlags.AllEnumeration;

pub const WcmDataType = enum(i32) {
    Byte = 1,
    SByte = 2,
    UInt16 = 3,
    Int16 = 4,
    UInt32 = 5,
    Int32 = 6,
    UInt64 = 7,
    Int64 = 8,
    Boolean = 11,
    String = 12,
    FlagArray = 32768,
};
pub const dataTypeByte = WcmDataType.Byte;
pub const dataTypeSByte = WcmDataType.SByte;
pub const dataTypeUInt16 = WcmDataType.UInt16;
pub const dataTypeInt16 = WcmDataType.Int16;
pub const dataTypeUInt32 = WcmDataType.UInt32;
pub const dataTypeInt32 = WcmDataType.Int32;
pub const dataTypeUInt64 = WcmDataType.UInt64;
pub const dataTypeInt64 = WcmDataType.Int64;
pub const dataTypeBoolean = WcmDataType.Boolean;
pub const dataTypeString = WcmDataType.String;
pub const dataTypeFlagArray = WcmDataType.FlagArray;

pub const WcmSettingType = enum(i32) {
    Scalar = 1,
    Complex = 2,
    List = 3,
};
pub const settingTypeScalar = WcmSettingType.Scalar;
pub const settingTypeComplex = WcmSettingType.Complex;
pub const settingTypeList = WcmSettingType.List;

pub const WcmRestrictionFacets = enum(i32) {
    MaxLength = 1,
    Enumeration = 2,
    MaxInclusive = 4,
    MinInclusive = 8,
};
pub const restrictionFacetMaxLength = WcmRestrictionFacets.MaxLength;
pub const restrictionFacetEnumeration = WcmRestrictionFacets.Enumeration;
pub const restrictionFacetMaxInclusive = WcmRestrictionFacets.MaxInclusive;
pub const restrictionFacetMinInclusive = WcmRestrictionFacets.MinInclusive;

pub const WcmUserStatus = enum(i32) {
    nknownStatus = 0,
    serRegistered = 1,
    serUnregistered = 2,
    serLoaded = 3,
    serUnloaded = 4,
};
pub const UnknownStatus = WcmUserStatus.nknownStatus;
pub const UserRegistered = WcmUserStatus.serRegistered;
pub const UserUnregistered = WcmUserStatus.serUnregistered;
pub const UserLoaded = WcmUserStatus.serLoaded;
pub const UserUnloaded = WcmUserStatus.serUnloaded;

pub const WcmNamespaceAccess = enum(i32) {
    OnlyAccess = 1,
    WriteAccess = 2,
};
pub const ReadOnlyAccess = WcmNamespaceAccess.OnlyAccess;
pub const ReadWriteAccess = WcmNamespaceAccess.WriteAccess;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IItemEnumerator_Value = Guid.initString("9f7d7bb7-20b3-11da-81a5-0030f1642e3c");
pub const IID_IItemEnumerator = &IID_IItemEnumerator_Value;
pub const IItemEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Current: *const fn (
            self: *const IItemEnumerator,
            item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveNext: *const fn (
            self: *const IItemEnumerator,
            item_valid: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IItemEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn current(self: *const T, item_: ?*VARIANT) HRESULT {
                return @as(*const IItemEnumerator.VTable, @ptrCast(self.vtable)).Current(@as(*const IItemEnumerator, @ptrCast(self)), item_);
            }
            pub inline fn moveNext(self: *const T, item_valid_: ?*BOOL) HRESULT {
                return @as(*const IItemEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IItemEnumerator, @ptrCast(self)), item_valid_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IItemEnumerator.VTable, @ptrCast(self.vtable)).Reset(@as(*const IItemEnumerator, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsIdentity_Value = Guid.initString("9f7d7bb6-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsIdentity = &IID_ISettingsIdentity_Value;
pub const ISettingsIdentity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttribute: *const fn (
            self: *const ISettingsIdentity,
            reserved: ?*anyopaque,
            name: ?[*:0]const u16,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAttribute: *const fn (
            self: *const ISettingsIdentity,
            reserved: ?*anyopaque,
            name: ?[*:0]const u16,
            value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const ISettingsIdentity,
            flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn (
            self: *const ISettingsIdentity,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAttribute(self: *const T, reserved_: ?*anyopaque, name_: ?[*:0]const u16, value_: ?*?BSTR) HRESULT {
                return @as(*const ISettingsIdentity.VTable, @ptrCast(self.vtable)).GetAttribute(@as(*const ISettingsIdentity, @ptrCast(self)), reserved_, name_, value_);
            }
            pub inline fn setAttribute(self: *const T, reserved_: ?*anyopaque, name_: ?[*:0]const u16, value_: ?[*:0]const u16) HRESULT {
                return @as(*const ISettingsIdentity.VTable, @ptrCast(self.vtable)).SetAttribute(@as(*const ISettingsIdentity, @ptrCast(self)), reserved_, name_, value_);
            }
            pub inline fn getFlags(self: *const T, flags_: ?*u32) HRESULT {
                return @as(*const ISettingsIdentity.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const ISettingsIdentity, @ptrCast(self)), flags_);
            }
            pub inline fn setFlags(self: *const T, flags_: u32) HRESULT {
                return @as(*const ISettingsIdentity.VTable, @ptrCast(self.vtable)).SetFlags(@as(*const ISettingsIdentity, @ptrCast(self)), flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITargetInfo_Value = Guid.initString("9f7d7bb8-20b3-11da-81a5-0030f1642e3c");
pub const IID_ITargetInfo = &IID_ITargetInfo_Value;
pub const ITargetInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTargetMode: *const fn (
            self: *const ITargetInfo,
            target_mode: ?*WcmTargetMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetMode: *const fn (
            self: *const ITargetInfo,
            target_mode: WcmTargetMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTemporaryStoreLocation: *const fn (
            self: *const ITargetInfo,
            temporary_store_location: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTemporaryStoreLocation: *const fn (
            self: *const ITargetInfo,
            temporary_store_location: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetID: *const fn (
            self: *const ITargetInfo,
            target_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetID: *const fn (
            self: *const ITargetInfo,
            target_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetProcessorArchitecture: *const fn (
            self: *const ITargetInfo,
            processor_architecture: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetProcessorArchitecture: *const fn (
            self: *const ITargetInfo,
            processor_architecture: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const ITargetInfo,
            offline: BOOL,
            property: ?[*:0]const u16,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const ITargetInfo,
            offline: BOOL,
            property: ?[*:0]const u16,
            value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const ITargetInfo,
            enumerator: ?*?*IItemEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExpandTarget: *const fn (
            self: *const ITargetInfo,
            offline: BOOL,
            location: ?[*:0]const u16,
            expanded_location: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExpandTargetPath: *const fn (
            self: *const ITargetInfo,
            offline: BOOL,
            location: ?[*:0]const u16,
            expanded_location: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModulePath: *const fn (
            self: *const ITargetInfo,
            module: ?[*:0]const u16,
            path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadModule: *const fn (
            self: *const ITargetInfo,
            module: ?[*:0]const u16,
            module_handle: ?*?HINSTANCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWow64Context: *const fn (
            self: *const ITargetInfo,
            installer_module: ?[*:0]const u16,
            wow64_context: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateWow64: *const fn (
            self: *const ITargetInfo,
            client_architecture: ?[*:0]const u16,
            value: ?[*:0]const u16,
            translated_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSchemaHiveLocation: *const fn (
            self: *const ITargetInfo,
            pwz_hive_dir: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSchemaHiveLocation: *const fn (
            self: *const ITargetInfo,
            p_hive_location: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSchemaHiveMountName: *const fn (
            self: *const ITargetInfo,
            pwz_mount_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSchemaHiveMountName: *const fn (
            self: *const ITargetInfo,
            p_mount_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTargetMode(self: *const T, target_mode_: ?*WcmTargetMode) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).GetTargetMode(@as(*const ITargetInfo, @ptrCast(self)), target_mode_);
            }
            pub inline fn setTargetMode(self: *const T, target_mode_: WcmTargetMode) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).SetTargetMode(@as(*const ITargetInfo, @ptrCast(self)), target_mode_);
            }
            pub inline fn getTemporaryStoreLocation(self: *const T, temporary_store_location_: ?*?BSTR) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).GetTemporaryStoreLocation(@as(*const ITargetInfo, @ptrCast(self)), temporary_store_location_);
            }
            pub inline fn setTemporaryStoreLocation(self: *const T, temporary_store_location_: ?[*:0]const u16) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).SetTemporaryStoreLocation(@as(*const ITargetInfo, @ptrCast(self)), temporary_store_location_);
            }
            pub inline fn getTargetID(self: *const T, target_i_d_: ?*?BSTR) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).GetTargetID(@as(*const ITargetInfo, @ptrCast(self)), target_i_d_);
            }
            pub inline fn setTargetID(self: *const T, target_i_d_: Guid) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).SetTargetID(@as(*const ITargetInfo, @ptrCast(self)), target_i_d_);
            }
            pub inline fn getTargetProcessorArchitecture(self: *const T, processor_architecture_: ?*?BSTR) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).GetTargetProcessorArchitecture(@as(*const ITargetInfo, @ptrCast(self)), processor_architecture_);
            }
            pub inline fn setTargetProcessorArchitecture(self: *const T, processor_architecture_: ?[*:0]const u16) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).SetTargetProcessorArchitecture(@as(*const ITargetInfo, @ptrCast(self)), processor_architecture_);
            }
            pub inline fn getProperty(self: *const T, offline_: BOOL, property_: ?[*:0]const u16, value_: ?*?BSTR) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const ITargetInfo, @ptrCast(self)), offline_, property_, value_);
            }
            pub inline fn setProperty(self: *const T, offline_: BOOL, property_: ?[*:0]const u16, value_: ?[*:0]const u16) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const ITargetInfo, @ptrCast(self)), offline_, property_, value_);
            }
            pub inline fn getEnumerator(self: *const T, enumerator_: ?*?*IItemEnumerator) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const ITargetInfo, @ptrCast(self)), enumerator_);
            }
            pub inline fn expandTarget(self: *const T, offline_: BOOL, location_: ?[*:0]const u16, expanded_location_: ?*?BSTR) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).ExpandTarget(@as(*const ITargetInfo, @ptrCast(self)), offline_, location_, expanded_location_);
            }
            pub inline fn expandTargetPath(self: *const T, offline_: BOOL, location_: ?[*:0]const u16, expanded_location_: ?*?BSTR) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).ExpandTargetPath(@as(*const ITargetInfo, @ptrCast(self)), offline_, location_, expanded_location_);
            }
            pub inline fn setModulePath(self: *const T, module_: ?[*:0]const u16, path_: ?[*:0]const u16) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).SetModulePath(@as(*const ITargetInfo, @ptrCast(self)), module_, path_);
            }
            pub inline fn loadModule(self: *const T, module_: ?[*:0]const u16, module_handle_: ?*?HINSTANCE) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).LoadModule(@as(*const ITargetInfo, @ptrCast(self)), module_, module_handle_);
            }
            pub inline fn setWow64Context(self: *const T, installer_module_: ?[*:0]const u16, wow64_context_: ?*u8) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).SetWow64Context(@as(*const ITargetInfo, @ptrCast(self)), installer_module_, wow64_context_);
            }
            pub inline fn translateWow64(self: *const T, client_architecture_: ?[*:0]const u16, value_: ?[*:0]const u16, translated_value_: ?*?BSTR) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).TranslateWow64(@as(*const ITargetInfo, @ptrCast(self)), client_architecture_, value_, translated_value_);
            }
            pub inline fn setSchemaHiveLocation(self: *const T, pwz_hive_dir_: ?[*:0]const u16) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).SetSchemaHiveLocation(@as(*const ITargetInfo, @ptrCast(self)), pwz_hive_dir_);
            }
            pub inline fn getSchemaHiveLocation(self: *const T, p_hive_location_: ?*?BSTR) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).GetSchemaHiveLocation(@as(*const ITargetInfo, @ptrCast(self)), p_hive_location_);
            }
            pub inline fn setSchemaHiveMountName(self: *const T, pwz_mount_name_: ?[*:0]const u16) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).SetSchemaHiveMountName(@as(*const ITargetInfo, @ptrCast(self)), pwz_mount_name_);
            }
            pub inline fn getSchemaHiveMountName(self: *const T, p_mount_name_: ?*?BSTR) HRESULT {
                return @as(*const ITargetInfo.VTable, @ptrCast(self.vtable)).GetSchemaHiveMountName(@as(*const ITargetInfo, @ptrCast(self)), p_mount_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsEngine_Value = Guid.initString("9f7d7bb9-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsEngine = &IID_ISettingsEngine_Value;
pub const ISettingsEngine = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNamespaces: *const fn (
            self: *const ISettingsEngine,
            flags: WcmNamespaceEnumerationFlags,
            reserved: ?*anyopaque,
            namespaces: ?*?*IItemEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamespace: *const fn (
            self: *const ISettingsEngine,
            settings_i_d: ?*ISettingsIdentity,
            access: WcmNamespaceAccess,
            reserved: ?*anyopaque,
            namespace_item: ?*?*ISettingsNamespace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorDescription: *const fn (
            self: *const ISettingsEngine,
            h_result: i32,
            message: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSettingsIdentity: *const fn (
            self: *const ISettingsEngine,
            settings_i_d: ?*?*ISettingsIdentity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoreStatus: *const fn (
            self: *const ISettingsEngine,
            reserved: ?*anyopaque,
            status: ?*WcmUserStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadStore: *const fn (
            self: *const ISettingsEngine,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnloadStore: *const fn (
            self: *const ISettingsEngine,
            reserved: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterNamespace: *const fn (
            self: *const ISettingsEngine,
            settings_i_d: ?*ISettingsIdentity,
            stream: ?*IStream,
            push_settings: BOOL,
            results: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterNamespace: *const fn (
            self: *const ISettingsEngine,
            settings_i_d: ?*ISettingsIdentity,
            remove_settings: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTargetInfo: *const fn (
            self: *const ISettingsEngine,
            target: ?*?*ITargetInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetInfo: *const fn (
            self: *const ISettingsEngine,
            target: ?*?*ITargetInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetInfo: *const fn (
            self: *const ISettingsEngine,
            target: ?*ITargetInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSettingsContext: *const fn (
            self: *const ISettingsEngine,
            flags: u32,
            reserved: ?*anyopaque,
            settings_context: ?*?*ISettingsContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSettingsContext: *const fn (
            self: *const ISettingsEngine,
            settings_context: ?*ISettingsContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplySettingsContext: *const fn (
            self: *const ISettingsEngine,
            settings_context: ?*ISettingsContext,
            pppwz_identities: ?*?*?PWSTR,
            pc_identities: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSettingsContext: *const fn (
            self: *const ISettingsEngine,
            settings_context: ?*?*ISettingsContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNamespaces(self: *const T, flags_: WcmNamespaceEnumerationFlags, reserved_: ?*anyopaque, namespaces_: ?*?*IItemEnumerator) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).GetNamespaces(@as(*const ISettingsEngine, @ptrCast(self)), flags_, reserved_, namespaces_);
            }
            pub inline fn getNamespace(self: *const T, settings_i_d_: ?*ISettingsIdentity, access_: WcmNamespaceAccess, reserved_: ?*anyopaque, namespace_item_: ?*?*ISettingsNamespace) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).GetNamespace(@as(*const ISettingsEngine, @ptrCast(self)), settings_i_d_, access_, reserved_, namespace_item_);
            }
            pub inline fn getErrorDescription(self: *const T, h_result_: i32, message_: ?*?BSTR) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).GetErrorDescription(@as(*const ISettingsEngine, @ptrCast(self)), h_result_, message_);
            }
            pub inline fn createSettingsIdentity(self: *const T, settings_i_d_: ?*?*ISettingsIdentity) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).CreateSettingsIdentity(@as(*const ISettingsEngine, @ptrCast(self)), settings_i_d_);
            }
            pub inline fn getStoreStatus(self: *const T, reserved_: ?*anyopaque, status_: ?*WcmUserStatus) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).GetStoreStatus(@as(*const ISettingsEngine, @ptrCast(self)), reserved_, status_);
            }
            pub inline fn loadStore(self: *const T, flags_: u32) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).LoadStore(@as(*const ISettingsEngine, @ptrCast(self)), flags_);
            }
            pub inline fn unloadStore(self: *const T, reserved_: ?*anyopaque) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).UnloadStore(@as(*const ISettingsEngine, @ptrCast(self)), reserved_);
            }
            pub inline fn registerNamespace(self: *const T, settings_i_d_: ?*ISettingsIdentity, stream_: ?*IStream, push_settings_: BOOL, results_: ?*VARIANT) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).RegisterNamespace(@as(*const ISettingsEngine, @ptrCast(self)), settings_i_d_, stream_, push_settings_, results_);
            }
            pub inline fn unregisterNamespace(self: *const T, settings_i_d_: ?*ISettingsIdentity, remove_settings_: BOOL) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).UnregisterNamespace(@as(*const ISettingsEngine, @ptrCast(self)), settings_i_d_, remove_settings_);
            }
            pub inline fn createTargetInfo(self: *const T, target_: ?*?*ITargetInfo) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).CreateTargetInfo(@as(*const ISettingsEngine, @ptrCast(self)), target_);
            }
            pub inline fn getTargetInfo(self: *const T, target_: ?*?*ITargetInfo) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).GetTargetInfo(@as(*const ISettingsEngine, @ptrCast(self)), target_);
            }
            pub inline fn setTargetInfo(self: *const T, target_: ?*ITargetInfo) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).SetTargetInfo(@as(*const ISettingsEngine, @ptrCast(self)), target_);
            }
            pub inline fn createSettingsContext(self: *const T, flags_: u32, reserved_: ?*anyopaque, settings_context_: ?*?*ISettingsContext) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).CreateSettingsContext(@as(*const ISettingsEngine, @ptrCast(self)), flags_, reserved_, settings_context_);
            }
            pub inline fn setSettingsContext(self: *const T, settings_context_: ?*ISettingsContext) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).SetSettingsContext(@as(*const ISettingsEngine, @ptrCast(self)), settings_context_);
            }
            pub inline fn applySettingsContext(self: *const T, settings_context_: ?*ISettingsContext, pppwz_identities_: ?*?*?PWSTR, pc_identities_: ?*usize) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).ApplySettingsContext(@as(*const ISettingsEngine, @ptrCast(self)), settings_context_, pppwz_identities_, pc_identities_);
            }
            pub inline fn getSettingsContext(self: *const T, settings_context_: ?*?*ISettingsContext) HRESULT {
                return @as(*const ISettingsEngine.VTable, @ptrCast(self.vtable)).GetSettingsContext(@as(*const ISettingsEngine, @ptrCast(self)), settings_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsItem_Value = Guid.initString("9f7d7bbb-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsItem = &IID_ISettingsItem_Value;
pub const ISettingsItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn (
            self: *const ISettingsItem,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const ISettingsItem,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn (
            self: *const ISettingsItem,
            value: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSettingType: *const fn (
            self: *const ISettingsItem,
            type: ?*WcmSettingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataType: *const fn (
            self: *const ISettingsItem,
            type: ?*WcmDataType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueRaw: *const fn (
            self: *const ISettingsItem,
            data: [*]?*u8,
            data_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValueRaw: *const fn (
            self: *const ISettingsItem,
            data_type: i32,
            data: [*:0]const u8,
            data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasChild: *const fn (
            self: *const ISettingsItem,
            item_has_child: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Children: *const fn (
            self: *const ISettingsItem,
            children: ?*?*IItemEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChild: *const fn (
            self: *const ISettingsItem,
            name: ?[*:0]const u16,
            child: ?*?*ISettingsItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSettingByPath: *const fn (
            self: *const ISettingsItem,
            path: ?[*:0]const u16,
            setting: ?*?*ISettingsItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSettingByPath: *const fn (
            self: *const ISettingsItem,
            path: ?[*:0]const u16,
            setting: ?*?*ISettingsItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveSettingByPath: *const fn (
            self: *const ISettingsItem,
            path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetListKeyInformation: *const fn (
            self: *const ISettingsItem,
            key_name: ?*?BSTR,
            data_type: ?*WcmDataType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateListElement: *const fn (
            self: *const ISettingsItem,
            key_data: ?*const VARIANT,
            child: ?*?*ISettingsItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveListElement: *const fn (
            self: *const ISettingsItem,
            element_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Attributes: *const fn (
            self: *const ISettingsItem,
            attributes: ?*?*IItemEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttribute: *const fn (
            self: *const ISettingsItem,
            name: ?[*:0]const u16,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn (
            self: *const ISettingsItem,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestrictionFacets: *const fn (
            self: *const ISettingsItem,
            restriction_facets: ?*WcmRestrictionFacets,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestriction: *const fn (
            self: *const ISettingsItem,
            restriction_facet: WcmRestrictionFacets,
            facet_data: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyValue: *const fn (
            self: *const ISettingsItem,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetName(@as(*const ISettingsItem, @ptrCast(self)), name_);
            }
            pub inline fn getValue(self: *const T, value_: ?*VARIANT) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetValue(@as(*const ISettingsItem, @ptrCast(self)), value_);
            }
            pub inline fn setValue(self: *const T, value_: ?*const VARIANT) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).SetValue(@as(*const ISettingsItem, @ptrCast(self)), value_);
            }
            pub inline fn getSettingType(self: *const T, type_: ?*WcmSettingType) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetSettingType(@as(*const ISettingsItem, @ptrCast(self)), type_);
            }
            pub inline fn getDataType(self: *const T, type_: ?*WcmDataType) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetDataType(@as(*const ISettingsItem, @ptrCast(self)), type_);
            }
            pub inline fn getValueRaw(self: *const T, data_: [*]?*u8, data_size_: ?*u32) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetValueRaw(@as(*const ISettingsItem, @ptrCast(self)), data_, data_size_);
            }
            pub inline fn setValueRaw(self: *const T, data_type_: i32, data_: [*:0]const u8, data_size_: u32) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).SetValueRaw(@as(*const ISettingsItem, @ptrCast(self)), data_type_, data_, data_size_);
            }
            pub inline fn hasChild(self: *const T, item_has_child_: ?*BOOL) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).HasChild(@as(*const ISettingsItem, @ptrCast(self)), item_has_child_);
            }
            pub inline fn children(self: *const T, children_: ?*?*IItemEnumerator) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).Children(@as(*const ISettingsItem, @ptrCast(self)), children_);
            }
            pub inline fn getChild(self: *const T, name_: ?[*:0]const u16, child_: ?*?*ISettingsItem) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetChild(@as(*const ISettingsItem, @ptrCast(self)), name_, child_);
            }
            pub inline fn getSettingByPath(self: *const T, path_: ?[*:0]const u16, setting_: ?*?*ISettingsItem) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetSettingByPath(@as(*const ISettingsItem, @ptrCast(self)), path_, setting_);
            }
            pub inline fn createSettingByPath(self: *const T, path_: ?[*:0]const u16, setting_: ?*?*ISettingsItem) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).CreateSettingByPath(@as(*const ISettingsItem, @ptrCast(self)), path_, setting_);
            }
            pub inline fn removeSettingByPath(self: *const T, path_: ?[*:0]const u16) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).RemoveSettingByPath(@as(*const ISettingsItem, @ptrCast(self)), path_);
            }
            pub inline fn getListKeyInformation(self: *const T, key_name_: ?*?BSTR, data_type_: ?*WcmDataType) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetListKeyInformation(@as(*const ISettingsItem, @ptrCast(self)), key_name_, data_type_);
            }
            pub inline fn createListElement(self: *const T, key_data_: ?*const VARIANT, child_: ?*?*ISettingsItem) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).CreateListElement(@as(*const ISettingsItem, @ptrCast(self)), key_data_, child_);
            }
            pub inline fn removeListElement(self: *const T, element_name_: ?[*:0]const u16) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).RemoveListElement(@as(*const ISettingsItem, @ptrCast(self)), element_name_);
            }
            pub inline fn attributes(self: *const T, attributes_: ?*?*IItemEnumerator) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).Attributes(@as(*const ISettingsItem, @ptrCast(self)), attributes_);
            }
            pub inline fn getAttribute(self: *const T, name_: ?[*:0]const u16, value_: ?*VARIANT) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetAttribute(@as(*const ISettingsItem, @ptrCast(self)), name_, value_);
            }
            pub inline fn getPath(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetPath(@as(*const ISettingsItem, @ptrCast(self)), path_);
            }
            pub inline fn getRestrictionFacets(self: *const T, restriction_facets_: ?*WcmRestrictionFacets) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetRestrictionFacets(@as(*const ISettingsItem, @ptrCast(self)), restriction_facets_);
            }
            pub inline fn getRestriction(self: *const T, restriction_facet_: WcmRestrictionFacets, facet_data_: ?*VARIANT) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetRestriction(@as(*const ISettingsItem, @ptrCast(self)), restriction_facet_, facet_data_);
            }
            pub inline fn getKeyValue(self: *const T, value_: ?*VARIANT) HRESULT {
                return @as(*const ISettingsItem.VTable, @ptrCast(self.vtable)).GetKeyValue(@as(*const ISettingsItem, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsNamespace_Value = Guid.initString("9f7d7bba-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsNamespace = &IID_ISettingsNamespace_Value;
pub const ISettingsNamespace = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdentity: *const fn (
            self: *const ISettingsNamespace,
            settings_i_d: ?*?*ISettingsIdentity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Settings: *const fn (
            self: *const ISettingsNamespace,
            settings: ?*?*IItemEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const ISettingsNamespace,
            push_settings: BOOL,
            result: ?*?*ISettingsResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSettingByPath: *const fn (
            self: *const ISettingsNamespace,
            path: ?[*:0]const u16,
            setting: ?*?*ISettingsItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSettingByPath: *const fn (
            self: *const ISettingsNamespace,
            path: ?[*:0]const u16,
            setting: ?*?*ISettingsItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveSettingByPath: *const fn (
            self: *const ISettingsNamespace,
            path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttribute: *const fn (
            self: *const ISettingsNamespace,
            name: ?[*:0]const u16,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIdentity(self: *const T, settings_i_d_: ?*?*ISettingsIdentity) HRESULT {
                return @as(*const ISettingsNamespace.VTable, @ptrCast(self.vtable)).GetIdentity(@as(*const ISettingsNamespace, @ptrCast(self)), settings_i_d_);
            }
            pub inline fn settings(self: *const T, settings_: ?*?*IItemEnumerator) HRESULT {
                return @as(*const ISettingsNamespace.VTable, @ptrCast(self.vtable)).Settings(@as(*const ISettingsNamespace, @ptrCast(self)), settings_);
            }
            pub inline fn save(self: *const T, push_settings_: BOOL, result_: ?*?*ISettingsResult) HRESULT {
                return @as(*const ISettingsNamespace.VTable, @ptrCast(self.vtable)).Save(@as(*const ISettingsNamespace, @ptrCast(self)), push_settings_, result_);
            }
            pub inline fn getSettingByPath(self: *const T, path_: ?[*:0]const u16, setting_: ?*?*ISettingsItem) HRESULT {
                return @as(*const ISettingsNamespace.VTable, @ptrCast(self.vtable)).GetSettingByPath(@as(*const ISettingsNamespace, @ptrCast(self)), path_, setting_);
            }
            pub inline fn createSettingByPath(self: *const T, path_: ?[*:0]const u16, setting_: ?*?*ISettingsItem) HRESULT {
                return @as(*const ISettingsNamespace.VTable, @ptrCast(self.vtable)).CreateSettingByPath(@as(*const ISettingsNamespace, @ptrCast(self)), path_, setting_);
            }
            pub inline fn removeSettingByPath(self: *const T, path_: ?[*:0]const u16) HRESULT {
                return @as(*const ISettingsNamespace.VTable, @ptrCast(self.vtable)).RemoveSettingByPath(@as(*const ISettingsNamespace, @ptrCast(self)), path_);
            }
            pub inline fn getAttribute(self: *const T, name_: ?[*:0]const u16, value_: ?*VARIANT) HRESULT {
                return @as(*const ISettingsNamespace.VTable, @ptrCast(self.vtable)).GetAttribute(@as(*const ISettingsNamespace, @ptrCast(self)), name_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsResult_Value = Guid.initString("9f7d7bbc-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsResult = &IID_ISettingsResult_Value;
pub const ISettingsResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDescription: *const fn (
            self: *const ISettingsResult,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorCode: *const fn (
            self: *const ISettingsResult,
            hr_out: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContextDescription: *const fn (
            self: *const ISettingsResult,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLine: *const fn (
            self: *const ISettingsResult,
            dw_line: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumn: *const fn (
            self: *const ISettingsResult,
            dw_column: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSource: *const fn (
            self: *const ISettingsResult,
            file: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const ISettingsResult.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const ISettingsResult, @ptrCast(self)), description_);
            }
            pub inline fn getErrorCode(self: *const T, hr_out_: ?*HRESULT) HRESULT {
                return @as(*const ISettingsResult.VTable, @ptrCast(self.vtable)).GetErrorCode(@as(*const ISettingsResult, @ptrCast(self)), hr_out_);
            }
            pub inline fn getContextDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const ISettingsResult.VTable, @ptrCast(self.vtable)).GetContextDescription(@as(*const ISettingsResult, @ptrCast(self)), description_);
            }
            pub inline fn getLine(self: *const T, dw_line_: ?*u32) HRESULT {
                return @as(*const ISettingsResult.VTable, @ptrCast(self.vtable)).GetLine(@as(*const ISettingsResult, @ptrCast(self)), dw_line_);
            }
            pub inline fn getColumn(self: *const T, dw_column_: ?*u32) HRESULT {
                return @as(*const ISettingsResult.VTable, @ptrCast(self.vtable)).GetColumn(@as(*const ISettingsResult, @ptrCast(self)), dw_column_);
            }
            pub inline fn getSource(self: *const T, file_: ?*?BSTR) HRESULT {
                return @as(*const ISettingsResult.VTable, @ptrCast(self.vtable)).GetSource(@as(*const ISettingsResult, @ptrCast(self)), file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsContext_Value = Guid.initString("9f7d7bbd-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsContext = &IID_ISettingsContext_Value;
pub const ISettingsContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Serialize: *const fn (
            self: *const ISettingsContext,
            p_stream: ?*IStream,
            p_target: ?*ITargetInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deserialize: *const fn (
            self: *const ISettingsContext,
            p_stream: ?*IStream,
            p_target: ?*ITargetInfo,
            ppp_results: [*]?*?*ISettingsResult,
            pc_result_count: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUserData: *const fn (
            self: *const ISettingsContext,
            p_user_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserData: *const fn (
            self: *const ISettingsContext,
            p_user_data: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamespaces: *const fn (
            self: *const ISettingsContext,
            pp_namespace_ids: ?*?*IItemEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoredSettings: *const fn (
            self: *const ISettingsContext,
            p_identity: ?*ISettingsIdentity,
            pp_added_settings: ?*?*IItemEnumerator,
            pp_modified_settings: ?*?*IItemEnumerator,
            pp_deleted_settings: ?*?*IItemEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevertSetting: *const fn (
            self: *const ISettingsContext,
            p_identity: ?*ISettingsIdentity,
            pwz_setting: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn serialize(self: *const T, p_stream_: ?*IStream, p_target_: ?*ITargetInfo) HRESULT {
                return @as(*const ISettingsContext.VTable, @ptrCast(self.vtable)).Serialize(@as(*const ISettingsContext, @ptrCast(self)), p_stream_, p_target_);
            }
            pub inline fn deserialize(self: *const T, p_stream_: ?*IStream, p_target_: ?*ITargetInfo, ppp_results_: [*]?*?*ISettingsResult, pc_result_count_: ?*usize) HRESULT {
                return @as(*const ISettingsContext.VTable, @ptrCast(self.vtable)).Deserialize(@as(*const ISettingsContext, @ptrCast(self)), p_stream_, p_target_, ppp_results_, pc_result_count_);
            }
            pub inline fn setUserData(self: *const T, p_user_data_: ?*anyopaque) HRESULT {
                return @as(*const ISettingsContext.VTable, @ptrCast(self.vtable)).SetUserData(@as(*const ISettingsContext, @ptrCast(self)), p_user_data_);
            }
            pub inline fn getUserData(self: *const T, p_user_data_: ?*?*anyopaque) HRESULT {
                return @as(*const ISettingsContext.VTable, @ptrCast(self.vtable)).GetUserData(@as(*const ISettingsContext, @ptrCast(self)), p_user_data_);
            }
            pub inline fn getNamespaces(self: *const T, pp_namespace_ids_: ?*?*IItemEnumerator) HRESULT {
                return @as(*const ISettingsContext.VTable, @ptrCast(self.vtable)).GetNamespaces(@as(*const ISettingsContext, @ptrCast(self)), pp_namespace_ids_);
            }
            pub inline fn getStoredSettings(self: *const T, p_identity_: ?*ISettingsIdentity, pp_added_settings_: ?*?*IItemEnumerator, pp_modified_settings_: ?*?*IItemEnumerator, pp_deleted_settings_: ?*?*IItemEnumerator) HRESULT {
                return @as(*const ISettingsContext.VTable, @ptrCast(self.vtable)).GetStoredSettings(@as(*const ISettingsContext, @ptrCast(self)), p_identity_, pp_added_settings_, pp_modified_settings_, pp_deleted_settings_);
            }
            pub inline fn revertSetting(self: *const T, p_identity_: ?*ISettingsIdentity, pwz_setting_: ?[*:0]const u16) HRESULT {
                return @as(*const ISettingsContext.VTable, @ptrCast(self.vtable)).RevertSetting(@as(*const ISettingsContext, @ptrCast(self)), p_identity_, pwz_setting_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HRESULT = @import("../foundation.zig").HRESULT;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
