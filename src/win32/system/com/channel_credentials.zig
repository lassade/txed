//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (1)
//--------------------------------------------------------------------------------
const IID_IChannelCredentials_Value = Guid.initString("181b448c-c17c-4b17-ac6d-06699b93198f");
pub const IID_IChannelCredentials = &IID_IChannelCredentials_Value;
pub const IChannelCredentials = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetWindowsCredential: *const fn (
            self: *const IChannelCredentials,
            domain: ?BSTR,
            username: ?BSTR,
            password: ?BSTR,
            impersonation_level: i32,
            allow_ntlm: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUserNameCredential: *const fn (
            self: *const IChannelCredentials,
            username: ?BSTR,
            password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientCertificateFromStore: *const fn (
            self: *const IChannelCredentials,
            store_location: ?BSTR,
            store_name: ?BSTR,
            find_yype: ?BSTR,
            find_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientCertificateFromStoreByName: *const fn (
            self: *const IChannelCredentials,
            subject_name: ?BSTR,
            store_location: ?BSTR,
            store_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientCertificateFromFile: *const fn (
            self: *const IChannelCredentials,
            filename: ?BSTR,
            password: ?BSTR,
            keystorage_flags: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultServiceCertificateFromStore: *const fn (
            self: *const IChannelCredentials,
            store_location: ?BSTR,
            store_name: ?BSTR,
            find_type: ?BSTR,
            find_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultServiceCertificateFromStoreByName: *const fn (
            self: *const IChannelCredentials,
            subject_name: ?BSTR,
            store_location: ?BSTR,
            store_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultServiceCertificateFromFile: *const fn (
            self: *const IChannelCredentials,
            filename: ?BSTR,
            password: ?BSTR,
            keystorage_flags: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetServiceCertificateAuthentication: *const fn (
            self: *const IChannelCredentials,
            store_location: ?BSTR,
            revocation_mode: ?BSTR,
            certificate_validation_mode: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIssuedToken: *const fn (
            self: *const IChannelCredentials,
            local_issuer_addres: ?BSTR,
            local_issuer_binding_type: ?BSTR,
            local_issuer_binding: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn setWindowsCredential(self: *const T, domain_: ?BSTR, username_: ?BSTR, password_: ?BSTR, impersonation_level_: i32, allow_ntlm_: BOOL) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetWindowsCredential(@as(*const IChannelCredentials, @ptrCast(self)), domain_, username_, password_, impersonation_level_, allow_ntlm_);
            }
            pub inline fn setUserNameCredential(self: *const T, username_: ?BSTR, password_: ?BSTR) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetUserNameCredential(@as(*const IChannelCredentials, @ptrCast(self)), username_, password_);
            }
            pub inline fn setClientCertificateFromStore(self: *const T, store_location_: ?BSTR, store_name_: ?BSTR, find_yype_: ?BSTR, find_value_: VARIANT) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetClientCertificateFromStore(@as(*const IChannelCredentials, @ptrCast(self)), store_location_, store_name_, find_yype_, find_value_);
            }
            pub inline fn setClientCertificateFromStoreByName(self: *const T, subject_name_: ?BSTR, store_location_: ?BSTR, store_name_: ?BSTR) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetClientCertificateFromStoreByName(@as(*const IChannelCredentials, @ptrCast(self)), subject_name_, store_location_, store_name_);
            }
            pub inline fn setClientCertificateFromFile(self: *const T, filename_: ?BSTR, password_: ?BSTR, keystorage_flags_: ?BSTR) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetClientCertificateFromFile(@as(*const IChannelCredentials, @ptrCast(self)), filename_, password_, keystorage_flags_);
            }
            pub inline fn setDefaultServiceCertificateFromStore(self: *const T, store_location_: ?BSTR, store_name_: ?BSTR, find_type_: ?BSTR, find_value_: VARIANT) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetDefaultServiceCertificateFromStore(@as(*const IChannelCredentials, @ptrCast(self)), store_location_, store_name_, find_type_, find_value_);
            }
            pub inline fn setDefaultServiceCertificateFromStoreByName(self: *const T, subject_name_: ?BSTR, store_location_: ?BSTR, store_name_: ?BSTR) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetDefaultServiceCertificateFromStoreByName(@as(*const IChannelCredentials, @ptrCast(self)), subject_name_, store_location_, store_name_);
            }
            pub inline fn setDefaultServiceCertificateFromFile(self: *const T, filename_: ?BSTR, password_: ?BSTR, keystorage_flags_: ?BSTR) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetDefaultServiceCertificateFromFile(@as(*const IChannelCredentials, @ptrCast(self)), filename_, password_, keystorage_flags_);
            }
            pub inline fn setServiceCertificateAuthentication(self: *const T, store_location_: ?BSTR, revocation_mode_: ?BSTR, certificate_validation_mode_: ?BSTR) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetServiceCertificateAuthentication(@as(*const IChannelCredentials, @ptrCast(self)), store_location_, revocation_mode_, certificate_validation_mode_);
            }
            pub inline fn setIssuedToken(self: *const T, local_issuer_addres_: ?BSTR, local_issuer_binding_type_: ?BSTR, local_issuer_binding_: ?BSTR) HRESULT {
                return @as(*const IChannelCredentials.VTable, @ptrCast(self.vtable)).SetIssuedToken(@as(*const IChannelCredentials, @ptrCast(self)), local_issuer_addres_, local_issuer_binding_type_, local_issuer_binding_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IDispatch = @import("../../system/com.zig").IDispatch;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
