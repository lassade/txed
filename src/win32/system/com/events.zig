//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (24)
//--------------------------------------------------------------------------------
const CLSID_CEventSystem_Value = Guid.initString("4e14fba2-2e22-11d1-9964-00c04fbbb345");
pub const CLSID_CEventSystem = &CLSID_CEventSystem_Value;

const CLSID_CEventPublisher_Value = Guid.initString("ab944620-79c6-11d1-88f9-0080c7d771bf");
pub const CLSID_CEventPublisher = &CLSID_CEventPublisher_Value;

const CLSID_CEventClass_Value = Guid.initString("cdbec9c0-7a68-11d1-88f9-0080c7d771bf");
pub const CLSID_CEventClass = &CLSID_CEventClass_Value;

const CLSID_CEventSubscription_Value = Guid.initString("7542e960-79c7-11d1-88f9-0080c7d771bf");
pub const CLSID_CEventSubscription = &CLSID_CEventSubscription_Value;

const CLSID_EventObjectChange_Value = Guid.initString("d0565000-9df4-11d1-a281-00c04fca0aa7");
pub const CLSID_EventObjectChange = &CLSID_EventObjectChange_Value;

const CLSID_EventObjectChange2_Value = Guid.initString("bb07bacd-cd56-4e63-a8ff-cbf0355fb9f4");
pub const CLSID_EventObjectChange2 = &CLSID_EventObjectChange2_Value;

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventSystem_Value = Guid.initString("4e14fb9f-2e22-11d1-9964-00c04fbbb345");
pub const IID_IEventSystem = &IID_IEventSystem_Value;
pub const IEventSystem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Query: *const fn (
            self: *const IEventSystem,
            prog_i_d: ?BSTR,
            query_criteria: ?BSTR,
            error_index: ?*i32,
            pp_interface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Store: *const fn (
            self: *const IEventSystem,
            prog_i_d: ?BSTR,
            p_interface: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IEventSystem,
            prog_i_d: ?BSTR,
            query_criteria: ?BSTR,
            error_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventObjectChangeEventClassID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSystem,
            pbstr_event_class_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryS: *const fn (
            self: *const IEventSystem,
            prog_i_d: ?BSTR,
            query_criteria: ?BSTR,
            pp_interface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveS: *const fn (
            self: *const IEventSystem,
            prog_i_d: ?BSTR,
            query_criteria: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn query(self: *const T, prog_i_d_: ?BSTR, query_criteria_: ?BSTR, error_index_: ?*i32, pp_interface_: ?*?*IUnknown) HRESULT {
                return @as(*const IEventSystem.VTable, @ptrCast(self.vtable)).Query(@as(*const IEventSystem, @ptrCast(self)), prog_i_d_, query_criteria_, error_index_, pp_interface_);
            }
            pub inline fn store(self: *const T, prog_i_d_: ?BSTR, p_interface_: ?*IUnknown) HRESULT {
                return @as(*const IEventSystem.VTable, @ptrCast(self.vtable)).Store(@as(*const IEventSystem, @ptrCast(self)), prog_i_d_, p_interface_);
            }
            pub inline fn remove(self: *const T, prog_i_d_: ?BSTR, query_criteria_: ?BSTR, error_index_: ?*i32) HRESULT {
                return @as(*const IEventSystem.VTable, @ptrCast(self.vtable)).Remove(@as(*const IEventSystem, @ptrCast(self)), prog_i_d_, query_criteria_, error_index_);
            }
            pub inline fn getEventObjectChangeEventClassID(self: *const T, pbstr_event_class_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventSystem.VTable, @ptrCast(self.vtable)).get_EventObjectChangeEventClassID(@as(*const IEventSystem, @ptrCast(self)), pbstr_event_class_i_d_);
            }
            pub inline fn queryS(self: *const T, prog_i_d_: ?BSTR, query_criteria_: ?BSTR, pp_interface_: ?*?*IUnknown) HRESULT {
                return @as(*const IEventSystem.VTable, @ptrCast(self.vtable)).QueryS(@as(*const IEventSystem, @ptrCast(self)), prog_i_d_, query_criteria_, pp_interface_);
            }
            pub inline fn removeS(self: *const T, prog_i_d_: ?BSTR, query_criteria_: ?BSTR) HRESULT {
                return @as(*const IEventSystem.VTable, @ptrCast(self.vtable)).RemoveS(@as(*const IEventSystem, @ptrCast(self)), prog_i_d_, query_criteria_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventPublisher_Value = Guid.initString("e341516b-2e32-11d1-9964-00c04fbbb345");
pub const IID_IEventPublisher = &IID_IEventPublisher_Value;
pub const IEventPublisher = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PublisherID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            pbstr_publisher_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PublisherID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            bstr_publisher_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PublisherName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            pbstr_publisher_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PublisherName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            bstr_publisher_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PublisherType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            pbstr_publisher_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PublisherType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            bstr_publisher_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OwnerSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            pbstr_owner_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OwnerSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            bstr_owner_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventPublisher,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultProperty: *const fn (
            self: *const IEventPublisher,
            bstr_property_name: ?BSTR,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutDefaultProperty: *const fn (
            self: *const IEventPublisher,
            bstr_property_name: ?BSTR,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveDefaultProperty: *const fn (
            self: *const IEventPublisher,
            bstr_property_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultPropertyCollection: *const fn (
            self: *const IEventPublisher,
            collection: ?*?*IEventObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPublisherID(self: *const T, pbstr_publisher_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).get_PublisherID(@as(*const IEventPublisher, @ptrCast(self)), pbstr_publisher_i_d_);
            }
            pub inline fn putPublisherID(self: *const T, bstr_publisher_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).put_PublisherID(@as(*const IEventPublisher, @ptrCast(self)), bstr_publisher_i_d_);
            }
            pub inline fn getPublisherName(self: *const T, pbstr_publisher_name_: ?*?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).get_PublisherName(@as(*const IEventPublisher, @ptrCast(self)), pbstr_publisher_name_);
            }
            pub inline fn putPublisherName(self: *const T, bstr_publisher_name_: ?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).put_PublisherName(@as(*const IEventPublisher, @ptrCast(self)), bstr_publisher_name_);
            }
            pub inline fn getPublisherType(self: *const T, pbstr_publisher_type_: ?*?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).get_PublisherType(@as(*const IEventPublisher, @ptrCast(self)), pbstr_publisher_type_);
            }
            pub inline fn putPublisherType(self: *const T, bstr_publisher_type_: ?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).put_PublisherType(@as(*const IEventPublisher, @ptrCast(self)), bstr_publisher_type_);
            }
            pub inline fn getOwnerSID(self: *const T, pbstr_owner_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).get_OwnerSID(@as(*const IEventPublisher, @ptrCast(self)), pbstr_owner_s_i_d_);
            }
            pub inline fn putOwnerSID(self: *const T, bstr_owner_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).put_OwnerSID(@as(*const IEventPublisher, @ptrCast(self)), bstr_owner_s_i_d_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IEventPublisher, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IEventPublisher, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getDefaultProperty(self: *const T, bstr_property_name_: ?BSTR, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).GetDefaultProperty(@as(*const IEventPublisher, @ptrCast(self)), bstr_property_name_, property_value_);
            }
            pub inline fn putDefaultProperty(self: *const T, bstr_property_name_: ?BSTR, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).PutDefaultProperty(@as(*const IEventPublisher, @ptrCast(self)), bstr_property_name_, property_value_);
            }
            pub inline fn removeDefaultProperty(self: *const T, bstr_property_name_: ?BSTR) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).RemoveDefaultProperty(@as(*const IEventPublisher, @ptrCast(self)), bstr_property_name_);
            }
            pub inline fn getDefaultPropertyCollection(self: *const T, collection_: ?*?*IEventObjectCollection) HRESULT {
                return @as(*const IEventPublisher.VTable, @ptrCast(self.vtable)).GetDefaultPropertyCollection(@as(*const IEventPublisher, @ptrCast(self)), collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventClass_Value = Guid.initString("fb2b72a0-7a68-11d1-88f9-0080c7d771bf");
pub const IID_IEventClass = &IID_IEventClass_Value;
pub const IEventClass = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventClassID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            pbstr_event_class_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventClassID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            bstr_event_class_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventClassName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            pbstr_event_class_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventClassName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            bstr_event_class_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OwnerSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            pbstr_owner_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OwnerSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            bstr_owner_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FiringInterfaceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            pbstr_firing_interface_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FiringInterfaceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            bstr_firing_interface_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CustomConfigCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            pbstr_custom_config_c_l_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CustomConfigCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            bstr_custom_config_c_l_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TypeLib: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            pbstr_type_lib: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TypeLib: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass,
            bstr_type_lib: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getEventClassID(self: *const T, pbstr_event_class_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).get_EventClassID(@as(*const IEventClass, @ptrCast(self)), pbstr_event_class_i_d_);
            }
            pub inline fn putEventClassID(self: *const T, bstr_event_class_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).put_EventClassID(@as(*const IEventClass, @ptrCast(self)), bstr_event_class_i_d_);
            }
            pub inline fn getEventClassName(self: *const T, pbstr_event_class_name_: ?*?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).get_EventClassName(@as(*const IEventClass, @ptrCast(self)), pbstr_event_class_name_);
            }
            pub inline fn putEventClassName(self: *const T, bstr_event_class_name_: ?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).put_EventClassName(@as(*const IEventClass, @ptrCast(self)), bstr_event_class_name_);
            }
            pub inline fn getOwnerSID(self: *const T, pbstr_owner_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).get_OwnerSID(@as(*const IEventClass, @ptrCast(self)), pbstr_owner_s_i_d_);
            }
            pub inline fn putOwnerSID(self: *const T, bstr_owner_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).put_OwnerSID(@as(*const IEventClass, @ptrCast(self)), bstr_owner_s_i_d_);
            }
            pub inline fn getFiringInterfaceID(self: *const T, pbstr_firing_interface_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).get_FiringInterfaceID(@as(*const IEventClass, @ptrCast(self)), pbstr_firing_interface_i_d_);
            }
            pub inline fn putFiringInterfaceID(self: *const T, bstr_firing_interface_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).put_FiringInterfaceID(@as(*const IEventClass, @ptrCast(self)), bstr_firing_interface_i_d_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IEventClass, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IEventClass, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getCustomConfigCLSID(self: *const T, pbstr_custom_config_c_l_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).get_CustomConfigCLSID(@as(*const IEventClass, @ptrCast(self)), pbstr_custom_config_c_l_s_i_d_);
            }
            pub inline fn putCustomConfigCLSID(self: *const T, bstr_custom_config_c_l_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).put_CustomConfigCLSID(@as(*const IEventClass, @ptrCast(self)), bstr_custom_config_c_l_s_i_d_);
            }
            pub inline fn getTypeLib(self: *const T, pbstr_type_lib_: ?*?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).get_TypeLib(@as(*const IEventClass, @ptrCast(self)), pbstr_type_lib_);
            }
            pub inline fn putTypeLib(self: *const T, bstr_type_lib_: ?BSTR) HRESULT {
                return @as(*const IEventClass.VTable, @ptrCast(self.vtable)).put_TypeLib(@as(*const IEventClass, @ptrCast(self)), bstr_type_lib_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventClass2_Value = Guid.initString("fb2b72a1-7a68-11d1-88f9-0080c7d771bf");
pub const IID_IEventClass2 = &IID_IEventClass2_Value;
pub const IEventClass2 = extern struct {
    pub const VTable = extern struct {
        base: IEventClass.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PublisherID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass2,
            pbstr_publisher_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PublisherID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass2,
            bstr_publisher_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MultiInterfacePublisherFilterCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass2,
            pbstr_pub_fil_c_l_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MultiInterfacePublisherFilterCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass2,
            bstr_pub_fil_c_l_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInprocActivation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass2,
            pf_allow_inproc_activation: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInprocActivation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass2,
            f_allow_inproc_activation: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FireInParallel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass2,
            pf_fire_in_parallel: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FireInParallel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventClass2,
            f_fire_in_parallel: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IEventClass.MethodMixin(T);
            pub inline fn getPublisherID(self: *const T, pbstr_publisher_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventClass2.VTable, @ptrCast(self.vtable)).get_PublisherID(@as(*const IEventClass2, @ptrCast(self)), pbstr_publisher_i_d_);
            }
            pub inline fn putPublisherID(self: *const T, bstr_publisher_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventClass2.VTable, @ptrCast(self.vtable)).put_PublisherID(@as(*const IEventClass2, @ptrCast(self)), bstr_publisher_i_d_);
            }
            pub inline fn getMultiInterfacePublisherFilterCLSID(self: *const T, pbstr_pub_fil_c_l_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventClass2.VTable, @ptrCast(self.vtable)).get_MultiInterfacePublisherFilterCLSID(@as(*const IEventClass2, @ptrCast(self)), pbstr_pub_fil_c_l_s_i_d_);
            }
            pub inline fn putMultiInterfacePublisherFilterCLSID(self: *const T, bstr_pub_fil_c_l_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventClass2.VTable, @ptrCast(self.vtable)).put_MultiInterfacePublisherFilterCLSID(@as(*const IEventClass2, @ptrCast(self)), bstr_pub_fil_c_l_s_i_d_);
            }
            pub inline fn getAllowInprocActivation(self: *const T, pf_allow_inproc_activation_: ?*BOOL) HRESULT {
                return @as(*const IEventClass2.VTable, @ptrCast(self.vtable)).get_AllowInprocActivation(@as(*const IEventClass2, @ptrCast(self)), pf_allow_inproc_activation_);
            }
            pub inline fn putAllowInprocActivation(self: *const T, f_allow_inproc_activation_: BOOL) HRESULT {
                return @as(*const IEventClass2.VTable, @ptrCast(self.vtable)).put_AllowInprocActivation(@as(*const IEventClass2, @ptrCast(self)), f_allow_inproc_activation_);
            }
            pub inline fn getFireInParallel(self: *const T, pf_fire_in_parallel_: ?*BOOL) HRESULT {
                return @as(*const IEventClass2.VTable, @ptrCast(self.vtable)).get_FireInParallel(@as(*const IEventClass2, @ptrCast(self)), pf_fire_in_parallel_);
            }
            pub inline fn putFireInParallel(self: *const T, f_fire_in_parallel_: BOOL) HRESULT {
                return @as(*const IEventClass2.VTable, @ptrCast(self.vtable)).put_FireInParallel(@as(*const IEventClass2, @ptrCast(self)), f_fire_in_parallel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventSubscription_Value = Guid.initString("4a6b0e15-2e38-11d1-9965-00c04fbbb345");
pub const IID_IEventSubscription = &IID_IEventSubscription_Value;
pub const IEventSubscription = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubscriptionID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_subscription_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SubscriptionID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_subscription_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubscriptionName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_subscription_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SubscriptionName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_subscription_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PublisherID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_publisher_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PublisherID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_publisher_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventClassID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_event_class_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventClassID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_event_class_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MethodName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_method_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MethodName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_method_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubscriberCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_subscriber_c_l_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SubscriberCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_subscriber_c_l_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubscriberInterface: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pp_subscriber_interface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SubscriberInterface: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            p_subscriber_interface: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PerUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pf_per_user: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PerUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            f_per_user: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OwnerSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_owner_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OwnerSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_owner_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pf_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            f_enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MachineName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_machine_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MachineName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_machine_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPublisherProperty: *const fn (
            self: *const IEventSubscription,
            bstr_property_name: ?BSTR,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutPublisherProperty: *const fn (
            self: *const IEventSubscription,
            bstr_property_name: ?BSTR,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePublisherProperty: *const fn (
            self: *const IEventSubscription,
            bstr_property_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPublisherPropertyCollection: *const fn (
            self: *const IEventSubscription,
            collection: ?*?*IEventObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscriberProperty: *const fn (
            self: *const IEventSubscription,
            bstr_property_name: ?BSTR,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutSubscriberProperty: *const fn (
            self: *const IEventSubscription,
            bstr_property_name: ?BSTR,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveSubscriberProperty: *const fn (
            self: *const IEventSubscription,
            bstr_property_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscriberPropertyCollection: *const fn (
            self: *const IEventSubscription,
            collection: ?*?*IEventObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InterfaceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            pbstr_interface_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InterfaceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventSubscription,
            bstr_interface_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSubscriptionID(self: *const T, pbstr_subscription_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_SubscriptionID(@as(*const IEventSubscription, @ptrCast(self)), pbstr_subscription_i_d_);
            }
            pub inline fn putSubscriptionID(self: *const T, bstr_subscription_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_SubscriptionID(@as(*const IEventSubscription, @ptrCast(self)), bstr_subscription_i_d_);
            }
            pub inline fn getSubscriptionName(self: *const T, pbstr_subscription_name_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_SubscriptionName(@as(*const IEventSubscription, @ptrCast(self)), pbstr_subscription_name_);
            }
            pub inline fn putSubscriptionName(self: *const T, bstr_subscription_name_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_SubscriptionName(@as(*const IEventSubscription, @ptrCast(self)), bstr_subscription_name_);
            }
            pub inline fn getPublisherID(self: *const T, pbstr_publisher_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_PublisherID(@as(*const IEventSubscription, @ptrCast(self)), pbstr_publisher_i_d_);
            }
            pub inline fn putPublisherID(self: *const T, bstr_publisher_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_PublisherID(@as(*const IEventSubscription, @ptrCast(self)), bstr_publisher_i_d_);
            }
            pub inline fn getEventClassID(self: *const T, pbstr_event_class_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_EventClassID(@as(*const IEventSubscription, @ptrCast(self)), pbstr_event_class_i_d_);
            }
            pub inline fn putEventClassID(self: *const T, bstr_event_class_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_EventClassID(@as(*const IEventSubscription, @ptrCast(self)), bstr_event_class_i_d_);
            }
            pub inline fn getMethodName(self: *const T, pbstr_method_name_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_MethodName(@as(*const IEventSubscription, @ptrCast(self)), pbstr_method_name_);
            }
            pub inline fn putMethodName(self: *const T, bstr_method_name_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_MethodName(@as(*const IEventSubscription, @ptrCast(self)), bstr_method_name_);
            }
            pub inline fn getSubscriberCLSID(self: *const T, pbstr_subscriber_c_l_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_SubscriberCLSID(@as(*const IEventSubscription, @ptrCast(self)), pbstr_subscriber_c_l_s_i_d_);
            }
            pub inline fn putSubscriberCLSID(self: *const T, bstr_subscriber_c_l_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_SubscriberCLSID(@as(*const IEventSubscription, @ptrCast(self)), bstr_subscriber_c_l_s_i_d_);
            }
            pub inline fn getSubscriberInterface(self: *const T, pp_subscriber_interface_: ?*?*IUnknown) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_SubscriberInterface(@as(*const IEventSubscription, @ptrCast(self)), pp_subscriber_interface_);
            }
            pub inline fn putSubscriberInterface(self: *const T, p_subscriber_interface_: ?*IUnknown) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_SubscriberInterface(@as(*const IEventSubscription, @ptrCast(self)), p_subscriber_interface_);
            }
            pub inline fn getPerUser(self: *const T, pf_per_user_: ?*BOOL) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_PerUser(@as(*const IEventSubscription, @ptrCast(self)), pf_per_user_);
            }
            pub inline fn putPerUser(self: *const T, f_per_user_: BOOL) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_PerUser(@as(*const IEventSubscription, @ptrCast(self)), f_per_user_);
            }
            pub inline fn getOwnerSID(self: *const T, pbstr_owner_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_OwnerSID(@as(*const IEventSubscription, @ptrCast(self)), pbstr_owner_s_i_d_);
            }
            pub inline fn putOwnerSID(self: *const T, bstr_owner_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_OwnerSID(@as(*const IEventSubscription, @ptrCast(self)), bstr_owner_s_i_d_);
            }
            pub inline fn getEnabled(self: *const T, pf_enabled_: ?*BOOL) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IEventSubscription, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn putEnabled(self: *const T, f_enabled_: BOOL) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IEventSubscription, @ptrCast(self)), f_enabled_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IEventSubscription, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IEventSubscription, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getMachineName(self: *const T, pbstr_machine_name_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_MachineName(@as(*const IEventSubscription, @ptrCast(self)), pbstr_machine_name_);
            }
            pub inline fn putMachineName(self: *const T, bstr_machine_name_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_MachineName(@as(*const IEventSubscription, @ptrCast(self)), bstr_machine_name_);
            }
            pub inline fn getPublisherProperty(self: *const T, bstr_property_name_: ?BSTR, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).GetPublisherProperty(@as(*const IEventSubscription, @ptrCast(self)), bstr_property_name_, property_value_);
            }
            pub inline fn putPublisherProperty(self: *const T, bstr_property_name_: ?BSTR, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).PutPublisherProperty(@as(*const IEventSubscription, @ptrCast(self)), bstr_property_name_, property_value_);
            }
            pub inline fn removePublisherProperty(self: *const T, bstr_property_name_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).RemovePublisherProperty(@as(*const IEventSubscription, @ptrCast(self)), bstr_property_name_);
            }
            pub inline fn getPublisherPropertyCollection(self: *const T, collection_: ?*?*IEventObjectCollection) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).GetPublisherPropertyCollection(@as(*const IEventSubscription, @ptrCast(self)), collection_);
            }
            pub inline fn getSubscriberProperty(self: *const T, bstr_property_name_: ?BSTR, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).GetSubscriberProperty(@as(*const IEventSubscription, @ptrCast(self)), bstr_property_name_, property_value_);
            }
            pub inline fn putSubscriberProperty(self: *const T, bstr_property_name_: ?BSTR, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).PutSubscriberProperty(@as(*const IEventSubscription, @ptrCast(self)), bstr_property_name_, property_value_);
            }
            pub inline fn removeSubscriberProperty(self: *const T, bstr_property_name_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).RemoveSubscriberProperty(@as(*const IEventSubscription, @ptrCast(self)), bstr_property_name_);
            }
            pub inline fn getSubscriberPropertyCollection(self: *const T, collection_: ?*?*IEventObjectCollection) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).GetSubscriberPropertyCollection(@as(*const IEventSubscription, @ptrCast(self)), collection_);
            }
            pub inline fn getInterfaceID(self: *const T, pbstr_interface_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).get_InterfaceID(@as(*const IEventSubscription, @ptrCast(self)), pbstr_interface_i_d_);
            }
            pub inline fn putInterfaceID(self: *const T, bstr_interface_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventSubscription.VTable, @ptrCast(self.vtable)).put_InterfaceID(@as(*const IEventSubscription, @ptrCast(self)), bstr_interface_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IFiringControl_Value = Guid.initString("e0498c93-4efe-11d1-9971-00c04fbbb345");
pub const IID_IFiringControl = &IID_IFiringControl_Value;
pub const IFiringControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        FireSubscription: *const fn (
            self: *const IFiringControl,
            subscription: ?*IEventSubscription,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn fireSubscription(self: *const T, subscription_: ?*IEventSubscription) HRESULT {
                return @as(*const IFiringControl.VTable, @ptrCast(self.vtable)).FireSubscription(@as(*const IFiringControl, @ptrCast(self)), subscription_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPublisherFilter_Value = Guid.initString("465e5cc0-7b26-11d1-88fb-0080c7d771bf");
pub const IID_IPublisherFilter = &IID_IPublisherFilter_Value;
pub const IPublisherFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IPublisherFilter,
            method_name: ?BSTR,
            disp_user_defined: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareToFire: *const fn (
            self: *const IPublisherFilter,
            method_name: ?BSTR,
            firing_control: ?*IFiringControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, method_name_: ?BSTR, disp_user_defined_: ?*IDispatch) HRESULT {
                return @as(*const IPublisherFilter.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IPublisherFilter, @ptrCast(self)), method_name_, disp_user_defined_);
            }
            pub inline fn prepareToFire(self: *const T, method_name_: ?BSTR, firing_control_: ?*IFiringControl) HRESULT {
                return @as(*const IPublisherFilter.VTable, @ptrCast(self.vtable)).PrepareToFire(@as(*const IPublisherFilter, @ptrCast(self)), method_name_, firing_control_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IMultiInterfacePublisherFilter_Value = Guid.initString("465e5cc1-7b26-11d1-88fb-0080c7d771bf");
pub const IID_IMultiInterfacePublisherFilter = &IID_IMultiInterfacePublisherFilter_Value;
pub const IMultiInterfacePublisherFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IMultiInterfacePublisherFilter,
            p_e_i_c: ?*IMultiInterfaceEventControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareToFire: *const fn (
            self: *const IMultiInterfacePublisherFilter,
            iid: ?*const Guid,
            method_name: ?BSTR,
            firing_control: ?*IFiringControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_e_i_c_: ?*IMultiInterfaceEventControl) HRESULT {
                return @as(*const IMultiInterfacePublisherFilter.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IMultiInterfacePublisherFilter, @ptrCast(self)), p_e_i_c_);
            }
            pub inline fn prepareToFire(self: *const T, iid_: ?*const Guid, method_name_: ?BSTR, firing_control_: ?*IFiringControl) HRESULT {
                return @as(*const IMultiInterfacePublisherFilter.VTable, @ptrCast(self.vtable)).PrepareToFire(@as(*const IMultiInterfacePublisherFilter, @ptrCast(self)), iid_, method_name_, firing_control_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const EOC_ChangeType = enum(i32) {
    NewObject = 0,
    ModifiedObject = 1,
    DeletedObject = 2,
};
pub const EOC_NewObject = EOC_ChangeType.NewObject;
pub const EOC_ModifiedObject = EOC_ChangeType.ModifiedObject;
pub const EOC_DeletedObject = EOC_ChangeType.DeletedObject;

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventObjectChange_Value = Guid.initString("f4a07d70-2e25-11d1-9964-00c04fbbb345");
pub const IID_IEventObjectChange = &IID_IEventObjectChange_Value;
pub const IEventObjectChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ChangedSubscription: *const fn (
            self: *const IEventObjectChange,
            change_type: EOC_ChangeType,
            bstr_subscription_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangedEventClass: *const fn (
            self: *const IEventObjectChange,
            change_type: EOC_ChangeType,
            bstr_event_class_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangedPublisher: *const fn (
            self: *const IEventObjectChange,
            change_type: EOC_ChangeType,
            bstr_publisher_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn changedSubscription(self: *const T, change_type_: EOC_ChangeType, bstr_subscription_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventObjectChange.VTable, @ptrCast(self.vtable)).ChangedSubscription(@as(*const IEventObjectChange, @ptrCast(self)), change_type_, bstr_subscription_i_d_);
            }
            pub inline fn changedEventClass(self: *const T, change_type_: EOC_ChangeType, bstr_event_class_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventObjectChange.VTable, @ptrCast(self.vtable)).ChangedEventClass(@as(*const IEventObjectChange, @ptrCast(self)), change_type_, bstr_event_class_i_d_);
            }
            pub inline fn changedPublisher(self: *const T, change_type_: EOC_ChangeType, bstr_publisher_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventObjectChange.VTable, @ptrCast(self.vtable)).ChangedPublisher(@as(*const IEventObjectChange, @ptrCast(self)), change_type_, bstr_publisher_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const COMEVENTSYSCHANGEINFO = extern struct {
    cbSize: u32,
    changeType: EOC_ChangeType,
    objectId: ?BSTR,
    partitionId: ?BSTR,
    applicationId: ?BSTR,
    reserved: [10]Guid,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventObjectChange2_Value = Guid.initString("7701a9c3-bd68-438f-83e0-67bf4f53a422");
pub const IID_IEventObjectChange2 = &IID_IEventObjectChange2_Value;
pub const IEventObjectChange2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ChangedSubscription: *const fn (
            self: *const IEventObjectChange2,
            p_info: ?*COMEVENTSYSCHANGEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangedEventClass: *const fn (
            self: *const IEventObjectChange2,
            p_info: ?*COMEVENTSYSCHANGEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn changedSubscription(self: *const T, p_info_: ?*COMEVENTSYSCHANGEINFO) HRESULT {
                return @as(*const IEventObjectChange2.VTable, @ptrCast(self.vtable)).ChangedSubscription(@as(*const IEventObjectChange2, @ptrCast(self)), p_info_);
            }
            pub inline fn changedEventClass(self: *const T, p_info_: ?*COMEVENTSYSCHANGEINFO) HRESULT {
                return @as(*const IEventObjectChange2.VTable, @ptrCast(self.vtable)).ChangedEventClass(@as(*const IEventObjectChange2, @ptrCast(self)), p_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumEventObject_Value = Guid.initString("f4a07d63-2e25-11d1-9964-00c04fbbb345");
pub const IID_IEnumEventObject = &IID_IEnumEventObject_Value;
pub const IEnumEventObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Clone: *const fn (
            self: *const IEnumEventObject,
            pp_interface: ?*?*IEnumEventObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IEnumEventObject,
            c_req_elem: u32,
            pp_interface: [*]?*IUnknown,
            c_ret_elem: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumEventObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumEventObject,
            c_skip_elem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn clone(self: *const T, pp_interface_: ?*?*IEnumEventObject) HRESULT {
                return @as(*const IEnumEventObject.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumEventObject, @ptrCast(self)), pp_interface_);
            }
            pub inline fn next(self: *const T, c_req_elem_: u32, pp_interface_: [*]?*IUnknown, c_ret_elem_: ?*u32) HRESULT {
                return @as(*const IEnumEventObject.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumEventObject, @ptrCast(self)), c_req_elem_, pp_interface_, c_ret_elem_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumEventObject.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumEventObject, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, c_skip_elem_: u32) HRESULT {
                return @as(*const IEnumEventObject.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumEventObject, @ptrCast(self)), c_skip_elem_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventObjectCollection_Value = Guid.initString("f89ac270-d4eb-11d1-b682-00805fc79216");
pub const IID_IEventObjectCollection = &IID_IEventObjectCollection_Value;
pub const IEventObjectCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventObjectCollection,
            pp_unk_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventObjectCollection,
            object_i_d: ?BSTR,
            p_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventObjectCollection,
            pp_enum: ?*?*IEnumEventObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventObjectCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IEventObjectCollection,
            item: ?*VARIANT,
            object_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IEventObjectCollection,
            object_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IEventObjectCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IEventObjectCollection, @ptrCast(self)), pp_unk_enum_);
            }
            pub inline fn getItem(self: *const T, object_i_d_: ?BSTR, p_item_: ?*VARIANT) HRESULT {
                return @as(*const IEventObjectCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IEventObjectCollection, @ptrCast(self)), object_i_d_, p_item_);
            }
            pub inline fn getNewEnum1(self: *const T, pp_enum_: ?*?*IEnumEventObject) HRESULT {
                return @as(*const IEventObjectCollection.VTable, @ptrCast(self.vtable)).get_NewEnum(@as(*const IEventObjectCollection, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const IEventObjectCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IEventObjectCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn add(self: *const T, item_: ?*VARIANT, object_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventObjectCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IEventObjectCollection, @ptrCast(self)), item_, object_i_d_);
            }
            pub inline fn remove(self: *const T, object_i_d_: ?BSTR) HRESULT {
                return @as(*const IEventObjectCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IEventObjectCollection, @ptrCast(self)), object_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventProperty_Value = Guid.initString("da538ee2-f4de-11d1-b6bb-00805fc79216");
pub const IID_IEventProperty = &IID_IEventProperty_Value;
pub const IEventProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventProperty,
            property_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventProperty,
            property_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventProperty,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventProperty,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, property_name_: ?*?BSTR) HRESULT {
                return @as(*const IEventProperty.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IEventProperty, @ptrCast(self)), property_name_);
            }
            pub inline fn putName(self: *const T, property_name_: ?BSTR) HRESULT {
                return @as(*const IEventProperty.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IEventProperty, @ptrCast(self)), property_name_);
            }
            pub inline fn getValue(self: *const T, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IEventProperty.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IEventProperty, @ptrCast(self)), property_value_);
            }
            pub inline fn putValue(self: *const T, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IEventProperty.VTable, @ptrCast(self.vtable)).put_Value(@as(*const IEventProperty, @ptrCast(self)), property_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEventControl_Value = Guid.initString("0343e2f4-86f6-11d1-b760-00c04fb926af");
pub const IID_IEventControl = &IID_IEventControl_Value;
pub const IEventControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetPublisherFilter: *const fn (
            self: *const IEventControl,
            method_name: ?BSTR,
            p_publisher_filter: ?*IPublisherFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInprocActivation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventControl,
            pf_allow_inproc_activation: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInprocActivation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventControl,
            f_allow_inproc_activation: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscriptions: *const fn (
            self: *const IEventControl,
            method_name: ?BSTR,
            optional_criteria: ?BSTR,
            optional_error_index: ?*i32,
            pp_collection: ?*?*IEventObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultQuery: *const fn (
            self: *const IEventControl,
            method_name: ?BSTR,
            criteria: ?BSTR,
            error_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn setPublisherFilter(self: *const T, method_name_: ?BSTR, p_publisher_filter_: ?*IPublisherFilter) HRESULT {
                return @as(*const IEventControl.VTable, @ptrCast(self.vtable)).SetPublisherFilter(@as(*const IEventControl, @ptrCast(self)), method_name_, p_publisher_filter_);
            }
            pub inline fn getAllowInprocActivation(self: *const T, pf_allow_inproc_activation_: ?*BOOL) HRESULT {
                return @as(*const IEventControl.VTable, @ptrCast(self.vtable)).get_AllowInprocActivation(@as(*const IEventControl, @ptrCast(self)), pf_allow_inproc_activation_);
            }
            pub inline fn putAllowInprocActivation(self: *const T, f_allow_inproc_activation_: BOOL) HRESULT {
                return @as(*const IEventControl.VTable, @ptrCast(self.vtable)).put_AllowInprocActivation(@as(*const IEventControl, @ptrCast(self)), f_allow_inproc_activation_);
            }
            pub inline fn getSubscriptions(self: *const T, method_name_: ?BSTR, optional_criteria_: ?BSTR, optional_error_index_: ?*i32, pp_collection_: ?*?*IEventObjectCollection) HRESULT {
                return @as(*const IEventControl.VTable, @ptrCast(self.vtable)).GetSubscriptions(@as(*const IEventControl, @ptrCast(self)), method_name_, optional_criteria_, optional_error_index_, pp_collection_);
            }
            pub inline fn setDefaultQuery(self: *const T, method_name_: ?BSTR, criteria_: ?BSTR, error_index_: ?*i32) HRESULT {
                return @as(*const IEventControl.VTable, @ptrCast(self.vtable)).SetDefaultQuery(@as(*const IEventControl, @ptrCast(self)), method_name_, criteria_, error_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IMultiInterfaceEventControl_Value = Guid.initString("0343e2f5-86f6-11d1-b760-00c04fb926af");
pub const IID_IMultiInterfaceEventControl = &IID_IMultiInterfaceEventControl_Value;
pub const IMultiInterfaceEventControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMultiInterfacePublisherFilter: *const fn (
            self: *const IMultiInterfaceEventControl,
            class_filter: ?*IMultiInterfacePublisherFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscriptions: *const fn (
            self: *const IMultiInterfaceEventControl,
            event_i_i_d: ?*const Guid,
            bstr_method_name: ?BSTR,
            optional_criteria: ?BSTR,
            optional_error_index: ?*i32,
            pp_collection: ?*?*IEventObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultQuery: *const fn (
            self: *const IMultiInterfaceEventControl,
            event_i_i_d: ?*const Guid,
            bstr_method_name: ?BSTR,
            bstr_criteria: ?BSTR,
            error_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInprocActivation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMultiInterfaceEventControl,
            pf_allow_inproc_activation: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInprocActivation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMultiInterfaceEventControl,
            f_allow_inproc_activation: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FireInParallel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMultiInterfaceEventControl,
            pf_fire_in_parallel: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FireInParallel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMultiInterfaceEventControl,
            f_fire_in_parallel: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setMultiInterfacePublisherFilter(self: *const T, class_filter_: ?*IMultiInterfacePublisherFilter) HRESULT {
                return @as(*const IMultiInterfaceEventControl.VTable, @ptrCast(self.vtable)).SetMultiInterfacePublisherFilter(@as(*const IMultiInterfaceEventControl, @ptrCast(self)), class_filter_);
            }
            pub inline fn getSubscriptions(self: *const T, event_i_i_d_: ?*const Guid, bstr_method_name_: ?BSTR, optional_criteria_: ?BSTR, optional_error_index_: ?*i32, pp_collection_: ?*?*IEventObjectCollection) HRESULT {
                return @as(*const IMultiInterfaceEventControl.VTable, @ptrCast(self.vtable)).GetSubscriptions(@as(*const IMultiInterfaceEventControl, @ptrCast(self)), event_i_i_d_, bstr_method_name_, optional_criteria_, optional_error_index_, pp_collection_);
            }
            pub inline fn setDefaultQuery(self: *const T, event_i_i_d_: ?*const Guid, bstr_method_name_: ?BSTR, bstr_criteria_: ?BSTR, error_index_: ?*i32) HRESULT {
                return @as(*const IMultiInterfaceEventControl.VTable, @ptrCast(self.vtable)).SetDefaultQuery(@as(*const IMultiInterfaceEventControl, @ptrCast(self)), event_i_i_d_, bstr_method_name_, bstr_criteria_, error_index_);
            }
            pub inline fn getAllowInprocActivation(self: *const T, pf_allow_inproc_activation_: ?*BOOL) HRESULT {
                return @as(*const IMultiInterfaceEventControl.VTable, @ptrCast(self.vtable)).get_AllowInprocActivation(@as(*const IMultiInterfaceEventControl, @ptrCast(self)), pf_allow_inproc_activation_);
            }
            pub inline fn putAllowInprocActivation(self: *const T, f_allow_inproc_activation_: BOOL) HRESULT {
                return @as(*const IMultiInterfaceEventControl.VTable, @ptrCast(self.vtable)).put_AllowInprocActivation(@as(*const IMultiInterfaceEventControl, @ptrCast(self)), f_allow_inproc_activation_);
            }
            pub inline fn getFireInParallel(self: *const T, pf_fire_in_parallel_: ?*BOOL) HRESULT {
                return @as(*const IMultiInterfaceEventControl.VTable, @ptrCast(self.vtable)).get_FireInParallel(@as(*const IMultiInterfaceEventControl, @ptrCast(self)), pf_fire_in_parallel_);
            }
            pub inline fn putFireInParallel(self: *const T, f_fire_in_parallel_: BOOL) HRESULT {
                return @as(*const IMultiInterfaceEventControl.VTable, @ptrCast(self.vtable)).put_FireInParallel(@as(*const IMultiInterfaceEventControl, @ptrCast(self)), f_fire_in_parallel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDontSupportEventSubscription_Value = Guid.initString("784121f1-62a6-4b89-855f-d65f296de83a");
pub const IID_IDontSupportEventSubscription = &IID_IDontSupportEventSubscription_Value;
pub const IDontSupportEventSubscription = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IDispatch = @import("../../system/com.zig").IDispatch;
const IUnknown = @import("../../system/com.zig").IUnknown;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
