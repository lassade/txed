//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (69)
//--------------------------------------------------------------------------------
pub const DTCINSTALL_E_CLIENT_ALREADY_INSTALLED = @as(i32, 384);
pub const DTCINSTALL_E_SERVER_ALREADY_INSTALLED = @as(i32, 385);
pub const XA_SWITCH_F_DTC = @as(u32, 1);
pub const XA_FMTID_DTC = @as(u32, 4478019);
pub const XA_FMTID_DTC_VER1 = @as(u32, 21255235);
pub const XIDDATASIZE = @as(u32, 128);
pub const MAXGTRIDSIZE = @as(u32, 64);
pub const MAXBQUALSIZE = @as(u32, 64);
pub const RMNAMESZ = @as(u32, 32);
pub const MAXINFOSIZE = @as(u32, 256);
pub const TMNOFLAGS = @as(i32, 0);
pub const TMREGISTER = @as(i32, 1);
pub const TMNOMIGRATE = @as(i32, 2);
pub const TMUSEASYNC = @as(i32, 4);
pub const TMASYNC = @as(i32, -2147483648);
pub const TMONEPHASE = @as(i32, 1073741824);
pub const TMFAIL = @as(i32, 536870912);
pub const TMNOWAIT = @as(i32, 268435456);
pub const TMRESUME = @as(i32, 134217728);
pub const TMSUCCESS = @as(i32, 67108864);
pub const TMSUSPEND = @as(i32, 33554432);
pub const TMSTARTRSCAN = @as(i32, 16777216);
pub const TMENDRSCAN = @as(i32, 8388608);
pub const TMMULTIPLE = @as(i32, 4194304);
pub const TMJOIN = @as(i32, 2097152);
pub const TMMIGRATE = @as(i32, 1048576);
pub const TM_JOIN = @as(u32, 2);
pub const TM_RESUME = @as(u32, 1);
pub const TM_OK = @as(u32, 0);
pub const TMER_TMERR = @as(i32, -1);
pub const TMER_INVAL = @as(i32, -2);
pub const TMER_PROTO = @as(i32, -3);
pub const XA_RBBASE = @as(u32, 100);
pub const XA_RBROLLBACK = @as(u32, 100);
pub const XA_RBCOMMFAIL = @as(u32, 101);
pub const XA_RBDEADLOCK = @as(u32, 102);
pub const XA_RBINTEGRITY = @as(u32, 103);
pub const XA_RBOTHER = @as(u32, 104);
pub const XA_RBPROTO = @as(u32, 105);
pub const XA_RBTIMEOUT = @as(u32, 106);
pub const XA_RBTRANSIENT = @as(u32, 107);
pub const XA_RBEND = @as(u32, 107);
pub const XA_NOMIGRATE = @as(u32, 9);
pub const XA_HEURHAZ = @as(u32, 8);
pub const XA_HEURCOM = @as(u32, 7);
pub const XA_HEURRB = @as(u32, 6);
pub const XA_HEURMIX = @as(u32, 5);
pub const XA_RETRY = @as(u32, 4);
pub const XA_RDONLY = @as(u32, 3);
pub const XA_OK = @as(u32, 0);
pub const XAER_ASYNC = @as(i32, -2);
pub const XAER_RMERR = @as(i32, -3);
pub const XAER_NOTA = @as(i32, -4);
pub const XAER_INVAL = @as(i32, -5);
pub const XAER_PROTO = @as(i32, -6);
pub const XAER_RMFAIL = @as(i32, -7);
pub const XAER_DUPID = @as(i32, -8);
pub const XAER_OUTSIDE = @as(i32, -9);
pub const DTC_INSTALL_OVERWRITE_CLIENT = @as(u32, 1);
pub const DTC_INSTALL_OVERWRITE_SERVER = @as(u32, 2);
pub const OLE_TM_CONFIG_VERSION_1 = @as(u32, 1);
pub const OLE_TM_CONFIG_VERSION_2 = @as(u32, 2);
pub const OLE_TM_FLAG_NONE = @as(u32, 0);
pub const OLE_TM_FLAG_NODEMANDSTART = @as(u32, 1);
pub const OLE_TM_FLAG_NOAGILERECOVERY = @as(u32, 2);
pub const OLE_TM_FLAG_QUERY_SERVICE_LOCKSTATUS = @as(u32, 2147483648);
pub const OLE_TM_FLAG_INTERNAL_TO_TM = @as(u32, 1073741824);
pub const CLSID_MSDtcTransactionManager = Guid.initString("5b18ab61-091d-11d1-97df-00c04fb9618a");
pub const CLSID_MSDtcTransaction = Guid.initString("39f8d76b-0928-11d1-97df-00c04fb9618a");

//--------------------------------------------------------------------------------
// Section: Types (110)
//--------------------------------------------------------------------------------
pub const DTC_STATUS_ = enum(i32) {
    UNKNOWN = 0,
    STARTING = 1,
    STARTED = 2,
    PAUSING = 3,
    PAUSED = 4,
    CONTINUING = 5,
    STOPPING = 6,
    STOPPED = 7,
    E_CANTCONTROL = 8,
    FAILED = 9,
};
pub const DTC_STATUS_UNKNOWN = DTC_STATUS_.UNKNOWN;
pub const DTC_STATUS_STARTING = DTC_STATUS_.STARTING;
pub const DTC_STATUS_STARTED = DTC_STATUS_.STARTED;
pub const DTC_STATUS_PAUSING = DTC_STATUS_.PAUSING;
pub const DTC_STATUS_PAUSED = DTC_STATUS_.PAUSED;
pub const DTC_STATUS_CONTINUING = DTC_STATUS_.CONTINUING;
pub const DTC_STATUS_STOPPING = DTC_STATUS_.STOPPING;
pub const DTC_STATUS_STOPPED = DTC_STATUS_.STOPPED;
pub const DTC_STATUS_E_CANTCONTROL = DTC_STATUS_.E_CANTCONTROL;
pub const DTC_STATUS_FAILED = DTC_STATUS_.FAILED;

pub const DTC_GET_TRANSACTION_MANAGER = *const fn (
    psz_host: ?PSTR,
    psz_tm_name: ?PSTR,
    rid: ?*const Guid,
    dw_reserved1: u32,
    wcb_reserved2: u16,
    pv_reserved2: ?*anyopaque,
    ppv_object: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DTC_GET_TRANSACTION_MANAGER_EX_A = *const fn (
    i_psz_host: ?PSTR,
    i_psz_tm_name: ?PSTR,
    i_riid: ?*const Guid,
    i_grf_options: u32,
    i_pv_config_params: ?*anyopaque,
    o_ppv_object: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DTC_GET_TRANSACTION_MANAGER_EX_W = *const fn (
    i_pwsz_host: ?PWSTR,
    i_pwsz_tm_name: ?PWSTR,
    i_riid: ?*const Guid,
    i_grf_options: u32,
    i_pv_config_params: ?*anyopaque,
    o_ppv_object: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DTC_INSTALL_CLIENT = *const fn (
    i_psz_remote_tm_host_name: ?*i8,
    i_dw_protocol: u32,
    i_dw_overwrite: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const BOID = extern struct {
    rgb: [16]u8,
};

pub const TX_MISC_CONSTANTS = enum(i32) {
    C = 40,
};
pub const MAX_TRAN_DESC = TX_MISC_CONSTANTS.C;

pub const ISOLATIONLEVEL = enum(i32) {
    UNSPECIFIED = -1,
    CHAOS = 16,
    READUNCOMMITTED = 256,
    // BROWSE = 256, this enum value conflicts with READUNCOMMITTED
    CURSORSTABILITY = 4096,
    // READCOMMITTED = 4096, this enum value conflicts with CURSORSTABILITY
    REPEATABLEREAD = 65536,
    SERIALIZABLE = 1048576,
    // ISOLATED = 1048576, this enum value conflicts with SERIALIZABLE
};
pub const ISOLATIONLEVEL_UNSPECIFIED = ISOLATIONLEVEL.UNSPECIFIED;
pub const ISOLATIONLEVEL_CHAOS = ISOLATIONLEVEL.CHAOS;
pub const ISOLATIONLEVEL_READUNCOMMITTED = ISOLATIONLEVEL.READUNCOMMITTED;
pub const ISOLATIONLEVEL_BROWSE = ISOLATIONLEVEL.READUNCOMMITTED;
pub const ISOLATIONLEVEL_CURSORSTABILITY = ISOLATIONLEVEL.CURSORSTABILITY;
pub const ISOLATIONLEVEL_READCOMMITTED = ISOLATIONLEVEL.CURSORSTABILITY;
pub const ISOLATIONLEVEL_REPEATABLEREAD = ISOLATIONLEVEL.REPEATABLEREAD;
pub const ISOLATIONLEVEL_SERIALIZABLE = ISOLATIONLEVEL.SERIALIZABLE;
pub const ISOLATIONLEVEL_ISOLATED = ISOLATIONLEVEL.SERIALIZABLE;

pub const XACTTRANSINFO = extern struct {
    uow: BOID,
    isoLevel: i32,
    isoFlags: u32,
    grfTCSupported: u32,
    grfRMSupported: u32,
    grfTCSupportedRetaining: u32,
    grfRMSupportedRetaining: u32,
};

pub const XACTSTATS = extern struct {
    cOpen: u32,
    cCommitting: u32,
    cCommitted: u32,
    cAborting: u32,
    cAborted: u32,
    cInDoubt: u32,
    cHeuristicDecision: u32,
    timeTransactionsUp: FILETIME,
};

pub const ISOFLAG = enum(i32) {
    RETAIN_COMMIT_DC = 1,
    RETAIN_COMMIT = 2,
    RETAIN_COMMIT_NO = 3,
    RETAIN_ABORT_DC = 4,
    RETAIN_ABORT = 8,
    RETAIN_ABORT_NO = 12,
    RETAIN_DONTCARE = 5,
    RETAIN_BOTH = 10,
    RETAIN_NONE = 15,
    OPTIMISTIC = 16,
    READONLY = 32,
};
pub const ISOFLAG_RETAIN_COMMIT_DC = ISOFLAG.RETAIN_COMMIT_DC;
pub const ISOFLAG_RETAIN_COMMIT = ISOFLAG.RETAIN_COMMIT;
pub const ISOFLAG_RETAIN_COMMIT_NO = ISOFLAG.RETAIN_COMMIT_NO;
pub const ISOFLAG_RETAIN_ABORT_DC = ISOFLAG.RETAIN_ABORT_DC;
pub const ISOFLAG_RETAIN_ABORT = ISOFLAG.RETAIN_ABORT;
pub const ISOFLAG_RETAIN_ABORT_NO = ISOFLAG.RETAIN_ABORT_NO;
pub const ISOFLAG_RETAIN_DONTCARE = ISOFLAG.RETAIN_DONTCARE;
pub const ISOFLAG_RETAIN_BOTH = ISOFLAG.RETAIN_BOTH;
pub const ISOFLAG_RETAIN_NONE = ISOFLAG.RETAIN_NONE;
pub const ISOFLAG_OPTIMISTIC = ISOFLAG.OPTIMISTIC;
pub const ISOFLAG_READONLY = ISOFLAG.READONLY;

pub const XACTTC = enum(i32) {
    NONE = 0,
    SYNC_PHASEONE = 1,
    SYNC_PHASETWO = 2,
    // SYNC = 2, this enum value conflicts with SYNC_PHASETWO
    ASYNC_PHASEONE = 4,
    // ASYNC = 4, this enum value conflicts with ASYNC_PHASEONE
};
pub const XACTTC_NONE = XACTTC.NONE;
pub const XACTTC_SYNC_PHASEONE = XACTTC.SYNC_PHASEONE;
pub const XACTTC_SYNC_PHASETWO = XACTTC.SYNC_PHASETWO;
pub const XACTTC_SYNC = XACTTC.SYNC_PHASETWO;
pub const XACTTC_ASYNC_PHASEONE = XACTTC.ASYNC_PHASEONE;
pub const XACTTC_ASYNC = XACTTC.ASYNC_PHASEONE;

pub const XACTRM = enum(i32) {
    OPTIMISTICLASTWINS = 1,
    NOREADONLYPREPARES = 2,
};
pub const XACTRM_OPTIMISTICLASTWINS = XACTRM.OPTIMISTICLASTWINS;
pub const XACTRM_NOREADONLYPREPARES = XACTRM.NOREADONLYPREPARES;

pub const XACTCONST = enum(i32) {
    E = 0,
};
pub const XACTCONST_TIMEOUTINFINITE = XACTCONST.E;

pub const XACTHEURISTIC = enum(i32) {
    ABORT = 1,
    COMMIT = 2,
    DAMAGE = 3,
    DANGER = 4,
};
pub const XACTHEURISTIC_ABORT = XACTHEURISTIC.ABORT;
pub const XACTHEURISTIC_COMMIT = XACTHEURISTIC.COMMIT;
pub const XACTHEURISTIC_DAMAGE = XACTHEURISTIC.DAMAGE;
pub const XACTHEURISTIC_DANGER = XACTHEURISTIC.DANGER;

pub const XACTSTAT = enum(i32) {
    NONE = 0,
    OPENNORMAL = 1,
    OPENREFUSED = 2,
    PREPARING = 4,
    PREPARED = 8,
    PREPARERETAINING = 16,
    PREPARERETAINED = 32,
    COMMITTING = 64,
    COMMITRETAINING = 128,
    ABORTING = 256,
    ABORTED = 512,
    COMMITTED = 1024,
    HEURISTIC_ABORT = 2048,
    HEURISTIC_COMMIT = 4096,
    HEURISTIC_DAMAGE = 8192,
    HEURISTIC_DANGER = 16384,
    FORCED_ABORT = 32768,
    FORCED_COMMIT = 65536,
    INDOUBT = 131072,
    CLOSED = 262144,
    OPEN = 3,
    NOTPREPARED = 524227,
    ALL = 524287,
};
pub const XACTSTAT_NONE = XACTSTAT.NONE;
pub const XACTSTAT_OPENNORMAL = XACTSTAT.OPENNORMAL;
pub const XACTSTAT_OPENREFUSED = XACTSTAT.OPENREFUSED;
pub const XACTSTAT_PREPARING = XACTSTAT.PREPARING;
pub const XACTSTAT_PREPARED = XACTSTAT.PREPARED;
pub const XACTSTAT_PREPARERETAINING = XACTSTAT.PREPARERETAINING;
pub const XACTSTAT_PREPARERETAINED = XACTSTAT.PREPARERETAINED;
pub const XACTSTAT_COMMITTING = XACTSTAT.COMMITTING;
pub const XACTSTAT_COMMITRETAINING = XACTSTAT.COMMITRETAINING;
pub const XACTSTAT_ABORTING = XACTSTAT.ABORTING;
pub const XACTSTAT_ABORTED = XACTSTAT.ABORTED;
pub const XACTSTAT_COMMITTED = XACTSTAT.COMMITTED;
pub const XACTSTAT_HEURISTIC_ABORT = XACTSTAT.HEURISTIC_ABORT;
pub const XACTSTAT_HEURISTIC_COMMIT = XACTSTAT.HEURISTIC_COMMIT;
pub const XACTSTAT_HEURISTIC_DAMAGE = XACTSTAT.HEURISTIC_DAMAGE;
pub const XACTSTAT_HEURISTIC_DANGER = XACTSTAT.HEURISTIC_DANGER;
pub const XACTSTAT_FORCED_ABORT = XACTSTAT.FORCED_ABORT;
pub const XACTSTAT_FORCED_COMMIT = XACTSTAT.FORCED_COMMIT;
pub const XACTSTAT_INDOUBT = XACTSTAT.INDOUBT;
pub const XACTSTAT_CLOSED = XACTSTAT.CLOSED;
pub const XACTSTAT_OPEN = XACTSTAT.OPEN;
pub const XACTSTAT_NOTPREPARED = XACTSTAT.NOTPREPARED;
pub const XACTSTAT_ALL = XACTSTAT.ALL;

pub const XACTOPT = extern struct {
    ulTimeout: u32,
    szDescription: [40]u8,
};

const IID_ITransaction_Value = Guid.initString("0fb15084-af41-11ce-bd2b-204c4f4f5020");
pub const IID_ITransaction = &IID_ITransaction_Value;
pub const ITransaction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: *const fn (
            self: *const ITransaction,
            f_retaining: BOOL,
            grf_t_c: u32,
            grf_r_m: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const ITransaction,
            pboid_reason: ?*BOID,
            f_retaining: BOOL,
            f_async: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionInfo: *const fn (
            self: *const ITransaction,
            pinfo: ?*XACTTRANSINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn commit(self: *const T, f_retaining_: BOOL, grf_t_c_: u32, grf_r_m_: u32) HRESULT {
                return @as(*const ITransaction.VTable, @ptrCast(self.vtable)).Commit(@as(*const ITransaction, @ptrCast(self)), f_retaining_, grf_t_c_, grf_r_m_);
            }
            pub inline fn abort(self: *const T, pboid_reason_: ?*BOID, f_retaining_: BOOL, f_async_: BOOL) HRESULT {
                return @as(*const ITransaction.VTable, @ptrCast(self.vtable)).Abort(@as(*const ITransaction, @ptrCast(self)), pboid_reason_, f_retaining_, f_async_);
            }
            pub inline fn getTransactionInfo(self: *const T, pinfo_: ?*XACTTRANSINFO) HRESULT {
                return @as(*const ITransaction.VTable, @ptrCast(self.vtable)).GetTransactionInfo(@as(*const ITransaction, @ptrCast(self)), pinfo_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionCloner_Value = Guid.initString("02656950-2152-11d0-944c-00a0c905416e");
pub const IID_ITransactionCloner = &IID_ITransactionCloner_Value;
pub const ITransactionCloner = extern struct {
    pub const VTable = extern struct {
        base: ITransaction.VTable,
        CloneWithCommitDisabled: *const fn (
            self: *const ITransactionCloner,
            pp_i_transaction: ?*?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITransaction.MethodMixin(T);
            pub inline fn cloneWithCommitDisabled(self: *const T, pp_i_transaction_: ?*?*ITransaction) HRESULT {
                return @as(*const ITransactionCloner.VTable, @ptrCast(self.vtable)).CloneWithCommitDisabled(@as(*const ITransactionCloner, @ptrCast(self)), pp_i_transaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransaction2_Value = Guid.initString("34021548-0065-11d3-bac1-00c04f797be2");
pub const IID_ITransaction2 = &IID_ITransaction2_Value;
pub const ITransaction2 = extern struct {
    pub const VTable = extern struct {
        base: ITransactionCloner.VTable,
        GetTransactionInfo2: *const fn (
            self: *const ITransaction2,
            pinfo: ?*XACTTRANSINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITransactionCloner.MethodMixin(T);
            pub inline fn getTransactionInfo2(self: *const T, pinfo_: ?*XACTTRANSINFO) HRESULT {
                return @as(*const ITransaction2.VTable, @ptrCast(self.vtable)).GetTransactionInfo2(@as(*const ITransaction2, @ptrCast(self)), pinfo_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionDispenser_Value = Guid.initString("3a6ad9e1-23b9-11cf-ad60-00aa00a74ccd");
pub const IID_ITransactionDispenser = &IID_ITransactionDispenser_Value;
pub const ITransactionDispenser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOptionsObject: *const fn (
            self: *const ITransactionDispenser,
            pp_options: ?*?*ITransactionOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginTransaction: *const fn (
            self: *const ITransactionDispenser,
            punk_outer: ?*IUnknown,
            iso_level: i32,
            iso_flags: u32,
            p_options: ?*ITransactionOptions,
            pp_transaction: ?*?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOptionsObject(self: *const T, pp_options_: ?*?*ITransactionOptions) HRESULT {
                return @as(*const ITransactionDispenser.VTable, @ptrCast(self.vtable)).GetOptionsObject(@as(*const ITransactionDispenser, @ptrCast(self)), pp_options_);
            }
            pub inline fn beginTransaction(self: *const T, punk_outer_: ?*IUnknown, iso_level_: i32, iso_flags_: u32, p_options_: ?*ITransactionOptions, pp_transaction_: ?*?*ITransaction) HRESULT {
                return @as(*const ITransactionDispenser.VTable, @ptrCast(self.vtable)).BeginTransaction(@as(*const ITransactionDispenser, @ptrCast(self)), punk_outer_, iso_level_, iso_flags_, p_options_, pp_transaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionOptions_Value = Guid.initString("3a6ad9e0-23b9-11cf-ad60-00aa00a74ccd");
pub const IID_ITransactionOptions = &IID_ITransactionOptions_Value;
pub const ITransactionOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOptions: *const fn (
            self: *const ITransactionOptions,
            p_options: ?*XACTOPT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn (
            self: *const ITransactionOptions,
            p_options: ?*XACTOPT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setOptions(self: *const T, p_options_: ?*XACTOPT) HRESULT {
                return @as(*const ITransactionOptions.VTable, @ptrCast(self.vtable)).SetOptions(@as(*const ITransactionOptions, @ptrCast(self)), p_options_);
            }
            pub inline fn getOptions(self: *const T, p_options_: ?*XACTOPT) HRESULT {
                return @as(*const ITransactionOptions.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const ITransactionOptions, @ptrCast(self)), p_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionOutcomeEvents_Value = Guid.initString("3a6ad9e2-23b9-11cf-ad60-00aa00a74ccd");
pub const IID_ITransactionOutcomeEvents = &IID_ITransactionOutcomeEvents_Value;
pub const ITransactionOutcomeEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Committed: *const fn (
            self: *const ITransactionOutcomeEvents,
            f_retaining: BOOL,
            p_new_u_o_w: ?*BOID,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Aborted: *const fn (
            self: *const ITransactionOutcomeEvents,
            pboid_reason: ?*BOID,
            f_retaining: BOOL,
            p_new_u_o_w: ?*BOID,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HeuristicDecision: *const fn (
            self: *const ITransactionOutcomeEvents,
            dw_decision: u32,
            pboid_reason: ?*BOID,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Indoubt: *const fn (
            self: *const ITransactionOutcomeEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn committed(self: *const T, f_retaining_: BOOL, p_new_u_o_w_: ?*BOID, hr_: HRESULT) HRESULT {
                return @as(*const ITransactionOutcomeEvents.VTable, @ptrCast(self.vtable)).Committed(@as(*const ITransactionOutcomeEvents, @ptrCast(self)), f_retaining_, p_new_u_o_w_, hr_);
            }
            pub inline fn aborted(self: *const T, pboid_reason_: ?*BOID, f_retaining_: BOOL, p_new_u_o_w_: ?*BOID, hr_: HRESULT) HRESULT {
                return @as(*const ITransactionOutcomeEvents.VTable, @ptrCast(self.vtable)).Aborted(@as(*const ITransactionOutcomeEvents, @ptrCast(self)), pboid_reason_, f_retaining_, p_new_u_o_w_, hr_);
            }
            pub inline fn heuristicDecision(self: *const T, dw_decision_: u32, pboid_reason_: ?*BOID, hr_: HRESULT) HRESULT {
                return @as(*const ITransactionOutcomeEvents.VTable, @ptrCast(self.vtable)).HeuristicDecision(@as(*const ITransactionOutcomeEvents, @ptrCast(self)), dw_decision_, pboid_reason_, hr_);
            }
            pub inline fn indoubt(self: *const T) HRESULT {
                return @as(*const ITransactionOutcomeEvents.VTable, @ptrCast(self.vtable)).Indoubt(@as(*const ITransactionOutcomeEvents, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITmNodeName_Value = Guid.initString("30274f88-6ee4-474e-9b95-7807bc9ef8cf");
pub const IID_ITmNodeName = &IID_ITmNodeName_Value;
pub const ITmNodeName = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNodeNameSize: *const fn (
            self: *const ITmNodeName,
            pcb_node_name_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNodeName: *const fn (
            self: *const ITmNodeName,
            cb_node_name_buffer_size: u32,
            p_node_name_buffer: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNodeNameSize(self: *const T, pcb_node_name_size_: ?*u32) HRESULT {
                return @as(*const ITmNodeName.VTable, @ptrCast(self.vtable)).GetNodeNameSize(@as(*const ITmNodeName, @ptrCast(self)), pcb_node_name_size_);
            }
            pub inline fn getNodeName(self: *const T, cb_node_name_buffer_size_: u32, p_node_name_buffer_: ?PWSTR) HRESULT {
                return @as(*const ITmNodeName.VTable, @ptrCast(self.vtable)).GetNodeName(@as(*const ITmNodeName, @ptrCast(self)), cb_node_name_buffer_size_, p_node_name_buffer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IKernelTransaction_Value = Guid.initString("79427a2b-f895-40e0-be79-b57dc82ed231");
pub const IID_IKernelTransaction = &IID_IKernelTransaction_Value;
pub const IKernelTransaction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHandle: *const fn (
            self: *const IKernelTransaction,
            p_handle: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getHandle(self: *const T, p_handle_: ?*?HANDLE) HRESULT {
                return @as(*const IKernelTransaction.VTable, @ptrCast(self.vtable)).GetHandle(@as(*const IKernelTransaction, @ptrCast(self)), p_handle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionResourceAsync_Value = Guid.initString("69e971f0-23ce-11cf-ad60-00aa00a74ccd");
pub const IID_ITransactionResourceAsync = &IID_ITransactionResourceAsync_Value;
pub const ITransactionResourceAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PrepareRequest: *const fn (
            self: *const ITransactionResourceAsync,
            f_retaining: BOOL,
            grf_r_m: u32,
            f_want_moniker: BOOL,
            f_single_phase: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRequest: *const fn (
            self: *const ITransactionResourceAsync,
            grf_r_m: u32,
            p_new_u_o_w: ?*BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRequest: *const fn (
            self: *const ITransactionResourceAsync,
            pboid_reason: ?*BOID,
            f_retaining: BOOL,
            p_new_u_o_w: ?*BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TMDown: *const fn (
            self: *const ITransactionResourceAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn prepareRequest(self: *const T, f_retaining_: BOOL, grf_r_m_: u32, f_want_moniker_: BOOL, f_single_phase_: BOOL) HRESULT {
                return @as(*const ITransactionResourceAsync.VTable, @ptrCast(self.vtable)).PrepareRequest(@as(*const ITransactionResourceAsync, @ptrCast(self)), f_retaining_, grf_r_m_, f_want_moniker_, f_single_phase_);
            }
            pub inline fn commitRequest(self: *const T, grf_r_m_: u32, p_new_u_o_w_: ?*BOID) HRESULT {
                return @as(*const ITransactionResourceAsync.VTable, @ptrCast(self.vtable)).CommitRequest(@as(*const ITransactionResourceAsync, @ptrCast(self)), grf_r_m_, p_new_u_o_w_);
            }
            pub inline fn abortRequest(self: *const T, pboid_reason_: ?*BOID, f_retaining_: BOOL, p_new_u_o_w_: ?*BOID) HRESULT {
                return @as(*const ITransactionResourceAsync.VTable, @ptrCast(self.vtable)).AbortRequest(@as(*const ITransactionResourceAsync, @ptrCast(self)), pboid_reason_, f_retaining_, p_new_u_o_w_);
            }
            pub inline fn tmDown(self: *const T) HRESULT {
                return @as(*const ITransactionResourceAsync.VTable, @ptrCast(self.vtable)).TMDown(@as(*const ITransactionResourceAsync, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionLastResourceAsync_Value = Guid.initString("c82bd532-5b30-11d3-8a91-00c04f79eb6d");
pub const IID_ITransactionLastResourceAsync = &IID_ITransactionLastResourceAsync_Value;
pub const ITransactionLastResourceAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DelegateCommit: *const fn (
            self: *const ITransactionLastResourceAsync,
            grf_r_m: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ForgetRequest: *const fn (
            self: *const ITransactionLastResourceAsync,
            p_new_u_o_w: ?*BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn delegateCommit(self: *const T, grf_r_m_: u32) HRESULT {
                return @as(*const ITransactionLastResourceAsync.VTable, @ptrCast(self.vtable)).DelegateCommit(@as(*const ITransactionLastResourceAsync, @ptrCast(self)), grf_r_m_);
            }
            pub inline fn forgetRequest(self: *const T, p_new_u_o_w_: ?*BOID) HRESULT {
                return @as(*const ITransactionLastResourceAsync.VTable, @ptrCast(self.vtable)).ForgetRequest(@as(*const ITransactionLastResourceAsync, @ptrCast(self)), p_new_u_o_w_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionResource_Value = Guid.initString("ee5ff7b3-4572-11d0-9452-00a0c905416e");
pub const IID_ITransactionResource = &IID_ITransactionResource_Value;
pub const ITransactionResource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PrepareRequest: *const fn (
            self: *const ITransactionResource,
            f_retaining: BOOL,
            grf_r_m: u32,
            f_want_moniker: BOOL,
            f_single_phase: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRequest: *const fn (
            self: *const ITransactionResource,
            grf_r_m: u32,
            p_new_u_o_w: ?*BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRequest: *const fn (
            self: *const ITransactionResource,
            pboid_reason: ?*BOID,
            f_retaining: BOOL,
            p_new_u_o_w: ?*BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TMDown: *const fn (
            self: *const ITransactionResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn prepareRequest(self: *const T, f_retaining_: BOOL, grf_r_m_: u32, f_want_moniker_: BOOL, f_single_phase_: BOOL) HRESULT {
                return @as(*const ITransactionResource.VTable, @ptrCast(self.vtable)).PrepareRequest(@as(*const ITransactionResource, @ptrCast(self)), f_retaining_, grf_r_m_, f_want_moniker_, f_single_phase_);
            }
            pub inline fn commitRequest(self: *const T, grf_r_m_: u32, p_new_u_o_w_: ?*BOID) HRESULT {
                return @as(*const ITransactionResource.VTable, @ptrCast(self.vtable)).CommitRequest(@as(*const ITransactionResource, @ptrCast(self)), grf_r_m_, p_new_u_o_w_);
            }
            pub inline fn abortRequest(self: *const T, pboid_reason_: ?*BOID, f_retaining_: BOOL, p_new_u_o_w_: ?*BOID) HRESULT {
                return @as(*const ITransactionResource.VTable, @ptrCast(self.vtable)).AbortRequest(@as(*const ITransactionResource, @ptrCast(self)), pboid_reason_, f_retaining_, p_new_u_o_w_);
            }
            pub inline fn tmDown(self: *const T) HRESULT {
                return @as(*const ITransactionResource.VTable, @ptrCast(self.vtable)).TMDown(@as(*const ITransactionResource, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionEnlistmentAsync_Value = Guid.initString("0fb15081-af41-11ce-bd2b-204c4f4f5020");
pub const IID_ITransactionEnlistmentAsync = &IID_ITransactionEnlistmentAsync_Value;
pub const ITransactionEnlistmentAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PrepareRequestDone: *const fn (
            self: *const ITransactionEnlistmentAsync,
            hr: HRESULT,
            pmk: ?*IMoniker,
            pboid_reason: ?*BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRequestDone: *const fn (
            self: *const ITransactionEnlistmentAsync,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRequestDone: *const fn (
            self: *const ITransactionEnlistmentAsync,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn prepareRequestDone(self: *const T, hr_: HRESULT, pmk_: ?*IMoniker, pboid_reason_: ?*BOID) HRESULT {
                return @as(*const ITransactionEnlistmentAsync.VTable, @ptrCast(self.vtable)).PrepareRequestDone(@as(*const ITransactionEnlistmentAsync, @ptrCast(self)), hr_, pmk_, pboid_reason_);
            }
            pub inline fn commitRequestDone(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const ITransactionEnlistmentAsync.VTable, @ptrCast(self.vtable)).CommitRequestDone(@as(*const ITransactionEnlistmentAsync, @ptrCast(self)), hr_);
            }
            pub inline fn abortRequestDone(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const ITransactionEnlistmentAsync.VTable, @ptrCast(self.vtable)).AbortRequestDone(@as(*const ITransactionEnlistmentAsync, @ptrCast(self)), hr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionLastEnlistmentAsync_Value = Guid.initString("c82bd533-5b30-11d3-8a91-00c04f79eb6d");
pub const IID_ITransactionLastEnlistmentAsync = &IID_ITransactionLastEnlistmentAsync_Value;
pub const ITransactionLastEnlistmentAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TransactionOutcome: *const fn (
            self: *const ITransactionLastEnlistmentAsync,
            xact_stat: XACTSTAT,
            pboid_reason: ?*BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn transactionOutcome(self: *const T, xact_stat_: XACTSTAT, pboid_reason_: ?*BOID) HRESULT {
                return @as(*const ITransactionLastEnlistmentAsync.VTable, @ptrCast(self.vtable)).TransactionOutcome(@as(*const ITransactionLastEnlistmentAsync, @ptrCast(self)), xact_stat_, pboid_reason_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionExportFactory_Value = Guid.initString("e1cf9b53-8745-11ce-a9ba-00aa006c3706");
pub const IID_ITransactionExportFactory = &IID_ITransactionExportFactory_Value;
pub const ITransactionExportFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRemoteClassId: *const fn (
            self: *const ITransactionExportFactory,
            pclsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const ITransactionExportFactory,
            cb_whereabouts: u32,
            rgb_whereabouts: [*:0]u8,
            pp_export: ?*?*ITransactionExport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRemoteClassId(self: *const T, pclsid_: ?*Guid) HRESULT {
                return @as(*const ITransactionExportFactory.VTable, @ptrCast(self.vtable)).GetRemoteClassId(@as(*const ITransactionExportFactory, @ptrCast(self)), pclsid_);
            }
            pub inline fn create(self: *const T, cb_whereabouts_: u32, rgb_whereabouts_: [*:0]u8, pp_export_: ?*?*ITransactionExport) HRESULT {
                return @as(*const ITransactionExportFactory.VTable, @ptrCast(self.vtable)).Create(@as(*const ITransactionExportFactory, @ptrCast(self)), cb_whereabouts_, rgb_whereabouts_, pp_export_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionImportWhereabouts_Value = Guid.initString("0141fda4-8fc0-11ce-bd18-204c4f4f5020");
pub const IID_ITransactionImportWhereabouts = &IID_ITransactionImportWhereabouts_Value;
pub const ITransactionImportWhereabouts = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWhereaboutsSize: *const fn (
            self: *const ITransactionImportWhereabouts,
            pcb_whereabouts: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWhereabouts: *const fn (
            self: *const ITransactionImportWhereabouts,
            cb_whereabouts: u32,
            rgb_whereabouts: [*:0]u8,
            pcb_used: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getWhereaboutsSize(self: *const T, pcb_whereabouts_: ?*u32) HRESULT {
                return @as(*const ITransactionImportWhereabouts.VTable, @ptrCast(self.vtable)).GetWhereaboutsSize(@as(*const ITransactionImportWhereabouts, @ptrCast(self)), pcb_whereabouts_);
            }
            pub inline fn getWhereabouts(self: *const T, cb_whereabouts_: u32, rgb_whereabouts_: [*:0]u8, pcb_used_: ?*u32) HRESULT {
                return @as(*const ITransactionImportWhereabouts.VTable, @ptrCast(self.vtable)).GetWhereabouts(@as(*const ITransactionImportWhereabouts, @ptrCast(self)), cb_whereabouts_, rgb_whereabouts_, pcb_used_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionExport_Value = Guid.initString("0141fda5-8fc0-11ce-bd18-204c4f4f5020");
pub const IID_ITransactionExport = &IID_ITransactionExport_Value;
pub const ITransactionExport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Export: *const fn (
            self: *const ITransactionExport,
            punk_transaction: ?*IUnknown,
            pcb_transaction_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionCookie: *const fn (
            self: *const ITransactionExport,
            punk_transaction: ?*IUnknown,
            cb_transaction_cookie: u32,
            rgb_transaction_cookie: [*:0]u8,
            pcb_used: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn @"export"(self: *const T, punk_transaction_: ?*IUnknown, pcb_transaction_cookie_: ?*u32) HRESULT {
                return @as(*const ITransactionExport.VTable, @ptrCast(self.vtable)).Export(@as(*const ITransactionExport, @ptrCast(self)), punk_transaction_, pcb_transaction_cookie_);
            }
            pub inline fn getTransactionCookie(self: *const T, punk_transaction_: ?*IUnknown, cb_transaction_cookie_: u32, rgb_transaction_cookie_: [*:0]u8, pcb_used_: ?*u32) HRESULT {
                return @as(*const ITransactionExport.VTable, @ptrCast(self.vtable)).GetTransactionCookie(@as(*const ITransactionExport, @ptrCast(self)), punk_transaction_, cb_transaction_cookie_, rgb_transaction_cookie_, pcb_used_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionImport_Value = Guid.initString("e1cf9b5a-8745-11ce-a9ba-00aa006c3706");
pub const IID_ITransactionImport = &IID_ITransactionImport_Value;
pub const ITransactionImport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Import: *const fn (
            self: *const ITransactionImport,
            cb_transaction_cookie: u32,
            rgb_transaction_cookie: [*:0]u8,
            piid: ?*const Guid,
            ppv_transaction: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn import(self: *const T, cb_transaction_cookie_: u32, rgb_transaction_cookie_: [*:0]u8, piid_: ?*const Guid, ppv_transaction_: ?*?*anyopaque) HRESULT {
                return @as(*const ITransactionImport.VTable, @ptrCast(self.vtable)).Import(@as(*const ITransactionImport, @ptrCast(self)), cb_transaction_cookie_, rgb_transaction_cookie_, piid_, ppv_transaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITipTransaction_Value = Guid.initString("17cf72d0-bac5-11d1-b1bf-00c04fc2f3ef");
pub const IID_ITipTransaction = &IID_ITipTransaction_Value;
pub const ITipTransaction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Push: *const fn (
            self: *const ITipTransaction,
            i_psz_remote_tm_url: ?*u8,
            o_ppsz_remote_tx_url: ?*?PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionUrl: *const fn (
            self: *const ITipTransaction,
            o_ppsz_local_tx_url: ?*?PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn push(self: *const T, i_psz_remote_tm_url_: ?*u8, o_ppsz_remote_tx_url_: ?*?PSTR) HRESULT {
                return @as(*const ITipTransaction.VTable, @ptrCast(self.vtable)).Push(@as(*const ITipTransaction, @ptrCast(self)), i_psz_remote_tm_url_, o_ppsz_remote_tx_url_);
            }
            pub inline fn getTransactionUrl(self: *const T, o_ppsz_local_tx_url_: ?*?PSTR) HRESULT {
                return @as(*const ITipTransaction.VTable, @ptrCast(self.vtable)).GetTransactionUrl(@as(*const ITipTransaction, @ptrCast(self)), o_ppsz_local_tx_url_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITipHelper_Value = Guid.initString("17cf72d1-bac5-11d1-b1bf-00c04fc2f3ef");
pub const IID_ITipHelper = &IID_ITipHelper_Value;
pub const ITipHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Pull: *const fn (
            self: *const ITipHelper,
            i_psz_tx_url: ?*u8,
            o_pp_i_transaction: ?*?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PullAsync: *const fn (
            self: *const ITipHelper,
            i_psz_tx_url: ?*u8,
            i_p_tip_pull_sink: ?*ITipPullSink,
            o_pp_i_transaction: ?*?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalTmUrl: *const fn (
            self: *const ITipHelper,
            o_ppsz_local_tm_url: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn pull(self: *const T, i_psz_tx_url_: ?*u8, o_pp_i_transaction_: ?*?*ITransaction) HRESULT {
                return @as(*const ITipHelper.VTable, @ptrCast(self.vtable)).Pull(@as(*const ITipHelper, @ptrCast(self)), i_psz_tx_url_, o_pp_i_transaction_);
            }
            pub inline fn pullAsync(self: *const T, i_psz_tx_url_: ?*u8, i_p_tip_pull_sink_: ?*ITipPullSink, o_pp_i_transaction_: ?*?*ITransaction) HRESULT {
                return @as(*const ITipHelper.VTable, @ptrCast(self.vtable)).PullAsync(@as(*const ITipHelper, @ptrCast(self)), i_psz_tx_url_, i_p_tip_pull_sink_, o_pp_i_transaction_);
            }
            pub inline fn getLocalTmUrl(self: *const T, o_ppsz_local_tm_url_: ?*?*u8) HRESULT {
                return @as(*const ITipHelper.VTable, @ptrCast(self.vtable)).GetLocalTmUrl(@as(*const ITipHelper, @ptrCast(self)), o_ppsz_local_tm_url_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITipPullSink_Value = Guid.initString("17cf72d2-bac5-11d1-b1bf-00c04fc2f3ef");
pub const IID_ITipPullSink = &IID_ITipPullSink_Value;
pub const ITipPullSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PullComplete: *const fn (
            self: *const ITipPullSink,
            i_hr_pull: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn pullComplete(self: *const T, i_hr_pull_: HRESULT) HRESULT {
                return @as(*const ITipPullSink.VTable, @ptrCast(self.vtable)).PullComplete(@as(*const ITipPullSink, @ptrCast(self)), i_hr_pull_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcNetworkAccessConfig_Value = Guid.initString("9797c15d-a428-4291-87b6-0995031a678d");
pub const IID_IDtcNetworkAccessConfig = &IID_IDtcNetworkAccessConfig_Value;
pub const IDtcNetworkAccessConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAnyNetworkAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            pb_any_network_access: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAnyNetworkAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            b_any_network_access: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkAdministrationAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            pb_network_administration_access: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkAdministrationAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            b_network_administration_access: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkTransactionAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            pb_network_transaction_access: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkTransactionAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            b_network_transaction_access: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkClientAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            pb_network_client_access: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkClientAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            b_network_client_access: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkTIPAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            pb_network_t_i_p_access: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkTIPAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            b_network_t_i_p_access: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXAAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            pb_x_a_access: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetXAAccess: *const fn (
            self: *const IDtcNetworkAccessConfig,
            b_x_a_access: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestartDtcService: *const fn (
            self: *const IDtcNetworkAccessConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAnyNetworkAccess(self: *const T, pb_any_network_access_: ?*BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).GetAnyNetworkAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), pb_any_network_access_);
            }
            pub inline fn setAnyNetworkAccess(self: *const T, b_any_network_access_: BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).SetAnyNetworkAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), b_any_network_access_);
            }
            pub inline fn getNetworkAdministrationAccess(self: *const T, pb_network_administration_access_: ?*BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).GetNetworkAdministrationAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), pb_network_administration_access_);
            }
            pub inline fn setNetworkAdministrationAccess(self: *const T, b_network_administration_access_: BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).SetNetworkAdministrationAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), b_network_administration_access_);
            }
            pub inline fn getNetworkTransactionAccess(self: *const T, pb_network_transaction_access_: ?*BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).GetNetworkTransactionAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), pb_network_transaction_access_);
            }
            pub inline fn setNetworkTransactionAccess(self: *const T, b_network_transaction_access_: BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).SetNetworkTransactionAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), b_network_transaction_access_);
            }
            pub inline fn getNetworkClientAccess(self: *const T, pb_network_client_access_: ?*BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).GetNetworkClientAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), pb_network_client_access_);
            }
            pub inline fn setNetworkClientAccess(self: *const T, b_network_client_access_: BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).SetNetworkClientAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), b_network_client_access_);
            }
            pub inline fn getNetworkTIPAccess(self: *const T, pb_network_t_i_p_access_: ?*BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).GetNetworkTIPAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), pb_network_t_i_p_access_);
            }
            pub inline fn setNetworkTIPAccess(self: *const T, b_network_t_i_p_access_: BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).SetNetworkTIPAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), b_network_t_i_p_access_);
            }
            pub inline fn getXAAccess(self: *const T, pb_x_a_access_: ?*BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).GetXAAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), pb_x_a_access_);
            }
            pub inline fn setXAAccess(self: *const T, b_x_a_access_: BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).SetXAAccess(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)), b_x_a_access_);
            }
            pub inline fn restartDtcService(self: *const T) HRESULT {
                return @as(*const IDtcNetworkAccessConfig.VTable, @ptrCast(self.vtable)).RestartDtcService(@as(*const IDtcNetworkAccessConfig, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AUTHENTICATION_LEVEL = enum(i32) {
    NO_AUTHENTICATION_REQUIRED = 0,
    INCOMING_AUTHENTICATION_REQUIRED = 1,
    MUTUAL_AUTHENTICATION_REQUIRED = 2,
};
pub const NO_AUTHENTICATION_REQUIRED = AUTHENTICATION_LEVEL.NO_AUTHENTICATION_REQUIRED;
pub const INCOMING_AUTHENTICATION_REQUIRED = AUTHENTICATION_LEVEL.INCOMING_AUTHENTICATION_REQUIRED;
pub const MUTUAL_AUTHENTICATION_REQUIRED = AUTHENTICATION_LEVEL.MUTUAL_AUTHENTICATION_REQUIRED;

const IID_IDtcNetworkAccessConfig2_Value = Guid.initString("a7aa013b-eb7d-4f42-b41c-b2dec09ae034");
pub const IID_IDtcNetworkAccessConfig2 = &IID_IDtcNetworkAccessConfig2_Value;
pub const IDtcNetworkAccessConfig2 = extern struct {
    pub const VTable = extern struct {
        base: IDtcNetworkAccessConfig.VTable,
        GetNetworkInboundAccess: *const fn (
            self: *const IDtcNetworkAccessConfig2,
            pb_inbound: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkOutboundAccess: *const fn (
            self: *const IDtcNetworkAccessConfig2,
            pb_outbound: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkInboundAccess: *const fn (
            self: *const IDtcNetworkAccessConfig2,
            b_inbound: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkOutboundAccess: *const fn (
            self: *const IDtcNetworkAccessConfig2,
            b_outbound: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthenticationLevel: *const fn (
            self: *const IDtcNetworkAccessConfig2,
            p_auth_level: ?*AUTHENTICATION_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAuthenticationLevel: *const fn (
            self: *const IDtcNetworkAccessConfig2,
            auth_level: AUTHENTICATION_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDtcNetworkAccessConfig.MethodMixin(T);
            pub inline fn getNetworkInboundAccess(self: *const T, pb_inbound_: ?*BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig2.VTable, @ptrCast(self.vtable)).GetNetworkInboundAccess(@as(*const IDtcNetworkAccessConfig2, @ptrCast(self)), pb_inbound_);
            }
            pub inline fn getNetworkOutboundAccess(self: *const T, pb_outbound_: ?*BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig2.VTable, @ptrCast(self.vtable)).GetNetworkOutboundAccess(@as(*const IDtcNetworkAccessConfig2, @ptrCast(self)), pb_outbound_);
            }
            pub inline fn setNetworkInboundAccess(self: *const T, b_inbound_: BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig2.VTable, @ptrCast(self.vtable)).SetNetworkInboundAccess(@as(*const IDtcNetworkAccessConfig2, @ptrCast(self)), b_inbound_);
            }
            pub inline fn setNetworkOutboundAccess(self: *const T, b_outbound_: BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig2.VTable, @ptrCast(self.vtable)).SetNetworkOutboundAccess(@as(*const IDtcNetworkAccessConfig2, @ptrCast(self)), b_outbound_);
            }
            pub inline fn getAuthenticationLevel(self: *const T, p_auth_level_: ?*AUTHENTICATION_LEVEL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig2.VTable, @ptrCast(self.vtable)).GetAuthenticationLevel(@as(*const IDtcNetworkAccessConfig2, @ptrCast(self)), p_auth_level_);
            }
            pub inline fn setAuthenticationLevel(self: *const T, auth_level_: AUTHENTICATION_LEVEL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig2.VTable, @ptrCast(self.vtable)).SetAuthenticationLevel(@as(*const IDtcNetworkAccessConfig2, @ptrCast(self)), auth_level_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcNetworkAccessConfig3_Value = Guid.initString("76e4b4f3-2ca5-466b-89d5-fd218ee75b49");
pub const IID_IDtcNetworkAccessConfig3 = &IID_IDtcNetworkAccessConfig3_Value;
pub const IDtcNetworkAccessConfig3 = extern struct {
    pub const VTable = extern struct {
        base: IDtcNetworkAccessConfig2.VTable,
        GetLUAccess: *const fn (
            self: *const IDtcNetworkAccessConfig3,
            pb_l_u_access: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLUAccess: *const fn (
            self: *const IDtcNetworkAccessConfig3,
            b_l_u_access: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDtcNetworkAccessConfig2.MethodMixin(T);
            pub inline fn getLUAccess(self: *const T, pb_l_u_access_: ?*BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig3.VTable, @ptrCast(self.vtable)).GetLUAccess(@as(*const IDtcNetworkAccessConfig3, @ptrCast(self)), pb_l_u_access_);
            }
            pub inline fn setLUAccess(self: *const T, b_l_u_access_: BOOL) HRESULT {
                return @as(*const IDtcNetworkAccessConfig3.VTable, @ptrCast(self.vtable)).SetLUAccess(@as(*const IDtcNetworkAccessConfig3, @ptrCast(self)), b_l_u_access_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const xid_t = extern struct {
    formatID: i32,
    gtrid_length: i32,
    bqual_length: i32,
    data: [128]CHAR,
};

pub const xa_switch_t = extern struct {
    name: [32]CHAR,
    flags: i32,
    version: i32,
    xa_open_entry: isize,
    xa_close_entry: isize,
    xa_start_entry: isize,
    xa_end_entry: isize,
    xa_rollback_entry: isize,
    xa_prepare_entry: isize,
    xa_commit_entry: isize,
    xa_recover_entry: isize,
    xa_forget_entry: isize,
    xa_complete_entry: isize,
};

pub const XA_OPEN_EPT = *const fn (
    param0: ?PSTR,
    param1: i32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const XA_CLOSE_EPT = *const fn (
    param0: ?PSTR,
    param1: i32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const XA_START_EPT = *const fn (
    param0: ?*xid_t,
    param1: i32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const XA_END_EPT = *const fn (
    param0: ?*xid_t,
    param1: i32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const XA_ROLLBACK_EPT = *const fn (
    param0: ?*xid_t,
    param1: i32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const XA_PREPARE_EPT = *const fn (
    param0: ?*xid_t,
    param1: i32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const XA_COMMIT_EPT = *const fn (
    param0: ?*xid_t,
    param1: i32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const XA_RECOVER_EPT = *const fn (
    param0: ?*xid_t,
    param1: i32,
    param2: i32,
    param3: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const XA_FORGET_EPT = *const fn (
    param0: ?*xid_t,
    param1: i32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const XA_COMPLETE_EPT = *const fn (
    param0: ?*i32,
    param1: ?*i32,
    param2: i32,
    param3: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

const IID_IDtcToXaMapper_Value = Guid.initString("64ffabe0-7ce9-11d0-8ce6-00c04fdc877e");
pub const IID_IDtcToXaMapper = &IID_IDtcToXaMapper_Value;
pub const IDtcToXaMapper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestNewResourceManager: *const fn (
            self: *const IDtcToXaMapper,
            psz_d_s_n: ?PSTR,
            psz_client_dll_name: ?PSTR,
            pdw_r_m_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateTridToXid: *const fn (
            self: *const IDtcToXaMapper,
            pdw_i_transaction: ?*u32,
            dw_r_m_cookie: u32,
            p_xid: ?*xid_t,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnlistResourceManager: *const fn (
            self: *const IDtcToXaMapper,
            dw_r_m_cookie: u32,
            pdw_i_transaction: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseResourceManager: *const fn (
            self: *const IDtcToXaMapper,
            dw_r_m_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn requestNewResourceManager(self: *const T, psz_d_s_n_: ?PSTR, psz_client_dll_name_: ?PSTR, pdw_r_m_cookie_: ?*u32) HRESULT {
                return @as(*const IDtcToXaMapper.VTable, @ptrCast(self.vtable)).RequestNewResourceManager(@as(*const IDtcToXaMapper, @ptrCast(self)), psz_d_s_n_, psz_client_dll_name_, pdw_r_m_cookie_);
            }
            pub inline fn translateTridToXid(self: *const T, pdw_i_transaction_: ?*u32, dw_r_m_cookie_: u32, p_xid_: ?*xid_t) HRESULT {
                return @as(*const IDtcToXaMapper.VTable, @ptrCast(self.vtable)).TranslateTridToXid(@as(*const IDtcToXaMapper, @ptrCast(self)), pdw_i_transaction_, dw_r_m_cookie_, p_xid_);
            }
            pub inline fn enlistResourceManager(self: *const T, dw_r_m_cookie_: u32, pdw_i_transaction_: ?*u32) HRESULT {
                return @as(*const IDtcToXaMapper.VTable, @ptrCast(self.vtable)).EnlistResourceManager(@as(*const IDtcToXaMapper, @ptrCast(self)), dw_r_m_cookie_, pdw_i_transaction_);
            }
            pub inline fn releaseResourceManager(self: *const T, dw_r_m_cookie_: u32) HRESULT {
                return @as(*const IDtcToXaMapper.VTable, @ptrCast(self.vtable)).ReleaseResourceManager(@as(*const IDtcToXaMapper, @ptrCast(self)), dw_r_m_cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcToXaHelperFactory_Value = Guid.initString("a9861610-304a-11d1-9813-00a0c905416e");
pub const IID_IDtcToXaHelperFactory = &IID_IDtcToXaHelperFactory_Value;
pub const IDtcToXaHelperFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IDtcToXaHelperFactory,
            psz_d_s_n: ?PSTR,
            psz_client_dll_name: ?PSTR,
            pguid_rm: ?*Guid,
            pp_xa_helper: ?*?*IDtcToXaHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, psz_d_s_n_: ?PSTR, psz_client_dll_name_: ?PSTR, pguid_rm_: ?*Guid, pp_xa_helper_: ?*?*IDtcToXaHelper) HRESULT {
                return @as(*const IDtcToXaHelperFactory.VTable, @ptrCast(self.vtable)).Create(@as(*const IDtcToXaHelperFactory, @ptrCast(self)), psz_d_s_n_, psz_client_dll_name_, pguid_rm_, pp_xa_helper_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcToXaHelper_Value = Guid.initString("a9861611-304a-11d1-9813-00a0c905416e");
pub const IID_IDtcToXaHelper = &IID_IDtcToXaHelper_Value;
pub const IDtcToXaHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Close: *const fn (
            self: *const IDtcToXaHelper,
            i_f_do_recovery: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateTridToXid: *const fn (
            self: *const IDtcToXaHelper,
            p_i_transaction: ?*ITransaction,
            pguid_bqual: ?*Guid,
            p_xid: ?*xid_t,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn close(self: *const T, i_f_do_recovery_: BOOL) HRESULT {
                return @as(*const IDtcToXaHelper.VTable, @ptrCast(self.vtable)).Close(@as(*const IDtcToXaHelper, @ptrCast(self)), i_f_do_recovery_);
            }
            pub inline fn translateTridToXid(self: *const T, p_i_transaction_: ?*ITransaction, pguid_bqual_: ?*Guid, p_xid_: ?*xid_t) HRESULT {
                return @as(*const IDtcToXaHelper.VTable, @ptrCast(self.vtable)).TranslateTridToXid(@as(*const IDtcToXaHelper, @ptrCast(self)), p_i_transaction_, pguid_bqual_, p_xid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcToXaHelperSinglePipe_Value = Guid.initString("47ed4971-53b3-11d1-bbb9-00c04fd658f6");
pub const IID_IDtcToXaHelperSinglePipe = &IID_IDtcToXaHelperSinglePipe_Value;
pub const IDtcToXaHelperSinglePipe = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        XARMCreate: *const fn (
            self: *const IDtcToXaHelperSinglePipe,
            psz_d_s_n: ?PSTR,
            psz_client_dll: ?PSTR,
            pdw_r_m_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertTridToXID: *const fn (
            self: *const IDtcToXaHelperSinglePipe,
            pdw_i_trans: ?*u32,
            dw_r_m_cookie: u32,
            pxid: ?*xid_t,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnlistWithRM: *const fn (
            self: *const IDtcToXaHelperSinglePipe,
            dw_r_m_cookie: u32,
            i_p_i_transaction: ?*ITransaction,
            i_p_i_trans_res: ?*ITransactionResourceAsync,
            o_pp_i_trans_enslitment: ?*?*ITransactionEnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseRMCookie: *const fn (
            self: *const IDtcToXaHelperSinglePipe,
            i_dw_r_m_cookie: u32,
            i_f_normal: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn xarmCreate(self: *const T, psz_d_s_n_: ?PSTR, psz_client_dll_: ?PSTR, pdw_r_m_cookie_: ?*u32) HRESULT {
                return @as(*const IDtcToXaHelperSinglePipe.VTable, @ptrCast(self.vtable)).XARMCreate(@as(*const IDtcToXaHelperSinglePipe, @ptrCast(self)), psz_d_s_n_, psz_client_dll_, pdw_r_m_cookie_);
            }
            pub inline fn convertTridToXID(self: *const T, pdw_i_trans_: ?*u32, dw_r_m_cookie_: u32, pxid_: ?*xid_t) HRESULT {
                return @as(*const IDtcToXaHelperSinglePipe.VTable, @ptrCast(self.vtable)).ConvertTridToXID(@as(*const IDtcToXaHelperSinglePipe, @ptrCast(self)), pdw_i_trans_, dw_r_m_cookie_, pxid_);
            }
            pub inline fn enlistWithRM(self: *const T, dw_r_m_cookie_: u32, i_p_i_transaction_: ?*ITransaction, i_p_i_trans_res_: ?*ITransactionResourceAsync, o_pp_i_trans_enslitment_: ?*?*ITransactionEnlistmentAsync) HRESULT {
                return @as(*const IDtcToXaHelperSinglePipe.VTable, @ptrCast(self.vtable)).EnlistWithRM(@as(*const IDtcToXaHelperSinglePipe, @ptrCast(self)), dw_r_m_cookie_, i_p_i_transaction_, i_p_i_trans_res_, o_pp_i_trans_enslitment_);
            }
            pub inline fn releaseRMCookie(self: *const T, i_dw_r_m_cookie_: u32, i_f_normal_: BOOL) void {
                return @as(*const IDtcToXaHelperSinglePipe.VTable, @ptrCast(self.vtable)).ReleaseRMCookie(@as(*const IDtcToXaHelperSinglePipe, @ptrCast(self)), i_dw_r_m_cookie_, i_f_normal_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const APPLICATIONTYPE = enum(i32) {
    LOCAL_APPLICATIONTYPE = 0,
    CLUSTERRESOURCE_APPLICATIONTYPE = 1,
};
pub const LOCAL_APPLICATIONTYPE = APPLICATIONTYPE.LOCAL_APPLICATIONTYPE;
pub const CLUSTERRESOURCE_APPLICATIONTYPE = APPLICATIONTYPE.CLUSTERRESOURCE_APPLICATIONTYPE;

pub const OLE_TM_CONFIG_PARAMS_V1 = extern struct {
    dwVersion: u32,
    dwcConcurrencyHint: u32,
};

pub const OLE_TM_CONFIG_PARAMS_V2 = extern struct {
    dwVersion: u32,
    dwcConcurrencyHint: u32,
    applicationType: APPLICATIONTYPE,
    clusterResourceId: Guid,
};

pub const XACT_DTC_CONSTANTS = enum(i32) {
    XACT_E_CONNECTION_REQUEST_DENIED = -2147168000,
    XACT_E_TOOMANY_ENLISTMENTS = -2147167999,
    XACT_E_DUPLICATE_GUID = -2147167998,
    XACT_E_NOTSINGLEPHASE = -2147167997,
    XACT_E_RECOVERYALREADYDONE = -2147167996,
    XACT_E_PROTOCOL = -2147167995,
    XACT_E_RM_FAILURE = -2147167994,
    XACT_E_RECOVERY_FAILED = -2147167993,
    XACT_E_LU_NOT_FOUND = -2147167992,
    XACT_E_DUPLICATE_LU = -2147167991,
    XACT_E_LU_NOT_CONNECTED = -2147167990,
    XACT_E_DUPLICATE_TRANSID = -2147167989,
    XACT_E_LU_BUSY = -2147167988,
    XACT_E_LU_NO_RECOVERY_PROCESS = -2147167987,
    XACT_E_LU_DOWN = -2147167986,
    XACT_E_LU_RECOVERING = -2147167985,
    XACT_E_LU_RECOVERY_MISMATCH = -2147167984,
    XACT_E_RM_UNAVAILABLE = -2147167983,
    XACT_E_LRMRECOVERYALREADYDONE = -2147167982,
    XACT_E_NOLASTRESOURCEINTERFACE = -2147167981,
    XACT_S_NONOTIFY = 315648,
    XACT_OK_NONOTIFY = 315649,
    dwUSER_MS_SQLSERVER = 65535,
};
pub const XACT_E_CONNECTION_REQUEST_DENIED = XACT_DTC_CONSTANTS.XACT_E_CONNECTION_REQUEST_DENIED;
pub const XACT_E_TOOMANY_ENLISTMENTS = XACT_DTC_CONSTANTS.XACT_E_TOOMANY_ENLISTMENTS;
pub const XACT_E_DUPLICATE_GUID = XACT_DTC_CONSTANTS.XACT_E_DUPLICATE_GUID;
pub const XACT_E_NOTSINGLEPHASE = XACT_DTC_CONSTANTS.XACT_E_NOTSINGLEPHASE;
pub const XACT_E_RECOVERYALREADYDONE = XACT_DTC_CONSTANTS.XACT_E_RECOVERYALREADYDONE;
pub const XACT_E_PROTOCOL = XACT_DTC_CONSTANTS.XACT_E_PROTOCOL;
pub const XACT_E_RM_FAILURE = XACT_DTC_CONSTANTS.XACT_E_RM_FAILURE;
pub const XACT_E_RECOVERY_FAILED = XACT_DTC_CONSTANTS.XACT_E_RECOVERY_FAILED;
pub const XACT_E_LU_NOT_FOUND = XACT_DTC_CONSTANTS.XACT_E_LU_NOT_FOUND;
pub const XACT_E_DUPLICATE_LU = XACT_DTC_CONSTANTS.XACT_E_DUPLICATE_LU;
pub const XACT_E_LU_NOT_CONNECTED = XACT_DTC_CONSTANTS.XACT_E_LU_NOT_CONNECTED;
pub const XACT_E_DUPLICATE_TRANSID = XACT_DTC_CONSTANTS.XACT_E_DUPLICATE_TRANSID;
pub const XACT_E_LU_BUSY = XACT_DTC_CONSTANTS.XACT_E_LU_BUSY;
pub const XACT_E_LU_NO_RECOVERY_PROCESS = XACT_DTC_CONSTANTS.XACT_E_LU_NO_RECOVERY_PROCESS;
pub const XACT_E_LU_DOWN = XACT_DTC_CONSTANTS.XACT_E_LU_DOWN;
pub const XACT_E_LU_RECOVERING = XACT_DTC_CONSTANTS.XACT_E_LU_RECOVERING;
pub const XACT_E_LU_RECOVERY_MISMATCH = XACT_DTC_CONSTANTS.XACT_E_LU_RECOVERY_MISMATCH;
pub const XACT_E_RM_UNAVAILABLE = XACT_DTC_CONSTANTS.XACT_E_RM_UNAVAILABLE;
pub const XACT_E_LRMRECOVERYALREADYDONE = XACT_DTC_CONSTANTS.XACT_E_LRMRECOVERYALREADYDONE;
pub const XACT_E_NOLASTRESOURCEINTERFACE = XACT_DTC_CONSTANTS.XACT_E_NOLASTRESOURCEINTERFACE;
pub const XACT_S_NONOTIFY = XACT_DTC_CONSTANTS.XACT_S_NONOTIFY;
pub const XACT_OK_NONOTIFY = XACT_DTC_CONSTANTS.XACT_OK_NONOTIFY;
pub const dwUSER_MS_SQLSERVER = XACT_DTC_CONSTANTS.dwUSER_MS_SQLSERVER;

const IID_IXATransLookup_Value = Guid.initString("f3b1f131-eeda-11ce-aed4-00aa0051e2c4");
pub const IID_IXATransLookup = &IID_IXATransLookup_Value;
pub const IXATransLookup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Lookup: *const fn (
            self: *const IXATransLookup,
            pp_transaction: ?*?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn lookup(self: *const T, pp_transaction_: ?*?*ITransaction) HRESULT {
                return @as(*const IXATransLookup.VTable, @ptrCast(self.vtable)).Lookup(@as(*const IXATransLookup, @ptrCast(self)), pp_transaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXATransLookup2_Value = Guid.initString("bf193c85-0d1a-4290-b88f-d2cb8873d1e7");
pub const IID_IXATransLookup2 = &IID_IXATransLookup2_Value;
pub const IXATransLookup2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Lookup: *const fn (
            self: *const IXATransLookup2,
            p_x_i_d: ?*xid_t,
            pp_transaction: ?*?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn lookup(self: *const T, p_x_i_d_: ?*xid_t, pp_transaction_: ?*?*ITransaction) HRESULT {
                return @as(*const IXATransLookup2.VTable, @ptrCast(self.vtable)).Lookup(@as(*const IXATransLookup2, @ptrCast(self)), p_x_i_d_, pp_transaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManagerSink_Value = Guid.initString("0d563181-defb-11ce-aed1-00aa0051e2c4");
pub const IID_IResourceManagerSink = &IID_IResourceManagerSink_Value;
pub const IResourceManagerSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TMDown: *const fn (
            self: *const IResourceManagerSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn tmDown(self: *const T) HRESULT {
                return @as(*const IResourceManagerSink.VTable, @ptrCast(self.vtable)).TMDown(@as(*const IResourceManagerSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IResourceManager_Value = Guid.initString("13741d21-87eb-11ce-8081-0080c758527e");
pub const IID_IResourceManager = &IID_IResourceManager_Value;
pub const IResourceManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Enlist: *const fn (
            self: *const IResourceManager,
            p_transaction: ?*ITransaction,
            p_res: ?*ITransactionResourceAsync,
            p_u_o_w: ?*BOID,
            piso_level: ?*i32,
            pp_enlist: ?*?*ITransactionEnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reenlist: *const fn (
            self: *const IResourceManager,
            p_prep_info: [*:0]u8,
            cb_prep_info: u32,
            l_timeout: u32,
            p_xact_stat: ?*XACTSTAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReenlistmentComplete: *const fn (
            self: *const IResourceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDistributedTransactionManager: *const fn (
            self: *const IResourceManager,
            iid: ?*const Guid,
            ppv_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enlist(self: *const T, p_transaction_: ?*ITransaction, p_res_: ?*ITransactionResourceAsync, p_u_o_w_: ?*BOID, piso_level_: ?*i32, pp_enlist_: ?*?*ITransactionEnlistmentAsync) HRESULT {
                return @as(*const IResourceManager.VTable, @ptrCast(self.vtable)).Enlist(@as(*const IResourceManager, @ptrCast(self)), p_transaction_, p_res_, p_u_o_w_, piso_level_, pp_enlist_);
            }
            pub inline fn reenlist(self: *const T, p_prep_info_: [*:0]u8, cb_prep_info_: u32, l_timeout_: u32, p_xact_stat_: ?*XACTSTAT) HRESULT {
                return @as(*const IResourceManager.VTable, @ptrCast(self.vtable)).Reenlist(@as(*const IResourceManager, @ptrCast(self)), p_prep_info_, cb_prep_info_, l_timeout_, p_xact_stat_);
            }
            pub inline fn reenlistmentComplete(self: *const T) HRESULT {
                return @as(*const IResourceManager.VTable, @ptrCast(self.vtable)).ReenlistmentComplete(@as(*const IResourceManager, @ptrCast(self)));
            }
            pub inline fn getDistributedTransactionManager(self: *const T, iid_: ?*const Guid, ppv_object_: ?*?*anyopaque) HRESULT {
                return @as(*const IResourceManager.VTable, @ptrCast(self.vtable)).GetDistributedTransactionManager(@as(*const IResourceManager, @ptrCast(self)), iid_, ppv_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ILastResourceManager_Value = Guid.initString("4d964ad4-5b33-11d3-8a91-00c04f79eb6d");
pub const IID_ILastResourceManager = &IID_ILastResourceManager_Value;
pub const ILastResourceManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TransactionCommitted: *const fn (
            self: *const ILastResourceManager,
            p_prep_info: [*:0]u8,
            cb_prep_info: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecoveryDone: *const fn (
            self: *const ILastResourceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn transactionCommitted(self: *const T, p_prep_info_: [*:0]u8, cb_prep_info_: u32) HRESULT {
                return @as(*const ILastResourceManager.VTable, @ptrCast(self.vtable)).TransactionCommitted(@as(*const ILastResourceManager, @ptrCast(self)), p_prep_info_, cb_prep_info_);
            }
            pub inline fn recoveryDone(self: *const T) HRESULT {
                return @as(*const ILastResourceManager.VTable, @ptrCast(self.vtable)).RecoveryDone(@as(*const ILastResourceManager, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManager2_Value = Guid.initString("d136c69a-f749-11d1-8f47-00c04f8ee57d");
pub const IID_IResourceManager2 = &IID_IResourceManager2_Value;
pub const IResourceManager2 = extern struct {
    pub const VTable = extern struct {
        base: IResourceManager.VTable,
        Enlist2: *const fn (
            self: *const IResourceManager2,
            p_transaction: ?*ITransaction,
            p_res_async: ?*ITransactionResourceAsync,
            p_u_o_w: ?*BOID,
            piso_level: ?*i32,
            p_xid: ?*xid_t,
            pp_enlist: ?*?*ITransactionEnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reenlist2: *const fn (
            self: *const IResourceManager2,
            p_xid: ?*xid_t,
            dw_timeout: u32,
            p_xact_stat: ?*XACTSTAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IResourceManager.MethodMixin(T);
            pub inline fn enlist2(self: *const T, p_transaction_: ?*ITransaction, p_res_async_: ?*ITransactionResourceAsync, p_u_o_w_: ?*BOID, piso_level_: ?*i32, p_xid_: ?*xid_t, pp_enlist_: ?*?*ITransactionEnlistmentAsync) HRESULT {
                return @as(*const IResourceManager2.VTable, @ptrCast(self.vtable)).Enlist2(@as(*const IResourceManager2, @ptrCast(self)), p_transaction_, p_res_async_, p_u_o_w_, piso_level_, p_xid_, pp_enlist_);
            }
            pub inline fn reenlist2(self: *const T, p_xid_: ?*xid_t, dw_timeout_: u32, p_xact_stat_: ?*XACTSTAT) HRESULT {
                return @as(*const IResourceManager2.VTable, @ptrCast(self.vtable)).Reenlist2(@as(*const IResourceManager2, @ptrCast(self)), p_xid_, dw_timeout_, p_xact_stat_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManagerRejoinable_Value = Guid.initString("6f6de620-b5df-4f3e-9cfa-c8aebd05172b");
pub const IID_IResourceManagerRejoinable = &IID_IResourceManagerRejoinable_Value;
pub const IResourceManagerRejoinable = extern struct {
    pub const VTable = extern struct {
        base: IResourceManager2.VTable,
        Rejoin: *const fn (
            self: *const IResourceManagerRejoinable,
            p_prep_info: [*:0]u8,
            cb_prep_info: u32,
            l_timeout: u32,
            p_xact_stat: ?*XACTSTAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IResourceManager2.MethodMixin(T);
            pub inline fn rejoin(self: *const T, p_prep_info_: [*:0]u8, cb_prep_info_: u32, l_timeout_: u32, p_xact_stat_: ?*XACTSTAT) HRESULT {
                return @as(*const IResourceManagerRejoinable.VTable, @ptrCast(self.vtable)).Rejoin(@as(*const IResourceManagerRejoinable, @ptrCast(self)), p_prep_info_, cb_prep_info_, l_timeout_, p_xact_stat_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXAConfig_Value = Guid.initString("c8a6e3a1-9a8c-11cf-a308-00a0c905416e");
pub const IID_IXAConfig = &IID_IXAConfig_Value;
pub const IXAConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IXAConfig,
            clsid_helper_dll: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: *const fn (
            self: *const IXAConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, clsid_helper_dll_: Guid) HRESULT {
                return @as(*const IXAConfig.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IXAConfig, @ptrCast(self)), clsid_helper_dll_);
            }
            pub inline fn terminate(self: *const T) HRESULT {
                return @as(*const IXAConfig.VTable, @ptrCast(self.vtable)).Terminate(@as(*const IXAConfig, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRMHelper_Value = Guid.initString("e793f6d1-f53d-11cf-a60d-00a0c905416e");
pub const IID_IRMHelper = &IID_IRMHelper_Value;
pub const IRMHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RMCount: *const fn (
            self: *const IRMHelper,
            dwc_total_number_of_r_ms: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RMInfo: *const fn (
            self: *const IRMHelper,
            p_xa__switch: ?*xa_switch_t,
            f_c_decl_calling_conv: BOOL,
            psz_open_string: ?PSTR,
            psz_close_string: ?PSTR,
            guid_r_m_recovery: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn rmCount(self: *const T, dwc_total_number_of_r_ms_: u32) HRESULT {
                return @as(*const IRMHelper.VTable, @ptrCast(self.vtable)).RMCount(@as(*const IRMHelper, @ptrCast(self)), dwc_total_number_of_r_ms_);
            }
            pub inline fn rmInfo(self: *const T, p_xa__switch_: ?*xa_switch_t, f_c_decl_calling_conv_: BOOL, psz_open_string_: ?PSTR, psz_close_string_: ?PSTR, guid_r_m_recovery_: Guid) HRESULT {
                return @as(*const IRMHelper.VTable, @ptrCast(self.vtable)).RMInfo(@as(*const IRMHelper, @ptrCast(self)), p_xa__switch_, f_c_decl_calling_conv_, psz_open_string_, psz_close_string_, guid_r_m_recovery_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXAObtainRMInfo_Value = Guid.initString("e793f6d2-f53d-11cf-a60d-00a0c905416e");
pub const IID_IXAObtainRMInfo = &IID_IXAObtainRMInfo_Value;
pub const IXAObtainRMInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ObtainRMInfo: *const fn (
            self: *const IXAObtainRMInfo,
            p_i_r_m_helper: ?*IRMHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn obtainRMInfo(self: *const T, p_i_r_m_helper_: ?*IRMHelper) HRESULT {
                return @as(*const IXAObtainRMInfo.VTable, @ptrCast(self.vtable)).ObtainRMInfo(@as(*const IXAObtainRMInfo, @ptrCast(self)), p_i_r_m_helper_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManagerFactory_Value = Guid.initString("13741d20-87eb-11ce-8081-0080c758527e");
pub const IID_IResourceManagerFactory = &IID_IResourceManagerFactory_Value;
pub const IResourceManagerFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IResourceManagerFactory,
            pguid_r_m: ?*Guid,
            psz_r_m_name: ?PSTR,
            p_i_res_mgr_sink: ?*IResourceManagerSink,
            pp_res_mgr: ?*?*IResourceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, pguid_r_m_: ?*Guid, psz_r_m_name_: ?PSTR, p_i_res_mgr_sink_: ?*IResourceManagerSink, pp_res_mgr_: ?*?*IResourceManager) HRESULT {
                return @as(*const IResourceManagerFactory.VTable, @ptrCast(self.vtable)).Create(@as(*const IResourceManagerFactory, @ptrCast(self)), pguid_r_m_, psz_r_m_name_, p_i_res_mgr_sink_, pp_res_mgr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManagerFactory2_Value = Guid.initString("6b369c21-fbd2-11d1-8f47-00c04f8ee57d");
pub const IID_IResourceManagerFactory2 = &IID_IResourceManagerFactory2_Value;
pub const IResourceManagerFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IResourceManagerFactory.VTable,
        CreateEx: *const fn (
            self: *const IResourceManagerFactory2,
            pguid_r_m: ?*Guid,
            psz_r_m_name: ?PSTR,
            p_i_res_mgr_sink: ?*IResourceManagerSink,
            riid_requested: ?*const Guid,
            ppv_res_mgr: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IResourceManagerFactory.MethodMixin(T);
            pub inline fn createEx(self: *const T, pguid_r_m_: ?*Guid, psz_r_m_name_: ?PSTR, p_i_res_mgr_sink_: ?*IResourceManagerSink, riid_requested_: ?*const Guid, ppv_res_mgr_: ?*?*anyopaque) HRESULT {
                return @as(*const IResourceManagerFactory2.VTable, @ptrCast(self.vtable)).CreateEx(@as(*const IResourceManagerFactory2, @ptrCast(self)), pguid_r_m_, psz_r_m_name_, p_i_res_mgr_sink_, riid_requested_, ppv_res_mgr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrepareInfo_Value = Guid.initString("80c7bfd0-87ee-11ce-8081-0080c758527e");
pub const IID_IPrepareInfo = &IID_IPrepareInfo_Value;
pub const IPrepareInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPrepareInfoSize: *const fn (
            self: *const IPrepareInfo,
            pcb_prep_info: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrepareInfo: *const fn (
            self: *const IPrepareInfo,
            p_prep_info: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPrepareInfoSize(self: *const T, pcb_prep_info_: ?*u32) HRESULT {
                return @as(*const IPrepareInfo.VTable, @ptrCast(self.vtable)).GetPrepareInfoSize(@as(*const IPrepareInfo, @ptrCast(self)), pcb_prep_info_);
            }
            pub inline fn getPrepareInfo(self: *const T, p_prep_info_: ?*u8) HRESULT {
                return @as(*const IPrepareInfo.VTable, @ptrCast(self.vtable)).GetPrepareInfo(@as(*const IPrepareInfo, @ptrCast(self)), p_prep_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrepareInfo2_Value = Guid.initString("5fab2547-9779-11d1-b886-00c04fb9618a");
pub const IID_IPrepareInfo2 = &IID_IPrepareInfo2_Value;
pub const IPrepareInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPrepareInfoSize: *const fn (
            self: *const IPrepareInfo2,
            pcb_prep_info: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrepareInfo: *const fn (
            self: *const IPrepareInfo2,
            cb_prepare_info: u32,
            p_prep_info: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPrepareInfoSize(self: *const T, pcb_prep_info_: ?*u32) HRESULT {
                return @as(*const IPrepareInfo2.VTable, @ptrCast(self.vtable)).GetPrepareInfoSize(@as(*const IPrepareInfo2, @ptrCast(self)), pcb_prep_info_);
            }
            pub inline fn getPrepareInfo(self: *const T, cb_prepare_info_: u32, p_prep_info_: [*:0]u8) HRESULT {
                return @as(*const IPrepareInfo2.VTable, @ptrCast(self.vtable)).GetPrepareInfo(@as(*const IPrepareInfo2, @ptrCast(self)), cb_prepare_info_, p_prep_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetDispenser_Value = Guid.initString("c23cc370-87ef-11ce-8081-0080c758527e");
pub const IID_IGetDispenser = &IID_IGetDispenser_Value;
pub const IGetDispenser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDispenser: *const fn (
            self: *const IGetDispenser,
            iid: ?*const Guid,
            ppv_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDispenser(self: *const T, iid_: ?*const Guid, ppv_object_: ?*?*anyopaque) HRESULT {
                return @as(*const IGetDispenser.VTable, @ptrCast(self.vtable)).GetDispenser(@as(*const IGetDispenser, @ptrCast(self)), iid_, ppv_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionVoterBallotAsync2_Value = Guid.initString("5433376c-414d-11d3-b206-00c04fc2f3ef");
pub const IID_ITransactionVoterBallotAsync2 = &IID_ITransactionVoterBallotAsync2_Value;
pub const ITransactionVoterBallotAsync2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        VoteRequestDone: *const fn (
            self: *const ITransactionVoterBallotAsync2,
            hr: HRESULT,
            pboid_reason: ?*BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn voteRequestDone(self: *const T, hr_: HRESULT, pboid_reason_: ?*BOID) HRESULT {
                return @as(*const ITransactionVoterBallotAsync2.VTable, @ptrCast(self.vtable)).VoteRequestDone(@as(*const ITransactionVoterBallotAsync2, @ptrCast(self)), hr_, pboid_reason_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionVoterNotifyAsync2_Value = Guid.initString("5433376b-414d-11d3-b206-00c04fc2f3ef");
pub const IID_ITransactionVoterNotifyAsync2 = &IID_ITransactionVoterNotifyAsync2_Value;
pub const ITransactionVoterNotifyAsync2 = extern struct {
    pub const VTable = extern struct {
        base: ITransactionOutcomeEvents.VTable,
        VoteRequest: *const fn (
            self: *const ITransactionVoterNotifyAsync2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITransactionOutcomeEvents.MethodMixin(T);
            pub inline fn voteRequest(self: *const T) HRESULT {
                return @as(*const ITransactionVoterNotifyAsync2.VTable, @ptrCast(self.vtable)).VoteRequest(@as(*const ITransactionVoterNotifyAsync2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionVoterFactory2_Value = Guid.initString("5433376a-414d-11d3-b206-00c04fc2f3ef");
pub const IID_ITransactionVoterFactory2 = &IID_ITransactionVoterFactory2_Value;
pub const ITransactionVoterFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const ITransactionVoterFactory2,
            p_transaction: ?*ITransaction,
            p_voter_notify: ?*ITransactionVoterNotifyAsync2,
            pp_voter_ballot: ?*?*ITransactionVoterBallotAsync2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, p_transaction_: ?*ITransaction, p_voter_notify_: ?*ITransactionVoterNotifyAsync2, pp_voter_ballot_: ?*?*ITransactionVoterBallotAsync2) HRESULT {
                return @as(*const ITransactionVoterFactory2.VTable, @ptrCast(self.vtable)).Create(@as(*const ITransactionVoterFactory2, @ptrCast(self)), p_transaction_, p_voter_notify_, pp_voter_ballot_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionPhase0EnlistmentAsync_Value = Guid.initString("82dc88e1-a954-11d1-8f88-00600895e7d5");
pub const IID_ITransactionPhase0EnlistmentAsync = &IID_ITransactionPhase0EnlistmentAsync_Value;
pub const ITransactionPhase0EnlistmentAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Enable: *const fn (
            self: *const ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForEnlistment: *const fn (
            self: *const ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Phase0Done: *const fn (
            self: *const ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unenlist: *const fn (
            self: *const ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransaction: *const fn (
            self: *const ITransactionPhase0EnlistmentAsync,
            pp_i_transaction: ?*?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enable(self: *const T) HRESULT {
                return @as(*const ITransactionPhase0EnlistmentAsync.VTable, @ptrCast(self.vtable)).Enable(@as(*const ITransactionPhase0EnlistmentAsync, @ptrCast(self)));
            }
            pub inline fn waitForEnlistment(self: *const T) HRESULT {
                return @as(*const ITransactionPhase0EnlistmentAsync.VTable, @ptrCast(self.vtable)).WaitForEnlistment(@as(*const ITransactionPhase0EnlistmentAsync, @ptrCast(self)));
            }
            pub inline fn phase0Done(self: *const T) HRESULT {
                return @as(*const ITransactionPhase0EnlistmentAsync.VTable, @ptrCast(self.vtable)).Phase0Done(@as(*const ITransactionPhase0EnlistmentAsync, @ptrCast(self)));
            }
            pub inline fn unenlist(self: *const T) HRESULT {
                return @as(*const ITransactionPhase0EnlistmentAsync.VTable, @ptrCast(self.vtable)).Unenlist(@as(*const ITransactionPhase0EnlistmentAsync, @ptrCast(self)));
            }
            pub inline fn getTransaction(self: *const T, pp_i_transaction_: ?*?*ITransaction) HRESULT {
                return @as(*const ITransactionPhase0EnlistmentAsync.VTable, @ptrCast(self.vtable)).GetTransaction(@as(*const ITransactionPhase0EnlistmentAsync, @ptrCast(self)), pp_i_transaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionPhase0NotifyAsync_Value = Guid.initString("ef081809-0c76-11d2-87a6-00c04f990f34");
pub const IID_ITransactionPhase0NotifyAsync = &IID_ITransactionPhase0NotifyAsync_Value;
pub const ITransactionPhase0NotifyAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Phase0Request: *const fn (
            self: *const ITransactionPhase0NotifyAsync,
            f_aborting_hint: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnlistCompleted: *const fn (
            self: *const ITransactionPhase0NotifyAsync,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn phase0Request(self: *const T, f_aborting_hint_: BOOL) HRESULT {
                return @as(*const ITransactionPhase0NotifyAsync.VTable, @ptrCast(self.vtable)).Phase0Request(@as(*const ITransactionPhase0NotifyAsync, @ptrCast(self)), f_aborting_hint_);
            }
            pub inline fn enlistCompleted(self: *const T, status_: HRESULT) HRESULT {
                return @as(*const ITransactionPhase0NotifyAsync.VTable, @ptrCast(self.vtable)).EnlistCompleted(@as(*const ITransactionPhase0NotifyAsync, @ptrCast(self)), status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionPhase0Factory_Value = Guid.initString("82dc88e0-a954-11d1-8f88-00600895e7d5");
pub const IID_ITransactionPhase0Factory = &IID_ITransactionPhase0Factory_Value;
pub const ITransactionPhase0Factory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const ITransactionPhase0Factory,
            p_phase0_notify: ?*ITransactionPhase0NotifyAsync,
            pp_phase0_enlistment: ?*?*ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, p_phase0_notify_: ?*ITransactionPhase0NotifyAsync, pp_phase0_enlistment_: ?*?*ITransactionPhase0EnlistmentAsync) HRESULT {
                return @as(*const ITransactionPhase0Factory.VTable, @ptrCast(self.vtable)).Create(@as(*const ITransactionPhase0Factory, @ptrCast(self)), p_phase0_notify_, pp_phase0_enlistment_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionTransmitter_Value = Guid.initString("59313e01-b36c-11cf-a539-00aa006887c3");
pub const IID_ITransactionTransmitter = &IID_ITransactionTransmitter_Value;
pub const ITransactionTransmitter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Set: *const fn (
            self: *const ITransactionTransmitter,
            p_transaction: ?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropagationTokenSize: *const fn (
            self: *const ITransactionTransmitter,
            pcb_token: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MarshalPropagationToken: *const fn (
            self: *const ITransactionTransmitter,
            cb_token: u32,
            rgb_token: [*:0]u8,
            pcb_used: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnmarshalReturnToken: *const fn (
            self: *const ITransactionTransmitter,
            cb_return_token: u32,
            rgb_return_token: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ITransactionTransmitter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn set(self: *const T, p_transaction_: ?*ITransaction) HRESULT {
                return @as(*const ITransactionTransmitter.VTable, @ptrCast(self.vtable)).Set(@as(*const ITransactionTransmitter, @ptrCast(self)), p_transaction_);
            }
            pub inline fn getPropagationTokenSize(self: *const T, pcb_token_: ?*u32) HRESULT {
                return @as(*const ITransactionTransmitter.VTable, @ptrCast(self.vtable)).GetPropagationTokenSize(@as(*const ITransactionTransmitter, @ptrCast(self)), pcb_token_);
            }
            pub inline fn marshalPropagationToken(self: *const T, cb_token_: u32, rgb_token_: [*:0]u8, pcb_used_: ?*u32) HRESULT {
                return @as(*const ITransactionTransmitter.VTable, @ptrCast(self.vtable)).MarshalPropagationToken(@as(*const ITransactionTransmitter, @ptrCast(self)), cb_token_, rgb_token_, pcb_used_);
            }
            pub inline fn unmarshalReturnToken(self: *const T, cb_return_token_: u32, rgb_return_token_: [*:0]u8) HRESULT {
                return @as(*const ITransactionTransmitter.VTable, @ptrCast(self.vtable)).UnmarshalReturnToken(@as(*const ITransactionTransmitter, @ptrCast(self)), cb_return_token_, rgb_return_token_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const ITransactionTransmitter.VTable, @ptrCast(self.vtable)).Reset(@as(*const ITransactionTransmitter, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionTransmitterFactory_Value = Guid.initString("59313e00-b36c-11cf-a539-00aa006887c3");
pub const IID_ITransactionTransmitterFactory = &IID_ITransactionTransmitterFactory_Value;
pub const ITransactionTransmitterFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const ITransactionTransmitterFactory,
            pp_transmitter: ?*?*ITransactionTransmitter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, pp_transmitter_: ?*?*ITransactionTransmitter) HRESULT {
                return @as(*const ITransactionTransmitterFactory.VTable, @ptrCast(self.vtable)).Create(@as(*const ITransactionTransmitterFactory, @ptrCast(self)), pp_transmitter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionReceiver_Value = Guid.initString("59313e03-b36c-11cf-a539-00aa006887c3");
pub const IID_ITransactionReceiver = &IID_ITransactionReceiver_Value;
pub const ITransactionReceiver = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UnmarshalPropagationToken: *const fn (
            self: *const ITransactionReceiver,
            cb_token: u32,
            rgb_token: [*:0]u8,
            pp_transaction: ?*?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReturnTokenSize: *const fn (
            self: *const ITransactionReceiver,
            pcb_return_token: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MarshalReturnToken: *const fn (
            self: *const ITransactionReceiver,
            cb_return_token: u32,
            rgb_return_token: [*:0]u8,
            pcb_used: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ITransactionReceiver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn unmarshalPropagationToken(self: *const T, cb_token_: u32, rgb_token_: [*:0]u8, pp_transaction_: ?*?*ITransaction) HRESULT {
                return @as(*const ITransactionReceiver.VTable, @ptrCast(self.vtable)).UnmarshalPropagationToken(@as(*const ITransactionReceiver, @ptrCast(self)), cb_token_, rgb_token_, pp_transaction_);
            }
            pub inline fn getReturnTokenSize(self: *const T, pcb_return_token_: ?*u32) HRESULT {
                return @as(*const ITransactionReceiver.VTable, @ptrCast(self.vtable)).GetReturnTokenSize(@as(*const ITransactionReceiver, @ptrCast(self)), pcb_return_token_);
            }
            pub inline fn marshalReturnToken(self: *const T, cb_return_token_: u32, rgb_return_token_: [*:0]u8, pcb_used_: ?*u32) HRESULT {
                return @as(*const ITransactionReceiver.VTable, @ptrCast(self.vtable)).MarshalReturnToken(@as(*const ITransactionReceiver, @ptrCast(self)), cb_return_token_, rgb_return_token_, pcb_used_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const ITransactionReceiver.VTable, @ptrCast(self.vtable)).Reset(@as(*const ITransactionReceiver, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionReceiverFactory_Value = Guid.initString("59313e02-b36c-11cf-a539-00aa006887c3");
pub const IID_ITransactionReceiverFactory = &IID_ITransactionReceiverFactory_Value;
pub const ITransactionReceiverFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const ITransactionReceiverFactory,
            pp_receiver: ?*?*ITransactionReceiver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, pp_receiver_: ?*?*ITransactionReceiver) HRESULT {
                return @as(*const ITransactionReceiverFactory.VTable, @ptrCast(self.vtable)).Create(@as(*const ITransactionReceiverFactory, @ptrCast(self)), pp_receiver_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _ProxyConfigParams = extern struct {
    wcThreadsMax: u16,
};

const IID_IDtcLuConfigure_Value = Guid.initString("4131e760-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuConfigure = &IID_IDtcLuConfigure_Value;
pub const IDtcLuConfigure = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Add: *const fn (
            self: *const IDtcLuConfigure,
            puc_lu_pair: [*:0]u8,
            cb_lu_pair: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IDtcLuConfigure,
            puc_lu_pair: [*:0]u8,
            cb_lu_pair: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn add(self: *const T, puc_lu_pair_: [*:0]u8, cb_lu_pair_: u32) HRESULT {
                return @as(*const IDtcLuConfigure.VTable, @ptrCast(self.vtable)).Add(@as(*const IDtcLuConfigure, @ptrCast(self)), puc_lu_pair_, cb_lu_pair_);
            }
            pub inline fn delete(self: *const T, puc_lu_pair_: [*:0]u8, cb_lu_pair_: u32) HRESULT {
                return @as(*const IDtcLuConfigure.VTable, @ptrCast(self.vtable)).Delete(@as(*const IDtcLuConfigure, @ptrCast(self)), puc_lu_pair_, cb_lu_pair_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecovery_Value = Guid.initString("ac2b8ad2-d6f0-11d0-b386-00a0c9083365");
pub const IID_IDtcLuRecovery = &IID_IDtcLuRecovery_Value;
pub const IDtcLuRecovery = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryFactory_Value = Guid.initString("4131e762-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuRecoveryFactory = &IID_IDtcLuRecoveryFactory_Value;
pub const IDtcLuRecoveryFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IDtcLuRecoveryFactory,
            puc_lu_pair: [*:0]u8,
            cb_lu_pair: u32,
            pp_recovery: ?*?*IDtcLuRecovery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, puc_lu_pair_: [*:0]u8, cb_lu_pair_: u32, pp_recovery_: ?*?*IDtcLuRecovery) HRESULT {
                return @as(*const IDtcLuRecoveryFactory.VTable, @ptrCast(self.vtable)).Create(@as(*const IDtcLuRecoveryFactory, @ptrCast(self)), puc_lu_pair_, cb_lu_pair_, pp_recovery_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _DtcLu_LocalRecovery_Work = enum(i32) {
    CHECKLUSTATUS = 1,
    TRANS = 2,
    TMDOWN = 3,
};
pub const DTCINITIATEDRECOVERYWORK_CHECKLUSTATUS = _DtcLu_LocalRecovery_Work.CHECKLUSTATUS;
pub const DTCINITIATEDRECOVERYWORK_TRANS = _DtcLu_LocalRecovery_Work.TRANS;
pub const DTCINITIATEDRECOVERYWORK_TMDOWN = _DtcLu_LocalRecovery_Work.TMDOWN;

pub const _DtcLu_Xln = enum(i32) {
    COLD = 1,
    WARM = 2,
};
pub const DTCLUXLN_COLD = _DtcLu_Xln.COLD;
pub const DTCLUXLN_WARM = _DtcLu_Xln.WARM;

pub const _DtcLu_Xln_Confirmation = enum(i32) {
    CONFIRM = 1,
    LOGNAMEMISMATCH = 2,
    COLDWARMMISMATCH = 3,
    OBSOLETE = 4,
};
pub const DTCLUXLNCONFIRMATION_CONFIRM = _DtcLu_Xln_Confirmation.CONFIRM;
pub const DTCLUXLNCONFIRMATION_LOGNAMEMISMATCH = _DtcLu_Xln_Confirmation.LOGNAMEMISMATCH;
pub const DTCLUXLNCONFIRMATION_COLDWARMMISMATCH = _DtcLu_Xln_Confirmation.COLDWARMMISMATCH;
pub const DTCLUXLNCONFIRMATION_OBSOLETE = _DtcLu_Xln_Confirmation.OBSOLETE;

pub const _DtcLu_Xln_Response = enum(i32) {
    OK_SENDOURXLNBACK = 1,
    OK_SENDCONFIRMATION = 2,
    LOGNAMEMISMATCH = 3,
    COLDWARMMISMATCH = 4,
};
pub const DTCLUXLNRESPONSE_OK_SENDOURXLNBACK = _DtcLu_Xln_Response.OK_SENDOURXLNBACK;
pub const DTCLUXLNRESPONSE_OK_SENDCONFIRMATION = _DtcLu_Xln_Response.OK_SENDCONFIRMATION;
pub const DTCLUXLNRESPONSE_LOGNAMEMISMATCH = _DtcLu_Xln_Response.LOGNAMEMISMATCH;
pub const DTCLUXLNRESPONSE_COLDWARMMISMATCH = _DtcLu_Xln_Response.COLDWARMMISMATCH;

pub const _DtcLu_Xln_Error = enum(i32) {
    PROTOCOL = 1,
    LOGNAMEMISMATCH = 2,
    COLDWARMMISMATCH = 3,
};
pub const DTCLUXLNERROR_PROTOCOL = _DtcLu_Xln_Error.PROTOCOL;
pub const DTCLUXLNERROR_LOGNAMEMISMATCH = _DtcLu_Xln_Error.LOGNAMEMISMATCH;
pub const DTCLUXLNERROR_COLDWARMMISMATCH = _DtcLu_Xln_Error.COLDWARMMISMATCH;

pub const _DtcLu_CompareState = enum(i32) {
    COMMITTED = 1,
    HEURISTICCOMMITTED = 2,
    HEURISTICMIXED = 3,
    HEURISTICRESET = 4,
    INDOUBT = 5,
    RESET = 6,
};
pub const DTCLUCOMPARESTATE_COMMITTED = _DtcLu_CompareState.COMMITTED;
pub const DTCLUCOMPARESTATE_HEURISTICCOMMITTED = _DtcLu_CompareState.HEURISTICCOMMITTED;
pub const DTCLUCOMPARESTATE_HEURISTICMIXED = _DtcLu_CompareState.HEURISTICMIXED;
pub const DTCLUCOMPARESTATE_HEURISTICRESET = _DtcLu_CompareState.HEURISTICRESET;
pub const DTCLUCOMPARESTATE_INDOUBT = _DtcLu_CompareState.INDOUBT;
pub const DTCLUCOMPARESTATE_RESET = _DtcLu_CompareState.RESET;

pub const _DtcLu_CompareStates_Confirmation = enum(i32) {
    CONFIRM = 1,
    PROTOCOL = 2,
};
pub const DTCLUCOMPARESTATESCONFIRMATION_CONFIRM = _DtcLu_CompareStates_Confirmation.CONFIRM;
pub const DTCLUCOMPARESTATESCONFIRMATION_PROTOCOL = _DtcLu_CompareStates_Confirmation.PROTOCOL;

pub const _DtcLu_CompareStates_Error = enum(i32) {
    L = 1,
};
pub const DTCLUCOMPARESTATESERROR_PROTOCOL = _DtcLu_CompareStates_Error.L;

pub const _DtcLu_CompareStates_Response = enum(i32) {
    OK = 1,
    PROTOCOL = 2,
};
pub const DTCLUCOMPARESTATESRESPONSE_OK = _DtcLu_CompareStates_Response.OK;
pub const DTCLUCOMPARESTATESRESPONSE_PROTOCOL = _DtcLu_CompareStates_Response.PROTOCOL;

const IID_IDtcLuRecoveryInitiatedByDtcTransWork_Value = Guid.initString("4131e765-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuRecoveryInitiatedByDtcTransWork = &IID_IDtcLuRecoveryInitiatedByDtcTransWork_Value;
pub const IDtcLuRecoveryInitiatedByDtcTransWork = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLogNameSizes: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            pcb_our_log_name: ?*u32,
            pcb_remote_log_name: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurXln: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            p_xln: ?*_DtcLu_Xln,
            p_our_log_name: ?*u8,
            p_remote_log_name: ?*u8,
            pdw_protocol: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleConfirmationFromOurXln: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            confirmation: _DtcLu_Xln_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleTheirXlnResponse: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            xln: _DtcLu_Xln,
            p_remote_log_name: ?*u8,
            cb_remote_log_name: u32,
            dw_protocol: u32,
            p_confirmation: ?*_DtcLu_Xln_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleErrorFromOurXln: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            @"error": _DtcLu_Xln_Error,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckForCompareStates: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            f_compare_states: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurTransIdSize: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            pcb_our_trans_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurCompareStates: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            p_our_trans_id: ?*u8,
            p_compare_state: ?*_DtcLu_CompareState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleTheirCompareStatesResponse: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            compare_state: _DtcLu_CompareState,
            p_confirmation: ?*_DtcLu_CompareStates_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleErrorFromOurCompareStates: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            @"error": _DtcLu_CompareStates_Error,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConversationLost: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecoverySeqNum: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            pl_recovery_seq_num: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ObsoleteRecoverySeqNum: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            l_new_recovery_seq_num: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLogNameSizes(self: *const T, pcb_our_log_name_: ?*u32, pcb_remote_log_name_: ?*u32) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).GetLogNameSizes(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), pcb_our_log_name_, pcb_remote_log_name_);
            }
            pub inline fn getOurXln(self: *const T, p_xln_: ?*_DtcLu_Xln, p_our_log_name_: ?*u8, p_remote_log_name_: ?*u8, pdw_protocol_: ?*u32) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).GetOurXln(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), p_xln_, p_our_log_name_, p_remote_log_name_, pdw_protocol_);
            }
            pub inline fn handleConfirmationFromOurXln(self: *const T, confirmation_: _DtcLu_Xln_Confirmation) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).HandleConfirmationFromOurXln(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), confirmation_);
            }
            pub inline fn handleTheirXlnResponse(self: *const T, xln_: _DtcLu_Xln, p_remote_log_name_: ?*u8, cb_remote_log_name_: u32, dw_protocol_: u32, p_confirmation_: ?*_DtcLu_Xln_Confirmation) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).HandleTheirXlnResponse(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), xln_, p_remote_log_name_, cb_remote_log_name_, dw_protocol_, p_confirmation_);
            }
            pub inline fn handleErrorFromOurXln(self: *const T, error_: _DtcLu_Xln_Error) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).HandleErrorFromOurXln(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), error_);
            }
            pub inline fn checkForCompareStates(self: *const T, f_compare_states_: ?*BOOL) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).CheckForCompareStates(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), f_compare_states_);
            }
            pub inline fn getOurTransIdSize(self: *const T, pcb_our_trans_id_: ?*u32) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).GetOurTransIdSize(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), pcb_our_trans_id_);
            }
            pub inline fn getOurCompareStates(self: *const T, p_our_trans_id_: ?*u8, p_compare_state_: ?*_DtcLu_CompareState) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).GetOurCompareStates(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), p_our_trans_id_, p_compare_state_);
            }
            pub inline fn handleTheirCompareStatesResponse(self: *const T, compare_state_: _DtcLu_CompareState, p_confirmation_: ?*_DtcLu_CompareStates_Confirmation) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).HandleTheirCompareStatesResponse(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), compare_state_, p_confirmation_);
            }
            pub inline fn handleErrorFromOurCompareStates(self: *const T, error_: _DtcLu_CompareStates_Error) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).HandleErrorFromOurCompareStates(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), error_);
            }
            pub inline fn conversationLost(self: *const T) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).ConversationLost(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)));
            }
            pub inline fn getRecoverySeqNum(self: *const T, pl_recovery_seq_num_: ?*i32) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).GetRecoverySeqNum(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), pl_recovery_seq_num_);
            }
            pub inline fn obsoleteRecoverySeqNum(self: *const T, l_new_recovery_seq_num_: i32) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, @ptrCast(self.vtable)).ObsoleteRecoverySeqNum(@as(*const IDtcLuRecoveryInitiatedByDtcTransWork, @ptrCast(self)), l_new_recovery_seq_num_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryInitiatedByDtcStatusWork_Value = Guid.initString("4131e766-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuRecoveryInitiatedByDtcStatusWork = &IID_IDtcLuRecoveryInitiatedByDtcStatusWork_Value;
pub const IDtcLuRecoveryInitiatedByDtcStatusWork = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HandleCheckLuStatus: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtcStatusWork,
            l_recovery_seq_num: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn handleCheckLuStatus(self: *const T, l_recovery_seq_num_: i32) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtcStatusWork.VTable, @ptrCast(self.vtable)).HandleCheckLuStatus(@as(*const IDtcLuRecoveryInitiatedByDtcStatusWork, @ptrCast(self)), l_recovery_seq_num_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryInitiatedByDtc_Value = Guid.initString("4131e764-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuRecoveryInitiatedByDtc = &IID_IDtcLuRecoveryInitiatedByDtc_Value;
pub const IDtcLuRecoveryInitiatedByDtc = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWork: *const fn (
            self: *const IDtcLuRecoveryInitiatedByDtc,
            p_work: ?*_DtcLu_LocalRecovery_Work,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getWork(self: *const T, p_work_: ?*_DtcLu_LocalRecovery_Work, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByDtc.VTable, @ptrCast(self.vtable)).GetWork(@as(*const IDtcLuRecoveryInitiatedByDtc, @ptrCast(self)), p_work_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryInitiatedByLuWork_Value = Guid.initString("ac2b8ad1-d6f0-11d0-b386-00a0c9083365");
pub const IID_IDtcLuRecoveryInitiatedByLuWork = &IID_IDtcLuRecoveryInitiatedByLuWork_Value;
pub const IDtcLuRecoveryInitiatedByLuWork = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HandleTheirXln: *const fn (
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            l_recovery_seq_num: i32,
            xln: _DtcLu_Xln,
            p_remote_log_name: ?*u8,
            cb_remote_log_name: u32,
            p_our_log_name: ?*u8,
            cb_our_log_name: u32,
            dw_protocol: u32,
            p_response: ?*_DtcLu_Xln_Response,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurLogNameSize: *const fn (
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            pcb_our_log_name: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurXln: *const fn (
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            p_xln: ?*_DtcLu_Xln,
            p_our_log_name: ?*u8,
            pdw_protocol: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleConfirmationOfOurXln: *const fn (
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            confirmation: _DtcLu_Xln_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleTheirCompareStates: *const fn (
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            p_remote_trans_id: ?*u8,
            cb_remote_trans_id: u32,
            compare_state: _DtcLu_CompareState,
            p_response: ?*_DtcLu_CompareStates_Response,
            p_compare_state: ?*_DtcLu_CompareState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleConfirmationOfOurCompareStates: *const fn (
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            confirmation: _DtcLu_CompareStates_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleErrorFromOurCompareStates: *const fn (
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            @"error": _DtcLu_CompareStates_Error,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConversationLost: *const fn (
            self: *const IDtcLuRecoveryInitiatedByLuWork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn handleTheirXln(self: *const T, l_recovery_seq_num_: i32, xln_: _DtcLu_Xln, p_remote_log_name_: ?*u8, cb_remote_log_name_: u32, p_our_log_name_: ?*u8, cb_our_log_name_: u32, dw_protocol_: u32, p_response_: ?*_DtcLu_Xln_Response) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByLuWork.VTable, @ptrCast(self.vtable)).HandleTheirXln(@as(*const IDtcLuRecoveryInitiatedByLuWork, @ptrCast(self)), l_recovery_seq_num_, xln_, p_remote_log_name_, cb_remote_log_name_, p_our_log_name_, cb_our_log_name_, dw_protocol_, p_response_);
            }
            pub inline fn getOurLogNameSize(self: *const T, pcb_our_log_name_: ?*u32) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByLuWork.VTable, @ptrCast(self.vtable)).GetOurLogNameSize(@as(*const IDtcLuRecoveryInitiatedByLuWork, @ptrCast(self)), pcb_our_log_name_);
            }
            pub inline fn getOurXln(self: *const T, p_xln_: ?*_DtcLu_Xln, p_our_log_name_: ?*u8, pdw_protocol_: ?*u32) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByLuWork.VTable, @ptrCast(self.vtable)).GetOurXln(@as(*const IDtcLuRecoveryInitiatedByLuWork, @ptrCast(self)), p_xln_, p_our_log_name_, pdw_protocol_);
            }
            pub inline fn handleConfirmationOfOurXln(self: *const T, confirmation_: _DtcLu_Xln_Confirmation) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByLuWork.VTable, @ptrCast(self.vtable)).HandleConfirmationOfOurXln(@as(*const IDtcLuRecoveryInitiatedByLuWork, @ptrCast(self)), confirmation_);
            }
            pub inline fn handleTheirCompareStates(self: *const T, p_remote_trans_id_: ?*u8, cb_remote_trans_id_: u32, compare_state_: _DtcLu_CompareState, p_response_: ?*_DtcLu_CompareStates_Response, p_compare_state_: ?*_DtcLu_CompareState) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByLuWork.VTable, @ptrCast(self.vtable)).HandleTheirCompareStates(@as(*const IDtcLuRecoveryInitiatedByLuWork, @ptrCast(self)), p_remote_trans_id_, cb_remote_trans_id_, compare_state_, p_response_, p_compare_state_);
            }
            pub inline fn handleConfirmationOfOurCompareStates(self: *const T, confirmation_: _DtcLu_CompareStates_Confirmation) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByLuWork.VTable, @ptrCast(self.vtable)).HandleConfirmationOfOurCompareStates(@as(*const IDtcLuRecoveryInitiatedByLuWork, @ptrCast(self)), confirmation_);
            }
            pub inline fn handleErrorFromOurCompareStates(self: *const T, error_: _DtcLu_CompareStates_Error) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByLuWork.VTable, @ptrCast(self.vtable)).HandleErrorFromOurCompareStates(@as(*const IDtcLuRecoveryInitiatedByLuWork, @ptrCast(self)), error_);
            }
            pub inline fn conversationLost(self: *const T) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByLuWork.VTable, @ptrCast(self.vtable)).ConversationLost(@as(*const IDtcLuRecoveryInitiatedByLuWork, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryInitiatedByLu_Value = Guid.initString("4131e768-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuRecoveryInitiatedByLu = &IID_IDtcLuRecoveryInitiatedByLu_Value;
pub const IDtcLuRecoveryInitiatedByLu = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetObjectToHandleWorkFromLu: *const fn (
            self: *const IDtcLuRecoveryInitiatedByLu,
            pp_work: ?*?*IDtcLuRecoveryInitiatedByLuWork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getObjectToHandleWorkFromLu(self: *const T, pp_work_: ?*?*IDtcLuRecoveryInitiatedByLuWork) HRESULT {
                return @as(*const IDtcLuRecoveryInitiatedByLu.VTable, @ptrCast(self.vtable)).GetObjectToHandleWorkFromLu(@as(*const IDtcLuRecoveryInitiatedByLu, @ptrCast(self)), pp_work_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRmEnlistment_Value = Guid.initString("4131e769-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuRmEnlistment = &IID_IDtcLuRmEnlistment_Value;
pub const IDtcLuRmEnlistment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Unplug: *const fn (
            self: *const IDtcLuRmEnlistment,
            f_conversation_lost: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackedOut: *const fn (
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackOut: *const fn (
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Committed: *const fn (
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forget: *const fn (
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestCommit: *const fn (
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn unplug(self: *const T, f_conversation_lost_: BOOL) HRESULT {
                return @as(*const IDtcLuRmEnlistment.VTable, @ptrCast(self.vtable)).Unplug(@as(*const IDtcLuRmEnlistment, @ptrCast(self)), f_conversation_lost_);
            }
            pub inline fn backedOut(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistment.VTable, @ptrCast(self.vtable)).BackedOut(@as(*const IDtcLuRmEnlistment, @ptrCast(self)));
            }
            pub inline fn backOut(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistment.VTable, @ptrCast(self.vtable)).BackOut(@as(*const IDtcLuRmEnlistment, @ptrCast(self)));
            }
            pub inline fn committed(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistment.VTable, @ptrCast(self.vtable)).Committed(@as(*const IDtcLuRmEnlistment, @ptrCast(self)));
            }
            pub inline fn forget(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistment.VTable, @ptrCast(self.vtable)).Forget(@as(*const IDtcLuRmEnlistment, @ptrCast(self)));
            }
            pub inline fn requestCommit(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistment.VTable, @ptrCast(self.vtable)).RequestCommit(@as(*const IDtcLuRmEnlistment, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRmEnlistmentSink_Value = Guid.initString("4131e770-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuRmEnlistmentSink = &IID_IDtcLuRmEnlistmentSink_Value;
pub const IDtcLuRmEnlistmentSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AckUnplug: *const fn (
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TmDown: *const fn (
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SessionLost: *const fn (
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackedOut: *const fn (
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackOut: *const fn (
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Committed: *const fn (
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forget: *const fn (
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Prepare: *const fn (
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestCommit: *const fn (
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn ackUnplug(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistmentSink.VTable, @ptrCast(self.vtable)).AckUnplug(@as(*const IDtcLuRmEnlistmentSink, @ptrCast(self)));
            }
            pub inline fn tmDown(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistmentSink.VTable, @ptrCast(self.vtable)).TmDown(@as(*const IDtcLuRmEnlistmentSink, @ptrCast(self)));
            }
            pub inline fn sessionLost(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistmentSink.VTable, @ptrCast(self.vtable)).SessionLost(@as(*const IDtcLuRmEnlistmentSink, @ptrCast(self)));
            }
            pub inline fn backedOut(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistmentSink.VTable, @ptrCast(self.vtable)).BackedOut(@as(*const IDtcLuRmEnlistmentSink, @ptrCast(self)));
            }
            pub inline fn backOut(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistmentSink.VTable, @ptrCast(self.vtable)).BackOut(@as(*const IDtcLuRmEnlistmentSink, @ptrCast(self)));
            }
            pub inline fn committed(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistmentSink.VTable, @ptrCast(self.vtable)).Committed(@as(*const IDtcLuRmEnlistmentSink, @ptrCast(self)));
            }
            pub inline fn forget(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistmentSink.VTable, @ptrCast(self.vtable)).Forget(@as(*const IDtcLuRmEnlistmentSink, @ptrCast(self)));
            }
            pub inline fn prepare(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistmentSink.VTable, @ptrCast(self.vtable)).Prepare(@as(*const IDtcLuRmEnlistmentSink, @ptrCast(self)));
            }
            pub inline fn requestCommit(self: *const T) HRESULT {
                return @as(*const IDtcLuRmEnlistmentSink.VTable, @ptrCast(self.vtable)).RequestCommit(@as(*const IDtcLuRmEnlistmentSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRmEnlistmentFactory_Value = Guid.initString("4131e771-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuRmEnlistmentFactory = &IID_IDtcLuRmEnlistmentFactory_Value;
pub const IDtcLuRmEnlistmentFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IDtcLuRmEnlistmentFactory,
            puc_lu_pair: ?*u8,
            cb_lu_pair: u32,
            p_i_transaction: ?*ITransaction,
            p_trans_id: ?*u8,
            cb_trans_id: u32,
            p_rm_enlistment_sink: ?*IDtcLuRmEnlistmentSink,
            pp_rm_enlistment: ?*?*IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, puc_lu_pair_: ?*u8, cb_lu_pair_: u32, p_i_transaction_: ?*ITransaction, p_trans_id_: ?*u8, cb_trans_id_: u32, p_rm_enlistment_sink_: ?*IDtcLuRmEnlistmentSink, pp_rm_enlistment_: ?*?*IDtcLuRmEnlistment) HRESULT {
                return @as(*const IDtcLuRmEnlistmentFactory.VTable, @ptrCast(self.vtable)).Create(@as(*const IDtcLuRmEnlistmentFactory, @ptrCast(self)), puc_lu_pair_, cb_lu_pair_, p_i_transaction_, p_trans_id_, cb_trans_id_, p_rm_enlistment_sink_, pp_rm_enlistment_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuSubordinateDtc_Value = Guid.initString("4131e773-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuSubordinateDtc = &IID_IDtcLuSubordinateDtc_Value;
pub const IDtcLuSubordinateDtc = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Unplug: *const fn (
            self: *const IDtcLuSubordinateDtc,
            f_conversation_lost: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackedOut: *const fn (
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackOut: *const fn (
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Committed: *const fn (
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forget: *const fn (
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Prepare: *const fn (
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestCommit: *const fn (
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn unplug(self: *const T, f_conversation_lost_: BOOL) HRESULT {
                return @as(*const IDtcLuSubordinateDtc.VTable, @ptrCast(self.vtable)).Unplug(@as(*const IDtcLuSubordinateDtc, @ptrCast(self)), f_conversation_lost_);
            }
            pub inline fn backedOut(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtc.VTable, @ptrCast(self.vtable)).BackedOut(@as(*const IDtcLuSubordinateDtc, @ptrCast(self)));
            }
            pub inline fn backOut(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtc.VTable, @ptrCast(self.vtable)).BackOut(@as(*const IDtcLuSubordinateDtc, @ptrCast(self)));
            }
            pub inline fn committed(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtc.VTable, @ptrCast(self.vtable)).Committed(@as(*const IDtcLuSubordinateDtc, @ptrCast(self)));
            }
            pub inline fn forget(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtc.VTable, @ptrCast(self.vtable)).Forget(@as(*const IDtcLuSubordinateDtc, @ptrCast(self)));
            }
            pub inline fn prepare(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtc.VTable, @ptrCast(self.vtable)).Prepare(@as(*const IDtcLuSubordinateDtc, @ptrCast(self)));
            }
            pub inline fn requestCommit(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtc.VTable, @ptrCast(self.vtable)).RequestCommit(@as(*const IDtcLuSubordinateDtc, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuSubordinateDtcSink_Value = Guid.initString("4131e774-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuSubordinateDtcSink = &IID_IDtcLuSubordinateDtcSink_Value;
pub const IDtcLuSubordinateDtcSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AckUnplug: *const fn (
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TmDown: *const fn (
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SessionLost: *const fn (
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackedOut: *const fn (
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackOut: *const fn (
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Committed: *const fn (
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forget: *const fn (
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestCommit: *const fn (
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn ackUnplug(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtcSink.VTable, @ptrCast(self.vtable)).AckUnplug(@as(*const IDtcLuSubordinateDtcSink, @ptrCast(self)));
            }
            pub inline fn tmDown(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtcSink.VTable, @ptrCast(self.vtable)).TmDown(@as(*const IDtcLuSubordinateDtcSink, @ptrCast(self)));
            }
            pub inline fn sessionLost(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtcSink.VTable, @ptrCast(self.vtable)).SessionLost(@as(*const IDtcLuSubordinateDtcSink, @ptrCast(self)));
            }
            pub inline fn backedOut(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtcSink.VTable, @ptrCast(self.vtable)).BackedOut(@as(*const IDtcLuSubordinateDtcSink, @ptrCast(self)));
            }
            pub inline fn backOut(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtcSink.VTable, @ptrCast(self.vtable)).BackOut(@as(*const IDtcLuSubordinateDtcSink, @ptrCast(self)));
            }
            pub inline fn committed(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtcSink.VTable, @ptrCast(self.vtable)).Committed(@as(*const IDtcLuSubordinateDtcSink, @ptrCast(self)));
            }
            pub inline fn forget(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtcSink.VTable, @ptrCast(self.vtable)).Forget(@as(*const IDtcLuSubordinateDtcSink, @ptrCast(self)));
            }
            pub inline fn requestCommit(self: *const T) HRESULT {
                return @as(*const IDtcLuSubordinateDtcSink.VTable, @ptrCast(self.vtable)).RequestCommit(@as(*const IDtcLuSubordinateDtcSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuSubordinateDtcFactory_Value = Guid.initString("4131e775-1aea-11d0-944b-00a0c905416e");
pub const IID_IDtcLuSubordinateDtcFactory = &IID_IDtcLuSubordinateDtcFactory_Value;
pub const IDtcLuSubordinateDtcFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IDtcLuSubordinateDtcFactory,
            puc_lu_pair: ?*u8,
            cb_lu_pair: u32,
            punk_transaction_outer: ?*IUnknown,
            iso_level: i32,
            iso_flags: u32,
            p_options: ?*ITransactionOptions,
            pp_transaction: ?*?*ITransaction,
            p_trans_id: ?*u8,
            cb_trans_id: u32,
            p_subordinate_dtc_sink: ?*IDtcLuSubordinateDtcSink,
            pp_subordinate_dtc: ?*?*IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, puc_lu_pair_: ?*u8, cb_lu_pair_: u32, punk_transaction_outer_: ?*IUnknown, iso_level_: i32, iso_flags_: u32, p_options_: ?*ITransactionOptions, pp_transaction_: ?*?*ITransaction, p_trans_id_: ?*u8, cb_trans_id_: u32, p_subordinate_dtc_sink_: ?*IDtcLuSubordinateDtcSink, pp_subordinate_dtc_: ?*?*IDtcLuSubordinateDtc) HRESULT {
                return @as(*const IDtcLuSubordinateDtcFactory.VTable, @ptrCast(self.vtable)).Create(@as(*const IDtcLuSubordinateDtcFactory, @ptrCast(self)), puc_lu_pair_, cb_lu_pair_, punk_transaction_outer_, iso_level_, iso_flags_, p_options_, pp_transaction_, p_trans_id_, cb_trans_id_, p_subordinate_dtc_sink_, pp_subordinate_dtc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (4)
//--------------------------------------------------------------------------------
pub extern "xolehlp" fn DtcGetTransactionManager(
    i_psz_host: ?PSTR,
    i_psz_tm_name: ?PSTR,
    i_riid: ?*const Guid,
    i_dw_reserved1: u32,
    i_wcb_reserved2: u16,
    // TODO: what to do with BytesParamIndex 4?
    i_pv_reserved2: ?*anyopaque,
    o_ppv_object: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "xolehlp" fn DtcGetTransactionManagerC(
    i_psz_host: ?PSTR,
    i_psz_tm_name: ?PSTR,
    i_riid: ?*const Guid,
    i_dw_reserved1: u32,
    i_wcb_reserved2: u16,
    // TODO: what to do with BytesParamIndex 4?
    i_pv_reserved2: ?*anyopaque,
    o_ppv_object: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "xolehlp" fn DtcGetTransactionManagerExA(
    i_psz_host: ?PSTR,
    i_psz_tm_name: ?PSTR,
    i_riid: ?*const Guid,
    i_grf_options: u32,
    i_pv_config_params: ?*anyopaque,
    o_ppv_object: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "xolehlp" fn DtcGetTransactionManagerExW(
    i_pwsz_host: ?PWSTR,
    i_pwsz_tm_name: ?PWSTR,
    i_riid: ?*const Guid,
    i_grf_options: u32,
    i_pv_config_params: ?*anyopaque,
    o_ppv_object: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (2)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DTC_GET_TRANSACTION_MANAGER_EX_ = thismodule.DTC_GET_TRANSACTION_MANAGER_EX_A;
        pub const DtcGetTransactionManagerEx = thismodule.DtcGetTransactionManagerExA;
    },
    .wide => struct {
        pub const DTC_GET_TRANSACTION_MANAGER_EX_ = thismodule.DTC_GET_TRANSACTION_MANAGER_EX_W;
        pub const DtcGetTransactionManagerEx = thismodule.DtcGetTransactionManagerExW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const DTC_GET_TRANSACTION_MANAGER_EX_ = *opaque {};
        pub const DtcGetTransactionManagerEx = *opaque {};
    } else struct {
        pub const DTC_GET_TRANSACTION_MANAGER_EX_ = @compileError("'DTC_GET_TRANSACTION_MANAGER_EX_' requires that UNICODE be set to true or false in the root module");
        pub const DtcGetTransactionManagerEx = @compileError("'DtcGetTransactionManagerEx' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const CHAR = @import("../foundation.zig").CHAR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const IMoniker = @import("../system/com.zig").IMoniker;
const IUnknown = @import("../system/com.zig").IUnknown;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "DTC_GET_TRANSACTION_MANAGER")) {
        _ = DTC_GET_TRANSACTION_MANAGER;
    }
    if (@hasDecl(@This(), "DTC_GET_TRANSACTION_MANAGER_EX_A")) {
        _ = DTC_GET_TRANSACTION_MANAGER_EX_A;
    }
    if (@hasDecl(@This(), "DTC_GET_TRANSACTION_MANAGER_EX_W")) {
        _ = DTC_GET_TRANSACTION_MANAGER_EX_W;
    }
    if (@hasDecl(@This(), "DTC_INSTALL_CLIENT")) {
        _ = DTC_INSTALL_CLIENT;
    }
    if (@hasDecl(@This(), "XA_OPEN_EPT")) {
        _ = XA_OPEN_EPT;
    }
    if (@hasDecl(@This(), "XA_CLOSE_EPT")) {
        _ = XA_CLOSE_EPT;
    }
    if (@hasDecl(@This(), "XA_START_EPT")) {
        _ = XA_START_EPT;
    }
    if (@hasDecl(@This(), "XA_END_EPT")) {
        _ = XA_END_EPT;
    }
    if (@hasDecl(@This(), "XA_ROLLBACK_EPT")) {
        _ = XA_ROLLBACK_EPT;
    }
    if (@hasDecl(@This(), "XA_PREPARE_EPT")) {
        _ = XA_PREPARE_EPT;
    }
    if (@hasDecl(@This(), "XA_COMMIT_EPT")) {
        _ = XA_COMMIT_EPT;
    }
    if (@hasDecl(@This(), "XA_RECOVER_EPT")) {
        _ = XA_RECOVER_EPT;
    }
    if (@hasDecl(@This(), "XA_FORGET_EPT")) {
        _ = XA_FORGET_EPT;
    }
    if (@hasDecl(@This(), "XA_COMPLETE_EPT")) {
        _ = XA_COMPLETE_EPT;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
