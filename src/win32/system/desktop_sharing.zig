//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (124)
//--------------------------------------------------------------------------------
pub const DISPID_RDPSRAPI_METHOD_OPEN = @as(u32, 100);
pub const DISPID_RDPSRAPI_METHOD_CLOSE = @as(u32, 101);
pub const DISPID_RDPSRAPI_METHOD_SETSHAREDRECT = @as(u32, 102);
pub const DISPID_RDPSRAPI_METHOD_GETSHAREDRECT = @as(u32, 103);
pub const DISPID_RDPSRAPI_METHOD_VIEWERCONNECT = @as(u32, 104);
pub const DISPID_RDPSRAPI_METHOD_VIEWERDISCONNECT = @as(u32, 105);
pub const DISPID_RDPSRAPI_METHOD_TERMINATE_CONNECTION = @as(u32, 106);
pub const DISPID_RDPSRAPI_METHOD_CREATE_INVITATION = @as(u32, 107);
pub const DISPID_RDPSRAPI_METHOD_REQUEST_CONTROL = @as(u32, 108);
pub const DISPID_RDPSRAPI_METHOD_VIRTUAL_CHANNEL_CREATE = @as(u32, 109);
pub const DISPID_RDPSRAPI_METHOD_VIRTUAL_CHANNEL_SEND_DATA = @as(u32, 110);
pub const DISPID_RDPSRAPI_METHOD_VIRTUAL_CHANNEL_SET_ACCESS = @as(u32, 111);
pub const DISPID_RDPSRAPI_METHOD_PAUSE = @as(u32, 112);
pub const DISPID_RDPSRAPI_METHOD_RESUME = @as(u32, 113);
pub const DISPID_RDPSRAPI_METHOD_SHOW_WINDOW = @as(u32, 114);
pub const DISPID_RDPSRAPI_METHOD_REQUEST_COLOR_DEPTH_CHANGE = @as(u32, 115);
pub const DISPID_RDPSRAPI_METHOD_STARTREVCONNECTLISTENER = @as(u32, 116);
pub const DISPID_RDPSRAPI_METHOD_CONNECTTOCLIENT = @as(u32, 117);
pub const DISPID_RDPSRAPI_METHOD_SET_RENDERING_SURFACE = @as(u32, 118);
pub const DISPID_RDPSRAPI_METHOD_SEND_MOUSE_BUTTON_EVENT = @as(u32, 119);
pub const DISPID_RDPSRAPI_METHOD_SEND_MOUSE_MOVE_EVENT = @as(u32, 120);
pub const DISPID_RDPSRAPI_METHOD_SEND_MOUSE_WHEEL_EVENT = @as(u32, 121);
pub const DISPID_RDPSRAPI_METHOD_SEND_KEYBOARD_EVENT = @as(u32, 122);
pub const DISPID_RDPSRAPI_METHOD_SEND_SYNC_EVENT = @as(u32, 123);
pub const DISPID_RDPSRAPI_METHOD_BEGIN_TOUCH_FRAME = @as(u32, 124);
pub const DISPID_RDPSRAPI_METHOD_ADD_TOUCH_INPUT = @as(u32, 125);
pub const DISPID_RDPSRAPI_METHOD_END_TOUCH_FRAME = @as(u32, 126);
pub const DISPID_RDPSRAPI_METHOD_CONNECTUSINGTRANSPORTSTREAM = @as(u32, 127);
pub const DISPID_RDPSRAPI_METHOD_SENDCONTROLLEVELCHANGERESPONSE = @as(u32, 148);
pub const DISPID_RDPSRAPI_METHOD_GETFRAMEBUFFERBITS = @as(u32, 149);
pub const DISPID_RDPSRAPI_PROP_DISPIDVALUE = @as(u32, 200);
pub const DISPID_RDPSRAPI_PROP_ID = @as(u32, 201);
pub const DISPID_RDPSRAPI_PROP_SESSION_PROPERTIES = @as(u32, 202);
pub const DISPID_RDPSRAPI_PROP_ATTENDEES = @as(u32, 203);
pub const DISPID_RDPSRAPI_PROP_INVITATIONS = @as(u32, 204);
pub const DISPID_RDPSRAPI_PROP_INVITATION = @as(u32, 205);
pub const DISPID_RDPSRAPI_PROP_CHANNELMANAGER = @as(u32, 206);
pub const DISPID_RDPSRAPI_PROP_VIRTUAL_CHANNEL_GETNAME = @as(u32, 207);
pub const DISPID_RDPSRAPI_PROP_VIRTUAL_CHANNEL_GETFLAGS = @as(u32, 208);
pub const DISPID_RDPSRAPI_PROP_VIRTUAL_CHANNEL_GETPRIORITY = @as(u32, 209);
pub const DISPID_RDPSRAPI_PROP_WINDOWID = @as(u32, 210);
pub const DISPID_RDPSRAPI_PROP_APPLICATION = @as(u32, 211);
pub const DISPID_RDPSRAPI_PROP_WINDOWSHARED = @as(u32, 212);
pub const DISPID_RDPSRAPI_PROP_WINDOWNAME = @as(u32, 213);
pub const DISPID_RDPSRAPI_PROP_APPNAME = @as(u32, 214);
pub const DISPID_RDPSRAPI_PROP_APPLICATION_FILTER = @as(u32, 215);
pub const DISPID_RDPSRAPI_PROP_WINDOW_LIST = @as(u32, 216);
pub const DISPID_RDPSRAPI_PROP_APPLICATION_LIST = @as(u32, 217);
pub const DISPID_RDPSRAPI_PROP_APPFILTER_ENABLED = @as(u32, 218);
pub const DISPID_RDPSRAPI_PROP_APPFILTERENABLED = @as(u32, 219);
pub const DISPID_RDPSRAPI_PROP_SHARED = @as(u32, 220);
pub const DISPID_RDPSRAPI_PROP_INVITATIONITEM = @as(u32, 221);
pub const DISPID_RDPSRAPI_PROP_DBG_CLX_CMDLINE = @as(u32, 222);
pub const DISPID_RDPSRAPI_PROP_APPFLAGS = @as(u32, 223);
pub const DISPID_RDPSRAPI_PROP_WNDFLAGS = @as(u32, 224);
pub const DISPID_RDPSRAPI_PROP_PROTOCOL_TYPE = @as(u32, 225);
pub const DISPID_RDPSRAPI_PROP_LOCAL_PORT = @as(u32, 226);
pub const DISPID_RDPSRAPI_PROP_LOCAL_IP = @as(u32, 227);
pub const DISPID_RDPSRAPI_PROP_PEER_PORT = @as(u32, 228);
pub const DISPID_RDPSRAPI_PROP_PEER_IP = @as(u32, 229);
pub const DISPID_RDPSRAPI_PROP_ATTENDEE_FLAGS = @as(u32, 230);
pub const DISPID_RDPSRAPI_PROP_CONINFO = @as(u32, 231);
pub const DISPID_RDPSRAPI_PROP_CONNECTION_STRING = @as(u32, 232);
pub const DISPID_RDPSRAPI_PROP_GROUP_NAME = @as(u32, 233);
pub const DISPID_RDPSRAPI_PROP_PASSWORD = @as(u32, 234);
pub const DISPID_RDPSRAPI_PROP_ATTENDEELIMIT = @as(u32, 235);
pub const DISPID_RDPSRAPI_PROP_REVOKED = @as(u32, 236);
pub const DISPID_RDPSRAPI_PROP_DISCONNECTED_STRING = @as(u32, 237);
pub const DISPID_RDPSRAPI_PROP_USESMARTSIZING = @as(u32, 238);
pub const DISPID_RDPSRAPI_PROP_SESSION_COLORDEPTH = @as(u32, 239);
pub const DISPID_RDPSRAPI_PROP_REASON = @as(u32, 240);
pub const DISPID_RDPSRAPI_PROP_CODE = @as(u32, 241);
pub const DISPID_RDPSRAPI_PROP_CTRL_LEVEL = @as(u32, 242);
pub const DISPID_RDPSRAPI_PROP_REMOTENAME = @as(u32, 243);
pub const DISPID_RDPSRAPI_PROP_COUNT = @as(u32, 244);
pub const DISPID_RDPSRAPI_PROP_FRAMEBUFFER_HEIGHT = @as(u32, 251);
pub const DISPID_RDPSRAPI_PROP_FRAMEBUFFER_WIDTH = @as(u32, 252);
pub const DISPID_RDPSRAPI_PROP_FRAMEBUFFER_BPP = @as(u32, 253);
pub const DISPID_RDPSRAPI_PROP_FRAMEBUFFER = @as(u32, 254);
pub const DISPID_RDPSRAPI_EVENT_ON_ATTENDEE_CONNECTED = @as(u32, 301);
pub const DISPID_RDPSRAPI_EVENT_ON_ATTENDEE_DISCONNECTED = @as(u32, 302);
pub const DISPID_RDPSRAPI_EVENT_ON_ATTENDEE_UPDATE = @as(u32, 303);
pub const DISPID_RDPSRAPI_EVENT_ON_ERROR = @as(u32, 304);
pub const DISPID_RDPSRAPI_EVENT_ON_VIEWER_CONNECTED = @as(u32, 305);
pub const DISPID_RDPSRAPI_EVENT_ON_VIEWER_DISCONNECTED = @as(u32, 306);
pub const DISPID_RDPSRAPI_EVENT_ON_VIEWER_AUTHENTICATED = @as(u32, 307);
pub const DISPID_RDPSRAPI_EVENT_ON_VIEWER_CONNECTFAILED = @as(u32, 308);
pub const DISPID_RDPSRAPI_EVENT_ON_CTRLLEVEL_CHANGE_REQUEST = @as(u32, 309);
pub const DISPID_RDPSRAPI_EVENT_ON_GRAPHICS_STREAM_PAUSED = @as(u32, 310);
pub const DISPID_RDPSRAPI_EVENT_ON_GRAPHICS_STREAM_RESUMED = @as(u32, 311);
pub const DISPID_RDPSRAPI_EVENT_ON_VIRTUAL_CHANNEL_JOIN = @as(u32, 312);
pub const DISPID_RDPSRAPI_EVENT_ON_VIRTUAL_CHANNEL_LEAVE = @as(u32, 313);
pub const DISPID_RDPSRAPI_EVENT_ON_VIRTUAL_CHANNEL_DATARECEIVED = @as(u32, 314);
pub const DISPID_RDPSRAPI_EVENT_ON_VIRTUAL_CHANNEL_SENDCOMPLETED = @as(u32, 315);
pub const DISPID_RDPSRAPI_EVENT_ON_APPLICATION_OPEN = @as(u32, 316);
pub const DISPID_RDPSRAPI_EVENT_ON_APPLICATION_CLOSE = @as(u32, 317);
pub const DISPID_RDPSRAPI_EVENT_ON_APPLICATION_UPDATE = @as(u32, 318);
pub const DISPID_RDPSRAPI_EVENT_ON_WINDOW_OPEN = @as(u32, 319);
pub const DISPID_RDPSRAPI_EVENT_ON_WINDOW_CLOSE = @as(u32, 320);
pub const DISPID_RDPSRAPI_EVENT_ON_WINDOW_UPDATE = @as(u32, 321);
pub const DISPID_RDPSRAPI_EVENT_ON_APPFILTER_UPDATE = @as(u32, 322);
pub const DISPID_RDPSRAPI_EVENT_ON_SHARED_RECT_CHANGED = @as(u32, 323);
pub const DISPID_RDPSRAPI_EVENT_ON_FOCUSRELEASED = @as(u32, 324);
pub const DISPID_RDPSRAPI_EVENT_ON_SHARED_DESKTOP_SETTINGS_CHANGED = @as(u32, 325);
pub const DISPID_RDPSRAPI_EVENT_ON_CTRLLEVEL_CHANGE_RESPONSE = @as(u32, 338);
pub const DISPID_RDPAPI_EVENT_ON_BOUNDING_RECT_CHANGED = @as(u32, 340);
pub const DISPID_RDPSRAPI_METHOD_STREAM_ALLOCBUFFER = @as(u32, 421);
pub const DISPID_RDPSRAPI_METHOD_STREAM_FREEBUFFER = @as(u32, 422);
pub const DISPID_RDPSRAPI_METHOD_STREAMSENDDATA = @as(u32, 423);
pub const DISPID_RDPSRAPI_METHOD_STREAMREADDATA = @as(u32, 424);
pub const DISPID_RDPSRAPI_METHOD_STREAMOPEN = @as(u32, 425);
pub const DISPID_RDPSRAPI_METHOD_STREAMCLOSE = @as(u32, 426);
pub const DISPID_RDPSRAPI_PROP_STREAMBUFFER_STORAGE = @as(u32, 555);
pub const DISPID_RDPSRAPI_PROP_STREAMBUFFER_PAYLOADSIZE = @as(u32, 558);
pub const DISPID_RDPSRAPI_PROP_STREAMBUFFER_PAYLOADOFFSET = @as(u32, 559);
pub const DISPID_RDPSRAPI_PROP_STREAMBUFFER_CONTEXT = @as(u32, 560);
pub const DISPID_RDPSRAPI_PROP_STREAMBUFFER_FLAGS = @as(u32, 561);
pub const DISPID_RDPSRAPI_PROP_STREAMBUFFER_STORESIZE = @as(u32, 562);
pub const DISPID_RDPSRAPI_EVENT_ON_STREAM_SENDCOMPLETED = @as(u32, 632);
pub const DISPID_RDPSRAPI_EVENT_ON_STREAM_DATARECEIVED = @as(u32, 633);
pub const DISPID_RDPSRAPI_EVENT_ON_STREAM_CLOSED = @as(u32, 634);
pub const DISPID_RDPSRAPI_EVENT_VIEW_MOUSE_BUTTON_RECEIVED = @as(u32, 700);
pub const DISPID_RDPSRAPI_EVENT_VIEW_MOUSE_MOVE_RECEIVED = @as(u32, 701);
pub const DISPID_RDPSRAPI_EVENT_VIEW_MOUSE_WHEEL_RECEIVED = @as(u32, 702);

//--------------------------------------------------------------------------------
// Section: Types (58)
//--------------------------------------------------------------------------------
const CLSID_RDPViewer_Value = Guid.initString("32be5ed2-5c86-480f-a914-0ff8885a1b3f");
pub const CLSID_RDPViewer = &CLSID_RDPViewer_Value;

const CLSID_RDPSRAPISessionProperties_Value = Guid.initString("dd7594ff-ea2a-4c06-8fdf-132de48b6510");
pub const CLSID_RDPSRAPISessionProperties = &CLSID_RDPSRAPISessionProperties_Value;

const CLSID_RDPSRAPIInvitationManager_Value = Guid.initString("53d9c9db-75ab-4271-948a-4c4eb36a8f2b");
pub const CLSID_RDPSRAPIInvitationManager = &CLSID_RDPSRAPIInvitationManager_Value;

const CLSID_RDPSRAPIInvitation_Value = Guid.initString("49174dc6-0731-4b5e-8ee1-83a63d3868fa");
pub const CLSID_RDPSRAPIInvitation = &CLSID_RDPSRAPIInvitation_Value;

const CLSID_RDPSRAPIAttendeeManager_Value = Guid.initString("d7b13a01-f7d4-42a6-8595-12fc8c24e851");
pub const CLSID_RDPSRAPIAttendeeManager = &CLSID_RDPSRAPIAttendeeManager_Value;

const CLSID_RDPSRAPIAttendee_Value = Guid.initString("74f93bb5-755f-488e-8a29-2390108aef55");
pub const CLSID_RDPSRAPIAttendee = &CLSID_RDPSRAPIAttendee_Value;

const CLSID_RDPSRAPIAttendeeDisconnectInfo_Value = Guid.initString("b47d7250-5bdb-405d-b487-caad9c56f4f8");
pub const CLSID_RDPSRAPIAttendeeDisconnectInfo = &CLSID_RDPSRAPIAttendeeDisconnectInfo_Value;

const CLSID_RDPSRAPIApplicationFilter_Value = Guid.initString("e35ace89-c7e8-427e-a4f9-b9da072826bd");
pub const CLSID_RDPSRAPIApplicationFilter = &CLSID_RDPSRAPIApplicationFilter_Value;

const CLSID_RDPSRAPIApplicationList_Value = Guid.initString("9e31c815-7433-4876-97fb-ed59fe2baa22");
pub const CLSID_RDPSRAPIApplicationList = &CLSID_RDPSRAPIApplicationList_Value;

const CLSID_RDPSRAPIApplication_Value = Guid.initString("c116a484-4b25-4b9f-8a54-b934b06e57fa");
pub const CLSID_RDPSRAPIApplication = &CLSID_RDPSRAPIApplication_Value;

const CLSID_RDPSRAPIWindowList_Value = Guid.initString("9c21e2b8-5dd4-42cc-81ba-1c099852e6fa");
pub const CLSID_RDPSRAPIWindowList = &CLSID_RDPSRAPIWindowList_Value;

const CLSID_RDPSRAPIWindow_Value = Guid.initString("03cf46db-ce45-4d36-86ed-ed28b74398bf");
pub const CLSID_RDPSRAPIWindow = &CLSID_RDPSRAPIWindow_Value;

const CLSID_RDPSRAPITcpConnectionInfo_Value = Guid.initString("be49db3f-ebb6-4278-8ce0-d5455833eaee");
pub const CLSID_RDPSRAPITcpConnectionInfo = &CLSID_RDPSRAPITcpConnectionInfo_Value;

const CLSID_RDPSession_Value = Guid.initString("9b78f0e6-3e05-4a5b-b2e8-e743a8956b65");
pub const CLSID_RDPSession = &CLSID_RDPSession_Value;

const CLSID_RDPSRAPIFrameBuffer_Value = Guid.initString("a4f66bcc-538e-4101-951d-30847adb5101");
pub const CLSID_RDPSRAPIFrameBuffer = &CLSID_RDPSRAPIFrameBuffer_Value;

const CLSID_RDPTransportStreamBuffer_Value = Guid.initString("8d4a1c69-f17f-4549-a699-761c6e6b5c0a");
pub const CLSID_RDPTransportStreamBuffer = &CLSID_RDPTransportStreamBuffer_Value;

const CLSID_RDPTransportStreamEvents_Value = Guid.initString("31e3ab20-5350-483f-9dc6-6748665efdeb");
pub const CLSID_RDPTransportStreamEvents = &CLSID_RDPTransportStreamEvents_Value;

pub const CTRL_LEVEL = enum(i32) {
    MIN = 0,
    // INVALID = 0, this enum value conflicts with MIN
    NONE = 1,
    VIEW = 2,
    INTERACTIVE = 3,
    REQCTRL_VIEW = 4,
    REQCTRL_INTERACTIVE = 5,
    // MAX = 5, this enum value conflicts with REQCTRL_INTERACTIVE
};
pub const CTRL_LEVEL_MIN = CTRL_LEVEL.MIN;
pub const CTRL_LEVEL_INVALID = CTRL_LEVEL.MIN;
pub const CTRL_LEVEL_NONE = CTRL_LEVEL.NONE;
pub const CTRL_LEVEL_VIEW = CTRL_LEVEL.VIEW;
pub const CTRL_LEVEL_INTERACTIVE = CTRL_LEVEL.INTERACTIVE;
pub const CTRL_LEVEL_REQCTRL_VIEW = CTRL_LEVEL.REQCTRL_VIEW;
pub const CTRL_LEVEL_REQCTRL_INTERACTIVE = CTRL_LEVEL.REQCTRL_INTERACTIVE;
pub const CTRL_LEVEL_MAX = CTRL_LEVEL.REQCTRL_INTERACTIVE;

pub const ATTENDEE_DISCONNECT_REASON = enum(i32) {
    MIN = 0,
    // APP = 0, this enum value conflicts with MIN
    ERR = 1,
    CLI = 2,
    // MAX = 2, this enum value conflicts with CLI
};
pub const ATTENDEE_DISCONNECT_REASON_MIN = ATTENDEE_DISCONNECT_REASON.MIN;
pub const ATTENDEE_DISCONNECT_REASON_APP = ATTENDEE_DISCONNECT_REASON.MIN;
pub const ATTENDEE_DISCONNECT_REASON_ERR = ATTENDEE_DISCONNECT_REASON.ERR;
pub const ATTENDEE_DISCONNECT_REASON_CLI = ATTENDEE_DISCONNECT_REASON.CLI;
pub const ATTENDEE_DISCONNECT_REASON_MAX = ATTENDEE_DISCONNECT_REASON.CLI;

pub const CHANNEL_PRIORITY = enum(i32) {
    LO = 0,
    MED = 1,
    HI = 2,
};
pub const CHANNEL_PRIORITY_LO = CHANNEL_PRIORITY.LO;
pub const CHANNEL_PRIORITY_MED = CHANNEL_PRIORITY.MED;
pub const CHANNEL_PRIORITY_HI = CHANNEL_PRIORITY.HI;

pub const CHANNEL_FLAGS = enum(i32) {
    LEGACY = 1,
    UNCOMPRESSED = 2,
    DYNAMIC = 4,
};
pub const CHANNEL_FLAGS_LEGACY = CHANNEL_FLAGS.LEGACY;
pub const CHANNEL_FLAGS_UNCOMPRESSED = CHANNEL_FLAGS.UNCOMPRESSED;
pub const CHANNEL_FLAGS_DYNAMIC = CHANNEL_FLAGS.DYNAMIC;

pub const CHANNEL_ACCESS_ENUM = enum(i32) {
    NONE = 0,
    SENDRECEIVE = 1,
};
pub const CHANNEL_ACCESS_ENUM_NONE = CHANNEL_ACCESS_ENUM.NONE;
pub const CHANNEL_ACCESS_ENUM_SENDRECEIVE = CHANNEL_ACCESS_ENUM.SENDRECEIVE;

pub const RDPENCOMAPI_ATTENDEE_FLAGS = enum(i32) {
    L = 1,
};
pub const ATTENDEE_FLAGS_LOCAL = RDPENCOMAPI_ATTENDEE_FLAGS.L;

pub const RDPSRAPI_WND_FLAGS = enum(i32) {
    D = 1,
};
pub const WND_FLAG_PRIVILEGED = RDPSRAPI_WND_FLAGS.D;

pub const RDPSRAPI_APP_FLAGS = enum(i32) {
    D = 1,
};
pub const APP_FLAG_PRIVILEGED = RDPSRAPI_APP_FLAGS.D;

pub const RDPSRAPI_MOUSE_BUTTON_TYPE = enum(i32) {
    BUTTON1 = 0,
    BUTTON2 = 1,
    BUTTON3 = 2,
    XBUTTON1 = 3,
    XBUTTON2 = 4,
    XBUTTON3 = 5,
};
pub const RDPSRAPI_MOUSE_BUTTON_BUTTON1 = RDPSRAPI_MOUSE_BUTTON_TYPE.BUTTON1;
pub const RDPSRAPI_MOUSE_BUTTON_BUTTON2 = RDPSRAPI_MOUSE_BUTTON_TYPE.BUTTON2;
pub const RDPSRAPI_MOUSE_BUTTON_BUTTON3 = RDPSRAPI_MOUSE_BUTTON_TYPE.BUTTON3;
pub const RDPSRAPI_MOUSE_BUTTON_XBUTTON1 = RDPSRAPI_MOUSE_BUTTON_TYPE.XBUTTON1;
pub const RDPSRAPI_MOUSE_BUTTON_XBUTTON2 = RDPSRAPI_MOUSE_BUTTON_TYPE.XBUTTON2;
pub const RDPSRAPI_MOUSE_BUTTON_XBUTTON3 = RDPSRAPI_MOUSE_BUTTON_TYPE.XBUTTON3;

pub const RDPSRAPI_KBD_CODE_TYPE = enum(i32) {
    SCANCODE = 0,
    UNICODE = 1,
};
pub const RDPSRAPI_KBD_CODE_SCANCODE = RDPSRAPI_KBD_CODE_TYPE.SCANCODE;
pub const RDPSRAPI_KBD_CODE_UNICODE = RDPSRAPI_KBD_CODE_TYPE.UNICODE;

pub const RDPSRAPI_KBD_SYNC_FLAG = enum(i32) {
    SCROLL_LOCK = 1,
    NUM_LOCK = 2,
    CAPS_LOCK = 4,
    KANA_LOCK = 8,
};
pub const RDPSRAPI_KBD_SYNC_FLAG_SCROLL_LOCK = RDPSRAPI_KBD_SYNC_FLAG.SCROLL_LOCK;
pub const RDPSRAPI_KBD_SYNC_FLAG_NUM_LOCK = RDPSRAPI_KBD_SYNC_FLAG.NUM_LOCK;
pub const RDPSRAPI_KBD_SYNC_FLAG_CAPS_LOCK = RDPSRAPI_KBD_SYNC_FLAG.CAPS_LOCK;
pub const RDPSRAPI_KBD_SYNC_FLAG_KANA_LOCK = RDPSRAPI_KBD_SYNC_FLAG.KANA_LOCK;

const IID_IRDPSRAPIDebug_Value = Guid.initString("aa1e42b5-496d-4ca4-a690-348dcb2ec4ad");
pub const IID_IRDPSRAPIDebug = &IID_IRDPSRAPIDebug_Value;
pub const IRDPSRAPIDebug = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CLXCmdLine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIDebug,
            c_l_x_cmd_line: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CLXCmdLine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIDebug,
            p_c_l_x_cmd_line: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn putCLXCmdLine(self: *const T, c_l_x_cmd_line_: ?BSTR) HRESULT {
                return @as(*const IRDPSRAPIDebug.VTable, @ptrCast(self.vtable)).put_CLXCmdLine(@as(*const IRDPSRAPIDebug, @ptrCast(self)), c_l_x_cmd_line_);
            }
            pub inline fn getCLXCmdLine(self: *const T, p_c_l_x_cmd_line_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIDebug.VTable, @ptrCast(self.vtable)).get_CLXCmdLine(@as(*const IRDPSRAPIDebug, @ptrCast(self)), p_c_l_x_cmd_line_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IRDPSRAPIPerfCounterLogger_Value = Guid.initString("071c2533-0fa4-4e8f-ae83-9c10b4305ab5");
pub const IID_IRDPSRAPIPerfCounterLogger = &IID_IRDPSRAPIPerfCounterLogger_Value;
pub const IRDPSRAPIPerfCounterLogger = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LogValue: *const fn (
            self: *const IRDPSRAPIPerfCounterLogger,
            l_value: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn logValue(self: *const T, l_value_: i64) HRESULT {
                return @as(*const IRDPSRAPIPerfCounterLogger.VTable, @ptrCast(self.vtable)).LogValue(@as(*const IRDPSRAPIPerfCounterLogger, @ptrCast(self)), l_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IRDPSRAPIPerfCounterLoggingManager_Value = Guid.initString("9a512c86-ac6e-4a8e-b1a4-fcef363f6e64");
pub const IID_IRDPSRAPIPerfCounterLoggingManager = &IID_IRDPSRAPIPerfCounterLoggingManager_Value;
pub const IRDPSRAPIPerfCounterLoggingManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateLogger: *const fn (
            self: *const IRDPSRAPIPerfCounterLoggingManager,
            bstr_counter_name: ?BSTR,
            pp_logger: ?*?*IRDPSRAPIPerfCounterLogger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createLogger(self: *const T, bstr_counter_name_: ?BSTR, pp_logger_: ?*?*IRDPSRAPIPerfCounterLogger) HRESULT {
                return @as(*const IRDPSRAPIPerfCounterLoggingManager.VTable, @ptrCast(self.vtable)).CreateLogger(@as(*const IRDPSRAPIPerfCounterLoggingManager, @ptrCast(self)), bstr_counter_name_, pp_logger_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IRDPSRAPIAudioStream_Value = Guid.initString("e3e30ef9-89c6-4541-ba3b-19336ac6d31c");
pub const IID_IRDPSRAPIAudioStream = &IID_IRDPSRAPIAudioStream_Value;
pub const IRDPSRAPIAudioStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IRDPSRAPIAudioStream,
            pn_period_in_hundred_ns_intervals: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: *const fn (
            self: *const IRDPSRAPIAudioStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IRDPSRAPIAudioStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBuffer: *const fn (
            self: *const IRDPSRAPIAudioStream,
            ppb_data: [*]?*u8,
            pcb_data: ?*u32,
            p_timestamp: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeBuffer: *const fn (
            self: *const IRDPSRAPIAudioStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, pn_period_in_hundred_ns_intervals_: ?*i64) HRESULT {
                return @as(*const IRDPSRAPIAudioStream.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IRDPSRAPIAudioStream, @ptrCast(self)), pn_period_in_hundred_ns_intervals_);
            }
            pub inline fn start(self: *const T) HRESULT {
                return @as(*const IRDPSRAPIAudioStream.VTable, @ptrCast(self.vtable)).Start(@as(*const IRDPSRAPIAudioStream, @ptrCast(self)));
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IRDPSRAPIAudioStream.VTable, @ptrCast(self.vtable)).Stop(@as(*const IRDPSRAPIAudioStream, @ptrCast(self)));
            }
            pub inline fn getBuffer(self: *const T, ppb_data_: [*]?*u8, pcb_data_: ?*u32, p_timestamp_: ?*u64) HRESULT {
                return @as(*const IRDPSRAPIAudioStream.VTable, @ptrCast(self.vtable)).GetBuffer(@as(*const IRDPSRAPIAudioStream, @ptrCast(self)), ppb_data_, pcb_data_, p_timestamp_);
            }
            pub inline fn freeBuffer(self: *const T) HRESULT {
                return @as(*const IRDPSRAPIAudioStream.VTable, @ptrCast(self.vtable)).FreeBuffer(@as(*const IRDPSRAPIAudioStream, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IRDPSRAPIClipboardUseEvents_Value = Guid.initString("d559f59a-7a27-4138-8763-247ce5f659a8");
pub const IID_IRDPSRAPIClipboardUseEvents = &IID_IRDPSRAPIClipboardUseEvents_Value;
pub const IRDPSRAPIClipboardUseEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPasteFromClipboard: *const fn (
            self: *const IRDPSRAPIClipboardUseEvents,
            clipboard_format: u32,
            p_attendee: ?*IDispatch,
            p_ret_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onPasteFromClipboard(self: *const T, clipboard_format_: u32, p_attendee_: ?*IDispatch, p_ret_val_: ?*i16) HRESULT {
                return @as(*const IRDPSRAPIClipboardUseEvents.VTable, @ptrCast(self.vtable)).OnPasteFromClipboard(@as(*const IRDPSRAPIClipboardUseEvents, @ptrCast(self)), clipboard_format_, p_attendee_, p_ret_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIWindow_Value = Guid.initString("beafe0f9-c77b-4933-ba9f-a24cddcc27cf");
pub const IID_IRDPSRAPIWindow = &IID_IRDPSRAPIWindow_Value;
pub const IRDPSRAPIWindow = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIWindow,
            p_ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIWindow,
            p_application: ?*?*IRDPSRAPIApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Shared: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIWindow,
            p_ret_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Shared: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIWindow,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIWindow,
            p_ret_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn (
            self: *const IRDPSRAPIWindow,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIWindow,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, p_ret_val_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIWindow.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IRDPSRAPIWindow, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn getApplication(self: *const T, p_application_: ?*?*IRDPSRAPIApplication) HRESULT {
                return @as(*const IRDPSRAPIWindow.VTable, @ptrCast(self.vtable)).get_Application(@as(*const IRDPSRAPIWindow, @ptrCast(self)), p_application_);
            }
            pub inline fn getShared(self: *const T, p_ret_val_: ?*i16) HRESULT {
                return @as(*const IRDPSRAPIWindow.VTable, @ptrCast(self.vtable)).get_Shared(@as(*const IRDPSRAPIWindow, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn putShared(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IRDPSRAPIWindow.VTable, @ptrCast(self.vtable)).put_Shared(@as(*const IRDPSRAPIWindow, @ptrCast(self)), new_val_);
            }
            pub inline fn getName(self: *const T, p_ret_val_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIWindow.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IRDPSRAPIWindow, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn show(self: *const T) HRESULT {
                return @as(*const IRDPSRAPIWindow.VTable, @ptrCast(self.vtable)).Show(@as(*const IRDPSRAPIWindow, @ptrCast(self)));
            }
            pub inline fn getFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IRDPSRAPIWindow.VTable, @ptrCast(self.vtable)).get_Flags(@as(*const IRDPSRAPIWindow, @ptrCast(self)), pdw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIWindowList_Value = Guid.initString("8a05ce44-715a-4116-a189-a118f30a07bd");
pub const IID_IRDPSRAPIWindowList = &IID_IRDPSRAPIWindowList_Value;
pub const IRDPSRAPIWindowList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIWindowList,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIWindowList,
            item: i32,
            p_window: ?*?*IRDPSRAPIWindow,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const IRDPSRAPIWindowList.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IRDPSRAPIWindowList, @ptrCast(self)), retval_);
            }
            pub inline fn getItem(self: *const T, item_: i32, p_window_: ?*?*IRDPSRAPIWindow) HRESULT {
                return @as(*const IRDPSRAPIWindowList.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IRDPSRAPIWindowList, @ptrCast(self)), item_, p_window_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIApplication_Value = Guid.initString("41e7a09d-eb7a-436e-935d-780ca2628324");
pub const IID_IRDPSRAPIApplication = &IID_IRDPSRAPIApplication_Value;
pub const IRDPSRAPIApplication = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Windows: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplication,
            p_window_list: ?*?*IRDPSRAPIWindowList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplication,
            p_ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Shared: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplication,
            p_ret_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Shared: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplication,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplication,
            p_ret_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplication,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getWindows(self: *const T, p_window_list_: ?*?*IRDPSRAPIWindowList) HRESULT {
                return @as(*const IRDPSRAPIApplication.VTable, @ptrCast(self.vtable)).get_Windows(@as(*const IRDPSRAPIApplication, @ptrCast(self)), p_window_list_);
            }
            pub inline fn getId(self: *const T, p_ret_val_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIApplication.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IRDPSRAPIApplication, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn getShared(self: *const T, p_ret_val_: ?*i16) HRESULT {
                return @as(*const IRDPSRAPIApplication.VTable, @ptrCast(self.vtable)).get_Shared(@as(*const IRDPSRAPIApplication, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn putShared(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IRDPSRAPIApplication.VTable, @ptrCast(self.vtable)).put_Shared(@as(*const IRDPSRAPIApplication, @ptrCast(self)), new_val_);
            }
            pub inline fn getName(self: *const T, p_ret_val_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIApplication.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IRDPSRAPIApplication, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn getFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IRDPSRAPIApplication.VTable, @ptrCast(self.vtable)).get_Flags(@as(*const IRDPSRAPIApplication, @ptrCast(self)), pdw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIApplicationList_Value = Guid.initString("d4b4aeb3-22dc-4837-b3b6-42ea2517849a");
pub const IID_IRDPSRAPIApplicationList = &IID_IRDPSRAPIApplicationList_Value;
pub const IRDPSRAPIApplicationList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplicationList,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplicationList,
            item: i32,
            p_application: ?*?*IRDPSRAPIApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const IRDPSRAPIApplicationList.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IRDPSRAPIApplicationList, @ptrCast(self)), retval_);
            }
            pub inline fn getItem(self: *const T, item_: i32, p_application_: ?*?*IRDPSRAPIApplication) HRESULT {
                return @as(*const IRDPSRAPIApplicationList.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IRDPSRAPIApplicationList, @ptrCast(self)), item_, p_application_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIApplicationFilter_Value = Guid.initString("d20f10ca-6637-4f06-b1d5-277ea7e5160d");
pub const IID_IRDPSRAPIApplicationFilter = &IID_IRDPSRAPIApplicationFilter_Value;
pub const IRDPSRAPIApplicationFilter = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Applications: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplicationFilter,
            p_applications: ?*?*IRDPSRAPIApplicationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Windows: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplicationFilter,
            p_windows: ?*?*IRDPSRAPIWindowList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplicationFilter,
            p_ret_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIApplicationFilter,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getApplications(self: *const T, p_applications_: ?*?*IRDPSRAPIApplicationList) HRESULT {
                return @as(*const IRDPSRAPIApplicationFilter.VTable, @ptrCast(self.vtable)).get_Applications(@as(*const IRDPSRAPIApplicationFilter, @ptrCast(self)), p_applications_);
            }
            pub inline fn getWindows(self: *const T, p_windows_: ?*?*IRDPSRAPIWindowList) HRESULT {
                return @as(*const IRDPSRAPIApplicationFilter.VTable, @ptrCast(self.vtable)).get_Windows(@as(*const IRDPSRAPIApplicationFilter, @ptrCast(self)), p_windows_);
            }
            pub inline fn getEnabled(self: *const T, p_ret_val_: ?*i16) HRESULT {
                return @as(*const IRDPSRAPIApplicationFilter.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IRDPSRAPIApplicationFilter, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn putEnabled(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IRDPSRAPIApplicationFilter.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IRDPSRAPIApplicationFilter, @ptrCast(self)), new_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPISessionProperties_Value = Guid.initString("339b24f2-9bc0-4f16-9aac-f165433d13d4");
pub const IID_IRDPSRAPISessionProperties = &IID_IRDPSRAPISessionProperties_Value;
pub const IRDPSRAPISessionProperties = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISessionProperties,
            property_name: ?BSTR,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISessionProperties,
            property_name: ?BSTR,
            new_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProperty(self: *const T, property_name_: ?BSTR, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IRDPSRAPISessionProperties.VTable, @ptrCast(self.vtable)).get_Property(@as(*const IRDPSRAPISessionProperties, @ptrCast(self)), property_name_, p_val_);
            }
            pub inline fn putProperty(self: *const T, property_name_: ?BSTR, new_val_: VARIANT) HRESULT {
                return @as(*const IRDPSRAPISessionProperties.VTable, @ptrCast(self.vtable)).put_Property(@as(*const IRDPSRAPISessionProperties, @ptrCast(self)), property_name_, new_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIInvitation_Value = Guid.initString("4fac1d43-fc51-45bb-b1b4-2b53aa562fa3");
pub const IID_IRDPSRAPIInvitation = &IID_IRDPSRAPIInvitation_Value;
pub const IRDPSRAPIInvitation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectionString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitation,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitation,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Password: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitation,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttendeeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitation,
            p_ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttendeeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitation,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Revoked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitation,
            p_ret_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Revoked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitation,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getConnectionString(self: *const T, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIInvitation.VTable, @ptrCast(self.vtable)).get_ConnectionString(@as(*const IRDPSRAPIInvitation, @ptrCast(self)), pbstr_val_);
            }
            pub inline fn getGroupName(self: *const T, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIInvitation.VTable, @ptrCast(self.vtable)).get_GroupName(@as(*const IRDPSRAPIInvitation, @ptrCast(self)), pbstr_val_);
            }
            pub inline fn getPassword(self: *const T, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIInvitation.VTable, @ptrCast(self.vtable)).get_Password(@as(*const IRDPSRAPIInvitation, @ptrCast(self)), pbstr_val_);
            }
            pub inline fn getAttendeeLimit(self: *const T, p_ret_val_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIInvitation.VTable, @ptrCast(self.vtable)).get_AttendeeLimit(@as(*const IRDPSRAPIInvitation, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn putAttendeeLimit(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IRDPSRAPIInvitation.VTable, @ptrCast(self.vtable)).put_AttendeeLimit(@as(*const IRDPSRAPIInvitation, @ptrCast(self)), new_val_);
            }
            pub inline fn getRevoked(self: *const T, p_ret_val_: ?*i16) HRESULT {
                return @as(*const IRDPSRAPIInvitation.VTable, @ptrCast(self.vtable)).get_Revoked(@as(*const IRDPSRAPIInvitation, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn putRevoked(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IRDPSRAPIInvitation.VTable, @ptrCast(self.vtable)).put_Revoked(@as(*const IRDPSRAPIInvitation, @ptrCast(self)), new_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIInvitationManager_Value = Guid.initString("4722b049-92c3-4c2d-8a65-f7348f644dcf");
pub const IID_IRDPSRAPIInvitationManager = &IID_IRDPSRAPIInvitationManager_Value;
pub const IRDPSRAPIInvitationManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitationManager,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitationManager,
            item: VARIANT,
            pp_invitation: ?*?*IRDPSRAPIInvitation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIInvitationManager,
            p_ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInvitation: *const fn (
            self: *const IRDPSRAPIInvitationManager,
            bstr_auth_string: ?BSTR,
            bstr_group_name: ?BSTR,
            bstr_password: ?BSTR,
            attendee_limit: i32,
            pp_invitation: ?*?*IRDPSRAPIInvitation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const IRDPSRAPIInvitationManager.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IRDPSRAPIInvitationManager, @ptrCast(self)), retval_);
            }
            pub inline fn getItem(self: *const T, item_: VARIANT, pp_invitation_: ?*?*IRDPSRAPIInvitation) HRESULT {
                return @as(*const IRDPSRAPIInvitationManager.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IRDPSRAPIInvitationManager, @ptrCast(self)), item_, pp_invitation_);
            }
            pub inline fn getCount(self: *const T, p_ret_val_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIInvitationManager.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IRDPSRAPIInvitationManager, @ptrCast(self)), p_ret_val_);
            }
            pub inline fn createInvitation(self: *const T, bstr_auth_string_: ?BSTR, bstr_group_name_: ?BSTR, bstr_password_: ?BSTR, attendee_limit_: i32, pp_invitation_: ?*?*IRDPSRAPIInvitation) HRESULT {
                return @as(*const IRDPSRAPIInvitationManager.VTable, @ptrCast(self.vtable)).CreateInvitation(@as(*const IRDPSRAPIInvitationManager, @ptrCast(self)), bstr_auth_string_, bstr_group_name_, bstr_password_, attendee_limit_, pp_invitation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPITcpConnectionInfo_Value = Guid.initString("f74049a4-3d06-4028-8193-0a8c29bc2452");
pub const IID_IRDPSRAPITcpConnectionInfo = &IID_IRDPSRAPITcpConnectionInfo_Value;
pub const IRDPSRAPITcpConnectionInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITcpConnectionInfo,
            pl_protocol: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITcpConnectionInfo,
            pl_port: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalIP: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITcpConnectionInfo,
            pbsr_local_i_p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PeerPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITcpConnectionInfo,
            pl_port: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PeerIP: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITcpConnectionInfo,
            pbstr_i_p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProtocol(self: *const T, pl_protocol_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPITcpConnectionInfo.VTable, @ptrCast(self.vtable)).get_Protocol(@as(*const IRDPSRAPITcpConnectionInfo, @ptrCast(self)), pl_protocol_);
            }
            pub inline fn getLocalPort(self: *const T, pl_port_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPITcpConnectionInfo.VTable, @ptrCast(self.vtable)).get_LocalPort(@as(*const IRDPSRAPITcpConnectionInfo, @ptrCast(self)), pl_port_);
            }
            pub inline fn getLocalIP(self: *const T, pbsr_local_i_p_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPITcpConnectionInfo.VTable, @ptrCast(self.vtable)).get_LocalIP(@as(*const IRDPSRAPITcpConnectionInfo, @ptrCast(self)), pbsr_local_i_p_);
            }
            pub inline fn getPeerPort(self: *const T, pl_port_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPITcpConnectionInfo.VTable, @ptrCast(self.vtable)).get_PeerPort(@as(*const IRDPSRAPITcpConnectionInfo, @ptrCast(self)), pl_port_);
            }
            pub inline fn getPeerIP(self: *const T, pbstr_i_p_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPITcpConnectionInfo.VTable, @ptrCast(self.vtable)).get_PeerIP(@as(*const IRDPSRAPITcpConnectionInfo, @ptrCast(self)), pbstr_i_p_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIAttendee_Value = Guid.initString("ec0671b3-1b78-4b80-a464-9132247543e3");
pub const IID_IRDPSRAPIAttendee = &IID_IRDPSRAPIAttendee_Value;
pub const IRDPSRAPIAttendee = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendee,
            p_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendee,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ControlLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendee,
            p_val: ?*CTRL_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ControlLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendee,
            p_new_val: CTRL_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Invitation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendee,
            pp_val: ?*?*IRDPSRAPIInvitation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TerminateConnection: *const fn (
            self: *const IRDPSRAPIAttendee,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendee,
            pl_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectivityInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendee,
            pp_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, p_id_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIAttendee.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IRDPSRAPIAttendee, @ptrCast(self)), p_id_);
            }
            pub inline fn getRemoteName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIAttendee.VTable, @ptrCast(self.vtable)).get_RemoteName(@as(*const IRDPSRAPIAttendee, @ptrCast(self)), p_val_);
            }
            pub inline fn getControlLevel(self: *const T, p_val_: ?*CTRL_LEVEL) HRESULT {
                return @as(*const IRDPSRAPIAttendee.VTable, @ptrCast(self.vtable)).get_ControlLevel(@as(*const IRDPSRAPIAttendee, @ptrCast(self)), p_val_);
            }
            pub inline fn putControlLevel(self: *const T, p_new_val_: CTRL_LEVEL) HRESULT {
                return @as(*const IRDPSRAPIAttendee.VTable, @ptrCast(self.vtable)).put_ControlLevel(@as(*const IRDPSRAPIAttendee, @ptrCast(self)), p_new_val_);
            }
            pub inline fn getInvitation(self: *const T, pp_val_: ?*?*IRDPSRAPIInvitation) HRESULT {
                return @as(*const IRDPSRAPIAttendee.VTable, @ptrCast(self.vtable)).get_Invitation(@as(*const IRDPSRAPIAttendee, @ptrCast(self)), pp_val_);
            }
            pub inline fn terminateConnection(self: *const T) HRESULT {
                return @as(*const IRDPSRAPIAttendee.VTable, @ptrCast(self.vtable)).TerminateConnection(@as(*const IRDPSRAPIAttendee, @ptrCast(self)));
            }
            pub inline fn getFlags(self: *const T, pl_flags_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIAttendee.VTable, @ptrCast(self.vtable)).get_Flags(@as(*const IRDPSRAPIAttendee, @ptrCast(self)), pl_flags_);
            }
            pub inline fn getConnectivityInfo(self: *const T, pp_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IRDPSRAPIAttendee.VTable, @ptrCast(self.vtable)).get_ConnectivityInfo(@as(*const IRDPSRAPIAttendee, @ptrCast(self)), pp_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIAttendeeManager_Value = Guid.initString("ba3a37e8-33da-4749-8da0-07fa34da7944");
pub const IID_IRDPSRAPIAttendeeManager = &IID_IRDPSRAPIAttendeeManager_Value;
pub const IRDPSRAPIAttendeeManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendeeManager,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendeeManager,
            id: i32,
            pp_item: ?*?*IRDPSRAPIAttendee,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const IRDPSRAPIAttendeeManager.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IRDPSRAPIAttendeeManager, @ptrCast(self)), retval_);
            }
            pub inline fn getItem(self: *const T, id_: i32, pp_item_: ?*?*IRDPSRAPIAttendee) HRESULT {
                return @as(*const IRDPSRAPIAttendeeManager.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IRDPSRAPIAttendeeManager, @ptrCast(self)), id_, pp_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIAttendeeDisconnectInfo_Value = Guid.initString("c187689f-447c-44a1-9c14-fffbb3b7ec17");
pub const IID_IRDPSRAPIAttendeeDisconnectInfo = &IID_IRDPSRAPIAttendeeDisconnectInfo_Value;
pub const IRDPSRAPIAttendeeDisconnectInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Attendee: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendeeDisconnectInfo,
            retval: ?*?*IRDPSRAPIAttendee,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Reason: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendeeDisconnectInfo,
            p_reason: ?*ATTENDEE_DISCONNECT_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Code: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIAttendeeDisconnectInfo,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAttendee(self: *const T, retval_: ?*?*IRDPSRAPIAttendee) HRESULT {
                return @as(*const IRDPSRAPIAttendeeDisconnectInfo.VTable, @ptrCast(self.vtable)).get_Attendee(@as(*const IRDPSRAPIAttendeeDisconnectInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getReason(self: *const T, p_reason_: ?*ATTENDEE_DISCONNECT_REASON) HRESULT {
                return @as(*const IRDPSRAPIAttendeeDisconnectInfo.VTable, @ptrCast(self.vtable)).get_Reason(@as(*const IRDPSRAPIAttendeeDisconnectInfo, @ptrCast(self)), p_reason_);
            }
            pub inline fn getCode(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIAttendeeDisconnectInfo.VTable, @ptrCast(self.vtable)).get_Code(@as(*const IRDPSRAPIAttendeeDisconnectInfo, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIVirtualChannel_Value = Guid.initString("05e12f95-28b3-4c9a-8780-d0248574a1e0");
pub const IID_IRDPSRAPIVirtualChannel = &IID_IRDPSRAPIVirtualChannel_Value;
pub const IRDPSRAPIVirtualChannel = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SendData: *const fn (
            self: *const IRDPSRAPIVirtualChannel,
            bstr_data: ?BSTR,
            l_attendee_id: i32,
            channel_send_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccess: *const fn (
            self: *const IRDPSRAPIVirtualChannel,
            l_attendee_id: i32,
            access_type: CHANNEL_ACCESS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIVirtualChannel,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIVirtualChannel,
            pl_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIVirtualChannel,
            p_priority: ?*CHANNEL_PRIORITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn sendData(self: *const T, bstr_data_: ?BSTR, l_attendee_id_: i32, channel_send_flags_: u32) HRESULT {
                return @as(*const IRDPSRAPIVirtualChannel.VTable, @ptrCast(self.vtable)).SendData(@as(*const IRDPSRAPIVirtualChannel, @ptrCast(self)), bstr_data_, l_attendee_id_, channel_send_flags_);
            }
            pub inline fn setAccess(self: *const T, l_attendee_id_: i32, access_type_: CHANNEL_ACCESS_ENUM) HRESULT {
                return @as(*const IRDPSRAPIVirtualChannel.VTable, @ptrCast(self.vtable)).SetAccess(@as(*const IRDPSRAPIVirtualChannel, @ptrCast(self)), l_attendee_id_, access_type_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIVirtualChannel.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IRDPSRAPIVirtualChannel, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getFlags(self: *const T, pl_flags_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIVirtualChannel.VTable, @ptrCast(self.vtable)).get_Flags(@as(*const IRDPSRAPIVirtualChannel, @ptrCast(self)), pl_flags_);
            }
            pub inline fn getPriority(self: *const T, p_priority_: ?*CHANNEL_PRIORITY) HRESULT {
                return @as(*const IRDPSRAPIVirtualChannel.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IRDPSRAPIVirtualChannel, @ptrCast(self)), p_priority_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIVirtualChannelManager_Value = Guid.initString("0d11c661-5d0d-4ee4-89df-2166ae1fdfed");
pub const IID_IRDPSRAPIVirtualChannelManager = &IID_IRDPSRAPIVirtualChannelManager_Value;
pub const IRDPSRAPIVirtualChannelManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIVirtualChannelManager,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIVirtualChannelManager,
            item: VARIANT,
            p_channel: ?*?*IRDPSRAPIVirtualChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualChannel: *const fn (
            self: *const IRDPSRAPIVirtualChannelManager,
            bstr_channel_name: ?BSTR,
            priority: CHANNEL_PRIORITY,
            channel_flags: u32,
            pp_channel: ?*?*IRDPSRAPIVirtualChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const IRDPSRAPIVirtualChannelManager.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IRDPSRAPIVirtualChannelManager, @ptrCast(self)), retval_);
            }
            pub inline fn getItem(self: *const T, item_: VARIANT, p_channel_: ?*?*IRDPSRAPIVirtualChannel) HRESULT {
                return @as(*const IRDPSRAPIVirtualChannelManager.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IRDPSRAPIVirtualChannelManager, @ptrCast(self)), item_, p_channel_);
            }
            pub inline fn createVirtualChannel(self: *const T, bstr_channel_name_: ?BSTR, priority_: CHANNEL_PRIORITY, channel_flags_: u32, pp_channel_: ?*?*IRDPSRAPIVirtualChannel) HRESULT {
                return @as(*const IRDPSRAPIVirtualChannelManager.VTable, @ptrCast(self.vtable)).CreateVirtualChannel(@as(*const IRDPSRAPIVirtualChannelManager, @ptrCast(self)), bstr_channel_name_, priority_, channel_flags_, pp_channel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPIViewer_Value = Guid.initString("c6bfcd38-8ce9-404d-8ae8-f31d00c65cb5");
pub const IID_IRDPSRAPIViewer = &IID_IRDPSRAPIViewer_Value;
pub const IRDPSRAPIViewer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Connect: *const fn (
            self: *const IRDPSRAPIViewer,
            bstr_connection_string: ?BSTR,
            bstr_name: ?BSTR,
            bstr_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const IRDPSRAPIViewer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Attendees: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIViewer,
            pp_val: ?*?*IRDPSRAPIAttendeeManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Invitations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIViewer,
            pp_val: ?*?*IRDPSRAPIInvitationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIViewer,
            pp_val: ?*?*IRDPSRAPIApplicationFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VirtualChannelManager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIViewer,
            pp_val: ?*?*IRDPSRAPIVirtualChannelManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SmartSizing: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIViewer,
            vb_smart_sizing: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SmartSizing: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIViewer,
            pvb_smart_sizing: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestControl: *const fn (
            self: *const IRDPSRAPIViewer,
            ctrl_level: CTRL_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisconnectedText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIViewer,
            bstr_disconnected_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisconnectedText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIViewer,
            pbstr_disconnected_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestColorDepthChange: *const fn (
            self: *const IRDPSRAPIViewer,
            bpp: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIViewer,
            pp_val: ?*?*IRDPSRAPISessionProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartReverseConnectListener: *const fn (
            self: *const IRDPSRAPIViewer,
            bstr_connection_string: ?BSTR,
            bstr_user_name: ?BSTR,
            bstr_password: ?BSTR,
            pbstr_reverse_connect_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn connect(self: *const T, bstr_connection_string_: ?BSTR, bstr_name_: ?BSTR, bstr_password_: ?BSTR) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).Connect(@as(*const IRDPSRAPIViewer, @ptrCast(self)), bstr_connection_string_, bstr_name_, bstr_password_);
            }
            pub inline fn disconnect(self: *const T) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IRDPSRAPIViewer, @ptrCast(self)));
            }
            pub inline fn getAttendees(self: *const T, pp_val_: ?*?*IRDPSRAPIAttendeeManager) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).get_Attendees(@as(*const IRDPSRAPIViewer, @ptrCast(self)), pp_val_);
            }
            pub inline fn getInvitations(self: *const T, pp_val_: ?*?*IRDPSRAPIInvitationManager) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).get_Invitations(@as(*const IRDPSRAPIViewer, @ptrCast(self)), pp_val_);
            }
            pub inline fn getApplicationFilter(self: *const T, pp_val_: ?*?*IRDPSRAPIApplicationFilter) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).get_ApplicationFilter(@as(*const IRDPSRAPIViewer, @ptrCast(self)), pp_val_);
            }
            pub inline fn getVirtualChannelManager(self: *const T, pp_val_: ?*?*IRDPSRAPIVirtualChannelManager) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).get_VirtualChannelManager(@as(*const IRDPSRAPIViewer, @ptrCast(self)), pp_val_);
            }
            pub inline fn putSmartSizing(self: *const T, vb_smart_sizing_: i16) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).put_SmartSizing(@as(*const IRDPSRAPIViewer, @ptrCast(self)), vb_smart_sizing_);
            }
            pub inline fn getSmartSizing(self: *const T, pvb_smart_sizing_: ?*i16) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).get_SmartSizing(@as(*const IRDPSRAPIViewer, @ptrCast(self)), pvb_smart_sizing_);
            }
            pub inline fn requestControl(self: *const T, ctrl_level_: CTRL_LEVEL) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).RequestControl(@as(*const IRDPSRAPIViewer, @ptrCast(self)), ctrl_level_);
            }
            pub inline fn putDisconnectedText(self: *const T, bstr_disconnected_text_: ?BSTR) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).put_DisconnectedText(@as(*const IRDPSRAPIViewer, @ptrCast(self)), bstr_disconnected_text_);
            }
            pub inline fn getDisconnectedText(self: *const T, pbstr_disconnected_text_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).get_DisconnectedText(@as(*const IRDPSRAPIViewer, @ptrCast(self)), pbstr_disconnected_text_);
            }
            pub inline fn requestColorDepthChange(self: *const T, bpp_: i32) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).RequestColorDepthChange(@as(*const IRDPSRAPIViewer, @ptrCast(self)), bpp_);
            }
            pub inline fn getProperties(self: *const T, pp_val_: ?*?*IRDPSRAPISessionProperties) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IRDPSRAPIViewer, @ptrCast(self)), pp_val_);
            }
            pub inline fn startReverseConnectListener(self: *const T, bstr_connection_string_: ?BSTR, bstr_user_name_: ?BSTR, bstr_password_: ?BSTR, pbstr_reverse_connect_string_: ?*?BSTR) HRESULT {
                return @as(*const IRDPSRAPIViewer.VTable, @ptrCast(self.vtable)).StartReverseConnectListener(@as(*const IRDPSRAPIViewer, @ptrCast(self)), bstr_connection_string_, bstr_user_name_, bstr_password_, pbstr_reverse_connect_string_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IRDPViewerInputSink_Value = Guid.initString("bb590853-a6c5-4a7b-8dd4-76b69eea12d5");
pub const IID_IRDPViewerInputSink = &IID_IRDPViewerInputSink_Value;
pub const IRDPViewerInputSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SendMouseButtonEvent: *const fn (
            self: *const IRDPViewerInputSink,
            button_type: RDPSRAPI_MOUSE_BUTTON_TYPE,
            vb_button_down: i16,
            x_pos: u32,
            y_pos: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMouseMoveEvent: *const fn (
            self: *const IRDPViewerInputSink,
            x_pos: u32,
            y_pos: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMouseWheelEvent: *const fn (
            self: *const IRDPViewerInputSink,
            wheel_rotation: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendKeyboardEvent: *const fn (
            self: *const IRDPViewerInputSink,
            code_type: RDPSRAPI_KBD_CODE_TYPE,
            keycode: u16,
            vb_key_up: i16,
            vb_repeat: i16,
            vb_extended: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendSyncEvent: *const fn (
            self: *const IRDPViewerInputSink,
            sync_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginTouchFrame: *const fn (
            self: *const IRDPViewerInputSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTouchInput: *const fn (
            self: *const IRDPViewerInputSink,
            contact_id: u32,
            event: u32,
            x: i32,
            y: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndTouchFrame: *const fn (
            self: *const IRDPViewerInputSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn sendMouseButtonEvent(self: *const T, button_type_: RDPSRAPI_MOUSE_BUTTON_TYPE, vb_button_down_: i16, x_pos_: u32, y_pos_: u32) HRESULT {
                return @as(*const IRDPViewerInputSink.VTable, @ptrCast(self.vtable)).SendMouseButtonEvent(@as(*const IRDPViewerInputSink, @ptrCast(self)), button_type_, vb_button_down_, x_pos_, y_pos_);
            }
            pub inline fn sendMouseMoveEvent(self: *const T, x_pos_: u32, y_pos_: u32) HRESULT {
                return @as(*const IRDPViewerInputSink.VTable, @ptrCast(self.vtable)).SendMouseMoveEvent(@as(*const IRDPViewerInputSink, @ptrCast(self)), x_pos_, y_pos_);
            }
            pub inline fn sendMouseWheelEvent(self: *const T, wheel_rotation_: u16) HRESULT {
                return @as(*const IRDPViewerInputSink.VTable, @ptrCast(self.vtable)).SendMouseWheelEvent(@as(*const IRDPViewerInputSink, @ptrCast(self)), wheel_rotation_);
            }
            pub inline fn sendKeyboardEvent(self: *const T, code_type_: RDPSRAPI_KBD_CODE_TYPE, keycode_: u16, vb_key_up_: i16, vb_repeat_: i16, vb_extended_: i16) HRESULT {
                return @as(*const IRDPViewerInputSink.VTable, @ptrCast(self.vtable)).SendKeyboardEvent(@as(*const IRDPViewerInputSink, @ptrCast(self)), code_type_, keycode_, vb_key_up_, vb_repeat_, vb_extended_);
            }
            pub inline fn sendSyncEvent(self: *const T, sync_flags_: u32) HRESULT {
                return @as(*const IRDPViewerInputSink.VTable, @ptrCast(self.vtable)).SendSyncEvent(@as(*const IRDPViewerInputSink, @ptrCast(self)), sync_flags_);
            }
            pub inline fn beginTouchFrame(self: *const T) HRESULT {
                return @as(*const IRDPViewerInputSink.VTable, @ptrCast(self.vtable)).BeginTouchFrame(@as(*const IRDPViewerInputSink, @ptrCast(self)));
            }
            pub inline fn addTouchInput(self: *const T, contact_id_: u32, event_: u32, x_: i32, y_: i32) HRESULT {
                return @as(*const IRDPViewerInputSink.VTable, @ptrCast(self.vtable)).AddTouchInput(@as(*const IRDPViewerInputSink, @ptrCast(self)), contact_id_, event_, x_, y_);
            }
            pub inline fn endTouchFrame(self: *const T) HRESULT {
                return @as(*const IRDPViewerInputSink.VTable, @ptrCast(self.vtable)).EndTouchFrame(@as(*const IRDPViewerInputSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IRDPSRAPIFrameBuffer_Value = Guid.initString("3d67e7d2-b27b-448e-81b3-c6110ed8b4be");
pub const IID_IRDPSRAPIFrameBuffer = &IID_IRDPSRAPIFrameBuffer_Value;
pub const IRDPSRAPIFrameBuffer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIFrameBuffer,
            pl_width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Height: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIFrameBuffer,
            pl_height: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Bpp: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPIFrameBuffer,
            pl_bpp: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameBufferBits: *const fn (
            self: *const IRDPSRAPIFrameBuffer,
            x: i32,
            y: i32,
            width: i32,
            heigth: i32,
            pp_bits: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getWidth(self: *const T, pl_width_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIFrameBuffer.VTable, @ptrCast(self.vtable)).get_Width(@as(*const IRDPSRAPIFrameBuffer, @ptrCast(self)), pl_width_);
            }
            pub inline fn getHeight(self: *const T, pl_height_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIFrameBuffer.VTable, @ptrCast(self.vtable)).get_Height(@as(*const IRDPSRAPIFrameBuffer, @ptrCast(self)), pl_height_);
            }
            pub inline fn getBpp(self: *const T, pl_bpp_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPIFrameBuffer.VTable, @ptrCast(self.vtable)).get_Bpp(@as(*const IRDPSRAPIFrameBuffer, @ptrCast(self)), pl_bpp_);
            }
            pub inline fn getFrameBufferBits(self: *const T, x_: i32, y_: i32, width_: i32, heigth_: i32, pp_bits_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IRDPSRAPIFrameBuffer.VTable, @ptrCast(self.vtable)).GetFrameBufferBits(@as(*const IRDPSRAPIFrameBuffer, @ptrCast(self)), x_, y_, width_, heigth_, pp_bits_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRDPSRAPITransportStreamBuffer_Value = Guid.initString("81c80290-5085-44b0-b460-f865c39cb4a9");
pub const IID_IRDPSRAPITransportStreamBuffer = &IID_IRDPSRAPITransportStreamBuffer_Value;
pub const IRDPSRAPITransportStreamBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Storage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            ppb_storage: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StorageSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            pl_max_store: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PayloadSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            pl_ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PayloadSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            l_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PayloadOffset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            pl_ret_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PayloadOffset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            l_ret_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            pl_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Context: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            pp_context: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Context: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPITransportStreamBuffer,
            p_context: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStorage(self: *const T, ppb_storage_: ?*?*u8) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).get_Storage(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), ppb_storage_);
            }
            pub inline fn getStorageSize(self: *const T, pl_max_store_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).get_StorageSize(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), pl_max_store_);
            }
            pub inline fn getPayloadSize(self: *const T, pl_ret_val_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).get_PayloadSize(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), pl_ret_val_);
            }
            pub inline fn putPayloadSize(self: *const T, l_val_: i32) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).put_PayloadSize(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), l_val_);
            }
            pub inline fn getPayloadOffset(self: *const T, pl_ret_val_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).get_PayloadOffset(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), pl_ret_val_);
            }
            pub inline fn putPayloadOffset(self: *const T, l_ret_val_: i32) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).put_PayloadOffset(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), l_ret_val_);
            }
            pub inline fn getFlags(self: *const T, pl_flags_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).get_Flags(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), pl_flags_);
            }
            pub inline fn putFlags(self: *const T, l_flags_: i32) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).put_Flags(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), l_flags_);
            }
            pub inline fn getContext(self: *const T, pp_context_: ?*?*IUnknown) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).get_Context(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), pp_context_);
            }
            pub inline fn putContext(self: *const T, p_context_: ?*IUnknown) HRESULT {
                return @as(*const IRDPSRAPITransportStreamBuffer.VTable, @ptrCast(self.vtable)).put_Context(@as(*const IRDPSRAPITransportStreamBuffer, @ptrCast(self)), p_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRDPSRAPITransportStreamEvents_Value = Guid.initString("ea81c254-f5af-4e40-982e-3e63bb595276");
pub const IID_IRDPSRAPITransportStreamEvents = &IID_IRDPSRAPITransportStreamEvents_Value;
pub const IRDPSRAPITransportStreamEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnWriteCompleted: *const fn (
            self: *const IRDPSRAPITransportStreamEvents,
            p_buffer: ?*IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnReadCompleted: *const fn (
            self: *const IRDPSRAPITransportStreamEvents,
            p_buffer: ?*IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnStreamClosed: *const fn (
            self: *const IRDPSRAPITransportStreamEvents,
            hr_reason: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onWriteCompleted(self: *const T, p_buffer_: ?*IRDPSRAPITransportStreamBuffer) void {
                return @as(*const IRDPSRAPITransportStreamEvents.VTable, @ptrCast(self.vtable)).OnWriteCompleted(@as(*const IRDPSRAPITransportStreamEvents, @ptrCast(self)), p_buffer_);
            }
            pub inline fn onReadCompleted(self: *const T, p_buffer_: ?*IRDPSRAPITransportStreamBuffer) void {
                return @as(*const IRDPSRAPITransportStreamEvents.VTable, @ptrCast(self.vtable)).OnReadCompleted(@as(*const IRDPSRAPITransportStreamEvents, @ptrCast(self)), p_buffer_);
            }
            pub inline fn onStreamClosed(self: *const T, hr_reason_: HRESULT) void {
                return @as(*const IRDPSRAPITransportStreamEvents.VTable, @ptrCast(self.vtable)).OnStreamClosed(@as(*const IRDPSRAPITransportStreamEvents, @ptrCast(self)), hr_reason_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRDPSRAPITransportStream_Value = Guid.initString("36cfa065-43bb-4ef7-aed7-9b88a5053036");
pub const IID_IRDPSRAPITransportStream = &IID_IRDPSRAPITransportStream_Value;
pub const IRDPSRAPITransportStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllocBuffer: *const fn (
            self: *const IRDPSRAPITransportStream,
            max_payload: i32,
            pp_buffer: ?*?*IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeBuffer: *const fn (
            self: *const IRDPSRAPITransportStream,
            p_buffer: ?*IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteBuffer: *const fn (
            self: *const IRDPSRAPITransportStream,
            p_buffer: ?*IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadBuffer: *const fn (
            self: *const IRDPSRAPITransportStream,
            p_buffer: ?*IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IRDPSRAPITransportStream,
            p_callbacks: ?*IRDPSRAPITransportStreamEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IRDPSRAPITransportStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn allocBuffer(self: *const T, max_payload_: i32, pp_buffer_: ?*?*IRDPSRAPITransportStreamBuffer) HRESULT {
                return @as(*const IRDPSRAPITransportStream.VTable, @ptrCast(self.vtable)).AllocBuffer(@as(*const IRDPSRAPITransportStream, @ptrCast(self)), max_payload_, pp_buffer_);
            }
            pub inline fn freeBuffer(self: *const T, p_buffer_: ?*IRDPSRAPITransportStreamBuffer) HRESULT {
                return @as(*const IRDPSRAPITransportStream.VTable, @ptrCast(self.vtable)).FreeBuffer(@as(*const IRDPSRAPITransportStream, @ptrCast(self)), p_buffer_);
            }
            pub inline fn writeBuffer(self: *const T, p_buffer_: ?*IRDPSRAPITransportStreamBuffer) HRESULT {
                return @as(*const IRDPSRAPITransportStream.VTable, @ptrCast(self.vtable)).WriteBuffer(@as(*const IRDPSRAPITransportStream, @ptrCast(self)), p_buffer_);
            }
            pub inline fn readBuffer(self: *const T, p_buffer_: ?*IRDPSRAPITransportStreamBuffer) HRESULT {
                return @as(*const IRDPSRAPITransportStream.VTable, @ptrCast(self.vtable)).ReadBuffer(@as(*const IRDPSRAPITransportStream, @ptrCast(self)), p_buffer_);
            }
            pub inline fn open(self: *const T, p_callbacks_: ?*IRDPSRAPITransportStreamEvents) HRESULT {
                return @as(*const IRDPSRAPITransportStream.VTable, @ptrCast(self.vtable)).Open(@as(*const IRDPSRAPITransportStream, @ptrCast(self)), p_callbacks_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IRDPSRAPITransportStream.VTable, @ptrCast(self.vtable)).Close(@as(*const IRDPSRAPITransportStream, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRDPSRAPISharingSession_Value = Guid.initString("eeb20886-e470-4cf6-842b-2739c0ec5cfb");
pub const IID_IRDPSRAPISharingSession = &IID_IRDPSRAPISharingSession_Value;
pub const IRDPSRAPISharingSession = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Open: *const fn (
            self: *const IRDPSRAPISharingSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IRDPSRAPISharingSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ColorDepth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISharingSession,
            color_depth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ColorDepth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISharingSession,
            p_color_depth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISharingSession,
            pp_val: ?*?*IRDPSRAPISessionProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Attendees: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISharingSession,
            pp_val: ?*?*IRDPSRAPIAttendeeManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Invitations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISharingSession,
            pp_val: ?*?*IRDPSRAPIInvitationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISharingSession,
            pp_val: ?*?*IRDPSRAPIApplicationFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VirtualChannelManager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISharingSession,
            pp_val: ?*?*IRDPSRAPIVirtualChannelManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IRDPSRAPISharingSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IRDPSRAPISharingSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectToClient: *const fn (
            self: *const IRDPSRAPISharingSession,
            bstr_connection_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDesktopSharedRect: *const fn (
            self: *const IRDPSRAPISharingSession,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesktopSharedRect: *const fn (
            self: *const IRDPSRAPISharingSession,
            pleft: ?*i32,
            ptop: ?*i32,
            pright: ?*i32,
            pbottom: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn open(self: *const T) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).Open(@as(*const IRDPSRAPISharingSession, @ptrCast(self)));
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).Close(@as(*const IRDPSRAPISharingSession, @ptrCast(self)));
            }
            pub inline fn putColorDepth(self: *const T, color_depth_: i32) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).put_ColorDepth(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), color_depth_);
            }
            pub inline fn getColorDepth(self: *const T, p_color_depth_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).get_ColorDepth(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), p_color_depth_);
            }
            pub inline fn getProperties(self: *const T, pp_val_: ?*?*IRDPSRAPISessionProperties) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), pp_val_);
            }
            pub inline fn getAttendees(self: *const T, pp_val_: ?*?*IRDPSRAPIAttendeeManager) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).get_Attendees(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), pp_val_);
            }
            pub inline fn getInvitations(self: *const T, pp_val_: ?*?*IRDPSRAPIInvitationManager) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).get_Invitations(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), pp_val_);
            }
            pub inline fn getApplicationFilter(self: *const T, pp_val_: ?*?*IRDPSRAPIApplicationFilter) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).get_ApplicationFilter(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), pp_val_);
            }
            pub inline fn getVirtualChannelManager(self: *const T, pp_val_: ?*?*IRDPSRAPIVirtualChannelManager) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).get_VirtualChannelManager(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), pp_val_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).Pause(@as(*const IRDPSRAPISharingSession, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).Resume(@as(*const IRDPSRAPISharingSession, @ptrCast(self)));
            }
            pub inline fn connectToClient(self: *const T, bstr_connection_string_: ?BSTR) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).ConnectToClient(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), bstr_connection_string_);
            }
            pub inline fn setDesktopSharedRect(self: *const T, left_: i32, top_: i32, right_: i32, bottom_: i32) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).SetDesktopSharedRect(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), left_, top_, right_, bottom_);
            }
            pub inline fn getDesktopSharedRect(self: *const T, pleft_: ?*i32, ptop_: ?*i32, pright_: ?*i32, pbottom_: ?*i32) HRESULT {
                return @as(*const IRDPSRAPISharingSession.VTable, @ptrCast(self.vtable)).GetDesktopSharedRect(@as(*const IRDPSRAPISharingSession, @ptrCast(self)), pleft_, ptop_, pright_, pbottom_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IRDPSRAPISharingSession2_Value = Guid.initString("fee4ee57-e3e8-4205-8fb0-8fd1d0675c21");
pub const IID_IRDPSRAPISharingSession2 = &IID_IRDPSRAPISharingSession2_Value;
pub const IRDPSRAPISharingSession2 = extern struct {
    pub const VTable = extern struct {
        base: IRDPSRAPISharingSession.VTable,
        ConnectUsingTransportStream: *const fn (
            self: *const IRDPSRAPISharingSession2,
            p_stream: ?*IRDPSRAPITransportStream,
            bstr_group: ?BSTR,
            bstr_authenticated_attendee_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FrameBuffer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRDPSRAPISharingSession2,
            pp_val: ?*?*IRDPSRAPIFrameBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendControlLevelChangeResponse: *const fn (
            self: *const IRDPSRAPISharingSession2,
            p_attendee: ?*IRDPSRAPIAttendee,
            requested_level: CTRL_LEVEL,
            reason_code: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRDPSRAPISharingSession.MethodMixin(T);
            pub inline fn connectUsingTransportStream(self: *const T, p_stream_: ?*IRDPSRAPITransportStream, bstr_group_: ?BSTR, bstr_authenticated_attendee_name_: ?BSTR) HRESULT {
                return @as(*const IRDPSRAPISharingSession2.VTable, @ptrCast(self.vtable)).ConnectUsingTransportStream(@as(*const IRDPSRAPISharingSession2, @ptrCast(self)), p_stream_, bstr_group_, bstr_authenticated_attendee_name_);
            }
            pub inline fn getFrameBuffer(self: *const T, pp_val_: ?*?*IRDPSRAPIFrameBuffer) HRESULT {
                return @as(*const IRDPSRAPISharingSession2.VTable, @ptrCast(self.vtable)).get_FrameBuffer(@as(*const IRDPSRAPISharingSession2, @ptrCast(self)), pp_val_);
            }
            pub inline fn sendControlLevelChangeResponse(self: *const T, p_attendee_: ?*IRDPSRAPIAttendee, requested_level_: CTRL_LEVEL, reason_code_: i32) HRESULT {
                return @as(*const IRDPSRAPISharingSession2.VTable, @ptrCast(self.vtable)).SendControlLevelChangeResponse(@as(*const IRDPSRAPISharingSession2, @ptrCast(self)), p_attendee_, requested_level_, reason_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const __MIDL___MIDL_itf_rdpencomapi_0000_0027_0001 = enum(i32) {
    MAX_CHANNEL_MESSAGE_SIZE = 1024,
    MAX_CHANNEL_NAME_LEN = 8,
    MAX_LEGACY_CHANNEL_MESSAGE_SIZE = 409600,
    ATTENDEE_ID_EVERYONE = -1,
    ATTENDEE_ID_HOST = 0,
    CONN_INTERVAL = 50,
    // ATTENDEE_ID_DEFAULT = -1, this enum value conflicts with ATTENDEE_ID_EVERYONE
};
pub const CONST_MAX_CHANNEL_MESSAGE_SIZE = __MIDL___MIDL_itf_rdpencomapi_0000_0027_0001.MAX_CHANNEL_MESSAGE_SIZE;
pub const CONST_MAX_CHANNEL_NAME_LEN = __MIDL___MIDL_itf_rdpencomapi_0000_0027_0001.MAX_CHANNEL_NAME_LEN;
pub const CONST_MAX_LEGACY_CHANNEL_MESSAGE_SIZE = __MIDL___MIDL_itf_rdpencomapi_0000_0027_0001.MAX_LEGACY_CHANNEL_MESSAGE_SIZE;
pub const CONST_ATTENDEE_ID_EVERYONE = __MIDL___MIDL_itf_rdpencomapi_0000_0027_0001.ATTENDEE_ID_EVERYONE;
pub const CONST_ATTENDEE_ID_HOST = __MIDL___MIDL_itf_rdpencomapi_0000_0027_0001.ATTENDEE_ID_HOST;
pub const CONST_CONN_INTERVAL = __MIDL___MIDL_itf_rdpencomapi_0000_0027_0001.CONN_INTERVAL;
pub const CONST_ATTENDEE_ID_DEFAULT = __MIDL___MIDL_itf_rdpencomapi_0000_0027_0001.ATTENDEE_ID_EVERYONE;

pub const __ReferenceRemainingTypes__ = extern struct {
    __ctrlLevel__: CTRL_LEVEL,
    __attendeeDisconnectReason__: ATTENDEE_DISCONNECT_REASON,
    __channelPriority__: CHANNEL_PRIORITY,
    __channelFlags__: CHANNEL_FLAGS,
    __channelAccessEnum__: CHANNEL_ACCESS_ENUM,
    __rdpencomapiAttendeeFlags__: RDPENCOMAPI_ATTENDEE_FLAGS,
    __rdpsrapiWndFlags__: RDPSRAPI_WND_FLAGS,
    __rdpsrapiAppFlags__: RDPSRAPI_APP_FLAGS,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID__IRDPSessionEvents_Value = Guid.initString("98a97042-6698-40e9-8efd-b3200990004b");
pub const IID__IRDPSessionEvents = &IID__IRDPSessionEvents_Value;
pub const _IRDPSessionEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
