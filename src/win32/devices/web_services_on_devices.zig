//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (17)
//--------------------------------------------------------------------------------
pub const WSD_DEFAULT_HOSTING_ADDRESS = "http://*:5357/";
pub const WSD_DEFAULT_SECURE_HOSTING_ADDRESS = "https://*:5358/";
pub const WSD_DEFAULT_EVENTING_ADDRESS = "http://*:5357/";
pub const WSDAPI_OPTION_MAX_INBOUND_MESSAGE_SIZE = @as(u32, 1);
pub const WSDAPI_OPTION_TRACE_XML_TO_DEBUGGER = @as(u32, 2);
pub const WSDAPI_OPTION_TRACE_XML_TO_FILE = @as(u32, 3);
pub const WSDAPI_SSL_CERT_APPLY_DEFAULT_CHECKS = @as(u32, 0);
pub const WSDAPI_SSL_CERT_IGNORE_REVOCATION = @as(u32, 1);
pub const WSDAPI_SSL_CERT_IGNORE_EXPIRY = @as(u32, 2);
pub const WSDAPI_SSL_CERT_IGNORE_WRONG_USAGE = @as(u32, 4);
pub const WSDAPI_SSL_CERT_IGNORE_UNKNOWN_CA = @as(u32, 8);
pub const WSDAPI_SSL_CERT_IGNORE_INVALID_CN = @as(u32, 16);
pub const WSDAPI_COMPACTSIG_ACCEPT_ALL_MESSAGES = @as(u32, 1);
pub const WSD_SECURITY_HTTP_AUTH_SCHEME_NEGOTIATE = @as(u32, 1);
pub const WSD_SECURITY_HTTP_AUTH_SCHEME_NTLM = @as(u32, 2);
pub const WSDAPI_ADDRESSFAMILY_IPV4 = @as(u32, 1);
pub const WSDAPI_ADDRESSFAMILY_IPV6 = @as(u32, 2);

//--------------------------------------------------------------------------------
// Section: Types (110)
//--------------------------------------------------------------------------------
pub const WSD_CONFIG_PARAM_TYPE = enum(i32) {
    CONFIG_MAX_INBOUND_MESSAGE_SIZE = 1,
    CONFIG_MAX_OUTBOUND_MESSAGE_SIZE = 2,
    SECURITY_SSL_CERT_FOR_CLIENT_AUTH = 3,
    SECURITY_SSL_SERVER_CERT_VALIDATION = 4,
    SECURITY_SSL_CLIENT_CERT_VALIDATION = 5,
    SECURITY_SSL_NEGOTIATE_CLIENT_CERT = 6,
    SECURITY_COMPACTSIG_SIGNING_CERT = 7,
    SECURITY_COMPACTSIG_VALIDATION = 8,
    CONFIG_HOSTING_ADDRESSES = 9,
    CONFIG_DEVICE_ADDRESSES = 10,
    SECURITY_REQUIRE_HTTP_CLIENT_AUTH = 11,
    SECURITY_REQUIRE_CLIENT_CERT_OR_HTTP_CLIENT_AUTH = 12,
    SECURITY_USE_HTTP_CLIENT_AUTH = 13,
};
pub const WSD_CONFIG_MAX_INBOUND_MESSAGE_SIZE = WSD_CONFIG_PARAM_TYPE.CONFIG_MAX_INBOUND_MESSAGE_SIZE;
pub const WSD_CONFIG_MAX_OUTBOUND_MESSAGE_SIZE = WSD_CONFIG_PARAM_TYPE.CONFIG_MAX_OUTBOUND_MESSAGE_SIZE;
pub const WSD_SECURITY_SSL_CERT_FOR_CLIENT_AUTH = WSD_CONFIG_PARAM_TYPE.SECURITY_SSL_CERT_FOR_CLIENT_AUTH;
pub const WSD_SECURITY_SSL_SERVER_CERT_VALIDATION = WSD_CONFIG_PARAM_TYPE.SECURITY_SSL_SERVER_CERT_VALIDATION;
pub const WSD_SECURITY_SSL_CLIENT_CERT_VALIDATION = WSD_CONFIG_PARAM_TYPE.SECURITY_SSL_CLIENT_CERT_VALIDATION;
pub const WSD_SECURITY_SSL_NEGOTIATE_CLIENT_CERT = WSD_CONFIG_PARAM_TYPE.SECURITY_SSL_NEGOTIATE_CLIENT_CERT;
pub const WSD_SECURITY_COMPACTSIG_SIGNING_CERT = WSD_CONFIG_PARAM_TYPE.SECURITY_COMPACTSIG_SIGNING_CERT;
pub const WSD_SECURITY_COMPACTSIG_VALIDATION = WSD_CONFIG_PARAM_TYPE.SECURITY_COMPACTSIG_VALIDATION;
pub const WSD_CONFIG_HOSTING_ADDRESSES = WSD_CONFIG_PARAM_TYPE.CONFIG_HOSTING_ADDRESSES;
pub const WSD_CONFIG_DEVICE_ADDRESSES = WSD_CONFIG_PARAM_TYPE.CONFIG_DEVICE_ADDRESSES;
pub const WSD_SECURITY_REQUIRE_HTTP_CLIENT_AUTH = WSD_CONFIG_PARAM_TYPE.SECURITY_REQUIRE_HTTP_CLIENT_AUTH;
pub const WSD_SECURITY_REQUIRE_CLIENT_CERT_OR_HTTP_CLIENT_AUTH = WSD_CONFIG_PARAM_TYPE.SECURITY_REQUIRE_CLIENT_CERT_OR_HTTP_CLIENT_AUTH;
pub const WSD_SECURITY_USE_HTTP_CLIENT_AUTH = WSD_CONFIG_PARAM_TYPE.SECURITY_USE_HTTP_CLIENT_AUTH;

pub const WSD_CONFIG_PARAM = extern struct {
    configParamType: WSD_CONFIG_PARAM_TYPE,
    pConfigData: ?*anyopaque,
    dwConfigDataSize: u32,
};

pub const WSD_SECURITY_CERT_VALIDATION_V1 = extern struct {
    certMatchArray: ?*?*CERT_CONTEXT,
    dwCertMatchArrayCount: u32,
    hCertMatchStore: ?HCERTSTORE,
    hCertIssuerStore: ?HCERTSTORE,
    dwCertCheckOptions: u32,
};

pub const WSD_SECURITY_CERT_VALIDATION = extern struct {
    certMatchArray: ?*?*CERT_CONTEXT,
    dwCertMatchArrayCount: u32,
    hCertMatchStore: ?HCERTSTORE,
    hCertIssuerStore: ?HCERTSTORE,
    dwCertCheckOptions: u32,
    pszCNGHashAlgId: ?[*:0]const u16,
    pbCertHash: ?*u8,
    dwCertHashSize: u32,
};

pub const WSD_SECURITY_SIGNATURE_VALIDATION = extern struct {
    signingCertArray: ?*?*CERT_CONTEXT,
    dwSigningCertArrayCount: u32,
    hSigningCertStore: ?HCERTSTORE,
    dwFlags: u32,
};

pub const WSD_CONFIG_ADDRESSES = extern struct {
    addresses: ?*?*IWSDAddress,
    dwAddressCount: u32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDAddress_Value = Guid.initString("b9574c6c-12a6-4f74-93a1-3318ff605759");
pub const IID_IWSDAddress = &IID_IWSDAddress_Value;
pub const IWSDAddress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Serialize: *const fn (
            self: *const IWSDAddress,
            psz_buffer: [*:0]u16,
            cch_length: u32,
            f_safe: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deserialize: *const fn (
            self: *const IWSDAddress,
            psz_buffer: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn serialize(self: *const T, psz_buffer_: [*:0]u16, cch_length_: u32, f_safe_: BOOL) HRESULT {
                return @as(*const IWSDAddress.VTable, @ptrCast(self.vtable)).Serialize(@as(*const IWSDAddress, @ptrCast(self)), psz_buffer_, cch_length_, f_safe_);
            }
            pub inline fn deserialize(self: *const T, psz_buffer_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDAddress.VTable, @ptrCast(self.vtable)).Deserialize(@as(*const IWSDAddress, @ptrCast(self)), psz_buffer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDTransportAddress_Value = Guid.initString("70d23498-4ee6-4340-a3df-d845d2235467");
pub const IID_IWSDTransportAddress = &IID_IWSDTransportAddress_Value;
pub const IWSDTransportAddress = extern struct {
    pub const VTable = extern struct {
        base: IWSDAddress.VTable,
        GetPort: *const fn (
            self: *const IWSDTransportAddress,
            pw_port: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPort: *const fn (
            self: *const IWSDTransportAddress,
            w_port: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransportAddress: *const fn (
            self: *const IWSDTransportAddress,
            ppsz_address: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransportAddressEx: *const fn (
            self: *const IWSDTransportAddress,
            f_safe: BOOL,
            ppsz_address: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransportAddress: *const fn (
            self: *const IWSDTransportAddress,
            psz_address: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWSDAddress.MethodMixin(T);
            pub inline fn getPort(self: *const T, pw_port_: ?*u16) HRESULT {
                return @as(*const IWSDTransportAddress.VTable, @ptrCast(self.vtable)).GetPort(@as(*const IWSDTransportAddress, @ptrCast(self)), pw_port_);
            }
            pub inline fn setPort(self: *const T, w_port_: u16) HRESULT {
                return @as(*const IWSDTransportAddress.VTable, @ptrCast(self.vtable)).SetPort(@as(*const IWSDTransportAddress, @ptrCast(self)), w_port_);
            }
            pub inline fn getTransportAddress(self: *const T, ppsz_address_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDTransportAddress.VTable, @ptrCast(self.vtable)).GetTransportAddress(@as(*const IWSDTransportAddress, @ptrCast(self)), ppsz_address_);
            }
            pub inline fn getTransportAddressEx(self: *const T, f_safe_: BOOL, ppsz_address_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDTransportAddress.VTable, @ptrCast(self.vtable)).GetTransportAddressEx(@as(*const IWSDTransportAddress, @ptrCast(self)), f_safe_, ppsz_address_);
            }
            pub inline fn setTransportAddress(self: *const T, psz_address_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDTransportAddress.VTable, @ptrCast(self.vtable)).SetTransportAddress(@as(*const IWSDTransportAddress, @ptrCast(self)), psz_address_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDMessageParameters_Value = Guid.initString("1fafe8a2-e6fc-4b80-b6cf-b7d45c416d7c");
pub const IID_IWSDMessageParameters = &IID_IWSDMessageParameters_Value;
pub const IWSDMessageParameters = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLocalAddress: *const fn (
            self: *const IWSDMessageParameters,
            pp_address: ?*?*IWSDAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLocalAddress: *const fn (
            self: *const IWSDMessageParameters,
            p_address: ?*IWSDAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemoteAddress: *const fn (
            self: *const IWSDMessageParameters,
            pp_address: ?*?*IWSDAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRemoteAddress: *const fn (
            self: *const IWSDMessageParameters,
            p_address: ?*IWSDAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLowerParameters: *const fn (
            self: *const IWSDMessageParameters,
            pp_tx_params: ?*?*IWSDMessageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLocalAddress(self: *const T, pp_address_: ?*?*IWSDAddress) HRESULT {
                return @as(*const IWSDMessageParameters.VTable, @ptrCast(self.vtable)).GetLocalAddress(@as(*const IWSDMessageParameters, @ptrCast(self)), pp_address_);
            }
            pub inline fn setLocalAddress(self: *const T, p_address_: ?*IWSDAddress) HRESULT {
                return @as(*const IWSDMessageParameters.VTable, @ptrCast(self.vtable)).SetLocalAddress(@as(*const IWSDMessageParameters, @ptrCast(self)), p_address_);
            }
            pub inline fn getRemoteAddress(self: *const T, pp_address_: ?*?*IWSDAddress) HRESULT {
                return @as(*const IWSDMessageParameters.VTable, @ptrCast(self.vtable)).GetRemoteAddress(@as(*const IWSDMessageParameters, @ptrCast(self)), pp_address_);
            }
            pub inline fn setRemoteAddress(self: *const T, p_address_: ?*IWSDAddress) HRESULT {
                return @as(*const IWSDMessageParameters.VTable, @ptrCast(self.vtable)).SetRemoteAddress(@as(*const IWSDMessageParameters, @ptrCast(self)), p_address_);
            }
            pub inline fn getLowerParameters(self: *const T, pp_tx_params_: ?*?*IWSDMessageParameters) HRESULT {
                return @as(*const IWSDMessageParameters.VTable, @ptrCast(self.vtable)).GetLowerParameters(@as(*const IWSDMessageParameters, @ptrCast(self)), pp_tx_params_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WSDUdpRetransmitParams = extern struct {
    ulSendDelay: u32,
    ulRepeat: u32,
    ulRepeatMinDelay: u32,
    ulRepeatMaxDelay: u32,
    ulRepeatUpperDelay: u32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDUdpMessageParameters_Value = Guid.initString("9934149f-8f0c-447b-aa0b-73124b0ca7f0");
pub const IID_IWSDUdpMessageParameters = &IID_IWSDUdpMessageParameters_Value;
pub const IWSDUdpMessageParameters = extern struct {
    pub const VTable = extern struct {
        base: IWSDMessageParameters.VTable,
        SetRetransmitParams: *const fn (
            self: *const IWSDUdpMessageParameters,
            p_params: ?*const WSDUdpRetransmitParams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRetransmitParams: *const fn (
            self: *const IWSDUdpMessageParameters,
            p_params: ?*WSDUdpRetransmitParams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWSDMessageParameters.MethodMixin(T);
            pub inline fn setRetransmitParams(self: *const T, p_params_: ?*const WSDUdpRetransmitParams) HRESULT {
                return @as(*const IWSDUdpMessageParameters.VTable, @ptrCast(self.vtable)).SetRetransmitParams(@as(*const IWSDUdpMessageParameters, @ptrCast(self)), p_params_);
            }
            pub inline fn getRetransmitParams(self: *const T, p_params_: ?*WSDUdpRetransmitParams) HRESULT {
                return @as(*const IWSDUdpMessageParameters.VTable, @ptrCast(self.vtable)).GetRetransmitParams(@as(*const IWSDUdpMessageParameters, @ptrCast(self)), p_params_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WSDUdpMessageType = enum(i32) {
    ONE_WAY = 0,
    TWO_WAY = 1,
};
pub const ONE_WAY = WSDUdpMessageType.ONE_WAY;
pub const TWO_WAY = WSDUdpMessageType.TWO_WAY;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDUdpAddress_Value = Guid.initString("74d6124a-a441-4f78-a1eb-97a8d1996893");
pub const IID_IWSDUdpAddress = &IID_IWSDUdpAddress_Value;
pub const IWSDUdpAddress = extern struct {
    pub const VTable = extern struct {
        base: IWSDTransportAddress.VTable,
        SetSockaddr: *const fn (
            self: *const IWSDUdpAddress,
            p_sock_addr: ?*const SOCKADDR_STORAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSockaddr: *const fn (
            self: *const IWSDUdpAddress,
            p_sock_addr: ?*SOCKADDR_STORAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExclusive: *const fn (
            self: *const IWSDUdpAddress,
            f_exclusive: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExclusive: *const fn (
            self: *const IWSDUdpAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMessageType: *const fn (
            self: *const IWSDUdpAddress,
            message_type: WSDUdpMessageType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessageType: *const fn (
            self: *const IWSDUdpAddress,
            p_message_type: ?*WSDUdpMessageType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTTL: *const fn (
            self: *const IWSDUdpAddress,
            dw_t_t_l: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTTL: *const fn (
            self: *const IWSDUdpAddress,
            pdw_t_t_l: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlias: *const fn (
            self: *const IWSDUdpAddress,
            p_alias: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlias: *const fn (
            self: *const IWSDUdpAddress,
            p_alias: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWSDTransportAddress.MethodMixin(T);
            pub inline fn setSockaddr(self: *const T, p_sock_addr_: ?*const SOCKADDR_STORAGE) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).SetSockaddr(@as(*const IWSDUdpAddress, @ptrCast(self)), p_sock_addr_);
            }
            pub inline fn getSockaddr(self: *const T, p_sock_addr_: ?*SOCKADDR_STORAGE) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).GetSockaddr(@as(*const IWSDUdpAddress, @ptrCast(self)), p_sock_addr_);
            }
            pub inline fn setExclusive(self: *const T, f_exclusive_: BOOL) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).SetExclusive(@as(*const IWSDUdpAddress, @ptrCast(self)), f_exclusive_);
            }
            pub inline fn getExclusive(self: *const T) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).GetExclusive(@as(*const IWSDUdpAddress, @ptrCast(self)));
            }
            pub inline fn setMessageType(self: *const T, message_type_: WSDUdpMessageType) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).SetMessageType(@as(*const IWSDUdpAddress, @ptrCast(self)), message_type_);
            }
            pub inline fn getMessageType(self: *const T, p_message_type_: ?*WSDUdpMessageType) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).GetMessageType(@as(*const IWSDUdpAddress, @ptrCast(self)), p_message_type_);
            }
            pub inline fn setTTL(self: *const T, dw_t_t_l_: u32) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).SetTTL(@as(*const IWSDUdpAddress, @ptrCast(self)), dw_t_t_l_);
            }
            pub inline fn getTTL(self: *const T, pdw_t_t_l_: ?*u32) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).GetTTL(@as(*const IWSDUdpAddress, @ptrCast(self)), pdw_t_t_l_);
            }
            pub inline fn setAlias(self: *const T, p_alias_: ?*const Guid) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).SetAlias(@as(*const IWSDUdpAddress, @ptrCast(self)), p_alias_);
            }
            pub inline fn getAlias(self: *const T, p_alias_: ?*Guid) HRESULT {
                return @as(*const IWSDUdpAddress.VTable, @ptrCast(self.vtable)).GetAlias(@as(*const IWSDUdpAddress, @ptrCast(self)), p_alias_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDHttpMessageParameters_Value = Guid.initString("540bd122-5c83-4dec-b396-ea62a2697fdf");
pub const IID_IWSDHttpMessageParameters = &IID_IWSDHttpMessageParameters_Value;
pub const IWSDHttpMessageParameters = extern struct {
    pub const VTable = extern struct {
        base: IWSDMessageParameters.VTable,
        SetInboundHttpHeaders: *const fn (
            self: *const IWSDHttpMessageParameters,
            psz_headers: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInboundHttpHeaders: *const fn (
            self: *const IWSDHttpMessageParameters,
            ppsz_headers: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutboundHttpHeaders: *const fn (
            self: *const IWSDHttpMessageParameters,
            psz_headers: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutboundHttpHeaders: *const fn (
            self: *const IWSDHttpMessageParameters,
            ppsz_headers: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetID: *const fn (
            self: *const IWSDHttpMessageParameters,
            psz_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetID: *const fn (
            self: *const IWSDHttpMessageParameters,
            ppsz_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContext: *const fn (
            self: *const IWSDHttpMessageParameters,
            p_context: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: *const fn (
            self: *const IWSDHttpMessageParameters,
            pp_context: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IWSDHttpMessageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWSDMessageParameters.MethodMixin(T);
            pub inline fn setInboundHttpHeaders(self: *const T, psz_headers_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDHttpMessageParameters.VTable, @ptrCast(self.vtable)).SetInboundHttpHeaders(@as(*const IWSDHttpMessageParameters, @ptrCast(self)), psz_headers_);
            }
            pub inline fn getInboundHttpHeaders(self: *const T, ppsz_headers_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDHttpMessageParameters.VTable, @ptrCast(self.vtable)).GetInboundHttpHeaders(@as(*const IWSDHttpMessageParameters, @ptrCast(self)), ppsz_headers_);
            }
            pub inline fn setOutboundHttpHeaders(self: *const T, psz_headers_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDHttpMessageParameters.VTable, @ptrCast(self.vtable)).SetOutboundHttpHeaders(@as(*const IWSDHttpMessageParameters, @ptrCast(self)), psz_headers_);
            }
            pub inline fn getOutboundHttpHeaders(self: *const T, ppsz_headers_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDHttpMessageParameters.VTable, @ptrCast(self.vtable)).GetOutboundHttpHeaders(@as(*const IWSDHttpMessageParameters, @ptrCast(self)), ppsz_headers_);
            }
            pub inline fn setID(self: *const T, psz_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDHttpMessageParameters.VTable, @ptrCast(self.vtable)).SetID(@as(*const IWSDHttpMessageParameters, @ptrCast(self)), psz_id_);
            }
            pub inline fn getID(self: *const T, ppsz_id_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDHttpMessageParameters.VTable, @ptrCast(self.vtable)).GetID(@as(*const IWSDHttpMessageParameters, @ptrCast(self)), ppsz_id_);
            }
            pub inline fn setContext(self: *const T, p_context_: ?*IUnknown) HRESULT {
                return @as(*const IWSDHttpMessageParameters.VTable, @ptrCast(self.vtable)).SetContext(@as(*const IWSDHttpMessageParameters, @ptrCast(self)), p_context_);
            }
            pub inline fn getContext(self: *const T, pp_context_: ?*?*IUnknown) HRESULT {
                return @as(*const IWSDHttpMessageParameters.VTable, @ptrCast(self.vtable)).GetContext(@as(*const IWSDHttpMessageParameters, @ptrCast(self)), pp_context_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IWSDHttpMessageParameters.VTable, @ptrCast(self.vtable)).Clear(@as(*const IWSDHttpMessageParameters, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDHttpAddress_Value = Guid.initString("d09ac7bd-2a3e-4b85-8605-2737ff3e4ea0");
pub const IID_IWSDHttpAddress = &IID_IWSDHttpAddress_Value;
pub const IWSDHttpAddress = extern struct {
    pub const VTable = extern struct {
        base: IWSDTransportAddress.VTable,
        GetSecure: *const fn (
            self: *const IWSDHttpAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecure: *const fn (
            self: *const IWSDHttpAddress,
            f_secure: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn (
            self: *const IWSDHttpAddress,
            ppsz_path: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: *const fn (
            self: *const IWSDHttpAddress,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWSDTransportAddress.MethodMixin(T);
            pub inline fn getSecure(self: *const T) HRESULT {
                return @as(*const IWSDHttpAddress.VTable, @ptrCast(self.vtable)).GetSecure(@as(*const IWSDHttpAddress, @ptrCast(self)));
            }
            pub inline fn setSecure(self: *const T, f_secure_: BOOL) HRESULT {
                return @as(*const IWSDHttpAddress.VTable, @ptrCast(self.vtable)).SetSecure(@as(*const IWSDHttpAddress, @ptrCast(self)), f_secure_);
            }
            pub inline fn getPath(self: *const T, ppsz_path_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDHttpAddress.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IWSDHttpAddress, @ptrCast(self)), ppsz_path_);
            }
            pub inline fn setPath(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDHttpAddress.VTable, @ptrCast(self.vtable)).SetPath(@as(*const IWSDHttpAddress, @ptrCast(self)), psz_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWSDSSLClientCertificate_Value = Guid.initString("de105e87-a0da-418e-98ad-27b9eed87bdc");
pub const IID_IWSDSSLClientCertificate = &IID_IWSDSSLClientCertificate_Value;
pub const IWSDSSLClientCertificate = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClientCertificate: *const fn (
            self: *const IWSDSSLClientCertificate,
            pp_cert_context: ?*?*CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMappedAccessToken: *const fn (
            self: *const IWSDSSLClientCertificate,
            ph_token: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getClientCertificate(self: *const T, pp_cert_context_: ?*?*CERT_CONTEXT) HRESULT {
                return @as(*const IWSDSSLClientCertificate.VTable, @ptrCast(self.vtable)).GetClientCertificate(@as(*const IWSDSSLClientCertificate, @ptrCast(self)), pp_cert_context_);
            }
            pub inline fn getMappedAccessToken(self: *const T, ph_token_: ?*?HANDLE) HRESULT {
                return @as(*const IWSDSSLClientCertificate.VTable, @ptrCast(self.vtable)).GetMappedAccessToken(@as(*const IWSDSSLClientCertificate, @ptrCast(self)), ph_token_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWSDHttpAuthParameters_Value = Guid.initString("0b476df0-8dac-480d-b05c-99781a5884aa");
pub const IID_IWSDHttpAuthParameters = &IID_IWSDHttpAuthParameters_Value;
pub const IWSDHttpAuthParameters = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClientAccessToken: *const fn (
            self: *const IWSDHttpAuthParameters,
            ph_token: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthType: *const fn (
            self: *const IWSDHttpAuthParameters,
            p_auth_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getClientAccessToken(self: *const T, ph_token_: ?*?HANDLE) HRESULT {
                return @as(*const IWSDHttpAuthParameters.VTable, @ptrCast(self.vtable)).GetClientAccessToken(@as(*const IWSDHttpAuthParameters, @ptrCast(self)), ph_token_);
            }
            pub inline fn getAuthType(self: *const T, p_auth_type_: ?*u32) HRESULT {
                return @as(*const IWSDHttpAuthParameters.VTable, @ptrCast(self.vtable)).GetAuthType(@as(*const IWSDHttpAuthParameters, @ptrCast(self)), p_auth_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWSDSignatureProperty_Value = Guid.initString("03ce20aa-71c4-45e2-b32e-3766c61c790f");
pub const IID_IWSDSignatureProperty = &IID_IWSDSignatureProperty_Value;
pub const IWSDSignatureProperty = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMessageSigned: *const fn (
            self: *const IWSDSignatureProperty,
            pb_signed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMessageSignatureTrusted: *const fn (
            self: *const IWSDSignatureProperty,
            pb_signature_trusted: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyInfo: *const fn (
            self: *const IWSDSignatureProperty,
            // TODO: what to do with BytesParamIndex 1?
            pb_key_info: ?*u8,
            pdw_key_info_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignature: *const fn (
            self: *const IWSDSignatureProperty,
            // TODO: what to do with BytesParamIndex 1?
            pb_signature: ?*u8,
            pdw_signature_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignedInfoHash: *const fn (
            self: *const IWSDSignatureProperty,
            // TODO: what to do with BytesParamIndex 1?
            pb_signed_info_hash: ?*u8,
            pdw_hash_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isMessageSigned(self: *const T, pb_signed_: ?*BOOL) HRESULT {
                return @as(*const IWSDSignatureProperty.VTable, @ptrCast(self.vtable)).IsMessageSigned(@as(*const IWSDSignatureProperty, @ptrCast(self)), pb_signed_);
            }
            pub inline fn isMessageSignatureTrusted(self: *const T, pb_signature_trusted_: ?*BOOL) HRESULT {
                return @as(*const IWSDSignatureProperty.VTable, @ptrCast(self.vtable)).IsMessageSignatureTrusted(@as(*const IWSDSignatureProperty, @ptrCast(self)), pb_signature_trusted_);
            }
            pub inline fn getKeyInfo(self: *const T, pb_key_info_: ?*u8, pdw_key_info_size_: ?*u32) HRESULT {
                return @as(*const IWSDSignatureProperty.VTable, @ptrCast(self.vtable)).GetKeyInfo(@as(*const IWSDSignatureProperty, @ptrCast(self)), pb_key_info_, pdw_key_info_size_);
            }
            pub inline fn getSignature(self: *const T, pb_signature_: ?*u8, pdw_signature_size_: ?*u32) HRESULT {
                return @as(*const IWSDSignatureProperty.VTable, @ptrCast(self.vtable)).GetSignature(@as(*const IWSDSignatureProperty, @ptrCast(self)), pb_signature_, pdw_signature_size_);
            }
            pub inline fn getSignedInfoHash(self: *const T, pb_signed_info_hash_: ?*u8, pdw_hash_size_: ?*u32) HRESULT {
                return @as(*const IWSDSignatureProperty.VTable, @ptrCast(self.vtable)).GetSignedInfoHash(@as(*const IWSDSignatureProperty, @ptrCast(self)), pb_signed_info_hash_, pdw_hash_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDAttachment_Value = Guid.initString("5d55a616-9df8-4b09-b156-9ba351a48b76");
pub const IID_IWSDAttachment = &IID_IWSDAttachment_Value;
pub const IWSDAttachment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDOutboundAttachment_Value = Guid.initString("aa302f8d-5a22-4ba5-b392-aa8486f4c15d");
pub const IID_IWSDOutboundAttachment = &IID_IWSDOutboundAttachment_Value;
pub const IWSDOutboundAttachment = extern struct {
    pub const VTable = extern struct {
        base: IWSDAttachment.VTable,
        Write: *const fn (
            self: *const IWSDOutboundAttachment,
            p_buffer: [*:0]const u8,
            dw_bytes_to_write: u32,
            pdw_number_of_bytes_written: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWSDOutboundAttachment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const IWSDOutboundAttachment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWSDAttachment.MethodMixin(T);
            pub inline fn write(self: *const T, p_buffer_: [*:0]const u8, dw_bytes_to_write_: u32, pdw_number_of_bytes_written_: ?*u32) HRESULT {
                return @as(*const IWSDOutboundAttachment.VTable, @ptrCast(self.vtable)).Write(@as(*const IWSDOutboundAttachment, @ptrCast(self)), p_buffer_, dw_bytes_to_write_, pdw_number_of_bytes_written_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWSDOutboundAttachment.VTable, @ptrCast(self.vtable)).Close(@as(*const IWSDOutboundAttachment, @ptrCast(self)));
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const IWSDOutboundAttachment.VTable, @ptrCast(self.vtable)).Abort(@as(*const IWSDOutboundAttachment, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDInboundAttachment_Value = Guid.initString("5bd6ca65-233c-4fb8-9f7a-2641619655c9");
pub const IID_IWSDInboundAttachment = &IID_IWSDInboundAttachment_Value;
pub const IWSDInboundAttachment = extern struct {
    pub const VTable = extern struct {
        base: IWSDAttachment.VTable,
        Read: *const fn (
            self: *const IWSDInboundAttachment,
            p_buffer: [*:0]u8,
            dw_bytes_to_read: u32,
            pdw_number_of_bytes_read: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWSDInboundAttachment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWSDAttachment.MethodMixin(T);
            pub inline fn read(self: *const T, p_buffer_: [*:0]u8, dw_bytes_to_read_: u32, pdw_number_of_bytes_read_: ?*u32) HRESULT {
                return @as(*const IWSDInboundAttachment.VTable, @ptrCast(self.vtable)).Read(@as(*const IWSDInboundAttachment, @ptrCast(self)), p_buffer_, dw_bytes_to_read_, pdw_number_of_bytes_read_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWSDInboundAttachment.VTable, @ptrCast(self.vtable)).Close(@as(*const IWSDInboundAttachment, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WSD_DATETIME = extern struct {
    isPositive: BOOL,
    year: u32,
    month: u8,
    day: u8,
    hour: u8,
    minute: u8,
    second: u8,
    millisecond: u32,
    TZIsLocal: BOOL,
    TZIsPositive: BOOL,
    TZHour: u8,
    TZMinute: u8,
};

pub const WSD_DURATION = extern struct {
    isPositive: BOOL,
    year: u32,
    month: u32,
    day: u32,
    hour: u32,
    minute: u32,
    second: u32,
    millisecond: u32,
};

pub const WSDXML_OP = enum(i32) {
    None = 0,
    EndOfTable = 1,
    BeginElement_ = 2,
    BeginAnyElement = 3,
    EndElement = 4,
    Element_ = 5,
    AnyElement = 6,
    AnyElements = 7,
    AnyText = 8,
    Attribute_ = 9,
    BeginChoice = 10,
    EndChoice = 11,
    BeginSequence = 12,
    EndSequence = 13,
    BeginAll = 14,
    EndAll = 15,
    Anything = 16,
    AnyNumber = 17,
    OneOrMore = 18,
    Optional = 19,
    FormatBool_ = 20,
    FormatInt8_ = 21,
    FormatInt16_ = 22,
    FormatInt32_ = 23,
    FormatInt64_ = 24,
    FormatUInt8_ = 25,
    FormatUInt16_ = 26,
    FormatUInt32_ = 27,
    FormatUInt64_ = 28,
    FormatUnicodeString_ = 29,
    FormatDom_ = 30,
    FormatStruct_ = 31,
    FormatUri_ = 32,
    FormatUuidUri_ = 33,
    FormatName_ = 34,
    FormatListInsertTail_ = 35,
    FormatType_ = 36,
    FormatDynamicType_ = 37,
    FormatLookupType_ = 38,
    FormatDuration_ = 39,
    FormatDateTime_ = 40,
    FormatFloat_ = 41,
    FormatDouble_ = 42,
    Process_ = 43,
    QualifiedAttribute_ = 44,
    FormatXMLDeclaration_ = 45,
    FormatMax = 46,
};
pub const OpNone = WSDXML_OP.None;
pub const OpEndOfTable = WSDXML_OP.EndOfTable;
pub const OpBeginElement_ = WSDXML_OP.BeginElement_;
pub const OpBeginAnyElement = WSDXML_OP.BeginAnyElement;
pub const OpEndElement = WSDXML_OP.EndElement;
pub const OpElement_ = WSDXML_OP.Element_;
pub const OpAnyElement = WSDXML_OP.AnyElement;
pub const OpAnyElements = WSDXML_OP.AnyElements;
pub const OpAnyText = WSDXML_OP.AnyText;
pub const OpAttribute_ = WSDXML_OP.Attribute_;
pub const OpBeginChoice = WSDXML_OP.BeginChoice;
pub const OpEndChoice = WSDXML_OP.EndChoice;
pub const OpBeginSequence = WSDXML_OP.BeginSequence;
pub const OpEndSequence = WSDXML_OP.EndSequence;
pub const OpBeginAll = WSDXML_OP.BeginAll;
pub const OpEndAll = WSDXML_OP.EndAll;
pub const OpAnything = WSDXML_OP.Anything;
pub const OpAnyNumber = WSDXML_OP.AnyNumber;
pub const OpOneOrMore = WSDXML_OP.OneOrMore;
pub const OpOptional = WSDXML_OP.Optional;
pub const OpFormatBool_ = WSDXML_OP.FormatBool_;
pub const OpFormatInt8_ = WSDXML_OP.FormatInt8_;
pub const OpFormatInt16_ = WSDXML_OP.FormatInt16_;
pub const OpFormatInt32_ = WSDXML_OP.FormatInt32_;
pub const OpFormatInt64_ = WSDXML_OP.FormatInt64_;
pub const OpFormatUInt8_ = WSDXML_OP.FormatUInt8_;
pub const OpFormatUInt16_ = WSDXML_OP.FormatUInt16_;
pub const OpFormatUInt32_ = WSDXML_OP.FormatUInt32_;
pub const OpFormatUInt64_ = WSDXML_OP.FormatUInt64_;
pub const OpFormatUnicodeString_ = WSDXML_OP.FormatUnicodeString_;
pub const OpFormatDom_ = WSDXML_OP.FormatDom_;
pub const OpFormatStruct_ = WSDXML_OP.FormatStruct_;
pub const OpFormatUri_ = WSDXML_OP.FormatUri_;
pub const OpFormatUuidUri_ = WSDXML_OP.FormatUuidUri_;
pub const OpFormatName_ = WSDXML_OP.FormatName_;
pub const OpFormatListInsertTail_ = WSDXML_OP.FormatListInsertTail_;
pub const OpFormatType_ = WSDXML_OP.FormatType_;
pub const OpFormatDynamicType_ = WSDXML_OP.FormatDynamicType_;
pub const OpFormatLookupType_ = WSDXML_OP.FormatLookupType_;
pub const OpFormatDuration_ = WSDXML_OP.FormatDuration_;
pub const OpFormatDateTime_ = WSDXML_OP.FormatDateTime_;
pub const OpFormatFloat_ = WSDXML_OP.FormatFloat_;
pub const OpFormatDouble_ = WSDXML_OP.FormatDouble_;
pub const OpProcess_ = WSDXML_OP.Process_;
pub const OpQualifiedAttribute_ = WSDXML_OP.QualifiedAttribute_;
pub const OpFormatXMLDeclaration_ = WSDXML_OP.FormatXMLDeclaration_;
pub const OpFormatMax = WSDXML_OP.FormatMax;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDXMLContext_Value = Guid.initString("75d8f3ee-3e5a-43b4-a15a-bcf6887460c0");
pub const IID_IWSDXMLContext = &IID_IWSDXMLContext_Value;
pub const IWSDXMLContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddNamespace: *const fn (
            self: *const IWSDXMLContext,
            psz_uri: ?[*:0]const u16,
            psz_suggested_prefix: ?[*:0]const u16,
            pp_namespace: ?*?*WSDXML_NAMESPACE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNameToNamespace: *const fn (
            self: *const IWSDXMLContext,
            psz_uri: ?[*:0]const u16,
            psz_name: ?[*:0]const u16,
            pp_name: ?*?*WSDXML_NAME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNamespaces: *const fn (
            self: *const IWSDXMLContext,
            p_namespaces: [*]const ?*const WSDXML_NAMESPACE,
            w_namespaces_count: u16,
            b_layer_number: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypes: *const fn (
            self: *const IWSDXMLContext,
            p_types: [*]const ?*const WSDXML_TYPE,
            dw_types_count: u32,
            b_layer_number: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addNamespace(self: *const T, psz_uri_: ?[*:0]const u16, psz_suggested_prefix_: ?[*:0]const u16, pp_namespace_: ?*?*WSDXML_NAMESPACE) HRESULT {
                return @as(*const IWSDXMLContext.VTable, @ptrCast(self.vtable)).AddNamespace(@as(*const IWSDXMLContext, @ptrCast(self)), psz_uri_, psz_suggested_prefix_, pp_namespace_);
            }
            pub inline fn addNameToNamespace(self: *const T, psz_uri_: ?[*:0]const u16, psz_name_: ?[*:0]const u16, pp_name_: ?*?*WSDXML_NAME) HRESULT {
                return @as(*const IWSDXMLContext.VTable, @ptrCast(self.vtable)).AddNameToNamespace(@as(*const IWSDXMLContext, @ptrCast(self)), psz_uri_, psz_name_, pp_name_);
            }
            pub inline fn setNamespaces(self: *const T, p_namespaces_: [*]const ?*const WSDXML_NAMESPACE, w_namespaces_count_: u16, b_layer_number_: u8) HRESULT {
                return @as(*const IWSDXMLContext.VTable, @ptrCast(self.vtable)).SetNamespaces(@as(*const IWSDXMLContext, @ptrCast(self)), p_namespaces_, w_namespaces_count_, b_layer_number_);
            }
            pub inline fn setTypes(self: *const T, p_types_: [*]const ?*const WSDXML_TYPE, dw_types_count_: u32, b_layer_number_: u8) HRESULT {
                return @as(*const IWSDXMLContext.VTable, @ptrCast(self.vtable)).SetTypes(@as(*const IWSDXMLContext, @ptrCast(self)), p_types_, dw_types_count_, b_layer_number_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WSDXML_NAMESPACE = extern struct {
    Uri: ?[*:0]const u16,
    PreferredPrefix: ?[*:0]const u16,
    Names: ?*WSDXML_NAME,
    NamesCount: u16,
    Encoding: u16,
};

pub const WSDXML_NAME = extern struct {
    Space: ?*WSDXML_NAMESPACE,
    LocalName: ?PWSTR,
};

pub const WSDXML_TYPE = extern struct {
    Uri: ?[*:0]const u16,
    Table: ?*const u8,
};

pub const WSDXML_PREFIX_MAPPING = extern struct {
    Refs: u32,
    Next: ?*WSDXML_PREFIX_MAPPING,
    Space: ?*WSDXML_NAMESPACE,
    Prefix: ?PWSTR,
};

pub const WSDXML_ATTRIBUTE = extern struct {
    Element: ?*WSDXML_ELEMENT,
    Next: ?*WSDXML_ATTRIBUTE,
    Name: ?*WSDXML_NAME,
    Value: ?PWSTR,
};

pub const WSDXML_NODE = extern struct {
    Type: i32,
    Parent: ?*WSDXML_ELEMENT,
    Next: ?*WSDXML_NODE,
};

pub const WSDXML_ELEMENT = extern struct {
    Node: WSDXML_NODE,
    Name: ?*WSDXML_NAME,
    FirstAttribute: ?*WSDXML_ATTRIBUTE,
    FirstChild: ?*WSDXML_NODE,
    PrefixMappings: ?*WSDXML_PREFIX_MAPPING,
};

pub const WSDXML_TEXT = extern struct {
    Node: WSDXML_NODE,
    Text: ?PWSTR,
};

pub const WSDXML_ELEMENT_LIST = extern struct {
    Next: ?*WSDXML_ELEMENT_LIST,
    Element: ?*WSDXML_ELEMENT,
};

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const WSD_STUB_FUNCTION = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

pub const DeviceDiscoveryMechanism = enum(i32) {
    MulticastDiscovery = 0,
    DirectedDiscovery = 1,
    SecureDirectedDiscovery = 2,
};
pub const MulticastDiscovery = DeviceDiscoveryMechanism.MulticastDiscovery;
pub const DirectedDiscovery = DeviceDiscoveryMechanism.DirectedDiscovery;
pub const SecureDirectedDiscovery = DeviceDiscoveryMechanism.SecureDirectedDiscovery;

pub const WSD_PROTOCOL_TYPE = enum(i32) {
    NONE = 0,
    UDP = 1,
    HTTP = 2,
    HTTPS = 4,
    ALL = 255,
};
pub const WSD_PT_NONE = WSD_PROTOCOL_TYPE.NONE;
pub const WSD_PT_UDP = WSD_PROTOCOL_TYPE.UDP;
pub const WSD_PT_HTTP = WSD_PROTOCOL_TYPE.HTTP;
pub const WSD_PT_HTTPS = WSD_PROTOCOL_TYPE.HTTPS;
pub const WSD_PT_ALL = WSD_PROTOCOL_TYPE.ALL;

pub const WSD_OPERATION = extern struct {
    RequestType: ?*WSDXML_TYPE,
    ResponseType: ?*WSDXML_TYPE,
    RequestStubFunction: ?WSD_STUB_FUNCTION,
};

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const PWSD_SOAP_MESSAGE_HANDLER = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

pub const WSD_HANDLER_CONTEXT = extern struct {
    Handler: ?PWSD_SOAP_MESSAGE_HANDLER,
    PVoid: ?*anyopaque,
    Unknown: ?*IUnknown,
};

pub const WSDEventType = enum(i32) {
    NONE = 0,
    INCOMING_MESSAGE = 1,
    INCOMING_FAULT = 2,
    TRANSMISSION_FAILURE = 3,
    RESPONSE_TIMEOUT = 4,
};
pub const WSDET_NONE = WSDEventType.NONE;
pub const WSDET_INCOMING_MESSAGE = WSDEventType.INCOMING_MESSAGE;
pub const WSDET_INCOMING_FAULT = WSDEventType.INCOMING_FAULT;
pub const WSDET_TRANSMISSION_FAILURE = WSDEventType.TRANSMISSION_FAILURE;
pub const WSDET_RESPONSE_TIMEOUT = WSDEventType.RESPONSE_TIMEOUT;

pub const WSD_SYNCHRONOUS_RESPONSE_CONTEXT = extern struct {
    hr: HRESULT,
    eventHandle: ?HANDLE,
    messageParameters: ?*IWSDMessageParameters,
    results: ?*anyopaque,
};

pub const WSD_PORT_TYPE = extern struct {
    EncodedName: u32,
    OperationCount: u32,
    Operations: ?*WSD_OPERATION,
    ProtocolType: WSD_PROTOCOL_TYPE,
};

pub const WSD_RELATIONSHIP_METADATA = extern struct {
    Type: ?[*:0]const u16,
    Data: ?*WSD_HOST_METADATA,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_SERVICE_METADATA_LIST = extern struct {
    Next: ?*WSD_SERVICE_METADATA_LIST,
    Element: ?*WSD_SERVICE_METADATA,
};

pub const WSD_HOST_METADATA = extern struct {
    Host: ?*WSD_SERVICE_METADATA,
    Hosted: ?*WSD_SERVICE_METADATA_LIST,
};

pub const WSD_ENDPOINT_REFERENCE_LIST = extern struct {
    Next: ?*WSD_ENDPOINT_REFERENCE_LIST,
    Element: ?*WSD_ENDPOINT_REFERENCE,
};

pub const WSD_SERVICE_METADATA = extern struct {
    EndpointReference: ?*WSD_ENDPOINT_REFERENCE_LIST,
    Types: ?*WSD_NAME_LIST,
    ServiceId: ?[*:0]const u16,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_THIS_DEVICE_METADATA = extern struct {
    FriendlyName: ?*WSD_LOCALIZED_STRING_LIST,
    FirmwareVersion: ?[*:0]const u16,
    SerialNumber: ?[*:0]const u16,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_THIS_MODEL_METADATA = extern struct {
    Manufacturer: ?*WSD_LOCALIZED_STRING_LIST,
    ManufacturerUrl: ?[*:0]const u16,
    ModelName: ?*WSD_LOCALIZED_STRING_LIST,
    ModelNumber: ?[*:0]const u16,
    ModelUrl: ?[*:0]const u16,
    PresentationUrl: ?[*:0]const u16,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_LOCALIZED_STRING_LIST = extern struct {
    Next: ?*WSD_LOCALIZED_STRING_LIST,
    Element: ?*WSD_LOCALIZED_STRING,
};

pub const WSD_SOAP_FAULT_REASON = extern struct {
    Text: ?*WSD_LOCALIZED_STRING_LIST,
};

pub const WSD_SOAP_FAULT_SUBCODE = extern struct {
    Value: ?*WSDXML_NAME,
    Subcode: ?*WSD_SOAP_FAULT_SUBCODE,
};

pub const WSD_SOAP_FAULT_CODE = extern struct {
    Value: ?*WSDXML_NAME,
    Subcode: ?*WSD_SOAP_FAULT_SUBCODE,
};

pub const WSD_SOAP_FAULT = extern struct {
    Code: ?*WSD_SOAP_FAULT_CODE,
    Reason: ?*WSD_SOAP_FAULT_REASON,
    Node: ?[*:0]const u16,
    Role: ?[*:0]const u16,
    Detail: ?*WSDXML_ELEMENT,
};

pub const WSD_APP_SEQUENCE = extern struct {
    InstanceId: u64,
    SequenceId: ?[*:0]const u16,
    MessageNumber: u64,
};

pub const WSD_HEADER_RELATESTO = extern struct {
    RelationshipType: ?*WSDXML_NAME,
    MessageID: ?[*:0]const u16,
};

pub const WSD_SOAP_HEADER = extern struct {
    To: ?[*:0]const u16,
    Action: ?[*:0]const u16,
    MessageID: ?[*:0]const u16,
    RelatesTo: WSD_HEADER_RELATESTO,
    ReplyTo: ?*WSD_ENDPOINT_REFERENCE,
    From: ?*WSD_ENDPOINT_REFERENCE,
    FaultTo: ?*WSD_ENDPOINT_REFERENCE,
    AppSequence: ?*WSD_APP_SEQUENCE,
    AnyHeaders: ?*WSDXML_ELEMENT,
};

pub const WSD_SOAP_MESSAGE = extern struct {
    Header: WSD_SOAP_HEADER,
    Body: ?*anyopaque,
    BodyType: ?*WSDXML_TYPE,
};

pub const WSD_RESOLVE_MATCHES = extern struct {
    ResolveMatch: ?*WSD_RESOLVE_MATCH,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_RESOLVE_MATCH = extern struct {
    EndpointReference: ?*WSD_ENDPOINT_REFERENCE,
    Types: ?*WSD_NAME_LIST,
    Scopes: ?*WSD_SCOPES,
    XAddrs: ?*WSD_URI_LIST,
    MetadataVersion: u64,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_RESOLVE = extern struct {
    EndpointReference: ?*WSD_ENDPOINT_REFERENCE,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_PROBE_MATCH = extern struct {
    EndpointReference: ?*WSD_ENDPOINT_REFERENCE,
    Types: ?*WSD_NAME_LIST,
    Scopes: ?*WSD_SCOPES,
    XAddrs: ?*WSD_URI_LIST,
    MetadataVersion: u64,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_PROBE_MATCH_LIST = extern struct {
    Next: ?*WSD_PROBE_MATCH_LIST,
    Element: ?*WSD_PROBE_MATCH,
};

pub const WSD_PROBE_MATCHES = extern struct {
    ProbeMatch: ?*WSD_PROBE_MATCH_LIST,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_PROBE = extern struct {
    Types: ?*WSD_NAME_LIST,
    Scopes: ?*WSD_SCOPES,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_BYE = extern struct {
    EndpointReference: ?*WSD_ENDPOINT_REFERENCE,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_SCOPES = extern struct {
    MatchBy: ?[*:0]const u16,
    Scopes: ?*WSD_URI_LIST,
};

pub const WSD_NAME_LIST = extern struct {
    Next: ?*WSD_NAME_LIST,
    Element: ?*WSDXML_NAME,
};

pub const WSD_HELLO = extern struct {
    EndpointReference: ?*WSD_ENDPOINT_REFERENCE,
    Types: ?*WSD_NAME_LIST,
    Scopes: ?*WSD_SCOPES,
    XAddrs: ?*WSD_URI_LIST,
    MetadataVersion: u64,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_REFERENCE_PARAMETERS = extern struct {
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_REFERENCE_PROPERTIES = extern struct {
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_ENDPOINT_REFERENCE = extern struct {
    Address: ?[*:0]const u16,
    ReferenceProperties: WSD_REFERENCE_PROPERTIES,
    ReferenceParameters: WSD_REFERENCE_PARAMETERS,
    PortType: ?*WSDXML_NAME,
    ServiceName: ?*WSDXML_NAME,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_METADATA_SECTION = extern struct {
    Dialect: ?[*:0]const u16,
    Identifier: ?[*:0]const u16,
    Data: ?*anyopaque,
    MetadataReference: ?*WSD_ENDPOINT_REFERENCE,
    Location: ?[*:0]const u16,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_METADATA_SECTION_LIST = extern struct {
    Next: ?*WSD_METADATA_SECTION_LIST,
    Element: ?*WSD_METADATA_SECTION,
};

pub const WSD_URI_LIST = extern struct {
    Next: ?*WSD_URI_LIST,
    Element: ?[*:0]const u16,
};

pub const WSD_EVENTING_FILTER_ACTION = extern struct {
    Actions: ?*WSD_URI_LIST,
};

pub const WSD_EVENTING_FILTER = extern struct {
    Dialect: ?[*:0]const u16,
    FilterAction: ?*WSD_EVENTING_FILTER_ACTION,
    Data: ?*anyopaque,
};

pub const WSD_EVENTING_EXPIRES = extern struct {
    Duration: ?*WSD_DURATION,
    DateTime: ?*WSD_DATETIME,
};

pub const WSD_EVENTING_DELIVERY_MODE_PUSH = extern struct {
    NotifyTo: ?*WSD_ENDPOINT_REFERENCE,
};

pub const WSD_EVENTING_DELIVERY_MODE = extern struct {
    Mode: ?[*:0]const u16,
    Push: ?*WSD_EVENTING_DELIVERY_MODE_PUSH,
    Data: ?*anyopaque,
};

pub const WSD_LOCALIZED_STRING = extern struct {
    lang: ?[*:0]const u16,
    String: ?[*:0]const u16,
};

pub const RESPONSEBODY_GetMetadata = extern struct {
    Metadata: ?*WSD_METADATA_SECTION_LIST,
};

pub const REQUESTBODY_Subscribe = extern struct {
    EndTo: ?*WSD_ENDPOINT_REFERENCE,
    Delivery: ?*WSD_EVENTING_DELIVERY_MODE,
    Expires: ?*WSD_EVENTING_EXPIRES,
    Filter: ?*WSD_EVENTING_FILTER,
    Any: ?*WSDXML_ELEMENT,
};

pub const RESPONSEBODY_Subscribe = extern struct {
    SubscriptionManager: ?*WSD_ENDPOINT_REFERENCE,
    expires: ?*WSD_EVENTING_EXPIRES,
    any: ?*WSDXML_ELEMENT,
};

pub const REQUESTBODY_Renew = extern struct {
    Expires: ?*WSD_EVENTING_EXPIRES,
    Any: ?*WSDXML_ELEMENT,
};

pub const RESPONSEBODY_Renew = extern struct {
    expires: ?*WSD_EVENTING_EXPIRES,
    any: ?*WSDXML_ELEMENT,
};

pub const REQUESTBODY_GetStatus = extern struct {
    Any: ?*WSDXML_ELEMENT,
};

pub const RESPONSEBODY_GetStatus = extern struct {
    expires: ?*WSD_EVENTING_EXPIRES,
    any: ?*WSDXML_ELEMENT,
};

pub const REQUESTBODY_Unsubscribe = extern struct {
    any: ?*WSDXML_ELEMENT,
};

pub const RESPONSEBODY_SubscriptionEnd = extern struct {
    SubscriptionManager: ?*WSD_ENDPOINT_REFERENCE,
    Status: ?[*:0]const u16,
    Reason: ?*WSD_LOCALIZED_STRING,
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_UNKNOWN_LOOKUP = extern struct {
    Any: ?*WSDXML_ELEMENT,
};

pub const WSD_EVENT = extern struct {
    Hr: HRESULT,
    EventType: u32,
    DispatchTag: ?PWSTR,
    HandlerContext: WSD_HANDLER_CONTEXT,
    Soap: ?*WSD_SOAP_MESSAGE,
    Operation: ?*WSD_OPERATION,
    MessageParameters: ?*IWSDMessageParameters,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDiscoveryProvider_Value = Guid.initString("8ffc8e55-f0eb-480f-88b7-b435dd281d45");
pub const IID_IWSDiscoveryProvider = &IID_IWSDiscoveryProvider_Value;
pub const IWSDiscoveryProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAddressFamily: *const fn (
            self: *const IWSDiscoveryProvider,
            dw_address_family: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Attach: *const fn (
            self: *const IWSDiscoveryProvider,
            p_sink: ?*IWSDiscoveryProviderNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Detach: *const fn (
            self: *const IWSDiscoveryProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchById: *const fn (
            self: *const IWSDiscoveryProvider,
            psz_id: ?[*:0]const u16,
            psz_tag: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchByAddress: *const fn (
            self: *const IWSDiscoveryProvider,
            psz_address: ?[*:0]const u16,
            psz_tag: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchByType: *const fn (
            self: *const IWSDiscoveryProvider,
            p_types_list: ?*const WSD_NAME_LIST,
            p_scopes_list: ?*const WSD_URI_LIST,
            psz_match_by: ?[*:0]const u16,
            psz_tag: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXMLContext: *const fn (
            self: *const IWSDiscoveryProvider,
            pp_context: ?*?*IWSDXMLContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAddressFamily(self: *const T, dw_address_family_: u32) HRESULT {
                return @as(*const IWSDiscoveryProvider.VTable, @ptrCast(self.vtable)).SetAddressFamily(@as(*const IWSDiscoveryProvider, @ptrCast(self)), dw_address_family_);
            }
            pub inline fn attach(self: *const T, p_sink_: ?*IWSDiscoveryProviderNotify) HRESULT {
                return @as(*const IWSDiscoveryProvider.VTable, @ptrCast(self.vtable)).Attach(@as(*const IWSDiscoveryProvider, @ptrCast(self)), p_sink_);
            }
            pub inline fn detach(self: *const T) HRESULT {
                return @as(*const IWSDiscoveryProvider.VTable, @ptrCast(self.vtable)).Detach(@as(*const IWSDiscoveryProvider, @ptrCast(self)));
            }
            pub inline fn searchById(self: *const T, psz_id_: ?[*:0]const u16, psz_tag_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDiscoveryProvider.VTable, @ptrCast(self.vtable)).SearchById(@as(*const IWSDiscoveryProvider, @ptrCast(self)), psz_id_, psz_tag_);
            }
            pub inline fn searchByAddress(self: *const T, psz_address_: ?[*:0]const u16, psz_tag_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDiscoveryProvider.VTable, @ptrCast(self.vtable)).SearchByAddress(@as(*const IWSDiscoveryProvider, @ptrCast(self)), psz_address_, psz_tag_);
            }
            pub inline fn searchByType(self: *const T, p_types_list_: ?*const WSD_NAME_LIST, p_scopes_list_: ?*const WSD_URI_LIST, psz_match_by_: ?[*:0]const u16, psz_tag_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDiscoveryProvider.VTable, @ptrCast(self.vtable)).SearchByType(@as(*const IWSDiscoveryProvider, @ptrCast(self)), p_types_list_, p_scopes_list_, psz_match_by_, psz_tag_);
            }
            pub inline fn getXMLContext(self: *const T, pp_context_: ?*?*IWSDXMLContext) HRESULT {
                return @as(*const IWSDiscoveryProvider.VTable, @ptrCast(self.vtable)).GetXMLContext(@as(*const IWSDiscoveryProvider, @ptrCast(self)), pp_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDiscoveryProviderNotify_Value = Guid.initString("73ee3ced-b6e6-4329-a546-3e8ad46563d2");
pub const IID_IWSDiscoveryProviderNotify = &IID_IWSDiscoveryProviderNotify_Value;
pub const IWSDiscoveryProviderNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Add: *const fn (
            self: *const IWSDiscoveryProviderNotify,
            p_service: ?*IWSDiscoveredService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IWSDiscoveryProviderNotify,
            p_service: ?*IWSDiscoveredService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchFailed: *const fn (
            self: *const IWSDiscoveryProviderNotify,
            hr: HRESULT,
            psz_tag: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchComplete: *const fn (
            self: *const IWSDiscoveryProviderNotify,
            psz_tag: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn add(self: *const T, p_service_: ?*IWSDiscoveredService) HRESULT {
                return @as(*const IWSDiscoveryProviderNotify.VTable, @ptrCast(self.vtable)).Add(@as(*const IWSDiscoveryProviderNotify, @ptrCast(self)), p_service_);
            }
            pub inline fn remove(self: *const T, p_service_: ?*IWSDiscoveredService) HRESULT {
                return @as(*const IWSDiscoveryProviderNotify.VTable, @ptrCast(self.vtable)).Remove(@as(*const IWSDiscoveryProviderNotify, @ptrCast(self)), p_service_);
            }
            pub inline fn searchFailed(self: *const T, hr_: HRESULT, psz_tag_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDiscoveryProviderNotify.VTable, @ptrCast(self.vtable)).SearchFailed(@as(*const IWSDiscoveryProviderNotify, @ptrCast(self)), hr_, psz_tag_);
            }
            pub inline fn searchComplete(self: *const T, psz_tag_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDiscoveryProviderNotify.VTable, @ptrCast(self.vtable)).SearchComplete(@as(*const IWSDiscoveryProviderNotify, @ptrCast(self)), psz_tag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDiscoveredService_Value = Guid.initString("4bad8a3b-b374-4420-9632-aac945b374aa");
pub const IID_IWSDiscoveredService = &IID_IWSDiscoveredService_Value;
pub const IWSDiscoveredService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEndpointReference: *const fn (
            self: *const IWSDiscoveredService,
            pp_endpoint_reference: ?*?*WSD_ENDPOINT_REFERENCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypes: *const fn (
            self: *const IWSDiscoveredService,
            pp_types_list: ?*?*WSD_NAME_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScopes: *const fn (
            self: *const IWSDiscoveredService,
            pp_scopes_list: ?*?*WSD_URI_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXAddrs: *const fn (
            self: *const IWSDiscoveredService,
            pp_x_addrs_list: ?*?*WSD_URI_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataVersion: *const fn (
            self: *const IWSDiscoveredService,
            pull_metadata_version: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtendedDiscoXML: *const fn (
            self: *const IWSDiscoveredService,
            pp_header_any: ?*?*WSDXML_ELEMENT,
            pp_body_any: ?*?*WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProbeResolveTag: *const fn (
            self: *const IWSDiscoveredService,
            ppsz_tag: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemoteTransportAddress: *const fn (
            self: *const IWSDiscoveredService,
            ppsz_remote_transport_address: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalTransportAddress: *const fn (
            self: *const IWSDiscoveredService,
            ppsz_local_transport_address: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalInterfaceGUID: *const fn (
            self: *const IWSDiscoveredService,
            p_guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInstanceId: *const fn (
            self: *const IWSDiscoveredService,
            pull_instance_id: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getEndpointReference(self: *const T, pp_endpoint_reference_: ?*?*WSD_ENDPOINT_REFERENCE) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetEndpointReference(@as(*const IWSDiscoveredService, @ptrCast(self)), pp_endpoint_reference_);
            }
            pub inline fn getTypes(self: *const T, pp_types_list_: ?*?*WSD_NAME_LIST) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetTypes(@as(*const IWSDiscoveredService, @ptrCast(self)), pp_types_list_);
            }
            pub inline fn getScopes(self: *const T, pp_scopes_list_: ?*?*WSD_URI_LIST) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetScopes(@as(*const IWSDiscoveredService, @ptrCast(self)), pp_scopes_list_);
            }
            pub inline fn getXAddrs(self: *const T, pp_x_addrs_list_: ?*?*WSD_URI_LIST) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetXAddrs(@as(*const IWSDiscoveredService, @ptrCast(self)), pp_x_addrs_list_);
            }
            pub inline fn getMetadataVersion(self: *const T, pull_metadata_version_: ?*u64) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetMetadataVersion(@as(*const IWSDiscoveredService, @ptrCast(self)), pull_metadata_version_);
            }
            pub inline fn getExtendedDiscoXML(self: *const T, pp_header_any_: ?*?*WSDXML_ELEMENT, pp_body_any_: ?*?*WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetExtendedDiscoXML(@as(*const IWSDiscoveredService, @ptrCast(self)), pp_header_any_, pp_body_any_);
            }
            pub inline fn getProbeResolveTag(self: *const T, ppsz_tag_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetProbeResolveTag(@as(*const IWSDiscoveredService, @ptrCast(self)), ppsz_tag_);
            }
            pub inline fn getRemoteTransportAddress(self: *const T, ppsz_remote_transport_address_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetRemoteTransportAddress(@as(*const IWSDiscoveredService, @ptrCast(self)), ppsz_remote_transport_address_);
            }
            pub inline fn getLocalTransportAddress(self: *const T, ppsz_local_transport_address_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetLocalTransportAddress(@as(*const IWSDiscoveredService, @ptrCast(self)), ppsz_local_transport_address_);
            }
            pub inline fn getLocalInterfaceGUID(self: *const T, p_guid_: ?*Guid) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetLocalInterfaceGUID(@as(*const IWSDiscoveredService, @ptrCast(self)), p_guid_);
            }
            pub inline fn getInstanceId(self: *const T, pull_instance_id_: ?*u64) HRESULT {
                return @as(*const IWSDiscoveredService.VTable, @ptrCast(self.vtable)).GetInstanceId(@as(*const IWSDiscoveredService, @ptrCast(self)), pull_instance_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDiscoveryPublisher_Value = Guid.initString("ae01e1a8-3ff9-4148-8116-057cc616fe13");
pub const IID_IWSDiscoveryPublisher = &IID_IWSDiscoveryPublisher_Value;
pub const IWSDiscoveryPublisher = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAddressFamily: *const fn (
            self: *const IWSDiscoveryPublisher,
            dw_address_family: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterNotificationSink: *const fn (
            self: *const IWSDiscoveryPublisher,
            p_sink: ?*IWSDiscoveryPublisherNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnRegisterNotificationSink: *const fn (
            self: *const IWSDiscoveryPublisher,
            p_sink: ?*IWSDiscoveryPublisherNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Publish: *const fn (
            self: *const IWSDiscoveryPublisher,
            psz_id: ?[*:0]const u16,
            ull_metadata_version: u64,
            ull_instance_id: u64,
            ull_message_number: u64,
            psz_session_id: ?[*:0]const u16,
            p_types_list: ?*const WSD_NAME_LIST,
            p_scopes_list: ?*const WSD_URI_LIST,
            p_x_addrs_list: ?*const WSD_URI_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnPublish: *const fn (
            self: *const IWSDiscoveryPublisher,
            psz_id: ?[*:0]const u16,
            ull_instance_id: u64,
            ull_message_number: u64,
            psz_session_id: ?[*:0]const u16,
            p_any: ?*const WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchProbe: *const fn (
            self: *const IWSDiscoveryPublisher,
            p_probe_message: ?*const WSD_SOAP_MESSAGE,
            p_message_parameters: ?*IWSDMessageParameters,
            psz_id: ?[*:0]const u16,
            ull_metadata_version: u64,
            ull_instance_id: u64,
            ull_message_number: u64,
            psz_session_id: ?[*:0]const u16,
            p_types_list: ?*const WSD_NAME_LIST,
            p_scopes_list: ?*const WSD_URI_LIST,
            p_x_addrs_list: ?*const WSD_URI_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchResolve: *const fn (
            self: *const IWSDiscoveryPublisher,
            p_resolve_message: ?*const WSD_SOAP_MESSAGE,
            p_message_parameters: ?*IWSDMessageParameters,
            psz_id: ?[*:0]const u16,
            ull_metadata_version: u64,
            ull_instance_id: u64,
            ull_message_number: u64,
            psz_session_id: ?[*:0]const u16,
            p_types_list: ?*const WSD_NAME_LIST,
            p_scopes_list: ?*const WSD_URI_LIST,
            p_x_addrs_list: ?*const WSD_URI_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PublishEx: *const fn (
            self: *const IWSDiscoveryPublisher,
            psz_id: ?[*:0]const u16,
            ull_metadata_version: u64,
            ull_instance_id: u64,
            ull_message_number: u64,
            psz_session_id: ?[*:0]const u16,
            p_types_list: ?*const WSD_NAME_LIST,
            p_scopes_list: ?*const WSD_URI_LIST,
            p_x_addrs_list: ?*const WSD_URI_LIST,
            p_header_any: ?*const WSDXML_ELEMENT,
            p_reference_parameter_any: ?*const WSDXML_ELEMENT,
            p_policy_any: ?*const WSDXML_ELEMENT,
            p_endpoint_reference_any: ?*const WSDXML_ELEMENT,
            p_any: ?*const WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchProbeEx: *const fn (
            self: *const IWSDiscoveryPublisher,
            p_probe_message: ?*const WSD_SOAP_MESSAGE,
            p_message_parameters: ?*IWSDMessageParameters,
            psz_id: ?[*:0]const u16,
            ull_metadata_version: u64,
            ull_instance_id: u64,
            ull_message_number: u64,
            psz_session_id: ?[*:0]const u16,
            p_types_list: ?*const WSD_NAME_LIST,
            p_scopes_list: ?*const WSD_URI_LIST,
            p_x_addrs_list: ?*const WSD_URI_LIST,
            p_header_any: ?*const WSDXML_ELEMENT,
            p_reference_parameter_any: ?*const WSDXML_ELEMENT,
            p_policy_any: ?*const WSDXML_ELEMENT,
            p_endpoint_reference_any: ?*const WSDXML_ELEMENT,
            p_any: ?*const WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchResolveEx: *const fn (
            self: *const IWSDiscoveryPublisher,
            p_resolve_message: ?*const WSD_SOAP_MESSAGE,
            p_message_parameters: ?*IWSDMessageParameters,
            psz_id: ?[*:0]const u16,
            ull_metadata_version: u64,
            ull_instance_id: u64,
            ull_message_number: u64,
            psz_session_id: ?[*:0]const u16,
            p_types_list: ?*const WSD_NAME_LIST,
            p_scopes_list: ?*const WSD_URI_LIST,
            p_x_addrs_list: ?*const WSD_URI_LIST,
            p_header_any: ?*const WSDXML_ELEMENT,
            p_reference_parameter_any: ?*const WSDXML_ELEMENT,
            p_policy_any: ?*const WSDXML_ELEMENT,
            p_endpoint_reference_any: ?*const WSDXML_ELEMENT,
            p_any: ?*const WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterScopeMatchingRule: *const fn (
            self: *const IWSDiscoveryPublisher,
            p_scope_matching_rule: ?*IWSDScopeMatchingRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnRegisterScopeMatchingRule: *const fn (
            self: *const IWSDiscoveryPublisher,
            p_scope_matching_rule: ?*IWSDScopeMatchingRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXMLContext: *const fn (
            self: *const IWSDiscoveryPublisher,
            pp_context: ?*?*IWSDXMLContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAddressFamily(self: *const T, dw_address_family_: u32) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).SetAddressFamily(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), dw_address_family_);
            }
            pub inline fn registerNotificationSink(self: *const T, p_sink_: ?*IWSDiscoveryPublisherNotify) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).RegisterNotificationSink(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), p_sink_);
            }
            pub inline fn unRegisterNotificationSink(self: *const T, p_sink_: ?*IWSDiscoveryPublisherNotify) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).UnRegisterNotificationSink(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), p_sink_);
            }
            pub inline fn publish(self: *const T, psz_id_: ?[*:0]const u16, ull_metadata_version_: u64, ull_instance_id_: u64, ull_message_number_: u64, psz_session_id_: ?[*:0]const u16, p_types_list_: ?*const WSD_NAME_LIST, p_scopes_list_: ?*const WSD_URI_LIST, p_x_addrs_list_: ?*const WSD_URI_LIST) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).Publish(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), psz_id_, ull_metadata_version_, ull_instance_id_, ull_message_number_, psz_session_id_, p_types_list_, p_scopes_list_, p_x_addrs_list_);
            }
            pub inline fn unPublish(self: *const T, psz_id_: ?[*:0]const u16, ull_instance_id_: u64, ull_message_number_: u64, psz_session_id_: ?[*:0]const u16, p_any_: ?*const WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).UnPublish(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), psz_id_, ull_instance_id_, ull_message_number_, psz_session_id_, p_any_);
            }
            pub inline fn matchProbe(self: *const T, p_probe_message_: ?*const WSD_SOAP_MESSAGE, p_message_parameters_: ?*IWSDMessageParameters, psz_id_: ?[*:0]const u16, ull_metadata_version_: u64, ull_instance_id_: u64, ull_message_number_: u64, psz_session_id_: ?[*:0]const u16, p_types_list_: ?*const WSD_NAME_LIST, p_scopes_list_: ?*const WSD_URI_LIST, p_x_addrs_list_: ?*const WSD_URI_LIST) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).MatchProbe(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), p_probe_message_, p_message_parameters_, psz_id_, ull_metadata_version_, ull_instance_id_, ull_message_number_, psz_session_id_, p_types_list_, p_scopes_list_, p_x_addrs_list_);
            }
            pub inline fn matchResolve(self: *const T, p_resolve_message_: ?*const WSD_SOAP_MESSAGE, p_message_parameters_: ?*IWSDMessageParameters, psz_id_: ?[*:0]const u16, ull_metadata_version_: u64, ull_instance_id_: u64, ull_message_number_: u64, psz_session_id_: ?[*:0]const u16, p_types_list_: ?*const WSD_NAME_LIST, p_scopes_list_: ?*const WSD_URI_LIST, p_x_addrs_list_: ?*const WSD_URI_LIST) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).MatchResolve(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), p_resolve_message_, p_message_parameters_, psz_id_, ull_metadata_version_, ull_instance_id_, ull_message_number_, psz_session_id_, p_types_list_, p_scopes_list_, p_x_addrs_list_);
            }
            pub inline fn publishEx(self: *const T, psz_id_: ?[*:0]const u16, ull_metadata_version_: u64, ull_instance_id_: u64, ull_message_number_: u64, psz_session_id_: ?[*:0]const u16, p_types_list_: ?*const WSD_NAME_LIST, p_scopes_list_: ?*const WSD_URI_LIST, p_x_addrs_list_: ?*const WSD_URI_LIST, p_header_any_: ?*const WSDXML_ELEMENT, p_reference_parameter_any_: ?*const WSDXML_ELEMENT, p_policy_any_: ?*const WSDXML_ELEMENT, p_endpoint_reference_any_: ?*const WSDXML_ELEMENT, p_any_: ?*const WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).PublishEx(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), psz_id_, ull_metadata_version_, ull_instance_id_, ull_message_number_, psz_session_id_, p_types_list_, p_scopes_list_, p_x_addrs_list_, p_header_any_, p_reference_parameter_any_, p_policy_any_, p_endpoint_reference_any_, p_any_);
            }
            pub inline fn matchProbeEx(self: *const T, p_probe_message_: ?*const WSD_SOAP_MESSAGE, p_message_parameters_: ?*IWSDMessageParameters, psz_id_: ?[*:0]const u16, ull_metadata_version_: u64, ull_instance_id_: u64, ull_message_number_: u64, psz_session_id_: ?[*:0]const u16, p_types_list_: ?*const WSD_NAME_LIST, p_scopes_list_: ?*const WSD_URI_LIST, p_x_addrs_list_: ?*const WSD_URI_LIST, p_header_any_: ?*const WSDXML_ELEMENT, p_reference_parameter_any_: ?*const WSDXML_ELEMENT, p_policy_any_: ?*const WSDXML_ELEMENT, p_endpoint_reference_any_: ?*const WSDXML_ELEMENT, p_any_: ?*const WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).MatchProbeEx(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), p_probe_message_, p_message_parameters_, psz_id_, ull_metadata_version_, ull_instance_id_, ull_message_number_, psz_session_id_, p_types_list_, p_scopes_list_, p_x_addrs_list_, p_header_any_, p_reference_parameter_any_, p_policy_any_, p_endpoint_reference_any_, p_any_);
            }
            pub inline fn matchResolveEx(self: *const T, p_resolve_message_: ?*const WSD_SOAP_MESSAGE, p_message_parameters_: ?*IWSDMessageParameters, psz_id_: ?[*:0]const u16, ull_metadata_version_: u64, ull_instance_id_: u64, ull_message_number_: u64, psz_session_id_: ?[*:0]const u16, p_types_list_: ?*const WSD_NAME_LIST, p_scopes_list_: ?*const WSD_URI_LIST, p_x_addrs_list_: ?*const WSD_URI_LIST, p_header_any_: ?*const WSDXML_ELEMENT, p_reference_parameter_any_: ?*const WSDXML_ELEMENT, p_policy_any_: ?*const WSDXML_ELEMENT, p_endpoint_reference_any_: ?*const WSDXML_ELEMENT, p_any_: ?*const WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).MatchResolveEx(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), p_resolve_message_, p_message_parameters_, psz_id_, ull_metadata_version_, ull_instance_id_, ull_message_number_, psz_session_id_, p_types_list_, p_scopes_list_, p_x_addrs_list_, p_header_any_, p_reference_parameter_any_, p_policy_any_, p_endpoint_reference_any_, p_any_);
            }
            pub inline fn registerScopeMatchingRule(self: *const T, p_scope_matching_rule_: ?*IWSDScopeMatchingRule) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).RegisterScopeMatchingRule(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), p_scope_matching_rule_);
            }
            pub inline fn unRegisterScopeMatchingRule(self: *const T, p_scope_matching_rule_: ?*IWSDScopeMatchingRule) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).UnRegisterScopeMatchingRule(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), p_scope_matching_rule_);
            }
            pub inline fn getXMLContext(self: *const T, pp_context_: ?*?*IWSDXMLContext) HRESULT {
                return @as(*const IWSDiscoveryPublisher.VTable, @ptrCast(self.vtable)).GetXMLContext(@as(*const IWSDiscoveryPublisher, @ptrCast(self)), pp_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDiscoveryPublisherNotify_Value = Guid.initString("e67651b0-337a-4b3c-9758-733388568251");
pub const IID_IWSDiscoveryPublisherNotify = &IID_IWSDiscoveryPublisherNotify_Value;
pub const IWSDiscoveryPublisherNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ProbeHandler: *const fn (
            self: *const IWSDiscoveryPublisherNotify,
            p_soap: ?*const WSD_SOAP_MESSAGE,
            p_message_parameters: ?*IWSDMessageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResolveHandler: *const fn (
            self: *const IWSDiscoveryPublisherNotify,
            p_soap: ?*const WSD_SOAP_MESSAGE,
            p_message_parameters: ?*IWSDMessageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn probeHandler(self: *const T, p_soap_: ?*const WSD_SOAP_MESSAGE, p_message_parameters_: ?*IWSDMessageParameters) HRESULT {
                return @as(*const IWSDiscoveryPublisherNotify.VTable, @ptrCast(self.vtable)).ProbeHandler(@as(*const IWSDiscoveryPublisherNotify, @ptrCast(self)), p_soap_, p_message_parameters_);
            }
            pub inline fn resolveHandler(self: *const T, p_soap_: ?*const WSD_SOAP_MESSAGE, p_message_parameters_: ?*IWSDMessageParameters) HRESULT {
                return @as(*const IWSDiscoveryPublisherNotify.VTable, @ptrCast(self.vtable)).ResolveHandler(@as(*const IWSDiscoveryPublisherNotify, @ptrCast(self)), p_soap_, p_message_parameters_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDScopeMatchingRule_Value = Guid.initString("fcafe424-fef5-481a-bd9f-33ce0574256f");
pub const IID_IWSDScopeMatchingRule = &IID_IWSDScopeMatchingRule_Value;
pub const IWSDScopeMatchingRule = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetScopeRule: *const fn (
            self: *const IWSDScopeMatchingRule,
            ppsz_scope_matching_rule: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchScopes: *const fn (
            self: *const IWSDScopeMatchingRule,
            psz_scope1: ?[*:0]const u16,
            psz_scope2: ?[*:0]const u16,
            pf_match: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getScopeRule(self: *const T, ppsz_scope_matching_rule_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDScopeMatchingRule.VTable, @ptrCast(self.vtable)).GetScopeRule(@as(*const IWSDScopeMatchingRule, @ptrCast(self)), ppsz_scope_matching_rule_);
            }
            pub inline fn matchScopes(self: *const T, psz_scope1_: ?[*:0]const u16, psz_scope2_: ?[*:0]const u16, pf_match_: ?*BOOL) HRESULT {
                return @as(*const IWSDScopeMatchingRule.VTable, @ptrCast(self.vtable)).MatchScopes(@as(*const IWSDScopeMatchingRule, @ptrCast(self)), psz_scope1_, psz_scope2_, pf_match_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDEndpointProxy_Value = Guid.initString("1860d430-b24c-4975-9f90-dbb39baa24ec");
pub const IID_IWSDEndpointProxy = &IID_IWSDEndpointProxy_Value;
pub const IWSDEndpointProxy = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SendOneWayRequest: *const fn (
            self: *const IWSDEndpointProxy,
            p_body: ?*const anyopaque,
            p_operation: ?*const WSD_OPERATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendTwoWayRequest: *const fn (
            self: *const IWSDEndpointProxy,
            p_body: ?*const anyopaque,
            p_operation: ?*const WSD_OPERATION,
            p_response_context: ?*const WSD_SYNCHRONOUS_RESPONSE_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendTwoWayRequestAsync: *const fn (
            self: *const IWSDEndpointProxy,
            p_body: ?*const anyopaque,
            p_operation: ?*const WSD_OPERATION,
            p_async_state: ?*IUnknown,
            p_callback: ?*IWSDAsyncCallback,
            p_result: ?*?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortAsyncOperation: *const fn (
            self: *const IWSDEndpointProxy,
            p_async_result: ?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessFault: *const fn (
            self: *const IWSDEndpointProxy,
            p_fault: ?*const WSD_SOAP_FAULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorInfo: *const fn (
            self: *const IWSDEndpointProxy,
            ppsz_error_info: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFaultInfo: *const fn (
            self: *const IWSDEndpointProxy,
            pp_fault: ?*?*WSD_SOAP_FAULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn sendOneWayRequest(self: *const T, p_body_: ?*const anyopaque, p_operation_: ?*const WSD_OPERATION) HRESULT {
                return @as(*const IWSDEndpointProxy.VTable, @ptrCast(self.vtable)).SendOneWayRequest(@as(*const IWSDEndpointProxy, @ptrCast(self)), p_body_, p_operation_);
            }
            pub inline fn sendTwoWayRequest(self: *const T, p_body_: ?*const anyopaque, p_operation_: ?*const WSD_OPERATION, p_response_context_: ?*const WSD_SYNCHRONOUS_RESPONSE_CONTEXT) HRESULT {
                return @as(*const IWSDEndpointProxy.VTable, @ptrCast(self.vtable)).SendTwoWayRequest(@as(*const IWSDEndpointProxy, @ptrCast(self)), p_body_, p_operation_, p_response_context_);
            }
            pub inline fn sendTwoWayRequestAsync(self: *const T, p_body_: ?*const anyopaque, p_operation_: ?*const WSD_OPERATION, p_async_state_: ?*IUnknown, p_callback_: ?*IWSDAsyncCallback, p_result_: ?*?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDEndpointProxy.VTable, @ptrCast(self.vtable)).SendTwoWayRequestAsync(@as(*const IWSDEndpointProxy, @ptrCast(self)), p_body_, p_operation_, p_async_state_, p_callback_, p_result_);
            }
            pub inline fn abortAsyncOperation(self: *const T, p_async_result_: ?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDEndpointProxy.VTable, @ptrCast(self.vtable)).AbortAsyncOperation(@as(*const IWSDEndpointProxy, @ptrCast(self)), p_async_result_);
            }
            pub inline fn processFault(self: *const T, p_fault_: ?*const WSD_SOAP_FAULT) HRESULT {
                return @as(*const IWSDEndpointProxy.VTable, @ptrCast(self.vtable)).ProcessFault(@as(*const IWSDEndpointProxy, @ptrCast(self)), p_fault_);
            }
            pub inline fn getErrorInfo(self: *const T, ppsz_error_info_: ?*?PWSTR) HRESULT {
                return @as(*const IWSDEndpointProxy.VTable, @ptrCast(self.vtable)).GetErrorInfo(@as(*const IWSDEndpointProxy, @ptrCast(self)), ppsz_error_info_);
            }
            pub inline fn getFaultInfo(self: *const T, pp_fault_: ?*?*WSD_SOAP_FAULT) HRESULT {
                return @as(*const IWSDEndpointProxy.VTable, @ptrCast(self.vtable)).GetFaultInfo(@as(*const IWSDEndpointProxy, @ptrCast(self)), pp_fault_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDMetadataExchange_Value = Guid.initString("06996d57-1d67-4928-9307-3d7833fdb846");
pub const IID_IWSDMetadataExchange = &IID_IWSDMetadataExchange_Value;
pub const IWSDMetadataExchange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMetadata: *const fn (
            self: *const IWSDMetadataExchange,
            metadata_out: ?*?*WSD_METADATA_SECTION_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMetadata(self: *const T, metadata_out_: ?*?*WSD_METADATA_SECTION_LIST) HRESULT {
                return @as(*const IWSDMetadataExchange.VTable, @ptrCast(self.vtable)).GetMetadata(@as(*const IWSDMetadataExchange, @ptrCast(self)), metadata_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDServiceProxy_Value = Guid.initString("d4c7fb9c-03ab-4175-9d67-094fafebf487");
pub const IID_IWSDServiceProxy = &IID_IWSDServiceProxy_Value;
pub const IWSDServiceProxy = extern struct {
    pub const VTable = extern struct {
        base: IWSDMetadataExchange.VTable,
        BeginGetMetadata: *const fn (
            self: *const IWSDServiceProxy,
            pp_result: ?*?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndGetMetadata: *const fn (
            self: *const IWSDServiceProxy,
            p_result: ?*IWSDAsyncResult,
            pp_metadata: ?*?*WSD_METADATA_SECTION_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceMetadata: *const fn (
            self: *const IWSDServiceProxy,
            pp_service_metadata: ?*?*WSD_SERVICE_METADATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubscribeToOperation: *const fn (
            self: *const IWSDServiceProxy,
            p_operation: ?*const WSD_OPERATION,
            p_unknown: ?*IUnknown,
            p_any: ?*const WSDXML_ELEMENT,
            pp_any: ?*?*WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnsubscribeToOperation: *const fn (
            self: *const IWSDServiceProxy,
            p_operation: ?*const WSD_OPERATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventingStatusCallback: *const fn (
            self: *const IWSDServiceProxy,
            p_status: ?*IWSDEventingStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEndpointProxy: *const fn (
            self: *const IWSDServiceProxy,
            pp_proxy: ?*?*IWSDEndpointProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWSDMetadataExchange.MethodMixin(T);
            pub inline fn beginGetMetadata(self: *const T, pp_result_: ?*?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDServiceProxy.VTable, @ptrCast(self.vtable)).BeginGetMetadata(@as(*const IWSDServiceProxy, @ptrCast(self)), pp_result_);
            }
            pub inline fn endGetMetadata(self: *const T, p_result_: ?*IWSDAsyncResult, pp_metadata_: ?*?*WSD_METADATA_SECTION_LIST) HRESULT {
                return @as(*const IWSDServiceProxy.VTable, @ptrCast(self.vtable)).EndGetMetadata(@as(*const IWSDServiceProxy, @ptrCast(self)), p_result_, pp_metadata_);
            }
            pub inline fn getServiceMetadata(self: *const T, pp_service_metadata_: ?*?*WSD_SERVICE_METADATA) HRESULT {
                return @as(*const IWSDServiceProxy.VTable, @ptrCast(self.vtable)).GetServiceMetadata(@as(*const IWSDServiceProxy, @ptrCast(self)), pp_service_metadata_);
            }
            pub inline fn subscribeToOperation(self: *const T, p_operation_: ?*const WSD_OPERATION, p_unknown_: ?*IUnknown, p_any_: ?*const WSDXML_ELEMENT, pp_any_: ?*?*WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDServiceProxy.VTable, @ptrCast(self.vtable)).SubscribeToOperation(@as(*const IWSDServiceProxy, @ptrCast(self)), p_operation_, p_unknown_, p_any_, pp_any_);
            }
            pub inline fn unsubscribeToOperation(self: *const T, p_operation_: ?*const WSD_OPERATION) HRESULT {
                return @as(*const IWSDServiceProxy.VTable, @ptrCast(self.vtable)).UnsubscribeToOperation(@as(*const IWSDServiceProxy, @ptrCast(self)), p_operation_);
            }
            pub inline fn setEventingStatusCallback(self: *const T, p_status_: ?*IWSDEventingStatus) HRESULT {
                return @as(*const IWSDServiceProxy.VTable, @ptrCast(self.vtable)).SetEventingStatusCallback(@as(*const IWSDServiceProxy, @ptrCast(self)), p_status_);
            }
            pub inline fn getEndpointProxy(self: *const T, pp_proxy_: ?*?*IWSDEndpointProxy) HRESULT {
                return @as(*const IWSDServiceProxy.VTable, @ptrCast(self.vtable)).GetEndpointProxy(@as(*const IWSDServiceProxy, @ptrCast(self)), pp_proxy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWSDServiceProxyEventing_Value = Guid.initString("f9279d6d-1012-4a94-b8cc-fd35d2202bfe");
pub const IID_IWSDServiceProxyEventing = &IID_IWSDServiceProxyEventing_Value;
pub const IWSDServiceProxyEventing = extern struct {
    pub const VTable = extern struct {
        base: IWSDServiceProxy.VTable,
        SubscribeToMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_unknown: ?*IUnknown,
            p_expires: ?*const WSD_EVENTING_EXPIRES,
            p_any: ?*const WSDXML_ELEMENT,
            pp_expires: ?*?*WSD_EVENTING_EXPIRES,
            pp_any: ?*?*WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginSubscribeToMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_unknown: ?*IUnknown,
            p_expires: ?*const WSD_EVENTING_EXPIRES,
            p_any: ?*const WSDXML_ELEMENT,
            p_async_state: ?*IUnknown,
            p_async_callback: ?*IWSDAsyncCallback,
            pp_result: ?*?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSubscribeToMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_result: ?*IWSDAsyncResult,
            pp_expires: ?*?*WSD_EVENTING_EXPIRES,
            pp_any: ?*?*WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnsubscribeToMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_any: ?*const WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginUnsubscribeToMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_any: ?*const WSDXML_ELEMENT,
            p_async_state: ?*IUnknown,
            p_async_callback: ?*IWSDAsyncCallback,
            pp_result: ?*?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndUnsubscribeToMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_result: ?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenewMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_expires: ?*const WSD_EVENTING_EXPIRES,
            p_any: ?*const WSDXML_ELEMENT,
            pp_expires: ?*?*WSD_EVENTING_EXPIRES,
            pp_any: ?*?*WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginRenewMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_expires: ?*const WSD_EVENTING_EXPIRES,
            p_any: ?*const WSDXML_ELEMENT,
            p_async_state: ?*IUnknown,
            p_async_callback: ?*IWSDAsyncCallback,
            pp_result: ?*?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndRenewMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_result: ?*IWSDAsyncResult,
            pp_expires: ?*?*WSD_EVENTING_EXPIRES,
            pp_any: ?*?*WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatusForMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_any: ?*const WSDXML_ELEMENT,
            pp_expires: ?*?*WSD_EVENTING_EXPIRES,
            pp_any: ?*?*WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginGetStatusForMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_any: ?*const WSDXML_ELEMENT,
            p_async_state: ?*IUnknown,
            p_async_callback: ?*IWSDAsyncCallback,
            pp_result: ?*?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndGetStatusForMultipleOperations: *const fn (
            self: *const IWSDServiceProxyEventing,
            p_operations: [*]const WSD_OPERATION,
            dw_operation_count: u32,
            p_result: ?*IWSDAsyncResult,
            pp_expires: ?*?*WSD_EVENTING_EXPIRES,
            pp_any: ?*?*WSDXML_ELEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWSDServiceProxy.MethodMixin(T);
            pub inline fn subscribeToMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_unknown_: ?*IUnknown, p_expires_: ?*const WSD_EVENTING_EXPIRES, p_any_: ?*const WSDXML_ELEMENT, pp_expires_: ?*?*WSD_EVENTING_EXPIRES, pp_any_: ?*?*WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).SubscribeToMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_unknown_, p_expires_, p_any_, pp_expires_, pp_any_);
            }
            pub inline fn beginSubscribeToMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_unknown_: ?*IUnknown, p_expires_: ?*const WSD_EVENTING_EXPIRES, p_any_: ?*const WSDXML_ELEMENT, p_async_state_: ?*IUnknown, p_async_callback_: ?*IWSDAsyncCallback, pp_result_: ?*?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).BeginSubscribeToMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_unknown_, p_expires_, p_any_, p_async_state_, p_async_callback_, pp_result_);
            }
            pub inline fn endSubscribeToMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_result_: ?*IWSDAsyncResult, pp_expires_: ?*?*WSD_EVENTING_EXPIRES, pp_any_: ?*?*WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).EndSubscribeToMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_result_, pp_expires_, pp_any_);
            }
            pub inline fn unsubscribeToMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_any_: ?*const WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).UnsubscribeToMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_any_);
            }
            pub inline fn beginUnsubscribeToMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_any_: ?*const WSDXML_ELEMENT, p_async_state_: ?*IUnknown, p_async_callback_: ?*IWSDAsyncCallback, pp_result_: ?*?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).BeginUnsubscribeToMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_any_, p_async_state_, p_async_callback_, pp_result_);
            }
            pub inline fn endUnsubscribeToMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_result_: ?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).EndUnsubscribeToMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_result_);
            }
            pub inline fn renewMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_expires_: ?*const WSD_EVENTING_EXPIRES, p_any_: ?*const WSDXML_ELEMENT, pp_expires_: ?*?*WSD_EVENTING_EXPIRES, pp_any_: ?*?*WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).RenewMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_expires_, p_any_, pp_expires_, pp_any_);
            }
            pub inline fn beginRenewMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_expires_: ?*const WSD_EVENTING_EXPIRES, p_any_: ?*const WSDXML_ELEMENT, p_async_state_: ?*IUnknown, p_async_callback_: ?*IWSDAsyncCallback, pp_result_: ?*?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).BeginRenewMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_expires_, p_any_, p_async_state_, p_async_callback_, pp_result_);
            }
            pub inline fn endRenewMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_result_: ?*IWSDAsyncResult, pp_expires_: ?*?*WSD_EVENTING_EXPIRES, pp_any_: ?*?*WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).EndRenewMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_result_, pp_expires_, pp_any_);
            }
            pub inline fn getStatusForMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_any_: ?*const WSDXML_ELEMENT, pp_expires_: ?*?*WSD_EVENTING_EXPIRES, pp_any_: ?*?*WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).GetStatusForMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_any_, pp_expires_, pp_any_);
            }
            pub inline fn beginGetStatusForMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_any_: ?*const WSDXML_ELEMENT, p_async_state_: ?*IUnknown, p_async_callback_: ?*IWSDAsyncCallback, pp_result_: ?*?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).BeginGetStatusForMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_any_, p_async_state_, p_async_callback_, pp_result_);
            }
            pub inline fn endGetStatusForMultipleOperations(self: *const T, p_operations_: [*]const WSD_OPERATION, dw_operation_count_: u32, p_result_: ?*IWSDAsyncResult, pp_expires_: ?*?*WSD_EVENTING_EXPIRES, pp_any_: ?*?*WSDXML_ELEMENT) HRESULT {
                return @as(*const IWSDServiceProxyEventing.VTable, @ptrCast(self.vtable)).EndGetStatusForMultipleOperations(@as(*const IWSDServiceProxyEventing, @ptrCast(self)), p_operations_, dw_operation_count_, p_result_, pp_expires_, pp_any_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDDeviceProxy_Value = Guid.initString("eee0c031-c578-4c0e-9a3b-973c35f409db");
pub const IID_IWSDDeviceProxy = &IID_IWSDDeviceProxy_Value;
pub const IWSDDeviceProxy = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn (
            self: *const IWSDDeviceProxy,
            psz_device_id: ?[*:0]const u16,
            p_device_address: ?*IWSDAddress,
            psz_local_id: ?[*:0]const u16,
            p_context: ?*IWSDXMLContext,
            p_sponsor: ?*IWSDDeviceProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginGetMetadata: *const fn (
            self: *const IWSDDeviceProxy,
            pp_result: ?*?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndGetMetadata: *const fn (
            self: *const IWSDDeviceProxy,
            p_result: ?*IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHostMetadata: *const fn (
            self: *const IWSDDeviceProxy,
            pp_host_metadata: ?*?*WSD_HOST_METADATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThisModelMetadata: *const fn (
            self: *const IWSDDeviceProxy,
            pp_manufacturer_metadata: ?*?*WSD_THIS_MODEL_METADATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThisDeviceMetadata: *const fn (
            self: *const IWSDDeviceProxy,
            pp_this_device_metadata: ?*?*WSD_THIS_DEVICE_METADATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllMetadata: *const fn (
            self: *const IWSDDeviceProxy,
            pp_metadata: ?*?*WSD_METADATA_SECTION_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceProxyById: *const fn (
            self: *const IWSDDeviceProxy,
            psz_service_id: ?[*:0]const u16,
            pp_service_proxy: ?*?*IWSDServiceProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceProxyByType: *const fn (
            self: *const IWSDDeviceProxy,
            p_type: ?*const WSDXML_NAME,
            pp_service_proxy: ?*?*IWSDServiceProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEndpointProxy: *const fn (
            self: *const IWSDDeviceProxy,
            pp_proxy: ?*?*IWSDEndpointProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn init(self: *const T, psz_device_id_: ?[*:0]const u16, p_device_address_: ?*IWSDAddress, psz_local_id_: ?[*:0]const u16, p_context_: ?*IWSDXMLContext, p_sponsor_: ?*IWSDDeviceProxy) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).Init(@as(*const IWSDDeviceProxy, @ptrCast(self)), psz_device_id_, p_device_address_, psz_local_id_, p_context_, p_sponsor_);
            }
            pub inline fn beginGetMetadata(self: *const T, pp_result_: ?*?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).BeginGetMetadata(@as(*const IWSDDeviceProxy, @ptrCast(self)), pp_result_);
            }
            pub inline fn endGetMetadata(self: *const T, p_result_: ?*IWSDAsyncResult) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).EndGetMetadata(@as(*const IWSDDeviceProxy, @ptrCast(self)), p_result_);
            }
            pub inline fn getHostMetadata(self: *const T, pp_host_metadata_: ?*?*WSD_HOST_METADATA) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).GetHostMetadata(@as(*const IWSDDeviceProxy, @ptrCast(self)), pp_host_metadata_);
            }
            pub inline fn getThisModelMetadata(self: *const T, pp_manufacturer_metadata_: ?*?*WSD_THIS_MODEL_METADATA) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).GetThisModelMetadata(@as(*const IWSDDeviceProxy, @ptrCast(self)), pp_manufacturer_metadata_);
            }
            pub inline fn getThisDeviceMetadata(self: *const T, pp_this_device_metadata_: ?*?*WSD_THIS_DEVICE_METADATA) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).GetThisDeviceMetadata(@as(*const IWSDDeviceProxy, @ptrCast(self)), pp_this_device_metadata_);
            }
            pub inline fn getAllMetadata(self: *const T, pp_metadata_: ?*?*WSD_METADATA_SECTION_LIST) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).GetAllMetadata(@as(*const IWSDDeviceProxy, @ptrCast(self)), pp_metadata_);
            }
            pub inline fn getServiceProxyById(self: *const T, psz_service_id_: ?[*:0]const u16, pp_service_proxy_: ?*?*IWSDServiceProxy) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).GetServiceProxyById(@as(*const IWSDDeviceProxy, @ptrCast(self)), psz_service_id_, pp_service_proxy_);
            }
            pub inline fn getServiceProxyByType(self: *const T, p_type_: ?*const WSDXML_NAME, pp_service_proxy_: ?*?*IWSDServiceProxy) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).GetServiceProxyByType(@as(*const IWSDDeviceProxy, @ptrCast(self)), p_type_, pp_service_proxy_);
            }
            pub inline fn getEndpointProxy(self: *const T, pp_proxy_: ?*?*IWSDEndpointProxy) HRESULT {
                return @as(*const IWSDDeviceProxy.VTable, @ptrCast(self.vtable)).GetEndpointProxy(@as(*const IWSDDeviceProxy, @ptrCast(self)), pp_proxy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDAsyncResult_Value = Guid.initString("11a9852a-8dd8-423e-b537-9356db4fbfb8");
pub const IID_IWSDAsyncResult = &IID_IWSDAsyncResult_Value;
pub const IWSDAsyncResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCallback: *const fn (
            self: *const IWSDAsyncResult,
            p_callback: ?*IWSDAsyncCallback,
            p_async_state: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWaitHandle: *const fn (
            self: *const IWSDAsyncResult,
            h_wait_handle: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasCompleted: *const fn (
            self: *const IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAsyncState: *const fn (
            self: *const IWSDAsyncResult,
            pp_async_state: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const IWSDAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEvent: *const fn (
            self: *const IWSDAsyncResult,
            p_event: ?*WSD_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEndpointProxy: *const fn (
            self: *const IWSDAsyncResult,
            pp_endpoint: ?*?*IWSDEndpointProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setCallback(self: *const T, p_callback_: ?*IWSDAsyncCallback, p_async_state_: ?*IUnknown) HRESULT {
                return @as(*const IWSDAsyncResult.VTable, @ptrCast(self.vtable)).SetCallback(@as(*const IWSDAsyncResult, @ptrCast(self)), p_callback_, p_async_state_);
            }
            pub inline fn setWaitHandle(self: *const T, h_wait_handle_: ?HANDLE) HRESULT {
                return @as(*const IWSDAsyncResult.VTable, @ptrCast(self.vtable)).SetWaitHandle(@as(*const IWSDAsyncResult, @ptrCast(self)), h_wait_handle_);
            }
            pub inline fn hasCompleted(self: *const T) HRESULT {
                return @as(*const IWSDAsyncResult.VTable, @ptrCast(self.vtable)).HasCompleted(@as(*const IWSDAsyncResult, @ptrCast(self)));
            }
            pub inline fn getAsyncState(self: *const T, pp_async_state_: ?*?*IUnknown) HRESULT {
                return @as(*const IWSDAsyncResult.VTable, @ptrCast(self.vtable)).GetAsyncState(@as(*const IWSDAsyncResult, @ptrCast(self)), pp_async_state_);
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const IWSDAsyncResult.VTable, @ptrCast(self.vtable)).Abort(@as(*const IWSDAsyncResult, @ptrCast(self)));
            }
            pub inline fn getEvent(self: *const T, p_event_: ?*WSD_EVENT) HRESULT {
                return @as(*const IWSDAsyncResult.VTable, @ptrCast(self.vtable)).GetEvent(@as(*const IWSDAsyncResult, @ptrCast(self)), p_event_);
            }
            pub inline fn getEndpointProxy(self: *const T, pp_endpoint_: ?*?*IWSDEndpointProxy) HRESULT {
                return @as(*const IWSDAsyncResult.VTable, @ptrCast(self.vtable)).GetEndpointProxy(@as(*const IWSDAsyncResult, @ptrCast(self)), pp_endpoint_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDAsyncCallback_Value = Guid.initString("a63e109d-ce72-49e2-ba98-e845f5ee1666");
pub const IID_IWSDAsyncCallback = &IID_IWSDAsyncCallback_Value;
pub const IWSDAsyncCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AsyncOperationComplete: *const fn (
            self: *const IWSDAsyncCallback,
            p_async_result: ?*IWSDAsyncResult,
            p_async_state: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn asyncOperationComplete(self: *const T, p_async_result_: ?*IWSDAsyncResult, p_async_state_: ?*IUnknown) HRESULT {
                return @as(*const IWSDAsyncCallback.VTable, @ptrCast(self.vtable)).AsyncOperationComplete(@as(*const IWSDAsyncCallback, @ptrCast(self)), p_async_result_, p_async_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDEventingStatus_Value = Guid.initString("49b17f52-637a-407a-ae99-fbe82a4d38c0");
pub const IID_IWSDEventingStatus = &IID_IWSDEventingStatus_Value;
pub const IWSDEventingStatus = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SubscriptionRenewed: *const fn (
            self: *const IWSDEventingStatus,
            psz_subscription_action: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SubscriptionRenewalFailed: *const fn (
            self: *const IWSDEventingStatus,
            psz_subscription_action: ?[*:0]const u16,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SubscriptionEnded: *const fn (
            self: *const IWSDEventingStatus,
            psz_subscription_action: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn subscriptionRenewed(self: *const T, psz_subscription_action_: ?[*:0]const u16) void {
                return @as(*const IWSDEventingStatus.VTable, @ptrCast(self.vtable)).SubscriptionRenewed(@as(*const IWSDEventingStatus, @ptrCast(self)), psz_subscription_action_);
            }
            pub inline fn subscriptionRenewalFailed(self: *const T, psz_subscription_action_: ?[*:0]const u16, hr_: HRESULT) void {
                return @as(*const IWSDEventingStatus.VTable, @ptrCast(self.vtable)).SubscriptionRenewalFailed(@as(*const IWSDEventingStatus, @ptrCast(self)), psz_subscription_action_, hr_);
            }
            pub inline fn subscriptionEnded(self: *const T, psz_subscription_action_: ?[*:0]const u16) void {
                return @as(*const IWSDEventingStatus.VTable, @ptrCast(self.vtable)).SubscriptionEnded(@as(*const IWSDEventingStatus, @ptrCast(self)), psz_subscription_action_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDDeviceHost_Value = Guid.initString("917fe891-3d13-4138-9809-934c8abeb12c");
pub const IID_IWSDDeviceHost = &IID_IWSDDeviceHost_Value;
pub const IWSDDeviceHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn (
            self: *const IWSDDeviceHost,
            psz_local_id: ?[*:0]const u16,
            p_context: ?*IWSDXMLContext,
            pp_host_addresses: ?[*]?*IWSDAddress,
            dw_host_address_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: *const fn (
            self: *const IWSDDeviceHost,
            ull_instance_id: u64,
            p_scope_list: ?*const WSD_URI_LIST,
            p_notification_sink: ?*IWSDDeviceHostNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IWSDDeviceHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: *const fn (
            self: *const IWSDDeviceHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterPortType: *const fn (
            self: *const IWSDDeviceHost,
            p_port_type: ?*const WSD_PORT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMetadata: *const fn (
            self: *const IWSDDeviceHost,
            p_this_model_metadata: ?*const WSD_THIS_MODEL_METADATA,
            p_this_device_metadata: ?*const WSD_THIS_DEVICE_METADATA,
            p_host_metadata: ?*const WSD_HOST_METADATA,
            p_custom_metadata: ?*const WSD_METADATA_SECTION_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterService: *const fn (
            self: *const IWSDDeviceHost,
            psz_service_id: ?[*:0]const u16,
            p_service: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetireService: *const fn (
            self: *const IWSDDeviceHost,
            psz_service_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDynamicService: *const fn (
            self: *const IWSDDeviceHost,
            psz_service_id: ?[*:0]const u16,
            psz_endpoint_address: ?[*:0]const u16,
            p_port_type: ?*const WSD_PORT_TYPE,
            p_port_name: ?*const WSDXML_NAME,
            p_any: ?*const WSDXML_ELEMENT,
            p_service: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveDynamicService: *const fn (
            self: *const IWSDDeviceHost,
            psz_service_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetServiceDiscoverable: *const fn (
            self: *const IWSDDeviceHost,
            psz_service_id: ?[*:0]const u16,
            f_discoverable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SignalEvent: *const fn (
            self: *const IWSDDeviceHost,
            psz_service_id: ?[*:0]const u16,
            p_body: ?*const anyopaque,
            p_operation: ?*const WSD_OPERATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn init(self: *const T, psz_local_id_: ?[*:0]const u16, p_context_: ?*IWSDXMLContext, pp_host_addresses_: ?[*]?*IWSDAddress, dw_host_address_count_: u32) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).Init(@as(*const IWSDDeviceHost, @ptrCast(self)), psz_local_id_, p_context_, pp_host_addresses_, dw_host_address_count_);
            }
            pub inline fn start(self: *const T, ull_instance_id_: u64, p_scope_list_: ?*const WSD_URI_LIST, p_notification_sink_: ?*IWSDDeviceHostNotify) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).Start(@as(*const IWSDDeviceHost, @ptrCast(self)), ull_instance_id_, p_scope_list_, p_notification_sink_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).Stop(@as(*const IWSDDeviceHost, @ptrCast(self)));
            }
            pub inline fn terminate(self: *const T) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).Terminate(@as(*const IWSDDeviceHost, @ptrCast(self)));
            }
            pub inline fn registerPortType(self: *const T, p_port_type_: ?*const WSD_PORT_TYPE) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).RegisterPortType(@as(*const IWSDDeviceHost, @ptrCast(self)), p_port_type_);
            }
            pub inline fn setMetadata(self: *const T, p_this_model_metadata_: ?*const WSD_THIS_MODEL_METADATA, p_this_device_metadata_: ?*const WSD_THIS_DEVICE_METADATA, p_host_metadata_: ?*const WSD_HOST_METADATA, p_custom_metadata_: ?*const WSD_METADATA_SECTION_LIST) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).SetMetadata(@as(*const IWSDDeviceHost, @ptrCast(self)), p_this_model_metadata_, p_this_device_metadata_, p_host_metadata_, p_custom_metadata_);
            }
            pub inline fn registerService(self: *const T, psz_service_id_: ?[*:0]const u16, p_service_: ?*IUnknown) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).RegisterService(@as(*const IWSDDeviceHost, @ptrCast(self)), psz_service_id_, p_service_);
            }
            pub inline fn retireService(self: *const T, psz_service_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).RetireService(@as(*const IWSDDeviceHost, @ptrCast(self)), psz_service_id_);
            }
            pub inline fn addDynamicService(self: *const T, psz_service_id_: ?[*:0]const u16, psz_endpoint_address_: ?[*:0]const u16, p_port_type_: ?*const WSD_PORT_TYPE, p_port_name_: ?*const WSDXML_NAME, p_any_: ?*const WSDXML_ELEMENT, p_service_: ?*IUnknown) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).AddDynamicService(@as(*const IWSDDeviceHost, @ptrCast(self)), psz_service_id_, psz_endpoint_address_, p_port_type_, p_port_name_, p_any_, p_service_);
            }
            pub inline fn removeDynamicService(self: *const T, psz_service_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).RemoveDynamicService(@as(*const IWSDDeviceHost, @ptrCast(self)), psz_service_id_);
            }
            pub inline fn setServiceDiscoverable(self: *const T, psz_service_id_: ?[*:0]const u16, f_discoverable_: BOOL) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).SetServiceDiscoverable(@as(*const IWSDDeviceHost, @ptrCast(self)), psz_service_id_, f_discoverable_);
            }
            pub inline fn signalEvent(self: *const T, psz_service_id_: ?[*:0]const u16, p_body_: ?*const anyopaque, p_operation_: ?*const WSD_OPERATION) HRESULT {
                return @as(*const IWSDDeviceHost.VTable, @ptrCast(self.vtable)).SignalEvent(@as(*const IWSDDeviceHost, @ptrCast(self)), psz_service_id_, p_body_, p_operation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDDeviceHostNotify_Value = Guid.initString("b5bee9f9-eeda-41fe-96f7-f45e14990fb0");
pub const IID_IWSDDeviceHostNotify = &IID_IWSDDeviceHostNotify_Value;
pub const IWSDDeviceHostNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetService: *const fn (
            self: *const IWSDDeviceHostNotify,
            psz_service_id: ?[*:0]const u16,
            pp_service: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getService(self: *const T, psz_service_id_: ?[*:0]const u16, pp_service_: ?*?*IUnknown) HRESULT {
                return @as(*const IWSDDeviceHostNotify.VTable, @ptrCast(self.vtable)).GetService(@as(*const IWSDDeviceHostNotify, @ptrCast(self)), psz_service_id_, pp_service_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWSDServiceMessaging_Value = Guid.initString("94974cf4-0cab-460d-a3f6-7a0ad623c0e6");
pub const IID_IWSDServiceMessaging = &IID_IWSDServiceMessaging_Value;
pub const IWSDServiceMessaging = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SendResponse: *const fn (
            self: *const IWSDServiceMessaging,
            p_body: ?*anyopaque,
            p_operation: ?*WSD_OPERATION,
            p_message_parameters: ?*IWSDMessageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FaultRequest: *const fn (
            self: *const IWSDServiceMessaging,
            p_request_header: ?*WSD_SOAP_HEADER,
            p_message_parameters: ?*IWSDMessageParameters,
            p_fault: ?*WSD_SOAP_FAULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn sendResponse(self: *const T, p_body_: ?*anyopaque, p_operation_: ?*WSD_OPERATION, p_message_parameters_: ?*IWSDMessageParameters) HRESULT {
                return @as(*const IWSDServiceMessaging.VTable, @ptrCast(self.vtable)).SendResponse(@as(*const IWSDServiceMessaging, @ptrCast(self)), p_body_, p_operation_, p_message_parameters_);
            }
            pub inline fn faultRequest(self: *const T, p_request_header_: ?*WSD_SOAP_HEADER, p_message_parameters_: ?*IWSDMessageParameters, p_fault_: ?*WSD_SOAP_FAULT) HRESULT {
                return @as(*const IWSDServiceMessaging.VTable, @ptrCast(self.vtable)).FaultRequest(@as(*const IWSDServiceMessaging, @ptrCast(self)), p_request_header_, p_message_parameters_, p_fault_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (32)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateUdpMessageParameters(
    pp_tx_params: ?*?*IWSDUdpMessageParameters,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateUdpAddress(
    pp_address: ?*?*IWSDUdpAddress,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateHttpMessageParameters(
    pp_tx_params: ?*?*IWSDHttpMessageParameters,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateHttpAddress(
    pp_address: ?*?*IWSDHttpAddress,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateOutboundAttachment(
    pp_attachment: ?*?*IWSDOutboundAttachment,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDXMLGetNameFromBuiltinNamespace(
    psz_namespace: ?[*:0]const u16,
    psz_name: ?[*:0]const u16,
    pp_name: ?*?*WSDXML_NAME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDXMLCreateContext(
    pp_context: ?*?*IWSDXMLContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateDiscoveryProvider(
    p_context: ?*IWSDXMLContext,
    pp_provider: ?*?*IWSDiscoveryProvider,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wsdapi" fn WSDCreateDiscoveryProvider2(
    p_context: ?*IWSDXMLContext,
    p_config_params: ?[*]WSD_CONFIG_PARAM,
    dw_config_param_count: u32,
    pp_provider: ?*?*IWSDiscoveryProvider,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateDiscoveryPublisher(
    p_context: ?*IWSDXMLContext,
    pp_publisher: ?*?*IWSDiscoveryPublisher,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wsdapi" fn WSDCreateDiscoveryPublisher2(
    p_context: ?*IWSDXMLContext,
    p_config_params: ?[*]WSD_CONFIG_PARAM,
    dw_config_param_count: u32,
    pp_publisher: ?*?*IWSDiscoveryPublisher,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateDeviceProxy(
    psz_device_id: ?[*:0]const u16,
    psz_local_id: ?[*:0]const u16,
    p_context: ?*IWSDXMLContext,
    pp_device_proxy: ?*?*IWSDDeviceProxy,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateDeviceProxyAdvanced(
    psz_device_id: ?[*:0]const u16,
    p_device_address: ?*IWSDAddress,
    psz_local_id: ?[*:0]const u16,
    p_context: ?*IWSDXMLContext,
    pp_device_proxy: ?*?*IWSDDeviceProxy,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wsdapi" fn WSDCreateDeviceProxy2(
    psz_device_id: ?[*:0]const u16,
    psz_local_id: ?[*:0]const u16,
    p_context: ?*IWSDXMLContext,
    p_config_params: ?[*]WSD_CONFIG_PARAM,
    dw_config_param_count: u32,
    pp_device_proxy: ?*?*IWSDDeviceProxy,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateDeviceHost(
    psz_local_id: ?[*:0]const u16,
    p_context: ?*IWSDXMLContext,
    pp_device_host: ?*?*IWSDDeviceHost,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDCreateDeviceHostAdvanced(
    psz_local_id: ?[*:0]const u16,
    p_context: ?*IWSDXMLContext,
    pp_host_addresses: ?[*]?*IWSDAddress,
    dw_host_address_count: u32,
    pp_device_host: ?*?*IWSDDeviceHost,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wsdapi" fn WSDCreateDeviceHost2(
    psz_local_id: ?[*:0]const u16,
    p_context: ?*IWSDXMLContext,
    p_config_params: ?[*]WSD_CONFIG_PARAM,
    dw_config_param_count: u32,
    pp_device_host: ?*?*IWSDDeviceHost,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDSetConfigurationOption(
    dw_option: u32,
    // TODO: what to do with BytesParamIndex 2?
    p_void: ?*anyopaque,
    cb_in_buffer: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDGetConfigurationOption(
    dw_option: u32,
    // TODO: what to do with BytesParamIndex 2?
    p_void: ?*anyopaque,
    cb_out_buffer: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDAllocateLinkedMemory(
    p_parent: ?*anyopaque,
    cb_size: usize,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDFreeLinkedMemory(
    p_void: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDAttachLinkedMemory(
    p_parent: ?*anyopaque,
    p_child: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDDetachLinkedMemory(
    p_void: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDXMLBuildAnyForSingleElement(
    p_element_name: ?*WSDXML_NAME,
    psz_text: ?[*:0]const u16,
    pp_any: ?*?*WSDXML_ELEMENT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDXMLGetValueFromAny(
    psz_namespace: ?[*:0]const u16,
    psz_name: ?[*:0]const u16,
    p_any: ?*WSDXML_ELEMENT,
    ppsz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDXMLAddSibling(
    p_first: ?*WSDXML_ELEMENT,
    p_second: ?*WSDXML_ELEMENT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDXMLAddChild(
    p_parent: ?*WSDXML_ELEMENT,
    p_child: ?*WSDXML_ELEMENT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDXMLCleanupElement(
    p_any: ?*WSDXML_ELEMENT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDGenerateFault(
    psz_code: ?[*:0]const u16,
    psz_sub_code: ?[*:0]const u16,
    psz_reason: ?[*:0]const u16,
    psz_detail: ?[*:0]const u16,
    p_context: ?*IWSDXMLContext,
    pp_fault: ?*?*WSD_SOAP_FAULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wsdapi" fn WSDGenerateFaultEx(
    p_code: ?*WSDXML_NAME,
    p_sub_code: ?*WSDXML_NAME,
    p_reasons: ?*WSD_LOCALIZED_STRING_LIST,
    psz_detail: ?[*:0]const u16,
    pp_fault: ?*?*WSD_SOAP_FAULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wsdapi" fn WSDUriEncode(
    source: [*:0]const u16,
    cch_source: u32,
    dest_out: [*]?PWSTR,
    cch_dest_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wsdapi" fn WSDUriDecode(
    source: [*:0]const u16,
    cch_source: u32,
    dest_out: [*]?PWSTR,
    cch_dest_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const CERT_CONTEXT = @import("../security/cryptography.zig").CERT_CONTEXT;
const HANDLE = @import("../foundation.zig").HANDLE;
const HCERTSTORE = @import("../security/cryptography.zig").HCERTSTORE;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;
const SOCKADDR_STORAGE = @import("../networking/win_sock.zig").SOCKADDR_STORAGE;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
