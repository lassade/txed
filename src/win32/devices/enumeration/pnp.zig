//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (47)
//--------------------------------------------------------------------------------
pub const UPNP_E_ROOT_ELEMENT_EXPECTED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220992));
pub const UPNP_E_DEVICE_ELEMENT_EXPECTED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220991));
pub const UPNP_E_SERVICE_ELEMENT_EXPECTED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220990));
pub const UPNP_E_SERVICE_NODE_INCOMPLETE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220989));
pub const UPNP_E_DEVICE_NODE_INCOMPLETE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220988));
pub const UPNP_E_ICON_ELEMENT_EXPECTED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220987));
pub const UPNP_E_ICON_NODE_INCOMPLETE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220986));
pub const UPNP_E_INVALID_ACTION = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220985));
pub const UPNP_E_INVALID_ARGUMENTS = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220984));
pub const UPNP_E_OUT_OF_SYNC = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220983));
pub const UPNP_E_ACTION_REQUEST_FAILED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220976));
pub const UPNP_E_TRANSPORT_ERROR = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220975));
pub const UPNP_E_VARIABLE_VALUE_UNKNOWN = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220974));
pub const UPNP_E_INVALID_VARIABLE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220973));
pub const UPNP_E_DEVICE_ERROR = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220972));
pub const UPNP_E_PROTOCOL_ERROR = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220971));
pub const UPNP_E_ERROR_PROCESSING_RESPONSE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220970));
pub const UPNP_E_DEVICE_TIMEOUT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220969));
pub const UPNP_E_INVALID_DOCUMENT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220224));
pub const UPNP_E_EVENT_SUBSCRIPTION_FAILED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220223));
pub const FAULT_INVALID_ACTION = @as(u32, 401);
pub const FAULT_INVALID_ARG = @as(u32, 402);
pub const FAULT_INVALID_SEQUENCE_NUMBER = @as(u32, 403);
pub const FAULT_INVALID_VARIABLE = @as(u32, 404);
pub const FAULT_DEVICE_INTERNAL_ERROR = @as(u32, 501);
pub const FAULT_ACTION_SPECIFIC_BASE = @as(u32, 600);
pub const FAULT_ACTION_SPECIFIC_MAX = @as(u32, 899);
pub const UPNP_E_ACTION_SPECIFIC_BASE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147220736));
pub const UPNP_ADDRESSFAMILY_IPv4 = @as(u32, 1);
pub const UPNP_ADDRESSFAMILY_IPv6 = @as(u32, 2);
pub const UPNP_ADDRESSFAMILY_BOTH = @as(u32, 3);
pub const UPNP_SERVICE_DELAY_SCPD_AND_SUBSCRIPTION = @as(u32, 1);
pub const UPNP_E_REQUIRED_ELEMENT_ERROR = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180512));
pub const UPNP_E_DUPLICATE_NOT_ALLOWED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180511));
pub const UPNP_E_DUPLICATE_SERVICE_ID = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180510));
pub const UPNP_E_INVALID_DESCRIPTION = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180509));
pub const UPNP_E_INVALID_SERVICE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180508));
pub const UPNP_E_INVALID_ICON = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180507));
pub const UPNP_E_INVALID_XML = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180506));
pub const UPNP_E_INVALID_ROOT_NAMESPACE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180505));
pub const UPNP_E_SUFFIX_TOO_LONG = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180504));
pub const UPNP_E_URLBASE_PRESENT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180503));
pub const UPNP_E_VALUE_TOO_LONG = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180496));
pub const UPNP_E_DEVICE_RUNNING = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180495));
pub const UPNP_E_DEVICE_NOTREGISTERED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2147180494));
pub const REMOTE_ADDRESS_VALUE_NAME = "RemoteAddress";
pub const ADDRESS_FAMILY_VALUE_NAME = "AddressFamily";

//--------------------------------------------------------------------------------
// Section: Types (41)
//--------------------------------------------------------------------------------
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HSWDEVICE = *opaque {};

pub const SW_DEVICE_CAPABILITIES = enum(i32) {
    None = 0,
    Removable = 1,
    SilentInstall = 2,
    NoDisplayInUI = 4,
    DriverRequired = 8,
};
pub const SWDeviceCapabilitiesNone = SW_DEVICE_CAPABILITIES.None;
pub const SWDeviceCapabilitiesRemovable = SW_DEVICE_CAPABILITIES.Removable;
pub const SWDeviceCapabilitiesSilentInstall = SW_DEVICE_CAPABILITIES.SilentInstall;
pub const SWDeviceCapabilitiesNoDisplayInUI = SW_DEVICE_CAPABILITIES.NoDisplayInUI;
pub const SWDeviceCapabilitiesDriverRequired = SW_DEVICE_CAPABILITIES.DriverRequired;

pub const SW_DEVICE_CREATE_INFO = extern struct {
    cbSize: u32,
    pszInstanceId: ?[*:0]const u16,
    pszzHardwareIds: ?[*]const u16,
    pszzCompatibleIds: ?[*]const u16,
    pContainerId: ?*const Guid,
    CapabilityFlags: u32,
    pszDeviceDescription: ?[*:0]const u16,
    pszDeviceLocation: ?[*:0]const u16,
    pSecurityDescriptor: ?*const SECURITY_DESCRIPTOR,
};

pub const SW_DEVICE_LIFETIME = enum(i32) {
    Handle = 0,
    ParentPresent = 1,
    Max = 2,
};
pub const SWDeviceLifetimeHandle = SW_DEVICE_LIFETIME.Handle;
pub const SWDeviceLifetimeParentPresent = SW_DEVICE_LIFETIME.ParentPresent;
pub const SWDeviceLifetimeMax = SW_DEVICE_LIFETIME.Max;

pub const SW_DEVICE_CREATE_CALLBACK = *const fn (
    h_sw_device: ?HSWDEVICE,
    create_result: HRESULT,
    p_context: ?*anyopaque,
    psz_device_instance_id: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;

const CLSID_UPnPDeviceFinder_Value = Guid.initString("e2085f28-feb7-404a-b8e7-e659bdeaaa02");
pub const CLSID_UPnPDeviceFinder = &CLSID_UPnPDeviceFinder_Value;

const CLSID_UPnPDevices_Value = Guid.initString("b9e84ffd-ad3c-40a4-b835-0882ebcbaaa8");
pub const CLSID_UPnPDevices = &CLSID_UPnPDevices_Value;

const CLSID_UPnPDevice_Value = Guid.initString("a32552c5-ba61-457a-b59a-a2561e125e33");
pub const CLSID_UPnPDevice = &CLSID_UPnPDevice_Value;

const CLSID_UPnPServices_Value = Guid.initString("c0bc4b4a-a406-4efc-932f-b8546b8100cc");
pub const CLSID_UPnPServices = &CLSID_UPnPServices_Value;

const CLSID_UPnPService_Value = Guid.initString("c624ba95-fbcb-4409-8c03-8cceec533ef1");
pub const CLSID_UPnPService = &CLSID_UPnPService_Value;

const CLSID_UPnPDescriptionDocument_Value = Guid.initString("1d8a9b47-3a28-4ce2-8a4b-bd34e45bceeb");
pub const CLSID_UPnPDescriptionDocument = &CLSID_UPnPDescriptionDocument_Value;

const CLSID_UPnPDeviceFinderEx_Value = Guid.initString("181b54fc-380b-4a75-b3f1-4ac45e9605b0");
pub const CLSID_UPnPDeviceFinderEx = &CLSID_UPnPDeviceFinderEx_Value;

const CLSID_UPnPDescriptionDocumentEx_Value = Guid.initString("33fd0563-d81a-4393-83cc-0195b1da2f91");
pub const CLSID_UPnPDescriptionDocumentEx = &CLSID_UPnPDescriptionDocumentEx_Value;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPDeviceFinder_Value = Guid.initString("adda3d55-6f72-4319-bff9-18600a539b10");
pub const IID_IUPnPDeviceFinder = &IID_IUPnPDeviceFinder_Value;
pub const IUPnPDeviceFinder = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        FindByType: *const fn (
            self: *const IUPnPDeviceFinder,
            bstr_type_u_r_i: ?BSTR,
            dw_flags: u32,
            p_devices: ?*?*IUPnPDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAsyncFind: *const fn (
            self: *const IUPnPDeviceFinder,
            bstr_type_u_r_i: ?BSTR,
            dw_flags: u32,
            punk_device_finder_callback: ?*IUnknown,
            pl_find_data: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartAsyncFind: *const fn (
            self: *const IUPnPDeviceFinder,
            l_find_data: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncFind: *const fn (
            self: *const IUPnPDeviceFinder,
            l_find_data: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindByUDN: *const fn (
            self: *const IUPnPDeviceFinder,
            bstr_u_d_n: ?BSTR,
            p_device: ?*?*IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn findByType(self: *const T, bstr_type_u_r_i_: ?BSTR, dw_flags_: u32, p_devices_: ?*?*IUPnPDevices) HRESULT {
                return @as(*const IUPnPDeviceFinder.VTable, @ptrCast(self.vtable)).FindByType(@as(*const IUPnPDeviceFinder, @ptrCast(self)), bstr_type_u_r_i_, dw_flags_, p_devices_);
            }
            pub inline fn createAsyncFind(self: *const T, bstr_type_u_r_i_: ?BSTR, dw_flags_: u32, punk_device_finder_callback_: ?*IUnknown, pl_find_data_: ?*i32) HRESULT {
                return @as(*const IUPnPDeviceFinder.VTable, @ptrCast(self.vtable)).CreateAsyncFind(@as(*const IUPnPDeviceFinder, @ptrCast(self)), bstr_type_u_r_i_, dw_flags_, punk_device_finder_callback_, pl_find_data_);
            }
            pub inline fn startAsyncFind(self: *const T, l_find_data_: i32) HRESULT {
                return @as(*const IUPnPDeviceFinder.VTable, @ptrCast(self.vtable)).StartAsyncFind(@as(*const IUPnPDeviceFinder, @ptrCast(self)), l_find_data_);
            }
            pub inline fn cancelAsyncFind(self: *const T, l_find_data_: i32) HRESULT {
                return @as(*const IUPnPDeviceFinder.VTable, @ptrCast(self.vtable)).CancelAsyncFind(@as(*const IUPnPDeviceFinder, @ptrCast(self)), l_find_data_);
            }
            pub inline fn findByUDN(self: *const T, bstr_u_d_n_: ?BSTR, p_device_: ?*?*IUPnPDevice) HRESULT {
                return @as(*const IUPnPDeviceFinder.VTable, @ptrCast(self.vtable)).FindByUDN(@as(*const IUPnPDeviceFinder, @ptrCast(self)), bstr_u_d_n_, p_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUPnPAddressFamilyControl_Value = Guid.initString("e3bf6178-694e-459f-a5a6-191ea0ffa1c7");
pub const IID_IUPnPAddressFamilyControl = &IID_IUPnPAddressFamilyControl_Value;
pub const IUPnPAddressFamilyControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAddressFamily: *const fn (
            self: *const IUPnPAddressFamilyControl,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAddressFamily: *const fn (
            self: *const IUPnPAddressFamilyControl,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAddressFamily(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const IUPnPAddressFamilyControl.VTable, @ptrCast(self.vtable)).SetAddressFamily(@as(*const IUPnPAddressFamilyControl, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getAddressFamily(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const IUPnPAddressFamilyControl.VTable, @ptrCast(self.vtable)).GetAddressFamily(@as(*const IUPnPAddressFamilyControl, @ptrCast(self)), pdw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUPnPHttpHeaderControl_Value = Guid.initString("0405af4f-8b5c-447c-80f2-b75984a31f3c");
pub const IID_IUPnPHttpHeaderControl = &IID_IUPnPHttpHeaderControl_Value;
pub const IUPnPHttpHeaderControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddRequestHeaders: *const fn (
            self: *const IUPnPHttpHeaderControl,
            bstr_http_headers: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addRequestHeaders(self: *const T, bstr_http_headers_: ?BSTR) HRESULT {
                return @as(*const IUPnPHttpHeaderControl.VTable, @ptrCast(self.vtable)).AddRequestHeaders(@as(*const IUPnPHttpHeaderControl, @ptrCast(self)), bstr_http_headers_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPDeviceFinderCallback_Value = Guid.initString("415a984a-88b3-49f3-92af-0508bedf0d6c");
pub const IID_IUPnPDeviceFinderCallback = &IID_IUPnPDeviceFinderCallback_Value;
pub const IUPnPDeviceFinderCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeviceAdded: *const fn (
            self: *const IUPnPDeviceFinderCallback,
            l_find_data: i32,
            p_device: ?*IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceRemoved: *const fn (
            self: *const IUPnPDeviceFinderCallback,
            l_find_data: i32,
            bstr_u_d_n: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchComplete: *const fn (
            self: *const IUPnPDeviceFinderCallback,
            l_find_data: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn deviceAdded(self: *const T, l_find_data_: i32, p_device_: ?*IUPnPDevice) HRESULT {
                return @as(*const IUPnPDeviceFinderCallback.VTable, @ptrCast(self.vtable)).DeviceAdded(@as(*const IUPnPDeviceFinderCallback, @ptrCast(self)), l_find_data_, p_device_);
            }
            pub inline fn deviceRemoved(self: *const T, l_find_data_: i32, bstr_u_d_n_: ?BSTR) HRESULT {
                return @as(*const IUPnPDeviceFinderCallback.VTable, @ptrCast(self.vtable)).DeviceRemoved(@as(*const IUPnPDeviceFinderCallback, @ptrCast(self)), l_find_data_, bstr_u_d_n_);
            }
            pub inline fn searchComplete(self: *const T, l_find_data_: i32) HRESULT {
                return @as(*const IUPnPDeviceFinderCallback.VTable, @ptrCast(self.vtable)).SearchComplete(@as(*const IUPnPDeviceFinderCallback, @ptrCast(self)), l_find_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPServices_Value = Guid.initString("3f8c8e9e-9a7a-4dc8-bc41-ff31fa374956");
pub const IID_IUPnPServices = &IID_IUPnPServices_Value;
pub const IUPnPServices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPServices,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPServices,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPServices,
            bstr_service_id: ?BSTR,
            pp_service: ?*?*IUPnPService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IUPnPServices.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IUPnPServices, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IUPnPServices.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IUPnPServices, @ptrCast(self)), ppunk_);
            }
            pub inline fn getItem(self: *const T, bstr_service_id_: ?BSTR, pp_service_: ?*?*IUPnPService) HRESULT {
                return @as(*const IUPnPServices.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IUPnPServices, @ptrCast(self)), bstr_service_id_, pp_service_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPService_Value = Guid.initString("a295019c-dc65-47dd-90dc-7fe918a1ab44");
pub const IID_IUPnPService = &IID_IUPnPService_Value;
pub const IUPnPService = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        QueryStateVariable: *const fn (
            self: *const IUPnPService,
            bstr_variable_name: ?BSTR,
            p_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeAction: *const fn (
            self: *const IUPnPService,
            bstr_action_name: ?BSTR,
            v_in_action_args: VARIANT,
            pv_out_action_args: ?*VARIANT,
            pv_ret_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceTypeIdentifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPService,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCallback: *const fn (
            self: *const IUPnPService,
            p_unk_callback: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPService,
            pbstr_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastTransportStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPService,
            pl_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn queryStateVariable(self: *const T, bstr_variable_name_: ?BSTR, p_value_: ?*VARIANT) HRESULT {
                return @as(*const IUPnPService.VTable, @ptrCast(self.vtable)).QueryStateVariable(@as(*const IUPnPService, @ptrCast(self)), bstr_variable_name_, p_value_);
            }
            pub inline fn invokeAction(self: *const T, bstr_action_name_: ?BSTR, v_in_action_args_: VARIANT, pv_out_action_args_: ?*VARIANT, pv_ret_val_: ?*VARIANT) HRESULT {
                return @as(*const IUPnPService.VTable, @ptrCast(self.vtable)).InvokeAction(@as(*const IUPnPService, @ptrCast(self)), bstr_action_name_, v_in_action_args_, pv_out_action_args_, pv_ret_val_);
            }
            pub inline fn getServiceTypeIdentifier(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPService.VTable, @ptrCast(self.vtable)).get_ServiceTypeIdentifier(@as(*const IUPnPService, @ptrCast(self)), p_val_);
            }
            pub inline fn addCallback(self: *const T, p_unk_callback_: ?*IUnknown) HRESULT {
                return @as(*const IUPnPService.VTable, @ptrCast(self.vtable)).AddCallback(@as(*const IUPnPService, @ptrCast(self)), p_unk_callback_);
            }
            pub inline fn getId(self: *const T, pbstr_id_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPService.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IUPnPService, @ptrCast(self)), pbstr_id_);
            }
            pub inline fn getLastTransportStatus(self: *const T, pl_value_: ?*i32) HRESULT {
                return @as(*const IUPnPService.VTable, @ptrCast(self.vtable)).get_LastTransportStatus(@as(*const IUPnPService, @ptrCast(self)), pl_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUPnPAsyncResult_Value = Guid.initString("4d65fd08-d13e-4274-9c8b-dd8d028c8644");
pub const IID_IUPnPAsyncResult = &IID_IUPnPAsyncResult_Value;
pub const IUPnPAsyncResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AsyncOperationComplete: *const fn (
            self: *const IUPnPAsyncResult,
            ull_request_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn asyncOperationComplete(self: *const T, ull_request_i_d_: u64) HRESULT {
                return @as(*const IUPnPAsyncResult.VTable, @ptrCast(self.vtable)).AsyncOperationComplete(@as(*const IUPnPAsyncResult, @ptrCast(self)), ull_request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUPnPServiceAsync_Value = Guid.initString("098bdaf5-5ec1-49e7-a260-b3a11dd8680c");
pub const IID_IUPnPServiceAsync = &IID_IUPnPServiceAsync_Value;
pub const IUPnPServiceAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginInvokeAction: *const fn (
            self: *const IUPnPServiceAsync,
            bstr_action_name: ?BSTR,
            v_in_action_args: VARIANT,
            p_async_result: ?*IUPnPAsyncResult,
            pull_request_i_d: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndInvokeAction: *const fn (
            self: *const IUPnPServiceAsync,
            ull_request_i_d: u64,
            pv_out_action_args: ?*VARIANT,
            pv_ret_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginQueryStateVariable: *const fn (
            self: *const IUPnPServiceAsync,
            bstr_variable_name: ?BSTR,
            p_async_result: ?*IUPnPAsyncResult,
            pull_request_i_d: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndQueryStateVariable: *const fn (
            self: *const IUPnPServiceAsync,
            ull_request_i_d: u64,
            p_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginSubscribeToEvents: *const fn (
            self: *const IUPnPServiceAsync,
            p_unk_callback: ?*IUnknown,
            p_async_result: ?*IUPnPAsyncResult,
            pull_request_i_d: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSubscribeToEvents: *const fn (
            self: *const IUPnPServiceAsync,
            ull_request_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginSCPDDownload: *const fn (
            self: *const IUPnPServiceAsync,
            p_async_result: ?*IUPnPAsyncResult,
            pull_request_i_d: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSCPDDownload: *const fn (
            self: *const IUPnPServiceAsync,
            ull_request_i_d: u64,
            pbstr_s_c_p_d_doc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncOperation: *const fn (
            self: *const IUPnPServiceAsync,
            ull_request_i_d: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginInvokeAction(self: *const T, bstr_action_name_: ?BSTR, v_in_action_args_: VARIANT, p_async_result_: ?*IUPnPAsyncResult, pull_request_i_d_: ?*u64) HRESULT {
                return @as(*const IUPnPServiceAsync.VTable, @ptrCast(self.vtable)).BeginInvokeAction(@as(*const IUPnPServiceAsync, @ptrCast(self)), bstr_action_name_, v_in_action_args_, p_async_result_, pull_request_i_d_);
            }
            pub inline fn endInvokeAction(self: *const T, ull_request_i_d_: u64, pv_out_action_args_: ?*VARIANT, pv_ret_val_: ?*VARIANT) HRESULT {
                return @as(*const IUPnPServiceAsync.VTable, @ptrCast(self.vtable)).EndInvokeAction(@as(*const IUPnPServiceAsync, @ptrCast(self)), ull_request_i_d_, pv_out_action_args_, pv_ret_val_);
            }
            pub inline fn beginQueryStateVariable(self: *const T, bstr_variable_name_: ?BSTR, p_async_result_: ?*IUPnPAsyncResult, pull_request_i_d_: ?*u64) HRESULT {
                return @as(*const IUPnPServiceAsync.VTable, @ptrCast(self.vtable)).BeginQueryStateVariable(@as(*const IUPnPServiceAsync, @ptrCast(self)), bstr_variable_name_, p_async_result_, pull_request_i_d_);
            }
            pub inline fn endQueryStateVariable(self: *const T, ull_request_i_d_: u64, p_value_: ?*VARIANT) HRESULT {
                return @as(*const IUPnPServiceAsync.VTable, @ptrCast(self.vtable)).EndQueryStateVariable(@as(*const IUPnPServiceAsync, @ptrCast(self)), ull_request_i_d_, p_value_);
            }
            pub inline fn beginSubscribeToEvents(self: *const T, p_unk_callback_: ?*IUnknown, p_async_result_: ?*IUPnPAsyncResult, pull_request_i_d_: ?*u64) HRESULT {
                return @as(*const IUPnPServiceAsync.VTable, @ptrCast(self.vtable)).BeginSubscribeToEvents(@as(*const IUPnPServiceAsync, @ptrCast(self)), p_unk_callback_, p_async_result_, pull_request_i_d_);
            }
            pub inline fn endSubscribeToEvents(self: *const T, ull_request_i_d_: u64) HRESULT {
                return @as(*const IUPnPServiceAsync.VTable, @ptrCast(self.vtable)).EndSubscribeToEvents(@as(*const IUPnPServiceAsync, @ptrCast(self)), ull_request_i_d_);
            }
            pub inline fn beginSCPDDownload(self: *const T, p_async_result_: ?*IUPnPAsyncResult, pull_request_i_d_: ?*u64) HRESULT {
                return @as(*const IUPnPServiceAsync.VTable, @ptrCast(self.vtable)).BeginSCPDDownload(@as(*const IUPnPServiceAsync, @ptrCast(self)), p_async_result_, pull_request_i_d_);
            }
            pub inline fn endSCPDDownload(self: *const T, ull_request_i_d_: u64, pbstr_s_c_p_d_doc_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPServiceAsync.VTable, @ptrCast(self.vtable)).EndSCPDDownload(@as(*const IUPnPServiceAsync, @ptrCast(self)), ull_request_i_d_, pbstr_s_c_p_d_doc_);
            }
            pub inline fn cancelAsyncOperation(self: *const T, ull_request_i_d_: u64) HRESULT {
                return @as(*const IUPnPServiceAsync.VTable, @ptrCast(self.vtable)).CancelAsyncOperation(@as(*const IUPnPServiceAsync, @ptrCast(self)), ull_request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPServiceCallback_Value = Guid.initString("31fadca9-ab73-464b-b67d-5c1d0f83c8b8");
pub const IID_IUPnPServiceCallback = &IID_IUPnPServiceCallback_Value;
pub const IUPnPServiceCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StateVariableChanged: *const fn (
            self: *const IUPnPServiceCallback,
            pus: ?*IUPnPService,
            pcwsz_state_var_name: ?[*:0]const u16,
            va_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceInstanceDied: *const fn (
            self: *const IUPnPServiceCallback,
            pus: ?*IUPnPService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn stateVariableChanged(self: *const T, pus_: ?*IUPnPService, pcwsz_state_var_name_: ?[*:0]const u16, va_value_: VARIANT) HRESULT {
                return @as(*const IUPnPServiceCallback.VTable, @ptrCast(self.vtable)).StateVariableChanged(@as(*const IUPnPServiceCallback, @ptrCast(self)), pus_, pcwsz_state_var_name_, va_value_);
            }
            pub inline fn serviceInstanceDied(self: *const T, pus_: ?*IUPnPService) HRESULT {
                return @as(*const IUPnPServiceCallback.VTable, @ptrCast(self.vtable)).ServiceInstanceDied(@as(*const IUPnPServiceCallback, @ptrCast(self)), pus_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUPnPServiceEnumProperty_Value = Guid.initString("38873b37-91bb-49f4-b249-2e8efbb8a816");
pub const IID_IUPnPServiceEnumProperty = &IID_IUPnPServiceEnumProperty_Value;
pub const IUPnPServiceEnumProperty = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetServiceEnumProperty: *const fn (
            self: *const IUPnPServiceEnumProperty,
            dw_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setServiceEnumProperty(self: *const T, dw_mask_: u32) HRESULT {
                return @as(*const IUPnPServiceEnumProperty.VTable, @ptrCast(self.vtable)).SetServiceEnumProperty(@as(*const IUPnPServiceEnumProperty, @ptrCast(self)), dw_mask_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUPnPServiceDocumentAccess_Value = Guid.initString("21905529-0a5e-4589-825d-7e6d87ea6998");
pub const IID_IUPnPServiceDocumentAccess = &IID_IUPnPServiceDocumentAccess_Value;
pub const IUPnPServiceDocumentAccess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDocumentURL: *const fn (
            self: *const IUPnPServiceDocumentAccess,
            pbstr_doc_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocument: *const fn (
            self: *const IUPnPServiceDocumentAccess,
            pbstr_doc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDocumentURL(self: *const T, pbstr_doc_url_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPServiceDocumentAccess.VTable, @ptrCast(self.vtable)).GetDocumentURL(@as(*const IUPnPServiceDocumentAccess, @ptrCast(self)), pbstr_doc_url_);
            }
            pub inline fn getDocument(self: *const T, pbstr_doc_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPServiceDocumentAccess.VTable, @ptrCast(self.vtable)).GetDocument(@as(*const IUPnPServiceDocumentAccess, @ptrCast(self)), pbstr_doc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPDevices_Value = Guid.initString("fdbc0c73-bda3-4c66-ac4f-f2d96fdad68c");
pub const IID_IUPnPDevices = &IID_IUPnPDevices_Value;
pub const IUPnPDevices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevices,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevices,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevices,
            bstr_u_d_n: ?BSTR,
            pp_device: ?*?*IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IUPnPDevices.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IUPnPDevices, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IUPnPDevices.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IUPnPDevices, @ptrCast(self)), ppunk_);
            }
            pub inline fn getItem(self: *const T, bstr_u_d_n_: ?BSTR, pp_device_: ?*?*IUPnPDevice) HRESULT {
                return @as(*const IUPnPDevices.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IUPnPDevices, @ptrCast(self)), bstr_u_d_n_, pp_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPDevice_Value = Guid.initString("3d44d0d1-98c9-4889-acd1-f9d674bf2221");
pub const IID_IUPnPDevice = &IID_IUPnPDevice_Value;
pub const IUPnPDevice = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsRootDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pvarb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            ppud_root_device: ?*?*IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            ppud_device_parent: ?*?*IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HasChildren: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pvarb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Children: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            ppud_children: ?*?*IUPnPDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UniqueDeviceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PresentationURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ManufacturerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ManufacturerURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModelName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModelNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModelURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UPC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SerialNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IconURL: *const fn (
            self: *const IUPnPDevice,
            bstr_encoding_format: ?BSTR,
            l_size_x: i32,
            l_size_y: i32,
            l_bit_depth: i32,
            pbstr_icon_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Services: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDevice,
            ppus_services: ?*?*IUPnPServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIsRootDevice(self: *const T, pvarb_: ?*i16) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_IsRootDevice(@as(*const IUPnPDevice, @ptrCast(self)), pvarb_);
            }
            pub inline fn getRootDevice(self: *const T, ppud_root_device_: ?*?*IUPnPDevice) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_RootDevice(@as(*const IUPnPDevice, @ptrCast(self)), ppud_root_device_);
            }
            pub inline fn getParentDevice(self: *const T, ppud_device_parent_: ?*?*IUPnPDevice) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_ParentDevice(@as(*const IUPnPDevice, @ptrCast(self)), ppud_device_parent_);
            }
            pub inline fn getHasChildren(self: *const T, pvarb_: ?*i16) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_HasChildren(@as(*const IUPnPDevice, @ptrCast(self)), pvarb_);
            }
            pub inline fn getChildren(self: *const T, ppud_children_: ?*?*IUPnPDevices) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_Children(@as(*const IUPnPDevice, @ptrCast(self)), ppud_children_);
            }
            pub inline fn getUniqueDeviceName(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_UniqueDeviceName(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getFriendlyName(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_FriendlyName(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getType(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getPresentationURL(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_PresentationURL(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getManufacturerName(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_ManufacturerName(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getManufacturerURL(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_ManufacturerURL(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getModelName(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_ModelName(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getModelNumber(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_ModelNumber(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getDescription(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getModelURL(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_ModelURL(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getUPC(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_UPC(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn getSerialNumber(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_SerialNumber(@as(*const IUPnPDevice, @ptrCast(self)), pbstr_);
            }
            pub inline fn iconURL(self: *const T, bstr_encoding_format_: ?BSTR, l_size_x_: i32, l_size_y_: i32, l_bit_depth_: i32, pbstr_icon_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).IconURL(@as(*const IUPnPDevice, @ptrCast(self)), bstr_encoding_format_, l_size_x_, l_size_y_, l_bit_depth_, pbstr_icon_u_r_l_);
            }
            pub inline fn getServices(self: *const T, ppus_services_: ?*?*IUPnPServices) HRESULT {
                return @as(*const IUPnPDevice.VTable, @ptrCast(self.vtable)).get_Services(@as(*const IUPnPDevice, @ptrCast(self)), ppus_services_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPDeviceDocumentAccess_Value = Guid.initString("e7772804-3287-418e-9072-cf2b47238981");
pub const IID_IUPnPDeviceDocumentAccess = &IID_IUPnPDeviceDocumentAccess_Value;
pub const IUPnPDeviceDocumentAccess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDocumentURL: *const fn (
            self: *const IUPnPDeviceDocumentAccess,
            pbstr_document: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDocumentURL(self: *const T, pbstr_document_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDeviceDocumentAccess.VTable, @ptrCast(self.vtable)).GetDocumentURL(@as(*const IUPnPDeviceDocumentAccess, @ptrCast(self)), pbstr_document_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUPnPDeviceDocumentAccessEx_Value = Guid.initString("c4bc4050-6178-4bd1-a4b8-6398321f3247");
pub const IID_IUPnPDeviceDocumentAccessEx = &IID_IUPnPDeviceDocumentAccessEx_Value;
pub const IUPnPDeviceDocumentAccessEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDocument: *const fn (
            self: *const IUPnPDeviceDocumentAccessEx,
            pbstr_document: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDocument(self: *const T, pbstr_document_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDeviceDocumentAccessEx.VTable, @ptrCast(self.vtable)).GetDocument(@as(*const IUPnPDeviceDocumentAccessEx, @ptrCast(self)), pbstr_document_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPDescriptionDocument_Value = Guid.initString("11d1c1b2-7daa-4c9e-9595-7f82ed206d1e");
pub const IID_IUPnPDescriptionDocument = &IID_IUPnPDescriptionDocument_Value;
pub const IUPnPDescriptionDocument = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReadyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDescriptionDocument,
            pl_ready_state: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: *const fn (
            self: *const IUPnPDescriptionDocument,
            bstr_url: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadAsync: *const fn (
            self: *const IUPnPDescriptionDocument,
            bstr_url: ?BSTR,
            punk_callback: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoadResult: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPDescriptionDocument,
            phr_error: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const IUPnPDescriptionDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RootDevice: *const fn (
            self: *const IUPnPDescriptionDocument,
            ppud_root_device: ?*?*IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceByUDN: *const fn (
            self: *const IUPnPDescriptionDocument,
            bstr_u_d_n: ?BSTR,
            ppud_device: ?*?*IUPnPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getReadyState(self: *const T, pl_ready_state_: ?*i32) HRESULT {
                return @as(*const IUPnPDescriptionDocument.VTable, @ptrCast(self.vtable)).get_ReadyState(@as(*const IUPnPDescriptionDocument, @ptrCast(self)), pl_ready_state_);
            }
            pub inline fn load(self: *const T, bstr_url_: ?BSTR) HRESULT {
                return @as(*const IUPnPDescriptionDocument.VTable, @ptrCast(self.vtable)).Load(@as(*const IUPnPDescriptionDocument, @ptrCast(self)), bstr_url_);
            }
            pub inline fn loadAsync(self: *const T, bstr_url_: ?BSTR, punk_callback_: ?*IUnknown) HRESULT {
                return @as(*const IUPnPDescriptionDocument.VTable, @ptrCast(self.vtable)).LoadAsync(@as(*const IUPnPDescriptionDocument, @ptrCast(self)), bstr_url_, punk_callback_);
            }
            pub inline fn getLoadResult(self: *const T, phr_error_: ?*i32) HRESULT {
                return @as(*const IUPnPDescriptionDocument.VTable, @ptrCast(self.vtable)).get_LoadResult(@as(*const IUPnPDescriptionDocument, @ptrCast(self)), phr_error_);
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const IUPnPDescriptionDocument.VTable, @ptrCast(self.vtable)).Abort(@as(*const IUPnPDescriptionDocument, @ptrCast(self)));
            }
            pub inline fn rootDevice(self: *const T, ppud_root_device_: ?*?*IUPnPDevice) HRESULT {
                return @as(*const IUPnPDescriptionDocument.VTable, @ptrCast(self.vtable)).RootDevice(@as(*const IUPnPDescriptionDocument, @ptrCast(self)), ppud_root_device_);
            }
            pub inline fn deviceByUDN(self: *const T, bstr_u_d_n_: ?BSTR, ppud_device_: ?*?*IUPnPDevice) HRESULT {
                return @as(*const IUPnPDescriptionDocument.VTable, @ptrCast(self.vtable)).DeviceByUDN(@as(*const IUPnPDescriptionDocument, @ptrCast(self)), bstr_u_d_n_, ppud_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUPnPDeviceFinderAddCallbackWithInterface_Value = Guid.initString("983dfc0b-1796-44df-8975-ca545b620ee5");
pub const IID_IUPnPDeviceFinderAddCallbackWithInterface = &IID_IUPnPDeviceFinderAddCallbackWithInterface_Value;
pub const IUPnPDeviceFinderAddCallbackWithInterface = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeviceAddedWithInterface: *const fn (
            self: *const IUPnPDeviceFinderAddCallbackWithInterface,
            l_find_data: i32,
            p_device: ?*IUPnPDevice,
            pguid_interface: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn deviceAddedWithInterface(self: *const T, l_find_data_: i32, p_device_: ?*IUPnPDevice, pguid_interface_: ?*Guid) HRESULT {
                return @as(*const IUPnPDeviceFinderAddCallbackWithInterface.VTable, @ptrCast(self.vtable)).DeviceAddedWithInterface(@as(*const IUPnPDeviceFinderAddCallbackWithInterface, @ptrCast(self)), l_find_data_, p_device_, pguid_interface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPDescriptionDocumentCallback_Value = Guid.initString("77394c69-5486-40d6-9bc3-4991983e02da");
pub const IID_IUPnPDescriptionDocumentCallback = &IID_IUPnPDescriptionDocumentCallback_Value;
pub const IUPnPDescriptionDocumentCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadComplete: *const fn (
            self: *const IUPnPDescriptionDocumentCallback,
            hr_load_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn loadComplete(self: *const T, hr_load_result_: HRESULT) HRESULT {
                return @as(*const IUPnPDescriptionDocumentCallback.VTable, @ptrCast(self.vtable)).LoadComplete(@as(*const IUPnPDescriptionDocumentCallback, @ptrCast(self)), hr_load_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_UPnPRegistrar_Value = Guid.initString("204810b9-73b2-11d4-bf42-00b0d0118b56");
pub const CLSID_UPnPRegistrar = &CLSID_UPnPRegistrar_Value;

const CLSID_UPnPRemoteEndpointInfo_Value = Guid.initString("2e5e84e9-4049-4244-b728-2d24227157c7");
pub const CLSID_UPnPRemoteEndpointInfo = &CLSID_UPnPRemoteEndpointInfo_Value;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPEventSink_Value = Guid.initString("204810b4-73b2-11d4-bf42-00b0d0118b56");
pub const IID_IUPnPEventSink = &IID_IUPnPEventSink_Value;
pub const IUPnPEventSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStateChanged: *const fn (
            self: *const IUPnPEventSink,
            c_changes: u32,
            rgdispid_changes: [*]i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStateChangedSafe: *const fn (
            self: *const IUPnPEventSink,
            varsadispid_changes: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onStateChanged(self: *const T, c_changes_: u32, rgdispid_changes_: [*]i32) HRESULT {
                return @as(*const IUPnPEventSink.VTable, @ptrCast(self.vtable)).OnStateChanged(@as(*const IUPnPEventSink, @ptrCast(self)), c_changes_, rgdispid_changes_);
            }
            pub inline fn onStateChangedSafe(self: *const T, varsadispid_changes_: VARIANT) HRESULT {
                return @as(*const IUPnPEventSink.VTable, @ptrCast(self.vtable)).OnStateChangedSafe(@as(*const IUPnPEventSink, @ptrCast(self)), varsadispid_changes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPEventSource_Value = Guid.initString("204810b5-73b2-11d4-bf42-00b0d0118b56");
pub const IID_IUPnPEventSource = &IID_IUPnPEventSource_Value;
pub const IUPnPEventSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn (
            self: *const IUPnPEventSource,
            pes_subscriber: ?*IUPnPEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const IUPnPEventSource,
            pes_subscriber: ?*IUPnPEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn advise(self: *const T, pes_subscriber_: ?*IUPnPEventSink) HRESULT {
                return @as(*const IUPnPEventSource.VTable, @ptrCast(self.vtable)).Advise(@as(*const IUPnPEventSource, @ptrCast(self)), pes_subscriber_);
            }
            pub inline fn unadvise(self: *const T, pes_subscriber_: ?*IUPnPEventSink) HRESULT {
                return @as(*const IUPnPEventSource.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const IUPnPEventSource, @ptrCast(self)), pes_subscriber_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPRegistrar_Value = Guid.initString("204810b6-73b2-11d4-bf42-00b0d0118b56");
pub const IID_IUPnPRegistrar = &IID_IUPnPRegistrar_Value;
pub const IUPnPRegistrar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterDevice: *const fn (
            self: *const IUPnPRegistrar,
            bstr_x_m_l_desc: ?BSTR,
            bstr_prog_i_d_device_control_class: ?BSTR,
            bstr_init_string: ?BSTR,
            bstr_container_id: ?BSTR,
            bstr_resource_path: ?BSTR,
            n_life_time: i32,
            pbstr_device_identifier: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterRunningDevice: *const fn (
            self: *const IUPnPRegistrar,
            bstr_x_m_l_desc: ?BSTR,
            punk_device_control: ?*IUnknown,
            bstr_init_string: ?BSTR,
            bstr_resource_path: ?BSTR,
            n_life_time: i32,
            pbstr_device_identifier: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterDeviceProvider: *const fn (
            self: *const IUPnPRegistrar,
            bstr_provider_name: ?BSTR,
            bstr_prog_i_d_provider_class: ?BSTR,
            bstr_init_string: ?BSTR,
            bstr_container_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUniqueDeviceName: *const fn (
            self: *const IUPnPRegistrar,
            bstr_device_identifier: ?BSTR,
            bstr_template_u_d_n: ?BSTR,
            pbstr_u_d_n: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterDevice: *const fn (
            self: *const IUPnPRegistrar,
            bstr_device_identifier: ?BSTR,
            f_permanent: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterDeviceProvider: *const fn (
            self: *const IUPnPRegistrar,
            bstr_provider_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerDevice(self: *const T, bstr_x_m_l_desc_: ?BSTR, bstr_prog_i_d_device_control_class_: ?BSTR, bstr_init_string_: ?BSTR, bstr_container_id_: ?BSTR, bstr_resource_path_: ?BSTR, n_life_time_: i32, pbstr_device_identifier_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPRegistrar.VTable, @ptrCast(self.vtable)).RegisterDevice(@as(*const IUPnPRegistrar, @ptrCast(self)), bstr_x_m_l_desc_, bstr_prog_i_d_device_control_class_, bstr_init_string_, bstr_container_id_, bstr_resource_path_, n_life_time_, pbstr_device_identifier_);
            }
            pub inline fn registerRunningDevice(self: *const T, bstr_x_m_l_desc_: ?BSTR, punk_device_control_: ?*IUnknown, bstr_init_string_: ?BSTR, bstr_resource_path_: ?BSTR, n_life_time_: i32, pbstr_device_identifier_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPRegistrar.VTable, @ptrCast(self.vtable)).RegisterRunningDevice(@as(*const IUPnPRegistrar, @ptrCast(self)), bstr_x_m_l_desc_, punk_device_control_, bstr_init_string_, bstr_resource_path_, n_life_time_, pbstr_device_identifier_);
            }
            pub inline fn registerDeviceProvider(self: *const T, bstr_provider_name_: ?BSTR, bstr_prog_i_d_provider_class_: ?BSTR, bstr_init_string_: ?BSTR, bstr_container_id_: ?BSTR) HRESULT {
                return @as(*const IUPnPRegistrar.VTable, @ptrCast(self.vtable)).RegisterDeviceProvider(@as(*const IUPnPRegistrar, @ptrCast(self)), bstr_provider_name_, bstr_prog_i_d_provider_class_, bstr_init_string_, bstr_container_id_);
            }
            pub inline fn getUniqueDeviceName(self: *const T, bstr_device_identifier_: ?BSTR, bstr_template_u_d_n_: ?BSTR, pbstr_u_d_n_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPRegistrar.VTable, @ptrCast(self.vtable)).GetUniqueDeviceName(@as(*const IUPnPRegistrar, @ptrCast(self)), bstr_device_identifier_, bstr_template_u_d_n_, pbstr_u_d_n_);
            }
            pub inline fn unregisterDevice(self: *const T, bstr_device_identifier_: ?BSTR, f_permanent_: BOOL) HRESULT {
                return @as(*const IUPnPRegistrar.VTable, @ptrCast(self.vtable)).UnregisterDevice(@as(*const IUPnPRegistrar, @ptrCast(self)), bstr_device_identifier_, f_permanent_);
            }
            pub inline fn unregisterDeviceProvider(self: *const T, bstr_provider_name_: ?BSTR) HRESULT {
                return @as(*const IUPnPRegistrar.VTable, @ptrCast(self.vtable)).UnregisterDeviceProvider(@as(*const IUPnPRegistrar, @ptrCast(self)), bstr_provider_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPReregistrar_Value = Guid.initString("204810b7-73b2-11d4-bf42-00b0d0118b56");
pub const IID_IUPnPReregistrar = &IID_IUPnPReregistrar_Value;
pub const IUPnPReregistrar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReregisterDevice: *const fn (
            self: *const IUPnPReregistrar,
            bstr_device_identifier: ?BSTR,
            bstr_x_m_l_desc: ?BSTR,
            bstr_prog_i_d_device_control_class: ?BSTR,
            bstr_init_string: ?BSTR,
            bstr_container_id: ?BSTR,
            bstr_resource_path: ?BSTR,
            n_life_time: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReregisterRunningDevice: *const fn (
            self: *const IUPnPReregistrar,
            bstr_device_identifier: ?BSTR,
            bstr_x_m_l_desc: ?BSTR,
            punk_device_control: ?*IUnknown,
            bstr_init_string: ?BSTR,
            bstr_resource_path: ?BSTR,
            n_life_time: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reregisterDevice(self: *const T, bstr_device_identifier_: ?BSTR, bstr_x_m_l_desc_: ?BSTR, bstr_prog_i_d_device_control_class_: ?BSTR, bstr_init_string_: ?BSTR, bstr_container_id_: ?BSTR, bstr_resource_path_: ?BSTR, n_life_time_: i32) HRESULT {
                return @as(*const IUPnPReregistrar.VTable, @ptrCast(self.vtable)).ReregisterDevice(@as(*const IUPnPReregistrar, @ptrCast(self)), bstr_device_identifier_, bstr_x_m_l_desc_, bstr_prog_i_d_device_control_class_, bstr_init_string_, bstr_container_id_, bstr_resource_path_, n_life_time_);
            }
            pub inline fn reregisterRunningDevice(self: *const T, bstr_device_identifier_: ?BSTR, bstr_x_m_l_desc_: ?BSTR, punk_device_control_: ?*IUnknown, bstr_init_string_: ?BSTR, bstr_resource_path_: ?BSTR, n_life_time_: i32) HRESULT {
                return @as(*const IUPnPReregistrar.VTable, @ptrCast(self.vtable)).ReregisterRunningDevice(@as(*const IUPnPReregistrar, @ptrCast(self)), bstr_device_identifier_, bstr_x_m_l_desc_, punk_device_control_, bstr_init_string_, bstr_resource_path_, n_life_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPDeviceControl_Value = Guid.initString("204810ba-73b2-11d4-bf42-00b0d0118b56");
pub const IID_IUPnPDeviceControl = &IID_IUPnPDeviceControl_Value;
pub const IUPnPDeviceControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IUPnPDeviceControl,
            bstr_x_m_l_desc: ?BSTR,
            bstr_device_identifier: ?BSTR,
            bstr_init_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceObject: *const fn (
            self: *const IUPnPDeviceControl,
            bstr_u_d_n: ?BSTR,
            bstr_service_id: ?BSTR,
            ppdisp_service: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, bstr_x_m_l_desc_: ?BSTR, bstr_device_identifier_: ?BSTR, bstr_init_string_: ?BSTR) HRESULT {
                return @as(*const IUPnPDeviceControl.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IUPnPDeviceControl, @ptrCast(self)), bstr_x_m_l_desc_, bstr_device_identifier_, bstr_init_string_);
            }
            pub inline fn getServiceObject(self: *const T, bstr_u_d_n_: ?BSTR, bstr_service_id_: ?BSTR, ppdisp_service_: ?*?*IDispatch) HRESULT {
                return @as(*const IUPnPDeviceControl.VTable, @ptrCast(self.vtable)).GetServiceObject(@as(*const IUPnPDeviceControl, @ptrCast(self)), bstr_u_d_n_, bstr_service_id_, ppdisp_service_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IUPnPDeviceControlHttpHeaders_Value = Guid.initString("204810bb-73b2-11d4-bf42-00b0d0118b56");
pub const IID_IUPnPDeviceControlHttpHeaders = &IID_IUPnPDeviceControlHttpHeaders_Value;
pub const IUPnPDeviceControlHttpHeaders = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAdditionalResponseHeaders: *const fn (
            self: *const IUPnPDeviceControlHttpHeaders,
            bstr_http_response_headers: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAdditionalResponseHeaders(self: *const T, bstr_http_response_headers_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPDeviceControlHttpHeaders.VTable, @ptrCast(self.vtable)).GetAdditionalResponseHeaders(@as(*const IUPnPDeviceControlHttpHeaders, @ptrCast(self)), bstr_http_response_headers_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPDeviceProvider_Value = Guid.initString("204810b8-73b2-11d4-bf42-00b0d0118b56");
pub const IID_IUPnPDeviceProvider = &IID_IUPnPDeviceProvider_Value;
pub const IUPnPDeviceProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Start: *const fn (
            self: *const IUPnPDeviceProvider,
            bstr_init_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IUPnPDeviceProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn start(self: *const T, bstr_init_string_: ?BSTR) HRESULT {
                return @as(*const IUPnPDeviceProvider.VTable, @ptrCast(self.vtable)).Start(@as(*const IUPnPDeviceProvider, @ptrCast(self)), bstr_init_string_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IUPnPDeviceProvider.VTable, @ptrCast(self.vtable)).Stop(@as(*const IUPnPDeviceProvider, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUPnPRemoteEndpointInfo_Value = Guid.initString("c92eb863-0269-4aff-9c72-75321bba2952");
pub const IID_IUPnPRemoteEndpointInfo = &IID_IUPnPRemoteEndpointInfo_Value;
pub const IUPnPRemoteEndpointInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDwordValue: *const fn (
            self: *const IUPnPRemoteEndpointInfo,
            bstr_value_name: ?BSTR,
            pdw_value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: *const fn (
            self: *const IUPnPRemoteEndpointInfo,
            bstr_value_name: ?BSTR,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGuidValue: *const fn (
            self: *const IUPnPRemoteEndpointInfo,
            bstr_value_name: ?BSTR,
            pguid_value: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDwordValue(self: *const T, bstr_value_name_: ?BSTR, pdw_value_: ?*u32) HRESULT {
                return @as(*const IUPnPRemoteEndpointInfo.VTable, @ptrCast(self.vtable)).GetDwordValue(@as(*const IUPnPRemoteEndpointInfo, @ptrCast(self)), bstr_value_name_, pdw_value_);
            }
            pub inline fn getStringValue(self: *const T, bstr_value_name_: ?BSTR, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IUPnPRemoteEndpointInfo.VTable, @ptrCast(self.vtable)).GetStringValue(@as(*const IUPnPRemoteEndpointInfo, @ptrCast(self)), bstr_value_name_, pbstr_value_);
            }
            pub inline fn getGuidValue(self: *const T, bstr_value_name_: ?BSTR, pguid_value_: ?*Guid) HRESULT {
                return @as(*const IUPnPRemoteEndpointInfo.VTable, @ptrCast(self.vtable)).GetGuidValue(@as(*const IUPnPRemoteEndpointInfo, @ptrCast(self)), bstr_value_name_, pguid_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (9)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "cfgmgr32" fn SwDeviceCreate(
    psz_enumerator_name: ?[*:0]const u16,
    psz_parent_device_instance: ?[*:0]const u16,
    p_create_info: ?*const SW_DEVICE_CREATE_INFO,
    c_property_count: u32,
    p_properties: ?[*]const DEVPROPERTY,
    p_callback: ?SW_DEVICE_CREATE_CALLBACK,
    p_context: ?*anyopaque,
    ph_sw_device: ?*isize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cfgmgr32" fn SwDeviceClose(
    h_sw_device: ?HSWDEVICE,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.1'
pub extern "cfgmgr32" fn SwDeviceSetLifetime(
    h_sw_device: ?HSWDEVICE,
    lifetime: SW_DEVICE_LIFETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "cfgmgr32" fn SwDeviceGetLifetime(
    h_sw_device: ?HSWDEVICE,
    p_lifetime: ?*SW_DEVICE_LIFETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cfgmgr32" fn SwDevicePropertySet(
    h_sw_device: ?HSWDEVICE,
    c_property_count: u32,
    p_properties: [*]const DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cfgmgr32" fn SwDeviceInterfaceRegister(
    h_sw_device: ?HSWDEVICE,
    p_interface_class_guid: ?*const Guid,
    psz_reference_string: ?[*:0]const u16,
    c_property_count: u32,
    p_properties: ?[*]const DEVPROPERTY,
    f_enabled: BOOL,
    ppsz_device_interface_id: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cfgmgr32" fn SwMemFree(
    p_mem: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cfgmgr32" fn SwDeviceInterfaceSetState(
    h_sw_device: ?HSWDEVICE,
    psz_device_interface_id: ?[*:0]const u16,
    f_enabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cfgmgr32" fn SwDeviceInterfacePropertySet(
    h_sw_device: ?HSWDEVICE,
    psz_device_interface_id: ?[*:0]const u16,
    c_property_count: u32,
    p_properties: [*]const DEVPROPERTY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const DEVPROPERTY = @import("../../devices/properties.zig").DEVPROPERTY;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IDispatch = @import("../../system/com.zig").IDispatch;
const IUnknown = @import("../../system/com.zig").IUnknown;
const PWSTR = @import("../../foundation.zig").PWSTR;
const SECURITY_DESCRIPTOR = @import("../../security.zig").SECURITY_DESCRIPTOR;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "SW_DEVICE_CREATE_CALLBACK")) {
        _ = SW_DEVICE_CREATE_CALLBACK;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
