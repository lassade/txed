//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (264)
//--------------------------------------------------------------------------------
pub const prv_DEFAULT_PREFETCH_SIZE = @as(u32, 100);
pub const FS_INITIALIZING = @as(u32, 536870912);
pub const FS_DIALING = @as(u32, 536870913);
pub const FS_TRANSMITTING = @as(u32, 536870914);
pub const FS_RECEIVING = @as(u32, 536870916);
pub const FS_COMPLETED = @as(u32, 536870920);
pub const FS_HANDLED = @as(u32, 536870928);
pub const FS_LINE_UNAVAILABLE = @as(u32, 536870944);
pub const FS_BUSY = @as(u32, 536870976);
pub const FS_NO_ANSWER = @as(u32, 536871040);
pub const FS_BAD_ADDRESS = @as(u32, 536871168);
pub const FS_NO_DIAL_TONE = @as(u32, 536871424);
pub const FS_DISCONNECTED = @as(u32, 536871936);
pub const FS_FATAL_ERROR = @as(u32, 536872960);
pub const FS_NOT_FAX_CALL = @as(u32, 536875008);
pub const FS_CALL_DELAYED = @as(u32, 536879104);
pub const FS_CALL_BLACKLISTED = @as(u32, 536887296);
pub const FS_USER_ABORT = @as(u32, 538968064);
pub const FS_ANSWERED = @as(u32, 545259520);
pub const FAXDEVRECEIVE_SIZE = @as(u32, 4096);
pub const FAXDEVREPORTSTATUS_SIZE = @as(u32, 4096);
pub const MS_FAXROUTE_PRINTING_GUID = "{aec1b37c-9af2-11d0-abf7-00c04fd91a4e}";
pub const MS_FAXROUTE_FOLDER_GUID = "{92041a90-9af2-11d0-abf7-00c04fd91a4e}";
pub const MS_FAXROUTE_EMAIL_GUID = "{6bbf7bfe-9af2-11d0-abf7-00c04fd91a4e}";
pub const FAX_ERR_START = @as(i32, 7001);
pub const FAX_ERR_SRV_OUTOFMEMORY = @as(i32, 7001);
pub const FAX_ERR_GROUP_NOT_FOUND = @as(i32, 7002);
pub const FAX_ERR_BAD_GROUP_CONFIGURATION = @as(i32, 7003);
pub const FAX_ERR_GROUP_IN_USE = @as(i32, 7004);
pub const FAX_ERR_RULE_NOT_FOUND = @as(i32, 7005);
pub const FAX_ERR_NOT_NTFS = @as(i32, 7006);
pub const FAX_ERR_DIRECTORY_IN_USE = @as(i32, 7007);
pub const FAX_ERR_FILE_ACCESS_DENIED = @as(i32, 7008);
pub const FAX_ERR_MESSAGE_NOT_FOUND = @as(i32, 7009);
pub const FAX_ERR_DEVICE_NUM_LIMIT_EXCEEDED = @as(i32, 7010);
pub const FAX_ERR_NOT_SUPPORTED_ON_THIS_SKU = @as(i32, 7011);
pub const FAX_ERR_VERSION_MISMATCH = @as(i32, 7012);
pub const FAX_ERR_RECIPIENTS_LIMIT = @as(i32, 7013);
pub const FAX_ERR_END = @as(i32, 7013);
pub const FAX_E_SRV_OUTOFMEMORY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214503));
pub const FAX_E_GROUP_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214502));
pub const FAX_E_BAD_GROUP_CONFIGURATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214501));
pub const FAX_E_GROUP_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214500));
pub const FAX_E_RULE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214499));
pub const FAX_E_NOT_NTFS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214498));
pub const FAX_E_DIRECTORY_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214497));
pub const FAX_E_FILE_ACCESS_DENIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214496));
pub const FAX_E_MESSAGE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214495));
pub const FAX_E_DEVICE_NUM_LIMIT_EXCEEDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214494));
pub const FAX_E_NOT_SUPPORTED_ON_THIS_SKU = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214493));
pub const FAX_E_VERSION_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214492));
pub const FAX_E_RECIPIENTS_LIMIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147214491));
pub const JT_UNKNOWN = @as(u32, 0);
pub const JT_SEND = @as(u32, 1);
pub const JT_RECEIVE = @as(u32, 2);
pub const JT_ROUTING = @as(u32, 3);
pub const JT_FAIL_RECEIVE = @as(u32, 4);
pub const JS_PENDING = @as(u32, 0);
pub const JS_INPROGRESS = @as(u32, 1);
pub const JS_DELETING = @as(u32, 2);
pub const JS_FAILED = @as(u32, 4);
pub const JS_PAUSED = @as(u32, 8);
pub const JS_NOLINE = @as(u32, 16);
pub const JS_RETRYING = @as(u32, 32);
pub const JS_RETRIES_EXCEEDED = @as(u32, 64);
pub const FPS_DIALING = @as(u32, 536870913);
pub const FPS_SENDING = @as(u32, 536870914);
pub const FPS_RECEIVING = @as(u32, 536870916);
pub const FPS_COMPLETED = @as(u32, 536870920);
pub const FPS_HANDLED = @as(u32, 536870928);
pub const FPS_UNAVAILABLE = @as(u32, 536870944);
pub const FPS_BUSY = @as(u32, 536870976);
pub const FPS_NO_ANSWER = @as(u32, 536871040);
pub const FPS_BAD_ADDRESS = @as(u32, 536871168);
pub const FPS_NO_DIAL_TONE = @as(u32, 536871424);
pub const FPS_DISCONNECTED = @as(u32, 536871936);
pub const FPS_FATAL_ERROR = @as(u32, 536872960);
pub const FPS_NOT_FAX_CALL = @as(u32, 536875008);
pub const FPS_CALL_DELAYED = @as(u32, 536879104);
pub const FPS_CALL_BLACKLISTED = @as(u32, 536887296);
pub const FPS_INITIALIZING = @as(u32, 536903680);
pub const FPS_OFFLINE = @as(u32, 536936448);
pub const FPS_RINGING = @as(u32, 537001984);
pub const FPS_AVAILABLE = @as(u32, 537919488);
pub const FPS_ABORTING = @as(u32, 538968064);
pub const FPS_ROUTING = @as(u32, 541065216);
pub const FPS_ANSWERED = @as(u32, 545259520);
pub const FPF_RECEIVE = @as(u32, 1);
pub const FPF_SEND = @as(u32, 2);
pub const FPF_VIRTUAL = @as(u32, 4);
pub const FEI_DIALING = @as(u32, 1);
pub const FEI_SENDING = @as(u32, 2);
pub const FEI_RECEIVING = @as(u32, 3);
pub const FEI_COMPLETED = @as(u32, 4);
pub const FEI_BUSY = @as(u32, 5);
pub const FEI_NO_ANSWER = @as(u32, 6);
pub const FEI_BAD_ADDRESS = @as(u32, 7);
pub const FEI_NO_DIAL_TONE = @as(u32, 8);
pub const FEI_DISCONNECTED = @as(u32, 9);
pub const FEI_FATAL_ERROR = @as(u32, 10);
pub const FEI_NOT_FAX_CALL = @as(u32, 11);
pub const FEI_CALL_DELAYED = @as(u32, 12);
pub const FEI_CALL_BLACKLISTED = @as(u32, 13);
pub const FEI_RINGING = @as(u32, 14);
pub const FEI_ABORTING = @as(u32, 15);
pub const FEI_ROUTING = @as(u32, 16);
pub const FEI_MODEM_POWERED_ON = @as(u32, 17);
pub const FEI_MODEM_POWERED_OFF = @as(u32, 18);
pub const FEI_IDLE = @as(u32, 19);
pub const FEI_FAXSVC_ENDED = @as(u32, 20);
pub const FEI_ANSWERED = @as(u32, 21);
pub const FEI_JOB_QUEUED = @as(u32, 22);
pub const FEI_DELETED = @as(u32, 23);
pub const FEI_INITIALIZING = @as(u32, 24);
pub const FEI_LINE_UNAVAILABLE = @as(u32, 25);
pub const FEI_HANDLED = @as(u32, 26);
pub const FEI_FAXSVC_STARTED = @as(u32, 27);
pub const FEI_NEVENTS = @as(u32, 27);
pub const FAX_JOB_SUBMIT = @as(u32, 1);
pub const FAX_JOB_QUERY = @as(u32, 2);
pub const FAX_CONFIG_QUERY = @as(u32, 4);
pub const FAX_CONFIG_SET = @as(u32, 8);
pub const FAX_PORT_QUERY = @as(u32, 16);
pub const FAX_PORT_SET = @as(u32, 32);
pub const FAX_JOB_MANAGE = @as(u32, 64);
pub const CF_MSFAXSRV_DEVICE_ID = "FAXSRV_DeviceID";
pub const CF_MSFAXSRV_FSP_GUID = "FAXSRV_FSPGuid";
pub const CF_MSFAXSRV_SERVER_NAME = "FAXSRV_ServerName";
pub const CF_MSFAXSRV_ROUTEEXT_NAME = "FAXSRV_RoutingExtName";
pub const CF_MSFAXSRV_ROUTING_METHOD_GUID = "FAXSRV_RoutingMethodGuid";
pub const STI_UNICODE = @as(u32, 1);
pub const CLSID_Sti = Guid.initString("b323f8e0-2e68-11d0-90ea-00aa0060f86c");
pub const GUID_DeviceArrivedLaunch = Guid.initString("740d9ee6-70f1-11d1-ad10-00a02438ad48");
pub const GUID_ScanImage = Guid.initString("a6c5a715-8c6e-11d2-977a-0000f87a926f");
pub const GUID_ScanPrintImage = Guid.initString("b441f425-8c6e-11d2-977a-0000f87a926f");
pub const GUID_ScanFaxImage = Guid.initString("c00eb793-8c6e-11d2-977a-0000f87a926f");
pub const GUID_STIUserDefined1 = Guid.initString("c00eb795-8c6e-11d2-977a-0000f87a926f");
pub const GUID_STIUserDefined2 = Guid.initString("c77ae9c5-8c6e-11d2-977a-0000f87a926f");
pub const GUID_STIUserDefined3 = Guid.initString("c77ae9c6-8c6e-11d2-977a-0000f87a926f");
pub const STI_VERSION_FLAG_MASK = @as(u32, 4278190080);
pub const STI_VERSION_FLAG_UNICODE = @as(u32, 16777216);
pub const STI_VERSION_REAL = @as(u32, 2);
pub const STI_VERSION_MIN_ALLOWED = @as(u32, 2);
pub const STI_VERSION = @as(u32, 2);
pub const STI_MAX_INTERNAL_NAME_LENGTH = @as(u32, 128);
pub const STI_GENCAP_NOTIFICATIONS = @as(u32, 1);
pub const STI_GENCAP_POLLING_NEEDED = @as(u32, 2);
pub const STI_GENCAP_GENERATE_ARRIVALEVENT = @as(u32, 4);
pub const STI_GENCAP_AUTO_PORTSELECT = @as(u32, 8);
pub const STI_GENCAP_WIA = @as(u32, 16);
pub const STI_GENCAP_SUBSET = @as(u32, 32);
pub const WIA_INCOMPAT_XP = @as(u32, 1);
pub const STI_HW_CONFIG_UNKNOWN = @as(u32, 1);
pub const STI_HW_CONFIG_SCSI = @as(u32, 2);
pub const STI_HW_CONFIG_USB = @as(u32, 4);
pub const STI_HW_CONFIG_SERIAL = @as(u32, 8);
pub const STI_HW_CONFIG_PARALLEL = @as(u32, 16);
pub const STI_DEVSTATUS_ONLINE_STATE = @as(u32, 1);
pub const STI_DEVSTATUS_EVENTS_STATE = @as(u32, 2);
pub const STI_ONLINESTATE_OPERATIONAL = @as(u32, 1);
pub const STI_ONLINESTATE_PENDING = @as(u32, 2);
pub const STI_ONLINESTATE_ERROR = @as(u32, 4);
pub const STI_ONLINESTATE_PAUSED = @as(u32, 8);
pub const STI_ONLINESTATE_PAPER_JAM = @as(u32, 16);
pub const STI_ONLINESTATE_PAPER_PROBLEM = @as(u32, 32);
pub const STI_ONLINESTATE_OFFLINE = @as(u32, 64);
pub const STI_ONLINESTATE_IO_ACTIVE = @as(u32, 128);
pub const STI_ONLINESTATE_BUSY = @as(u32, 256);
pub const STI_ONLINESTATE_TRANSFERRING = @as(u32, 512);
pub const STI_ONLINESTATE_INITIALIZING = @as(u32, 1024);
pub const STI_ONLINESTATE_WARMING_UP = @as(u32, 2048);
pub const STI_ONLINESTATE_USER_INTERVENTION = @as(u32, 4096);
pub const STI_ONLINESTATE_POWER_SAVE = @as(u32, 8192);
pub const STI_EVENTHANDLING_ENABLED = @as(u32, 1);
pub const STI_EVENTHANDLING_POLLING = @as(u32, 2);
pub const STI_EVENTHANDLING_PENDING = @as(u32, 4);
pub const STI_DIAGCODE_HWPRESENCE = @as(u32, 1);
pub const STI_TRACE_INFORMATION = @as(u32, 1);
pub const STI_TRACE_WARNING = @as(u32, 2);
pub const STI_TRACE_ERROR = @as(u32, 4);
pub const STI_SUBSCRIBE_FLAG_WINDOW = @as(u32, 1);
pub const STI_SUBSCRIBE_FLAG_EVENT = @as(u32, 2);
pub const MAX_NOTIFICATION_DATA = @as(u32, 64);
pub const STI_ADD_DEVICE_BROADCAST_ACTION = "Arrival";
pub const STI_REMOVE_DEVICE_BROADCAST_ACTION = "Removal";
pub const STI_ADD_DEVICE_BROADCAST_STRING = "STI\\";
pub const STI_REMOVE_DEVICE_BROADCAST_STRING = "STI\\";
pub const STI_DEVICE_CREATE_STATUS = @as(u32, 1);
pub const STI_DEVICE_CREATE_DATA = @as(u32, 2);
pub const STI_DEVICE_CREATE_BOTH = @as(u32, 3);
pub const STI_DEVICE_CREATE_MASK = @as(u32, 65535);
pub const STIEDFL_ALLDEVICES = @as(u32, 0);
pub const STIEDFL_ATTACHEDONLY = @as(u32, 1);
pub const STI_RAW_RESERVED = @as(u32, 4096);
pub const STI_OK = @as(i32, 0);
pub const STI_ERROR_NO_ERROR = @as(i32, 0);
pub const STI_NOTCONNECTED = @as(i32, 1);
pub const STI_CHANGENOEFFECT = @as(i32, 1);
pub const STIERR_OLD_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147023746));
pub const STIERR_BETA_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147023743));
pub const STIERR_BADDRIVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024777));
pub const STIERR_DEVICENOTREG = @as(i32, -2147221164);
pub const STIERR_OBJECTNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024894));
pub const STIERR_INVALID_PARAM = @as(i32, -2147024809);
pub const STIERR_NOINTERFACE = @as(i32, -2147467262);
pub const STIERR_GENERIC = @as(i32, -2147467259);
pub const STIERR_OUTOFMEMORY = @as(i32, -2147024882);
pub const STIERR_UNSUPPORTED = @as(i32, -2147467263);
pub const STIERR_NOT_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024875));
pub const STIERR_ALREADY_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147023649));
pub const STIERR_DEVICE_LOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024863));
pub const STIERR_READONLY = @as(i32, -2147024891);
pub const STIERR_NOTINITIALIZED = @as(i32, -2147024891);
pub const STIERR_NEEDS_LOCK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024738));
pub const STIERR_SHARING_VIOLATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024864));
pub const STIERR_HANDLEEXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024713));
pub const STIERR_INVALID_DEVICE_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024773));
pub const STIERR_INVALID_HW_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024883));
pub const STIERR_NOEVENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024637));
pub const STIERR_DEVICE_NOTREADY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147024875));
pub const REGSTR_VAL_TYPE_W = "Type";
pub const REGSTR_VAL_VENDOR_NAME_W = "Vendor";
pub const REGSTR_VAL_DEVICETYPE_W = "DeviceType";
pub const REGSTR_VAL_DEVICESUBTYPE_W = "DeviceSubType";
pub const REGSTR_VAL_DEV_NAME_W = "DeviceName";
pub const REGSTR_VAL_DRIVER_DESC_W = "DriverDesc";
pub const REGSTR_VAL_FRIENDLY_NAME_W = "FriendlyName";
pub const REGSTR_VAL_GENERIC_CAPS_W = "Capabilities";
pub const REGSTR_VAL_HARDWARE_W = "HardwareConfig";
pub const REGSTR_VAL_HARDWARE = "HardwareConfig";
pub const REGSTR_VAL_DEVICE_NAME_W = "DriverDesc";
pub const REGSTR_VAL_DATA_W = "DeviceData";
pub const REGSTR_VAL_GUID_W = "GUID";
pub const REGSTR_VAL_GUID = "GUID";
pub const REGSTR_VAL_LAUNCH_APPS_W = "LaunchApplications";
pub const REGSTR_VAL_LAUNCH_APPS = "LaunchApplications";
pub const REGSTR_VAL_LAUNCHABLE_W = "Launchable";
pub const REGSTR_VAL_LAUNCHABLE = "Launchable";
pub const REGSTR_VAL_SHUTDOWNDELAY_W = "ShutdownIfUnusedDelay";
pub const REGSTR_VAL_SHUTDOWNDELAY = "ShutdownIfUnusedDelay";
pub const IS_DIGITAL_CAMERA_STR = "IsDigitalCamera";
pub const IS_DIGITAL_CAMERA_VAL = @as(u32, 1);
pub const SUPPORTS_MSCPLUS_STR = "SupportsMSCPlus";
pub const SUPPORTS_MSCPLUS_VAL = @as(u32, 1);
pub const STI_DEVICE_VALUE_TWAIN_NAME = "TwainDS";
pub const STI_DEVICE_VALUE_ISIS_NAME = "ISISDriverName";
pub const STI_DEVICE_VALUE_ICM_PROFILE = "ICMProfile";
pub const STI_DEVICE_VALUE_DEFAULT_LAUNCHAPP = "DefaultLaunchApp";
pub const STI_DEVICE_VALUE_TIMEOUT = "PollTimeout";
pub const STI_DEVICE_VALUE_DISABLE_NOTIFICATIONS = "DisableNotifications";
pub const REGSTR_VAL_BAUDRATE = "BaudRate";
pub const STI_DEVICE_VALUE_TWAIN_NAME_A = "TwainDS";
pub const STI_DEVICE_VALUE_ISIS_NAME_A = "ISISDriverName";
pub const STI_DEVICE_VALUE_ICM_PROFILE_A = "ICMProfile";
pub const STI_DEVICE_VALUE_DEFAULT_LAUNCHAPP_A = "DefaultLaunchApp";
pub const STI_DEVICE_VALUE_TIMEOUT_A = "PollTimeout";
pub const STI_DEVICE_VALUE_DISABLE_NOTIFICATIONS_A = "DisableNotifications";
pub const REGSTR_VAL_BAUDRATE_A = "BaudRate";
pub const DEVPKEY_WIA_DeviceType = PROPERTYKEY{ .fmtid = Guid.initString("6bdd1fc6-810f-11d0-bec7-08002be2092f"), .pid = 2 };
pub const DEVPKEY_WIA_USDClassId = PROPERTYKEY{ .fmtid = Guid.initString("6bdd1fc6-810f-11d0-bec7-08002be2092f"), .pid = 3 };
pub const STI_USD_GENCAP_NATIVE_PUSHSUPPORT = @as(u32, 1);
pub const STI_DEVICE_CREATE_FOR_MONITOR = @as(u32, 16777216);
pub const lDEFAULT_PREFETCH_SIZE = @as(i32, 100);
pub const wcharREASSIGN_RECIPIENTS_DELIMITER = @as(u16, 59);

//--------------------------------------------------------------------------------
// Section: Types (275)
//--------------------------------------------------------------------------------
pub const FAX_ENUM_LOG_LEVELS = enum(i32) {
    NONE = 0,
    MIN = 1,
    MED = 2,
    MAX = 3,
};
pub const FAXLOG_LEVEL_NONE = FAX_ENUM_LOG_LEVELS.NONE;
pub const FAXLOG_LEVEL_MIN = FAX_ENUM_LOG_LEVELS.MIN;
pub const FAXLOG_LEVEL_MED = FAX_ENUM_LOG_LEVELS.MED;
pub const FAXLOG_LEVEL_MAX = FAX_ENUM_LOG_LEVELS.MAX;

pub const FAX_ENUM_LOG_CATEGORIES = enum(i32) {
    INIT = 1,
    OUTBOUND = 2,
    INBOUND = 3,
    UNKNOWN = 4,
};
pub const FAXLOG_CATEGORY_INIT = FAX_ENUM_LOG_CATEGORIES.INIT;
pub const FAXLOG_CATEGORY_OUTBOUND = FAX_ENUM_LOG_CATEGORIES.OUTBOUND;
pub const FAXLOG_CATEGORY_INBOUND = FAX_ENUM_LOG_CATEGORIES.INBOUND;
pub const FAXLOG_CATEGORY_UNKNOWN = FAX_ENUM_LOG_CATEGORIES.UNKNOWN;

pub const FAX_LOG_CATEGORYA = extern struct {
    Name: ?[*:0]const u8,
    Category: u32,
    Level: u32,
};

pub const FAX_LOG_CATEGORYW = extern struct {
    Name: ?[*:0]const u16,
    Category: u32,
    Level: u32,
};

pub const FAX_TIME = extern struct {
    Hour: u16,
    Minute: u16,
};

pub const FAX_CONFIGURATIONA = extern struct {
    SizeOfStruct: u32,
    Retries: u32,
    RetryDelay: u32,
    DirtyDays: u32,
    Branding: BOOL,
    UseDeviceTsid: BOOL,
    ServerCp: BOOL,
    PauseServerQueue: BOOL,
    StartCheapTime: FAX_TIME,
    StopCheapTime: FAX_TIME,
    ArchiveOutgoingFaxes: BOOL,
    ArchiveDirectory: ?[*:0]const u8,
    Reserved: ?[*:0]const u8,
};

pub const FAX_CONFIGURATIONW = extern struct {
    SizeOfStruct: u32,
    Retries: u32,
    RetryDelay: u32,
    DirtyDays: u32,
    Branding: BOOL,
    UseDeviceTsid: BOOL,
    ServerCp: BOOL,
    PauseServerQueue: BOOL,
    StartCheapTime: FAX_TIME,
    StopCheapTime: FAX_TIME,
    ArchiveOutgoingFaxes: BOOL,
    ArchiveDirectory: ?[*:0]const u16,
    Reserved: ?[*:0]const u16,
};

pub const FAX_ENUM_JOB_COMMANDS = enum(i32) {
    UNKNOWN = 0,
    DELETE = 1,
    PAUSE = 2,
    RESUME = 3,
};
pub const JC_UNKNOWN = FAX_ENUM_JOB_COMMANDS.UNKNOWN;
pub const JC_DELETE = FAX_ENUM_JOB_COMMANDS.DELETE;
pub const JC_PAUSE = FAX_ENUM_JOB_COMMANDS.PAUSE;
pub const JC_RESUME = FAX_ENUM_JOB_COMMANDS.RESUME;

pub const FAX_DEVICE_STATUSA = extern struct {
    SizeOfStruct: u32,
    CallerId: ?[*:0]const u8,
    Csid: ?[*:0]const u8,
    CurrentPage: u32,
    DeviceId: u32,
    DeviceName: ?[*:0]const u8,
    DocumentName: ?[*:0]const u8,
    JobType: u32,
    PhoneNumber: ?[*:0]const u8,
    RoutingString: ?[*:0]const u8,
    SenderName: ?[*:0]const u8,
    RecipientName: ?[*:0]const u8,
    Size: u32,
    StartTime: FILETIME,
    Status: u32,
    StatusString: ?[*:0]const u8,
    SubmittedTime: FILETIME,
    TotalPages: u32,
    Tsid: ?[*:0]const u8,
    UserName: ?[*:0]const u8,
};

pub const FAX_DEVICE_STATUSW = extern struct {
    SizeOfStruct: u32,
    CallerId: ?[*:0]const u16,
    Csid: ?[*:0]const u16,
    CurrentPage: u32,
    DeviceId: u32,
    DeviceName: ?[*:0]const u16,
    DocumentName: ?[*:0]const u16,
    JobType: u32,
    PhoneNumber: ?[*:0]const u16,
    RoutingString: ?[*:0]const u16,
    SenderName: ?[*:0]const u16,
    RecipientName: ?[*:0]const u16,
    Size: u32,
    StartTime: FILETIME,
    Status: u32,
    StatusString: ?[*:0]const u16,
    SubmittedTime: FILETIME,
    TotalPages: u32,
    Tsid: ?[*:0]const u16,
    UserName: ?[*:0]const u16,
};

pub const FAX_JOB_ENTRYA = extern struct {
    SizeOfStruct: u32,
    JobId: u32,
    UserName: ?[*:0]const u8,
    JobType: u32,
    QueueStatus: u32,
    Status: u32,
    Size: u32,
    PageCount: u32,
    RecipientNumber: ?[*:0]const u8,
    RecipientName: ?[*:0]const u8,
    Tsid: ?[*:0]const u8,
    SenderName: ?[*:0]const u8,
    SenderCompany: ?[*:0]const u8,
    SenderDept: ?[*:0]const u8,
    BillingCode: ?[*:0]const u8,
    ScheduleAction: u32,
    ScheduleTime: SYSTEMTIME,
    DeliveryReportType: u32,
    DeliveryReportAddress: ?[*:0]const u8,
    DocumentName: ?[*:0]const u8,
};

pub const FAX_JOB_ENTRYW = extern struct {
    SizeOfStruct: u32,
    JobId: u32,
    UserName: ?[*:0]const u16,
    JobType: u32,
    QueueStatus: u32,
    Status: u32,
    Size: u32,
    PageCount: u32,
    RecipientNumber: ?[*:0]const u16,
    RecipientName: ?[*:0]const u16,
    Tsid: ?[*:0]const u16,
    SenderName: ?[*:0]const u16,
    SenderCompany: ?[*:0]const u16,
    SenderDept: ?[*:0]const u16,
    BillingCode: ?[*:0]const u16,
    ScheduleAction: u32,
    ScheduleTime: SYSTEMTIME,
    DeliveryReportType: u32,
    DeliveryReportAddress: ?[*:0]const u16,
    DocumentName: ?[*:0]const u16,
};

pub const FAX_PORT_INFOA = extern struct {
    SizeOfStruct: u32,
    DeviceId: u32,
    State: u32,
    Flags: u32,
    Rings: u32,
    Priority: u32,
    DeviceName: ?[*:0]const u8,
    Tsid: ?[*:0]const u8,
    Csid: ?[*:0]const u8,
};

pub const FAX_PORT_INFOW = extern struct {
    SizeOfStruct: u32,
    DeviceId: u32,
    State: u32,
    Flags: u32,
    Rings: u32,
    Priority: u32,
    DeviceName: ?[*:0]const u16,
    Tsid: ?[*:0]const u16,
    Csid: ?[*:0]const u16,
};

pub const FAX_ROUTING_METHODA = extern struct {
    SizeOfStruct: u32,
    DeviceId: u32,
    Enabled: BOOL,
    DeviceName: ?[*:0]const u8,
    Guid: ?[*:0]const u8,
    FriendlyName: ?[*:0]const u8,
    FunctionName: ?[*:0]const u8,
    ExtensionImageName: ?[*:0]const u8,
    ExtensionFriendlyName: ?[*:0]const u8,
};

pub const FAX_ROUTING_METHODW = extern struct {
    SizeOfStruct: u32,
    DeviceId: u32,
    Enabled: BOOL,
    DeviceName: ?[*:0]const u16,
    Guid: ?[*:0]const u16,
    FriendlyName: ?[*:0]const u16,
    FunctionName: ?[*:0]const u16,
    ExtensionImageName: ?[*:0]const u16,
    ExtensionFriendlyName: ?[*:0]const u16,
};

pub const FAX_GLOBAL_ROUTING_INFOA = extern struct {
    SizeOfStruct: u32,
    Priority: u32,
    Guid: ?[*:0]const u8,
    FriendlyName: ?[*:0]const u8,
    FunctionName: ?[*:0]const u8,
    ExtensionImageName: ?[*:0]const u8,
    ExtensionFriendlyName: ?[*:0]const u8,
};

pub const FAX_GLOBAL_ROUTING_INFOW = extern struct {
    SizeOfStruct: u32,
    Priority: u32,
    Guid: ?[*:0]const u16,
    FriendlyName: ?[*:0]const u16,
    FunctionName: ?[*:0]const u16,
    ExtensionImageName: ?[*:0]const u16,
    ExtensionFriendlyName: ?[*:0]const u16,
};

pub const FAX_COVERPAGE_INFOA = extern struct {
    SizeOfStruct: u32,
    CoverPageName: ?[*:0]const u8,
    UseServerCoverPage: BOOL,
    RecName: ?[*:0]const u8,
    RecFaxNumber: ?[*:0]const u8,
    RecCompany: ?[*:0]const u8,
    RecStreetAddress: ?[*:0]const u8,
    RecCity: ?[*:0]const u8,
    RecState: ?[*:0]const u8,
    RecZip: ?[*:0]const u8,
    RecCountry: ?[*:0]const u8,
    RecTitle: ?[*:0]const u8,
    RecDepartment: ?[*:0]const u8,
    RecOfficeLocation: ?[*:0]const u8,
    RecHomePhone: ?[*:0]const u8,
    RecOfficePhone: ?[*:0]const u8,
    SdrName: ?[*:0]const u8,
    SdrFaxNumber: ?[*:0]const u8,
    SdrCompany: ?[*:0]const u8,
    SdrAddress: ?[*:0]const u8,
    SdrTitle: ?[*:0]const u8,
    SdrDepartment: ?[*:0]const u8,
    SdrOfficeLocation: ?[*:0]const u8,
    SdrHomePhone: ?[*:0]const u8,
    SdrOfficePhone: ?[*:0]const u8,
    Note: ?[*:0]const u8,
    Subject: ?[*:0]const u8,
    TimeSent: SYSTEMTIME,
    PageCount: u32,
};

pub const FAX_COVERPAGE_INFOW = extern struct {
    SizeOfStruct: u32,
    CoverPageName: ?[*:0]const u16,
    UseServerCoverPage: BOOL,
    RecName: ?[*:0]const u16,
    RecFaxNumber: ?[*:0]const u16,
    RecCompany: ?[*:0]const u16,
    RecStreetAddress: ?[*:0]const u16,
    RecCity: ?[*:0]const u16,
    RecState: ?[*:0]const u16,
    RecZip: ?[*:0]const u16,
    RecCountry: ?[*:0]const u16,
    RecTitle: ?[*:0]const u16,
    RecDepartment: ?[*:0]const u16,
    RecOfficeLocation: ?[*:0]const u16,
    RecHomePhone: ?[*:0]const u16,
    RecOfficePhone: ?[*:0]const u16,
    SdrName: ?[*:0]const u16,
    SdrFaxNumber: ?[*:0]const u16,
    SdrCompany: ?[*:0]const u16,
    SdrAddress: ?[*:0]const u16,
    SdrTitle: ?[*:0]const u16,
    SdrDepartment: ?[*:0]const u16,
    SdrOfficeLocation: ?[*:0]const u16,
    SdrHomePhone: ?[*:0]const u16,
    SdrOfficePhone: ?[*:0]const u16,
    Note: ?[*:0]const u16,
    Subject: ?[*:0]const u16,
    TimeSent: SYSTEMTIME,
    PageCount: u32,
};

pub const FAX_ENUM_JOB_SEND_ATTRIBUTES = enum(i32) {
    NOW = 0,
    SPECIFIC_TIME = 1,
    DISCOUNT_PERIOD = 2,
};
pub const JSA_NOW = FAX_ENUM_JOB_SEND_ATTRIBUTES.NOW;
pub const JSA_SPECIFIC_TIME = FAX_ENUM_JOB_SEND_ATTRIBUTES.SPECIFIC_TIME;
pub const JSA_DISCOUNT_PERIOD = FAX_ENUM_JOB_SEND_ATTRIBUTES.DISCOUNT_PERIOD;

pub const FAX_ENUM_DELIVERY_REPORT_TYPES = enum(i32) {
    NONE = 0,
    EMAIL = 1,
    INBOX = 2,
};
pub const DRT_NONE = FAX_ENUM_DELIVERY_REPORT_TYPES.NONE;
pub const DRT_EMAIL = FAX_ENUM_DELIVERY_REPORT_TYPES.EMAIL;
pub const DRT_INBOX = FAX_ENUM_DELIVERY_REPORT_TYPES.INBOX;

pub const FAX_JOB_PARAMA = extern struct {
    SizeOfStruct: u32,
    RecipientNumber: ?[*:0]const u8,
    RecipientName: ?[*:0]const u8,
    Tsid: ?[*:0]const u8,
    SenderName: ?[*:0]const u8,
    SenderCompany: ?[*:0]const u8,
    SenderDept: ?[*:0]const u8,
    BillingCode: ?[*:0]const u8,
    ScheduleAction: u32,
    ScheduleTime: SYSTEMTIME,
    DeliveryReportType: u32,
    DeliveryReportAddress: ?[*:0]const u8,
    DocumentName: ?[*:0]const u8,
    CallHandle: u32,
    Reserved: [3]usize,
};

pub const FAX_JOB_PARAMW = extern struct {
    SizeOfStruct: u32,
    RecipientNumber: ?[*:0]const u16,
    RecipientName: ?[*:0]const u16,
    Tsid: ?[*:0]const u16,
    SenderName: ?[*:0]const u16,
    SenderCompany: ?[*:0]const u16,
    SenderDept: ?[*:0]const u16,
    BillingCode: ?[*:0]const u16,
    ScheduleAction: u32,
    ScheduleTime: SYSTEMTIME,
    DeliveryReportType: u32,
    DeliveryReportAddress: ?[*:0]const u16,
    DocumentName: ?[*:0]const u16,
    CallHandle: u32,
    Reserved: [3]usize,
};

pub const FAX_EVENTA = extern struct {
    SizeOfStruct: u32,
    TimeStamp: FILETIME,
    DeviceId: u32,
    EventId: u32,
    JobId: u32,
};

pub const FAX_EVENTW = extern struct {
    SizeOfStruct: u32,
    TimeStamp: FILETIME,
    DeviceId: u32,
    EventId: u32,
    JobId: u32,
};

pub const FAX_PRINT_INFOA = extern struct {
    SizeOfStruct: u32,
    DocName: ?[*:0]const u8,
    RecipientName: ?[*:0]const u8,
    RecipientNumber: ?[*:0]const u8,
    SenderName: ?[*:0]const u8,
    SenderCompany: ?[*:0]const u8,
    SenderDept: ?[*:0]const u8,
    SenderBillingCode: ?[*:0]const u8,
    Reserved: ?[*:0]const u8,
    DrEmailAddress: ?[*:0]const u8,
    OutputFileName: ?[*:0]const u8,
};

pub const FAX_PRINT_INFOW = extern struct {
    SizeOfStruct: u32,
    DocName: ?[*:0]const u16,
    RecipientName: ?[*:0]const u16,
    RecipientNumber: ?[*:0]const u16,
    SenderName: ?[*:0]const u16,
    SenderCompany: ?[*:0]const u16,
    SenderDept: ?[*:0]const u16,
    SenderBillingCode: ?[*:0]const u16,
    Reserved: ?[*:0]const u16,
    DrEmailAddress: ?[*:0]const u16,
    OutputFileName: ?[*:0]const u16,
};

pub const FAX_CONTEXT_INFOA = extern struct {
    SizeOfStruct: u32,
    hDC: ?HDC,
    ServerName: [16]CHAR,
};

pub const FAX_CONTEXT_INFOW = extern struct {
    SizeOfStruct: u32,
    hDC: ?HDC,
    ServerName: [16]u16,
};

pub const PFAXCONNECTFAXSERVERA = *const fn (
    machine_name: ?[*:0]const u8,
    fax_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXCONNECTFAXSERVERW = *const fn (
    machine_name: ?[*:0]const u16,
    fax_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXCLOSE = *const fn (
    fax_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const FAX_ENUM_PORT_OPEN_TYPE = enum(i32) {
    QUERY = 1,
    MODIFY = 2,
};
pub const PORT_OPEN_QUERY = FAX_ENUM_PORT_OPEN_TYPE.QUERY;
pub const PORT_OPEN_MODIFY = FAX_ENUM_PORT_OPEN_TYPE.MODIFY;

pub const PFAXOPENPORT = *const fn (
    fax_handle: ?HANDLE,
    device_id: u32,
    flags: u32,
    fax_port_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXCOMPLETEJOBPARAMSA = *const fn (
    job_params: ?*?*FAX_JOB_PARAMA,
    coverpage_info: ?*?*FAX_COVERPAGE_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXCOMPLETEJOBPARAMSW = *const fn (
    job_params: ?*?*FAX_JOB_PARAMW,
    coverpage_info: ?*?*FAX_COVERPAGE_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSENDDOCUMENTA = *const fn (
    fax_handle: ?HANDLE,
    file_name: ?[*:0]const u8,
    job_params: ?*FAX_JOB_PARAMA,
    coverpage_info: ?*const FAX_COVERPAGE_INFOA,
    fax_job_id: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSENDDOCUMENTW = *const fn (
    fax_handle: ?HANDLE,
    file_name: ?[*:0]const u16,
    job_params: ?*FAX_JOB_PARAMW,
    coverpage_info: ?*const FAX_COVERPAGE_INFOW,
    fax_job_id: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAX_RECIPIENT_CALLBACKA = *const fn (
    fax_handle: ?HANDLE,
    recipient_number: u32,
    context: ?*anyopaque,
    job_params: ?*FAX_JOB_PARAMA,
    coverpage_info: ?*FAX_COVERPAGE_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAX_RECIPIENT_CALLBACKW = *const fn (
    fax_handle: ?HANDLE,
    recipient_number: u32,
    context: ?*anyopaque,
    job_params: ?*FAX_JOB_PARAMW,
    coverpage_info: ?*FAX_COVERPAGE_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSENDDOCUMENTFORBROADCASTA = *const fn (
    fax_handle: ?HANDLE,
    file_name: ?[*:0]const u8,
    fax_job_id: ?*u32,
    fax_recipient_callback: ?PFAX_RECIPIENT_CALLBACKA,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSENDDOCUMENTFORBROADCASTW = *const fn (
    fax_handle: ?HANDLE,
    file_name: ?[*:0]const u16,
    fax_job_id: ?*u32,
    fax_recipient_callback: ?PFAX_RECIPIENT_CALLBACKW,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENUMJOBSA = *const fn (
    fax_handle: ?HANDLE,
    job_entry: ?*?*FAX_JOB_ENTRYA,
    jobs_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENUMJOBSW = *const fn (
    fax_handle: ?HANDLE,
    job_entry: ?*?*FAX_JOB_ENTRYW,
    jobs_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETJOBA = *const fn (
    fax_handle: ?HANDLE,
    job_id: u32,
    job_entry: ?*?*FAX_JOB_ENTRYA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETJOBW = *const fn (
    fax_handle: ?HANDLE,
    job_id: u32,
    job_entry: ?*?*FAX_JOB_ENTRYW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETJOBA = *const fn (
    fax_handle: ?HANDLE,
    job_id: u32,
    command: u32,
    job_entry: ?*const FAX_JOB_ENTRYA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETJOBW = *const fn (
    fax_handle: ?HANDLE,
    job_id: u32,
    command: u32,
    job_entry: ?*const FAX_JOB_ENTRYW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETPAGEDATA = *const fn (
    fax_handle: ?HANDLE,
    job_id: u32,
    buffer: ?*?*u8,
    buffer_size: ?*u32,
    image_width: ?*u32,
    image_height: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETDEVICESTATUSA = *const fn (
    fax_port_handle: ?HANDLE,
    device_status: ?*?*FAX_DEVICE_STATUSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETDEVICESTATUSW = *const fn (
    fax_port_handle: ?HANDLE,
    device_status: ?*?*FAX_DEVICE_STATUSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXABORT = *const fn (
    fax_handle: ?HANDLE,
    job_id: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETCONFIGURATIONA = *const fn (
    fax_handle: ?HANDLE,
    fax_config: ?*?*FAX_CONFIGURATIONA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETCONFIGURATIONW = *const fn (
    fax_handle: ?HANDLE,
    fax_config: ?*?*FAX_CONFIGURATIONW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETCONFIGURATIONA = *const fn (
    fax_handle: ?HANDLE,
    fax_config: ?*const FAX_CONFIGURATIONA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETCONFIGURATIONW = *const fn (
    fax_handle: ?HANDLE,
    fax_config: ?*const FAX_CONFIGURATIONW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETLOGGINGCATEGORIESA = *const fn (
    fax_handle: ?HANDLE,
    categories: ?*?*FAX_LOG_CATEGORYA,
    number_categories: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETLOGGINGCATEGORIESW = *const fn (
    fax_handle: ?HANDLE,
    categories: ?*?*FAX_LOG_CATEGORYW,
    number_categories: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETLOGGINGCATEGORIESA = *const fn (
    fax_handle: ?HANDLE,
    categories: ?*const FAX_LOG_CATEGORYA,
    number_categories: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETLOGGINGCATEGORIESW = *const fn (
    fax_handle: ?HANDLE,
    categories: ?*const FAX_LOG_CATEGORYW,
    number_categories: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENUMPORTSA = *const fn (
    fax_handle: ?HANDLE,
    port_info: ?*?*FAX_PORT_INFOA,
    ports_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENUMPORTSW = *const fn (
    fax_handle: ?HANDLE,
    port_info: ?*?*FAX_PORT_INFOW,
    ports_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETPORTA = *const fn (
    fax_port_handle: ?HANDLE,
    port_info: ?*?*FAX_PORT_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETPORTW = *const fn (
    fax_port_handle: ?HANDLE,
    port_info: ?*?*FAX_PORT_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETPORTA = *const fn (
    fax_port_handle: ?HANDLE,
    port_info: ?*const FAX_PORT_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETPORTW = *const fn (
    fax_port_handle: ?HANDLE,
    port_info: ?*const FAX_PORT_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENUMROUTINGMETHODSA = *const fn (
    fax_port_handle: ?HANDLE,
    routing_method: ?*?*FAX_ROUTING_METHODA,
    methods_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENUMROUTINGMETHODSW = *const fn (
    fax_port_handle: ?HANDLE,
    routing_method: ?*?*FAX_ROUTING_METHODW,
    methods_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENABLEROUTINGMETHODA = *const fn (
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u8,
    enabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENABLEROUTINGMETHODW = *const fn (
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u16,
    enabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENUMGLOBALROUTINGINFOA = *const fn (
    fax_handle: ?HANDLE,
    routing_info: ?*?*FAX_GLOBAL_ROUTING_INFOA,
    methods_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXENUMGLOBALROUTINGINFOW = *const fn (
    fax_handle: ?HANDLE,
    routing_info: ?*?*FAX_GLOBAL_ROUTING_INFOW,
    methods_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETGLOBALROUTINGINFOA = *const fn (
    fax_port_handle: ?HANDLE,
    routing_info: ?*const FAX_GLOBAL_ROUTING_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETGLOBALROUTINGINFOW = *const fn (
    fax_port_handle: ?HANDLE,
    routing_info: ?*const FAX_GLOBAL_ROUTING_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETROUTINGINFOA = *const fn (
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u8,
    routing_info_buffer: ?*?*u8,
    routing_info_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXGETROUTINGINFOW = *const fn (
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u16,
    routing_info_buffer: ?*?*u8,
    routing_info_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETROUTINGINFOA = *const fn (
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u8,
    routing_info_buffer: ?*const u8,
    routing_info_buffer_size: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSETROUTINGINFOW = *const fn (
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u16,
    routing_info_buffer: ?*const u8,
    routing_info_buffer_size: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXINITIALIZEEVENTQUEUE = *const fn (
    fax_handle: ?HANDLE,
    completion_port: ?HANDLE,
    completion_key: usize,
    h_wnd: ?HWND,
    message_start: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXFREEBUFFER = *const fn (
    buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFAXSTARTPRINTJOBA = *const fn (
    printer_name: ?[*:0]const u8,
    print_info: ?*const FAX_PRINT_INFOA,
    fax_job_id: ?*u32,
    fax_context_info: ?*FAX_CONTEXT_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXSTARTPRINTJOBW = *const fn (
    printer_name: ?[*:0]const u16,
    print_info: ?*const FAX_PRINT_INFOW,
    fax_job_id: ?*u32,
    fax_context_info: ?*FAX_CONTEXT_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXPRINTCOVERPAGEA = *const fn (
    fax_context_info: ?*const FAX_CONTEXT_INFOA,
    cover_page_info: ?*const FAX_COVERPAGE_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXPRINTCOVERPAGEW = *const fn (
    fax_context_info: ?*const FAX_CONTEXT_INFOW,
    cover_page_info: ?*const FAX_COVERPAGE_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXREGISTERSERVICEPROVIDERW = *const fn (
    device_provider: ?[*:0]const u16,
    friendly_name: ?[*:0]const u16,
    image_name: ?[*:0]const u16,
    tsp_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXUNREGISTERSERVICEPROVIDERW = *const fn (
    device_provider: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAX_ROUTING_INSTALLATION_CALLBACKW = *const fn (
    fax_handle: ?HANDLE,
    context: ?*anyopaque,
    method_name: ?PWSTR,
    friendly_name: ?PWSTR,
    function_name: ?PWSTR,
    guid: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXREGISTERROUTINGEXTENSIONW = *const fn (
    fax_handle: ?HANDLE,
    extension_name: ?[*:0]const u16,
    friendly_name: ?[*:0]const u16,
    image_name: ?[*:0]const u16,
    call_back: ?PFAX_ROUTING_INSTALLATION_CALLBACKW,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXACCESSCHECK = *const fn (
    fax_handle: ?HANDLE,
    access_mask: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const FAX_SEND = extern struct {
    SizeOfStruct: u32,
    FileName: ?PWSTR,
    CallerName: ?PWSTR,
    CallerNumber: ?PWSTR,
    ReceiverName: ?PWSTR,
    ReceiverNumber: ?PWSTR,
    Branding: BOOL,
    CallHandle: u32,
    Reserved: [3]u32,
};

pub const FAX_RECEIVE = extern struct {
    SizeOfStruct: u32,
    FileName: ?PWSTR,
    ReceiverName: ?PWSTR,
    ReceiverNumber: ?PWSTR,
    Reserved: [4]u32,
};

pub const FAX_DEV_STATUS = extern struct {
    SizeOfStruct: u32,
    StatusId: u32,
    StringId: u32,
    PageCount: u32,
    CSI: ?PWSTR,
    CallerId: ?PWSTR,
    RoutingInfo: ?PWSTR,
    ErrorCode: u32,
    Reserved: [3]u32,
};

pub const PFAX_SERVICE_CALLBACK = *const fn (
    fax_handle: ?HANDLE,
    device_id: u32,
    param1: usize,
    param2: usize,
    param3: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAX_LINECALLBACK = *const fn (
    fax_handle: ?HANDLE,
    h_device: u32,
    dw_message: u32,
    dw_instance: usize,
    dw_param1: usize,
    dw_param2: usize,
    dw_param3: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFAX_SEND_CALLBACK = *const fn (
    fax_handle: ?HANDLE,
    call_handle: u32,
    reserved1: u32,
    reserved2: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVINITIALIZE = *const fn (
    param0: u32,
    param1: ?HANDLE,
    param2: ?*?PFAX_LINECALLBACK,
    param3: ?PFAX_SERVICE_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVVIRTUALDEVICECREATION = *const fn (
    device_count: ?*u32,
    device_name_prefix: *[128]u16,
    device_id_prefix: ?*u32,
    completion_port: ?HANDLE,
    completion_key: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVSTARTJOB = *const fn (
    param0: u32,
    param1: u32,
    param2: ?*?HANDLE,
    param3: ?HANDLE,
    param4: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVENDJOB = *const fn (
    param0: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVSEND = *const fn (
    param0: ?HANDLE,
    param1: ?*FAX_SEND,
    param2: ?PFAX_SEND_CALLBACK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVRECEIVE = *const fn (
    param0: ?HANDLE,
    param1: u32,
    param2: ?*FAX_RECEIVE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVREPORTSTATUS = *const fn (
    param0: ?HANDLE,
    param1: ?*FAX_DEV_STATUS,
    param2: u32,
    param3: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVABORTOPERATION = *const fn (
    param0: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVCONFIGURE = *const fn (
    param0: ?*?HPROPSHEETPAGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXDEVSHUTDOWN = *const fn () callconv(@import("std").os.windows.WINAPI) HRESULT;

const CLSID_FaxServer_Value = Guid.initString("cda8acb0-8cf5-4f6c-9ba2-5931d40c8cae");
pub const CLSID_FaxServer = &CLSID_FaxServer_Value;

const CLSID_FaxDeviceProviders_Value = Guid.initString("eb8fe768-875a-4f5f-82c5-03f23aac1bd7");
pub const CLSID_FaxDeviceProviders = &CLSID_FaxDeviceProviders_Value;

const CLSID_FaxDevices_Value = Guid.initString("5589e28e-23cb-4919-8808-e6101846e80d");
pub const CLSID_FaxDevices = &CLSID_FaxDevices_Value;

const CLSID_FaxInboundRouting_Value = Guid.initString("e80248ed-ad65-4218-8108-991924d4e7ed");
pub const CLSID_FaxInboundRouting = &CLSID_FaxInboundRouting_Value;

const CLSID_FaxFolders_Value = Guid.initString("c35211d7-5776-48cb-af44-c31be3b2cfe5");
pub const CLSID_FaxFolders = &CLSID_FaxFolders_Value;

const CLSID_FaxLoggingOptions_Value = Guid.initString("1bf9eea6-ece0-4785-a18b-de56e9eef96a");
pub const CLSID_FaxLoggingOptions = &CLSID_FaxLoggingOptions_Value;

const CLSID_FaxActivity_Value = Guid.initString("cfef5d0e-e84d-462e-aabb-87d31eb04fef");
pub const CLSID_FaxActivity = &CLSID_FaxActivity_Value;

const CLSID_FaxOutboundRouting_Value = Guid.initString("c81b385e-b869-4afd-86c0-616498ed9be2");
pub const CLSID_FaxOutboundRouting = &CLSID_FaxOutboundRouting_Value;

const CLSID_FaxReceiptOptions_Value = Guid.initString("6982487b-227b-4c96-a61c-248348b05ab6");
pub const CLSID_FaxReceiptOptions = &CLSID_FaxReceiptOptions_Value;

const CLSID_FaxSecurity_Value = Guid.initString("10c4ddde-abf0-43df-964f-7f3ac21a4c7b");
pub const CLSID_FaxSecurity = &CLSID_FaxSecurity_Value;

const CLSID_FaxDocument_Value = Guid.initString("0f3f9f91-c838-415e-a4f3-3e828ca445e0");
pub const CLSID_FaxDocument = &CLSID_FaxDocument_Value;

const CLSID_FaxSender_Value = Guid.initString("265d84d0-1850-4360-b7c8-758bbb5f0b96");
pub const CLSID_FaxSender = &CLSID_FaxSender_Value;

const CLSID_FaxRecipients_Value = Guid.initString("ea9bdf53-10a9-4d4f-a067-63c8f84f01b0");
pub const CLSID_FaxRecipients = &CLSID_FaxRecipients_Value;

const CLSID_FaxIncomingArchive_Value = Guid.initString("8426c56a-35a1-4c6f-af93-fc952422e2c2");
pub const CLSID_FaxIncomingArchive = &CLSID_FaxIncomingArchive_Value;

const CLSID_FaxIncomingQueue_Value = Guid.initString("69131717-f3f1-40e3-809d-a6cbf7bd85e5");
pub const CLSID_FaxIncomingQueue = &CLSID_FaxIncomingQueue_Value;

const CLSID_FaxOutgoingArchive_Value = Guid.initString("43c28403-e04f-474d-990c-b94669148f59");
pub const CLSID_FaxOutgoingArchive = &CLSID_FaxOutgoingArchive_Value;

const CLSID_FaxOutgoingQueue_Value = Guid.initString("7421169e-8c43-4b0d-bb16-645c8fa40357");
pub const CLSID_FaxOutgoingQueue = &CLSID_FaxOutgoingQueue_Value;

const CLSID_FaxIncomingMessageIterator_Value = Guid.initString("6088e1d8-3fc8-45c2-87b1-909a29607ea9");
pub const CLSID_FaxIncomingMessageIterator = &CLSID_FaxIncomingMessageIterator_Value;

const CLSID_FaxIncomingMessage_Value = Guid.initString("1932fcf7-9d43-4d5a-89ff-03861b321736");
pub const CLSID_FaxIncomingMessage = &CLSID_FaxIncomingMessage_Value;

const CLSID_FaxOutgoingJobs_Value = Guid.initString("92bf2a6c-37be-43fa-a37d-cb0e5f753b35");
pub const CLSID_FaxOutgoingJobs = &CLSID_FaxOutgoingJobs_Value;

const CLSID_FaxOutgoingJob_Value = Guid.initString("71bb429c-0ef9-4915-bec5-a5d897a3e924");
pub const CLSID_FaxOutgoingJob = &CLSID_FaxOutgoingJob_Value;

const CLSID_FaxOutgoingMessageIterator_Value = Guid.initString("8a3224d0-d30b-49de-9813-cb385790fbbb");
pub const CLSID_FaxOutgoingMessageIterator = &CLSID_FaxOutgoingMessageIterator_Value;

const CLSID_FaxOutgoingMessage_Value = Guid.initString("91b4a378-4ad8-4aef-a4dc-97d96e939a3a");
pub const CLSID_FaxOutgoingMessage = &CLSID_FaxOutgoingMessage_Value;

const CLSID_FaxIncomingJobs_Value = Guid.initString("a1bb8a43-8866-4fb7-a15d-6266c875a5cc");
pub const CLSID_FaxIncomingJobs = &CLSID_FaxIncomingJobs_Value;

const CLSID_FaxIncomingJob_Value = Guid.initString("c47311ec-ae32-41b8-ae4b-3eae0629d0c9");
pub const CLSID_FaxIncomingJob = &CLSID_FaxIncomingJob_Value;

const CLSID_FaxDeviceProvider_Value = Guid.initString("17cf1aa3-f5eb-484a-9c9a-4440a5baabfc");
pub const CLSID_FaxDeviceProvider = &CLSID_FaxDeviceProvider_Value;

const CLSID_FaxDevice_Value = Guid.initString("59e3a5b2-d676-484b-a6de-720bfa89b5af");
pub const CLSID_FaxDevice = &CLSID_FaxDevice_Value;

const CLSID_FaxActivityLogging_Value = Guid.initString("f0a0294e-3bbd-48b8-8f13-8c591a55bdbc");
pub const CLSID_FaxActivityLogging = &CLSID_FaxActivityLogging_Value;

const CLSID_FaxEventLogging_Value = Guid.initString("a6850930-a0f6-4a6f-95b7-db2ebf3d02e3");
pub const CLSID_FaxEventLogging = &CLSID_FaxEventLogging_Value;

const CLSID_FaxOutboundRoutingGroups_Value = Guid.initString("ccbea1a5-e2b4-4b57-9421-b04b6289464b");
pub const CLSID_FaxOutboundRoutingGroups = &CLSID_FaxOutboundRoutingGroups_Value;

const CLSID_FaxOutboundRoutingGroup_Value = Guid.initString("0213f3e0-6791-4d77-a271-04d2357c50d6");
pub const CLSID_FaxOutboundRoutingGroup = &CLSID_FaxOutboundRoutingGroup_Value;

const CLSID_FaxDeviceIds_Value = Guid.initString("cdc539ea-7277-460e-8de0-48a0a5760d1f");
pub const CLSID_FaxDeviceIds = &CLSID_FaxDeviceIds_Value;

const CLSID_FaxOutboundRoutingRules_Value = Guid.initString("d385beca-e624-4473-bfaa-9f4000831f54");
pub const CLSID_FaxOutboundRoutingRules = &CLSID_FaxOutboundRoutingRules_Value;

const CLSID_FaxOutboundRoutingRule_Value = Guid.initString("6549eebf-08d1-475a-828b-3bf105952fa0");
pub const CLSID_FaxOutboundRoutingRule = &CLSID_FaxOutboundRoutingRule_Value;

const CLSID_FaxInboundRoutingExtensions_Value = Guid.initString("189a48ed-623c-4c0d-80f2-d66c7b9efec2");
pub const CLSID_FaxInboundRoutingExtensions = &CLSID_FaxInboundRoutingExtensions_Value;

const CLSID_FaxInboundRoutingExtension_Value = Guid.initString("1d7dfb51-7207-4436-a0d9-24e32ee56988");
pub const CLSID_FaxInboundRoutingExtension = &CLSID_FaxInboundRoutingExtension_Value;

const CLSID_FaxInboundRoutingMethods_Value = Guid.initString("25fcb76a-b750-4b82-9266-fbbbae8922ba");
pub const CLSID_FaxInboundRoutingMethods = &CLSID_FaxInboundRoutingMethods_Value;

const CLSID_FaxInboundRoutingMethod_Value = Guid.initString("4b9fd75c-0194-4b72-9ce5-02a8205ac7d4");
pub const CLSID_FaxInboundRoutingMethod = &CLSID_FaxInboundRoutingMethod_Value;

const CLSID_FaxJobStatus_Value = Guid.initString("7bf222f4-be8d-442f-841d-6132742423bb");
pub const CLSID_FaxJobStatus = &CLSID_FaxJobStatus_Value;

const CLSID_FaxRecipient_Value = Guid.initString("60bf3301-7df8-4bd8-9148-7b5801f9efdf");
pub const CLSID_FaxRecipient = &CLSID_FaxRecipient_Value;

const CLSID_FaxConfiguration_Value = Guid.initString("5857326f-e7b3-41a7-9c19-a91b463e2d56");
pub const CLSID_FaxConfiguration = &CLSID_FaxConfiguration_Value;

const CLSID_FaxAccountSet_Value = Guid.initString("fbc23c4b-79e0-4291-bc56-c12e253bbf3a");
pub const CLSID_FaxAccountSet = &CLSID_FaxAccountSet_Value;

const CLSID_FaxAccounts_Value = Guid.initString("da1f94aa-ee2c-47c0-8f4f-2a217075b76e");
pub const CLSID_FaxAccounts = &CLSID_FaxAccounts_Value;

const CLSID_FaxAccount_Value = Guid.initString("a7e0647f-4524-4464-a56d-b9fe666f715e");
pub const CLSID_FaxAccount = &CLSID_FaxAccount_Value;

const CLSID_FaxAccountFolders_Value = Guid.initString("85398f49-c034-4a3f-821c-db7d685e8129");
pub const CLSID_FaxAccountFolders = &CLSID_FaxAccountFolders_Value;

const CLSID_FaxAccountIncomingQueue_Value = Guid.initString("9bcf6094-b4da-45f4-b8d6-ddeb2186652c");
pub const CLSID_FaxAccountIncomingQueue = &CLSID_FaxAccountIncomingQueue_Value;

const CLSID_FaxAccountOutgoingQueue_Value = Guid.initString("feeceefb-c149-48ba-bab8-b791e101f62f");
pub const CLSID_FaxAccountOutgoingQueue = &CLSID_FaxAccountOutgoingQueue_Value;

const CLSID_FaxAccountIncomingArchive_Value = Guid.initString("14b33db5-4c40-4ecf-9ef8-a360cbe809ed");
pub const CLSID_FaxAccountIncomingArchive = &CLSID_FaxAccountIncomingArchive_Value;

const CLSID_FaxAccountOutgoingArchive_Value = Guid.initString("851e7af5-433a-4739-a2df-ad245c2cb98e");
pub const CLSID_FaxAccountOutgoingArchive = &CLSID_FaxAccountOutgoingArchive_Value;

const CLSID_FaxSecurity2_Value = Guid.initString("735c1248-ec89-4c30-a127-656e92e3c4ea");
pub const CLSID_FaxSecurity2 = &CLSID_FaxSecurity2_Value;

pub const FAX_JOB_STATUS_ENUM = enum(i32) {
    PENDING = 1,
    INPROGRESS = 2,
    FAILED = 8,
    PAUSED = 16,
    NOLINE = 32,
    RETRYING = 64,
    RETRIES_EXCEEDED = 128,
    COMPLETED = 256,
    CANCELED = 512,
    CANCELING = 1024,
    ROUTING = 2048,
};
pub const fjsPENDING = FAX_JOB_STATUS_ENUM.PENDING;
pub const fjsINPROGRESS = FAX_JOB_STATUS_ENUM.INPROGRESS;
pub const fjsFAILED = FAX_JOB_STATUS_ENUM.FAILED;
pub const fjsPAUSED = FAX_JOB_STATUS_ENUM.PAUSED;
pub const fjsNOLINE = FAX_JOB_STATUS_ENUM.NOLINE;
pub const fjsRETRYING = FAX_JOB_STATUS_ENUM.RETRYING;
pub const fjsRETRIES_EXCEEDED = FAX_JOB_STATUS_ENUM.RETRIES_EXCEEDED;
pub const fjsCOMPLETED = FAX_JOB_STATUS_ENUM.COMPLETED;
pub const fjsCANCELED = FAX_JOB_STATUS_ENUM.CANCELED;
pub const fjsCANCELING = FAX_JOB_STATUS_ENUM.CANCELING;
pub const fjsROUTING = FAX_JOB_STATUS_ENUM.ROUTING;

pub const FAX_JOB_EXTENDED_STATUS_ENUM = enum(i32) {
    NONE = 0,
    DISCONNECTED = 1,
    INITIALIZING = 2,
    DIALING = 3,
    TRANSMITTING = 4,
    ANSWERED = 5,
    RECEIVING = 6,
    LINE_UNAVAILABLE = 7,
    BUSY = 8,
    NO_ANSWER = 9,
    BAD_ADDRESS = 10,
    NO_DIAL_TONE = 11,
    FATAL_ERROR = 12,
    CALL_DELAYED = 13,
    CALL_BLACKLISTED = 14,
    NOT_FAX_CALL = 15,
    PARTIALLY_RECEIVED = 16,
    HANDLED = 17,
    CALL_COMPLETED = 18,
    CALL_ABORTED = 19,
    PROPRIETARY = 16777216,
};
pub const fjesNONE = FAX_JOB_EXTENDED_STATUS_ENUM.NONE;
pub const fjesDISCONNECTED = FAX_JOB_EXTENDED_STATUS_ENUM.DISCONNECTED;
pub const fjesINITIALIZING = FAX_JOB_EXTENDED_STATUS_ENUM.INITIALIZING;
pub const fjesDIALING = FAX_JOB_EXTENDED_STATUS_ENUM.DIALING;
pub const fjesTRANSMITTING = FAX_JOB_EXTENDED_STATUS_ENUM.TRANSMITTING;
pub const fjesANSWERED = FAX_JOB_EXTENDED_STATUS_ENUM.ANSWERED;
pub const fjesRECEIVING = FAX_JOB_EXTENDED_STATUS_ENUM.RECEIVING;
pub const fjesLINE_UNAVAILABLE = FAX_JOB_EXTENDED_STATUS_ENUM.LINE_UNAVAILABLE;
pub const fjesBUSY = FAX_JOB_EXTENDED_STATUS_ENUM.BUSY;
pub const fjesNO_ANSWER = FAX_JOB_EXTENDED_STATUS_ENUM.NO_ANSWER;
pub const fjesBAD_ADDRESS = FAX_JOB_EXTENDED_STATUS_ENUM.BAD_ADDRESS;
pub const fjesNO_DIAL_TONE = FAX_JOB_EXTENDED_STATUS_ENUM.NO_DIAL_TONE;
pub const fjesFATAL_ERROR = FAX_JOB_EXTENDED_STATUS_ENUM.FATAL_ERROR;
pub const fjesCALL_DELAYED = FAX_JOB_EXTENDED_STATUS_ENUM.CALL_DELAYED;
pub const fjesCALL_BLACKLISTED = FAX_JOB_EXTENDED_STATUS_ENUM.CALL_BLACKLISTED;
pub const fjesNOT_FAX_CALL = FAX_JOB_EXTENDED_STATUS_ENUM.NOT_FAX_CALL;
pub const fjesPARTIALLY_RECEIVED = FAX_JOB_EXTENDED_STATUS_ENUM.PARTIALLY_RECEIVED;
pub const fjesHANDLED = FAX_JOB_EXTENDED_STATUS_ENUM.HANDLED;
pub const fjesCALL_COMPLETED = FAX_JOB_EXTENDED_STATUS_ENUM.CALL_COMPLETED;
pub const fjesCALL_ABORTED = FAX_JOB_EXTENDED_STATUS_ENUM.CALL_ABORTED;
pub const fjesPROPRIETARY = FAX_JOB_EXTENDED_STATUS_ENUM.PROPRIETARY;

pub const FAX_JOB_OPERATIONS_ENUM = enum(i32) {
    VIEW = 1,
    PAUSE = 2,
    RESUME = 4,
    RESTART = 8,
    DELETE = 16,
    RECIPIENT_INFO = 32,
    SENDER_INFO = 64,
};
pub const fjoVIEW = FAX_JOB_OPERATIONS_ENUM.VIEW;
pub const fjoPAUSE = FAX_JOB_OPERATIONS_ENUM.PAUSE;
pub const fjoRESUME = FAX_JOB_OPERATIONS_ENUM.RESUME;
pub const fjoRESTART = FAX_JOB_OPERATIONS_ENUM.RESTART;
pub const fjoDELETE = FAX_JOB_OPERATIONS_ENUM.DELETE;
pub const fjoRECIPIENT_INFO = FAX_JOB_OPERATIONS_ENUM.RECIPIENT_INFO;
pub const fjoSENDER_INFO = FAX_JOB_OPERATIONS_ENUM.SENDER_INFO;

pub const FAX_JOB_TYPE_ENUM = enum(i32) {
    SEND = 0,
    RECEIVE = 1,
    ROUTING = 2,
};
pub const fjtSEND = FAX_JOB_TYPE_ENUM.SEND;
pub const fjtRECEIVE = FAX_JOB_TYPE_ENUM.RECEIVE;
pub const fjtROUTING = FAX_JOB_TYPE_ENUM.ROUTING;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxJobStatus_Value = Guid.initString("8b86f485-fd7f-4824-886b-40c5caa617cc");
pub const IID_IFaxJobStatus = &IID_IFaxJobStatus_Value;
pub const IFaxJobStatus = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            p_status: ?*FAX_JOB_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Pages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pl_pages: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pl_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pl_current_page: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pl_device_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pbstr_c_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pbstr_t_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedStatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            p_extended_status_code: ?*FAX_JOB_EXTENDED_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pbstr_extended_status: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AvailableOperations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            p_available_operations: ?*FAX_JOB_OPERATIONS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Retries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pl_retries: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JobType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            p_job_type: ?*FAX_JOB_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScheduledTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pdate_scheduled_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pdate_transmission_start: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pdate_transmission_end: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallerId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pbstr_caller_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoutingInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxJobStatus,
            pbstr_routing_information: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStatus(self: *const T, p_status_: ?*FAX_JOB_STATUS_ENUM) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IFaxJobStatus, @ptrCast(self)), p_status_);
            }
            pub inline fn getPages(self: *const T, pl_pages_: ?*i32) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_Pages(@as(*const IFaxJobStatus, @ptrCast(self)), pl_pages_);
            }
            pub inline fn getSize(self: *const T, pl_size_: ?*i32) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IFaxJobStatus, @ptrCast(self)), pl_size_);
            }
            pub inline fn getCurrentPage(self: *const T, pl_current_page_: ?*i32) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_CurrentPage(@as(*const IFaxJobStatus, @ptrCast(self)), pl_current_page_);
            }
            pub inline fn getDeviceId(self: *const T, pl_device_id_: ?*i32) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_DeviceId(@as(*const IFaxJobStatus, @ptrCast(self)), pl_device_id_);
            }
            pub inline fn getCSID(self: *const T, pbstr_c_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_CSID(@as(*const IFaxJobStatus, @ptrCast(self)), pbstr_c_s_i_d_);
            }
            pub inline fn getTSID(self: *const T, pbstr_t_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_TSID(@as(*const IFaxJobStatus, @ptrCast(self)), pbstr_t_s_i_d_);
            }
            pub inline fn getExtendedStatusCode(self: *const T, p_extended_status_code_: ?*FAX_JOB_EXTENDED_STATUS_ENUM) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_ExtendedStatusCode(@as(*const IFaxJobStatus, @ptrCast(self)), p_extended_status_code_);
            }
            pub inline fn getExtendedStatus(self: *const T, pbstr_extended_status_: ?*?BSTR) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_ExtendedStatus(@as(*const IFaxJobStatus, @ptrCast(self)), pbstr_extended_status_);
            }
            pub inline fn getAvailableOperations(self: *const T, p_available_operations_: ?*FAX_JOB_OPERATIONS_ENUM) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_AvailableOperations(@as(*const IFaxJobStatus, @ptrCast(self)), p_available_operations_);
            }
            pub inline fn getRetries(self: *const T, pl_retries_: ?*i32) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_Retries(@as(*const IFaxJobStatus, @ptrCast(self)), pl_retries_);
            }
            pub inline fn getJobType(self: *const T, p_job_type_: ?*FAX_JOB_TYPE_ENUM) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_JobType(@as(*const IFaxJobStatus, @ptrCast(self)), p_job_type_);
            }
            pub inline fn getScheduledTime(self: *const T, pdate_scheduled_time_: ?*f64) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_ScheduledTime(@as(*const IFaxJobStatus, @ptrCast(self)), pdate_scheduled_time_);
            }
            pub inline fn getTransmissionStart(self: *const T, pdate_transmission_start_: ?*f64) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_TransmissionStart(@as(*const IFaxJobStatus, @ptrCast(self)), pdate_transmission_start_);
            }
            pub inline fn getTransmissionEnd(self: *const T, pdate_transmission_end_: ?*f64) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_TransmissionEnd(@as(*const IFaxJobStatus, @ptrCast(self)), pdate_transmission_end_);
            }
            pub inline fn getCallerId(self: *const T, pbstr_caller_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_CallerId(@as(*const IFaxJobStatus, @ptrCast(self)), pbstr_caller_id_);
            }
            pub inline fn getRoutingInformation(self: *const T, pbstr_routing_information_: ?*?BSTR) HRESULT {
                return @as(*const IFaxJobStatus.VTable, @ptrCast(self.vtable)).get_RoutingInformation(@as(*const IFaxJobStatus, @ptrCast(self)), pbstr_routing_information_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_SERVER_EVENTS_TYPE_ENUM = enum(i32) {
    NONE = 0,
    IN_QUEUE = 1,
    OUT_QUEUE = 2,
    CONFIG = 4,
    ACTIVITY = 8,
    QUEUE_STATE = 16,
    IN_ARCHIVE = 32,
    OUT_ARCHIVE = 64,
    FXSSVC_ENDED = 128,
    DEVICE_STATUS = 256,
    INCOMING_CALL = 512,
};
pub const fsetNONE = FAX_SERVER_EVENTS_TYPE_ENUM.NONE;
pub const fsetIN_QUEUE = FAX_SERVER_EVENTS_TYPE_ENUM.IN_QUEUE;
pub const fsetOUT_QUEUE = FAX_SERVER_EVENTS_TYPE_ENUM.OUT_QUEUE;
pub const fsetCONFIG = FAX_SERVER_EVENTS_TYPE_ENUM.CONFIG;
pub const fsetACTIVITY = FAX_SERVER_EVENTS_TYPE_ENUM.ACTIVITY;
pub const fsetQUEUE_STATE = FAX_SERVER_EVENTS_TYPE_ENUM.QUEUE_STATE;
pub const fsetIN_ARCHIVE = FAX_SERVER_EVENTS_TYPE_ENUM.IN_ARCHIVE;
pub const fsetOUT_ARCHIVE = FAX_SERVER_EVENTS_TYPE_ENUM.OUT_ARCHIVE;
pub const fsetFXSSVC_ENDED = FAX_SERVER_EVENTS_TYPE_ENUM.FXSSVC_ENDED;
pub const fsetDEVICE_STATUS = FAX_SERVER_EVENTS_TYPE_ENUM.DEVICE_STATUS;
pub const fsetINCOMING_CALL = FAX_SERVER_EVENTS_TYPE_ENUM.INCOMING_CALL;

pub const FAX_SERVER_APIVERSION_ENUM = enum(i32) {
    @"0" = 0,
    @"1" = 65536,
    @"2" = 131072,
    @"3" = 196608,
};
pub const fsAPI_VERSION_0 = FAX_SERVER_APIVERSION_ENUM.@"0";
pub const fsAPI_VERSION_1 = FAX_SERVER_APIVERSION_ENUM.@"1";
pub const fsAPI_VERSION_2 = FAX_SERVER_APIVERSION_ENUM.@"2";
pub const fsAPI_VERSION_3 = FAX_SERVER_APIVERSION_ENUM.@"3";

// TODO: this type is limited to platform 'windows5.0'
const IID_IFaxServer_Value = Guid.initString("475b6469-90a5-4878-a577-17a86e8e3462");
pub const IID_IFaxServer = &IID_IFaxServer_Value;
pub const IFaxServer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Connect: *const fn (
            self: *const IFaxServer,
            bstr_server_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pbstr_server_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceProviders: *const fn (
            self: *const IFaxServer,
            pp_fax_device_providers: ?*?*IFaxDeviceProviders,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevices: *const fn (
            self: *const IFaxServer,
            pp_fax_devices: ?*?*IFaxDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InboundRouting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pp_fax_inbound_routing: ?*?*IFaxInboundRouting,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Folders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            p_fax_folders: ?*?*IFaxFolders,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoggingOptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pp_fax_logging_options: ?*?*IFaxLoggingOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pl_major_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pl_minor_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorBuild: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pl_major_build: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorBuild: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pl_minor_build: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Debug: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pb_debug: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Activity: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pp_fax_activity: ?*?*IFaxActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutboundRouting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pp_fax_outbound_routing: ?*?*IFaxOutboundRouting,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceiptOptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pp_fax_receipt_options: ?*?*IFaxReceiptOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            pp_fax_security: ?*?*IFaxSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const IFaxServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtensionProperty: *const fn (
            self: *const IFaxServer,
            bstr_g_u_i_d: ?BSTR,
            pv_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExtensionProperty: *const fn (
            self: *const IFaxServer,
            bstr_g_u_i_d: ?BSTR,
            v_property: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ListenToServerEvents: *const fn (
            self: *const IFaxServer,
            event_types: FAX_SERVER_EVENTS_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterDeviceProvider: *const fn (
            self: *const IFaxServer,
            bstr_g_u_i_d: ?BSTR,
            bstr_friendly_name: ?BSTR,
            bstr_image_name: ?BSTR,
            tsp_name: ?BSTR,
            l_f_s_p_i_version: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterDeviceProvider: *const fn (
            self: *const IFaxServer,
            bstr_unique_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterInboundRoutingExtension: *const fn (
            self: *const IFaxServer,
            bstr_extension_name: ?BSTR,
            bstr_friendly_name: ?BSTR,
            bstr_image_name: ?BSTR,
            v_methods: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterInboundRoutingExtension: *const fn (
            self: *const IFaxServer,
            bstr_extension_unique_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegisteredEvents: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            p_event_types: ?*FAX_SERVER_EVENTS_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_APIVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer,
            p_a_p_i_version: ?*FAX_SERVER_APIVERSION_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn connect(self: *const T, bstr_server_name_: ?BSTR) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).Connect(@as(*const IFaxServer, @ptrCast(self)), bstr_server_name_);
            }
            pub inline fn getServerName(self: *const T, pbstr_server_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_ServerName(@as(*const IFaxServer, @ptrCast(self)), pbstr_server_name_);
            }
            pub inline fn getDeviceProviders(self: *const T, pp_fax_device_providers_: ?*?*IFaxDeviceProviders) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).GetDeviceProviders(@as(*const IFaxServer, @ptrCast(self)), pp_fax_device_providers_);
            }
            pub inline fn getDevices(self: *const T, pp_fax_devices_: ?*?*IFaxDevices) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).GetDevices(@as(*const IFaxServer, @ptrCast(self)), pp_fax_devices_);
            }
            pub inline fn getInboundRouting(self: *const T, pp_fax_inbound_routing_: ?*?*IFaxInboundRouting) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_InboundRouting(@as(*const IFaxServer, @ptrCast(self)), pp_fax_inbound_routing_);
            }
            pub inline fn getFolders(self: *const T, p_fax_folders_: ?*?*IFaxFolders) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_Folders(@as(*const IFaxServer, @ptrCast(self)), p_fax_folders_);
            }
            pub inline fn getLoggingOptions(self: *const T, pp_fax_logging_options_: ?*?*IFaxLoggingOptions) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_LoggingOptions(@as(*const IFaxServer, @ptrCast(self)), pp_fax_logging_options_);
            }
            pub inline fn getMajorVersion(self: *const T, pl_major_version_: ?*i32) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_MajorVersion(@as(*const IFaxServer, @ptrCast(self)), pl_major_version_);
            }
            pub inline fn getMinorVersion(self: *const T, pl_minor_version_: ?*i32) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_MinorVersion(@as(*const IFaxServer, @ptrCast(self)), pl_minor_version_);
            }
            pub inline fn getMajorBuild(self: *const T, pl_major_build_: ?*i32) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_MajorBuild(@as(*const IFaxServer, @ptrCast(self)), pl_major_build_);
            }
            pub inline fn getMinorBuild(self: *const T, pl_minor_build_: ?*i32) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_MinorBuild(@as(*const IFaxServer, @ptrCast(self)), pl_minor_build_);
            }
            pub inline fn getDebug(self: *const T, pb_debug_: ?*i16) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_Debug(@as(*const IFaxServer, @ptrCast(self)), pb_debug_);
            }
            pub inline fn getActivity(self: *const T, pp_fax_activity_: ?*?*IFaxActivity) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_Activity(@as(*const IFaxServer, @ptrCast(self)), pp_fax_activity_);
            }
            pub inline fn getOutboundRouting(self: *const T, pp_fax_outbound_routing_: ?*?*IFaxOutboundRouting) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_OutboundRouting(@as(*const IFaxServer, @ptrCast(self)), pp_fax_outbound_routing_);
            }
            pub inline fn getReceiptOptions(self: *const T, pp_fax_receipt_options_: ?*?*IFaxReceiptOptions) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_ReceiptOptions(@as(*const IFaxServer, @ptrCast(self)), pp_fax_receipt_options_);
            }
            pub inline fn getSecurity(self: *const T, pp_fax_security_: ?*?*IFaxSecurity) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_Security(@as(*const IFaxServer, @ptrCast(self)), pp_fax_security_);
            }
            pub inline fn disconnect(self: *const T) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IFaxServer, @ptrCast(self)));
            }
            pub inline fn getExtensionProperty(self: *const T, bstr_g_u_i_d_: ?BSTR, pv_property_: ?*VARIANT) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).GetExtensionProperty(@as(*const IFaxServer, @ptrCast(self)), bstr_g_u_i_d_, pv_property_);
            }
            pub inline fn setExtensionProperty(self: *const T, bstr_g_u_i_d_: ?BSTR, v_property_: VARIANT) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).SetExtensionProperty(@as(*const IFaxServer, @ptrCast(self)), bstr_g_u_i_d_, v_property_);
            }
            pub inline fn listenToServerEvents(self: *const T, event_types_: FAX_SERVER_EVENTS_TYPE_ENUM) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).ListenToServerEvents(@as(*const IFaxServer, @ptrCast(self)), event_types_);
            }
            pub inline fn registerDeviceProvider(self: *const T, bstr_g_u_i_d_: ?BSTR, bstr_friendly_name_: ?BSTR, bstr_image_name_: ?BSTR, tsp_name_: ?BSTR, l_f_s_p_i_version_: i32) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).RegisterDeviceProvider(@as(*const IFaxServer, @ptrCast(self)), bstr_g_u_i_d_, bstr_friendly_name_, bstr_image_name_, tsp_name_, l_f_s_p_i_version_);
            }
            pub inline fn unregisterDeviceProvider(self: *const T, bstr_unique_name_: ?BSTR) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).UnregisterDeviceProvider(@as(*const IFaxServer, @ptrCast(self)), bstr_unique_name_);
            }
            pub inline fn registerInboundRoutingExtension(self: *const T, bstr_extension_name_: ?BSTR, bstr_friendly_name_: ?BSTR, bstr_image_name_: ?BSTR, v_methods_: VARIANT) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).RegisterInboundRoutingExtension(@as(*const IFaxServer, @ptrCast(self)), bstr_extension_name_, bstr_friendly_name_, bstr_image_name_, v_methods_);
            }
            pub inline fn unregisterInboundRoutingExtension(self: *const T, bstr_extension_unique_name_: ?BSTR) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).UnregisterInboundRoutingExtension(@as(*const IFaxServer, @ptrCast(self)), bstr_extension_unique_name_);
            }
            pub inline fn getRegisteredEvents(self: *const T, p_event_types_: ?*FAX_SERVER_EVENTS_TYPE_ENUM) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_RegisteredEvents(@as(*const IFaxServer, @ptrCast(self)), p_event_types_);
            }
            pub inline fn getAPIVersion(self: *const T, p_a_p_i_version_: ?*FAX_SERVER_APIVERSION_ENUM) HRESULT {
                return @as(*const IFaxServer.VTable, @ptrCast(self.vtable)).get_APIVersion(@as(*const IFaxServer, @ptrCast(self)), p_a_p_i_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxDeviceProviders_Value = Guid.initString("9fb76f62-4c7e-43a5-b6fd-502893f7e13e");
pub const IID_IFaxDeviceProviders = &IID_IFaxDeviceProviders_Value;
pub const IFaxDeviceProviders = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProviders,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProviders,
            v_index: VARIANT,
            p_fax_device_provider: ?*?*IFaxDeviceProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProviders,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxDeviceProviders.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxDeviceProviders, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, v_index_: VARIANT, p_fax_device_provider_: ?*?*IFaxDeviceProvider) HRESULT {
                return @as(*const IFaxDeviceProviders.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxDeviceProviders, @ptrCast(self)), v_index_, p_fax_device_provider_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxDeviceProviders.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxDeviceProviders, @ptrCast(self)), pl_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxDevices_Value = Guid.initString("9e46783e-f34f-482e-a360-0416becbbd96");
pub const IID_IFaxDevices = &IID_IFaxDevices_Value;
pub const IFaxDevices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevices,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevices,
            v_index: VARIANT,
            p_fax_device: ?*?*IFaxDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevices,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemById: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevices,
            l_id: i32,
            pp_fax_device: ?*?*IFaxDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxDevices.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxDevices, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, v_index_: VARIANT, p_fax_device_: ?*?*IFaxDevice) HRESULT {
                return @as(*const IFaxDevices.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxDevices, @ptrCast(self)), v_index_, p_fax_device_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxDevices.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxDevices, @ptrCast(self)), pl_count_);
            }
            pub inline fn getItemById(self: *const T, l_id_: i32, pp_fax_device_: ?*?*IFaxDevice) HRESULT {
                return @as(*const IFaxDevices.VTable, @ptrCast(self.vtable)).get_ItemById(@as(*const IFaxDevices, @ptrCast(self)), l_id_, pp_fax_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxInboundRouting_Value = Guid.initString("8148c20f-9d52-45b1-bf96-38fc12713527");
pub const IID_IFaxInboundRouting = &IID_IFaxInboundRouting_Value;
pub const IFaxInboundRouting = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetExtensions: *const fn (
            self: *const IFaxInboundRouting,
            p_fax_inbound_routing_extensions: ?*?*IFaxInboundRoutingExtensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethods: *const fn (
            self: *const IFaxInboundRouting,
            p_fax_inbound_routing_methods: ?*?*IFaxInboundRoutingMethods,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getExtensions(self: *const T, p_fax_inbound_routing_extensions_: ?*?*IFaxInboundRoutingExtensions) HRESULT {
                return @as(*const IFaxInboundRouting.VTable, @ptrCast(self.vtable)).GetExtensions(@as(*const IFaxInboundRouting, @ptrCast(self)), p_fax_inbound_routing_extensions_);
            }
            pub inline fn getMethods(self: *const T, p_fax_inbound_routing_methods_: ?*?*IFaxInboundRoutingMethods) HRESULT {
                return @as(*const IFaxInboundRouting.VTable, @ptrCast(self.vtable)).GetMethods(@as(*const IFaxInboundRouting, @ptrCast(self)), p_fax_inbound_routing_methods_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxFolders_Value = Guid.initString("dce3b2a8-a7ab-42bc-9d0a-3149457261a0");
pub const IID_IFaxFolders = &IID_IFaxFolders_Value;
pub const IFaxFolders = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutgoingQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxFolders,
            p_fax_outgoing_queue: ?*?*IFaxOutgoingQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncomingQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxFolders,
            p_fax_incoming_queue: ?*?*IFaxIncomingQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncomingArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxFolders,
            p_fax_incoming_archive: ?*?*IFaxIncomingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutgoingArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxFolders,
            p_fax_outgoing_archive: ?*?*IFaxOutgoingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getOutgoingQueue(self: *const T, p_fax_outgoing_queue_: ?*?*IFaxOutgoingQueue) HRESULT {
                return @as(*const IFaxFolders.VTable, @ptrCast(self.vtable)).get_OutgoingQueue(@as(*const IFaxFolders, @ptrCast(self)), p_fax_outgoing_queue_);
            }
            pub inline fn getIncomingQueue(self: *const T, p_fax_incoming_queue_: ?*?*IFaxIncomingQueue) HRESULT {
                return @as(*const IFaxFolders.VTable, @ptrCast(self.vtable)).get_IncomingQueue(@as(*const IFaxFolders, @ptrCast(self)), p_fax_incoming_queue_);
            }
            pub inline fn getIncomingArchive(self: *const T, p_fax_incoming_archive_: ?*?*IFaxIncomingArchive) HRESULT {
                return @as(*const IFaxFolders.VTable, @ptrCast(self.vtable)).get_IncomingArchive(@as(*const IFaxFolders, @ptrCast(self)), p_fax_incoming_archive_);
            }
            pub inline fn getOutgoingArchive(self: *const T, p_fax_outgoing_archive_: ?*?*IFaxOutgoingArchive) HRESULT {
                return @as(*const IFaxFolders.VTable, @ptrCast(self.vtable)).get_OutgoingArchive(@as(*const IFaxFolders, @ptrCast(self)), p_fax_outgoing_archive_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxLoggingOptions_Value = Guid.initString("34e64fb9-6b31-4d32-8b27-d286c0c33606");
pub const IID_IFaxLoggingOptions = &IID_IFaxLoggingOptions_Value;
pub const IFaxLoggingOptions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventLogging: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxLoggingOptions,
            p_fax_event_logging: ?*?*IFaxEventLogging,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActivityLogging: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxLoggingOptions,
            p_fax_activity_logging: ?*?*IFaxActivityLogging,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getEventLogging(self: *const T, p_fax_event_logging_: ?*?*IFaxEventLogging) HRESULT {
                return @as(*const IFaxLoggingOptions.VTable, @ptrCast(self.vtable)).get_EventLogging(@as(*const IFaxLoggingOptions, @ptrCast(self)), p_fax_event_logging_);
            }
            pub inline fn getActivityLogging(self: *const T, p_fax_activity_logging_: ?*?*IFaxActivityLogging) HRESULT {
                return @as(*const IFaxLoggingOptions.VTable, @ptrCast(self.vtable)).get_ActivityLogging(@as(*const IFaxLoggingOptions, @ptrCast(self)), p_fax_activity_logging_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxActivity_Value = Guid.initString("4b106f97-3df5-40f2-bc3c-44cb8115ebdf");
pub const IID_IFaxActivity = &IID_IFaxActivity_Value;
pub const IFaxActivity = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncomingMessages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivity,
            pl_incoming_messages: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoutingMessages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivity,
            pl_routing_messages: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutgoingMessages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivity,
            pl_outgoing_messages: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueuedMessages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivity,
            pl_queued_messages: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIncomingMessages(self: *const T, pl_incoming_messages_: ?*i32) HRESULT {
                return @as(*const IFaxActivity.VTable, @ptrCast(self.vtable)).get_IncomingMessages(@as(*const IFaxActivity, @ptrCast(self)), pl_incoming_messages_);
            }
            pub inline fn getRoutingMessages(self: *const T, pl_routing_messages_: ?*i32) HRESULT {
                return @as(*const IFaxActivity.VTable, @ptrCast(self.vtable)).get_RoutingMessages(@as(*const IFaxActivity, @ptrCast(self)), pl_routing_messages_);
            }
            pub inline fn getOutgoingMessages(self: *const T, pl_outgoing_messages_: ?*i32) HRESULT {
                return @as(*const IFaxActivity.VTable, @ptrCast(self.vtable)).get_OutgoingMessages(@as(*const IFaxActivity, @ptrCast(self)), pl_outgoing_messages_);
            }
            pub inline fn getQueuedMessages(self: *const T, pl_queued_messages_: ?*i32) HRESULT {
                return @as(*const IFaxActivity.VTable, @ptrCast(self.vtable)).get_QueuedMessages(@as(*const IFaxActivity, @ptrCast(self)), pl_queued_messages_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxActivity.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxActivity, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutboundRouting_Value = Guid.initString("25dc05a4-9909-41bd-a95b-7e5d1dec1d43");
pub const IID_IFaxOutboundRouting = &IID_IFaxOutboundRouting_Value;
pub const IFaxOutboundRouting = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetGroups: *const fn (
            self: *const IFaxOutboundRouting,
            p_fax_outbound_routing_groups: ?*?*IFaxOutboundRoutingGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRules: *const fn (
            self: *const IFaxOutboundRouting,
            p_fax_outbound_routing_rules: ?*?*IFaxOutboundRoutingRules,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getGroups(self: *const T, p_fax_outbound_routing_groups_: ?*?*IFaxOutboundRoutingGroups) HRESULT {
                return @as(*const IFaxOutboundRouting.VTable, @ptrCast(self.vtable)).GetGroups(@as(*const IFaxOutboundRouting, @ptrCast(self)), p_fax_outbound_routing_groups_);
            }
            pub inline fn getRules(self: *const T, p_fax_outbound_routing_rules_: ?*?*IFaxOutboundRoutingRules) HRESULT {
                return @as(*const IFaxOutboundRouting.VTable, @ptrCast(self.vtable)).GetRules(@as(*const IFaxOutboundRouting, @ptrCast(self)), p_fax_outbound_routing_rules_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_SMTP_AUTHENTICATION_TYPE_ENUM = enum(i32) {
    ANONYMOUS = 0,
    BASIC = 1,
    NTLM = 2,
};
pub const fsatANONYMOUS = FAX_SMTP_AUTHENTICATION_TYPE_ENUM.ANONYMOUS;
pub const fsatBASIC = FAX_SMTP_AUTHENTICATION_TYPE_ENUM.BASIC;
pub const fsatNTLM = FAX_SMTP_AUTHENTICATION_TYPE_ENUM.NTLM;

pub const FAX_RECEIPT_TYPE_ENUM = enum(i32) {
    NONE = 0,
    MAIL = 1,
    MSGBOX = 4,
};
pub const frtNONE = FAX_RECEIPT_TYPE_ENUM.NONE;
pub const frtMAIL = FAX_RECEIPT_TYPE_ENUM.MAIL;
pub const frtMSGBOX = FAX_RECEIPT_TYPE_ENUM.MSGBOX;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxReceiptOptions_Value = Guid.initString("378efaeb-5fcb-4afb-b2ee-e16e80614487");
pub const IID_IFaxReceiptOptions = &IID_IFaxReceiptOptions_Value;
pub const IFaxReceiptOptions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthenticationType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            p_type: ?*FAX_SMTP_AUTHENTICATION_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthenticationType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            type: FAX_SMTP_AUTHENTICATION_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SMTPServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            pbstr_s_m_t_p_server: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SMTPServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            bstr_s_m_t_p_server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SMTPPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            pl_s_m_t_p_port: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SMTPPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            l_s_m_t_p_port: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SMTPSender: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            pbstr_s_m_t_p_sender: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SMTPSender: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            bstr_s_m_t_p_sender: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SMTPUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            pbstr_s_m_t_p_user: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SMTPUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            bstr_s_m_t_p_user: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowedReceipts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            p_allowed_receipts: ?*FAX_RECEIPT_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowedReceipts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            allowed_receipts: FAX_RECEIPT_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SMTPPassword: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            pbstr_s_m_t_p_password: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SMTPPassword: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            bstr_s_m_t_p_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxReceiptOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxReceiptOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseForInboundRouting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            pb_use_for_inbound_routing: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseForInboundRouting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxReceiptOptions,
            b_use_for_inbound_routing: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAuthenticationType(self: *const T, p_type_: ?*FAX_SMTP_AUTHENTICATION_TYPE_ENUM) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).get_AuthenticationType(@as(*const IFaxReceiptOptions, @ptrCast(self)), p_type_);
            }
            pub inline fn putAuthenticationType(self: *const T, type_: FAX_SMTP_AUTHENTICATION_TYPE_ENUM) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).put_AuthenticationType(@as(*const IFaxReceiptOptions, @ptrCast(self)), type_);
            }
            pub inline fn getSMTPServer(self: *const T, pbstr_s_m_t_p_server_: ?*?BSTR) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).get_SMTPServer(@as(*const IFaxReceiptOptions, @ptrCast(self)), pbstr_s_m_t_p_server_);
            }
            pub inline fn putSMTPServer(self: *const T, bstr_s_m_t_p_server_: ?BSTR) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).put_SMTPServer(@as(*const IFaxReceiptOptions, @ptrCast(self)), bstr_s_m_t_p_server_);
            }
            pub inline fn getSMTPPort(self: *const T, pl_s_m_t_p_port_: ?*i32) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).get_SMTPPort(@as(*const IFaxReceiptOptions, @ptrCast(self)), pl_s_m_t_p_port_);
            }
            pub inline fn putSMTPPort(self: *const T, l_s_m_t_p_port_: i32) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).put_SMTPPort(@as(*const IFaxReceiptOptions, @ptrCast(self)), l_s_m_t_p_port_);
            }
            pub inline fn getSMTPSender(self: *const T, pbstr_s_m_t_p_sender_: ?*?BSTR) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).get_SMTPSender(@as(*const IFaxReceiptOptions, @ptrCast(self)), pbstr_s_m_t_p_sender_);
            }
            pub inline fn putSMTPSender(self: *const T, bstr_s_m_t_p_sender_: ?BSTR) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).put_SMTPSender(@as(*const IFaxReceiptOptions, @ptrCast(self)), bstr_s_m_t_p_sender_);
            }
            pub inline fn getSMTPUser(self: *const T, pbstr_s_m_t_p_user_: ?*?BSTR) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).get_SMTPUser(@as(*const IFaxReceiptOptions, @ptrCast(self)), pbstr_s_m_t_p_user_);
            }
            pub inline fn putSMTPUser(self: *const T, bstr_s_m_t_p_user_: ?BSTR) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).put_SMTPUser(@as(*const IFaxReceiptOptions, @ptrCast(self)), bstr_s_m_t_p_user_);
            }
            pub inline fn getAllowedReceipts(self: *const T, p_allowed_receipts_: ?*FAX_RECEIPT_TYPE_ENUM) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).get_AllowedReceipts(@as(*const IFaxReceiptOptions, @ptrCast(self)), p_allowed_receipts_);
            }
            pub inline fn putAllowedReceipts(self: *const T, allowed_receipts_: FAX_RECEIPT_TYPE_ENUM) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).put_AllowedReceipts(@as(*const IFaxReceiptOptions, @ptrCast(self)), allowed_receipts_);
            }
            pub inline fn getSMTPPassword(self: *const T, pbstr_s_m_t_p_password_: ?*?BSTR) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).get_SMTPPassword(@as(*const IFaxReceiptOptions, @ptrCast(self)), pbstr_s_m_t_p_password_);
            }
            pub inline fn putSMTPPassword(self: *const T, bstr_s_m_t_p_password_: ?BSTR) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).put_SMTPPassword(@as(*const IFaxReceiptOptions, @ptrCast(self)), bstr_s_m_t_p_password_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxReceiptOptions, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxReceiptOptions, @ptrCast(self)));
            }
            pub inline fn getUseForInboundRouting(self: *const T, pb_use_for_inbound_routing_: ?*i16) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).get_UseForInboundRouting(@as(*const IFaxReceiptOptions, @ptrCast(self)), pb_use_for_inbound_routing_);
            }
            pub inline fn putUseForInboundRouting(self: *const T, b_use_for_inbound_routing_: i16) HRESULT {
                return @as(*const IFaxReceiptOptions.VTable, @ptrCast(self.vtable)).put_UseForInboundRouting(@as(*const IFaxReceiptOptions, @ptrCast(self)), b_use_for_inbound_routing_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_ACCESS_RIGHTS_ENUM = enum(i32) {
    SUBMIT_LOW = 1,
    SUBMIT_NORMAL = 2,
    SUBMIT_HIGH = 4,
    QUERY_JOBS = 8,
    MANAGE_JOBS = 16,
    QUERY_CONFIG = 32,
    MANAGE_CONFIG = 64,
    QUERY_IN_ARCHIVE = 128,
    MANAGE_IN_ARCHIVE = 256,
    QUERY_OUT_ARCHIVE = 512,
    MANAGE_OUT_ARCHIVE = 1024,
};
pub const farSUBMIT_LOW = FAX_ACCESS_RIGHTS_ENUM.SUBMIT_LOW;
pub const farSUBMIT_NORMAL = FAX_ACCESS_RIGHTS_ENUM.SUBMIT_NORMAL;
pub const farSUBMIT_HIGH = FAX_ACCESS_RIGHTS_ENUM.SUBMIT_HIGH;
pub const farQUERY_JOBS = FAX_ACCESS_RIGHTS_ENUM.QUERY_JOBS;
pub const farMANAGE_JOBS = FAX_ACCESS_RIGHTS_ENUM.MANAGE_JOBS;
pub const farQUERY_CONFIG = FAX_ACCESS_RIGHTS_ENUM.QUERY_CONFIG;
pub const farMANAGE_CONFIG = FAX_ACCESS_RIGHTS_ENUM.MANAGE_CONFIG;
pub const farQUERY_IN_ARCHIVE = FAX_ACCESS_RIGHTS_ENUM.QUERY_IN_ARCHIVE;
pub const farMANAGE_IN_ARCHIVE = FAX_ACCESS_RIGHTS_ENUM.MANAGE_IN_ARCHIVE;
pub const farQUERY_OUT_ARCHIVE = FAX_ACCESS_RIGHTS_ENUM.QUERY_OUT_ARCHIVE;
pub const farMANAGE_OUT_ARCHIVE = FAX_ACCESS_RIGHTS_ENUM.MANAGE_OUT_ARCHIVE;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxSecurity_Value = Guid.initString("77b508c1-09c0-47a2-91eb-fce7fdf2690e");
pub const IID_IFaxSecurity = &IID_IFaxSecurity_Value;
pub const IFaxSecurity = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Descriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity,
            pv_descriptor: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Descriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity,
            v_descriptor: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GrantedRights: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity,
            p_granted_rights: ?*FAX_ACCESS_RIGHTS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxSecurity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InformationType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity,
            pl_information_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InformationType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity,
            l_information_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDescriptor(self: *const T, pv_descriptor_: ?*VARIANT) HRESULT {
                return @as(*const IFaxSecurity.VTable, @ptrCast(self.vtable)).get_Descriptor(@as(*const IFaxSecurity, @ptrCast(self)), pv_descriptor_);
            }
            pub inline fn putDescriptor(self: *const T, v_descriptor_: VARIANT) HRESULT {
                return @as(*const IFaxSecurity.VTable, @ptrCast(self.vtable)).put_Descriptor(@as(*const IFaxSecurity, @ptrCast(self)), v_descriptor_);
            }
            pub inline fn getGrantedRights(self: *const T, p_granted_rights_: ?*FAX_ACCESS_RIGHTS_ENUM) HRESULT {
                return @as(*const IFaxSecurity.VTable, @ptrCast(self.vtable)).get_GrantedRights(@as(*const IFaxSecurity, @ptrCast(self)), p_granted_rights_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxSecurity.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxSecurity, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxSecurity.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxSecurity, @ptrCast(self)));
            }
            pub inline fn getInformationType(self: *const T, pl_information_type_: ?*i32) HRESULT {
                return @as(*const IFaxSecurity.VTable, @ptrCast(self.vtable)).get_InformationType(@as(*const IFaxSecurity, @ptrCast(self)), pl_information_type_);
            }
            pub inline fn putInformationType(self: *const T, l_information_type_: i32) HRESULT {
                return @as(*const IFaxSecurity.VTable, @ptrCast(self.vtable)).put_InformationType(@as(*const IFaxSecurity, @ptrCast(self)), l_information_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_PRIORITY_TYPE_ENUM = enum(i32) {
    LOW = 0,
    NORMAL = 1,
    HIGH = 2,
};
pub const fptLOW = FAX_PRIORITY_TYPE_ENUM.LOW;
pub const fptNORMAL = FAX_PRIORITY_TYPE_ENUM.NORMAL;
pub const fptHIGH = FAX_PRIORITY_TYPE_ENUM.HIGH;

pub const FAX_COVERPAGE_TYPE_ENUM = enum(i32) {
    NONE = 0,
    LOCAL = 1,
    SERVER = 2,
};
pub const fcptNONE = FAX_COVERPAGE_TYPE_ENUM.NONE;
pub const fcptLOCAL = FAX_COVERPAGE_TYPE_ENUM.LOCAL;
pub const fcptSERVER = FAX_COVERPAGE_TYPE_ENUM.SERVER;

pub const FAX_SCHEDULE_TYPE_ENUM = enum(i32) {
    NOW = 0,
    SPECIFIC_TIME = 1,
    DISCOUNT_PERIOD = 2,
};
pub const fstNOW = FAX_SCHEDULE_TYPE_ENUM.NOW;
pub const fstSPECIFIC_TIME = FAX_SCHEDULE_TYPE_ENUM.SPECIFIC_TIME;
pub const fstDISCOUNT_PERIOD = FAX_SCHEDULE_TYPE_ENUM.DISCOUNT_PERIOD;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxDocument_Value = Guid.initString("b207a246-09e3-4a4e-a7dc-fea31d29458f");
pub const IID_IFaxDocument = &IID_IFaxDocument_Value;
pub const IFaxDocument = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pbstr_body: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            bstr_body: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Sender: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pp_fax_sender: ?*?*IFaxSender,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recipients: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pp_fax_recipients: ?*?*IFaxRecipients,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CoverPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pbstr_cover_page: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CoverPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            bstr_cover_page: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pbstr_subject: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            bstr_subject: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Note: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pbstr_note: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Note: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            bstr_note: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScheduleTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pdate_schedule_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ScheduleTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            date_schedule_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceiptAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pbstr_receipt_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReceiptAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            bstr_receipt_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DocumentName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pbstr_document_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DocumentName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            bstr_document_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallHandle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pl_call_handle: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CallHandle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            l_call_handle: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CoverPageType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            p_cover_page_type: ?*FAX_COVERPAGE_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CoverPageType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            cover_page_type: FAX_COVERPAGE_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScheduleType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            p_schedule_type: ?*FAX_SCHEDULE_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ScheduleType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            schedule_type: FAX_SCHEDULE_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceiptType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            p_receipt_type: ?*FAX_RECEIPT_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReceiptType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            receipt_type: FAX_RECEIPT_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupBroadcastReceipts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pb_use_grouping: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupBroadcastReceipts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            b_use_grouping: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            p_priority: ?*FAX_PRIORITY_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            priority: FAX_PRIORITY_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TapiConnection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pp_tapi_connection: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_TapiConnection: *const fn (
            self: *const IFaxDocument,
            p_tapi_connection: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: *const fn (
            self: *const IFaxDocument,
            bstr_fax_server_name: ?BSTR,
            pv_fax_outgoing_job_i_ds: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectedSubmit: *const fn (
            self: *const IFaxDocument,
            p_fax_server: ?*IFaxServer,
            pv_fax_outgoing_job_i_ds: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttachFaxToReceipt: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            pb_attach_fax: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttachFaxToReceipt: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument,
            b_attach_fax: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBody(self: *const T, pbstr_body_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_Body(@as(*const IFaxDocument, @ptrCast(self)), pbstr_body_);
            }
            pub inline fn putBody(self: *const T, bstr_body_: ?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_Body(@as(*const IFaxDocument, @ptrCast(self)), bstr_body_);
            }
            pub inline fn getSender(self: *const T, pp_fax_sender_: ?*?*IFaxSender) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_Sender(@as(*const IFaxDocument, @ptrCast(self)), pp_fax_sender_);
            }
            pub inline fn getRecipients(self: *const T, pp_fax_recipients_: ?*?*IFaxRecipients) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_Recipients(@as(*const IFaxDocument, @ptrCast(self)), pp_fax_recipients_);
            }
            pub inline fn getCoverPage(self: *const T, pbstr_cover_page_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_CoverPage(@as(*const IFaxDocument, @ptrCast(self)), pbstr_cover_page_);
            }
            pub inline fn putCoverPage(self: *const T, bstr_cover_page_: ?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_CoverPage(@as(*const IFaxDocument, @ptrCast(self)), bstr_cover_page_);
            }
            pub inline fn getSubject(self: *const T, pbstr_subject_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_Subject(@as(*const IFaxDocument, @ptrCast(self)), pbstr_subject_);
            }
            pub inline fn putSubject(self: *const T, bstr_subject_: ?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_Subject(@as(*const IFaxDocument, @ptrCast(self)), bstr_subject_);
            }
            pub inline fn getNote(self: *const T, pbstr_note_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_Note(@as(*const IFaxDocument, @ptrCast(self)), pbstr_note_);
            }
            pub inline fn putNote(self: *const T, bstr_note_: ?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_Note(@as(*const IFaxDocument, @ptrCast(self)), bstr_note_);
            }
            pub inline fn getScheduleTime(self: *const T, pdate_schedule_time_: ?*f64) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_ScheduleTime(@as(*const IFaxDocument, @ptrCast(self)), pdate_schedule_time_);
            }
            pub inline fn putScheduleTime(self: *const T, date_schedule_time_: f64) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_ScheduleTime(@as(*const IFaxDocument, @ptrCast(self)), date_schedule_time_);
            }
            pub inline fn getReceiptAddress(self: *const T, pbstr_receipt_address_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_ReceiptAddress(@as(*const IFaxDocument, @ptrCast(self)), pbstr_receipt_address_);
            }
            pub inline fn putReceiptAddress(self: *const T, bstr_receipt_address_: ?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_ReceiptAddress(@as(*const IFaxDocument, @ptrCast(self)), bstr_receipt_address_);
            }
            pub inline fn getDocumentName(self: *const T, pbstr_document_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_DocumentName(@as(*const IFaxDocument, @ptrCast(self)), pbstr_document_name_);
            }
            pub inline fn putDocumentName(self: *const T, bstr_document_name_: ?BSTR) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_DocumentName(@as(*const IFaxDocument, @ptrCast(self)), bstr_document_name_);
            }
            pub inline fn getCallHandle(self: *const T, pl_call_handle_: ?*i32) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_CallHandle(@as(*const IFaxDocument, @ptrCast(self)), pl_call_handle_);
            }
            pub inline fn putCallHandle(self: *const T, l_call_handle_: i32) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_CallHandle(@as(*const IFaxDocument, @ptrCast(self)), l_call_handle_);
            }
            pub inline fn getCoverPageType(self: *const T, p_cover_page_type_: ?*FAX_COVERPAGE_TYPE_ENUM) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_CoverPageType(@as(*const IFaxDocument, @ptrCast(self)), p_cover_page_type_);
            }
            pub inline fn putCoverPageType(self: *const T, cover_page_type_: FAX_COVERPAGE_TYPE_ENUM) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_CoverPageType(@as(*const IFaxDocument, @ptrCast(self)), cover_page_type_);
            }
            pub inline fn getScheduleType(self: *const T, p_schedule_type_: ?*FAX_SCHEDULE_TYPE_ENUM) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_ScheduleType(@as(*const IFaxDocument, @ptrCast(self)), p_schedule_type_);
            }
            pub inline fn putScheduleType(self: *const T, schedule_type_: FAX_SCHEDULE_TYPE_ENUM) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_ScheduleType(@as(*const IFaxDocument, @ptrCast(self)), schedule_type_);
            }
            pub inline fn getReceiptType(self: *const T, p_receipt_type_: ?*FAX_RECEIPT_TYPE_ENUM) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_ReceiptType(@as(*const IFaxDocument, @ptrCast(self)), p_receipt_type_);
            }
            pub inline fn putReceiptType(self: *const T, receipt_type_: FAX_RECEIPT_TYPE_ENUM) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_ReceiptType(@as(*const IFaxDocument, @ptrCast(self)), receipt_type_);
            }
            pub inline fn getGroupBroadcastReceipts(self: *const T, pb_use_grouping_: ?*i16) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_GroupBroadcastReceipts(@as(*const IFaxDocument, @ptrCast(self)), pb_use_grouping_);
            }
            pub inline fn putGroupBroadcastReceipts(self: *const T, b_use_grouping_: i16) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_GroupBroadcastReceipts(@as(*const IFaxDocument, @ptrCast(self)), b_use_grouping_);
            }
            pub inline fn getPriority(self: *const T, p_priority_: ?*FAX_PRIORITY_TYPE_ENUM) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IFaxDocument, @ptrCast(self)), p_priority_);
            }
            pub inline fn putPriority(self: *const T, priority_: FAX_PRIORITY_TYPE_ENUM) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_Priority(@as(*const IFaxDocument, @ptrCast(self)), priority_);
            }
            pub inline fn getTapiConnection(self: *const T, pp_tapi_connection_: ?*?*IDispatch) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_TapiConnection(@as(*const IFaxDocument, @ptrCast(self)), pp_tapi_connection_);
            }
            pub inline fn putrefTapiConnection(self: *const T, p_tapi_connection_: ?*IDispatch) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).putref_TapiConnection(@as(*const IFaxDocument, @ptrCast(self)), p_tapi_connection_);
            }
            pub inline fn submit(self: *const T, bstr_fax_server_name_: ?BSTR, pv_fax_outgoing_job_i_ds_: ?*VARIANT) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).Submit(@as(*const IFaxDocument, @ptrCast(self)), bstr_fax_server_name_, pv_fax_outgoing_job_i_ds_);
            }
            pub inline fn connectedSubmit(self: *const T, p_fax_server_: ?*IFaxServer, pv_fax_outgoing_job_i_ds_: ?*VARIANT) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).ConnectedSubmit(@as(*const IFaxDocument, @ptrCast(self)), p_fax_server_, pv_fax_outgoing_job_i_ds_);
            }
            pub inline fn getAttachFaxToReceipt(self: *const T, pb_attach_fax_: ?*i16) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).get_AttachFaxToReceipt(@as(*const IFaxDocument, @ptrCast(self)), pb_attach_fax_);
            }
            pub inline fn putAttachFaxToReceipt(self: *const T, b_attach_fax_: i16) HRESULT {
                return @as(*const IFaxDocument.VTable, @ptrCast(self.vtable)).put_AttachFaxToReceipt(@as(*const IFaxDocument, @ptrCast(self)), b_attach_fax_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxSender_Value = Guid.initString("0d879d7d-f57a-4cc6-a6f9-3ee5d527b46a");
pub const IID_IFaxSender = &IID_IFaxSender_Value;
pub const IFaxSender = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BillingCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_billing_code: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BillingCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_billing_code: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_City: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_city: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_City: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_city: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Company: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_company: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Company: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_company: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Country: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_country: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Country: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_country: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Department: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_department: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Department: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_department: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Email: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_email: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Email: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_email: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_fax_number: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_fax_number: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HomePhone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_home_phone: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HomePhone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_home_phone: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_t_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_t_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OfficePhone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_office_phone: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OfficePhone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_office_phone: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OfficeLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_office_location: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OfficeLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_office_location: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_state: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_state: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StreetAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_street_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StreetAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_street_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Title: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Title: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_title: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ZipCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            pbstr_zip_code: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ZipCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSender,
            bstr_zip_code: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadDefaultSender: *const fn (
            self: *const IFaxSender,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveDefaultSender: *const fn (
            self: *const IFaxSender,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBillingCode(self: *const T, pbstr_billing_code_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_BillingCode(@as(*const IFaxSender, @ptrCast(self)), pbstr_billing_code_);
            }
            pub inline fn putBillingCode(self: *const T, bstr_billing_code_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_BillingCode(@as(*const IFaxSender, @ptrCast(self)), bstr_billing_code_);
            }
            pub inline fn getCity(self: *const T, pbstr_city_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_City(@as(*const IFaxSender, @ptrCast(self)), pbstr_city_);
            }
            pub inline fn putCity(self: *const T, bstr_city_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_City(@as(*const IFaxSender, @ptrCast(self)), bstr_city_);
            }
            pub inline fn getCompany(self: *const T, pbstr_company_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_Company(@as(*const IFaxSender, @ptrCast(self)), pbstr_company_);
            }
            pub inline fn putCompany(self: *const T, bstr_company_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_Company(@as(*const IFaxSender, @ptrCast(self)), bstr_company_);
            }
            pub inline fn getCountry(self: *const T, pbstr_country_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_Country(@as(*const IFaxSender, @ptrCast(self)), pbstr_country_);
            }
            pub inline fn putCountry(self: *const T, bstr_country_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_Country(@as(*const IFaxSender, @ptrCast(self)), bstr_country_);
            }
            pub inline fn getDepartment(self: *const T, pbstr_department_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_Department(@as(*const IFaxSender, @ptrCast(self)), pbstr_department_);
            }
            pub inline fn putDepartment(self: *const T, bstr_department_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_Department(@as(*const IFaxSender, @ptrCast(self)), bstr_department_);
            }
            pub inline fn getEmail(self: *const T, pbstr_email_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_Email(@as(*const IFaxSender, @ptrCast(self)), pbstr_email_);
            }
            pub inline fn putEmail(self: *const T, bstr_email_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_Email(@as(*const IFaxSender, @ptrCast(self)), bstr_email_);
            }
            pub inline fn getFaxNumber(self: *const T, pbstr_fax_number_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_FaxNumber(@as(*const IFaxSender, @ptrCast(self)), pbstr_fax_number_);
            }
            pub inline fn putFaxNumber(self: *const T, bstr_fax_number_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_FaxNumber(@as(*const IFaxSender, @ptrCast(self)), bstr_fax_number_);
            }
            pub inline fn getHomePhone(self: *const T, pbstr_home_phone_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_HomePhone(@as(*const IFaxSender, @ptrCast(self)), pbstr_home_phone_);
            }
            pub inline fn putHomePhone(self: *const T, bstr_home_phone_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_HomePhone(@as(*const IFaxSender, @ptrCast(self)), bstr_home_phone_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFaxSender, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFaxSender, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getTSID(self: *const T, pbstr_t_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_TSID(@as(*const IFaxSender, @ptrCast(self)), pbstr_t_s_i_d_);
            }
            pub inline fn putTSID(self: *const T, bstr_t_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_TSID(@as(*const IFaxSender, @ptrCast(self)), bstr_t_s_i_d_);
            }
            pub inline fn getOfficePhone(self: *const T, pbstr_office_phone_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_OfficePhone(@as(*const IFaxSender, @ptrCast(self)), pbstr_office_phone_);
            }
            pub inline fn putOfficePhone(self: *const T, bstr_office_phone_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_OfficePhone(@as(*const IFaxSender, @ptrCast(self)), bstr_office_phone_);
            }
            pub inline fn getOfficeLocation(self: *const T, pbstr_office_location_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_OfficeLocation(@as(*const IFaxSender, @ptrCast(self)), pbstr_office_location_);
            }
            pub inline fn putOfficeLocation(self: *const T, bstr_office_location_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_OfficeLocation(@as(*const IFaxSender, @ptrCast(self)), bstr_office_location_);
            }
            pub inline fn getState(self: *const T, pbstr_state_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_State(@as(*const IFaxSender, @ptrCast(self)), pbstr_state_);
            }
            pub inline fn putState(self: *const T, bstr_state_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_State(@as(*const IFaxSender, @ptrCast(self)), bstr_state_);
            }
            pub inline fn getStreetAddress(self: *const T, pbstr_street_address_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_StreetAddress(@as(*const IFaxSender, @ptrCast(self)), pbstr_street_address_);
            }
            pub inline fn putStreetAddress(self: *const T, bstr_street_address_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_StreetAddress(@as(*const IFaxSender, @ptrCast(self)), bstr_street_address_);
            }
            pub inline fn getTitle(self: *const T, pbstr_title_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_Title(@as(*const IFaxSender, @ptrCast(self)), pbstr_title_);
            }
            pub inline fn putTitle(self: *const T, bstr_title_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_Title(@as(*const IFaxSender, @ptrCast(self)), bstr_title_);
            }
            pub inline fn getZipCode(self: *const T, pbstr_zip_code_: ?*?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).get_ZipCode(@as(*const IFaxSender, @ptrCast(self)), pbstr_zip_code_);
            }
            pub inline fn putZipCode(self: *const T, bstr_zip_code_: ?BSTR) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).put_ZipCode(@as(*const IFaxSender, @ptrCast(self)), bstr_zip_code_);
            }
            pub inline fn loadDefaultSender(self: *const T) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).LoadDefaultSender(@as(*const IFaxSender, @ptrCast(self)));
            }
            pub inline fn saveDefaultSender(self: *const T) HRESULT {
                return @as(*const IFaxSender.VTable, @ptrCast(self.vtable)).SaveDefaultSender(@as(*const IFaxSender, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxRecipient_Value = Guid.initString("9a3da3a0-538d-42b6-9444-aaa57d0ce2bc");
pub const IID_IFaxRecipient = &IID_IFaxRecipient_Value;
pub const IFaxRecipient = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxRecipient,
            pbstr_fax_number: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxRecipient,
            bstr_fax_number: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxRecipient,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxRecipient,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFaxNumber(self: *const T, pbstr_fax_number_: ?*?BSTR) HRESULT {
                return @as(*const IFaxRecipient.VTable, @ptrCast(self.vtable)).get_FaxNumber(@as(*const IFaxRecipient, @ptrCast(self)), pbstr_fax_number_);
            }
            pub inline fn putFaxNumber(self: *const T, bstr_fax_number_: ?BSTR) HRESULT {
                return @as(*const IFaxRecipient.VTable, @ptrCast(self.vtable)).put_FaxNumber(@as(*const IFaxRecipient, @ptrCast(self)), bstr_fax_number_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxRecipient.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFaxRecipient, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IFaxRecipient.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFaxRecipient, @ptrCast(self)), bstr_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxRecipients_Value = Guid.initString("b9c9de5a-894e-4492-9fa3-08c627c11d5d");
pub const IID_IFaxRecipients = &IID_IFaxRecipients_Value;
pub const IFaxRecipients = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxRecipients,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxRecipients,
            l_index: i32,
            pp_fax_recipient: ?*?*IFaxRecipient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxRecipients,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IFaxRecipients,
            bstr_fax_number: ?BSTR,
            bstr_recipient_name: ?BSTR,
            pp_fax_recipient: ?*?*IFaxRecipient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IFaxRecipients,
            l_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxRecipients.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxRecipients, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, pp_fax_recipient_: ?*?*IFaxRecipient) HRESULT {
                return @as(*const IFaxRecipients.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxRecipients, @ptrCast(self)), l_index_, pp_fax_recipient_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxRecipients.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxRecipients, @ptrCast(self)), pl_count_);
            }
            pub inline fn add(self: *const T, bstr_fax_number_: ?BSTR, bstr_recipient_name_: ?BSTR, pp_fax_recipient_: ?*?*IFaxRecipient) HRESULT {
                return @as(*const IFaxRecipients.VTable, @ptrCast(self.vtable)).Add(@as(*const IFaxRecipients, @ptrCast(self)), bstr_fax_number_, bstr_recipient_name_, pp_fax_recipient_);
            }
            pub inline fn remove(self: *const T, l_index_: i32) HRESULT {
                return @as(*const IFaxRecipients.VTable, @ptrCast(self.vtable)).Remove(@as(*const IFaxRecipients, @ptrCast(self)), l_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxIncomingArchive_Value = Guid.initString("76062cc7-f714-4fbd-aa06-ed6e4a4b70f3");
pub const IID_IFaxIncomingArchive = &IID_IFaxIncomingArchive_Value;
pub const IFaxIncomingArchive = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            pb_use_archive: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            b_use_archive: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArchiveFolder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            pbstr_archive_folder: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ArchiveFolder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            bstr_archive_folder: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeQuotaWarning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            pb_size_quota_warning: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SizeQuotaWarning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            b_size_quota_warning: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HighQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            pl_high_quota_water_mark: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HighQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            l_high_quota_water_mark: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LowQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            pl_low_quota_water_mark: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LowQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            l_low_quota_water_mark: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            pl_age_limit: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            l_age_limit: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeLow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            pl_size_low: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeHigh: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingArchive,
            pl_size_high: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxIncomingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxIncomingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessages: *const fn (
            self: *const IFaxIncomingArchive,
            l_prefetch_size: i32,
            p_fax_incoming_message_iterator: ?*?*IFaxIncomingMessageIterator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessage: *const fn (
            self: *const IFaxIncomingArchive,
            bstr_message_id: ?BSTR,
            p_fax_incoming_message: ?*?*IFaxIncomingMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getUseArchive(self: *const T, pb_use_archive_: ?*i16) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).get_UseArchive(@as(*const IFaxIncomingArchive, @ptrCast(self)), pb_use_archive_);
            }
            pub inline fn putUseArchive(self: *const T, b_use_archive_: i16) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).put_UseArchive(@as(*const IFaxIncomingArchive, @ptrCast(self)), b_use_archive_);
            }
            pub inline fn getArchiveFolder(self: *const T, pbstr_archive_folder_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).get_ArchiveFolder(@as(*const IFaxIncomingArchive, @ptrCast(self)), pbstr_archive_folder_);
            }
            pub inline fn putArchiveFolder(self: *const T, bstr_archive_folder_: ?BSTR) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).put_ArchiveFolder(@as(*const IFaxIncomingArchive, @ptrCast(self)), bstr_archive_folder_);
            }
            pub inline fn getSizeQuotaWarning(self: *const T, pb_size_quota_warning_: ?*i16) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).get_SizeQuotaWarning(@as(*const IFaxIncomingArchive, @ptrCast(self)), pb_size_quota_warning_);
            }
            pub inline fn putSizeQuotaWarning(self: *const T, b_size_quota_warning_: i16) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).put_SizeQuotaWarning(@as(*const IFaxIncomingArchive, @ptrCast(self)), b_size_quota_warning_);
            }
            pub inline fn getHighQuotaWaterMark(self: *const T, pl_high_quota_water_mark_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).get_HighQuotaWaterMark(@as(*const IFaxIncomingArchive, @ptrCast(self)), pl_high_quota_water_mark_);
            }
            pub inline fn putHighQuotaWaterMark(self: *const T, l_high_quota_water_mark_: i32) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).put_HighQuotaWaterMark(@as(*const IFaxIncomingArchive, @ptrCast(self)), l_high_quota_water_mark_);
            }
            pub inline fn getLowQuotaWaterMark(self: *const T, pl_low_quota_water_mark_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).get_LowQuotaWaterMark(@as(*const IFaxIncomingArchive, @ptrCast(self)), pl_low_quota_water_mark_);
            }
            pub inline fn putLowQuotaWaterMark(self: *const T, l_low_quota_water_mark_: i32) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).put_LowQuotaWaterMark(@as(*const IFaxIncomingArchive, @ptrCast(self)), l_low_quota_water_mark_);
            }
            pub inline fn getAgeLimit(self: *const T, pl_age_limit_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).get_AgeLimit(@as(*const IFaxIncomingArchive, @ptrCast(self)), pl_age_limit_);
            }
            pub inline fn putAgeLimit(self: *const T, l_age_limit_: i32) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).put_AgeLimit(@as(*const IFaxIncomingArchive, @ptrCast(self)), l_age_limit_);
            }
            pub inline fn getSizeLow(self: *const T, pl_size_low_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).get_SizeLow(@as(*const IFaxIncomingArchive, @ptrCast(self)), pl_size_low_);
            }
            pub inline fn getSizeHigh(self: *const T, pl_size_high_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).get_SizeHigh(@as(*const IFaxIncomingArchive, @ptrCast(self)), pl_size_high_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxIncomingArchive, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxIncomingArchive, @ptrCast(self)));
            }
            pub inline fn getMessages(self: *const T, l_prefetch_size_: i32, p_fax_incoming_message_iterator_: ?*?*IFaxIncomingMessageIterator) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).GetMessages(@as(*const IFaxIncomingArchive, @ptrCast(self)), l_prefetch_size_, p_fax_incoming_message_iterator_);
            }
            pub inline fn getMessage(self: *const T, bstr_message_id_: ?BSTR, p_fax_incoming_message_: ?*?*IFaxIncomingMessage) HRESULT {
                return @as(*const IFaxIncomingArchive.VTable, @ptrCast(self.vtable)).GetMessage(@as(*const IFaxIncomingArchive, @ptrCast(self)), bstr_message_id_, p_fax_incoming_message_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxIncomingQueue_Value = Guid.initString("902e64ef-8fd8-4b75-9725-6014df161545");
pub const IID_IFaxIncomingQueue = &IID_IFaxIncomingQueue_Value;
pub const IFaxIncomingQueue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Blocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingQueue,
            pb_blocked: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Blocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingQueue,
            b_blocked: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxIncomingQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxIncomingQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJobs: *const fn (
            self: *const IFaxIncomingQueue,
            p_fax_incoming_jobs: ?*?*IFaxIncomingJobs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJob: *const fn (
            self: *const IFaxIncomingQueue,
            bstr_job_id: ?BSTR,
            p_fax_incoming_job: ?*?*IFaxIncomingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBlocked(self: *const T, pb_blocked_: ?*i16) HRESULT {
                return @as(*const IFaxIncomingQueue.VTable, @ptrCast(self.vtable)).get_Blocked(@as(*const IFaxIncomingQueue, @ptrCast(self)), pb_blocked_);
            }
            pub inline fn putBlocked(self: *const T, b_blocked_: i16) HRESULT {
                return @as(*const IFaxIncomingQueue.VTable, @ptrCast(self.vtable)).put_Blocked(@as(*const IFaxIncomingQueue, @ptrCast(self)), b_blocked_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxIncomingQueue.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxIncomingQueue, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxIncomingQueue.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxIncomingQueue, @ptrCast(self)));
            }
            pub inline fn getJobs(self: *const T, p_fax_incoming_jobs_: ?*?*IFaxIncomingJobs) HRESULT {
                return @as(*const IFaxIncomingQueue.VTable, @ptrCast(self.vtable)).GetJobs(@as(*const IFaxIncomingQueue, @ptrCast(self)), p_fax_incoming_jobs_);
            }
            pub inline fn getJob(self: *const T, bstr_job_id_: ?BSTR, p_fax_incoming_job_: ?*?*IFaxIncomingJob) HRESULT {
                return @as(*const IFaxIncomingQueue.VTable, @ptrCast(self.vtable)).GetJob(@as(*const IFaxIncomingQueue, @ptrCast(self)), bstr_job_id_, p_fax_incoming_job_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutgoingArchive_Value = Guid.initString("c9c28f40-8d80-4e53-810f-9a79919b49fd");
pub const IID_IFaxOutgoingArchive = &IID_IFaxOutgoingArchive_Value;
pub const IFaxOutgoingArchive = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            pb_use_archive: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            b_use_archive: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArchiveFolder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            pbstr_archive_folder: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ArchiveFolder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            bstr_archive_folder: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeQuotaWarning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            pb_size_quota_warning: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SizeQuotaWarning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            b_size_quota_warning: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HighQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            pl_high_quota_water_mark: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HighQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            l_high_quota_water_mark: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LowQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            pl_low_quota_water_mark: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LowQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            l_low_quota_water_mark: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            pl_age_limit: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            l_age_limit: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeLow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            pl_size_low: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeHigh: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingArchive,
            pl_size_high: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxOutgoingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxOutgoingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessages: *const fn (
            self: *const IFaxOutgoingArchive,
            l_prefetch_size: i32,
            p_fax_outgoing_message_iterator: ?*?*IFaxOutgoingMessageIterator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessage: *const fn (
            self: *const IFaxOutgoingArchive,
            bstr_message_id: ?BSTR,
            p_fax_outgoing_message: ?*?*IFaxOutgoingMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getUseArchive(self: *const T, pb_use_archive_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).get_UseArchive(@as(*const IFaxOutgoingArchive, @ptrCast(self)), pb_use_archive_);
            }
            pub inline fn putUseArchive(self: *const T, b_use_archive_: i16) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).put_UseArchive(@as(*const IFaxOutgoingArchive, @ptrCast(self)), b_use_archive_);
            }
            pub inline fn getArchiveFolder(self: *const T, pbstr_archive_folder_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).get_ArchiveFolder(@as(*const IFaxOutgoingArchive, @ptrCast(self)), pbstr_archive_folder_);
            }
            pub inline fn putArchiveFolder(self: *const T, bstr_archive_folder_: ?BSTR) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).put_ArchiveFolder(@as(*const IFaxOutgoingArchive, @ptrCast(self)), bstr_archive_folder_);
            }
            pub inline fn getSizeQuotaWarning(self: *const T, pb_size_quota_warning_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).get_SizeQuotaWarning(@as(*const IFaxOutgoingArchive, @ptrCast(self)), pb_size_quota_warning_);
            }
            pub inline fn putSizeQuotaWarning(self: *const T, b_size_quota_warning_: i16) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).put_SizeQuotaWarning(@as(*const IFaxOutgoingArchive, @ptrCast(self)), b_size_quota_warning_);
            }
            pub inline fn getHighQuotaWaterMark(self: *const T, pl_high_quota_water_mark_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).get_HighQuotaWaterMark(@as(*const IFaxOutgoingArchive, @ptrCast(self)), pl_high_quota_water_mark_);
            }
            pub inline fn putHighQuotaWaterMark(self: *const T, l_high_quota_water_mark_: i32) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).put_HighQuotaWaterMark(@as(*const IFaxOutgoingArchive, @ptrCast(self)), l_high_quota_water_mark_);
            }
            pub inline fn getLowQuotaWaterMark(self: *const T, pl_low_quota_water_mark_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).get_LowQuotaWaterMark(@as(*const IFaxOutgoingArchive, @ptrCast(self)), pl_low_quota_water_mark_);
            }
            pub inline fn putLowQuotaWaterMark(self: *const T, l_low_quota_water_mark_: i32) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).put_LowQuotaWaterMark(@as(*const IFaxOutgoingArchive, @ptrCast(self)), l_low_quota_water_mark_);
            }
            pub inline fn getAgeLimit(self: *const T, pl_age_limit_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).get_AgeLimit(@as(*const IFaxOutgoingArchive, @ptrCast(self)), pl_age_limit_);
            }
            pub inline fn putAgeLimit(self: *const T, l_age_limit_: i32) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).put_AgeLimit(@as(*const IFaxOutgoingArchive, @ptrCast(self)), l_age_limit_);
            }
            pub inline fn getSizeLow(self: *const T, pl_size_low_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).get_SizeLow(@as(*const IFaxOutgoingArchive, @ptrCast(self)), pl_size_low_);
            }
            pub inline fn getSizeHigh(self: *const T, pl_size_high_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).get_SizeHigh(@as(*const IFaxOutgoingArchive, @ptrCast(self)), pl_size_high_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxOutgoingArchive, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxOutgoingArchive, @ptrCast(self)));
            }
            pub inline fn getMessages(self: *const T, l_prefetch_size_: i32, p_fax_outgoing_message_iterator_: ?*?*IFaxOutgoingMessageIterator) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).GetMessages(@as(*const IFaxOutgoingArchive, @ptrCast(self)), l_prefetch_size_, p_fax_outgoing_message_iterator_);
            }
            pub inline fn getMessage(self: *const T, bstr_message_id_: ?BSTR, p_fax_outgoing_message_: ?*?*IFaxOutgoingMessage) HRESULT {
                return @as(*const IFaxOutgoingArchive.VTable, @ptrCast(self.vtable)).GetMessage(@as(*const IFaxOutgoingArchive, @ptrCast(self)), bstr_message_id_, p_fax_outgoing_message_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutgoingQueue_Value = Guid.initString("80b1df24-d9ac-4333-b373-487cedc80ce5");
pub const IID_IFaxOutgoingQueue = &IID_IFaxOutgoingQueue_Value;
pub const IFaxOutgoingQueue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Blocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pb_blocked: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Blocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            b_blocked: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Paused: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pb_paused: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Paused: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            b_paused: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowPersonalCoverPages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pb_allow_personal_cover_pages: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowPersonalCoverPages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            b_allow_personal_cover_pages: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseDeviceTSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pb_use_device_t_s_i_d: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseDeviceTSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            b_use_device_t_s_i_d: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Retries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pl_retries: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Retries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            l_retries: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RetryDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pl_retry_delay: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RetryDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            l_retry_delay: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DiscountRateStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pdate_discount_rate_start: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DiscountRateStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            date_discount_rate_start: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DiscountRateEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pdate_discount_rate_end: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DiscountRateEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            date_discount_rate_end: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pl_age_limit: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            l_age_limit: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Branding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            pb_branding: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Branding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingQueue,
            b_branding: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxOutgoingQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxOutgoingQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJobs: *const fn (
            self: *const IFaxOutgoingQueue,
            p_fax_outgoing_jobs: ?*?*IFaxOutgoingJobs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJob: *const fn (
            self: *const IFaxOutgoingQueue,
            bstr_job_id: ?BSTR,
            p_fax_outgoing_job: ?*?*IFaxOutgoingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBlocked(self: *const T, pb_blocked_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_Blocked(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pb_blocked_);
            }
            pub inline fn putBlocked(self: *const T, b_blocked_: i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_Blocked(@as(*const IFaxOutgoingQueue, @ptrCast(self)), b_blocked_);
            }
            pub inline fn getPaused(self: *const T, pb_paused_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_Paused(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pb_paused_);
            }
            pub inline fn putPaused(self: *const T, b_paused_: i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_Paused(@as(*const IFaxOutgoingQueue, @ptrCast(self)), b_paused_);
            }
            pub inline fn getAllowPersonalCoverPages(self: *const T, pb_allow_personal_cover_pages_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_AllowPersonalCoverPages(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pb_allow_personal_cover_pages_);
            }
            pub inline fn putAllowPersonalCoverPages(self: *const T, b_allow_personal_cover_pages_: i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_AllowPersonalCoverPages(@as(*const IFaxOutgoingQueue, @ptrCast(self)), b_allow_personal_cover_pages_);
            }
            pub inline fn getUseDeviceTSID(self: *const T, pb_use_device_t_s_i_d_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_UseDeviceTSID(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pb_use_device_t_s_i_d_);
            }
            pub inline fn putUseDeviceTSID(self: *const T, b_use_device_t_s_i_d_: i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_UseDeviceTSID(@as(*const IFaxOutgoingQueue, @ptrCast(self)), b_use_device_t_s_i_d_);
            }
            pub inline fn getRetries(self: *const T, pl_retries_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_Retries(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pl_retries_);
            }
            pub inline fn putRetries(self: *const T, l_retries_: i32) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_Retries(@as(*const IFaxOutgoingQueue, @ptrCast(self)), l_retries_);
            }
            pub inline fn getRetryDelay(self: *const T, pl_retry_delay_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_RetryDelay(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pl_retry_delay_);
            }
            pub inline fn putRetryDelay(self: *const T, l_retry_delay_: i32) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_RetryDelay(@as(*const IFaxOutgoingQueue, @ptrCast(self)), l_retry_delay_);
            }
            pub inline fn getDiscountRateStart(self: *const T, pdate_discount_rate_start_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_DiscountRateStart(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pdate_discount_rate_start_);
            }
            pub inline fn putDiscountRateStart(self: *const T, date_discount_rate_start_: f64) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_DiscountRateStart(@as(*const IFaxOutgoingQueue, @ptrCast(self)), date_discount_rate_start_);
            }
            pub inline fn getDiscountRateEnd(self: *const T, pdate_discount_rate_end_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_DiscountRateEnd(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pdate_discount_rate_end_);
            }
            pub inline fn putDiscountRateEnd(self: *const T, date_discount_rate_end_: f64) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_DiscountRateEnd(@as(*const IFaxOutgoingQueue, @ptrCast(self)), date_discount_rate_end_);
            }
            pub inline fn getAgeLimit(self: *const T, pl_age_limit_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_AgeLimit(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pl_age_limit_);
            }
            pub inline fn putAgeLimit(self: *const T, l_age_limit_: i32) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_AgeLimit(@as(*const IFaxOutgoingQueue, @ptrCast(self)), l_age_limit_);
            }
            pub inline fn getBranding(self: *const T, pb_branding_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).get_Branding(@as(*const IFaxOutgoingQueue, @ptrCast(self)), pb_branding_);
            }
            pub inline fn putBranding(self: *const T, b_branding_: i16) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).put_Branding(@as(*const IFaxOutgoingQueue, @ptrCast(self)), b_branding_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxOutgoingQueue, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxOutgoingQueue, @ptrCast(self)));
            }
            pub inline fn getJobs(self: *const T, p_fax_outgoing_jobs_: ?*?*IFaxOutgoingJobs) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).GetJobs(@as(*const IFaxOutgoingQueue, @ptrCast(self)), p_fax_outgoing_jobs_);
            }
            pub inline fn getJob(self: *const T, bstr_job_id_: ?BSTR, p_fax_outgoing_job_: ?*?*IFaxOutgoingJob) HRESULT {
                return @as(*const IFaxOutgoingQueue.VTable, @ptrCast(self.vtable)).GetJob(@as(*const IFaxOutgoingQueue, @ptrCast(self)), bstr_job_id_, p_fax_outgoing_job_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxIncomingMessageIterator_Value = Guid.initString("fd73ecc4-6f06-4f52-82a8-f7ba06ae3108");
pub const IID_IFaxIncomingMessageIterator = &IID_IFaxIncomingMessageIterator_Value;
pub const IFaxIncomingMessageIterator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Message: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessageIterator,
            p_fax_incoming_message: ?*?*IFaxIncomingMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrefetchSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessageIterator,
            pl_prefetch_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrefetchSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessageIterator,
            l_prefetch_size: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AtEOF: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessageIterator,
            pb_e_o_f: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveFirst: *const fn (
            self: *const IFaxIncomingMessageIterator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveNext: *const fn (
            self: *const IFaxIncomingMessageIterator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getMessage(self: *const T, p_fax_incoming_message_: ?*?*IFaxIncomingMessage) HRESULT {
                return @as(*const IFaxIncomingMessageIterator.VTable, @ptrCast(self.vtable)).get_Message(@as(*const IFaxIncomingMessageIterator, @ptrCast(self)), p_fax_incoming_message_);
            }
            pub inline fn getPrefetchSize(self: *const T, pl_prefetch_size_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingMessageIterator.VTable, @ptrCast(self.vtable)).get_PrefetchSize(@as(*const IFaxIncomingMessageIterator, @ptrCast(self)), pl_prefetch_size_);
            }
            pub inline fn putPrefetchSize(self: *const T, l_prefetch_size_: i32) HRESULT {
                return @as(*const IFaxIncomingMessageIterator.VTable, @ptrCast(self.vtable)).put_PrefetchSize(@as(*const IFaxIncomingMessageIterator, @ptrCast(self)), l_prefetch_size_);
            }
            pub inline fn getAtEOF(self: *const T, pb_e_o_f_: ?*i16) HRESULT {
                return @as(*const IFaxIncomingMessageIterator.VTable, @ptrCast(self.vtable)).get_AtEOF(@as(*const IFaxIncomingMessageIterator, @ptrCast(self)), pb_e_o_f_);
            }
            pub inline fn moveFirst(self: *const T) HRESULT {
                return @as(*const IFaxIncomingMessageIterator.VTable, @ptrCast(self.vtable)).MoveFirst(@as(*const IFaxIncomingMessageIterator, @ptrCast(self)));
            }
            pub inline fn moveNext(self: *const T) HRESULT {
                return @as(*const IFaxIncomingMessageIterator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IFaxIncomingMessageIterator, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxIncomingMessage_Value = Guid.initString("7cab88fa-2ef9-4851-b2f3-1d148fed8447");
pub const IID_IFaxIncomingMessage = &IID_IFaxIncomingMessage_Value;
pub const IFaxIncomingMessage = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pbstr_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Pages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pl_pages: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pl_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pbstr_device_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Retries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pl_retries: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pdate_transmission_start: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pdate_transmission_end: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pbstr_c_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pbstr_t_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallerId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pbstr_caller_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoutingInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage,
            pbstr_routing_information: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTiff: *const fn (
            self: *const IFaxIncomingMessage,
            bstr_tiff_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFaxIncomingMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, pbstr_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IFaxIncomingMessage, @ptrCast(self)), pbstr_id_);
            }
            pub inline fn getPages(self: *const T, pl_pages_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_Pages(@as(*const IFaxIncomingMessage, @ptrCast(self)), pl_pages_);
            }
            pub inline fn getSize(self: *const T, pl_size_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IFaxIncomingMessage, @ptrCast(self)), pl_size_);
            }
            pub inline fn getDeviceName(self: *const T, pbstr_device_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_DeviceName(@as(*const IFaxIncomingMessage, @ptrCast(self)), pbstr_device_name_);
            }
            pub inline fn getRetries(self: *const T, pl_retries_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_Retries(@as(*const IFaxIncomingMessage, @ptrCast(self)), pl_retries_);
            }
            pub inline fn getTransmissionStart(self: *const T, pdate_transmission_start_: ?*f64) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_TransmissionStart(@as(*const IFaxIncomingMessage, @ptrCast(self)), pdate_transmission_start_);
            }
            pub inline fn getTransmissionEnd(self: *const T, pdate_transmission_end_: ?*f64) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_TransmissionEnd(@as(*const IFaxIncomingMessage, @ptrCast(self)), pdate_transmission_end_);
            }
            pub inline fn getCSID(self: *const T, pbstr_c_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_CSID(@as(*const IFaxIncomingMessage, @ptrCast(self)), pbstr_c_s_i_d_);
            }
            pub inline fn getTSID(self: *const T, pbstr_t_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_TSID(@as(*const IFaxIncomingMessage, @ptrCast(self)), pbstr_t_s_i_d_);
            }
            pub inline fn getCallerId(self: *const T, pbstr_caller_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_CallerId(@as(*const IFaxIncomingMessage, @ptrCast(self)), pbstr_caller_id_);
            }
            pub inline fn getRoutingInformation(self: *const T, pbstr_routing_information_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).get_RoutingInformation(@as(*const IFaxIncomingMessage, @ptrCast(self)), pbstr_routing_information_);
            }
            pub inline fn copyTiff(self: *const T, bstr_tiff_path_: ?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).CopyTiff(@as(*const IFaxIncomingMessage, @ptrCast(self)), bstr_tiff_path_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFaxIncomingMessage.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFaxIncomingMessage, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutgoingJobs_Value = Guid.initString("2c56d8e6-8c2f-4573-944c-e505f8f5aeed");
pub const IID_IFaxOutgoingJobs = &IID_IFaxOutgoingJobs_Value;
pub const IFaxOutgoingJobs = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJobs,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJobs,
            v_index: VARIANT,
            p_fax_outgoing_job: ?*?*IFaxOutgoingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJobs,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxOutgoingJobs.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxOutgoingJobs, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, v_index_: VARIANT, p_fax_outgoing_job_: ?*?*IFaxOutgoingJob) HRESULT {
                return @as(*const IFaxOutgoingJobs.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxOutgoingJobs, @ptrCast(self)), v_index_, p_fax_outgoing_job_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingJobs.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxOutgoingJobs, @ptrCast(self)), pl_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutgoingJob_Value = Guid.initString("6356daad-6614-4583-bf7a-3ad67bbfc71c");
pub const IID_IFaxOutgoingJob = &IID_IFaxOutgoingJob_Value;
pub const IFaxOutgoingJob = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pbstr_subject: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DocumentName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pbstr_document_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Pages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pl_pages: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pl_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubmissionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pbstr_submission_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pbstr_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OriginalScheduledTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pdate_original_scheduled_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubmissionTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pdate_submission_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceiptType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            p_receipt_type: ?*FAX_RECEIPT_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            p_priority: ?*FAX_PRIORITY_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Sender: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pp_fax_sender: ?*?*IFaxSender,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recipient: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pp_fax_recipient: ?*?*IFaxRecipient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pl_current_page: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pl_device_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            p_status: ?*FAX_JOB_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedStatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            p_extended_status_code: ?*FAX_JOB_EXTENDED_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pbstr_extended_status: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AvailableOperations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            p_available_operations: ?*FAX_JOB_OPERATIONS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Retries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pl_retries: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScheduledTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pdate_scheduled_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pdate_transmission_start: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pdate_transmission_end: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pbstr_c_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pbstr_t_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupBroadcastReceipts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob,
            pb_group_broadcast_receipts: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IFaxOutgoingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IFaxOutgoingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restart: *const fn (
            self: *const IFaxOutgoingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTiff: *const fn (
            self: *const IFaxOutgoingJob,
            bstr_tiff_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxOutgoingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IFaxOutgoingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSubject(self: *const T, pbstr_subject_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_Subject(@as(*const IFaxOutgoingJob, @ptrCast(self)), pbstr_subject_);
            }
            pub inline fn getDocumentName(self: *const T, pbstr_document_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_DocumentName(@as(*const IFaxOutgoingJob, @ptrCast(self)), pbstr_document_name_);
            }
            pub inline fn getPages(self: *const T, pl_pages_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_Pages(@as(*const IFaxOutgoingJob, @ptrCast(self)), pl_pages_);
            }
            pub inline fn getSize(self: *const T, pl_size_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IFaxOutgoingJob, @ptrCast(self)), pl_size_);
            }
            pub inline fn getSubmissionId(self: *const T, pbstr_submission_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_SubmissionId(@as(*const IFaxOutgoingJob, @ptrCast(self)), pbstr_submission_id_);
            }
            pub inline fn getId(self: *const T, pbstr_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IFaxOutgoingJob, @ptrCast(self)), pbstr_id_);
            }
            pub inline fn getOriginalScheduledTime(self: *const T, pdate_original_scheduled_time_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_OriginalScheduledTime(@as(*const IFaxOutgoingJob, @ptrCast(self)), pdate_original_scheduled_time_);
            }
            pub inline fn getSubmissionTime(self: *const T, pdate_submission_time_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_SubmissionTime(@as(*const IFaxOutgoingJob, @ptrCast(self)), pdate_submission_time_);
            }
            pub inline fn getReceiptType(self: *const T, p_receipt_type_: ?*FAX_RECEIPT_TYPE_ENUM) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_ReceiptType(@as(*const IFaxOutgoingJob, @ptrCast(self)), p_receipt_type_);
            }
            pub inline fn getPriority(self: *const T, p_priority_: ?*FAX_PRIORITY_TYPE_ENUM) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IFaxOutgoingJob, @ptrCast(self)), p_priority_);
            }
            pub inline fn getSender(self: *const T, pp_fax_sender_: ?*?*IFaxSender) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_Sender(@as(*const IFaxOutgoingJob, @ptrCast(self)), pp_fax_sender_);
            }
            pub inline fn getRecipient(self: *const T, pp_fax_recipient_: ?*?*IFaxRecipient) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_Recipient(@as(*const IFaxOutgoingJob, @ptrCast(self)), pp_fax_recipient_);
            }
            pub inline fn getCurrentPage(self: *const T, pl_current_page_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_CurrentPage(@as(*const IFaxOutgoingJob, @ptrCast(self)), pl_current_page_);
            }
            pub inline fn getDeviceId(self: *const T, pl_device_id_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_DeviceId(@as(*const IFaxOutgoingJob, @ptrCast(self)), pl_device_id_);
            }
            pub inline fn getStatus(self: *const T, p_status_: ?*FAX_JOB_STATUS_ENUM) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IFaxOutgoingJob, @ptrCast(self)), p_status_);
            }
            pub inline fn getExtendedStatusCode(self: *const T, p_extended_status_code_: ?*FAX_JOB_EXTENDED_STATUS_ENUM) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_ExtendedStatusCode(@as(*const IFaxOutgoingJob, @ptrCast(self)), p_extended_status_code_);
            }
            pub inline fn getExtendedStatus(self: *const T, pbstr_extended_status_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_ExtendedStatus(@as(*const IFaxOutgoingJob, @ptrCast(self)), pbstr_extended_status_);
            }
            pub inline fn getAvailableOperations(self: *const T, p_available_operations_: ?*FAX_JOB_OPERATIONS_ENUM) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_AvailableOperations(@as(*const IFaxOutgoingJob, @ptrCast(self)), p_available_operations_);
            }
            pub inline fn getRetries(self: *const T, pl_retries_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_Retries(@as(*const IFaxOutgoingJob, @ptrCast(self)), pl_retries_);
            }
            pub inline fn getScheduledTime(self: *const T, pdate_scheduled_time_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_ScheduledTime(@as(*const IFaxOutgoingJob, @ptrCast(self)), pdate_scheduled_time_);
            }
            pub inline fn getTransmissionStart(self: *const T, pdate_transmission_start_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_TransmissionStart(@as(*const IFaxOutgoingJob, @ptrCast(self)), pdate_transmission_start_);
            }
            pub inline fn getTransmissionEnd(self: *const T, pdate_transmission_end_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_TransmissionEnd(@as(*const IFaxOutgoingJob, @ptrCast(self)), pdate_transmission_end_);
            }
            pub inline fn getCSID(self: *const T, pbstr_c_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_CSID(@as(*const IFaxOutgoingJob, @ptrCast(self)), pbstr_c_s_i_d_);
            }
            pub inline fn getTSID(self: *const T, pbstr_t_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_TSID(@as(*const IFaxOutgoingJob, @ptrCast(self)), pbstr_t_s_i_d_);
            }
            pub inline fn getGroupBroadcastReceipts(self: *const T, pb_group_broadcast_receipts_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).get_GroupBroadcastReceipts(@as(*const IFaxOutgoingJob, @ptrCast(self)), pb_group_broadcast_receipts_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).Pause(@as(*const IFaxOutgoingJob, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).Resume(@as(*const IFaxOutgoingJob, @ptrCast(self)));
            }
            pub inline fn restart(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).Restart(@as(*const IFaxOutgoingJob, @ptrCast(self)));
            }
            pub inline fn copyTiff(self: *const T, bstr_tiff_path_: ?BSTR) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).CopyTiff(@as(*const IFaxOutgoingJob, @ptrCast(self)), bstr_tiff_path_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxOutgoingJob, @ptrCast(self)));
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingJob.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IFaxOutgoingJob, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutgoingMessageIterator_Value = Guid.initString("f5ec5d4f-b840-432f-9980-112fe42a9b7a");
pub const IID_IFaxOutgoingMessageIterator = &IID_IFaxOutgoingMessageIterator_Value;
pub const IFaxOutgoingMessageIterator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Message: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessageIterator,
            p_fax_outgoing_message: ?*?*IFaxOutgoingMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AtEOF: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessageIterator,
            pb_e_o_f: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrefetchSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessageIterator,
            pl_prefetch_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrefetchSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessageIterator,
            l_prefetch_size: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveFirst: *const fn (
            self: *const IFaxOutgoingMessageIterator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveNext: *const fn (
            self: *const IFaxOutgoingMessageIterator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getMessage(self: *const T, p_fax_outgoing_message_: ?*?*IFaxOutgoingMessage) HRESULT {
                return @as(*const IFaxOutgoingMessageIterator.VTable, @ptrCast(self.vtable)).get_Message(@as(*const IFaxOutgoingMessageIterator, @ptrCast(self)), p_fax_outgoing_message_);
            }
            pub inline fn getAtEOF(self: *const T, pb_e_o_f_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingMessageIterator.VTable, @ptrCast(self.vtable)).get_AtEOF(@as(*const IFaxOutgoingMessageIterator, @ptrCast(self)), pb_e_o_f_);
            }
            pub inline fn getPrefetchSize(self: *const T, pl_prefetch_size_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingMessageIterator.VTable, @ptrCast(self.vtable)).get_PrefetchSize(@as(*const IFaxOutgoingMessageIterator, @ptrCast(self)), pl_prefetch_size_);
            }
            pub inline fn putPrefetchSize(self: *const T, l_prefetch_size_: i32) HRESULT {
                return @as(*const IFaxOutgoingMessageIterator.VTable, @ptrCast(self.vtable)).put_PrefetchSize(@as(*const IFaxOutgoingMessageIterator, @ptrCast(self)), l_prefetch_size_);
            }
            pub inline fn moveFirst(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingMessageIterator.VTable, @ptrCast(self.vtable)).MoveFirst(@as(*const IFaxOutgoingMessageIterator, @ptrCast(self)));
            }
            pub inline fn moveNext(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingMessageIterator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IFaxOutgoingMessageIterator, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutgoingMessage_Value = Guid.initString("f0ea35de-caa5-4a7c-82c7-2b60ba5f2be2");
pub const IID_IFaxOutgoingMessage = &IID_IFaxOutgoingMessage_Value;
pub const IFaxOutgoingMessage = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubmissionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pbstr_submission_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pbstr_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pbstr_subject: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DocumentName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pbstr_document_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Retries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pl_retries: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Pages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pl_pages: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pl_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OriginalScheduledTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pdate_original_scheduled_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubmissionTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pdate_submission_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            p_priority: ?*FAX_PRIORITY_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Sender: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pp_fax_sender: ?*?*IFaxSender,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recipient: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pp_fax_recipient: ?*?*IFaxRecipient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pbstr_device_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pdate_transmission_start: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pdate_transmission_end: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pbstr_c_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage,
            pbstr_t_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTiff: *const fn (
            self: *const IFaxOutgoingMessage,
            bstr_tiff_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFaxOutgoingMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSubmissionId(self: *const T, pbstr_submission_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_SubmissionId(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pbstr_submission_id_);
            }
            pub inline fn getId(self: *const T, pbstr_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pbstr_id_);
            }
            pub inline fn getSubject(self: *const T, pbstr_subject_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_Subject(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pbstr_subject_);
            }
            pub inline fn getDocumentName(self: *const T, pbstr_document_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_DocumentName(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pbstr_document_name_);
            }
            pub inline fn getRetries(self: *const T, pl_retries_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_Retries(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pl_retries_);
            }
            pub inline fn getPages(self: *const T, pl_pages_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_Pages(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pl_pages_);
            }
            pub inline fn getSize(self: *const T, pl_size_: ?*i32) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pl_size_);
            }
            pub inline fn getOriginalScheduledTime(self: *const T, pdate_original_scheduled_time_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_OriginalScheduledTime(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pdate_original_scheduled_time_);
            }
            pub inline fn getSubmissionTime(self: *const T, pdate_submission_time_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_SubmissionTime(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pdate_submission_time_);
            }
            pub inline fn getPriority(self: *const T, p_priority_: ?*FAX_PRIORITY_TYPE_ENUM) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IFaxOutgoingMessage, @ptrCast(self)), p_priority_);
            }
            pub inline fn getSender(self: *const T, pp_fax_sender_: ?*?*IFaxSender) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_Sender(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pp_fax_sender_);
            }
            pub inline fn getRecipient(self: *const T, pp_fax_recipient_: ?*?*IFaxRecipient) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_Recipient(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pp_fax_recipient_);
            }
            pub inline fn getDeviceName(self: *const T, pbstr_device_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_DeviceName(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pbstr_device_name_);
            }
            pub inline fn getTransmissionStart(self: *const T, pdate_transmission_start_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_TransmissionStart(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pdate_transmission_start_);
            }
            pub inline fn getTransmissionEnd(self: *const T, pdate_transmission_end_: ?*f64) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_TransmissionEnd(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pdate_transmission_end_);
            }
            pub inline fn getCSID(self: *const T, pbstr_c_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_CSID(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pbstr_c_s_i_d_);
            }
            pub inline fn getTSID(self: *const T, pbstr_t_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).get_TSID(@as(*const IFaxOutgoingMessage, @ptrCast(self)), pbstr_t_s_i_d_);
            }
            pub inline fn copyTiff(self: *const T, bstr_tiff_path_: ?BSTR) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).CopyTiff(@as(*const IFaxOutgoingMessage, @ptrCast(self)), bstr_tiff_path_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingMessage.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFaxOutgoingMessage, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxIncomingJobs_Value = Guid.initString("011f04e9-4fd6-4c23-9513-b6b66bb26be9");
pub const IID_IFaxIncomingJobs = &IID_IFaxIncomingJobs_Value;
pub const IFaxIncomingJobs = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJobs,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJobs,
            v_index: VARIANT,
            p_fax_incoming_job: ?*?*IFaxIncomingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJobs,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxIncomingJobs.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxIncomingJobs, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, v_index_: VARIANT, p_fax_incoming_job_: ?*?*IFaxIncomingJob) HRESULT {
                return @as(*const IFaxIncomingJobs.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxIncomingJobs, @ptrCast(self)), v_index_, p_fax_incoming_job_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingJobs.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxIncomingJobs, @ptrCast(self)), pl_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxIncomingJob_Value = Guid.initString("207529e6-654a-4916-9f88-4d232ee8a107");
pub const IID_IFaxIncomingJob = &IID_IFaxIncomingJob_Value;
pub const IFaxIncomingJob = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pl_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pbstr_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pl_current_page: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pl_device_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            p_status: ?*FAX_JOB_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedStatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            p_extended_status_code: ?*FAX_JOB_EXTENDED_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pbstr_extended_status: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AvailableOperations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            p_available_operations: ?*FAX_JOB_OPERATIONS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Retries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pl_retries: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pdate_transmission_start: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransmissionEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pdate_transmission_end: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pbstr_c_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pbstr_t_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallerId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pbstr_caller_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoutingInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            pbstr_routing_information: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JobType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingJob,
            p_job_type: ?*FAX_JOB_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IFaxIncomingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxIncomingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTiff: *const fn (
            self: *const IFaxIncomingJob,
            bstr_tiff_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSize(self: *const T, pl_size_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IFaxIncomingJob, @ptrCast(self)), pl_size_);
            }
            pub inline fn getId(self: *const T, pbstr_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IFaxIncomingJob, @ptrCast(self)), pbstr_id_);
            }
            pub inline fn getCurrentPage(self: *const T, pl_current_page_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_CurrentPage(@as(*const IFaxIncomingJob, @ptrCast(self)), pl_current_page_);
            }
            pub inline fn getDeviceId(self: *const T, pl_device_id_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_DeviceId(@as(*const IFaxIncomingJob, @ptrCast(self)), pl_device_id_);
            }
            pub inline fn getStatus(self: *const T, p_status_: ?*FAX_JOB_STATUS_ENUM) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IFaxIncomingJob, @ptrCast(self)), p_status_);
            }
            pub inline fn getExtendedStatusCode(self: *const T, p_extended_status_code_: ?*FAX_JOB_EXTENDED_STATUS_ENUM) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_ExtendedStatusCode(@as(*const IFaxIncomingJob, @ptrCast(self)), p_extended_status_code_);
            }
            pub inline fn getExtendedStatus(self: *const T, pbstr_extended_status_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_ExtendedStatus(@as(*const IFaxIncomingJob, @ptrCast(self)), pbstr_extended_status_);
            }
            pub inline fn getAvailableOperations(self: *const T, p_available_operations_: ?*FAX_JOB_OPERATIONS_ENUM) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_AvailableOperations(@as(*const IFaxIncomingJob, @ptrCast(self)), p_available_operations_);
            }
            pub inline fn getRetries(self: *const T, pl_retries_: ?*i32) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_Retries(@as(*const IFaxIncomingJob, @ptrCast(self)), pl_retries_);
            }
            pub inline fn getTransmissionStart(self: *const T, pdate_transmission_start_: ?*f64) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_TransmissionStart(@as(*const IFaxIncomingJob, @ptrCast(self)), pdate_transmission_start_);
            }
            pub inline fn getTransmissionEnd(self: *const T, pdate_transmission_end_: ?*f64) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_TransmissionEnd(@as(*const IFaxIncomingJob, @ptrCast(self)), pdate_transmission_end_);
            }
            pub inline fn getCSID(self: *const T, pbstr_c_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_CSID(@as(*const IFaxIncomingJob, @ptrCast(self)), pbstr_c_s_i_d_);
            }
            pub inline fn getTSID(self: *const T, pbstr_t_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_TSID(@as(*const IFaxIncomingJob, @ptrCast(self)), pbstr_t_s_i_d_);
            }
            pub inline fn getCallerId(self: *const T, pbstr_caller_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_CallerId(@as(*const IFaxIncomingJob, @ptrCast(self)), pbstr_caller_id_);
            }
            pub inline fn getRoutingInformation(self: *const T, pbstr_routing_information_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_RoutingInformation(@as(*const IFaxIncomingJob, @ptrCast(self)), pbstr_routing_information_);
            }
            pub inline fn getJobType(self: *const T, p_job_type_: ?*FAX_JOB_TYPE_ENUM) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).get_JobType(@as(*const IFaxIncomingJob, @ptrCast(self)), p_job_type_);
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IFaxIncomingJob, @ptrCast(self)));
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxIncomingJob, @ptrCast(self)));
            }
            pub inline fn copyTiff(self: *const T, bstr_tiff_path_: ?BSTR) HRESULT {
                return @as(*const IFaxIncomingJob.VTable, @ptrCast(self.vtable)).CopyTiff(@as(*const IFaxIncomingJob, @ptrCast(self)), bstr_tiff_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_PROVIDER_STATUS_ENUM = enum(i32) {
    SUCCESS = 0,
    SERVER_ERROR = 1,
    BAD_GUID = 2,
    BAD_VERSION = 3,
    CANT_LOAD = 4,
    CANT_LINK = 5,
    CANT_INIT = 6,
};
pub const fpsSUCCESS = FAX_PROVIDER_STATUS_ENUM.SUCCESS;
pub const fpsSERVER_ERROR = FAX_PROVIDER_STATUS_ENUM.SERVER_ERROR;
pub const fpsBAD_GUID = FAX_PROVIDER_STATUS_ENUM.BAD_GUID;
pub const fpsBAD_VERSION = FAX_PROVIDER_STATUS_ENUM.BAD_VERSION;
pub const fpsCANT_LOAD = FAX_PROVIDER_STATUS_ENUM.CANT_LOAD;
pub const fpsCANT_LINK = FAX_PROVIDER_STATUS_ENUM.CANT_LINK;
pub const fpsCANT_INIT = FAX_PROVIDER_STATUS_ENUM.CANT_INIT;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxDeviceProvider_Value = Guid.initString("290eac63-83ec-449c-8417-f148df8c682a");
pub const IID_IFaxDeviceProvider = &IID_IFaxDeviceProvider_Value;
pub const IFaxDeviceProvider = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pbstr_friendly_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImageName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pbstr_image_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UniqueName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pbstr_unique_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TapiProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pbstr_tapi_provider_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pl_major_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pl_minor_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorBuild: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pl_major_build: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorBuild: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pl_minor_build: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Debug: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pb_debug: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            p_status: ?*FAX_PROVIDER_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InitErrorCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pl_init_error_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceIds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceProvider,
            pv_device_ids: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFriendlyName(self: *const T, pbstr_friendly_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_FriendlyName(@as(*const IFaxDeviceProvider, @ptrCast(self)), pbstr_friendly_name_);
            }
            pub inline fn getImageName(self: *const T, pbstr_image_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_ImageName(@as(*const IFaxDeviceProvider, @ptrCast(self)), pbstr_image_name_);
            }
            pub inline fn getUniqueName(self: *const T, pbstr_unique_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_UniqueName(@as(*const IFaxDeviceProvider, @ptrCast(self)), pbstr_unique_name_);
            }
            pub inline fn getTapiProviderName(self: *const T, pbstr_tapi_provider_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_TapiProviderName(@as(*const IFaxDeviceProvider, @ptrCast(self)), pbstr_tapi_provider_name_);
            }
            pub inline fn getMajorVersion(self: *const T, pl_major_version_: ?*i32) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_MajorVersion(@as(*const IFaxDeviceProvider, @ptrCast(self)), pl_major_version_);
            }
            pub inline fn getMinorVersion(self: *const T, pl_minor_version_: ?*i32) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_MinorVersion(@as(*const IFaxDeviceProvider, @ptrCast(self)), pl_minor_version_);
            }
            pub inline fn getMajorBuild(self: *const T, pl_major_build_: ?*i32) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_MajorBuild(@as(*const IFaxDeviceProvider, @ptrCast(self)), pl_major_build_);
            }
            pub inline fn getMinorBuild(self: *const T, pl_minor_build_: ?*i32) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_MinorBuild(@as(*const IFaxDeviceProvider, @ptrCast(self)), pl_minor_build_);
            }
            pub inline fn getDebug(self: *const T, pb_debug_: ?*i16) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_Debug(@as(*const IFaxDeviceProvider, @ptrCast(self)), pb_debug_);
            }
            pub inline fn getStatus(self: *const T, p_status_: ?*FAX_PROVIDER_STATUS_ENUM) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IFaxDeviceProvider, @ptrCast(self)), p_status_);
            }
            pub inline fn getInitErrorCode(self: *const T, pl_init_error_code_: ?*i32) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_InitErrorCode(@as(*const IFaxDeviceProvider, @ptrCast(self)), pl_init_error_code_);
            }
            pub inline fn getDeviceIds(self: *const T, pv_device_ids_: ?*VARIANT) HRESULT {
                return @as(*const IFaxDeviceProvider.VTable, @ptrCast(self.vtable)).get_DeviceIds(@as(*const IFaxDeviceProvider, @ptrCast(self)), pv_device_ids_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_DEVICE_RECEIVE_MODE_ENUM = enum(i32) {
    NO_ANSWER = 0,
    AUTO_ANSWER = 1,
    MANUAL_ANSWER = 2,
};
pub const fdrmNO_ANSWER = FAX_DEVICE_RECEIVE_MODE_ENUM.NO_ANSWER;
pub const fdrmAUTO_ANSWER = FAX_DEVICE_RECEIVE_MODE_ENUM.AUTO_ANSWER;
pub const fdrmMANUAL_ANSWER = FAX_DEVICE_RECEIVE_MODE_ENUM.MANUAL_ANSWER;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxDevice_Value = Guid.initString("49306c59-b52e-4867-9df4-ca5841c956d0");
pub const IID_IFaxDevice = &IID_IFaxDevice_Value;
pub const IFaxDevice = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pl_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pbstr_device_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderUniqueName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pbstr_provider_unique_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PoweredOff: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pb_powered_off: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceivingNow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pb_receiving_now: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SendingNow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pb_sending_now: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UsedRoutingMethods: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pv_used_routing_methods: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SendEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pb_send_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SendEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            b_send_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceiveMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            p_receive_mode: ?*FAX_DEVICE_RECEIVE_MODE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReceiveMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            receive_mode: FAX_DEVICE_RECEIVE_MODE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RingsBeforeAnswer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pl_rings_before_answer: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RingsBeforeAnswer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            l_rings_before_answer: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pbstr_c_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            bstr_c_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pbstr_t_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            bstr_t_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtensionProperty: *const fn (
            self: *const IFaxDevice,
            bstr_g_u_i_d: ?BSTR,
            pv_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExtensionProperty: *const fn (
            self: *const IFaxDevice,
            bstr_g_u_i_d: ?BSTR,
            v_property: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UseRoutingMethod: *const fn (
            self: *const IFaxDevice,
            bstr_method_g_u_i_d: ?BSTR,
            b_use: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RingingNow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDevice,
            pb_ringing_now: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnswerCall: *const fn (
            self: *const IFaxDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, pl_id_: ?*i32) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IFaxDevice, @ptrCast(self)), pl_id_);
            }
            pub inline fn getDeviceName(self: *const T, pbstr_device_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_DeviceName(@as(*const IFaxDevice, @ptrCast(self)), pbstr_device_name_);
            }
            pub inline fn getProviderUniqueName(self: *const T, pbstr_provider_unique_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_ProviderUniqueName(@as(*const IFaxDevice, @ptrCast(self)), pbstr_provider_unique_name_);
            }
            pub inline fn getPoweredOff(self: *const T, pb_powered_off_: ?*i16) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_PoweredOff(@as(*const IFaxDevice, @ptrCast(self)), pb_powered_off_);
            }
            pub inline fn getReceivingNow(self: *const T, pb_receiving_now_: ?*i16) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_ReceivingNow(@as(*const IFaxDevice, @ptrCast(self)), pb_receiving_now_);
            }
            pub inline fn getSendingNow(self: *const T, pb_sending_now_: ?*i16) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_SendingNow(@as(*const IFaxDevice, @ptrCast(self)), pb_sending_now_);
            }
            pub inline fn getUsedRoutingMethods(self: *const T, pv_used_routing_methods_: ?*VARIANT) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_UsedRoutingMethods(@as(*const IFaxDevice, @ptrCast(self)), pv_used_routing_methods_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IFaxDevice, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IFaxDevice, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getSendEnabled(self: *const T, pb_send_enabled_: ?*i16) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_SendEnabled(@as(*const IFaxDevice, @ptrCast(self)), pb_send_enabled_);
            }
            pub inline fn putSendEnabled(self: *const T, b_send_enabled_: i16) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).put_SendEnabled(@as(*const IFaxDevice, @ptrCast(self)), b_send_enabled_);
            }
            pub inline fn getReceiveMode(self: *const T, p_receive_mode_: ?*FAX_DEVICE_RECEIVE_MODE_ENUM) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_ReceiveMode(@as(*const IFaxDevice, @ptrCast(self)), p_receive_mode_);
            }
            pub inline fn putReceiveMode(self: *const T, receive_mode_: FAX_DEVICE_RECEIVE_MODE_ENUM) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).put_ReceiveMode(@as(*const IFaxDevice, @ptrCast(self)), receive_mode_);
            }
            pub inline fn getRingsBeforeAnswer(self: *const T, pl_rings_before_answer_: ?*i32) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_RingsBeforeAnswer(@as(*const IFaxDevice, @ptrCast(self)), pl_rings_before_answer_);
            }
            pub inline fn putRingsBeforeAnswer(self: *const T, l_rings_before_answer_: i32) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).put_RingsBeforeAnswer(@as(*const IFaxDevice, @ptrCast(self)), l_rings_before_answer_);
            }
            pub inline fn getCSID(self: *const T, pbstr_c_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_CSID(@as(*const IFaxDevice, @ptrCast(self)), pbstr_c_s_i_d_);
            }
            pub inline fn putCSID(self: *const T, bstr_c_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).put_CSID(@as(*const IFaxDevice, @ptrCast(self)), bstr_c_s_i_d_);
            }
            pub inline fn getTSID(self: *const T, pbstr_t_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_TSID(@as(*const IFaxDevice, @ptrCast(self)), pbstr_t_s_i_d_);
            }
            pub inline fn putTSID(self: *const T, bstr_t_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).put_TSID(@as(*const IFaxDevice, @ptrCast(self)), bstr_t_s_i_d_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxDevice, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxDevice, @ptrCast(self)));
            }
            pub inline fn getExtensionProperty(self: *const T, bstr_g_u_i_d_: ?BSTR, pv_property_: ?*VARIANT) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).GetExtensionProperty(@as(*const IFaxDevice, @ptrCast(self)), bstr_g_u_i_d_, pv_property_);
            }
            pub inline fn setExtensionProperty(self: *const T, bstr_g_u_i_d_: ?BSTR, v_property_: VARIANT) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).SetExtensionProperty(@as(*const IFaxDevice, @ptrCast(self)), bstr_g_u_i_d_, v_property_);
            }
            pub inline fn useRoutingMethod(self: *const T, bstr_method_g_u_i_d_: ?BSTR, b_use_: i16) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).UseRoutingMethod(@as(*const IFaxDevice, @ptrCast(self)), bstr_method_g_u_i_d_, b_use_);
            }
            pub inline fn getRingingNow(self: *const T, pb_ringing_now_: ?*i16) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).get_RingingNow(@as(*const IFaxDevice, @ptrCast(self)), pb_ringing_now_);
            }
            pub inline fn answerCall(self: *const T) HRESULT {
                return @as(*const IFaxDevice.VTable, @ptrCast(self.vtable)).AnswerCall(@as(*const IFaxDevice, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxActivityLogging_Value = Guid.initString("1e29078b-5a69-497b-9592-49b7e7faddb5");
pub const IID_IFaxActivityLogging = &IID_IFaxActivityLogging_Value;
pub const IFaxActivityLogging = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogIncoming: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivityLogging,
            pb_log_incoming: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogIncoming: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivityLogging,
            b_log_incoming: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogOutgoing: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivityLogging,
            pb_log_outgoing: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogOutgoing: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivityLogging,
            b_log_outgoing: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DatabasePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivityLogging,
            pbstr_database_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DatabasePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxActivityLogging,
            bstr_database_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxActivityLogging,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxActivityLogging,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getLogIncoming(self: *const T, pb_log_incoming_: ?*i16) HRESULT {
                return @as(*const IFaxActivityLogging.VTable, @ptrCast(self.vtable)).get_LogIncoming(@as(*const IFaxActivityLogging, @ptrCast(self)), pb_log_incoming_);
            }
            pub inline fn putLogIncoming(self: *const T, b_log_incoming_: i16) HRESULT {
                return @as(*const IFaxActivityLogging.VTable, @ptrCast(self.vtable)).put_LogIncoming(@as(*const IFaxActivityLogging, @ptrCast(self)), b_log_incoming_);
            }
            pub inline fn getLogOutgoing(self: *const T, pb_log_outgoing_: ?*i16) HRESULT {
                return @as(*const IFaxActivityLogging.VTable, @ptrCast(self.vtable)).get_LogOutgoing(@as(*const IFaxActivityLogging, @ptrCast(self)), pb_log_outgoing_);
            }
            pub inline fn putLogOutgoing(self: *const T, b_log_outgoing_: i16) HRESULT {
                return @as(*const IFaxActivityLogging.VTable, @ptrCast(self.vtable)).put_LogOutgoing(@as(*const IFaxActivityLogging, @ptrCast(self)), b_log_outgoing_);
            }
            pub inline fn getDatabasePath(self: *const T, pbstr_database_path_: ?*?BSTR) HRESULT {
                return @as(*const IFaxActivityLogging.VTable, @ptrCast(self.vtable)).get_DatabasePath(@as(*const IFaxActivityLogging, @ptrCast(self)), pbstr_database_path_);
            }
            pub inline fn putDatabasePath(self: *const T, bstr_database_path_: ?BSTR) HRESULT {
                return @as(*const IFaxActivityLogging.VTable, @ptrCast(self.vtable)).put_DatabasePath(@as(*const IFaxActivityLogging, @ptrCast(self)), bstr_database_path_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxActivityLogging.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxActivityLogging, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxActivityLogging.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxActivityLogging, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_LOG_LEVEL_ENUM = enum(i32) {
    NONE = 0,
    MIN = 1,
    MED = 2,
    MAX = 3,
};
pub const fllNONE = FAX_LOG_LEVEL_ENUM.NONE;
pub const fllMIN = FAX_LOG_LEVEL_ENUM.MIN;
pub const fllMED = FAX_LOG_LEVEL_ENUM.MED;
pub const fllMAX = FAX_LOG_LEVEL_ENUM.MAX;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxEventLogging_Value = Guid.initString("0880d965-20e8-42e4-8e17-944f192caad4");
pub const IID_IFaxEventLogging = &IID_IFaxEventLogging_Value;
pub const IFaxEventLogging = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InitEventsLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxEventLogging,
            p_init_event_level: ?*FAX_LOG_LEVEL_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InitEventsLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxEventLogging,
            init_event_level: FAX_LOG_LEVEL_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InboundEventsLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxEventLogging,
            p_inbound_event_level: ?*FAX_LOG_LEVEL_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InboundEventsLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxEventLogging,
            inbound_event_level: FAX_LOG_LEVEL_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutboundEventsLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxEventLogging,
            p_outbound_event_level: ?*FAX_LOG_LEVEL_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OutboundEventsLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxEventLogging,
            outbound_event_level: FAX_LOG_LEVEL_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GeneralEventsLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxEventLogging,
            p_general_event_level: ?*FAX_LOG_LEVEL_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GeneralEventsLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxEventLogging,
            general_event_level: FAX_LOG_LEVEL_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxEventLogging,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxEventLogging,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getInitEventsLevel(self: *const T, p_init_event_level_: ?*FAX_LOG_LEVEL_ENUM) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).get_InitEventsLevel(@as(*const IFaxEventLogging, @ptrCast(self)), p_init_event_level_);
            }
            pub inline fn putInitEventsLevel(self: *const T, init_event_level_: FAX_LOG_LEVEL_ENUM) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).put_InitEventsLevel(@as(*const IFaxEventLogging, @ptrCast(self)), init_event_level_);
            }
            pub inline fn getInboundEventsLevel(self: *const T, p_inbound_event_level_: ?*FAX_LOG_LEVEL_ENUM) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).get_InboundEventsLevel(@as(*const IFaxEventLogging, @ptrCast(self)), p_inbound_event_level_);
            }
            pub inline fn putInboundEventsLevel(self: *const T, inbound_event_level_: FAX_LOG_LEVEL_ENUM) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).put_InboundEventsLevel(@as(*const IFaxEventLogging, @ptrCast(self)), inbound_event_level_);
            }
            pub inline fn getOutboundEventsLevel(self: *const T, p_outbound_event_level_: ?*FAX_LOG_LEVEL_ENUM) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).get_OutboundEventsLevel(@as(*const IFaxEventLogging, @ptrCast(self)), p_outbound_event_level_);
            }
            pub inline fn putOutboundEventsLevel(self: *const T, outbound_event_level_: FAX_LOG_LEVEL_ENUM) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).put_OutboundEventsLevel(@as(*const IFaxEventLogging, @ptrCast(self)), outbound_event_level_);
            }
            pub inline fn getGeneralEventsLevel(self: *const T, p_general_event_level_: ?*FAX_LOG_LEVEL_ENUM) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).get_GeneralEventsLevel(@as(*const IFaxEventLogging, @ptrCast(self)), p_general_event_level_);
            }
            pub inline fn putGeneralEventsLevel(self: *const T, general_event_level_: FAX_LOG_LEVEL_ENUM) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).put_GeneralEventsLevel(@as(*const IFaxEventLogging, @ptrCast(self)), general_event_level_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxEventLogging, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxEventLogging.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxEventLogging, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutboundRoutingGroups_Value = Guid.initString("235cbef7-c2de-4bfd-b8da-75097c82c87f");
pub const IID_IFaxOutboundRoutingGroups = &IID_IFaxOutboundRoutingGroups_Value;
pub const IFaxOutboundRoutingGroups = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingGroups,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingGroups,
            v_index: VARIANT,
            p_fax_outbound_routing_group: ?*?*IFaxOutboundRoutingGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingGroups,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IFaxOutboundRoutingGroups,
            bstr_name: ?BSTR,
            p_fax_outbound_routing_group: ?*?*IFaxOutboundRoutingGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IFaxOutboundRoutingGroups,
            v_index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxOutboundRoutingGroups.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxOutboundRoutingGroups, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, v_index_: VARIANT, p_fax_outbound_routing_group_: ?*?*IFaxOutboundRoutingGroup) HRESULT {
                return @as(*const IFaxOutboundRoutingGroups.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxOutboundRoutingGroups, @ptrCast(self)), v_index_, p_fax_outbound_routing_group_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxOutboundRoutingGroups.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxOutboundRoutingGroups, @ptrCast(self)), pl_count_);
            }
            pub inline fn add(self: *const T, bstr_name_: ?BSTR, p_fax_outbound_routing_group_: ?*?*IFaxOutboundRoutingGroup) HRESULT {
                return @as(*const IFaxOutboundRoutingGroups.VTable, @ptrCast(self.vtable)).Add(@as(*const IFaxOutboundRoutingGroups, @ptrCast(self)), bstr_name_, p_fax_outbound_routing_group_);
            }
            pub inline fn remove(self: *const T, v_index_: VARIANT) HRESULT {
                return @as(*const IFaxOutboundRoutingGroups.VTable, @ptrCast(self.vtable)).Remove(@as(*const IFaxOutboundRoutingGroups, @ptrCast(self)), v_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_GROUP_STATUS_ENUM = enum(i32) {
    ALL_DEV_VALID = 0,
    EMPTY = 1,
    ALL_DEV_NOT_VALID = 2,
    SOME_DEV_NOT_VALID = 3,
};
pub const fgsALL_DEV_VALID = FAX_GROUP_STATUS_ENUM.ALL_DEV_VALID;
pub const fgsEMPTY = FAX_GROUP_STATUS_ENUM.EMPTY;
pub const fgsALL_DEV_NOT_VALID = FAX_GROUP_STATUS_ENUM.ALL_DEV_NOT_VALID;
pub const fgsSOME_DEV_NOT_VALID = FAX_GROUP_STATUS_ENUM.SOME_DEV_NOT_VALID;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutboundRoutingGroup_Value = Guid.initString("ca6289a1-7e25-4f87-9a0b-93365734962c");
pub const IID_IFaxOutboundRoutingGroup = &IID_IFaxOutboundRoutingGroup_Value;
pub const IFaxOutboundRoutingGroup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingGroup,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingGroup,
            p_status: ?*FAX_GROUP_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceIds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingGroup,
            p_fax_device_ids: ?*?*IFaxDeviceIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutboundRoutingGroup.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFaxOutboundRoutingGroup, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getStatus(self: *const T, p_status_: ?*FAX_GROUP_STATUS_ENUM) HRESULT {
                return @as(*const IFaxOutboundRoutingGroup.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IFaxOutboundRoutingGroup, @ptrCast(self)), p_status_);
            }
            pub inline fn getDeviceIds(self: *const T, p_fax_device_ids_: ?*?*IFaxDeviceIds) HRESULT {
                return @as(*const IFaxOutboundRoutingGroup.VTable, @ptrCast(self.vtable)).get_DeviceIds(@as(*const IFaxOutboundRoutingGroup, @ptrCast(self)), p_fax_device_ids_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxDeviceIds_Value = Guid.initString("2f0f813f-4ce9-443e-8ca1-738cfaeee149");
pub const IID_IFaxDeviceIds = &IID_IFaxDeviceIds_Value;
pub const IFaxDeviceIds = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceIds,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceIds,
            l_index: i32,
            pl_device_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDeviceIds,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IFaxDeviceIds,
            l_device_id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IFaxDeviceIds,
            l_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOrder: *const fn (
            self: *const IFaxDeviceIds,
            l_device_id: i32,
            l_new_order: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxDeviceIds.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxDeviceIds, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, pl_device_id_: ?*i32) HRESULT {
                return @as(*const IFaxDeviceIds.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxDeviceIds, @ptrCast(self)), l_index_, pl_device_id_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxDeviceIds.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxDeviceIds, @ptrCast(self)), pl_count_);
            }
            pub inline fn add(self: *const T, l_device_id_: i32) HRESULT {
                return @as(*const IFaxDeviceIds.VTable, @ptrCast(self.vtable)).Add(@as(*const IFaxDeviceIds, @ptrCast(self)), l_device_id_);
            }
            pub inline fn remove(self: *const T, l_index_: i32) HRESULT {
                return @as(*const IFaxDeviceIds.VTable, @ptrCast(self.vtable)).Remove(@as(*const IFaxDeviceIds, @ptrCast(self)), l_index_);
            }
            pub inline fn setOrder(self: *const T, l_device_id_: i32, l_new_order_: i32) HRESULT {
                return @as(*const IFaxDeviceIds.VTable, @ptrCast(self.vtable)).SetOrder(@as(*const IFaxDeviceIds, @ptrCast(self)), l_device_id_, l_new_order_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutboundRoutingRules_Value = Guid.initString("dcefa1e7-ae7d-4ed6-8521-369edcca5120");
pub const IID_IFaxOutboundRoutingRules = &IID_IFaxOutboundRoutingRules_Value;
pub const IFaxOutboundRoutingRules = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRules,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRules,
            l_index: i32,
            p_fax_outbound_routing_rule: ?*?*IFaxOutboundRoutingRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRules,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemByCountryAndArea: *const fn (
            self: *const IFaxOutboundRoutingRules,
            l_country_code: i32,
            l_area_code: i32,
            p_fax_outbound_routing_rule: ?*?*IFaxOutboundRoutingRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveByCountryAndArea: *const fn (
            self: *const IFaxOutboundRoutingRules,
            l_country_code: i32,
            l_area_code: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IFaxOutboundRoutingRules,
            l_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IFaxOutboundRoutingRules,
            l_country_code: i32,
            l_area_code: i32,
            b_use_device: i16,
            bstr_group_name: ?BSTR,
            l_device_id: i32,
            p_fax_outbound_routing_rule: ?*?*IFaxOutboundRoutingRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxOutboundRoutingRules.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxOutboundRoutingRules, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, p_fax_outbound_routing_rule_: ?*?*IFaxOutboundRoutingRule) HRESULT {
                return @as(*const IFaxOutboundRoutingRules.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxOutboundRoutingRules, @ptrCast(self)), l_index_, p_fax_outbound_routing_rule_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxOutboundRoutingRules.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxOutboundRoutingRules, @ptrCast(self)), pl_count_);
            }
            pub inline fn itemByCountryAndArea(self: *const T, l_country_code_: i32, l_area_code_: i32, p_fax_outbound_routing_rule_: ?*?*IFaxOutboundRoutingRule) HRESULT {
                return @as(*const IFaxOutboundRoutingRules.VTable, @ptrCast(self.vtable)).ItemByCountryAndArea(@as(*const IFaxOutboundRoutingRules, @ptrCast(self)), l_country_code_, l_area_code_, p_fax_outbound_routing_rule_);
            }
            pub inline fn removeByCountryAndArea(self: *const T, l_country_code_: i32, l_area_code_: i32) HRESULT {
                return @as(*const IFaxOutboundRoutingRules.VTable, @ptrCast(self.vtable)).RemoveByCountryAndArea(@as(*const IFaxOutboundRoutingRules, @ptrCast(self)), l_country_code_, l_area_code_);
            }
            pub inline fn remove(self: *const T, l_index_: i32) HRESULT {
                return @as(*const IFaxOutboundRoutingRules.VTable, @ptrCast(self.vtable)).Remove(@as(*const IFaxOutboundRoutingRules, @ptrCast(self)), l_index_);
            }
            pub inline fn add(self: *const T, l_country_code_: i32, l_area_code_: i32, b_use_device_: i16, bstr_group_name_: ?BSTR, l_device_id_: i32, p_fax_outbound_routing_rule_: ?*?*IFaxOutboundRoutingRule) HRESULT {
                return @as(*const IFaxOutboundRoutingRules.VTable, @ptrCast(self.vtable)).Add(@as(*const IFaxOutboundRoutingRules, @ptrCast(self)), l_country_code_, l_area_code_, b_use_device_, bstr_group_name_, l_device_id_, p_fax_outbound_routing_rule_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_RULE_STATUS_ENUM = enum(i32) {
    VALID = 0,
    EMPTY_GROUP = 1,
    ALL_GROUP_DEV_NOT_VALID = 2,
    SOME_GROUP_DEV_NOT_VALID = 3,
    BAD_DEVICE = 4,
};
pub const frsVALID = FAX_RULE_STATUS_ENUM.VALID;
pub const frsEMPTY_GROUP = FAX_RULE_STATUS_ENUM.EMPTY_GROUP;
pub const frsALL_GROUP_DEV_NOT_VALID = FAX_RULE_STATUS_ENUM.ALL_GROUP_DEV_NOT_VALID;
pub const frsSOME_GROUP_DEV_NOT_VALID = FAX_RULE_STATUS_ENUM.SOME_GROUP_DEV_NOT_VALID;
pub const frsBAD_DEVICE = FAX_RULE_STATUS_ENUM.BAD_DEVICE;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxOutboundRoutingRule_Value = Guid.initString("e1f795d5-07c2-469f-b027-acacc23219da");
pub const IID_IFaxOutboundRoutingRule = &IID_IFaxOutboundRoutingRule_Value;
pub const IFaxOutboundRoutingRule = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CountryCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRule,
            pl_country_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AreaCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRule,
            pl_area_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRule,
            p_status: ?*FAX_RULE_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRule,
            pb_use_device: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRule,
            b_use_device: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRule,
            pl_device_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DeviceId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRule,
            device_id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRule,
            pbstr_group_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutboundRoutingRule,
            bstr_group_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxOutboundRoutingRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxOutboundRoutingRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCountryCode(self: *const T, pl_country_code_: ?*i32) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).get_CountryCode(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)), pl_country_code_);
            }
            pub inline fn getAreaCode(self: *const T, pl_area_code_: ?*i32) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).get_AreaCode(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)), pl_area_code_);
            }
            pub inline fn getStatus(self: *const T, p_status_: ?*FAX_RULE_STATUS_ENUM) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)), p_status_);
            }
            pub inline fn getUseDevice(self: *const T, pb_use_device_: ?*i16) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).get_UseDevice(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)), pb_use_device_);
            }
            pub inline fn putUseDevice(self: *const T, b_use_device_: i16) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).put_UseDevice(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)), b_use_device_);
            }
            pub inline fn getDeviceId(self: *const T, pl_device_id_: ?*i32) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).get_DeviceId(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)), pl_device_id_);
            }
            pub inline fn putDeviceId(self: *const T, device_id_: i32) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).put_DeviceId(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)), device_id_);
            }
            pub inline fn getGroupName(self: *const T, pbstr_group_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).get_GroupName(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)), pbstr_group_name_);
            }
            pub inline fn putGroupName(self: *const T, bstr_group_name_: ?BSTR) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).put_GroupName(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)), bstr_group_name_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxOutboundRoutingRule.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxOutboundRoutingRule, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxInboundRoutingExtensions_Value = Guid.initString("2f6c9673-7b26-42de-8eb0-915dcd2a4f4c");
pub const IID_IFaxInboundRoutingExtensions = &IID_IFaxInboundRoutingExtensions_Value;
pub const IFaxInboundRoutingExtensions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtensions,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtensions,
            v_index: VARIANT,
            p_fax_inbound_routing_extension: ?*?*IFaxInboundRoutingExtension,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtensions,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxInboundRoutingExtensions.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxInboundRoutingExtensions, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, v_index_: VARIANT, p_fax_inbound_routing_extension_: ?*?*IFaxInboundRoutingExtension) HRESULT {
                return @as(*const IFaxInboundRoutingExtensions.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxInboundRoutingExtensions, @ptrCast(self)), v_index_, p_fax_inbound_routing_extension_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxInboundRoutingExtensions.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxInboundRoutingExtensions, @ptrCast(self)), pl_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxInboundRoutingExtension_Value = Guid.initString("885b5e08-c26c-4ef9-af83-51580a750be1");
pub const IID_IFaxInboundRoutingExtension = &IID_IFaxInboundRoutingExtension_Value;
pub const IFaxInboundRoutingExtension = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pbstr_friendly_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImageName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pbstr_image_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UniqueName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pbstr_unique_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pl_major_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pl_minor_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorBuild: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pl_major_build: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorBuild: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pl_minor_build: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Debug: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pb_debug: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            p_status: ?*FAX_PROVIDER_STATUS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InitErrorCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pl_init_error_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Methods: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingExtension,
            pv_methods: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFriendlyName(self: *const T, pbstr_friendly_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_FriendlyName(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pbstr_friendly_name_);
            }
            pub inline fn getImageName(self: *const T, pbstr_image_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_ImageName(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pbstr_image_name_);
            }
            pub inline fn getUniqueName(self: *const T, pbstr_unique_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_UniqueName(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pbstr_unique_name_);
            }
            pub inline fn getMajorVersion(self: *const T, pl_major_version_: ?*i32) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_MajorVersion(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pl_major_version_);
            }
            pub inline fn getMinorVersion(self: *const T, pl_minor_version_: ?*i32) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_MinorVersion(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pl_minor_version_);
            }
            pub inline fn getMajorBuild(self: *const T, pl_major_build_: ?*i32) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_MajorBuild(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pl_major_build_);
            }
            pub inline fn getMinorBuild(self: *const T, pl_minor_build_: ?*i32) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_MinorBuild(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pl_minor_build_);
            }
            pub inline fn getDebug(self: *const T, pb_debug_: ?*i16) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_Debug(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pb_debug_);
            }
            pub inline fn getStatus(self: *const T, p_status_: ?*FAX_PROVIDER_STATUS_ENUM) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), p_status_);
            }
            pub inline fn getInitErrorCode(self: *const T, pl_init_error_code_: ?*i32) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_InitErrorCode(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pl_init_error_code_);
            }
            pub inline fn getMethods(self: *const T, pv_methods_: ?*VARIANT) HRESULT {
                return @as(*const IFaxInboundRoutingExtension.VTable, @ptrCast(self.vtable)).get_Methods(@as(*const IFaxInboundRoutingExtension, @ptrCast(self)), pv_methods_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxInboundRoutingMethods_Value = Guid.initString("783fca10-8908-4473-9d69-f67fbea0c6b9");
pub const IID_IFaxInboundRoutingMethods = &IID_IFaxInboundRoutingMethods_Value;
pub const IFaxInboundRoutingMethods = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethods,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethods,
            v_index: VARIANT,
            p_fax_inbound_routing_method: ?*?*IFaxInboundRoutingMethod,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethods,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxInboundRoutingMethods.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxInboundRoutingMethods, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, v_index_: VARIANT, p_fax_inbound_routing_method_: ?*?*IFaxInboundRoutingMethod) HRESULT {
                return @as(*const IFaxInboundRoutingMethods.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxInboundRoutingMethods, @ptrCast(self)), v_index_, p_fax_inbound_routing_method_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxInboundRoutingMethods.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxInboundRoutingMethods, @ptrCast(self)), pl_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFaxInboundRoutingMethod_Value = Guid.initString("45700061-ad9d-4776-a8c4-64065492cf4b");
pub const IID_IFaxInboundRoutingMethod = &IID_IFaxInboundRoutingMethod_Value;
pub const IFaxInboundRoutingMethod = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethod,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GUID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethod,
            pbstr_g_u_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FunctionName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethod,
            pbstr_function_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtensionFriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethod,
            pbstr_extension_friendly_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtensionImageName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethod,
            pbstr_extension_image_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethod,
            pl_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxInboundRoutingMethod,
            l_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxInboundRoutingMethod,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxInboundRoutingMethod,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxInboundRoutingMethod.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFaxInboundRoutingMethod, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getGUID(self: *const T, pbstr_g_u_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFaxInboundRoutingMethod.VTable, @ptrCast(self.vtable)).get_GUID(@as(*const IFaxInboundRoutingMethod, @ptrCast(self)), pbstr_g_u_i_d_);
            }
            pub inline fn getFunctionName(self: *const T, pbstr_function_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxInboundRoutingMethod.VTable, @ptrCast(self.vtable)).get_FunctionName(@as(*const IFaxInboundRoutingMethod, @ptrCast(self)), pbstr_function_name_);
            }
            pub inline fn getExtensionFriendlyName(self: *const T, pbstr_extension_friendly_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxInboundRoutingMethod.VTable, @ptrCast(self.vtable)).get_ExtensionFriendlyName(@as(*const IFaxInboundRoutingMethod, @ptrCast(self)), pbstr_extension_friendly_name_);
            }
            pub inline fn getExtensionImageName(self: *const T, pbstr_extension_image_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxInboundRoutingMethod.VTable, @ptrCast(self.vtable)).get_ExtensionImageName(@as(*const IFaxInboundRoutingMethod, @ptrCast(self)), pbstr_extension_image_name_);
            }
            pub inline fn getPriority(self: *const T, pl_priority_: ?*i32) HRESULT {
                return @as(*const IFaxInboundRoutingMethod.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IFaxInboundRoutingMethod, @ptrCast(self)), pl_priority_);
            }
            pub inline fn putPriority(self: *const T, l_priority_: i32) HRESULT {
                return @as(*const IFaxInboundRoutingMethod.VTable, @ptrCast(self.vtable)).put_Priority(@as(*const IFaxInboundRoutingMethod, @ptrCast(self)), l_priority_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxInboundRoutingMethod.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxInboundRoutingMethod, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxInboundRoutingMethod.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxInboundRoutingMethod, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxDocument2_Value = Guid.initString("e1347661-f9ef-4d6d-b4a5-c0a068b65cff");
pub const IID_IFaxDocument2 = &IID_IFaxDocument2_Value;
pub const IFaxDocument2 = extern struct {
    pub const VTable = extern struct {
        base: IFaxDocument.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubmissionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument2,
            pbstr_submission_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Bodies: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument2,
            pv_bodies: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Bodies: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxDocument2,
            v_bodies: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit2: *const fn (
            self: *const IFaxDocument2,
            bstr_fax_server_name: ?BSTR,
            pv_fax_outgoing_job_i_ds: ?*VARIANT,
            pl_error_body_file: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectedSubmit2: *const fn (
            self: *const IFaxDocument2,
            p_fax_server: ?*IFaxServer,
            pv_fax_outgoing_job_i_ds: ?*VARIANT,
            pl_error_body_file: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFaxDocument.MethodMixin(T);
            pub inline fn getSubmissionId(self: *const T, pbstr_submission_id_: ?*?BSTR) HRESULT {
                return @as(*const IFaxDocument2.VTable, @ptrCast(self.vtable)).get_SubmissionId(@as(*const IFaxDocument2, @ptrCast(self)), pbstr_submission_id_);
            }
            pub inline fn getBodies(self: *const T, pv_bodies_: ?*VARIANT) HRESULT {
                return @as(*const IFaxDocument2.VTable, @ptrCast(self.vtable)).get_Bodies(@as(*const IFaxDocument2, @ptrCast(self)), pv_bodies_);
            }
            pub inline fn putBodies(self: *const T, v_bodies_: VARIANT) HRESULT {
                return @as(*const IFaxDocument2.VTable, @ptrCast(self.vtable)).put_Bodies(@as(*const IFaxDocument2, @ptrCast(self)), v_bodies_);
            }
            pub inline fn submit2(self: *const T, bstr_fax_server_name_: ?BSTR, pv_fax_outgoing_job_i_ds_: ?*VARIANT, pl_error_body_file_: ?*i32) HRESULT {
                return @as(*const IFaxDocument2.VTable, @ptrCast(self.vtable)).Submit2(@as(*const IFaxDocument2, @ptrCast(self)), bstr_fax_server_name_, pv_fax_outgoing_job_i_ds_, pl_error_body_file_);
            }
            pub inline fn connectedSubmit2(self: *const T, p_fax_server_: ?*IFaxServer, pv_fax_outgoing_job_i_ds_: ?*VARIANT, pl_error_body_file_: ?*i32) HRESULT {
                return @as(*const IFaxDocument2.VTable, @ptrCast(self.vtable)).ConnectedSubmit2(@as(*const IFaxDocument2, @ptrCast(self)), p_fax_server_, pv_fax_outgoing_job_i_ds_, pl_error_body_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxConfiguration_Value = Guid.initString("10f4d0f7-0994-4543-ab6e-506949128c40");
pub const IID_IFaxConfiguration = &IID_IFaxConfiguration_Value;
pub const IFaxConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_use_archive: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_use_archive: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArchiveLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pbstr_archive_location: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ArchiveLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            bstr_archive_location: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeQuotaWarning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_size_quota_warning: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SizeQuotaWarning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_size_quota_warning: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HighQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pl_high_quota_water_mark: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HighQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            l_high_quota_water_mark: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LowQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pl_low_quota_water_mark: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LowQuotaWaterMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            l_low_quota_water_mark: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArchiveAgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pl_archive_age_limit: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ArchiveAgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            l_archive_age_limit: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArchiveSizeLow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pl_size_low: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArchiveSizeHigh: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pl_size_high: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutgoingQueueBlocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_outgoing_blocked: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OutgoingQueueBlocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_outgoing_blocked: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutgoingQueuePaused: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_outgoing_paused: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OutgoingQueuePaused: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_outgoing_paused: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowPersonalCoverPages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_allow_personal_cover_pages: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowPersonalCoverPages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_allow_personal_cover_pages: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseDeviceTSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_use_device_t_s_i_d: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseDeviceTSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_use_device_t_s_i_d: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Retries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pl_retries: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Retries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            l_retries: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RetryDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pl_retry_delay: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RetryDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            l_retry_delay: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DiscountRateStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pdate_discount_rate_start: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DiscountRateStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            date_discount_rate_start: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DiscountRateEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pdate_discount_rate_end: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DiscountRateEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            date_discount_rate_end: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutgoingQueueAgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pl_outgoing_queue_age_limit: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OutgoingQueueAgeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            l_outgoing_queue_age_limit: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Branding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_branding: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Branding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_branding: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncomingQueueBlocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_incoming_blocked: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncomingQueueBlocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_incoming_blocked: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoCreateAccountOnConnect: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_auto_create_account_on_connect: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoCreateAccountOnConnect: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_auto_create_account_on_connect: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncomingFaxesArePublic: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            pb_incoming_faxes_are_public: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncomingFaxesArePublic: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxConfiguration,
            b_incoming_faxes_are_public: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getUseArchive(self: *const T, pb_use_archive_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_UseArchive(@as(*const IFaxConfiguration, @ptrCast(self)), pb_use_archive_);
            }
            pub inline fn putUseArchive(self: *const T, b_use_archive_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_UseArchive(@as(*const IFaxConfiguration, @ptrCast(self)), b_use_archive_);
            }
            pub inline fn getArchiveLocation(self: *const T, pbstr_archive_location_: ?*?BSTR) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_ArchiveLocation(@as(*const IFaxConfiguration, @ptrCast(self)), pbstr_archive_location_);
            }
            pub inline fn putArchiveLocation(self: *const T, bstr_archive_location_: ?BSTR) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_ArchiveLocation(@as(*const IFaxConfiguration, @ptrCast(self)), bstr_archive_location_);
            }
            pub inline fn getSizeQuotaWarning(self: *const T, pb_size_quota_warning_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_SizeQuotaWarning(@as(*const IFaxConfiguration, @ptrCast(self)), pb_size_quota_warning_);
            }
            pub inline fn putSizeQuotaWarning(self: *const T, b_size_quota_warning_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_SizeQuotaWarning(@as(*const IFaxConfiguration, @ptrCast(self)), b_size_quota_warning_);
            }
            pub inline fn getHighQuotaWaterMark(self: *const T, pl_high_quota_water_mark_: ?*i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_HighQuotaWaterMark(@as(*const IFaxConfiguration, @ptrCast(self)), pl_high_quota_water_mark_);
            }
            pub inline fn putHighQuotaWaterMark(self: *const T, l_high_quota_water_mark_: i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_HighQuotaWaterMark(@as(*const IFaxConfiguration, @ptrCast(self)), l_high_quota_water_mark_);
            }
            pub inline fn getLowQuotaWaterMark(self: *const T, pl_low_quota_water_mark_: ?*i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_LowQuotaWaterMark(@as(*const IFaxConfiguration, @ptrCast(self)), pl_low_quota_water_mark_);
            }
            pub inline fn putLowQuotaWaterMark(self: *const T, l_low_quota_water_mark_: i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_LowQuotaWaterMark(@as(*const IFaxConfiguration, @ptrCast(self)), l_low_quota_water_mark_);
            }
            pub inline fn getArchiveAgeLimit(self: *const T, pl_archive_age_limit_: ?*i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_ArchiveAgeLimit(@as(*const IFaxConfiguration, @ptrCast(self)), pl_archive_age_limit_);
            }
            pub inline fn putArchiveAgeLimit(self: *const T, l_archive_age_limit_: i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_ArchiveAgeLimit(@as(*const IFaxConfiguration, @ptrCast(self)), l_archive_age_limit_);
            }
            pub inline fn getArchiveSizeLow(self: *const T, pl_size_low_: ?*i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_ArchiveSizeLow(@as(*const IFaxConfiguration, @ptrCast(self)), pl_size_low_);
            }
            pub inline fn getArchiveSizeHigh(self: *const T, pl_size_high_: ?*i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_ArchiveSizeHigh(@as(*const IFaxConfiguration, @ptrCast(self)), pl_size_high_);
            }
            pub inline fn getOutgoingQueueBlocked(self: *const T, pb_outgoing_blocked_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_OutgoingQueueBlocked(@as(*const IFaxConfiguration, @ptrCast(self)), pb_outgoing_blocked_);
            }
            pub inline fn putOutgoingQueueBlocked(self: *const T, b_outgoing_blocked_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_OutgoingQueueBlocked(@as(*const IFaxConfiguration, @ptrCast(self)), b_outgoing_blocked_);
            }
            pub inline fn getOutgoingQueuePaused(self: *const T, pb_outgoing_paused_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_OutgoingQueuePaused(@as(*const IFaxConfiguration, @ptrCast(self)), pb_outgoing_paused_);
            }
            pub inline fn putOutgoingQueuePaused(self: *const T, b_outgoing_paused_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_OutgoingQueuePaused(@as(*const IFaxConfiguration, @ptrCast(self)), b_outgoing_paused_);
            }
            pub inline fn getAllowPersonalCoverPages(self: *const T, pb_allow_personal_cover_pages_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_AllowPersonalCoverPages(@as(*const IFaxConfiguration, @ptrCast(self)), pb_allow_personal_cover_pages_);
            }
            pub inline fn putAllowPersonalCoverPages(self: *const T, b_allow_personal_cover_pages_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_AllowPersonalCoverPages(@as(*const IFaxConfiguration, @ptrCast(self)), b_allow_personal_cover_pages_);
            }
            pub inline fn getUseDeviceTSID(self: *const T, pb_use_device_t_s_i_d_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_UseDeviceTSID(@as(*const IFaxConfiguration, @ptrCast(self)), pb_use_device_t_s_i_d_);
            }
            pub inline fn putUseDeviceTSID(self: *const T, b_use_device_t_s_i_d_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_UseDeviceTSID(@as(*const IFaxConfiguration, @ptrCast(self)), b_use_device_t_s_i_d_);
            }
            pub inline fn getRetries(self: *const T, pl_retries_: ?*i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_Retries(@as(*const IFaxConfiguration, @ptrCast(self)), pl_retries_);
            }
            pub inline fn putRetries(self: *const T, l_retries_: i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_Retries(@as(*const IFaxConfiguration, @ptrCast(self)), l_retries_);
            }
            pub inline fn getRetryDelay(self: *const T, pl_retry_delay_: ?*i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_RetryDelay(@as(*const IFaxConfiguration, @ptrCast(self)), pl_retry_delay_);
            }
            pub inline fn putRetryDelay(self: *const T, l_retry_delay_: i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_RetryDelay(@as(*const IFaxConfiguration, @ptrCast(self)), l_retry_delay_);
            }
            pub inline fn getDiscountRateStart(self: *const T, pdate_discount_rate_start_: ?*f64) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_DiscountRateStart(@as(*const IFaxConfiguration, @ptrCast(self)), pdate_discount_rate_start_);
            }
            pub inline fn putDiscountRateStart(self: *const T, date_discount_rate_start_: f64) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_DiscountRateStart(@as(*const IFaxConfiguration, @ptrCast(self)), date_discount_rate_start_);
            }
            pub inline fn getDiscountRateEnd(self: *const T, pdate_discount_rate_end_: ?*f64) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_DiscountRateEnd(@as(*const IFaxConfiguration, @ptrCast(self)), pdate_discount_rate_end_);
            }
            pub inline fn putDiscountRateEnd(self: *const T, date_discount_rate_end_: f64) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_DiscountRateEnd(@as(*const IFaxConfiguration, @ptrCast(self)), date_discount_rate_end_);
            }
            pub inline fn getOutgoingQueueAgeLimit(self: *const T, pl_outgoing_queue_age_limit_: ?*i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_OutgoingQueueAgeLimit(@as(*const IFaxConfiguration, @ptrCast(self)), pl_outgoing_queue_age_limit_);
            }
            pub inline fn putOutgoingQueueAgeLimit(self: *const T, l_outgoing_queue_age_limit_: i32) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_OutgoingQueueAgeLimit(@as(*const IFaxConfiguration, @ptrCast(self)), l_outgoing_queue_age_limit_);
            }
            pub inline fn getBranding(self: *const T, pb_branding_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_Branding(@as(*const IFaxConfiguration, @ptrCast(self)), pb_branding_);
            }
            pub inline fn putBranding(self: *const T, b_branding_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_Branding(@as(*const IFaxConfiguration, @ptrCast(self)), b_branding_);
            }
            pub inline fn getIncomingQueueBlocked(self: *const T, pb_incoming_blocked_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_IncomingQueueBlocked(@as(*const IFaxConfiguration, @ptrCast(self)), pb_incoming_blocked_);
            }
            pub inline fn putIncomingQueueBlocked(self: *const T, b_incoming_blocked_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_IncomingQueueBlocked(@as(*const IFaxConfiguration, @ptrCast(self)), b_incoming_blocked_);
            }
            pub inline fn getAutoCreateAccountOnConnect(self: *const T, pb_auto_create_account_on_connect_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_AutoCreateAccountOnConnect(@as(*const IFaxConfiguration, @ptrCast(self)), pb_auto_create_account_on_connect_);
            }
            pub inline fn putAutoCreateAccountOnConnect(self: *const T, b_auto_create_account_on_connect_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_AutoCreateAccountOnConnect(@as(*const IFaxConfiguration, @ptrCast(self)), b_auto_create_account_on_connect_);
            }
            pub inline fn getIncomingFaxesArePublic(self: *const T, pb_incoming_faxes_are_public_: ?*i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).get_IncomingFaxesArePublic(@as(*const IFaxConfiguration, @ptrCast(self)), pb_incoming_faxes_are_public_);
            }
            pub inline fn putIncomingFaxesArePublic(self: *const T, b_incoming_faxes_are_public_: i16) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).put_IncomingFaxesArePublic(@as(*const IFaxConfiguration, @ptrCast(self)), b_incoming_faxes_are_public_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxConfiguration, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxConfiguration.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxConfiguration, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxServer2_Value = Guid.initString("571ced0f-5609-4f40-9176-547e3a72ca7c");
pub const IID_IFaxServer2 = &IID_IFaxServer2_Value;
pub const IFaxServer2 = extern struct {
    pub const VTable = extern struct {
        base: IFaxServer.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Configuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer2,
            pp_fax_configuration: ?*?*IFaxConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentAccount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer2,
            pp_current_account: ?*?*IFaxAccount,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FaxAccountSet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer2,
            pp_fax_account_set: ?*?*IFaxAccountSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Security2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxServer2,
            pp_fax_security2: ?*?*IFaxSecurity2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFaxServer.MethodMixin(T);
            pub inline fn getConfiguration(self: *const T, pp_fax_configuration_: ?*?*IFaxConfiguration) HRESULT {
                return @as(*const IFaxServer2.VTable, @ptrCast(self.vtable)).get_Configuration(@as(*const IFaxServer2, @ptrCast(self)), pp_fax_configuration_);
            }
            pub inline fn getCurrentAccount(self: *const T, pp_current_account_: ?*?*IFaxAccount) HRESULT {
                return @as(*const IFaxServer2.VTable, @ptrCast(self.vtable)).get_CurrentAccount(@as(*const IFaxServer2, @ptrCast(self)), pp_current_account_);
            }
            pub inline fn getFaxAccountSet(self: *const T, pp_fax_account_set_: ?*?*IFaxAccountSet) HRESULT {
                return @as(*const IFaxServer2.VTable, @ptrCast(self.vtable)).get_FaxAccountSet(@as(*const IFaxServer2, @ptrCast(self)), pp_fax_account_set_);
            }
            pub inline fn getSecurity2(self: *const T, pp_fax_security2_: ?*?*IFaxSecurity2) HRESULT {
                return @as(*const IFaxServer2.VTable, @ptrCast(self.vtable)).get_Security2(@as(*const IFaxServer2, @ptrCast(self)), pp_fax_security2_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxAccountSet_Value = Guid.initString("7428fbae-841e-47b8-86f4-2288946dca1b");
pub const IID_IFaxAccountSet = &IID_IFaxAccountSet_Value;
pub const IFaxAccountSet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetAccounts: *const fn (
            self: *const IFaxAccountSet,
            pp_fax_accounts: ?*?*IFaxAccounts,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccount: *const fn (
            self: *const IFaxAccountSet,
            bstr_account_name: ?BSTR,
            p_fax_account: ?*?*IFaxAccount,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAccount: *const fn (
            self: *const IFaxAccountSet,
            bstr_account_name: ?BSTR,
            p_fax_account: ?*?*IFaxAccount,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAccount: *const fn (
            self: *const IFaxAccountSet,
            bstr_account_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAccounts(self: *const T, pp_fax_accounts_: ?*?*IFaxAccounts) HRESULT {
                return @as(*const IFaxAccountSet.VTable, @ptrCast(self.vtable)).GetAccounts(@as(*const IFaxAccountSet, @ptrCast(self)), pp_fax_accounts_);
            }
            pub inline fn getAccount(self: *const T, bstr_account_name_: ?BSTR, p_fax_account_: ?*?*IFaxAccount) HRESULT {
                return @as(*const IFaxAccountSet.VTable, @ptrCast(self.vtable)).GetAccount(@as(*const IFaxAccountSet, @ptrCast(self)), bstr_account_name_, p_fax_account_);
            }
            pub inline fn addAccount(self: *const T, bstr_account_name_: ?BSTR, p_fax_account_: ?*?*IFaxAccount) HRESULT {
                return @as(*const IFaxAccountSet.VTable, @ptrCast(self.vtable)).AddAccount(@as(*const IFaxAccountSet, @ptrCast(self)), bstr_account_name_, p_fax_account_);
            }
            pub inline fn removeAccount(self: *const T, bstr_account_name_: ?BSTR) HRESULT {
                return @as(*const IFaxAccountSet.VTable, @ptrCast(self.vtable)).RemoveAccount(@as(*const IFaxAccountSet, @ptrCast(self)), bstr_account_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxAccounts_Value = Guid.initString("93ea8162-8be7-42d1-ae7b-ec74e2d989da");
pub const IID_IFaxAccounts = &IID_IFaxAccounts_Value;
pub const IFaxAccounts = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccounts,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccounts,
            v_index: VARIANT,
            p_fax_account: ?*?*IFaxAccount,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccounts,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFaxAccounts.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFaxAccounts, @ptrCast(self)), pp_unk_);
            }
            pub inline fn getItem(self: *const T, v_index_: VARIANT, p_fax_account_: ?*?*IFaxAccount) HRESULT {
                return @as(*const IFaxAccounts.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFaxAccounts, @ptrCast(self)), v_index_, p_fax_account_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IFaxAccounts.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFaxAccounts, @ptrCast(self)), pl_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_ACCOUNT_EVENTS_TYPE_ENUM = enum(i32) {
    NONE = 0,
    IN_QUEUE = 1,
    OUT_QUEUE = 2,
    IN_ARCHIVE = 4,
    OUT_ARCHIVE = 8,
    FXSSVC_ENDED = 16,
};
pub const faetNONE = FAX_ACCOUNT_EVENTS_TYPE_ENUM.NONE;
pub const faetIN_QUEUE = FAX_ACCOUNT_EVENTS_TYPE_ENUM.IN_QUEUE;
pub const faetOUT_QUEUE = FAX_ACCOUNT_EVENTS_TYPE_ENUM.OUT_QUEUE;
pub const faetIN_ARCHIVE = FAX_ACCOUNT_EVENTS_TYPE_ENUM.IN_ARCHIVE;
pub const faetOUT_ARCHIVE = FAX_ACCOUNT_EVENTS_TYPE_ENUM.OUT_ARCHIVE;
pub const faetFXSSVC_ENDED = FAX_ACCOUNT_EVENTS_TYPE_ENUM.FXSSVC_ENDED;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxAccount_Value = Guid.initString("68535b33-5dc4-4086-be26-b76f9b711006");
pub const IID_IFaxAccount = &IID_IFaxAccount_Value;
pub const IFaxAccount = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccountName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccount,
            pbstr_account_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Folders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccount,
            pp_folders: ?*?*IFaxAccountFolders,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ListenToAccountEvents: *const fn (
            self: *const IFaxAccount,
            event_types: FAX_ACCOUNT_EVENTS_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegisteredEvents: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccount,
            p_registered_events: ?*FAX_ACCOUNT_EVENTS_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAccountName(self: *const T, pbstr_account_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxAccount.VTable, @ptrCast(self.vtable)).get_AccountName(@as(*const IFaxAccount, @ptrCast(self)), pbstr_account_name_);
            }
            pub inline fn getFolders(self: *const T, pp_folders_: ?*?*IFaxAccountFolders) HRESULT {
                return @as(*const IFaxAccount.VTable, @ptrCast(self.vtable)).get_Folders(@as(*const IFaxAccount, @ptrCast(self)), pp_folders_);
            }
            pub inline fn listenToAccountEvents(self: *const T, event_types_: FAX_ACCOUNT_EVENTS_TYPE_ENUM) HRESULT {
                return @as(*const IFaxAccount.VTable, @ptrCast(self.vtable)).ListenToAccountEvents(@as(*const IFaxAccount, @ptrCast(self)), event_types_);
            }
            pub inline fn getRegisteredEvents(self: *const T, p_registered_events_: ?*FAX_ACCOUNT_EVENTS_TYPE_ENUM) HRESULT {
                return @as(*const IFaxAccount.VTable, @ptrCast(self.vtable)).get_RegisteredEvents(@as(*const IFaxAccount, @ptrCast(self)), p_registered_events_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxOutgoingJob2_Value = Guid.initString("418a8d96-59a0-4789-b176-edf3dc8fa8f7");
pub const IID_IFaxOutgoingJob2 = &IID_IFaxOutgoingJob2_Value;
pub const IFaxOutgoingJob2 = extern struct {
    pub const VTable = extern struct {
        base: IFaxOutgoingJob.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HasCoverPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob2,
            pb_has_cover_page: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceiptAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob2,
            pbstr_receipt_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScheduleType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingJob2,
            p_schedule_type: ?*FAX_SCHEDULE_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFaxOutgoingJob.MethodMixin(T);
            pub inline fn getHasCoverPage(self: *const T, pb_has_cover_page_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingJob2.VTable, @ptrCast(self.vtable)).get_HasCoverPage(@as(*const IFaxOutgoingJob2, @ptrCast(self)), pb_has_cover_page_);
            }
            pub inline fn getReceiptAddress(self: *const T, pbstr_receipt_address_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingJob2.VTable, @ptrCast(self.vtable)).get_ReceiptAddress(@as(*const IFaxOutgoingJob2, @ptrCast(self)), pbstr_receipt_address_);
            }
            pub inline fn getScheduleType(self: *const T, p_schedule_type_: ?*FAX_SCHEDULE_TYPE_ENUM) HRESULT {
                return @as(*const IFaxOutgoingJob2.VTable, @ptrCast(self.vtable)).get_ScheduleType(@as(*const IFaxOutgoingJob2, @ptrCast(self)), p_schedule_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxAccountFolders_Value = Guid.initString("6463f89d-23d8-46a9-8f86-c47b77ca7926");
pub const IID_IFaxAccountFolders = &IID_IFaxAccountFolders_Value;
pub const IFaxAccountFolders = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutgoingQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccountFolders,
            p_fax_outgoing_queue: ?*?*IFaxAccountOutgoingQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncomingQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccountFolders,
            p_fax_incoming_queue: ?*?*IFaxAccountIncomingQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncomingArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccountFolders,
            p_fax_incoming_archive: ?*?*IFaxAccountIncomingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OutgoingArchive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccountFolders,
            p_fax_outgoing_archive: ?*?*IFaxAccountOutgoingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getOutgoingQueue(self: *const T, p_fax_outgoing_queue_: ?*?*IFaxAccountOutgoingQueue) HRESULT {
                return @as(*const IFaxAccountFolders.VTable, @ptrCast(self.vtable)).get_OutgoingQueue(@as(*const IFaxAccountFolders, @ptrCast(self)), p_fax_outgoing_queue_);
            }
            pub inline fn getIncomingQueue(self: *const T, p_fax_incoming_queue_: ?*?*IFaxAccountIncomingQueue) HRESULT {
                return @as(*const IFaxAccountFolders.VTable, @ptrCast(self.vtable)).get_IncomingQueue(@as(*const IFaxAccountFolders, @ptrCast(self)), p_fax_incoming_queue_);
            }
            pub inline fn getIncomingArchive(self: *const T, p_fax_incoming_archive_: ?*?*IFaxAccountIncomingArchive) HRESULT {
                return @as(*const IFaxAccountFolders.VTable, @ptrCast(self.vtable)).get_IncomingArchive(@as(*const IFaxAccountFolders, @ptrCast(self)), p_fax_incoming_archive_);
            }
            pub inline fn getOutgoingArchive(self: *const T, p_fax_outgoing_archive_: ?*?*IFaxAccountOutgoingArchive) HRESULT {
                return @as(*const IFaxAccountFolders.VTable, @ptrCast(self.vtable)).get_OutgoingArchive(@as(*const IFaxAccountFolders, @ptrCast(self)), p_fax_outgoing_archive_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxAccountIncomingQueue_Value = Guid.initString("dd142d92-0186-4a95-a090-cbc3eadba6b4");
pub const IID_IFaxAccountIncomingQueue = &IID_IFaxAccountIncomingQueue_Value;
pub const IFaxAccountIncomingQueue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetJobs: *const fn (
            self: *const IFaxAccountIncomingQueue,
            p_fax_incoming_jobs: ?*?*IFaxIncomingJobs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJob: *const fn (
            self: *const IFaxAccountIncomingQueue,
            bstr_job_id: ?BSTR,
            p_fax_incoming_job: ?*?*IFaxIncomingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getJobs(self: *const T, p_fax_incoming_jobs_: ?*?*IFaxIncomingJobs) HRESULT {
                return @as(*const IFaxAccountIncomingQueue.VTable, @ptrCast(self.vtable)).GetJobs(@as(*const IFaxAccountIncomingQueue, @ptrCast(self)), p_fax_incoming_jobs_);
            }
            pub inline fn getJob(self: *const T, bstr_job_id_: ?BSTR, p_fax_incoming_job_: ?*?*IFaxIncomingJob) HRESULT {
                return @as(*const IFaxAccountIncomingQueue.VTable, @ptrCast(self.vtable)).GetJob(@as(*const IFaxAccountIncomingQueue, @ptrCast(self)), bstr_job_id_, p_fax_incoming_job_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxAccountOutgoingQueue_Value = Guid.initString("0f1424e9-f22d-4553-b7a5-0d24bd0d7e46");
pub const IID_IFaxAccountOutgoingQueue = &IID_IFaxAccountOutgoingQueue_Value;
pub const IFaxAccountOutgoingQueue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetJobs: *const fn (
            self: *const IFaxAccountOutgoingQueue,
            p_fax_outgoing_jobs: ?*?*IFaxOutgoingJobs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJob: *const fn (
            self: *const IFaxAccountOutgoingQueue,
            bstr_job_id: ?BSTR,
            p_fax_outgoing_job: ?*?*IFaxOutgoingJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getJobs(self: *const T, p_fax_outgoing_jobs_: ?*?*IFaxOutgoingJobs) HRESULT {
                return @as(*const IFaxAccountOutgoingQueue.VTable, @ptrCast(self.vtable)).GetJobs(@as(*const IFaxAccountOutgoingQueue, @ptrCast(self)), p_fax_outgoing_jobs_);
            }
            pub inline fn getJob(self: *const T, bstr_job_id_: ?BSTR, p_fax_outgoing_job_: ?*?*IFaxOutgoingJob) HRESULT {
                return @as(*const IFaxAccountOutgoingQueue.VTable, @ptrCast(self.vtable)).GetJob(@as(*const IFaxAccountOutgoingQueue, @ptrCast(self)), bstr_job_id_, p_fax_outgoing_job_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxOutgoingMessage2_Value = Guid.initString("b37df687-bc88-4b46-b3be-b458b3ea9e7f");
pub const IID_IFaxOutgoingMessage2 = &IID_IFaxOutgoingMessage2_Value;
pub const IFaxOutgoingMessage2 = extern struct {
    pub const VTable = extern struct {
        base: IFaxOutgoingMessage.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HasCoverPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage2,
            pb_has_cover_page: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceiptType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage2,
            p_receipt_type: ?*FAX_RECEIPT_TYPE_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReceiptAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage2,
            pbstr_receipt_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Read: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage2,
            pb_read: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Read: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxOutgoingMessage2,
            b_read: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxOutgoingMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxOutgoingMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFaxOutgoingMessage.MethodMixin(T);
            pub inline fn getHasCoverPage(self: *const T, pb_has_cover_page_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingMessage2.VTable, @ptrCast(self.vtable)).get_HasCoverPage(@as(*const IFaxOutgoingMessage2, @ptrCast(self)), pb_has_cover_page_);
            }
            pub inline fn getReceiptType(self: *const T, p_receipt_type_: ?*FAX_RECEIPT_TYPE_ENUM) HRESULT {
                return @as(*const IFaxOutgoingMessage2.VTable, @ptrCast(self.vtable)).get_ReceiptType(@as(*const IFaxOutgoingMessage2, @ptrCast(self)), p_receipt_type_);
            }
            pub inline fn getReceiptAddress(self: *const T, pbstr_receipt_address_: ?*?BSTR) HRESULT {
                return @as(*const IFaxOutgoingMessage2.VTable, @ptrCast(self.vtable)).get_ReceiptAddress(@as(*const IFaxOutgoingMessage2, @ptrCast(self)), pbstr_receipt_address_);
            }
            pub inline fn getRead(self: *const T, pb_read_: ?*i16) HRESULT {
                return @as(*const IFaxOutgoingMessage2.VTable, @ptrCast(self.vtable)).get_Read(@as(*const IFaxOutgoingMessage2, @ptrCast(self)), pb_read_);
            }
            pub inline fn putRead(self: *const T, b_read_: i16) HRESULT {
                return @as(*const IFaxOutgoingMessage2.VTable, @ptrCast(self.vtable)).put_Read(@as(*const IFaxOutgoingMessage2, @ptrCast(self)), b_read_);
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingMessage2.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxOutgoingMessage2, @ptrCast(self)));
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxOutgoingMessage2.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxOutgoingMessage2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxAccountIncomingArchive_Value = Guid.initString("a8a5b6ef-e0d6-4aee-955c-91625bec9db4");
pub const IID_IFaxAccountIncomingArchive = &IID_IFaxAccountIncomingArchive_Value;
pub const IFaxAccountIncomingArchive = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeLow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccountIncomingArchive,
            pl_size_low: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeHigh: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccountIncomingArchive,
            pl_size_high: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxAccountIncomingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessages: *const fn (
            self: *const IFaxAccountIncomingArchive,
            l_prefetch_size: i32,
            p_fax_incoming_message_iterator: ?*?*IFaxIncomingMessageIterator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessage: *const fn (
            self: *const IFaxAccountIncomingArchive,
            bstr_message_id: ?BSTR,
            p_fax_incoming_message: ?*?*IFaxIncomingMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSizeLow(self: *const T, pl_size_low_: ?*i32) HRESULT {
                return @as(*const IFaxAccountIncomingArchive.VTable, @ptrCast(self.vtable)).get_SizeLow(@as(*const IFaxAccountIncomingArchive, @ptrCast(self)), pl_size_low_);
            }
            pub inline fn getSizeHigh(self: *const T, pl_size_high_: ?*i32) HRESULT {
                return @as(*const IFaxAccountIncomingArchive.VTable, @ptrCast(self.vtable)).get_SizeHigh(@as(*const IFaxAccountIncomingArchive, @ptrCast(self)), pl_size_high_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxAccountIncomingArchive.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxAccountIncomingArchive, @ptrCast(self)));
            }
            pub inline fn getMessages(self: *const T, l_prefetch_size_: i32, p_fax_incoming_message_iterator_: ?*?*IFaxIncomingMessageIterator) HRESULT {
                return @as(*const IFaxAccountIncomingArchive.VTable, @ptrCast(self.vtable)).GetMessages(@as(*const IFaxAccountIncomingArchive, @ptrCast(self)), l_prefetch_size_, p_fax_incoming_message_iterator_);
            }
            pub inline fn getMessage(self: *const T, bstr_message_id_: ?BSTR, p_fax_incoming_message_: ?*?*IFaxIncomingMessage) HRESULT {
                return @as(*const IFaxAccountIncomingArchive.VTable, @ptrCast(self.vtable)).GetMessage(@as(*const IFaxAccountIncomingArchive, @ptrCast(self)), bstr_message_id_, p_fax_incoming_message_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxAccountOutgoingArchive_Value = Guid.initString("5463076d-ec14-491f-926e-b3ceda5e5662");
pub const IID_IFaxAccountOutgoingArchive = &IID_IFaxAccountOutgoingArchive_Value;
pub const IFaxAccountOutgoingArchive = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeLow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccountOutgoingArchive,
            pl_size_low: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeHigh: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxAccountOutgoingArchive,
            pl_size_high: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxAccountOutgoingArchive,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessages: *const fn (
            self: *const IFaxAccountOutgoingArchive,
            l_prefetch_size: i32,
            p_fax_outgoing_message_iterator: ?*?*IFaxOutgoingMessageIterator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessage: *const fn (
            self: *const IFaxAccountOutgoingArchive,
            bstr_message_id: ?BSTR,
            p_fax_outgoing_message: ?*?*IFaxOutgoingMessage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSizeLow(self: *const T, pl_size_low_: ?*i32) HRESULT {
                return @as(*const IFaxAccountOutgoingArchive.VTable, @ptrCast(self.vtable)).get_SizeLow(@as(*const IFaxAccountOutgoingArchive, @ptrCast(self)), pl_size_low_);
            }
            pub inline fn getSizeHigh(self: *const T, pl_size_high_: ?*i32) HRESULT {
                return @as(*const IFaxAccountOutgoingArchive.VTable, @ptrCast(self.vtable)).get_SizeHigh(@as(*const IFaxAccountOutgoingArchive, @ptrCast(self)), pl_size_high_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxAccountOutgoingArchive.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxAccountOutgoingArchive, @ptrCast(self)));
            }
            pub inline fn getMessages(self: *const T, l_prefetch_size_: i32, p_fax_outgoing_message_iterator_: ?*?*IFaxOutgoingMessageIterator) HRESULT {
                return @as(*const IFaxAccountOutgoingArchive.VTable, @ptrCast(self.vtable)).GetMessages(@as(*const IFaxAccountOutgoingArchive, @ptrCast(self)), l_prefetch_size_, p_fax_outgoing_message_iterator_);
            }
            pub inline fn getMessage(self: *const T, bstr_message_id_: ?BSTR, p_fax_outgoing_message_: ?*?*IFaxOutgoingMessage) HRESULT {
                return @as(*const IFaxAccountOutgoingArchive.VTable, @ptrCast(self.vtable)).GetMessage(@as(*const IFaxAccountOutgoingArchive, @ptrCast(self)), bstr_message_id_, p_fax_outgoing_message_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_ACCESS_RIGHTS_ENUM_2 = enum(i32) {
    SUBMIT_LOW = 1,
    SUBMIT_NORMAL = 2,
    SUBMIT_HIGH = 4,
    QUERY_OUT_JOBS = 8,
    MANAGE_OUT_JOBS = 16,
    QUERY_CONFIG = 32,
    MANAGE_CONFIG = 64,
    QUERY_ARCHIVES = 128,
    MANAGE_ARCHIVES = 256,
    MANAGE_RECEIVE_FOLDER = 512,
};
pub const far2SUBMIT_LOW = FAX_ACCESS_RIGHTS_ENUM_2.SUBMIT_LOW;
pub const far2SUBMIT_NORMAL = FAX_ACCESS_RIGHTS_ENUM_2.SUBMIT_NORMAL;
pub const far2SUBMIT_HIGH = FAX_ACCESS_RIGHTS_ENUM_2.SUBMIT_HIGH;
pub const far2QUERY_OUT_JOBS = FAX_ACCESS_RIGHTS_ENUM_2.QUERY_OUT_JOBS;
pub const far2MANAGE_OUT_JOBS = FAX_ACCESS_RIGHTS_ENUM_2.MANAGE_OUT_JOBS;
pub const far2QUERY_CONFIG = FAX_ACCESS_RIGHTS_ENUM_2.QUERY_CONFIG;
pub const far2MANAGE_CONFIG = FAX_ACCESS_RIGHTS_ENUM_2.MANAGE_CONFIG;
pub const far2QUERY_ARCHIVES = FAX_ACCESS_RIGHTS_ENUM_2.QUERY_ARCHIVES;
pub const far2MANAGE_ARCHIVES = FAX_ACCESS_RIGHTS_ENUM_2.MANAGE_ARCHIVES;
pub const far2MANAGE_RECEIVE_FOLDER = FAX_ACCESS_RIGHTS_ENUM_2.MANAGE_RECEIVE_FOLDER;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxSecurity2_Value = Guid.initString("17d851f4-d09b-48fc-99c9-8f24c4db9ab1");
pub const IID_IFaxSecurity2 = &IID_IFaxSecurity2_Value;
pub const IFaxSecurity2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Descriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity2,
            pv_descriptor: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Descriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity2,
            v_descriptor: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GrantedRights: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity2,
            p_granted_rights: ?*FAX_ACCESS_RIGHTS_ENUM_2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxSecurity2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxSecurity2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InformationType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity2,
            pl_information_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InformationType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxSecurity2,
            l_information_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDescriptor(self: *const T, pv_descriptor_: ?*VARIANT) HRESULT {
                return @as(*const IFaxSecurity2.VTable, @ptrCast(self.vtable)).get_Descriptor(@as(*const IFaxSecurity2, @ptrCast(self)), pv_descriptor_);
            }
            pub inline fn putDescriptor(self: *const T, v_descriptor_: VARIANT) HRESULT {
                return @as(*const IFaxSecurity2.VTable, @ptrCast(self.vtable)).put_Descriptor(@as(*const IFaxSecurity2, @ptrCast(self)), v_descriptor_);
            }
            pub inline fn getGrantedRights(self: *const T, p_granted_rights_: ?*FAX_ACCESS_RIGHTS_ENUM_2) HRESULT {
                return @as(*const IFaxSecurity2.VTable, @ptrCast(self.vtable)).get_GrantedRights(@as(*const IFaxSecurity2, @ptrCast(self)), p_granted_rights_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxSecurity2.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxSecurity2, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxSecurity2.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxSecurity2, @ptrCast(self)));
            }
            pub inline fn getInformationType(self: *const T, pl_information_type_: ?*i32) HRESULT {
                return @as(*const IFaxSecurity2.VTable, @ptrCast(self.vtable)).get_InformationType(@as(*const IFaxSecurity2, @ptrCast(self)), pl_information_type_);
            }
            pub inline fn putInformationType(self: *const T, l_information_type_: i32) HRESULT {
                return @as(*const IFaxSecurity2.VTable, @ptrCast(self.vtable)).put_InformationType(@as(*const IFaxSecurity2, @ptrCast(self)), l_information_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxIncomingMessage2_Value = Guid.initString("f9208503-e2bc-48f3-9ec0-e6236f9b509a");
pub const IID_IFaxIncomingMessage2 = &IID_IFaxIncomingMessage2_Value;
pub const IFaxIncomingMessage2 = extern struct {
    pub const VTable = extern struct {
        base: IFaxIncomingMessage.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            pbstr_subject: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            bstr_subject: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            pbstr_sender_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            bstr_sender_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderFaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            pbstr_sender_fax_number: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderFaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            bstr_sender_fax_number: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HasCoverPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            pb_has_cover_page: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HasCoverPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            b_has_cover_page: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recipients: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            pbstr_recipients: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Recipients: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            bstr_recipients: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WasReAssigned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            pb_was_re_assigned: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Read: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            pb_read: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Read: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFaxIncomingMessage2,
            b_read: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReAssign: *const fn (
            self: *const IFaxIncomingMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IFaxIncomingMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IFaxIncomingMessage2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFaxIncomingMessage.MethodMixin(T);
            pub inline fn getSubject(self: *const T, pbstr_subject_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).get_Subject(@as(*const IFaxIncomingMessage2, @ptrCast(self)), pbstr_subject_);
            }
            pub inline fn putSubject(self: *const T, bstr_subject_: ?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).put_Subject(@as(*const IFaxIncomingMessage2, @ptrCast(self)), bstr_subject_);
            }
            pub inline fn getSenderName(self: *const T, pbstr_sender_name_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).get_SenderName(@as(*const IFaxIncomingMessage2, @ptrCast(self)), pbstr_sender_name_);
            }
            pub inline fn putSenderName(self: *const T, bstr_sender_name_: ?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).put_SenderName(@as(*const IFaxIncomingMessage2, @ptrCast(self)), bstr_sender_name_);
            }
            pub inline fn getSenderFaxNumber(self: *const T, pbstr_sender_fax_number_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).get_SenderFaxNumber(@as(*const IFaxIncomingMessage2, @ptrCast(self)), pbstr_sender_fax_number_);
            }
            pub inline fn putSenderFaxNumber(self: *const T, bstr_sender_fax_number_: ?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).put_SenderFaxNumber(@as(*const IFaxIncomingMessage2, @ptrCast(self)), bstr_sender_fax_number_);
            }
            pub inline fn getHasCoverPage(self: *const T, pb_has_cover_page_: ?*i16) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).get_HasCoverPage(@as(*const IFaxIncomingMessage2, @ptrCast(self)), pb_has_cover_page_);
            }
            pub inline fn putHasCoverPage(self: *const T, b_has_cover_page_: i16) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).put_HasCoverPage(@as(*const IFaxIncomingMessage2, @ptrCast(self)), b_has_cover_page_);
            }
            pub inline fn getRecipients(self: *const T, pbstr_recipients_: ?*?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).get_Recipients(@as(*const IFaxIncomingMessage2, @ptrCast(self)), pbstr_recipients_);
            }
            pub inline fn putRecipients(self: *const T, bstr_recipients_: ?BSTR) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).put_Recipients(@as(*const IFaxIncomingMessage2, @ptrCast(self)), bstr_recipients_);
            }
            pub inline fn getWasReAssigned(self: *const T, pb_was_re_assigned_: ?*i16) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).get_WasReAssigned(@as(*const IFaxIncomingMessage2, @ptrCast(self)), pb_was_re_assigned_);
            }
            pub inline fn getRead(self: *const T, pb_read_: ?*i16) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).get_Read(@as(*const IFaxIncomingMessage2, @ptrCast(self)), pb_read_);
            }
            pub inline fn putRead(self: *const T, b_read_: i16) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).put_Read(@as(*const IFaxIncomingMessage2, @ptrCast(self)), b_read_);
            }
            pub inline fn reAssign(self: *const T) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).ReAssign(@as(*const IFaxIncomingMessage2, @ptrCast(self)));
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).Save(@as(*const IFaxIncomingMessage2, @ptrCast(self)));
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IFaxIncomingMessage2.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IFaxIncomingMessage2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FAX_ROUTING_RULE_CODE_ENUM = enum(i32) {
    E = 0,
};
pub const frrcANY_CODE = FAX_ROUTING_RULE_CODE_ENUM.E;

const IID_IFaxServerNotify_Value = Guid.initString("2e037b27-cf8a-4abd-b1e0-5704943bea6f");
pub const IID_IFaxServerNotify = &IID_IFaxServerNotify_Value;
pub const IFaxServerNotify = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID__IFaxServerNotify2_Value = Guid.initString("ec9c69b9-5fe7-4805-9467-82fcd96af903");
pub const IID__IFaxServerNotify2 = &IID__IFaxServerNotify2_Value;
pub const _IFaxServerNotify2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OnIncomingJobAdded: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_job_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnIncomingJobRemoved: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_job_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnIncomingJobChanged: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_job_id: ?BSTR,
            p_job_status: ?*IFaxJobStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingJobAdded: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_job_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingJobRemoved: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_job_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingJobChanged: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_job_id: ?BSTR,
            p_job_status: ?*IFaxJobStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnIncomingMessageAdded: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_message_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnIncomingMessageRemoved: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_message_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingMessageAdded: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_message_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingMessageRemoved: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            bstr_message_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnReceiptOptionsChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityLoggingConfigChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSecurityConfigChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEventLoggingConfigChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingQueueConfigChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingArchiveConfigChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnIncomingArchiveConfigChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDevicesConfigChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutboundRoutingGroupsConfigChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutboundRoutingRulesConfigChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnServerActivityChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            l_incoming_messages: i32,
            l_routing_messages: i32,
            l_outgoing_messages: i32,
            l_queued_messages: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQueuesStatusChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            b_outgoing_queue_blocked: i16,
            b_outgoing_queue_paused: i16,
            b_incoming_queue_blocked: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNewCall: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            l_call_id: i32,
            l_device_id: i32,
            bstr_caller_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnServerShutDown: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDeviceStatusChange: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
            l_device_id: i32,
            b_powered_off: i16,
            b_sending: i16,
            b_receiving: i16,
            b_ringing: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGeneralServerConfigChanged: *const fn (
            self: *const _IFaxServerNotify2,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn onIncomingJobAdded(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_job_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnIncomingJobAdded(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_job_id_);
            }
            pub inline fn onIncomingJobRemoved(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_job_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnIncomingJobRemoved(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_job_id_);
            }
            pub inline fn onIncomingJobChanged(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_job_id_: ?BSTR, p_job_status_: ?*IFaxJobStatus) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnIncomingJobChanged(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_job_id_, p_job_status_);
            }
            pub inline fn onOutgoingJobAdded(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_job_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnOutgoingJobAdded(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_job_id_);
            }
            pub inline fn onOutgoingJobRemoved(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_job_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnOutgoingJobRemoved(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_job_id_);
            }
            pub inline fn onOutgoingJobChanged(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_job_id_: ?BSTR, p_job_status_: ?*IFaxJobStatus) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnOutgoingJobChanged(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_job_id_, p_job_status_);
            }
            pub inline fn onIncomingMessageAdded(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_message_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnIncomingMessageAdded(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_message_id_);
            }
            pub inline fn onIncomingMessageRemoved(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_message_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnIncomingMessageRemoved(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_message_id_);
            }
            pub inline fn onOutgoingMessageAdded(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_message_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnOutgoingMessageAdded(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_message_id_);
            }
            pub inline fn onOutgoingMessageRemoved(self: *const T, p_fax_server_: ?*IFaxServer2, bstr_message_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnOutgoingMessageRemoved(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, bstr_message_id_);
            }
            pub inline fn onReceiptOptionsChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnReceiptOptionsChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onActivityLoggingConfigChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnActivityLoggingConfigChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onSecurityConfigChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnSecurityConfigChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onEventLoggingConfigChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnEventLoggingConfigChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onOutgoingQueueConfigChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnOutgoingQueueConfigChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onOutgoingArchiveConfigChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnOutgoingArchiveConfigChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onIncomingArchiveConfigChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnIncomingArchiveConfigChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onDevicesConfigChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnDevicesConfigChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onOutboundRoutingGroupsConfigChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnOutboundRoutingGroupsConfigChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onOutboundRoutingRulesConfigChange(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnOutboundRoutingRulesConfigChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onServerActivityChange(self: *const T, p_fax_server_: ?*IFaxServer2, l_incoming_messages_: i32, l_routing_messages_: i32, l_outgoing_messages_: i32, l_queued_messages_: i32) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnServerActivityChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, l_incoming_messages_, l_routing_messages_, l_outgoing_messages_, l_queued_messages_);
            }
            pub inline fn onQueuesStatusChange(self: *const T, p_fax_server_: ?*IFaxServer2, b_outgoing_queue_blocked_: i16, b_outgoing_queue_paused_: i16, b_incoming_queue_blocked_: i16) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnQueuesStatusChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, b_outgoing_queue_blocked_, b_outgoing_queue_paused_, b_incoming_queue_blocked_);
            }
            pub inline fn onNewCall(self: *const T, p_fax_server_: ?*IFaxServer2, l_call_id_: i32, l_device_id_: i32, bstr_caller_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnNewCall(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, l_call_id_, l_device_id_, bstr_caller_id_);
            }
            pub inline fn onServerShutDown(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnServerShutDown(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
            pub inline fn onDeviceStatusChange(self: *const T, p_fax_server_: ?*IFaxServer2, l_device_id_: i32, b_powered_off_: i16, b_sending_: i16, b_receiving_: i16, b_ringing_: i16) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnDeviceStatusChange(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_, l_device_id_, b_powered_off_, b_sending_, b_receiving_, b_ringing_);
            }
            pub inline fn onGeneralServerConfigChanged(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxServerNotify2.VTable, @ptrCast(self.vtable)).OnGeneralServerConfigChanged(@as(*const _IFaxServerNotify2, @ptrCast(self)), p_fax_server_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxServerNotify2_Value = Guid.initString("616ca8d6-a77a-4062-abfd-0e471241c7aa");
pub const IID_IFaxServerNotify2 = &IID_IFaxServerNotify2_Value;
pub const IFaxServerNotify2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID__IFaxAccountNotify_Value = Guid.initString("b9b3bc81-ac1b-46f3-b39d-0adc30e1b788");
pub const IID__IFaxAccountNotify = &IID__IFaxAccountNotify_Value;
pub const _IFaxAccountNotify = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OnIncomingJobAdded: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_job_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnIncomingJobRemoved: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_job_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnIncomingJobChanged: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_job_id: ?BSTR,
            p_job_status: ?*IFaxJobStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingJobAdded: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_job_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingJobRemoved: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_job_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingJobChanged: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_job_id: ?BSTR,
            p_job_status: ?*IFaxJobStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnIncomingMessageAdded: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_message_id: ?BSTR,
            f_added_to_receive_folder: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnIncomingMessageRemoved: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_message_id: ?BSTR,
            f_removed_from_receive_folder: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingMessageAdded: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_message_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutgoingMessageRemoved: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_account: ?*IFaxAccount,
            bstr_message_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnServerShutDown: *const fn (
            self: *const _IFaxAccountNotify,
            p_fax_server: ?*IFaxServer2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn onIncomingJobAdded(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_job_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnIncomingJobAdded(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_job_id_);
            }
            pub inline fn onIncomingJobRemoved(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_job_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnIncomingJobRemoved(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_job_id_);
            }
            pub inline fn onIncomingJobChanged(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_job_id_: ?BSTR, p_job_status_: ?*IFaxJobStatus) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnIncomingJobChanged(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_job_id_, p_job_status_);
            }
            pub inline fn onOutgoingJobAdded(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_job_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnOutgoingJobAdded(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_job_id_);
            }
            pub inline fn onOutgoingJobRemoved(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_job_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnOutgoingJobRemoved(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_job_id_);
            }
            pub inline fn onOutgoingJobChanged(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_job_id_: ?BSTR, p_job_status_: ?*IFaxJobStatus) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnOutgoingJobChanged(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_job_id_, p_job_status_);
            }
            pub inline fn onIncomingMessageAdded(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_message_id_: ?BSTR, f_added_to_receive_folder_: i16) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnIncomingMessageAdded(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_message_id_, f_added_to_receive_folder_);
            }
            pub inline fn onIncomingMessageRemoved(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_message_id_: ?BSTR, f_removed_from_receive_folder_: i16) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnIncomingMessageRemoved(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_message_id_, f_removed_from_receive_folder_);
            }
            pub inline fn onOutgoingMessageAdded(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_message_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnOutgoingMessageAdded(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_message_id_);
            }
            pub inline fn onOutgoingMessageRemoved(self: *const T, p_fax_account_: ?*IFaxAccount, bstr_message_id_: ?BSTR) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnOutgoingMessageRemoved(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_account_, bstr_message_id_);
            }
            pub inline fn onServerShutDown(self: *const T, p_fax_server_: ?*IFaxServer2) HRESULT {
                return @as(*const _IFaxAccountNotify.VTable, @ptrCast(self.vtable)).OnServerShutDown(@as(*const _IFaxAccountNotify, @ptrCast(self)), p_fax_server_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFaxAccountNotify_Value = Guid.initString("0b5e5bd1-b8a9-47a0-a323-ef4a293ba06a");
pub const IID_IFaxAccountNotify = &IID_IFaxAccountNotify_Value;
pub const IFaxAccountNotify = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PFAXROUTEADDFILE = *const fn (
    job_id: u32,
    file_name: ?[*:0]const u16,
    guid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PFAXROUTEDELETEFILE = *const fn (
    job_id: u32,
    file_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PFAXROUTEGETFILE = *const fn (
    job_id: u32,
    index: u32,
    // TODO: what to do with BytesParamIndex 3?
    file_name_buffer: ?PWSTR,
    required_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXROUTEENUMFILE = *const fn (
    job_id: u32,
    guid_owner: ?*Guid,
    guid_caller: ?*Guid,
    file_name: ?[*:0]const u16,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXROUTEENUMFILES = *const fn (
    job_id: u32,
    guid: ?*Guid,
    file_enumerator: ?PFAXROUTEENUMFILE,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXROUTEMODIFYROUTINGDATA = *const fn (
    job_id: u32,
    routing_guid: ?[*:0]const u16,
    routing_data: ?*u8,
    routing_data_size: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const FAX_ROUTE_CALLBACKROUTINES = extern struct {
    SizeOfStruct: u32,
    FaxRouteAddFile: ?PFAXROUTEADDFILE,
    FaxRouteDeleteFile: ?PFAXROUTEDELETEFILE,
    FaxRouteGetFile: ?PFAXROUTEGETFILE,
    FaxRouteEnumFiles: ?PFAXROUTEENUMFILES,
    FaxRouteModifyRoutingData: ?PFAXROUTEMODIFYROUTINGDATA,
};

pub const FAX_ROUTE = extern struct {
    SizeOfStruct: u32,
    JobId: u32,
    ElapsedTime: u64,
    ReceiveTime: u64,
    PageCount: u32,
    Csid: ?[*:0]const u16,
    Tsid: ?[*:0]const u16,
    CallerId: ?[*:0]const u16,
    RoutingInfo: ?[*:0]const u16,
    ReceiverName: ?[*:0]const u16,
    ReceiverNumber: ?[*:0]const u16,
    DeviceName: ?[*:0]const u16,
    DeviceId: u32,
    RoutingInfoData: ?*u8,
    RoutingInfoDataSize: u32,
};

pub const FAXROUTE_ENABLE = enum(i32) {
    QUERY_STATUS = -1,
    STATUS_DISABLE = 0,
    STATUS_ENABLE = 1,
};
pub const QUERY_STATUS = FAXROUTE_ENABLE.QUERY_STATUS;
pub const STATUS_DISABLE = FAXROUTE_ENABLE.STATUS_DISABLE;
pub const STATUS_ENABLE = FAXROUTE_ENABLE.STATUS_ENABLE;

pub const PFAXROUTEINITIALIZE = *const fn (
    param0: ?HANDLE,
    param1: ?*FAX_ROUTE_CALLBACKROUTINES,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXROUTEMETHOD = *const fn (
    param0: ?*const FAX_ROUTE,
    param1: ?*?*anyopaque,
    param2: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXROUTEDEVICEENABLE = *const fn (
    param0: ?[*:0]const u16,
    param1: u32,
    param2: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXROUTEDEVICECHANGENOTIFICATION = *const fn (
    param0: u32,
    param1: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXROUTEGETROUTINGINFO = *const fn (
    param0: ?[*:0]const u16,
    param1: u32,
    param2: ?*u8,
    param3: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFAXROUTESETROUTINGINFO = *const fn (
    param0: ?[*:0]const u16,
    param1: u32,
    param2: ?*const u8,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const FAX_ENUM_DEVICE_ID_SOURCE = enum(i32) {
    FAX = 0,
    TAPI = 1,
};
pub const DEV_ID_SRC_FAX = FAX_ENUM_DEVICE_ID_SOURCE.FAX;
pub const DEV_ID_SRC_TAPI = FAX_ENUM_DEVICE_ID_SOURCE.TAPI;

pub const PFAX_EXT_GET_DATA = *const fn (
    param0: u32,
    param1: FAX_ENUM_DEVICE_ID_SOURCE,
    param2: ?[*:0]const u16,
    param3: ?*?*u8,
    param4: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFAX_EXT_SET_DATA = *const fn (
    param0: ?HINSTANCE,
    param1: u32,
    param2: FAX_ENUM_DEVICE_ID_SOURCE,
    param3: ?[*:0]const u16,
    param4: ?*u8,
    param5: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFAX_EXT_CONFIG_CHANGE = *const fn (
    param0: u32,
    param1: ?[*:0]const u16,
    param2: ?*u8,
    param3: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFAX_EXT_REGISTER_FOR_EVENTS = *const fn (
    param0: ?HINSTANCE,
    param1: u32,
    param2: FAX_ENUM_DEVICE_ID_SOURCE,
    param3: ?[*:0]const u16,
    param4: ?PFAX_EXT_CONFIG_CHANGE,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub const PFAX_EXT_UNREGISTER_FOR_EVENTS = *const fn (
    param0: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFAX_EXT_FREE_BUFFER = *const fn (
    param0: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFAX_EXT_INITIALIZE_CONFIG = *const fn (
    param0: ?PFAX_EXT_GET_DATA,
    param1: ?PFAX_EXT_SET_DATA,
    param2: ?PFAX_EXT_REGISTER_FOR_EVENTS,
    param3: ?PFAX_EXT_UNREGISTER_FOR_EVENTS,
    param4: ?PFAX_EXT_FREE_BUFFER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const SendToMode = enum(i32) {
    T = 0,
};
pub const SEND_TO_FAX_RECIPIENT_ATTACHMENT = SendToMode.T;

pub const STI_DEVICE_MJ_TYPE = enum(i32) {
    Default = 0,
    Scanner = 1,
    DigitalCamera = 2,
    StreamingVideo = 3,
};
pub const StiDeviceTypeDefault = STI_DEVICE_MJ_TYPE.Default;
pub const StiDeviceTypeScanner = STI_DEVICE_MJ_TYPE.Scanner;
pub const StiDeviceTypeDigitalCamera = STI_DEVICE_MJ_TYPE.DigitalCamera;
pub const StiDeviceTypeStreamingVideo = STI_DEVICE_MJ_TYPE.StreamingVideo;

pub const STI_DEV_CAPS = extern struct {
    dwGeneric: u32,
};

pub const STI_DEVICE_INFORMATIONW = extern struct {
    dwSize: u32,
    DeviceType: u32,
    szDeviceInternalName: [128]u16,
    DeviceCapabilitiesA: STI_DEV_CAPS,
    dwHardwareConfiguration: u32,
    pszVendorDescription: ?PWSTR,
    pszDeviceDescription: ?PWSTR,
    pszPortName: ?PWSTR,
    pszPropProvider: ?PWSTR,
    pszLocalName: ?PWSTR,
};

pub const STI_WIA_DEVICE_INFORMATIONW = extern struct {
    dwSize: u32,
    DeviceType: u32,
    szDeviceInternalName: [128]u16,
    DeviceCapabilitiesA: STI_DEV_CAPS,
    dwHardwareConfiguration: u32,
    pszVendorDescription: ?PWSTR,
    pszDeviceDescription: ?PWSTR,
    pszPortName: ?PWSTR,
    pszPropProvider: ?PWSTR,
    pszLocalName: ?PWSTR,
    pszUiDll: ?PWSTR,
    pszServer: ?PWSTR,
};

pub const STI_DEVICE_STATUS = extern struct {
    dwSize: u32,
    StatusMask: u32,
    dwOnlineState: u32,
    dwHardwareStatusCode: u32,
    dwEventHandlingState: u32,
    dwPollingInterval: u32,
};

pub const _ERROR_INFOW = extern struct {
    dwSize: u32,
    dwGenericError: u32,
    dwVendorError: u32,
    szExtendedErrorText: [255]u16,
};

pub const STI_DIAG = extern struct {
    dwSize: u32,
    dwBasicDiagCode: u32,
    dwVendorDiagCode: u32,
    dwStatusMask: u32,
    sErrorInfo: _ERROR_INFOW,
};

pub const STISUBSCRIBE = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwFilter: u32,
    hWndNotify: ?HWND,
    hEvent: ?HANDLE,
    uiNotificationMessage: u32,
};

pub const STINOTIFY = extern struct {
    dwSize: u32,
    guidNotificationCode: Guid,
    abNotificationData: [64]u8,
};

pub const IStiDeviceW = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

const IID_IStillImageW_Value = Guid.initString("641bd880-2dc8-11d0-90ea-00aa0060f86c");
pub const IID_IStillImageW = &IID_IStillImageW_Value;
pub const IStillImageW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IStillImageW,
            hinst: ?HINSTANCE,
            dw_version: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceList: *const fn (
            self: *const IStillImageW,
            dw_type: u32,
            dw_flags: u32,
            pdw_items_returned: ?*u32,
            pp_buffer: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceInfo: *const fn (
            self: *const IStillImageW,
            pwsz_device_name: ?PWSTR,
            pp_buffer: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDevice: *const fn (
            self: *const IStillImageW,
            pwsz_device_name: ?PWSTR,
            dw_mode: u32,
            p_device: ?*?*IStiDevice,
            punk_outer: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceValue: *const fn (
            self: *const IStillImageW,
            pwsz_device_name: ?PWSTR,
            p_value_name: ?PWSTR,
            p_type: ?*u32,
            // TODO: what to do with BytesParamIndex 4?
            p_data: ?*u8,
            cb_data: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDeviceValue: *const fn (
            self: *const IStillImageW,
            pwsz_device_name: ?PWSTR,
            p_value_name: ?PWSTR,
            type: u32,
            // TODO: what to do with BytesParamIndex 4?
            p_data: ?*u8,
            cb_data: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSTILaunchInformation: *const fn (
            self: *const IStillImageW,
            pwsz_device_name: *[128]u16,
            pdw_event_code: ?*u32,
            pwsz_event_name: *[128]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterLaunchApplication: *const fn (
            self: *const IStillImageW,
            pwsz_app_name: ?PWSTR,
            pwsz_command_line: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterLaunchApplication: *const fn (
            self: *const IStillImageW,
            pwsz_app_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableHwNotifications: *const fn (
            self: *const IStillImageW,
            pwsz_device_name: ?[*:0]const u16,
            b_new_state: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHwNotificationState: *const fn (
            self: *const IStillImageW,
            pwsz_device_name: ?[*:0]const u16,
            pb_current_state: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshDeviceBus: *const fn (
            self: *const IStillImageW,
            pwsz_device_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LaunchApplicationForDevice: *const fn (
            self: *const IStillImageW,
            pwsz_device_name: ?PWSTR,
            pwsz_app_name: ?PWSTR,
            p_sti_notify: ?*STINOTIFY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetupDeviceParameters: *const fn (
            self: *const IStillImageW,
            param0: ?*STI_DEVICE_INFORMATIONW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToErrorLog: *const fn (
            self: *const IStillImageW,
            dw_message_type: u32,
            psz_message: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, hinst_: ?HINSTANCE, dw_version_: u32) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IStillImageW, @ptrCast(self)), hinst_, dw_version_);
            }
            pub inline fn getDeviceList(self: *const T, dw_type_: u32, dw_flags_: u32, pdw_items_returned_: ?*u32, pp_buffer_: ?*?*anyopaque) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).GetDeviceList(@as(*const IStillImageW, @ptrCast(self)), dw_type_, dw_flags_, pdw_items_returned_, pp_buffer_);
            }
            pub inline fn getDeviceInfo(self: *const T, pwsz_device_name_: ?PWSTR, pp_buffer_: ?*?*anyopaque) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).GetDeviceInfo(@as(*const IStillImageW, @ptrCast(self)), pwsz_device_name_, pp_buffer_);
            }
            pub inline fn createDevice(self: *const T, pwsz_device_name_: ?PWSTR, dw_mode_: u32, p_device_: ?*?*IStiDevice, punk_outer_: ?*IUnknown) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).CreateDevice(@as(*const IStillImageW, @ptrCast(self)), pwsz_device_name_, dw_mode_, p_device_, punk_outer_);
            }
            pub inline fn getDeviceValue(self: *const T, pwsz_device_name_: ?PWSTR, p_value_name_: ?PWSTR, p_type_: ?*u32, p_data_: ?*u8, cb_data_: ?*u32) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).GetDeviceValue(@as(*const IStillImageW, @ptrCast(self)), pwsz_device_name_, p_value_name_, p_type_, p_data_, cb_data_);
            }
            pub inline fn setDeviceValue(self: *const T, pwsz_device_name_: ?PWSTR, p_value_name_: ?PWSTR, type_: u32, p_data_: ?*u8, cb_data_: u32) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).SetDeviceValue(@as(*const IStillImageW, @ptrCast(self)), pwsz_device_name_, p_value_name_, type_, p_data_, cb_data_);
            }
            pub inline fn getSTILaunchInformation(self: *const T, pwsz_device_name_: *[128]u16, pdw_event_code_: ?*u32, pwsz_event_name_: *[128]u16) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).GetSTILaunchInformation(@as(*const IStillImageW, @ptrCast(self)), pwsz_device_name_, pdw_event_code_, pwsz_event_name_);
            }
            pub inline fn registerLaunchApplication(self: *const T, pwsz_app_name_: ?PWSTR, pwsz_command_line_: ?PWSTR) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).RegisterLaunchApplication(@as(*const IStillImageW, @ptrCast(self)), pwsz_app_name_, pwsz_command_line_);
            }
            pub inline fn unregisterLaunchApplication(self: *const T, pwsz_app_name_: ?PWSTR) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).UnregisterLaunchApplication(@as(*const IStillImageW, @ptrCast(self)), pwsz_app_name_);
            }
            pub inline fn enableHwNotifications(self: *const T, pwsz_device_name_: ?[*:0]const u16, b_new_state_: BOOL) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).EnableHwNotifications(@as(*const IStillImageW, @ptrCast(self)), pwsz_device_name_, b_new_state_);
            }
            pub inline fn getHwNotificationState(self: *const T, pwsz_device_name_: ?[*:0]const u16, pb_current_state_: ?*BOOL) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).GetHwNotificationState(@as(*const IStillImageW, @ptrCast(self)), pwsz_device_name_, pb_current_state_);
            }
            pub inline fn refreshDeviceBus(self: *const T, pwsz_device_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).RefreshDeviceBus(@as(*const IStillImageW, @ptrCast(self)), pwsz_device_name_);
            }
            pub inline fn launchApplicationForDevice(self: *const T, pwsz_device_name_: ?PWSTR, pwsz_app_name_: ?PWSTR, p_sti_notify_: ?*STINOTIFY) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).LaunchApplicationForDevice(@as(*const IStillImageW, @ptrCast(self)), pwsz_device_name_, pwsz_app_name_, p_sti_notify_);
            }
            pub inline fn setupDeviceParameters(self: *const T, param0_: ?*STI_DEVICE_INFORMATIONW) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).SetupDeviceParameters(@as(*const IStillImageW, @ptrCast(self)), param0_);
            }
            pub inline fn writeToErrorLog(self: *const T, dw_message_type_: u32, psz_message_: ?[*:0]const u16) HRESULT {
                return @as(*const IStillImageW.VTable, @ptrCast(self.vtable)).WriteToErrorLog(@as(*const IStillImageW, @ptrCast(self)), dw_message_type_, psz_message_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IStiDevice_Value = Guid.initString("6cfa5a80-2dc8-11d0-90ea-00aa0060f86c");
pub const IID_IStiDevice = &IID_IStiDevice_Value;
pub const IStiDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IStiDevice,
            hinst: ?HINSTANCE,
            pwsz_device_name: ?[*:0]const u16,
            dw_version: u32,
            dw_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn (
            self: *const IStiDevice,
            p_dev_caps: ?*STI_DEV_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IStiDevice,
            p_dev_status: ?*STI_DEVICE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceReset: *const fn (
            self: *const IStiDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Diagnostic: *const fn (
            self: *const IStiDevice,
            p_buffer: ?*STI_DIAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: *const fn (
            self: *const IStiDevice,
            escape_function: u32,
            // TODO: what to do with BytesParamIndex 2?
            lp_in_data: ?*anyopaque,
            cb_in_data_size: u32,
            // TODO: what to do with BytesParamIndex 4?
            p_out_data: ?*anyopaque,
            dw_out_data_size: u32,
            pdw_actual_data: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastError: *const fn (
            self: *const IStiDevice,
            pdw_last_device_error: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockDevice: *const fn (
            self: *const IStiDevice,
            dw_time_out: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnLockDevice: *const fn (
            self: *const IStiDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawReadData: *const fn (
            self: *const IStiDevice,
            // TODO: what to do with BytesParamIndex 1?
            lp_buffer: ?*anyopaque,
            lpdw_number_of_bytes: ?*u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawWriteData: *const fn (
            self: *const IStiDevice,
            // TODO: what to do with BytesParamIndex 1?
            lp_buffer: ?*anyopaque,
            n_number_of_bytes: u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawReadCommand: *const fn (
            self: *const IStiDevice,
            // TODO: what to do with BytesParamIndex 1?
            lp_buffer: ?*anyopaque,
            lpdw_number_of_bytes: ?*u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawWriteCommand: *const fn (
            self: *const IStiDevice,
            // TODO: what to do with BytesParamIndex 1?
            lp_buffer: ?*anyopaque,
            n_number_of_bytes: u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Subscribe: *const fn (
            self: *const IStiDevice,
            lp_subsribe: ?*STISUBSCRIBE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastNotificationData: *const fn (
            self: *const IStiDevice,
            lp_notify: ?*STINOTIFY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnSubscribe: *const fn (
            self: *const IStiDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastErrorInfo: *const fn (
            self: *const IStiDevice,
            p_last_error_info: ?*_ERROR_INFOW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, hinst_: ?HINSTANCE, pwsz_device_name_: ?[*:0]const u16, dw_version_: u32, dw_mode_: u32) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IStiDevice, @ptrCast(self)), hinst_, pwsz_device_name_, dw_version_, dw_mode_);
            }
            pub inline fn getCapabilities(self: *const T, p_dev_caps_: ?*STI_DEV_CAPS) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const IStiDevice, @ptrCast(self)), p_dev_caps_);
            }
            pub inline fn getStatus(self: *const T, p_dev_status_: ?*STI_DEVICE_STATUS) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IStiDevice, @ptrCast(self)), p_dev_status_);
            }
            pub inline fn deviceReset(self: *const T) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).DeviceReset(@as(*const IStiDevice, @ptrCast(self)));
            }
            pub inline fn diagnostic(self: *const T, p_buffer_: ?*STI_DIAG) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).Diagnostic(@as(*const IStiDevice, @ptrCast(self)), p_buffer_);
            }
            pub inline fn escape(self: *const T, escape_function_: u32, lp_in_data_: ?*anyopaque, cb_in_data_size_: u32, p_out_data_: ?*anyopaque, dw_out_data_size_: u32, pdw_actual_data_: ?*u32) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).Escape(@as(*const IStiDevice, @ptrCast(self)), escape_function_, lp_in_data_, cb_in_data_size_, p_out_data_, dw_out_data_size_, pdw_actual_data_);
            }
            pub inline fn getLastError(self: *const T, pdw_last_device_error_: ?*u32) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).GetLastError(@as(*const IStiDevice, @ptrCast(self)), pdw_last_device_error_);
            }
            pub inline fn lockDevice(self: *const T, dw_time_out_: u32) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).LockDevice(@as(*const IStiDevice, @ptrCast(self)), dw_time_out_);
            }
            pub inline fn unLockDevice(self: *const T) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).UnLockDevice(@as(*const IStiDevice, @ptrCast(self)));
            }
            pub inline fn rawReadData(self: *const T, lp_buffer_: ?*anyopaque, lpdw_number_of_bytes_: ?*u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).RawReadData(@as(*const IStiDevice, @ptrCast(self)), lp_buffer_, lpdw_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawWriteData(self: *const T, lp_buffer_: ?*anyopaque, n_number_of_bytes_: u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).RawWriteData(@as(*const IStiDevice, @ptrCast(self)), lp_buffer_, n_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawReadCommand(self: *const T, lp_buffer_: ?*anyopaque, lpdw_number_of_bytes_: ?*u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).RawReadCommand(@as(*const IStiDevice, @ptrCast(self)), lp_buffer_, lpdw_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawWriteCommand(self: *const T, lp_buffer_: ?*anyopaque, n_number_of_bytes_: u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).RawWriteCommand(@as(*const IStiDevice, @ptrCast(self)), lp_buffer_, n_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn subscribe(self: *const T, lp_subsribe_: ?*STISUBSCRIBE) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).Subscribe(@as(*const IStiDevice, @ptrCast(self)), lp_subsribe_);
            }
            pub inline fn getLastNotificationData(self: *const T, lp_notify_: ?*STINOTIFY) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).GetLastNotificationData(@as(*const IStiDevice, @ptrCast(self)), lp_notify_);
            }
            pub inline fn unSubscribe(self: *const T) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).UnSubscribe(@as(*const IStiDevice, @ptrCast(self)));
            }
            pub inline fn getLastErrorInfo(self: *const T, p_last_error_info_: ?*_ERROR_INFOW) HRESULT {
                return @as(*const IStiDevice.VTable, @ptrCast(self.vtable)).GetLastErrorInfo(@as(*const IStiDevice, @ptrCast(self)), p_last_error_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const STI_USD_CAPS = extern struct {
    dwVersion: u32,
    dwGenericCaps: u32,
};

const IID_IStiDeviceControl_Value = Guid.initString("128a9860-52dc-11d0-9edf-444553540000");
pub const IID_IStiDeviceControl = &IID_IStiDeviceControl_Value;
pub const IStiDeviceControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IStiDeviceControl,
            dw_device_type: u32,
            dw_mode: u32,
            pwsz_port_name: ?[*:0]const u16,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawReadData: *const fn (
            self: *const IStiDeviceControl,
            lp_buffer: ?*anyopaque,
            lpdw_number_of_bytes: ?*u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawWriteData: *const fn (
            self: *const IStiDeviceControl,
            lp_buffer: ?*anyopaque,
            n_number_of_bytes: u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawReadCommand: *const fn (
            self: *const IStiDeviceControl,
            lp_buffer: ?*anyopaque,
            lpdw_number_of_bytes: ?*u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawWriteCommand: *const fn (
            self: *const IStiDeviceControl,
            lp_buffer: ?*anyopaque,
            n_number_of_bytes: u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawDeviceControl: *const fn (
            self: *const IStiDeviceControl,
            escape_function: u32,
            lp_in_data: ?*anyopaque,
            cb_in_data_size: u32,
            p_out_data: ?*anyopaque,
            dw_out_data_size: u32,
            pdw_actual_data: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastError: *const fn (
            self: *const IStiDeviceControl,
            lpdw_last_error: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyDevicePortName: *const fn (
            self: *const IStiDeviceControl,
            lpsz_device_path: [*:0]u16,
            cw_device_path_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyDeviceHandle: *const fn (
            self: *const IStiDeviceControl,
            lph: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyDeviceOpenMode: *const fn (
            self: *const IStiDeviceControl,
            pdw_open_mode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToErrorLog: *const fn (
            self: *const IStiDeviceControl,
            dw_message_type: u32,
            psz_message: ?[*:0]const u16,
            dw_error_code: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, dw_device_type_: u32, dw_mode_: u32, pwsz_port_name_: ?[*:0]const u16, dw_flags_: u32) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IStiDeviceControl, @ptrCast(self)), dw_device_type_, dw_mode_, pwsz_port_name_, dw_flags_);
            }
            pub inline fn rawReadData(self: *const T, lp_buffer_: ?*anyopaque, lpdw_number_of_bytes_: ?*u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).RawReadData(@as(*const IStiDeviceControl, @ptrCast(self)), lp_buffer_, lpdw_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawWriteData(self: *const T, lp_buffer_: ?*anyopaque, n_number_of_bytes_: u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).RawWriteData(@as(*const IStiDeviceControl, @ptrCast(self)), lp_buffer_, n_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawReadCommand(self: *const T, lp_buffer_: ?*anyopaque, lpdw_number_of_bytes_: ?*u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).RawReadCommand(@as(*const IStiDeviceControl, @ptrCast(self)), lp_buffer_, lpdw_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawWriteCommand(self: *const T, lp_buffer_: ?*anyopaque, n_number_of_bytes_: u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).RawWriteCommand(@as(*const IStiDeviceControl, @ptrCast(self)), lp_buffer_, n_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawDeviceControl(self: *const T, escape_function_: u32, lp_in_data_: ?*anyopaque, cb_in_data_size_: u32, p_out_data_: ?*anyopaque, dw_out_data_size_: u32, pdw_actual_data_: ?*u32) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).RawDeviceControl(@as(*const IStiDeviceControl, @ptrCast(self)), escape_function_, lp_in_data_, cb_in_data_size_, p_out_data_, dw_out_data_size_, pdw_actual_data_);
            }
            pub inline fn getLastError(self: *const T, lpdw_last_error_: ?*u32) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).GetLastError(@as(*const IStiDeviceControl, @ptrCast(self)), lpdw_last_error_);
            }
            pub inline fn getMyDevicePortName(self: *const T, lpsz_device_path_: [*:0]u16, cw_device_path_size_: u32) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).GetMyDevicePortName(@as(*const IStiDeviceControl, @ptrCast(self)), lpsz_device_path_, cw_device_path_size_);
            }
            pub inline fn getMyDeviceHandle(self: *const T, lph_: ?*?HANDLE) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).GetMyDeviceHandle(@as(*const IStiDeviceControl, @ptrCast(self)), lph_);
            }
            pub inline fn getMyDeviceOpenMode(self: *const T, pdw_open_mode_: ?*u32) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).GetMyDeviceOpenMode(@as(*const IStiDeviceControl, @ptrCast(self)), pdw_open_mode_);
            }
            pub inline fn writeToErrorLog(self: *const T, dw_message_type_: u32, psz_message_: ?[*:0]const u16, dw_error_code_: u32) HRESULT {
                return @as(*const IStiDeviceControl.VTable, @ptrCast(self.vtable)).WriteToErrorLog(@as(*const IStiDeviceControl, @ptrCast(self)), dw_message_type_, psz_message_, dw_error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IStiUSD_Value = Guid.initString("0c9bb460-51ac-11d0-90ea-00aa0060f86c");
pub const IID_IStiUSD = &IID_IStiUSD_Value;
pub const IStiUSD = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IStiUSD,
            p_hel_dcb: ?*IStiDeviceControl,
            dw_sti_version: u32,
            h_parameters_key: ?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn (
            self: *const IStiUSD,
            p_dev_caps: ?*STI_USD_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IStiUSD,
            p_dev_status: ?*STI_DEVICE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceReset: *const fn (
            self: *const IStiUSD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Diagnostic: *const fn (
            self: *const IStiUSD,
            p_buffer: ?*STI_DIAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Escape: *const fn (
            self: *const IStiUSD,
            escape_function: u32,
            // TODO: what to do with BytesParamIndex 2?
            lp_in_data: ?*anyopaque,
            cb_in_data_size: u32,
            // TODO: what to do with BytesParamIndex 4?
            p_out_data: ?*anyopaque,
            cb_out_data_size: u32,
            pdw_actual_data: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastError: *const fn (
            self: *const IStiUSD,
            pdw_last_device_error: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockDevice: *const fn (
            self: *const IStiUSD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnLockDevice: *const fn (
            self: *const IStiUSD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawReadData: *const fn (
            self: *const IStiUSD,
            // TODO: what to do with BytesParamIndex 1?
            lp_buffer: ?*anyopaque,
            lpdw_number_of_bytes: ?*u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawWriteData: *const fn (
            self: *const IStiUSD,
            // TODO: what to do with BytesParamIndex 1?
            lp_buffer: ?*anyopaque,
            n_number_of_bytes: u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawReadCommand: *const fn (
            self: *const IStiUSD,
            // TODO: what to do with BytesParamIndex 1?
            lp_buffer: ?*anyopaque,
            lpdw_number_of_bytes: ?*u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RawWriteCommand: *const fn (
            self: *const IStiUSD,
            // TODO: what to do with BytesParamIndex 1?
            lp_buffer: ?*anyopaque,
            n_number_of_bytes: u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNotificationHandle: *const fn (
            self: *const IStiUSD,
            h_event: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNotificationData: *const fn (
            self: *const IStiUSD,
            lp_notify: ?*STINOTIFY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastErrorInfo: *const fn (
            self: *const IStiUSD,
            p_last_error_info: ?*_ERROR_INFOW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_hel_dcb_: ?*IStiDeviceControl, dw_sti_version_: u32, h_parameters_key_: ?HKEY) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IStiUSD, @ptrCast(self)), p_hel_dcb_, dw_sti_version_, h_parameters_key_);
            }
            pub inline fn getCapabilities(self: *const T, p_dev_caps_: ?*STI_USD_CAPS) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const IStiUSD, @ptrCast(self)), p_dev_caps_);
            }
            pub inline fn getStatus(self: *const T, p_dev_status_: ?*STI_DEVICE_STATUS) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IStiUSD, @ptrCast(self)), p_dev_status_);
            }
            pub inline fn deviceReset(self: *const T) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).DeviceReset(@as(*const IStiUSD, @ptrCast(self)));
            }
            pub inline fn diagnostic(self: *const T, p_buffer_: ?*STI_DIAG) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).Diagnostic(@as(*const IStiUSD, @ptrCast(self)), p_buffer_);
            }
            pub inline fn escape(self: *const T, escape_function_: u32, lp_in_data_: ?*anyopaque, cb_in_data_size_: u32, p_out_data_: ?*anyopaque, cb_out_data_size_: u32, pdw_actual_data_: ?*u32) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).Escape(@as(*const IStiUSD, @ptrCast(self)), escape_function_, lp_in_data_, cb_in_data_size_, p_out_data_, cb_out_data_size_, pdw_actual_data_);
            }
            pub inline fn getLastError(self: *const T, pdw_last_device_error_: ?*u32) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).GetLastError(@as(*const IStiUSD, @ptrCast(self)), pdw_last_device_error_);
            }
            pub inline fn lockDevice(self: *const T) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).LockDevice(@as(*const IStiUSD, @ptrCast(self)));
            }
            pub inline fn unLockDevice(self: *const T) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).UnLockDevice(@as(*const IStiUSD, @ptrCast(self)));
            }
            pub inline fn rawReadData(self: *const T, lp_buffer_: ?*anyopaque, lpdw_number_of_bytes_: ?*u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).RawReadData(@as(*const IStiUSD, @ptrCast(self)), lp_buffer_, lpdw_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawWriteData(self: *const T, lp_buffer_: ?*anyopaque, n_number_of_bytes_: u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).RawWriteData(@as(*const IStiUSD, @ptrCast(self)), lp_buffer_, n_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawReadCommand(self: *const T, lp_buffer_: ?*anyopaque, lpdw_number_of_bytes_: ?*u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).RawReadCommand(@as(*const IStiUSD, @ptrCast(self)), lp_buffer_, lpdw_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn rawWriteCommand(self: *const T, lp_buffer_: ?*anyopaque, n_number_of_bytes_: u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).RawWriteCommand(@as(*const IStiUSD, @ptrCast(self)), lp_buffer_, n_number_of_bytes_, lp_overlapped_);
            }
            pub inline fn setNotificationHandle(self: *const T, h_event_: ?HANDLE) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).SetNotificationHandle(@as(*const IStiUSD, @ptrCast(self)), h_event_);
            }
            pub inline fn getNotificationData(self: *const T, lp_notify_: ?*STINOTIFY) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).GetNotificationData(@as(*const IStiUSD, @ptrCast(self)), lp_notify_);
            }
            pub inline fn getLastErrorInfo(self: *const T, p_last_error_info_: ?*_ERROR_INFOW) HRESULT {
                return @as(*const IStiUSD.VTable, @ptrCast(self.vtable)).GetLastErrorInfo(@as(*const IStiUSD, @ptrCast(self)), p_last_error_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (59)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxConnectFaxServerA(
    machine_name: ?[*:0]const u8,
    fax_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxConnectFaxServerW(
    machine_name: ?[*:0]const u16,
    fax_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winfax" fn FaxClose(
    fax_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winfax" fn FaxOpenPort(
    fax_handle: ?HANDLE,
    device_id: u32,
    flags: u32,
    fax_port_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxCompleteJobParamsA(
    job_params: ?*?*FAX_JOB_PARAMA,
    coverpage_info: ?*?*FAX_COVERPAGE_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxCompleteJobParamsW(
    job_params: ?*?*FAX_JOB_PARAMW,
    coverpage_info: ?*?*FAX_COVERPAGE_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSendDocumentA(
    fax_handle: ?HANDLE,
    file_name: ?[*:0]const u8,
    job_params: ?*FAX_JOB_PARAMA,
    coverpage_info: ?*const FAX_COVERPAGE_INFOA,
    fax_job_id: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSendDocumentW(
    fax_handle: ?HANDLE,
    file_name: ?[*:0]const u16,
    job_params: ?*FAX_JOB_PARAMW,
    coverpage_info: ?*const FAX_COVERPAGE_INFOW,
    fax_job_id: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSendDocumentForBroadcastA(
    fax_handle: ?HANDLE,
    file_name: ?[*:0]const u8,
    fax_job_id: ?*u32,
    fax_recipient_callback: ?PFAX_RECIPIENT_CALLBACKA,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSendDocumentForBroadcastW(
    fax_handle: ?HANDLE,
    file_name: ?[*:0]const u16,
    fax_job_id: ?*u32,
    fax_recipient_callback: ?PFAX_RECIPIENT_CALLBACKW,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnumJobsA(
    fax_handle: ?HANDLE,
    job_entry: ?*?*FAX_JOB_ENTRYA,
    jobs_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnumJobsW(
    fax_handle: ?HANDLE,
    job_entry: ?*?*FAX_JOB_ENTRYW,
    jobs_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetJobA(
    fax_handle: ?HANDLE,
    job_id: u32,
    job_entry: ?*?*FAX_JOB_ENTRYA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetJobW(
    fax_handle: ?HANDLE,
    job_id: u32,
    job_entry: ?*?*FAX_JOB_ENTRYW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetJobA(
    fax_handle: ?HANDLE,
    job_id: u32,
    command: u32,
    job_entry: ?*const FAX_JOB_ENTRYA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetJobW(
    fax_handle: ?HANDLE,
    job_id: u32,
    command: u32,
    job_entry: ?*const FAX_JOB_ENTRYW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winfax" fn FaxGetPageData(
    fax_handle: ?HANDLE,
    job_id: u32,
    buffer: ?*?*u8,
    buffer_size: ?*u32,
    image_width: ?*u32,
    image_height: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetDeviceStatusA(
    fax_port_handle: ?HANDLE,
    device_status: ?*?*FAX_DEVICE_STATUSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetDeviceStatusW(
    fax_port_handle: ?HANDLE,
    device_status: ?*?*FAX_DEVICE_STATUSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winfax" fn FaxAbort(
    fax_handle: ?HANDLE,
    job_id: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetConfigurationA(
    fax_handle: ?HANDLE,
    fax_config: ?*?*FAX_CONFIGURATIONA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetConfigurationW(
    fax_handle: ?HANDLE,
    fax_config: ?*?*FAX_CONFIGURATIONW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetConfigurationA(
    fax_handle: ?HANDLE,
    fax_config: ?*const FAX_CONFIGURATIONA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetConfigurationW(
    fax_handle: ?HANDLE,
    fax_config: ?*const FAX_CONFIGURATIONW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetLoggingCategoriesA(
    fax_handle: ?HANDLE,
    categories: ?*?*FAX_LOG_CATEGORYA,
    number_categories: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetLoggingCategoriesW(
    fax_handle: ?HANDLE,
    categories: ?*?*FAX_LOG_CATEGORYW,
    number_categories: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetLoggingCategoriesA(
    fax_handle: ?HANDLE,
    categories: ?*const FAX_LOG_CATEGORYA,
    number_categories: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetLoggingCategoriesW(
    fax_handle: ?HANDLE,
    categories: ?*const FAX_LOG_CATEGORYW,
    number_categories: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnumPortsA(
    fax_handle: ?HANDLE,
    port_info: ?*?*FAX_PORT_INFOA,
    ports_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnumPortsW(
    fax_handle: ?HANDLE,
    port_info: ?*?*FAX_PORT_INFOW,
    ports_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetPortA(
    fax_port_handle: ?HANDLE,
    port_info: ?*?*FAX_PORT_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetPortW(
    fax_port_handle: ?HANDLE,
    port_info: ?*?*FAX_PORT_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetPortA(
    fax_port_handle: ?HANDLE,
    port_info: ?*const FAX_PORT_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetPortW(
    fax_port_handle: ?HANDLE,
    port_info: ?*const FAX_PORT_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnumRoutingMethodsA(
    fax_port_handle: ?HANDLE,
    routing_method: ?*?*FAX_ROUTING_METHODA,
    methods_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnumRoutingMethodsW(
    fax_port_handle: ?HANDLE,
    routing_method: ?*?*FAX_ROUTING_METHODW,
    methods_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnableRoutingMethodA(
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u8,
    enabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnableRoutingMethodW(
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u16,
    enabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnumGlobalRoutingInfoA(
    fax_handle: ?HANDLE,
    routing_info: ?*?*FAX_GLOBAL_ROUTING_INFOA,
    methods_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxEnumGlobalRoutingInfoW(
    fax_handle: ?HANDLE,
    routing_info: ?*?*FAX_GLOBAL_ROUTING_INFOW,
    methods_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetGlobalRoutingInfoA(
    fax_handle: ?HANDLE,
    routing_info: ?*const FAX_GLOBAL_ROUTING_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetGlobalRoutingInfoW(
    fax_handle: ?HANDLE,
    routing_info: ?*const FAX_GLOBAL_ROUTING_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetRoutingInfoA(
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u8,
    routing_info_buffer: ?*?*u8,
    routing_info_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxGetRoutingInfoW(
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u16,
    routing_info_buffer: ?*?*u8,
    routing_info_buffer_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetRoutingInfoA(
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u8,
    routing_info_buffer: ?*const u8,
    routing_info_buffer_size: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxSetRoutingInfoW(
    fax_port_handle: ?HANDLE,
    routing_guid: ?[*:0]const u16,
    routing_info_buffer: ?*const u8,
    routing_info_buffer_size: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winfax" fn FaxInitializeEventQueue(
    fax_handle: ?HANDLE,
    completion_port: ?HANDLE,
    completion_key: usize,
    h_wnd: ?HWND,
    message_start: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winfax" fn FaxFreeBuffer(
    buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxStartPrintJobA(
    printer_name: ?[*:0]const u8,
    print_info: ?*const FAX_PRINT_INFOA,
    fax_job_id: ?*u32,
    fax_context_info: ?*FAX_CONTEXT_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxStartPrintJobW(
    printer_name: ?[*:0]const u16,
    print_info: ?*const FAX_PRINT_INFOW,
    fax_job_id: ?*u32,
    fax_context_info: ?*FAX_CONTEXT_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxPrintCoverPageA(
    fax_context_info: ?*const FAX_CONTEXT_INFOA,
    cover_page_info: ?*const FAX_COVERPAGE_INFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxPrintCoverPageW(
    fax_context_info: ?*const FAX_CONTEXT_INFOW,
    cover_page_info: ?*const FAX_COVERPAGE_INFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxRegisterServiceProviderW(
    device_provider: ?[*:0]const u16,
    friendly_name: ?[*:0]const u16,
    image_name: ?[*:0]const u16,
    tsp_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winfax" fn FaxUnregisterServiceProviderW(
    device_provider: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winfax" fn FaxRegisterRoutingExtensionW(
    fax_handle: ?HANDLE,
    extension_name: ?[*:0]const u16,
    friendly_name: ?[*:0]const u16,
    image_name: ?[*:0]const u16,
    call_back: ?PFAX_ROUTING_INSTALLATION_CALLBACKW,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winfax" fn FaxAccessCheck(
    fax_handle: ?HANDLE,
    access_mask: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fxsutility" fn CanSendToFaxRecipient() callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "fxsutility" fn SendToFaxRecipient(
    snd_mode: SendToMode,
    lp_file_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "sti" fn StiCreateInstanceW(
    hinst: ?HINSTANCE,
    dw_ver: u32,
    pp_sti: ?*?*IStillImageW,
    punk_outer: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (59)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const FAX_LOG_CATEGORY = thismodule.FAX_LOG_CATEGORYA;
        pub const FAX_CONFIGURATION = thismodule.FAX_CONFIGURATIONA;
        pub const FAX_DEVICE_STATUS = thismodule.FAX_DEVICE_STATUSA;
        pub const FAX_JOB_ENTRY = thismodule.FAX_JOB_ENTRYA;
        pub const FAX_PORT_INFO = thismodule.FAX_PORT_INFOA;
        pub const FAX_ROUTING_METHOD = thismodule.FAX_ROUTING_METHODA;
        pub const FAX_GLOBAL_ROUTING_INFO = thismodule.FAX_GLOBAL_ROUTING_INFOA;
        pub const FAX_COVERPAGE_INFO = thismodule.FAX_COVERPAGE_INFOA;
        pub const FAX_JOB_PARAM = thismodule.FAX_JOB_PARAMA;
        pub const FAX_EVENT = thismodule.FAX_EVENTA;
        pub const FAX_PRINT_INFO = thismodule.FAX_PRINT_INFOA;
        pub const FAX_CONTEXT_INFO = thismodule.FAX_CONTEXT_INFOA;
        pub const PFAXCONNECTFAXSERVER = thismodule.PFAXCONNECTFAXSERVERA;
        pub const PFAXCOMPLETEJOBPARAMS = thismodule.PFAXCOMPLETEJOBPARAMSA;
        pub const PFAXSENDDOCUMENT = thismodule.PFAXSENDDOCUMENTA;
        pub const PFAX_RECIPIENT_CALLBACK = thismodule.PFAX_RECIPIENT_CALLBACKA;
        pub const PFAXSENDDOCUMENTFORBROADCAST = thismodule.PFAXSENDDOCUMENTFORBROADCASTA;
        pub const PFAXENUMJOBS = thismodule.PFAXENUMJOBSA;
        pub const PFAXGETJOB = thismodule.PFAXGETJOBA;
        pub const PFAXSETJOB = thismodule.PFAXSETJOBA;
        pub const PFAXGETDEVICESTATUS = thismodule.PFAXGETDEVICESTATUSA;
        pub const PFAXGETCONFIGURATION = thismodule.PFAXGETCONFIGURATIONA;
        pub const PFAXSETCONFIGURATION = thismodule.PFAXSETCONFIGURATIONA;
        pub const PFAXGETLOGGINGCATEGORIES = thismodule.PFAXGETLOGGINGCATEGORIESA;
        pub const PFAXSETLOGGINGCATEGORIES = thismodule.PFAXSETLOGGINGCATEGORIESA;
        pub const PFAXENUMPORTS = thismodule.PFAXENUMPORTSA;
        pub const PFAXGETPORT = thismodule.PFAXGETPORTA;
        pub const PFAXSETPORT = thismodule.PFAXSETPORTA;
        pub const PFAXENUMROUTINGMETHODS = thismodule.PFAXENUMROUTINGMETHODSA;
        pub const PFAXENABLEROUTINGMETHOD = thismodule.PFAXENABLEROUTINGMETHODA;
        pub const PFAXENUMGLOBALROUTINGINFO = thismodule.PFAXENUMGLOBALROUTINGINFOA;
        pub const PFAXSETGLOBALROUTINGINFO = thismodule.PFAXSETGLOBALROUTINGINFOA;
        pub const PFAXGETROUTINGINFO = thismodule.PFAXGETROUTINGINFOA;
        pub const PFAXSETROUTINGINFO = thismodule.PFAXSETROUTINGINFOA;
        pub const PFAXSTARTPRINTJOB = thismodule.PFAXSTARTPRINTJOBA;
        pub const PFAXPRINTCOVERPAGE = thismodule.PFAXPRINTCOVERPAGEA;
        pub const FaxConnectFaxServer = thismodule.FaxConnectFaxServerA;
        pub const FaxCompleteJobParams = thismodule.FaxCompleteJobParamsA;
        pub const FaxSendDocument = thismodule.FaxSendDocumentA;
        pub const FaxSendDocumentForBroadcast = thismodule.FaxSendDocumentForBroadcastA;
        pub const FaxEnumJobs = thismodule.FaxEnumJobsA;
        pub const FaxGetJob = thismodule.FaxGetJobA;
        pub const FaxSetJob = thismodule.FaxSetJobA;
        pub const FaxGetDeviceStatus = thismodule.FaxGetDeviceStatusA;
        pub const FaxGetConfiguration = thismodule.FaxGetConfigurationA;
        pub const FaxSetConfiguration = thismodule.FaxSetConfigurationA;
        pub const FaxGetLoggingCategories = thismodule.FaxGetLoggingCategoriesA;
        pub const FaxSetLoggingCategories = thismodule.FaxSetLoggingCategoriesA;
        pub const FaxEnumPorts = thismodule.FaxEnumPortsA;
        pub const FaxGetPort = thismodule.FaxGetPortA;
        pub const FaxSetPort = thismodule.FaxSetPortA;
        pub const FaxEnumRoutingMethods = thismodule.FaxEnumRoutingMethodsA;
        pub const FaxEnableRoutingMethod = thismodule.FaxEnableRoutingMethodA;
        pub const FaxEnumGlobalRoutingInfo = thismodule.FaxEnumGlobalRoutingInfoA;
        pub const FaxSetGlobalRoutingInfo = thismodule.FaxSetGlobalRoutingInfoA;
        pub const FaxGetRoutingInfo = thismodule.FaxGetRoutingInfoA;
        pub const FaxSetRoutingInfo = thismodule.FaxSetRoutingInfoA;
        pub const FaxStartPrintJob = thismodule.FaxStartPrintJobA;
        pub const FaxPrintCoverPage = thismodule.FaxPrintCoverPageA;
    },
    .wide => struct {
        pub const FAX_LOG_CATEGORY = thismodule.FAX_LOG_CATEGORYW;
        pub const FAX_CONFIGURATION = thismodule.FAX_CONFIGURATIONW;
        pub const FAX_DEVICE_STATUS = thismodule.FAX_DEVICE_STATUSW;
        pub const FAX_JOB_ENTRY = thismodule.FAX_JOB_ENTRYW;
        pub const FAX_PORT_INFO = thismodule.FAX_PORT_INFOW;
        pub const FAX_ROUTING_METHOD = thismodule.FAX_ROUTING_METHODW;
        pub const FAX_GLOBAL_ROUTING_INFO = thismodule.FAX_GLOBAL_ROUTING_INFOW;
        pub const FAX_COVERPAGE_INFO = thismodule.FAX_COVERPAGE_INFOW;
        pub const FAX_JOB_PARAM = thismodule.FAX_JOB_PARAMW;
        pub const FAX_EVENT = thismodule.FAX_EVENTW;
        pub const FAX_PRINT_INFO = thismodule.FAX_PRINT_INFOW;
        pub const FAX_CONTEXT_INFO = thismodule.FAX_CONTEXT_INFOW;
        pub const PFAXCONNECTFAXSERVER = thismodule.PFAXCONNECTFAXSERVERW;
        pub const PFAXCOMPLETEJOBPARAMS = thismodule.PFAXCOMPLETEJOBPARAMSW;
        pub const PFAXSENDDOCUMENT = thismodule.PFAXSENDDOCUMENTW;
        pub const PFAX_RECIPIENT_CALLBACK = thismodule.PFAX_RECIPIENT_CALLBACKW;
        pub const PFAXSENDDOCUMENTFORBROADCAST = thismodule.PFAXSENDDOCUMENTFORBROADCASTW;
        pub const PFAXENUMJOBS = thismodule.PFAXENUMJOBSW;
        pub const PFAXGETJOB = thismodule.PFAXGETJOBW;
        pub const PFAXSETJOB = thismodule.PFAXSETJOBW;
        pub const PFAXGETDEVICESTATUS = thismodule.PFAXGETDEVICESTATUSW;
        pub const PFAXGETCONFIGURATION = thismodule.PFAXGETCONFIGURATIONW;
        pub const PFAXSETCONFIGURATION = thismodule.PFAXSETCONFIGURATIONW;
        pub const PFAXGETLOGGINGCATEGORIES = thismodule.PFAXGETLOGGINGCATEGORIESW;
        pub const PFAXSETLOGGINGCATEGORIES = thismodule.PFAXSETLOGGINGCATEGORIESW;
        pub const PFAXENUMPORTS = thismodule.PFAXENUMPORTSW;
        pub const PFAXGETPORT = thismodule.PFAXGETPORTW;
        pub const PFAXSETPORT = thismodule.PFAXSETPORTW;
        pub const PFAXENUMROUTINGMETHODS = thismodule.PFAXENUMROUTINGMETHODSW;
        pub const PFAXENABLEROUTINGMETHOD = thismodule.PFAXENABLEROUTINGMETHODW;
        pub const PFAXENUMGLOBALROUTINGINFO = thismodule.PFAXENUMGLOBALROUTINGINFOW;
        pub const PFAXSETGLOBALROUTINGINFO = thismodule.PFAXSETGLOBALROUTINGINFOW;
        pub const PFAXGETROUTINGINFO = thismodule.PFAXGETROUTINGINFOW;
        pub const PFAXSETROUTINGINFO = thismodule.PFAXSETROUTINGINFOW;
        pub const PFAXSTARTPRINTJOB = thismodule.PFAXSTARTPRINTJOBW;
        pub const PFAXPRINTCOVERPAGE = thismodule.PFAXPRINTCOVERPAGEW;
        pub const FaxConnectFaxServer = thismodule.FaxConnectFaxServerW;
        pub const FaxCompleteJobParams = thismodule.FaxCompleteJobParamsW;
        pub const FaxSendDocument = thismodule.FaxSendDocumentW;
        pub const FaxSendDocumentForBroadcast = thismodule.FaxSendDocumentForBroadcastW;
        pub const FaxEnumJobs = thismodule.FaxEnumJobsW;
        pub const FaxGetJob = thismodule.FaxGetJobW;
        pub const FaxSetJob = thismodule.FaxSetJobW;
        pub const FaxGetDeviceStatus = thismodule.FaxGetDeviceStatusW;
        pub const FaxGetConfiguration = thismodule.FaxGetConfigurationW;
        pub const FaxSetConfiguration = thismodule.FaxSetConfigurationW;
        pub const FaxGetLoggingCategories = thismodule.FaxGetLoggingCategoriesW;
        pub const FaxSetLoggingCategories = thismodule.FaxSetLoggingCategoriesW;
        pub const FaxEnumPorts = thismodule.FaxEnumPortsW;
        pub const FaxGetPort = thismodule.FaxGetPortW;
        pub const FaxSetPort = thismodule.FaxSetPortW;
        pub const FaxEnumRoutingMethods = thismodule.FaxEnumRoutingMethodsW;
        pub const FaxEnableRoutingMethod = thismodule.FaxEnableRoutingMethodW;
        pub const FaxEnumGlobalRoutingInfo = thismodule.FaxEnumGlobalRoutingInfoW;
        pub const FaxSetGlobalRoutingInfo = thismodule.FaxSetGlobalRoutingInfoW;
        pub const FaxGetRoutingInfo = thismodule.FaxGetRoutingInfoW;
        pub const FaxSetRoutingInfo = thismodule.FaxSetRoutingInfoW;
        pub const FaxStartPrintJob = thismodule.FaxStartPrintJobW;
        pub const FaxPrintCoverPage = thismodule.FaxPrintCoverPageW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const FAX_LOG_CATEGORY = *opaque {};
        pub const FAX_CONFIGURATION = *opaque {};
        pub const FAX_DEVICE_STATUS = *opaque {};
        pub const FAX_JOB_ENTRY = *opaque {};
        pub const FAX_PORT_INFO = *opaque {};
        pub const FAX_ROUTING_METHOD = *opaque {};
        pub const FAX_GLOBAL_ROUTING_INFO = *opaque {};
        pub const FAX_COVERPAGE_INFO = *opaque {};
        pub const FAX_JOB_PARAM = *opaque {};
        pub const FAX_EVENT = *opaque {};
        pub const FAX_PRINT_INFO = *opaque {};
        pub const FAX_CONTEXT_INFO = *opaque {};
        pub const PFAXCONNECTFAXSERVER = *opaque {};
        pub const PFAXCOMPLETEJOBPARAMS = *opaque {};
        pub const PFAXSENDDOCUMENT = *opaque {};
        pub const PFAX_RECIPIENT_CALLBACK = *opaque {};
        pub const PFAXSENDDOCUMENTFORBROADCAST = *opaque {};
        pub const PFAXENUMJOBS = *opaque {};
        pub const PFAXGETJOB = *opaque {};
        pub const PFAXSETJOB = *opaque {};
        pub const PFAXGETDEVICESTATUS = *opaque {};
        pub const PFAXGETCONFIGURATION = *opaque {};
        pub const PFAXSETCONFIGURATION = *opaque {};
        pub const PFAXGETLOGGINGCATEGORIES = *opaque {};
        pub const PFAXSETLOGGINGCATEGORIES = *opaque {};
        pub const PFAXENUMPORTS = *opaque {};
        pub const PFAXGETPORT = *opaque {};
        pub const PFAXSETPORT = *opaque {};
        pub const PFAXENUMROUTINGMETHODS = *opaque {};
        pub const PFAXENABLEROUTINGMETHOD = *opaque {};
        pub const PFAXENUMGLOBALROUTINGINFO = *opaque {};
        pub const PFAXSETGLOBALROUTINGINFO = *opaque {};
        pub const PFAXGETROUTINGINFO = *opaque {};
        pub const PFAXSETROUTINGINFO = *opaque {};
        pub const PFAXSTARTPRINTJOB = *opaque {};
        pub const PFAXPRINTCOVERPAGE = *opaque {};
        pub const FaxConnectFaxServer = *opaque {};
        pub const FaxCompleteJobParams = *opaque {};
        pub const FaxSendDocument = *opaque {};
        pub const FaxSendDocumentForBroadcast = *opaque {};
        pub const FaxEnumJobs = *opaque {};
        pub const FaxGetJob = *opaque {};
        pub const FaxSetJob = *opaque {};
        pub const FaxGetDeviceStatus = *opaque {};
        pub const FaxGetConfiguration = *opaque {};
        pub const FaxSetConfiguration = *opaque {};
        pub const FaxGetLoggingCategories = *opaque {};
        pub const FaxSetLoggingCategories = *opaque {};
        pub const FaxEnumPorts = *opaque {};
        pub const FaxGetPort = *opaque {};
        pub const FaxSetPort = *opaque {};
        pub const FaxEnumRoutingMethods = *opaque {};
        pub const FaxEnableRoutingMethod = *opaque {};
        pub const FaxEnumGlobalRoutingInfo = *opaque {};
        pub const FaxSetGlobalRoutingInfo = *opaque {};
        pub const FaxGetRoutingInfo = *opaque {};
        pub const FaxSetRoutingInfo = *opaque {};
        pub const FaxStartPrintJob = *opaque {};
        pub const FaxPrintCoverPage = *opaque {};
    } else struct {
        pub const FAX_LOG_CATEGORY = @compileError("'FAX_LOG_CATEGORY' requires that UNICODE be set to true or false in the root module");
        pub const FAX_CONFIGURATION = @compileError("'FAX_CONFIGURATION' requires that UNICODE be set to true or false in the root module");
        pub const FAX_DEVICE_STATUS = @compileError("'FAX_DEVICE_STATUS' requires that UNICODE be set to true or false in the root module");
        pub const FAX_JOB_ENTRY = @compileError("'FAX_JOB_ENTRY' requires that UNICODE be set to true or false in the root module");
        pub const FAX_PORT_INFO = @compileError("'FAX_PORT_INFO' requires that UNICODE be set to true or false in the root module");
        pub const FAX_ROUTING_METHOD = @compileError("'FAX_ROUTING_METHOD' requires that UNICODE be set to true or false in the root module");
        pub const FAX_GLOBAL_ROUTING_INFO = @compileError("'FAX_GLOBAL_ROUTING_INFO' requires that UNICODE be set to true or false in the root module");
        pub const FAX_COVERPAGE_INFO = @compileError("'FAX_COVERPAGE_INFO' requires that UNICODE be set to true or false in the root module");
        pub const FAX_JOB_PARAM = @compileError("'FAX_JOB_PARAM' requires that UNICODE be set to true or false in the root module");
        pub const FAX_EVENT = @compileError("'FAX_EVENT' requires that UNICODE be set to true or false in the root module");
        pub const FAX_PRINT_INFO = @compileError("'FAX_PRINT_INFO' requires that UNICODE be set to true or false in the root module");
        pub const FAX_CONTEXT_INFO = @compileError("'FAX_CONTEXT_INFO' requires that UNICODE be set to true or false in the root module");
        pub const PFAXCONNECTFAXSERVER = @compileError("'PFAXCONNECTFAXSERVER' requires that UNICODE be set to true or false in the root module");
        pub const PFAXCOMPLETEJOBPARAMS = @compileError("'PFAXCOMPLETEJOBPARAMS' requires that UNICODE be set to true or false in the root module");
        pub const PFAXSENDDOCUMENT = @compileError("'PFAXSENDDOCUMENT' requires that UNICODE be set to true or false in the root module");
        pub const PFAX_RECIPIENT_CALLBACK = @compileError("'PFAX_RECIPIENT_CALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const PFAXSENDDOCUMENTFORBROADCAST = @compileError("'PFAXSENDDOCUMENTFORBROADCAST' requires that UNICODE be set to true or false in the root module");
        pub const PFAXENUMJOBS = @compileError("'PFAXENUMJOBS' requires that UNICODE be set to true or false in the root module");
        pub const PFAXGETJOB = @compileError("'PFAXGETJOB' requires that UNICODE be set to true or false in the root module");
        pub const PFAXSETJOB = @compileError("'PFAXSETJOB' requires that UNICODE be set to true or false in the root module");
        pub const PFAXGETDEVICESTATUS = @compileError("'PFAXGETDEVICESTATUS' requires that UNICODE be set to true or false in the root module");
        pub const PFAXGETCONFIGURATION = @compileError("'PFAXGETCONFIGURATION' requires that UNICODE be set to true or false in the root module");
        pub const PFAXSETCONFIGURATION = @compileError("'PFAXSETCONFIGURATION' requires that UNICODE be set to true or false in the root module");
        pub const PFAXGETLOGGINGCATEGORIES = @compileError("'PFAXGETLOGGINGCATEGORIES' requires that UNICODE be set to true or false in the root module");
        pub const PFAXSETLOGGINGCATEGORIES = @compileError("'PFAXSETLOGGINGCATEGORIES' requires that UNICODE be set to true or false in the root module");
        pub const PFAXENUMPORTS = @compileError("'PFAXENUMPORTS' requires that UNICODE be set to true or false in the root module");
        pub const PFAXGETPORT = @compileError("'PFAXGETPORT' requires that UNICODE be set to true or false in the root module");
        pub const PFAXSETPORT = @compileError("'PFAXSETPORT' requires that UNICODE be set to true or false in the root module");
        pub const PFAXENUMROUTINGMETHODS = @compileError("'PFAXENUMROUTINGMETHODS' requires that UNICODE be set to true or false in the root module");
        pub const PFAXENABLEROUTINGMETHOD = @compileError("'PFAXENABLEROUTINGMETHOD' requires that UNICODE be set to true or false in the root module");
        pub const PFAXENUMGLOBALROUTINGINFO = @compileError("'PFAXENUMGLOBALROUTINGINFO' requires that UNICODE be set to true or false in the root module");
        pub const PFAXSETGLOBALROUTINGINFO = @compileError("'PFAXSETGLOBALROUTINGINFO' requires that UNICODE be set to true or false in the root module");
        pub const PFAXGETROUTINGINFO = @compileError("'PFAXGETROUTINGINFO' requires that UNICODE be set to true or false in the root module");
        pub const PFAXSETROUTINGINFO = @compileError("'PFAXSETROUTINGINFO' requires that UNICODE be set to true or false in the root module");
        pub const PFAXSTARTPRINTJOB = @compileError("'PFAXSTARTPRINTJOB' requires that UNICODE be set to true or false in the root module");
        pub const PFAXPRINTCOVERPAGE = @compileError("'PFAXPRINTCOVERPAGE' requires that UNICODE be set to true or false in the root module");
        pub const FaxConnectFaxServer = @compileError("'FaxConnectFaxServer' requires that UNICODE be set to true or false in the root module");
        pub const FaxCompleteJobParams = @compileError("'FaxCompleteJobParams' requires that UNICODE be set to true or false in the root module");
        pub const FaxSendDocument = @compileError("'FaxSendDocument' requires that UNICODE be set to true or false in the root module");
        pub const FaxSendDocumentForBroadcast = @compileError("'FaxSendDocumentForBroadcast' requires that UNICODE be set to true or false in the root module");
        pub const FaxEnumJobs = @compileError("'FaxEnumJobs' requires that UNICODE be set to true or false in the root module");
        pub const FaxGetJob = @compileError("'FaxGetJob' requires that UNICODE be set to true or false in the root module");
        pub const FaxSetJob = @compileError("'FaxSetJob' requires that UNICODE be set to true or false in the root module");
        pub const FaxGetDeviceStatus = @compileError("'FaxGetDeviceStatus' requires that UNICODE be set to true or false in the root module");
        pub const FaxGetConfiguration = @compileError("'FaxGetConfiguration' requires that UNICODE be set to true or false in the root module");
        pub const FaxSetConfiguration = @compileError("'FaxSetConfiguration' requires that UNICODE be set to true or false in the root module");
        pub const FaxGetLoggingCategories = @compileError("'FaxGetLoggingCategories' requires that UNICODE be set to true or false in the root module");
        pub const FaxSetLoggingCategories = @compileError("'FaxSetLoggingCategories' requires that UNICODE be set to true or false in the root module");
        pub const FaxEnumPorts = @compileError("'FaxEnumPorts' requires that UNICODE be set to true or false in the root module");
        pub const FaxGetPort = @compileError("'FaxGetPort' requires that UNICODE be set to true or false in the root module");
        pub const FaxSetPort = @compileError("'FaxSetPort' requires that UNICODE be set to true or false in the root module");
        pub const FaxEnumRoutingMethods = @compileError("'FaxEnumRoutingMethods' requires that UNICODE be set to true or false in the root module");
        pub const FaxEnableRoutingMethod = @compileError("'FaxEnableRoutingMethod' requires that UNICODE be set to true or false in the root module");
        pub const FaxEnumGlobalRoutingInfo = @compileError("'FaxEnumGlobalRoutingInfo' requires that UNICODE be set to true or false in the root module");
        pub const FaxSetGlobalRoutingInfo = @compileError("'FaxSetGlobalRoutingInfo' requires that UNICODE be set to true or false in the root module");
        pub const FaxGetRoutingInfo = @compileError("'FaxGetRoutingInfo' requires that UNICODE be set to true or false in the root module");
        pub const FaxSetRoutingInfo = @compileError("'FaxSetRoutingInfo' requires that UNICODE be set to true or false in the root module");
        pub const FaxStartPrintJob = @compileError("'FaxStartPrintJob' requires that UNICODE be set to true or false in the root module");
        pub const FaxPrintCoverPage = @compileError("'FaxPrintCoverPage' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (20)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const CHAR = @import("../foundation.zig").CHAR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const HDC = @import("../graphics/gdi.zig").HDC;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HKEY = @import("../system/registry.zig").HKEY;
const HPROPSHEETPAGE = @import("../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const OVERLAPPED = @import("../system/io.zig").OVERLAPPED;
const PROPERTYKEY = @import("../ui/shell/properties_system.zig").PROPERTYKEY;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFAXCONNECTFAXSERVERA")) {
        _ = PFAXCONNECTFAXSERVERA;
    }
    if (@hasDecl(@This(), "PFAXCONNECTFAXSERVERW")) {
        _ = PFAXCONNECTFAXSERVERW;
    }
    if (@hasDecl(@This(), "PFAXCLOSE")) {
        _ = PFAXCLOSE;
    }
    if (@hasDecl(@This(), "PFAXOPENPORT")) {
        _ = PFAXOPENPORT;
    }
    if (@hasDecl(@This(), "PFAXCOMPLETEJOBPARAMSA")) {
        _ = PFAXCOMPLETEJOBPARAMSA;
    }
    if (@hasDecl(@This(), "PFAXCOMPLETEJOBPARAMSW")) {
        _ = PFAXCOMPLETEJOBPARAMSW;
    }
    if (@hasDecl(@This(), "PFAXSENDDOCUMENTA")) {
        _ = PFAXSENDDOCUMENTA;
    }
    if (@hasDecl(@This(), "PFAXSENDDOCUMENTW")) {
        _ = PFAXSENDDOCUMENTW;
    }
    if (@hasDecl(@This(), "PFAX_RECIPIENT_CALLBACKA")) {
        _ = PFAX_RECIPIENT_CALLBACKA;
    }
    if (@hasDecl(@This(), "PFAX_RECIPIENT_CALLBACKW")) {
        _ = PFAX_RECIPIENT_CALLBACKW;
    }
    if (@hasDecl(@This(), "PFAXSENDDOCUMENTFORBROADCASTA")) {
        _ = PFAXSENDDOCUMENTFORBROADCASTA;
    }
    if (@hasDecl(@This(), "PFAXSENDDOCUMENTFORBROADCASTW")) {
        _ = PFAXSENDDOCUMENTFORBROADCASTW;
    }
    if (@hasDecl(@This(), "PFAXENUMJOBSA")) {
        _ = PFAXENUMJOBSA;
    }
    if (@hasDecl(@This(), "PFAXENUMJOBSW")) {
        _ = PFAXENUMJOBSW;
    }
    if (@hasDecl(@This(), "PFAXGETJOBA")) {
        _ = PFAXGETJOBA;
    }
    if (@hasDecl(@This(), "PFAXGETJOBW")) {
        _ = PFAXGETJOBW;
    }
    if (@hasDecl(@This(), "PFAXSETJOBA")) {
        _ = PFAXSETJOBA;
    }
    if (@hasDecl(@This(), "PFAXSETJOBW")) {
        _ = PFAXSETJOBW;
    }
    if (@hasDecl(@This(), "PFAXGETPAGEDATA")) {
        _ = PFAXGETPAGEDATA;
    }
    if (@hasDecl(@This(), "PFAXGETDEVICESTATUSA")) {
        _ = PFAXGETDEVICESTATUSA;
    }
    if (@hasDecl(@This(), "PFAXGETDEVICESTATUSW")) {
        _ = PFAXGETDEVICESTATUSW;
    }
    if (@hasDecl(@This(), "PFAXABORT")) {
        _ = PFAXABORT;
    }
    if (@hasDecl(@This(), "PFAXGETCONFIGURATIONA")) {
        _ = PFAXGETCONFIGURATIONA;
    }
    if (@hasDecl(@This(), "PFAXGETCONFIGURATIONW")) {
        _ = PFAXGETCONFIGURATIONW;
    }
    if (@hasDecl(@This(), "PFAXSETCONFIGURATIONA")) {
        _ = PFAXSETCONFIGURATIONA;
    }
    if (@hasDecl(@This(), "PFAXSETCONFIGURATIONW")) {
        _ = PFAXSETCONFIGURATIONW;
    }
    if (@hasDecl(@This(), "PFAXGETLOGGINGCATEGORIESA")) {
        _ = PFAXGETLOGGINGCATEGORIESA;
    }
    if (@hasDecl(@This(), "PFAXGETLOGGINGCATEGORIESW")) {
        _ = PFAXGETLOGGINGCATEGORIESW;
    }
    if (@hasDecl(@This(), "PFAXSETLOGGINGCATEGORIESA")) {
        _ = PFAXSETLOGGINGCATEGORIESA;
    }
    if (@hasDecl(@This(), "PFAXSETLOGGINGCATEGORIESW")) {
        _ = PFAXSETLOGGINGCATEGORIESW;
    }
    if (@hasDecl(@This(), "PFAXENUMPORTSA")) {
        _ = PFAXENUMPORTSA;
    }
    if (@hasDecl(@This(), "PFAXENUMPORTSW")) {
        _ = PFAXENUMPORTSW;
    }
    if (@hasDecl(@This(), "PFAXGETPORTA")) {
        _ = PFAXGETPORTA;
    }
    if (@hasDecl(@This(), "PFAXGETPORTW")) {
        _ = PFAXGETPORTW;
    }
    if (@hasDecl(@This(), "PFAXSETPORTA")) {
        _ = PFAXSETPORTA;
    }
    if (@hasDecl(@This(), "PFAXSETPORTW")) {
        _ = PFAXSETPORTW;
    }
    if (@hasDecl(@This(), "PFAXENUMROUTINGMETHODSA")) {
        _ = PFAXENUMROUTINGMETHODSA;
    }
    if (@hasDecl(@This(), "PFAXENUMROUTINGMETHODSW")) {
        _ = PFAXENUMROUTINGMETHODSW;
    }
    if (@hasDecl(@This(), "PFAXENABLEROUTINGMETHODA")) {
        _ = PFAXENABLEROUTINGMETHODA;
    }
    if (@hasDecl(@This(), "PFAXENABLEROUTINGMETHODW")) {
        _ = PFAXENABLEROUTINGMETHODW;
    }
    if (@hasDecl(@This(), "PFAXENUMGLOBALROUTINGINFOA")) {
        _ = PFAXENUMGLOBALROUTINGINFOA;
    }
    if (@hasDecl(@This(), "PFAXENUMGLOBALROUTINGINFOW")) {
        _ = PFAXENUMGLOBALROUTINGINFOW;
    }
    if (@hasDecl(@This(), "PFAXSETGLOBALROUTINGINFOA")) {
        _ = PFAXSETGLOBALROUTINGINFOA;
    }
    if (@hasDecl(@This(), "PFAXSETGLOBALROUTINGINFOW")) {
        _ = PFAXSETGLOBALROUTINGINFOW;
    }
    if (@hasDecl(@This(), "PFAXGETROUTINGINFOA")) {
        _ = PFAXGETROUTINGINFOA;
    }
    if (@hasDecl(@This(), "PFAXGETROUTINGINFOW")) {
        _ = PFAXGETROUTINGINFOW;
    }
    if (@hasDecl(@This(), "PFAXSETROUTINGINFOA")) {
        _ = PFAXSETROUTINGINFOA;
    }
    if (@hasDecl(@This(), "PFAXSETROUTINGINFOW")) {
        _ = PFAXSETROUTINGINFOW;
    }
    if (@hasDecl(@This(), "PFAXINITIALIZEEVENTQUEUE")) {
        _ = PFAXINITIALIZEEVENTQUEUE;
    }
    if (@hasDecl(@This(), "PFAXFREEBUFFER")) {
        _ = PFAXFREEBUFFER;
    }
    if (@hasDecl(@This(), "PFAXSTARTPRINTJOBA")) {
        _ = PFAXSTARTPRINTJOBA;
    }
    if (@hasDecl(@This(), "PFAXSTARTPRINTJOBW")) {
        _ = PFAXSTARTPRINTJOBW;
    }
    if (@hasDecl(@This(), "PFAXPRINTCOVERPAGEA")) {
        _ = PFAXPRINTCOVERPAGEA;
    }
    if (@hasDecl(@This(), "PFAXPRINTCOVERPAGEW")) {
        _ = PFAXPRINTCOVERPAGEW;
    }
    if (@hasDecl(@This(), "PFAXREGISTERSERVICEPROVIDERW")) {
        _ = PFAXREGISTERSERVICEPROVIDERW;
    }
    if (@hasDecl(@This(), "PFAXUNREGISTERSERVICEPROVIDERW")) {
        _ = PFAXUNREGISTERSERVICEPROVIDERW;
    }
    if (@hasDecl(@This(), "PFAX_ROUTING_INSTALLATION_CALLBACKW")) {
        _ = PFAX_ROUTING_INSTALLATION_CALLBACKW;
    }
    if (@hasDecl(@This(), "PFAXREGISTERROUTINGEXTENSIONW")) {
        _ = PFAXREGISTERROUTINGEXTENSIONW;
    }
    if (@hasDecl(@This(), "PFAXACCESSCHECK")) {
        _ = PFAXACCESSCHECK;
    }
    if (@hasDecl(@This(), "PFAX_SERVICE_CALLBACK")) {
        _ = PFAX_SERVICE_CALLBACK;
    }
    if (@hasDecl(@This(), "PFAX_LINECALLBACK")) {
        _ = PFAX_LINECALLBACK;
    }
    if (@hasDecl(@This(), "PFAX_SEND_CALLBACK")) {
        _ = PFAX_SEND_CALLBACK;
    }
    if (@hasDecl(@This(), "PFAXDEVINITIALIZE")) {
        _ = PFAXDEVINITIALIZE;
    }
    if (@hasDecl(@This(), "PFAXDEVVIRTUALDEVICECREATION")) {
        _ = PFAXDEVVIRTUALDEVICECREATION;
    }
    if (@hasDecl(@This(), "PFAXDEVSTARTJOB")) {
        _ = PFAXDEVSTARTJOB;
    }
    if (@hasDecl(@This(), "PFAXDEVENDJOB")) {
        _ = PFAXDEVENDJOB;
    }
    if (@hasDecl(@This(), "PFAXDEVSEND")) {
        _ = PFAXDEVSEND;
    }
    if (@hasDecl(@This(), "PFAXDEVRECEIVE")) {
        _ = PFAXDEVRECEIVE;
    }
    if (@hasDecl(@This(), "PFAXDEVREPORTSTATUS")) {
        _ = PFAXDEVREPORTSTATUS;
    }
    if (@hasDecl(@This(), "PFAXDEVABORTOPERATION")) {
        _ = PFAXDEVABORTOPERATION;
    }
    if (@hasDecl(@This(), "PFAXDEVCONFIGURE")) {
        _ = PFAXDEVCONFIGURE;
    }
    if (@hasDecl(@This(), "PFAXDEVSHUTDOWN")) {
        _ = PFAXDEVSHUTDOWN;
    }
    if (@hasDecl(@This(), "PFAXROUTEADDFILE")) {
        _ = PFAXROUTEADDFILE;
    }
    if (@hasDecl(@This(), "PFAXROUTEDELETEFILE")) {
        _ = PFAXROUTEDELETEFILE;
    }
    if (@hasDecl(@This(), "PFAXROUTEGETFILE")) {
        _ = PFAXROUTEGETFILE;
    }
    if (@hasDecl(@This(), "PFAXROUTEENUMFILE")) {
        _ = PFAXROUTEENUMFILE;
    }
    if (@hasDecl(@This(), "PFAXROUTEENUMFILES")) {
        _ = PFAXROUTEENUMFILES;
    }
    if (@hasDecl(@This(), "PFAXROUTEMODIFYROUTINGDATA")) {
        _ = PFAXROUTEMODIFYROUTINGDATA;
    }
    if (@hasDecl(@This(), "PFAXROUTEINITIALIZE")) {
        _ = PFAXROUTEINITIALIZE;
    }
    if (@hasDecl(@This(), "PFAXROUTEMETHOD")) {
        _ = PFAXROUTEMETHOD;
    }
    if (@hasDecl(@This(), "PFAXROUTEDEVICEENABLE")) {
        _ = PFAXROUTEDEVICEENABLE;
    }
    if (@hasDecl(@This(), "PFAXROUTEDEVICECHANGENOTIFICATION")) {
        _ = PFAXROUTEDEVICECHANGENOTIFICATION;
    }
    if (@hasDecl(@This(), "PFAXROUTEGETROUTINGINFO")) {
        _ = PFAXROUTEGETROUTINGINFO;
    }
    if (@hasDecl(@This(), "PFAXROUTESETROUTINGINFO")) {
        _ = PFAXROUTESETROUTINGINFO;
    }
    if (@hasDecl(@This(), "PFAX_EXT_GET_DATA")) {
        _ = PFAX_EXT_GET_DATA;
    }
    if (@hasDecl(@This(), "PFAX_EXT_SET_DATA")) {
        _ = PFAX_EXT_SET_DATA;
    }
    if (@hasDecl(@This(), "PFAX_EXT_CONFIG_CHANGE")) {
        _ = PFAX_EXT_CONFIG_CHANGE;
    }
    if (@hasDecl(@This(), "PFAX_EXT_REGISTER_FOR_EVENTS")) {
        _ = PFAX_EXT_REGISTER_FOR_EVENTS;
    }
    if (@hasDecl(@This(), "PFAX_EXT_UNREGISTER_FOR_EVENTS")) {
        _ = PFAX_EXT_UNREGISTER_FOR_EVENTS;
    }
    if (@hasDecl(@This(), "PFAX_EXT_FREE_BUFFER")) {
        _ = PFAX_EXT_FREE_BUFFER;
    }
    if (@hasDecl(@This(), "PFAX_EXT_INITIALIZE_CONFIG")) {
        _ = PFAX_EXT_INITIALIZE_CONFIG;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
