//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1128)
//--------------------------------------------------------------------------------
pub const TAPI_CURRENT_VERSION = @as(u32, 131074);
pub const LINE_ADDRESSSTATE = @as(i32, 0);
pub const LINE_CALLINFO = @as(i32, 1);
pub const LINE_CALLSTATE = @as(i32, 2);
pub const LINE_CLOSE = @as(i32, 3);
pub const LINE_DEVSPECIFIC = @as(i32, 4);
pub const LINE_DEVSPECIFICFEATURE = @as(i32, 5);
pub const LINE_GATHERDIGITS = @as(i32, 6);
pub const LINE_GENERATE = @as(i32, 7);
pub const LINE_LINEDEVSTATE = @as(i32, 8);
pub const LINE_MONITORDIGITS = @as(i32, 9);
pub const LINE_MONITORMEDIA = @as(i32, 10);
pub const LINE_MONITORTONE = @as(i32, 11);
pub const LINE_REPLY = @as(i32, 12);
pub const LINE_REQUEST = @as(i32, 13);
pub const PHONE_BUTTON = @as(i32, 14);
pub const PHONE_CLOSE = @as(i32, 15);
pub const PHONE_DEVSPECIFIC = @as(i32, 16);
pub const PHONE_REPLY = @as(i32, 17);
pub const PHONE_STATE = @as(i32, 18);
pub const LINE_CREATE = @as(i32, 19);
pub const PHONE_CREATE = @as(i32, 20);
pub const LINE_AGENTSPECIFIC = @as(i32, 21);
pub const LINE_AGENTSTATUS = @as(i32, 22);
pub const LINE_APPNEWCALL = @as(i32, 23);
pub const LINE_PROXYREQUEST = @as(i32, 24);
pub const LINE_REMOVE = @as(i32, 25);
pub const PHONE_REMOVE = @as(i32, 26);
pub const LINE_AGENTSESSIONSTATUS = @as(i32, 27);
pub const LINE_QUEUESTATUS = @as(i32, 28);
pub const LINE_AGENTSTATUSEX = @as(i32, 29);
pub const LINE_GROUPSTATUS = @as(i32, 30);
pub const LINE_PROXYSTATUS = @as(i32, 31);
pub const LINE_APPNEWCALLHUB = @as(i32, 32);
pub const LINE_CALLHUBCLOSE = @as(i32, 33);
pub const LINE_DEVSPECIFICEX = @as(i32, 34);
pub const INITIALIZE_NEGOTIATION = @as(u32, 4294967295);
pub const LINEADDRCAPFLAGS_FWDNUMRINGS = @as(u32, 1);
pub const LINEADDRCAPFLAGS_PICKUPGROUPID = @as(u32, 2);
pub const LINEADDRCAPFLAGS_SECURE = @as(u32, 4);
pub const LINEADDRCAPFLAGS_BLOCKIDDEFAULT = @as(u32, 8);
pub const LINEADDRCAPFLAGS_BLOCKIDOVERRIDE = @as(u32, 16);
pub const LINEADDRCAPFLAGS_DIALED = @as(u32, 32);
pub const LINEADDRCAPFLAGS_ORIGOFFHOOK = @as(u32, 64);
pub const LINEADDRCAPFLAGS_DESTOFFHOOK = @as(u32, 128);
pub const LINEADDRCAPFLAGS_FWDCONSULT = @as(u32, 256);
pub const LINEADDRCAPFLAGS_SETUPCONFNULL = @as(u32, 512);
pub const LINEADDRCAPFLAGS_AUTORECONNECT = @as(u32, 1024);
pub const LINEADDRCAPFLAGS_COMPLETIONID = @as(u32, 2048);
pub const LINEADDRCAPFLAGS_TRANSFERHELD = @as(u32, 4096);
pub const LINEADDRCAPFLAGS_TRANSFERMAKE = @as(u32, 8192);
pub const LINEADDRCAPFLAGS_CONFERENCEHELD = @as(u32, 16384);
pub const LINEADDRCAPFLAGS_CONFERENCEMAKE = @as(u32, 32768);
pub const LINEADDRCAPFLAGS_PARTIALDIAL = @as(u32, 65536);
pub const LINEADDRCAPFLAGS_FWDSTATUSVALID = @as(u32, 131072);
pub const LINEADDRCAPFLAGS_FWDINTEXTADDR = @as(u32, 262144);
pub const LINEADDRCAPFLAGS_FWDBUSYNAADDR = @as(u32, 524288);
pub const LINEADDRCAPFLAGS_ACCEPTTOALERT = @as(u32, 1048576);
pub const LINEADDRCAPFLAGS_CONFDROP = @as(u32, 2097152);
pub const LINEADDRCAPFLAGS_PICKUPCALLWAIT = @as(u32, 4194304);
pub const LINEADDRCAPFLAGS_PREDICTIVEDIALER = @as(u32, 8388608);
pub const LINEADDRCAPFLAGS_QUEUE = @as(u32, 16777216);
pub const LINEADDRCAPFLAGS_ROUTEPOINT = @as(u32, 33554432);
pub const LINEADDRCAPFLAGS_HOLDMAKESNEW = @as(u32, 67108864);
pub const LINEADDRCAPFLAGS_NOINTERNALCALLS = @as(u32, 134217728);
pub const LINEADDRCAPFLAGS_NOEXTERNALCALLS = @as(u32, 268435456);
pub const LINEADDRCAPFLAGS_SETCALLINGID = @as(u32, 536870912);
pub const LINEADDRCAPFLAGS_ACDGROUP = @as(u32, 1073741824);
pub const LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION = @as(u32, 2147483648);
pub const LINEADDRESSMODE_ADDRESSID = @as(u32, 1);
pub const LINEADDRESSMODE_DIALABLEADDR = @as(u32, 2);
pub const LINEADDRESSSHARING_PRIVATE = @as(u32, 1);
pub const LINEADDRESSSHARING_BRIDGEDEXCL = @as(u32, 2);
pub const LINEADDRESSSHARING_BRIDGEDNEW = @as(u32, 4);
pub const LINEADDRESSSHARING_BRIDGEDSHARED = @as(u32, 8);
pub const LINEADDRESSSHARING_MONITORED = @as(u32, 16);
pub const LINEADDRESSSTATE_OTHER = @as(u32, 1);
pub const LINEADDRESSSTATE_DEVSPECIFIC = @as(u32, 2);
pub const LINEADDRESSSTATE_INUSEZERO = @as(u32, 4);
pub const LINEADDRESSSTATE_INUSEONE = @as(u32, 8);
pub const LINEADDRESSSTATE_INUSEMANY = @as(u32, 16);
pub const LINEADDRESSSTATE_NUMCALLS = @as(u32, 32);
pub const LINEADDRESSSTATE_FORWARD = @as(u32, 64);
pub const LINEADDRESSSTATE_TERMINALS = @as(u32, 128);
pub const LINEADDRESSSTATE_CAPSCHANGE = @as(u32, 256);
pub const LINEADDRESSTYPE_PHONENUMBER = @as(u32, 1);
pub const LINEADDRESSTYPE_SDP = @as(u32, 2);
pub const LINEADDRESSTYPE_EMAILNAME = @as(u32, 4);
pub const LINEADDRESSTYPE_DOMAINNAME = @as(u32, 8);
pub const LINEADDRESSTYPE_IPADDRESS = @as(u32, 16);
pub const LINEADDRFEATURE_FORWARD = @as(u32, 1);
pub const LINEADDRFEATURE_MAKECALL = @as(u32, 2);
pub const LINEADDRFEATURE_PICKUP = @as(u32, 4);
pub const LINEADDRFEATURE_SETMEDIACONTROL = @as(u32, 8);
pub const LINEADDRFEATURE_SETTERMINAL = @as(u32, 16);
pub const LINEADDRFEATURE_SETUPCONF = @as(u32, 32);
pub const LINEADDRFEATURE_UNCOMPLETECALL = @as(u32, 64);
pub const LINEADDRFEATURE_UNPARK = @as(u32, 128);
pub const LINEADDRFEATURE_PICKUPHELD = @as(u32, 256);
pub const LINEADDRFEATURE_PICKUPGROUP = @as(u32, 512);
pub const LINEADDRFEATURE_PICKUPDIRECT = @as(u32, 1024);
pub const LINEADDRFEATURE_PICKUPWAITING = @as(u32, 2048);
pub const LINEADDRFEATURE_FORWARDFWD = @as(u32, 4096);
pub const LINEADDRFEATURE_FORWARDDND = @as(u32, 8192);
pub const LINEAGENTFEATURE_SETAGENTGROUP = @as(u32, 1);
pub const LINEAGENTFEATURE_SETAGENTSTATE = @as(u32, 2);
pub const LINEAGENTFEATURE_SETAGENTACTIVITY = @as(u32, 4);
pub const LINEAGENTFEATURE_AGENTSPECIFIC = @as(u32, 8);
pub const LINEAGENTFEATURE_GETAGENTACTIVITYLIST = @as(u32, 16);
pub const LINEAGENTFEATURE_GETAGENTGROUP = @as(u32, 32);
pub const LINEAGENTSTATE_LOGGEDOFF = @as(u32, 1);
pub const LINEAGENTSTATE_NOTREADY = @as(u32, 2);
pub const LINEAGENTSTATE_READY = @as(u32, 4);
pub const LINEAGENTSTATE_BUSYACD = @as(u32, 8);
pub const LINEAGENTSTATE_BUSYINCOMING = @as(u32, 16);
pub const LINEAGENTSTATE_BUSYOUTBOUND = @as(u32, 32);
pub const LINEAGENTSTATE_BUSYOTHER = @as(u32, 64);
pub const LINEAGENTSTATE_WORKINGAFTERCALL = @as(u32, 128);
pub const LINEAGENTSTATE_UNKNOWN = @as(u32, 256);
pub const LINEAGENTSTATE_UNAVAIL = @as(u32, 512);
pub const LINEAGENTSTATUS_GROUP = @as(u32, 1);
pub const LINEAGENTSTATUS_STATE = @as(u32, 2);
pub const LINEAGENTSTATUS_NEXTSTATE = @as(u32, 4);
pub const LINEAGENTSTATUS_ACTIVITY = @as(u32, 8);
pub const LINEAGENTSTATUS_ACTIVITYLIST = @as(u32, 16);
pub const LINEAGENTSTATUS_GROUPLIST = @as(u32, 32);
pub const LINEAGENTSTATUS_CAPSCHANGE = @as(u32, 64);
pub const LINEAGENTSTATUS_VALIDSTATES = @as(u32, 128);
pub const LINEAGENTSTATUS_VALIDNEXTSTATES = @as(u32, 256);
pub const LINEAGENTSTATEEX_NOTREADY = @as(u32, 1);
pub const LINEAGENTSTATEEX_READY = @as(u32, 2);
pub const LINEAGENTSTATEEX_BUSYACD = @as(u32, 4);
pub const LINEAGENTSTATEEX_BUSYINCOMING = @as(u32, 8);
pub const LINEAGENTSTATEEX_BUSYOUTGOING = @as(u32, 16);
pub const LINEAGENTSTATEEX_UNKNOWN = @as(u32, 32);
pub const LINEAGENTSTATEEX_RELEASED = @as(u32, 64);
pub const LINEAGENTSTATUSEX_NEWAGENT = @as(u32, 1);
pub const LINEAGENTSTATUSEX_STATE = @as(u32, 2);
pub const LINEAGENTSTATUSEX_UPDATEINFO = @as(u32, 4);
pub const LINEAGENTSESSIONSTATE_NOTREADY = @as(u32, 1);
pub const LINEAGENTSESSIONSTATE_READY = @as(u32, 2);
pub const LINEAGENTSESSIONSTATE_BUSYONCALL = @as(u32, 4);
pub const LINEAGENTSESSIONSTATE_BUSYWRAPUP = @as(u32, 8);
pub const LINEAGENTSESSIONSTATE_ENDED = @as(u32, 16);
pub const LINEAGENTSESSIONSTATE_RELEASED = @as(u32, 32);
pub const LINEAGENTSESSIONSTATUS_NEWSESSION = @as(u32, 1);
pub const LINEAGENTSESSIONSTATUS_STATE = @as(u32, 2);
pub const LINEAGENTSESSIONSTATUS_UPDATEINFO = @as(u32, 4);
pub const LINEQUEUESTATUS_UPDATEINFO = @as(u32, 1);
pub const LINEQUEUESTATUS_NEWQUEUE = @as(u32, 2);
pub const LINEQUEUESTATUS_QUEUEREMOVED = @as(u32, 4);
pub const LINEGROUPSTATUS_NEWGROUP = @as(u32, 1);
pub const LINEGROUPSTATUS_GROUPREMOVED = @as(u32, 2);
pub const LINEPROXYSTATUS_OPEN = @as(u32, 1);
pub const LINEPROXYSTATUS_CLOSE = @as(u32, 2);
pub const LINEPROXYSTATUS_ALLOPENFORACD = @as(u32, 4);
pub const LINEANSWERMODE_NONE = @as(u32, 1);
pub const LINEANSWERMODE_DROP = @as(u32, 2);
pub const LINEANSWERMODE_HOLD = @as(u32, 4);
pub const LINEBEARERMODE_VOICE = @as(u32, 1);
pub const LINEBEARERMODE_SPEECH = @as(u32, 2);
pub const LINEBEARERMODE_MULTIUSE = @as(u32, 4);
pub const LINEBEARERMODE_DATA = @as(u32, 8);
pub const LINEBEARERMODE_ALTSPEECHDATA = @as(u32, 16);
pub const LINEBEARERMODE_NONCALLSIGNALING = @as(u32, 32);
pub const LINEBEARERMODE_PASSTHROUGH = @as(u32, 64);
pub const LINEBEARERMODE_RESTRICTEDDATA = @as(u32, 128);
pub const LINEBUSYMODE_STATION = @as(u32, 1);
pub const LINEBUSYMODE_TRUNK = @as(u32, 2);
pub const LINEBUSYMODE_UNKNOWN = @as(u32, 4);
pub const LINEBUSYMODE_UNAVAIL = @as(u32, 8);
pub const LINECALLCOMPLCOND_BUSY = @as(u32, 1);
pub const LINECALLCOMPLCOND_NOANSWER = @as(u32, 2);
pub const LINECALLCOMPLMODE_CAMPON = @as(u32, 1);
pub const LINECALLCOMPLMODE_CALLBACK = @as(u32, 2);
pub const LINECALLCOMPLMODE_INTRUDE = @as(u32, 4);
pub const LINECALLCOMPLMODE_MESSAGE = @as(u32, 8);
pub const LINECALLFEATURE_ACCEPT = @as(u32, 1);
pub const LINECALLFEATURE_ADDTOCONF = @as(u32, 2);
pub const LINECALLFEATURE_ANSWER = @as(u32, 4);
pub const LINECALLFEATURE_BLINDTRANSFER = @as(u32, 8);
pub const LINECALLFEATURE_COMPLETECALL = @as(u32, 16);
pub const LINECALLFEATURE_COMPLETETRANSF = @as(u32, 32);
pub const LINECALLFEATURE_DIAL = @as(u32, 64);
pub const LINECALLFEATURE_DROP = @as(u32, 128);
pub const LINECALLFEATURE_GATHERDIGITS = @as(u32, 256);
pub const LINECALLFEATURE_GENERATEDIGITS = @as(u32, 512);
pub const LINECALLFEATURE_GENERATETONE = @as(u32, 1024);
pub const LINECALLFEATURE_HOLD = @as(u32, 2048);
pub const LINECALLFEATURE_MONITORDIGITS = @as(u32, 4096);
pub const LINECALLFEATURE_MONITORMEDIA = @as(u32, 8192);
pub const LINECALLFEATURE_MONITORTONES = @as(u32, 16384);
pub const LINECALLFEATURE_PARK = @as(u32, 32768);
pub const LINECALLFEATURE_PREPAREADDCONF = @as(u32, 65536);
pub const LINECALLFEATURE_REDIRECT = @as(u32, 131072);
pub const LINECALLFEATURE_REMOVEFROMCONF = @as(u32, 262144);
pub const LINECALLFEATURE_SECURECALL = @as(u32, 524288);
pub const LINECALLFEATURE_SENDUSERUSER = @as(u32, 1048576);
pub const LINECALLFEATURE_SETCALLPARAMS = @as(u32, 2097152);
pub const LINECALLFEATURE_SETMEDIACONTROL = @as(u32, 4194304);
pub const LINECALLFEATURE_SETTERMINAL = @as(u32, 8388608);
pub const LINECALLFEATURE_SETUPCONF = @as(u32, 16777216);
pub const LINECALLFEATURE_SETUPTRANSFER = @as(u32, 33554432);
pub const LINECALLFEATURE_SWAPHOLD = @as(u32, 67108864);
pub const LINECALLFEATURE_UNHOLD = @as(u32, 134217728);
pub const LINECALLFEATURE_RELEASEUSERUSERINFO = @as(u32, 268435456);
pub const LINECALLFEATURE_SETTREATMENT = @as(u32, 536870912);
pub const LINECALLFEATURE_SETQOS = @as(u32, 1073741824);
pub const LINECALLFEATURE_SETCALLDATA = @as(u32, 2147483648);
pub const LINECALLFEATURE2_NOHOLDCONFERENCE = @as(u32, 1);
pub const LINECALLFEATURE2_ONESTEPTRANSFER = @as(u32, 2);
pub const LINECALLFEATURE2_COMPLCAMPON = @as(u32, 4);
pub const LINECALLFEATURE2_COMPLCALLBACK = @as(u32, 8);
pub const LINECALLFEATURE2_COMPLINTRUDE = @as(u32, 16);
pub const LINECALLFEATURE2_COMPLMESSAGE = @as(u32, 32);
pub const LINECALLFEATURE2_TRANSFERNORM = @as(u32, 64);
pub const LINECALLFEATURE2_TRANSFERCONF = @as(u32, 128);
pub const LINECALLFEATURE2_PARKDIRECT = @as(u32, 256);
pub const LINECALLFEATURE2_PARKNONDIRECT = @as(u32, 512);
pub const LINECALLHUBTRACKING_NONE = @as(u32, 0);
pub const LINECALLHUBTRACKING_PROVIDERLEVEL = @as(u32, 1);
pub const LINECALLHUBTRACKING_ALLCALLS = @as(u32, 2);
pub const LINECALLINFOSTATE_OTHER = @as(u32, 1);
pub const LINECALLINFOSTATE_DEVSPECIFIC = @as(u32, 2);
pub const LINECALLINFOSTATE_BEARERMODE = @as(u32, 4);
pub const LINECALLINFOSTATE_RATE = @as(u32, 8);
pub const LINECALLINFOSTATE_MEDIAMODE = @as(u32, 16);
pub const LINECALLINFOSTATE_APPSPECIFIC = @as(u32, 32);
pub const LINECALLINFOSTATE_CALLID = @as(u32, 64);
pub const LINECALLINFOSTATE_RELATEDCALLID = @as(u32, 128);
pub const LINECALLINFOSTATE_ORIGIN = @as(u32, 256);
pub const LINECALLINFOSTATE_REASON = @as(u32, 512);
pub const LINECALLINFOSTATE_COMPLETIONID = @as(u32, 1024);
pub const LINECALLINFOSTATE_NUMOWNERINCR = @as(u32, 2048);
pub const LINECALLINFOSTATE_NUMOWNERDECR = @as(u32, 4096);
pub const LINECALLINFOSTATE_NUMMONITORS = @as(u32, 8192);
pub const LINECALLINFOSTATE_TRUNK = @as(u32, 16384);
pub const LINECALLINFOSTATE_CALLERID = @as(u32, 32768);
pub const LINECALLINFOSTATE_CALLEDID = @as(u32, 65536);
pub const LINECALLINFOSTATE_CONNECTEDID = @as(u32, 131072);
pub const LINECALLINFOSTATE_REDIRECTIONID = @as(u32, 262144);
pub const LINECALLINFOSTATE_REDIRECTINGID = @as(u32, 524288);
pub const LINECALLINFOSTATE_DISPLAY = @as(u32, 1048576);
pub const LINECALLINFOSTATE_USERUSERINFO = @as(u32, 2097152);
pub const LINECALLINFOSTATE_HIGHLEVELCOMP = @as(u32, 4194304);
pub const LINECALLINFOSTATE_LOWLEVELCOMP = @as(u32, 8388608);
pub const LINECALLINFOSTATE_CHARGINGINFO = @as(u32, 16777216);
pub const LINECALLINFOSTATE_TERMINAL = @as(u32, 33554432);
pub const LINECALLINFOSTATE_DIALPARAMS = @as(u32, 67108864);
pub const LINECALLINFOSTATE_MONITORMODES = @as(u32, 134217728);
pub const LINECALLINFOSTATE_TREATMENT = @as(u32, 268435456);
pub const LINECALLINFOSTATE_QOS = @as(u32, 536870912);
pub const LINECALLINFOSTATE_CALLDATA = @as(u32, 1073741824);
pub const LINECALLORIGIN_OUTBOUND = @as(u32, 1);
pub const LINECALLORIGIN_INTERNAL = @as(u32, 2);
pub const LINECALLORIGIN_EXTERNAL = @as(u32, 4);
pub const LINECALLORIGIN_UNKNOWN = @as(u32, 16);
pub const LINECALLORIGIN_UNAVAIL = @as(u32, 32);
pub const LINECALLORIGIN_CONFERENCE = @as(u32, 64);
pub const LINECALLORIGIN_INBOUND = @as(u32, 128);
pub const LINECALLPARAMFLAGS_SECURE = @as(u32, 1);
pub const LINECALLPARAMFLAGS_IDLE = @as(u32, 2);
pub const LINECALLPARAMFLAGS_BLOCKID = @as(u32, 4);
pub const LINECALLPARAMFLAGS_ORIGOFFHOOK = @as(u32, 8);
pub const LINECALLPARAMFLAGS_DESTOFFHOOK = @as(u32, 16);
pub const LINECALLPARAMFLAGS_NOHOLDCONFERENCE = @as(u32, 32);
pub const LINECALLPARAMFLAGS_PREDICTIVEDIAL = @as(u32, 64);
pub const LINECALLPARAMFLAGS_ONESTEPTRANSFER = @as(u32, 128);
pub const LINECALLPARTYID_BLOCKED = @as(u32, 1);
pub const LINECALLPARTYID_OUTOFAREA = @as(u32, 2);
pub const LINECALLPARTYID_NAME = @as(u32, 4);
pub const LINECALLPARTYID_ADDRESS = @as(u32, 8);
pub const LINECALLPARTYID_PARTIAL = @as(u32, 16);
pub const LINECALLPARTYID_UNKNOWN = @as(u32, 32);
pub const LINECALLPARTYID_UNAVAIL = @as(u32, 64);
pub const LINECALLPRIVILEGE_NONE = @as(u32, 1);
pub const LINECALLPRIVILEGE_MONITOR = @as(u32, 2);
pub const LINECALLPRIVILEGE_OWNER = @as(u32, 4);
pub const LINECALLREASON_DIRECT = @as(u32, 1);
pub const LINECALLREASON_FWDBUSY = @as(u32, 2);
pub const LINECALLREASON_FWDNOANSWER = @as(u32, 4);
pub const LINECALLREASON_FWDUNCOND = @as(u32, 8);
pub const LINECALLREASON_PICKUP = @as(u32, 16);
pub const LINECALLREASON_UNPARK = @as(u32, 32);
pub const LINECALLREASON_REDIRECT = @as(u32, 64);
pub const LINECALLREASON_CALLCOMPLETION = @as(u32, 128);
pub const LINECALLREASON_TRANSFER = @as(u32, 256);
pub const LINECALLREASON_REMINDER = @as(u32, 512);
pub const LINECALLREASON_UNKNOWN = @as(u32, 1024);
pub const LINECALLREASON_UNAVAIL = @as(u32, 2048);
pub const LINECALLREASON_INTRUDE = @as(u32, 4096);
pub const LINECALLREASON_PARKED = @as(u32, 8192);
pub const LINECALLREASON_CAMPEDON = @as(u32, 16384);
pub const LINECALLREASON_ROUTEREQUEST = @as(u32, 32768);
pub const LINECALLSELECT_LINE = @as(u32, 1);
pub const LINECALLSELECT_ADDRESS = @as(u32, 2);
pub const LINECALLSELECT_CALL = @as(u32, 4);
pub const LINECALLSELECT_DEVICEID = @as(u32, 8);
pub const LINECALLSELECT_CALLID = @as(u32, 16);
pub const LINECALLSTATE_IDLE = @as(u32, 1);
pub const LINECALLSTATE_OFFERING = @as(u32, 2);
pub const LINECALLSTATE_ACCEPTED = @as(u32, 4);
pub const LINECALLSTATE_DIALTONE = @as(u32, 8);
pub const LINECALLSTATE_DIALING = @as(u32, 16);
pub const LINECALLSTATE_RINGBACK = @as(u32, 32);
pub const LINECALLSTATE_BUSY = @as(u32, 64);
pub const LINECALLSTATE_SPECIALINFO = @as(u32, 128);
pub const LINECALLSTATE_CONNECTED = @as(u32, 256);
pub const LINECALLSTATE_PROCEEDING = @as(u32, 512);
pub const LINECALLSTATE_ONHOLD = @as(u32, 1024);
pub const LINECALLSTATE_CONFERENCED = @as(u32, 2048);
pub const LINECALLSTATE_ONHOLDPENDCONF = @as(u32, 4096);
pub const LINECALLSTATE_ONHOLDPENDTRANSFER = @as(u32, 8192);
pub const LINECALLSTATE_DISCONNECTED = @as(u32, 16384);
pub const LINECALLSTATE_UNKNOWN = @as(u32, 32768);
pub const LINECALLTREATMENT_SILENCE = @as(u32, 1);
pub const LINECALLTREATMENT_RINGBACK = @as(u32, 2);
pub const LINECALLTREATMENT_BUSY = @as(u32, 3);
pub const LINECALLTREATMENT_MUSIC = @as(u32, 4);
pub const LINECARDOPTION_PREDEFINED = @as(u32, 1);
pub const LINECARDOPTION_HIDDEN = @as(u32, 2);
pub const LINECONNECTEDMODE_ACTIVE = @as(u32, 1);
pub const LINECONNECTEDMODE_INACTIVE = @as(u32, 2);
pub const LINECONNECTEDMODE_ACTIVEHELD = @as(u32, 4);
pub const LINECONNECTEDMODE_INACTIVEHELD = @as(u32, 8);
pub const LINECONNECTEDMODE_CONFIRMED = @as(u32, 16);
pub const LINEDEVCAPFLAGS_CROSSADDRCONF = @as(u32, 1);
pub const LINEDEVCAPFLAGS_HIGHLEVCOMP = @as(u32, 2);
pub const LINEDEVCAPFLAGS_LOWLEVCOMP = @as(u32, 4);
pub const LINEDEVCAPFLAGS_MEDIACONTROL = @as(u32, 8);
pub const LINEDEVCAPFLAGS_MULTIPLEADDR = @as(u32, 16);
pub const LINEDEVCAPFLAGS_CLOSEDROP = @as(u32, 32);
pub const LINEDEVCAPFLAGS_DIALBILLING = @as(u32, 64);
pub const LINEDEVCAPFLAGS_DIALQUIET = @as(u32, 128);
pub const LINEDEVCAPFLAGS_DIALDIALTONE = @as(u32, 256);
pub const LINEDEVCAPFLAGS_MSP = @as(u32, 512);
pub const LINEDEVCAPFLAGS_CALLHUB = @as(u32, 1024);
pub const LINEDEVCAPFLAGS_CALLHUBTRACKING = @as(u32, 2048);
pub const LINEDEVCAPFLAGS_PRIVATEOBJECTS = @as(u32, 4096);
pub const LINEDEVCAPFLAGS_LOCAL = @as(u32, 8192);
pub const LINEDEVSTATE_OTHER = @as(u32, 1);
pub const LINEDEVSTATE_RINGING = @as(u32, 2);
pub const LINEDEVSTATE_CONNECTED = @as(u32, 4);
pub const LINEDEVSTATE_DISCONNECTED = @as(u32, 8);
pub const LINEDEVSTATE_MSGWAITON = @as(u32, 16);
pub const LINEDEVSTATE_MSGWAITOFF = @as(u32, 32);
pub const LINEDEVSTATE_INSERVICE = @as(u32, 64);
pub const LINEDEVSTATE_OUTOFSERVICE = @as(u32, 128);
pub const LINEDEVSTATE_MAINTENANCE = @as(u32, 256);
pub const LINEDEVSTATE_OPEN = @as(u32, 512);
pub const LINEDEVSTATE_CLOSE = @as(u32, 1024);
pub const LINEDEVSTATE_NUMCALLS = @as(u32, 2048);
pub const LINEDEVSTATE_NUMCOMPLETIONS = @as(u32, 4096);
pub const LINEDEVSTATE_TERMINALS = @as(u32, 8192);
pub const LINEDEVSTATE_ROAMMODE = @as(u32, 16384);
pub const LINEDEVSTATE_BATTERY = @as(u32, 32768);
pub const LINEDEVSTATE_SIGNAL = @as(u32, 65536);
pub const LINEDEVSTATE_DEVSPECIFIC = @as(u32, 131072);
pub const LINEDEVSTATE_REINIT = @as(u32, 262144);
pub const LINEDEVSTATE_LOCK = @as(u32, 524288);
pub const LINEDEVSTATE_CAPSCHANGE = @as(u32, 1048576);
pub const LINEDEVSTATE_CONFIGCHANGE = @as(u32, 2097152);
pub const LINEDEVSTATE_TRANSLATECHANGE = @as(u32, 4194304);
pub const LINEDEVSTATE_COMPLCANCEL = @as(u32, 8388608);
pub const LINEDEVSTATE_REMOVED = @as(u32, 16777216);
pub const LINEDEVSTATUSFLAGS_CONNECTED = @as(u32, 1);
pub const LINEDEVSTATUSFLAGS_MSGWAIT = @as(u32, 2);
pub const LINEDEVSTATUSFLAGS_INSERVICE = @as(u32, 4);
pub const LINEDEVSTATUSFLAGS_LOCKED = @as(u32, 8);
pub const LINEDIALTONEMODE_NORMAL = @as(u32, 1);
pub const LINEDIALTONEMODE_SPECIAL = @as(u32, 2);
pub const LINEDIALTONEMODE_INTERNAL = @as(u32, 4);
pub const LINEDIALTONEMODE_EXTERNAL = @as(u32, 8);
pub const LINEDIALTONEMODE_UNKNOWN = @as(u32, 16);
pub const LINEDIALTONEMODE_UNAVAIL = @as(u32, 32);
pub const LINEDIGITMODE_PULSE = @as(u32, 1);
pub const LINEDIGITMODE_DTMF = @as(u32, 2);
pub const LINEDIGITMODE_DTMFEND = @as(u32, 4);
pub const LINEDISCONNECTMODE_NORMAL = @as(u32, 1);
pub const LINEDISCONNECTMODE_UNKNOWN = @as(u32, 2);
pub const LINEDISCONNECTMODE_REJECT = @as(u32, 4);
pub const LINEDISCONNECTMODE_PICKUP = @as(u32, 8);
pub const LINEDISCONNECTMODE_FORWARDED = @as(u32, 16);
pub const LINEDISCONNECTMODE_BUSY = @as(u32, 32);
pub const LINEDISCONNECTMODE_NOANSWER = @as(u32, 64);
pub const LINEDISCONNECTMODE_BADADDRESS = @as(u32, 128);
pub const LINEDISCONNECTMODE_UNREACHABLE = @as(u32, 256);
pub const LINEDISCONNECTMODE_CONGESTION = @as(u32, 512);
pub const LINEDISCONNECTMODE_INCOMPATIBLE = @as(u32, 1024);
pub const LINEDISCONNECTMODE_UNAVAIL = @as(u32, 2048);
pub const LINEDISCONNECTMODE_NODIALTONE = @as(u32, 4096);
pub const LINEDISCONNECTMODE_NUMBERCHANGED = @as(u32, 8192);
pub const LINEDISCONNECTMODE_OUTOFORDER = @as(u32, 16384);
pub const LINEDISCONNECTMODE_TEMPFAILURE = @as(u32, 32768);
pub const LINEDISCONNECTMODE_QOSUNAVAIL = @as(u32, 65536);
pub const LINEDISCONNECTMODE_BLOCKED = @as(u32, 131072);
pub const LINEDISCONNECTMODE_DONOTDISTURB = @as(u32, 262144);
pub const LINEDISCONNECTMODE_CANCELLED = @as(u32, 524288);
pub const LINEDISCONNECTMODE_DESTINATIONBARRED = @as(u32, 1048576);
pub const LINEDISCONNECTMODE_FDNRESTRICT = @as(u32, 2097152);
pub const LINEERR_ALLOCATED = @as(u32, 2147483649);
pub const LINEERR_BADDEVICEID = @as(u32, 2147483650);
pub const LINEERR_BEARERMODEUNAVAIL = @as(u32, 2147483651);
pub const LINEERR_CALLUNAVAIL = @as(u32, 2147483653);
pub const LINEERR_COMPLETIONOVERRUN = @as(u32, 2147483654);
pub const LINEERR_CONFERENCEFULL = @as(u32, 2147483655);
pub const LINEERR_DIALBILLING = @as(u32, 2147483656);
pub const LINEERR_DIALDIALTONE = @as(u32, 2147483657);
pub const LINEERR_DIALPROMPT = @as(u32, 2147483658);
pub const LINEERR_DIALQUIET = @as(u32, 2147483659);
pub const LINEERR_INCOMPATIBLEAPIVERSION = @as(u32, 2147483660);
pub const LINEERR_INCOMPATIBLEEXTVERSION = @as(u32, 2147483661);
pub const LINEERR_INIFILECORRUPT = @as(u32, 2147483662);
pub const LINEERR_INUSE = @as(u32, 2147483663);
pub const LINEERR_INVALADDRESS = @as(u32, 2147483664);
pub const LINEERR_INVALADDRESSID = @as(u32, 2147483665);
pub const LINEERR_INVALADDRESSMODE = @as(u32, 2147483666);
pub const LINEERR_INVALADDRESSSTATE = @as(u32, 2147483667);
pub const LINEERR_INVALAPPHANDLE = @as(u32, 2147483668);
pub const LINEERR_INVALAPPNAME = @as(u32, 2147483669);
pub const LINEERR_INVALBEARERMODE = @as(u32, 2147483670);
pub const LINEERR_INVALCALLCOMPLMODE = @as(u32, 2147483671);
pub const LINEERR_INVALCALLHANDLE = @as(u32, 2147483672);
pub const LINEERR_INVALCALLPARAMS = @as(u32, 2147483673);
pub const LINEERR_INVALCALLPRIVILEGE = @as(u32, 2147483674);
pub const LINEERR_INVALCALLSELECT = @as(u32, 2147483675);
pub const LINEERR_INVALCALLSTATE = @as(u32, 2147483676);
pub const LINEERR_INVALCALLSTATELIST = @as(u32, 2147483677);
pub const LINEERR_INVALCARD = @as(u32, 2147483678);
pub const LINEERR_INVALCOMPLETIONID = @as(u32, 2147483679);
pub const LINEERR_INVALCONFCALLHANDLE = @as(u32, 2147483680);
pub const LINEERR_INVALCONSULTCALLHANDLE = @as(u32, 2147483681);
pub const LINEERR_INVALCOUNTRYCODE = @as(u32, 2147483682);
pub const LINEERR_INVALDEVICECLASS = @as(u32, 2147483683);
pub const LINEERR_INVALDEVICEHANDLE = @as(u32, 2147483684);
pub const LINEERR_INVALDIALPARAMS = @as(u32, 2147483685);
pub const LINEERR_INVALDIGITLIST = @as(u32, 2147483686);
pub const LINEERR_INVALDIGITMODE = @as(u32, 2147483687);
pub const LINEERR_INVALDIGITS = @as(u32, 2147483688);
pub const LINEERR_INVALEXTVERSION = @as(u32, 2147483689);
pub const LINEERR_INVALGROUPID = @as(u32, 2147483690);
pub const LINEERR_INVALLINEHANDLE = @as(u32, 2147483691);
pub const LINEERR_INVALLINESTATE = @as(u32, 2147483692);
pub const LINEERR_INVALLOCATION = @as(u32, 2147483693);
pub const LINEERR_INVALMEDIALIST = @as(u32, 2147483694);
pub const LINEERR_INVALMEDIAMODE = @as(u32, 2147483695);
pub const LINEERR_INVALMESSAGEID = @as(u32, 2147483696);
pub const LINEERR_INVALPARAM = @as(u32, 2147483698);
pub const LINEERR_INVALPARKID = @as(u32, 2147483699);
pub const LINEERR_INVALPARKMODE = @as(u32, 2147483700);
pub const LINEERR_INVALPOINTER = @as(u32, 2147483701);
pub const LINEERR_INVALPRIVSELECT = @as(u32, 2147483702);
pub const LINEERR_INVALRATE = @as(u32, 2147483703);
pub const LINEERR_INVALREQUESTMODE = @as(u32, 2147483704);
pub const LINEERR_INVALTERMINALID = @as(u32, 2147483705);
pub const LINEERR_INVALTERMINALMODE = @as(u32, 2147483706);
pub const LINEERR_INVALTIMEOUT = @as(u32, 2147483707);
pub const LINEERR_INVALTONE = @as(u32, 2147483708);
pub const LINEERR_INVALTONELIST = @as(u32, 2147483709);
pub const LINEERR_INVALTONEMODE = @as(u32, 2147483710);
pub const LINEERR_INVALTRANSFERMODE = @as(u32, 2147483711);
pub const LINEERR_LINEMAPPERFAILED = @as(u32, 2147483712);
pub const LINEERR_NOCONFERENCE = @as(u32, 2147483713);
pub const LINEERR_NODEVICE = @as(u32, 2147483714);
pub const LINEERR_NODRIVER = @as(u32, 2147483715);
pub const LINEERR_NOMEM = @as(u32, 2147483716);
pub const LINEERR_NOREQUEST = @as(u32, 2147483717);
pub const LINEERR_NOTOWNER = @as(u32, 2147483718);
pub const LINEERR_NOTREGISTERED = @as(u32, 2147483719);
pub const LINEERR_OPERATIONFAILED = @as(u32, 2147483720);
pub const LINEERR_OPERATIONUNAVAIL = @as(u32, 2147483721);
pub const LINEERR_RATEUNAVAIL = @as(u32, 2147483722);
pub const LINEERR_RESOURCEUNAVAIL = @as(u32, 2147483723);
pub const LINEERR_REQUESTOVERRUN = @as(u32, 2147483724);
pub const LINEERR_STRUCTURETOOSMALL = @as(u32, 2147483725);
pub const LINEERR_TARGETNOTFOUND = @as(u32, 2147483726);
pub const LINEERR_TARGETSELF = @as(u32, 2147483727);
pub const LINEERR_UNINITIALIZED = @as(u32, 2147483728);
pub const LINEERR_USERUSERINFOTOOBIG = @as(u32, 2147483729);
pub const LINEERR_REINIT = @as(u32, 2147483730);
pub const LINEERR_ADDRESSBLOCKED = @as(u32, 2147483731);
pub const LINEERR_BILLINGREJECTED = @as(u32, 2147483732);
pub const LINEERR_INVALFEATURE = @as(u32, 2147483733);
pub const LINEERR_NOMULTIPLEINSTANCE = @as(u32, 2147483734);
pub const LINEERR_INVALAGENTID = @as(u32, 2147483735);
pub const LINEERR_INVALAGENTGROUP = @as(u32, 2147483736);
pub const LINEERR_INVALPASSWORD = @as(u32, 2147483737);
pub const LINEERR_INVALAGENTSTATE = @as(u32, 2147483738);
pub const LINEERR_INVALAGENTACTIVITY = @as(u32, 2147483739);
pub const LINEERR_DIALVOICEDETECT = @as(u32, 2147483740);
pub const LINEERR_USERCANCELLED = @as(u32, 2147483741);
pub const LINEERR_INVALADDRESSTYPE = @as(u32, 2147483742);
pub const LINEERR_INVALAGENTSESSIONSTATE = @as(u32, 2147483743);
pub const LINEERR_DISCONNECTED = @as(u32, 2147483744);
pub const LINEERR_SERVICE_NOT_RUNNING = @as(u32, 2147483745);
pub const LINEFEATURE_DEVSPECIFIC = @as(u32, 1);
pub const LINEFEATURE_DEVSPECIFICFEAT = @as(u32, 2);
pub const LINEFEATURE_FORWARD = @as(u32, 4);
pub const LINEFEATURE_MAKECALL = @as(u32, 8);
pub const LINEFEATURE_SETMEDIACONTROL = @as(u32, 16);
pub const LINEFEATURE_SETTERMINAL = @as(u32, 32);
pub const LINEFEATURE_SETDEVSTATUS = @as(u32, 64);
pub const LINEFEATURE_FORWARDFWD = @as(u32, 128);
pub const LINEFEATURE_FORWARDDND = @as(u32, 256);
pub const LINEFORWARDMODE_UNCOND = @as(u32, 1);
pub const LINEFORWARDMODE_UNCONDINTERNAL = @as(u32, 2);
pub const LINEFORWARDMODE_UNCONDEXTERNAL = @as(u32, 4);
pub const LINEFORWARDMODE_UNCONDSPECIFIC = @as(u32, 8);
pub const LINEFORWARDMODE_BUSY = @as(u32, 16);
pub const LINEFORWARDMODE_BUSYINTERNAL = @as(u32, 32);
pub const LINEFORWARDMODE_BUSYEXTERNAL = @as(u32, 64);
pub const LINEFORWARDMODE_BUSYSPECIFIC = @as(u32, 128);
pub const LINEFORWARDMODE_NOANSW = @as(u32, 256);
pub const LINEFORWARDMODE_NOANSWINTERNAL = @as(u32, 512);
pub const LINEFORWARDMODE_NOANSWEXTERNAL = @as(u32, 1024);
pub const LINEFORWARDMODE_NOANSWSPECIFIC = @as(u32, 2048);
pub const LINEFORWARDMODE_BUSYNA = @as(u32, 4096);
pub const LINEFORWARDMODE_BUSYNAINTERNAL = @as(u32, 8192);
pub const LINEFORWARDMODE_BUSYNAEXTERNAL = @as(u32, 16384);
pub const LINEFORWARDMODE_BUSYNASPECIFIC = @as(u32, 32768);
pub const LINEFORWARDMODE_UNKNOWN = @as(u32, 65536);
pub const LINEFORWARDMODE_UNAVAIL = @as(u32, 131072);
pub const LINEGATHERTERM_BUFFERFULL = @as(u32, 1);
pub const LINEGATHERTERM_TERMDIGIT = @as(u32, 2);
pub const LINEGATHERTERM_FIRSTTIMEOUT = @as(u32, 4);
pub const LINEGATHERTERM_INTERTIMEOUT = @as(u32, 8);
pub const LINEGATHERTERM_CANCEL = @as(u32, 16);
pub const LINEGENERATETERM_DONE = @as(u32, 1);
pub const LINEGENERATETERM_CANCEL = @as(u32, 2);
pub const LINEINITIALIZEEXOPTION_USEHIDDENWINDOW = @as(u32, 1);
pub const LINEINITIALIZEEXOPTION_USEEVENT = @as(u32, 2);
pub const LINEINITIALIZEEXOPTION_USECOMPLETIONPORT = @as(u32, 3);
pub const LINEINITIALIZEEXOPTION_CALLHUBTRACKING = @as(u32, 2147483648);
pub const LINELOCATIONOPTION_PULSEDIAL = @as(u32, 1);
pub const LINEMAPPER = @as(u32, 4294967295);
pub const LINEMEDIACONTROL_NONE = @as(u32, 1);
pub const LINEMEDIACONTROL_START = @as(u32, 2);
pub const LINEMEDIACONTROL_RESET = @as(u32, 4);
pub const LINEMEDIACONTROL_PAUSE = @as(u32, 8);
pub const LINEMEDIACONTROL_RESUME = @as(u32, 16);
pub const LINEMEDIACONTROL_RATEUP = @as(u32, 32);
pub const LINEMEDIACONTROL_RATEDOWN = @as(u32, 64);
pub const LINEMEDIACONTROL_RATENORMAL = @as(u32, 128);
pub const LINEMEDIACONTROL_VOLUMEUP = @as(u32, 256);
pub const LINEMEDIACONTROL_VOLUMEDOWN = @as(u32, 512);
pub const LINEMEDIACONTROL_VOLUMENORMAL = @as(u32, 1024);
pub const LINEMEDIAMODE_UNKNOWN = @as(u32, 2);
pub const LINEMEDIAMODE_INTERACTIVEVOICE = @as(u32, 4);
pub const LINEMEDIAMODE_AUTOMATEDVOICE = @as(u32, 8);
pub const LINEMEDIAMODE_DATAMODEM = @as(u32, 16);
pub const LINEMEDIAMODE_G3FAX = @as(u32, 32);
pub const LINEMEDIAMODE_TDD = @as(u32, 64);
pub const LINEMEDIAMODE_G4FAX = @as(u32, 128);
pub const LINEMEDIAMODE_DIGITALDATA = @as(u32, 256);
pub const LINEMEDIAMODE_TELETEX = @as(u32, 512);
pub const LINEMEDIAMODE_VIDEOTEX = @as(u32, 1024);
pub const LINEMEDIAMODE_TELEX = @as(u32, 2048);
pub const LINEMEDIAMODE_MIXED = @as(u32, 4096);
pub const LINEMEDIAMODE_ADSI = @as(u32, 8192);
pub const LINEMEDIAMODE_VOICEVIEW = @as(u32, 16384);
pub const LINEMEDIAMODE_VIDEO = @as(u32, 32768);
pub const LAST_LINEMEDIAMODE = @as(u32, 32768);
pub const LINEOFFERINGMODE_ACTIVE = @as(u32, 1);
pub const LINEOFFERINGMODE_INACTIVE = @as(u32, 2);
pub const LINEOPENOPTION_SINGLEADDRESS = @as(u32, 2147483648);
pub const LINEOPENOPTION_PROXY = @as(u32, 1073741824);
pub const LINEPARKMODE_DIRECTED = @as(u32, 1);
pub const LINEPARKMODE_NONDIRECTED = @as(u32, 2);
pub const LINEPROXYREQUEST_SETAGENTGROUP = @as(u32, 1);
pub const LINEPROXYREQUEST_SETAGENTSTATE = @as(u32, 2);
pub const LINEPROXYREQUEST_SETAGENTACTIVITY = @as(u32, 3);
pub const LINEPROXYREQUEST_GETAGENTCAPS = @as(u32, 4);
pub const LINEPROXYREQUEST_GETAGENTSTATUS = @as(u32, 5);
pub const LINEPROXYREQUEST_AGENTSPECIFIC = @as(u32, 6);
pub const LINEPROXYREQUEST_GETAGENTACTIVITYLIST = @as(u32, 7);
pub const LINEPROXYREQUEST_GETAGENTGROUPLIST = @as(u32, 8);
pub const LINEPROXYREQUEST_CREATEAGENT = @as(u32, 9);
pub const LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD = @as(u32, 10);
pub const LINEPROXYREQUEST_GETAGENTINFO = @as(u32, 11);
pub const LINEPROXYREQUEST_CREATEAGENTSESSION = @as(u32, 12);
pub const LINEPROXYREQUEST_GETAGENTSESSIONLIST = @as(u32, 13);
pub const LINEPROXYREQUEST_SETAGENTSESSIONSTATE = @as(u32, 14);
pub const LINEPROXYREQUEST_GETAGENTSESSIONINFO = @as(u32, 15);
pub const LINEPROXYREQUEST_GETQUEUELIST = @as(u32, 16);
pub const LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD = @as(u32, 17);
pub const LINEPROXYREQUEST_GETQUEUEINFO = @as(u32, 18);
pub const LINEPROXYREQUEST_GETGROUPLIST = @as(u32, 19);
pub const LINEPROXYREQUEST_SETAGENTSTATEEX = @as(u32, 20);
pub const LINEREMOVEFROMCONF_NONE = @as(u32, 1);
pub const LINEREMOVEFROMCONF_LAST = @as(u32, 2);
pub const LINEREMOVEFROMCONF_ANY = @as(u32, 3);
pub const LINEREQUESTMODE_MAKECALL = @as(u32, 1);
pub const LINEREQUESTMODE_MEDIACALL = @as(u32, 2);
pub const LINEREQUESTMODE_DROP = @as(u32, 4);
pub const LAST_LINEREQUESTMODE = @as(u32, 2);
pub const LINEROAMMODE_UNKNOWN = @as(u32, 1);
pub const LINEROAMMODE_UNAVAIL = @as(u32, 2);
pub const LINEROAMMODE_HOME = @as(u32, 4);
pub const LINEROAMMODE_ROAMA = @as(u32, 8);
pub const LINEROAMMODE_ROAMB = @as(u32, 16);
pub const LINESPECIALINFO_NOCIRCUIT = @as(u32, 1);
pub const LINESPECIALINFO_CUSTIRREG = @as(u32, 2);
pub const LINESPECIALINFO_REORDER = @as(u32, 4);
pub const LINESPECIALINFO_UNKNOWN = @as(u32, 8);
pub const LINESPECIALINFO_UNAVAIL = @as(u32, 16);
pub const LINETERMDEV_PHONE = @as(u32, 1);
pub const LINETERMDEV_HEADSET = @as(u32, 2);
pub const LINETERMDEV_SPEAKER = @as(u32, 4);
pub const LINETERMMODE_BUTTONS = @as(u32, 1);
pub const LINETERMMODE_LAMPS = @as(u32, 2);
pub const LINETERMMODE_DISPLAY = @as(u32, 4);
pub const LINETERMMODE_RINGER = @as(u32, 8);
pub const LINETERMMODE_HOOKSWITCH = @as(u32, 16);
pub const LINETERMMODE_MEDIATOLINE = @as(u32, 32);
pub const LINETERMMODE_MEDIAFROMLINE = @as(u32, 64);
pub const LINETERMMODE_MEDIABIDIRECT = @as(u32, 128);
pub const LINETERMSHARING_PRIVATE = @as(u32, 1);
pub const LINETERMSHARING_SHAREDEXCL = @as(u32, 2);
pub const LINETERMSHARING_SHAREDCONF = @as(u32, 4);
pub const LINETOLLLISTOPTION_ADD = @as(u32, 1);
pub const LINETOLLLISTOPTION_REMOVE = @as(u32, 2);
pub const LINETONEMODE_CUSTOM = @as(u32, 1);
pub const LINETONEMODE_RINGBACK = @as(u32, 2);
pub const LINETONEMODE_BUSY = @as(u32, 4);
pub const LINETONEMODE_BEEP = @as(u32, 8);
pub const LINETONEMODE_BILLING = @as(u32, 16);
pub const LINETRANSFERMODE_TRANSFER = @as(u32, 1);
pub const LINETRANSFERMODE_CONFERENCE = @as(u32, 2);
pub const LINETRANSLATEOPTION_CARDOVERRIDE = @as(u32, 1);
pub const LINETRANSLATEOPTION_CANCELCALLWAITING = @as(u32, 2);
pub const LINETRANSLATEOPTION_FORCELOCAL = @as(u32, 4);
pub const LINETRANSLATEOPTION_FORCELD = @as(u32, 8);
pub const LINETRANSLATERESULT_CANONICAL = @as(u32, 1);
pub const LINETRANSLATERESULT_INTERNATIONAL = @as(u32, 2);
pub const LINETRANSLATERESULT_LONGDISTANCE = @as(u32, 4);
pub const LINETRANSLATERESULT_LOCAL = @as(u32, 8);
pub const LINETRANSLATERESULT_INTOLLLIST = @as(u32, 16);
pub const LINETRANSLATERESULT_NOTINTOLLLIST = @as(u32, 32);
pub const LINETRANSLATERESULT_DIALBILLING = @as(u32, 64);
pub const LINETRANSLATERESULT_DIALQUIET = @as(u32, 128);
pub const LINETRANSLATERESULT_DIALDIALTONE = @as(u32, 256);
pub const LINETRANSLATERESULT_DIALPROMPT = @as(u32, 512);
pub const LINETRANSLATERESULT_VOICEDETECT = @as(u32, 1024);
pub const LINETRANSLATERESULT_NOTRANSLATION = @as(u32, 2048);
pub const PHONEBUTTONFUNCTION_UNKNOWN = @as(u32, 0);
pub const PHONEBUTTONFUNCTION_CONFERENCE = @as(u32, 1);
pub const PHONEBUTTONFUNCTION_TRANSFER = @as(u32, 2);
pub const PHONEBUTTONFUNCTION_DROP = @as(u32, 3);
pub const PHONEBUTTONFUNCTION_HOLD = @as(u32, 4);
pub const PHONEBUTTONFUNCTION_RECALL = @as(u32, 5);
pub const PHONEBUTTONFUNCTION_DISCONNECT = @as(u32, 6);
pub const PHONEBUTTONFUNCTION_CONNECT = @as(u32, 7);
pub const PHONEBUTTONFUNCTION_MSGWAITON = @as(u32, 8);
pub const PHONEBUTTONFUNCTION_MSGWAITOFF = @as(u32, 9);
pub const PHONEBUTTONFUNCTION_SELECTRING = @as(u32, 10);
pub const PHONEBUTTONFUNCTION_ABBREVDIAL = @as(u32, 11);
pub const PHONEBUTTONFUNCTION_FORWARD = @as(u32, 12);
pub const PHONEBUTTONFUNCTION_PICKUP = @as(u32, 13);
pub const PHONEBUTTONFUNCTION_RINGAGAIN = @as(u32, 14);
pub const PHONEBUTTONFUNCTION_PARK = @as(u32, 15);
pub const PHONEBUTTONFUNCTION_REJECT = @as(u32, 16);
pub const PHONEBUTTONFUNCTION_REDIRECT = @as(u32, 17);
pub const PHONEBUTTONFUNCTION_MUTE = @as(u32, 18);
pub const PHONEBUTTONFUNCTION_VOLUMEUP = @as(u32, 19);
pub const PHONEBUTTONFUNCTION_VOLUMEDOWN = @as(u32, 20);
pub const PHONEBUTTONFUNCTION_SPEAKERON = @as(u32, 21);
pub const PHONEBUTTONFUNCTION_SPEAKEROFF = @as(u32, 22);
pub const PHONEBUTTONFUNCTION_FLASH = @as(u32, 23);
pub const PHONEBUTTONFUNCTION_DATAON = @as(u32, 24);
pub const PHONEBUTTONFUNCTION_DATAOFF = @as(u32, 25);
pub const PHONEBUTTONFUNCTION_DONOTDISTURB = @as(u32, 26);
pub const PHONEBUTTONFUNCTION_INTERCOM = @as(u32, 27);
pub const PHONEBUTTONFUNCTION_BRIDGEDAPP = @as(u32, 28);
pub const PHONEBUTTONFUNCTION_BUSY = @as(u32, 29);
pub const PHONEBUTTONFUNCTION_CALLAPP = @as(u32, 30);
pub const PHONEBUTTONFUNCTION_DATETIME = @as(u32, 31);
pub const PHONEBUTTONFUNCTION_DIRECTORY = @as(u32, 32);
pub const PHONEBUTTONFUNCTION_COVER = @as(u32, 33);
pub const PHONEBUTTONFUNCTION_CALLID = @as(u32, 34);
pub const PHONEBUTTONFUNCTION_LASTNUM = @as(u32, 35);
pub const PHONEBUTTONFUNCTION_NIGHTSRV = @as(u32, 36);
pub const PHONEBUTTONFUNCTION_SENDCALLS = @as(u32, 37);
pub const PHONEBUTTONFUNCTION_MSGINDICATOR = @as(u32, 38);
pub const PHONEBUTTONFUNCTION_REPDIAL = @as(u32, 39);
pub const PHONEBUTTONFUNCTION_SETREPDIAL = @as(u32, 40);
pub const PHONEBUTTONFUNCTION_SYSTEMSPEED = @as(u32, 41);
pub const PHONEBUTTONFUNCTION_STATIONSPEED = @as(u32, 42);
pub const PHONEBUTTONFUNCTION_CAMPON = @as(u32, 43);
pub const PHONEBUTTONFUNCTION_SAVEREPEAT = @as(u32, 44);
pub const PHONEBUTTONFUNCTION_QUEUECALL = @as(u32, 45);
pub const PHONEBUTTONFUNCTION_NONE = @as(u32, 46);
pub const PHONEBUTTONFUNCTION_SEND = @as(u32, 47);
pub const PHONEBUTTONMODE_DUMMY = @as(u32, 1);
pub const PHONEBUTTONMODE_CALL = @as(u32, 2);
pub const PHONEBUTTONMODE_FEATURE = @as(u32, 4);
pub const PHONEBUTTONMODE_KEYPAD = @as(u32, 8);
pub const PHONEBUTTONMODE_LOCAL = @as(u32, 16);
pub const PHONEBUTTONMODE_DISPLAY = @as(u32, 32);
pub const PHONEBUTTONSTATE_UP = @as(u32, 1);
pub const PHONEBUTTONSTATE_DOWN = @as(u32, 2);
pub const PHONEBUTTONSTATE_UNKNOWN = @as(u32, 4);
pub const PHONEBUTTONSTATE_UNAVAIL = @as(u32, 8);
pub const PHONEERR_ALLOCATED = @as(u32, 2415919105);
pub const PHONEERR_BADDEVICEID = @as(u32, 2415919106);
pub const PHONEERR_INCOMPATIBLEAPIVERSION = @as(u32, 2415919107);
pub const PHONEERR_INCOMPATIBLEEXTVERSION = @as(u32, 2415919108);
pub const PHONEERR_INIFILECORRUPT = @as(u32, 2415919109);
pub const PHONEERR_INUSE = @as(u32, 2415919110);
pub const PHONEERR_INVALAPPHANDLE = @as(u32, 2415919111);
pub const PHONEERR_INVALAPPNAME = @as(u32, 2415919112);
pub const PHONEERR_INVALBUTTONLAMPID = @as(u32, 2415919113);
pub const PHONEERR_INVALBUTTONMODE = @as(u32, 2415919114);
pub const PHONEERR_INVALBUTTONSTATE = @as(u32, 2415919115);
pub const PHONEERR_INVALDATAID = @as(u32, 2415919116);
pub const PHONEERR_INVALDEVICECLASS = @as(u32, 2415919117);
pub const PHONEERR_INVALEXTVERSION = @as(u32, 2415919118);
pub const PHONEERR_INVALHOOKSWITCHDEV = @as(u32, 2415919119);
pub const PHONEERR_INVALHOOKSWITCHMODE = @as(u32, 2415919120);
pub const PHONEERR_INVALLAMPMODE = @as(u32, 2415919121);
pub const PHONEERR_INVALPARAM = @as(u32, 2415919122);
pub const PHONEERR_INVALPHONEHANDLE = @as(u32, 2415919123);
pub const PHONEERR_INVALPHONESTATE = @as(u32, 2415919124);
pub const PHONEERR_INVALPOINTER = @as(u32, 2415919125);
pub const PHONEERR_INVALPRIVILEGE = @as(u32, 2415919126);
pub const PHONEERR_INVALRINGMODE = @as(u32, 2415919127);
pub const PHONEERR_NODEVICE = @as(u32, 2415919128);
pub const PHONEERR_NODRIVER = @as(u32, 2415919129);
pub const PHONEERR_NOMEM = @as(u32, 2415919130);
pub const PHONEERR_NOTOWNER = @as(u32, 2415919131);
pub const PHONEERR_OPERATIONFAILED = @as(u32, 2415919132);
pub const PHONEERR_OPERATIONUNAVAIL = @as(u32, 2415919133);
pub const PHONEERR_RESOURCEUNAVAIL = @as(u32, 2415919135);
pub const PHONEERR_REQUESTOVERRUN = @as(u32, 2415919136);
pub const PHONEERR_STRUCTURETOOSMALL = @as(u32, 2415919137);
pub const PHONEERR_UNINITIALIZED = @as(u32, 2415919138);
pub const PHONEERR_REINIT = @as(u32, 2415919139);
pub const PHONEERR_DISCONNECTED = @as(u32, 2415919140);
pub const PHONEERR_SERVICE_NOT_RUNNING = @as(u32, 2415919141);
pub const PHONEFEATURE_GETBUTTONINFO = @as(u32, 1);
pub const PHONEFEATURE_GETDATA = @as(u32, 2);
pub const PHONEFEATURE_GETDISPLAY = @as(u32, 4);
pub const PHONEFEATURE_GETGAINHANDSET = @as(u32, 8);
pub const PHONEFEATURE_GETGAINSPEAKER = @as(u32, 16);
pub const PHONEFEATURE_GETGAINHEADSET = @as(u32, 32);
pub const PHONEFEATURE_GETHOOKSWITCHHANDSET = @as(u32, 64);
pub const PHONEFEATURE_GETHOOKSWITCHSPEAKER = @as(u32, 128);
pub const PHONEFEATURE_GETHOOKSWITCHHEADSET = @as(u32, 256);
pub const PHONEFEATURE_GETLAMP = @as(u32, 512);
pub const PHONEFEATURE_GETRING = @as(u32, 1024);
pub const PHONEFEATURE_GETVOLUMEHANDSET = @as(u32, 2048);
pub const PHONEFEATURE_GETVOLUMESPEAKER = @as(u32, 4096);
pub const PHONEFEATURE_GETVOLUMEHEADSET = @as(u32, 8192);
pub const PHONEFEATURE_SETBUTTONINFO = @as(u32, 16384);
pub const PHONEFEATURE_SETDATA = @as(u32, 32768);
pub const PHONEFEATURE_SETDISPLAY = @as(u32, 65536);
pub const PHONEFEATURE_SETGAINHANDSET = @as(u32, 131072);
pub const PHONEFEATURE_SETGAINSPEAKER = @as(u32, 262144);
pub const PHONEFEATURE_SETGAINHEADSET = @as(u32, 524288);
pub const PHONEFEATURE_SETHOOKSWITCHHANDSET = @as(u32, 1048576);
pub const PHONEFEATURE_SETHOOKSWITCHSPEAKER = @as(u32, 2097152);
pub const PHONEFEATURE_SETHOOKSWITCHHEADSET = @as(u32, 4194304);
pub const PHONEFEATURE_SETLAMP = @as(u32, 8388608);
pub const PHONEFEATURE_SETRING = @as(u32, 16777216);
pub const PHONEFEATURE_SETVOLUMEHANDSET = @as(u32, 33554432);
pub const PHONEFEATURE_SETVOLUMESPEAKER = @as(u32, 67108864);
pub const PHONEFEATURE_SETVOLUMEHEADSET = @as(u32, 134217728);
pub const PHONEFEATURE_GENERICPHONE = @as(u32, 268435456);
pub const PHONEHOOKSWITCHDEV_HANDSET = @as(u32, 1);
pub const PHONEHOOKSWITCHDEV_SPEAKER = @as(u32, 2);
pub const PHONEHOOKSWITCHDEV_HEADSET = @as(u32, 4);
pub const PHONEHOOKSWITCHMODE_ONHOOK = @as(u32, 1);
pub const PHONEHOOKSWITCHMODE_MIC = @as(u32, 2);
pub const PHONEHOOKSWITCHMODE_SPEAKER = @as(u32, 4);
pub const PHONEHOOKSWITCHMODE_MICSPEAKER = @as(u32, 8);
pub const PHONEHOOKSWITCHMODE_UNKNOWN = @as(u32, 16);
pub const PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW = @as(u32, 1);
pub const PHONEINITIALIZEEXOPTION_USEEVENT = @as(u32, 2);
pub const PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT = @as(u32, 3);
pub const PHONELAMPMODE_DUMMY = @as(u32, 1);
pub const PHONELAMPMODE_OFF = @as(u32, 2);
pub const PHONELAMPMODE_STEADY = @as(u32, 4);
pub const PHONELAMPMODE_WINK = @as(u32, 8);
pub const PHONELAMPMODE_FLASH = @as(u32, 16);
pub const PHONELAMPMODE_FLUTTER = @as(u32, 32);
pub const PHONELAMPMODE_BROKENFLUTTER = @as(u32, 64);
pub const PHONELAMPMODE_UNKNOWN = @as(u32, 128);
pub const PHONEPRIVILEGE_MONITOR = @as(u32, 1);
pub const PHONEPRIVILEGE_OWNER = @as(u32, 2);
pub const PHONESTATE_OTHER = @as(u32, 1);
pub const PHONESTATE_CONNECTED = @as(u32, 2);
pub const PHONESTATE_DISCONNECTED = @as(u32, 4);
pub const PHONESTATE_OWNER = @as(u32, 8);
pub const PHONESTATE_MONITORS = @as(u32, 16);
pub const PHONESTATE_DISPLAY = @as(u32, 32);
pub const PHONESTATE_LAMP = @as(u32, 64);
pub const PHONESTATE_RINGMODE = @as(u32, 128);
pub const PHONESTATE_RINGVOLUME = @as(u32, 256);
pub const PHONESTATE_HANDSETHOOKSWITCH = @as(u32, 512);
pub const PHONESTATE_HANDSETVOLUME = @as(u32, 1024);
pub const PHONESTATE_HANDSETGAIN = @as(u32, 2048);
pub const PHONESTATE_SPEAKERHOOKSWITCH = @as(u32, 4096);
pub const PHONESTATE_SPEAKERVOLUME = @as(u32, 8192);
pub const PHONESTATE_SPEAKERGAIN = @as(u32, 16384);
pub const PHONESTATE_HEADSETHOOKSWITCH = @as(u32, 32768);
pub const PHONESTATE_HEADSETVOLUME = @as(u32, 65536);
pub const PHONESTATE_HEADSETGAIN = @as(u32, 131072);
pub const PHONESTATE_SUSPEND = @as(u32, 262144);
pub const PHONESTATE_RESUME = @as(u32, 524288);
pub const PHONESTATE_DEVSPECIFIC = @as(u32, 1048576);
pub const PHONESTATE_REINIT = @as(u32, 2097152);
pub const PHONESTATE_CAPSCHANGE = @as(u32, 4194304);
pub const PHONESTATE_REMOVED = @as(u32, 8388608);
pub const PHONESTATUSFLAGS_CONNECTED = @as(u32, 1);
pub const PHONESTATUSFLAGS_SUSPENDED = @as(u32, 2);
pub const STRINGFORMAT_ASCII = @as(u32, 1);
pub const STRINGFORMAT_DBCS = @as(u32, 2);
pub const STRINGFORMAT_UNICODE = @as(u32, 3);
pub const STRINGFORMAT_BINARY = @as(u32, 4);
pub const TAPI_REPLY = @as(u32, 1123);
pub const TAPIERR_CONNECTED = @as(i32, 0);
pub const TAPIERR_DROPPED = @as(i32, -1);
pub const TAPIERR_NOREQUESTRECIPIENT = @as(i32, -2);
pub const TAPIERR_REQUESTQUEUEFULL = @as(i32, -3);
pub const TAPIERR_INVALDESTADDRESS = @as(i32, -4);
pub const TAPIERR_INVALWINDOWHANDLE = @as(i32, -5);
pub const TAPIERR_INVALDEVICECLASS = @as(i32, -6);
pub const TAPIERR_INVALDEVICEID = @as(i32, -7);
pub const TAPIERR_DEVICECLASSUNAVAIL = @as(i32, -8);
pub const TAPIERR_DEVICEIDUNAVAIL = @as(i32, -9);
pub const TAPIERR_DEVICEINUSE = @as(i32, -10);
pub const TAPIERR_DESTBUSY = @as(i32, -11);
pub const TAPIERR_DESTNOANSWER = @as(i32, -12);
pub const TAPIERR_DESTUNAVAIL = @as(i32, -13);
pub const TAPIERR_UNKNOWNWINHANDLE = @as(i32, -14);
pub const TAPIERR_UNKNOWNREQUESTID = @as(i32, -15);
pub const TAPIERR_REQUESTFAILED = @as(i32, -16);
pub const TAPIERR_REQUESTCANCELLED = @as(i32, -17);
pub const TAPIERR_INVALPOINTER = @as(i32, -18);
pub const TAPIERR_NOTADMIN = @as(i32, -19);
pub const TAPIERR_MMCWRITELOCKED = @as(i32, -20);
pub const TAPIERR_PROVIDERALREADYINSTALLED = @as(i32, -21);
pub const TAPIERR_SCP_ALREADY_EXISTS = @as(i32, -22);
pub const TAPIERR_SCP_DOES_NOT_EXIST = @as(i32, -23);
pub const TAPIMAXDESTADDRESSSIZE = @as(i32, 80);
pub const TAPIMAXAPPNAMESIZE = @as(i32, 40);
pub const TAPIMAXCALLEDPARTYSIZE = @as(i32, 40);
pub const TAPIMAXCOMMENTSIZE = @as(i32, 80);
pub const TAPIMAXDEVICECLASSSIZE = @as(i32, 40);
pub const TAPIMAXDEVICEIDSIZE = @as(i32, 40);
pub const INTERFACEMASK = @as(u32, 16711680);
pub const DISPIDMASK = @as(u32, 65535);
pub const IDISPTAPI = @as(u32, 65536);
pub const IDISPTAPICALLCENTER = @as(u32, 131072);
pub const IDISPCALLINFO = @as(u32, 65536);
pub const IDISPBASICCALLCONTROL = @as(u32, 131072);
pub const IDISPLEGACYCALLMEDIACONTROL = @as(u32, 196608);
pub const IDISPAGGREGATEDMSPCALLOBJ = @as(u32, 262144);
pub const IDISPADDRESS = @as(u32, 65536);
pub const IDISPADDRESSCAPABILITIES = @as(u32, 131072);
pub const IDISPMEDIASUPPORT = @as(u32, 196608);
pub const IDISPADDRESSTRANSLATION = @as(u32, 262144);
pub const IDISPLEGACYADDRESSMEDIACONTROL = @as(u32, 327680);
pub const IDISPAGGREGATEDMSPADDRESSOBJ = @as(u32, 393216);
pub const IDISPPHONE = @as(u32, 65536);
pub const IDISPAPC = @as(u32, 131072);
pub const IDISPMULTITRACK = @as(u32, 65536);
pub const IDISPMEDIACONTROL = @as(u32, 131072);
pub const IDISPMEDIARECORD = @as(u32, 196608);
pub const IDISPMEDIAPLAYBACK = @as(u32, 262144);
pub const IDISPFILETRACK = @as(u32, 65536);
pub const TAPIMEDIATYPE_AUDIO = @as(u32, 8);
pub const TAPIMEDIATYPE_VIDEO = @as(u32, 32768);
pub const TAPIMEDIATYPE_DATAMODEM = @as(u32, 16);
pub const TAPIMEDIATYPE_G3FAX = @as(u32, 32);
pub const TAPIMEDIATYPE_MULTITRACK = @as(u32, 65536);
pub const TSPI_MESSAGE_BASE = @as(u32, 500);
pub const LINETSPIOPTION_NONREENTRANT = @as(u32, 1);
pub const TUISPIDLL_OBJECT_LINEID = @as(i32, 1);
pub const TUISPIDLL_OBJECT_PHONEID = @as(i32, 2);
pub const TUISPIDLL_OBJECT_PROVIDERID = @as(i32, 3);
pub const TUISPIDLL_OBJECT_DIALOGINSTANCE = @as(i32, 4);
pub const PRIVATEOBJECT_NONE = @as(u32, 1);
pub const PRIVATEOBJECT_CALLID = @as(u32, 2);
pub const PRIVATEOBJECT_LINE = @as(u32, 3);
pub const PRIVATEOBJECT_CALL = @as(u32, 4);
pub const PRIVATEOBJECT_PHONE = @as(u32, 5);
pub const PRIVATEOBJECT_ADDRESS = @as(u32, 6);
pub const LINEQOSREQUESTTYPE_SERVICELEVEL = @as(u32, 1);
pub const LINEQOSSERVICELEVEL_NEEDED = @as(u32, 1);
pub const LINEQOSSERVICELEVEL_IFAVAILABLE = @as(u32, 2);
pub const LINEQOSSERVICELEVEL_BESTEFFORT = @as(u32, 3);
pub const LINEEQOSINFO_NOQOS = @as(u32, 1);
pub const LINEEQOSINFO_ADMISSIONFAILURE = @as(u32, 2);
pub const LINEEQOSINFO_POLICYFAILURE = @as(u32, 3);
pub const LINEEQOSINFO_GENERICERROR = @as(u32, 4);
pub const TSPI_PROC_BASE = @as(u32, 500);
pub const TSPI_LINEACCEPT = @as(u32, 500);
pub const TSPI_LINEADDTOCONFERENCE = @as(u32, 501);
pub const TSPI_LINEANSWER = @as(u32, 502);
pub const TSPI_LINEBLINDTRANSFER = @as(u32, 503);
pub const TSPI_LINECLOSE = @as(u32, 504);
pub const TSPI_LINECLOSECALL = @as(u32, 505);
pub const TSPI_LINECOMPLETECALL = @as(u32, 506);
pub const TSPI_LINECOMPLETETRANSFER = @as(u32, 507);
pub const TSPI_LINECONDITIONALMEDIADETECTION = @as(u32, 508);
pub const TSPI_LINECONFIGDIALOG = @as(u32, 509);
pub const TSPI_LINEDEVSPECIFIC = @as(u32, 510);
pub const TSPI_LINEDEVSPECIFICFEATURE = @as(u32, 511);
pub const TSPI_LINEDIAL = @as(u32, 512);
pub const TSPI_LINEDROP = @as(u32, 513);
pub const TSPI_LINEFORWARD = @as(u32, 514);
pub const TSPI_LINEGATHERDIGITS = @as(u32, 515);
pub const TSPI_LINEGENERATEDIGITS = @as(u32, 516);
pub const TSPI_LINEGENERATETONE = @as(u32, 517);
pub const TSPI_LINEGETADDRESSCAPS = @as(u32, 518);
pub const TSPI_LINEGETADDRESSID = @as(u32, 519);
pub const TSPI_LINEGETADDRESSSTATUS = @as(u32, 520);
pub const TSPI_LINEGETCALLADDRESSID = @as(u32, 521);
pub const TSPI_LINEGETCALLINFO = @as(u32, 522);
pub const TSPI_LINEGETCALLSTATUS = @as(u32, 523);
pub const TSPI_LINEGETDEVCAPS = @as(u32, 524);
pub const TSPI_LINEGETDEVCONFIG = @as(u32, 525);
pub const TSPI_LINEGETEXTENSIONID = @as(u32, 526);
pub const TSPI_LINEGETICON = @as(u32, 527);
pub const TSPI_LINEGETID = @as(u32, 528);
pub const TSPI_LINEGETLINEDEVSTATUS = @as(u32, 529);
pub const TSPI_LINEGETNUMADDRESSIDS = @as(u32, 530);
pub const TSPI_LINEHOLD = @as(u32, 531);
pub const TSPI_LINEMAKECALL = @as(u32, 532);
pub const TSPI_LINEMONITORDIGITS = @as(u32, 533);
pub const TSPI_LINEMONITORMEDIA = @as(u32, 534);
pub const TSPI_LINEMONITORTONES = @as(u32, 535);
pub const TSPI_LINENEGOTIATEEXTVERSION = @as(u32, 536);
pub const TSPI_LINENEGOTIATETSPIVERSION = @as(u32, 537);
pub const TSPI_LINEOPEN = @as(u32, 538);
pub const TSPI_LINEPARK = @as(u32, 539);
pub const TSPI_LINEPICKUP = @as(u32, 540);
pub const TSPI_LINEPREPAREADDTOCONFERENCE = @as(u32, 541);
pub const TSPI_LINEREDIRECT = @as(u32, 542);
pub const TSPI_LINEREMOVEFROMCONFERENCE = @as(u32, 543);
pub const TSPI_LINESECURECALL = @as(u32, 544);
pub const TSPI_LINESELECTEXTVERSION = @as(u32, 545);
pub const TSPI_LINESENDUSERUSERINFO = @as(u32, 546);
pub const TSPI_LINESETAPPSPECIFIC = @as(u32, 547);
pub const TSPI_LINESETCALLPARAMS = @as(u32, 548);
pub const TSPI_LINESETDEFAULTMEDIADETECTION = @as(u32, 549);
pub const TSPI_LINESETDEVCONFIG = @as(u32, 550);
pub const TSPI_LINESETMEDIACONTROL = @as(u32, 551);
pub const TSPI_LINESETMEDIAMODE = @as(u32, 552);
pub const TSPI_LINESETSTATUSMESSAGES = @as(u32, 553);
pub const TSPI_LINESETTERMINAL = @as(u32, 554);
pub const TSPI_LINESETUPCONFERENCE = @as(u32, 555);
pub const TSPI_LINESETUPTRANSFER = @as(u32, 556);
pub const TSPI_LINESWAPHOLD = @as(u32, 557);
pub const TSPI_LINEUNCOMPLETECALL = @as(u32, 558);
pub const TSPI_LINEUNHOLD = @as(u32, 559);
pub const TSPI_LINEUNPARK = @as(u32, 560);
pub const TSPI_PHONECLOSE = @as(u32, 561);
pub const TSPI_PHONECONFIGDIALOG = @as(u32, 562);
pub const TSPI_PHONEDEVSPECIFIC = @as(u32, 563);
pub const TSPI_PHONEGETBUTTONINFO = @as(u32, 564);
pub const TSPI_PHONEGETDATA = @as(u32, 565);
pub const TSPI_PHONEGETDEVCAPS = @as(u32, 566);
pub const TSPI_PHONEGETDISPLAY = @as(u32, 567);
pub const TSPI_PHONEGETEXTENSIONID = @as(u32, 568);
pub const TSPI_PHONEGETGAIN = @as(u32, 569);
pub const TSPI_PHONEGETHOOKSWITCH = @as(u32, 570);
pub const TSPI_PHONEGETICON = @as(u32, 571);
pub const TSPI_PHONEGETID = @as(u32, 572);
pub const TSPI_PHONEGETLAMP = @as(u32, 573);
pub const TSPI_PHONEGETRING = @as(u32, 574);
pub const TSPI_PHONEGETSTATUS = @as(u32, 575);
pub const TSPI_PHONEGETVOLUME = @as(u32, 576);
pub const TSPI_PHONENEGOTIATEEXTVERSION = @as(u32, 577);
pub const TSPI_PHONENEGOTIATETSPIVERSION = @as(u32, 578);
pub const TSPI_PHONEOPEN = @as(u32, 579);
pub const TSPI_PHONESELECTEXTVERSION = @as(u32, 580);
pub const TSPI_PHONESETBUTTONINFO = @as(u32, 581);
pub const TSPI_PHONESETDATA = @as(u32, 582);
pub const TSPI_PHONESETDISPLAY = @as(u32, 583);
pub const TSPI_PHONESETGAIN = @as(u32, 584);
pub const TSPI_PHONESETHOOKSWITCH = @as(u32, 585);
pub const TSPI_PHONESETLAMP = @as(u32, 586);
pub const TSPI_PHONESETRING = @as(u32, 587);
pub const TSPI_PHONESETSTATUSMESSAGES = @as(u32, 588);
pub const TSPI_PHONESETVOLUME = @as(u32, 589);
pub const TSPI_PROVIDERCONFIG = @as(u32, 590);
pub const TSPI_PROVIDERINIT = @as(u32, 591);
pub const TSPI_PROVIDERINSTALL = @as(u32, 592);
pub const TSPI_PROVIDERREMOVE = @as(u32, 593);
pub const TSPI_PROVIDERSHUTDOWN = @as(u32, 594);
pub const TSPI_PROVIDERENUMDEVICES = @as(u32, 595);
pub const TSPI_LINEDROPONCLOSE = @as(u32, 596);
pub const TSPI_LINEDROPNOOWNER = @as(u32, 597);
pub const TSPI_PROVIDERCREATELINEDEVICE = @as(u32, 598);
pub const TSPI_PROVIDERCREATEPHONEDEVICE = @as(u32, 599);
pub const TSPI_LINESETCURRENTLOCATION = @as(u32, 600);
pub const TSPI_LINECONFIGDIALOGEDIT = @as(u32, 601);
pub const TSPI_LINERELEASEUSERUSERINFO = @as(u32, 602);
pub const TSPI_LINEGETCALLID = @as(u32, 603);
pub const TSPI_LINEGETCALLHUBTRACKING = @as(u32, 604);
pub const TSPI_LINESETCALLHUBTRACKING = @as(u32, 605);
pub const TSPI_LINERECEIVEMSPDATA = @as(u32, 606);
pub const TSPI_LINEMSPIDENTIFY = @as(u32, 607);
pub const TSPI_LINECREATEMSPINSTANCE = @as(u32, 608);
pub const TSPI_LINECLOSEMSPINSTANCE = @as(u32, 609);
pub const IDISPDIROBJECT = @as(u32, 65536);
pub const IDISPDIROBJCONFERENCE = @as(u32, 131072);
pub const IDISPDIROBJUSER = @as(u32, 196608);
pub const IDISPDIRECTORY = @as(u32, 65536);
pub const IDISPILSCONFIG = @as(u32, 131072);
pub const RENDBIND_AUTHENTICATE = @as(u32, 1);
pub const RENDBIND_DEFAULTDOMAINNAME = @as(u32, 2);
pub const RENDBIND_DEFAULTUSERNAME = @as(u32, 4);
pub const RENDBIND_DEFAULTPASSWORD = @as(u32, 8);
pub const RENDBIND_DEFAULTCREDENTIALS = @as(u32, 14);
pub const STRM_INITIAL = @as(u32, 0);
pub const STRM_TERMINALSELECTED = @as(u32, 1);
pub const STRM_CONFIGURED = @as(u32, 2);
pub const STRM_RUNNING = @as(u32, 4);
pub const STRM_PAUSED = @as(u32, 8);
pub const STRM_STOPPED = @as(u32, 16);
pub const TAPI_E_NOTENOUGHMEMORY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221503));
pub const TAPI_E_NOITEMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221502));
pub const TAPI_E_NOTSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221501));
pub const TAPI_E_INVALIDMEDIATYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221500));
pub const TAPI_E_OPERATIONFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221499));
pub const TAPI_E_ALLOCATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221498));
pub const TAPI_E_CALLUNAVAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221497));
pub const TAPI_E_COMPLETIONOVERRUN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221496));
pub const TAPI_E_CONFERENCEFULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221495));
pub const TAPI_E_DIALMODIFIERNOTSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221494));
pub const TAPI_E_INUSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221493));
pub const TAPI_E_INVALADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221492));
pub const TAPI_E_INVALADDRESSSTATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221491));
pub const TAPI_E_INVALCALLPARAMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221490));
pub const TAPI_E_INVALCALLPRIVILEGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221489));
pub const TAPI_E_INVALCALLSTATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221488));
pub const TAPI_E_INVALCARD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221487));
pub const TAPI_E_INVALCOMPLETIONID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221486));
pub const TAPI_E_INVALCOUNTRYCODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221485));
pub const TAPI_E_INVALDEVICECLASS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221484));
pub const TAPI_E_INVALDIALPARAMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221483));
pub const TAPI_E_INVALDIGITS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221482));
pub const TAPI_E_INVALGROUPID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221481));
pub const TAPI_E_INVALLOCATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221480));
pub const TAPI_E_INVALMESSAGEID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221479));
pub const TAPI_E_INVALPARKID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221478));
pub const TAPI_E_INVALRATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221477));
pub const TAPI_E_INVALTIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221476));
pub const TAPI_E_INVALTONE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221475));
pub const TAPI_E_INVALLIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221474));
pub const TAPI_E_INVALMODE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221473));
pub const TAPI_E_NOCONFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221472));
pub const TAPI_E_NODEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221471));
pub const TAPI_E_NOREQUEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221470));
pub const TAPI_E_NOTOWNER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221469));
pub const TAPI_E_NOTREGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221468));
pub const TAPI_E_REQUESTOVERRUN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221467));
pub const TAPI_E_TARGETNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221466));
pub const TAPI_E_TARGETSELF = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221465));
pub const TAPI_E_USERUSERINFOTOOBIG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221464));
pub const TAPI_E_REINIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221463));
pub const TAPI_E_ADDRESSBLOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221462));
pub const TAPI_E_BILLINGREJECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221461));
pub const TAPI_E_INVALFEATURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221460));
pub const TAPI_E_INVALBUTTONLAMPID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221459));
pub const TAPI_E_INVALBUTTONSTATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221458));
pub const TAPI_E_INVALDATAID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221457));
pub const TAPI_E_INVALHOOKSWITCHDEV = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221456));
pub const TAPI_E_DROPPED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221455));
pub const TAPI_E_NOREQUESTRECIPIENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221454));
pub const TAPI_E_REQUESTQUEUEFULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221453));
pub const TAPI_E_DESTBUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221452));
pub const TAPI_E_DESTNOANSWER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221451));
pub const TAPI_E_DESTUNAVAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221450));
pub const TAPI_E_REQUESTFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221449));
pub const TAPI_E_REQUESTCANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221448));
pub const TAPI_E_INVALPRIVILEGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221447));
pub const TAPI_E_INVALIDDIRECTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221446));
pub const TAPI_E_INVALIDTERMINAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221445));
pub const TAPI_E_INVALIDTERMINALCLASS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221444));
pub const TAPI_E_NODRIVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221443));
pub const TAPI_E_MAXSTREAMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221442));
pub const TAPI_E_NOTERMINALSELECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221441));
pub const TAPI_E_TERMINALINUSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221440));
pub const TAPI_E_NOTSTOPPED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221439));
pub const TAPI_E_MAXTERMINALS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221438));
pub const TAPI_E_INVALIDSTREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221437));
pub const TAPI_E_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221436));
pub const TAPI_E_CALLCENTER_GROUP_REMOVED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221435));
pub const TAPI_E_CALLCENTER_QUEUE_REMOVED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221434));
pub const TAPI_E_CALLCENTER_NO_AGENT_ID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221433));
pub const TAPI_E_CALLCENTER_INVALAGENTID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221432));
pub const TAPI_E_CALLCENTER_INVALAGENTGROUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221431));
pub const TAPI_E_CALLCENTER_INVALPASSWORD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221430));
pub const TAPI_E_CALLCENTER_INVALAGENTSTATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221429));
pub const TAPI_E_CALLCENTER_INVALAGENTACTIVITY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221428));
pub const TAPI_E_REGISTRY_SETTING_CORRUPT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221427));
pub const TAPI_E_TERMINAL_PEER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221426));
pub const TAPI_E_PEER_NOT_SET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221425));
pub const TAPI_E_NOEVENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221424));
pub const TAPI_E_INVALADDRESSTYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221423));
pub const TAPI_E_RESOURCEUNAVAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221422));
pub const TAPI_E_PHONENOTOPEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221421));
pub const TAPI_E_CALLNOTSELECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221420));
pub const TAPI_E_WRONGEVENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221419));
pub const TAPI_E_NOFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221418));
pub const TAPI_E_INVALIDSTREAMSTATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221417));
pub const TAPI_E_WRONG_STATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221416));
pub const TAPI_E_NOT_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221415));
pub const TAPI_E_SERVICE_NOT_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221414));
pub const OPENTNEFSTREAM = "OpenTnefStream";
pub const OPENTNEFSTREAMEX = "OpenTnefStreamEx";
pub const GETTNEFSTREAMCODEPAGE = "GetTnefStreamCodePage";
pub const cbDisplayName = @as(u32, 41);
pub const cbEmailName = @as(u32, 11);
pub const cbSeverName = @as(u32, 12);
pub const cbTYPE = @as(u32, 16);
pub const cbMaxIdData = @as(u32, 200);
pub const prioLow = @as(u32, 3);
pub const prioNorm = @as(u32, 2);
pub const prioHigh = @as(u32, 1);
pub const atypNull = @as(i32, 0);
pub const atypFile = @as(i32, 1);
pub const atypOle = @as(i32, 2);
pub const atypPicture = @as(i32, 3);
pub const atypMax = @as(i32, 4);

//--------------------------------------------------------------------------------
// Section: Types (269)
//--------------------------------------------------------------------------------
pub const LINECALLBACK = *const fn (
    h_device: u32,
    dw_message: u32,
    dw_instance: usize,
    dw_param1: usize,
    dw_param2: usize,
    dw_param3: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PHONECALLBACK = *const fn (
    h_device: u32,
    dw_message: u32,
    dw_instance: usize,
    dw_param1: usize,
    dw_param2: usize,
    dw_param3: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LINEADDRESSCAPS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwLineDeviceID: u32 align(1),
    dwAddressSize: u32 align(1),
    dwAddressOffset: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
    dwAddressSharing: u32 align(1),
    dwAddressStates: u32 align(1),
    dwCallInfoStates: u32 align(1),
    dwCallerIDFlags: u32 align(1),
    dwCalledIDFlags: u32 align(1),
    dwConnectedIDFlags: u32 align(1),
    dwRedirectionIDFlags: u32 align(1),
    dwRedirectingIDFlags: u32 align(1),
    dwCallStates: u32 align(1),
    dwDialToneModes: u32 align(1),
    dwBusyModes: u32 align(1),
    dwSpecialInfo: u32 align(1),
    dwDisconnectModes: u32 align(1),
    dwMaxNumActiveCalls: u32 align(1),
    dwMaxNumOnHoldCalls: u32 align(1),
    dwMaxNumOnHoldPendingCalls: u32 align(1),
    dwMaxNumConference: u32 align(1),
    dwMaxNumTransConf: u32 align(1),
    dwAddrCapFlags: u32 align(1),
    dwCallFeatures: u32 align(1),
    dwRemoveFromConfCaps: u32 align(1),
    dwRemoveFromConfState: u32 align(1),
    dwTransferModes: u32 align(1),
    dwParkModes: u32 align(1),
    dwForwardModes: u32 align(1),
    dwMaxForwardEntries: u32 align(1),
    dwMaxSpecificEntries: u32 align(1),
    dwMinFwdNumRings: u32 align(1),
    dwMaxFwdNumRings: u32 align(1),
    dwMaxCallCompletions: u32 align(1),
    dwCallCompletionConds: u32 align(1),
    dwCallCompletionModes: u32 align(1),
    dwNumCompletionMessages: u32 align(1),
    dwCompletionMsgTextEntrySize: u32 align(1),
    dwCompletionMsgTextSize: u32 align(1),
    dwCompletionMsgTextOffset: u32 align(1),
    dwAddressFeatures: u32 align(1),
    dwPredictiveAutoTransferStates: u32 align(1),
    dwNumCallTreatments: u32 align(1),
    dwCallTreatmentListSize: u32 align(1),
    dwCallTreatmentListOffset: u32 align(1),
    dwDeviceClassesSize: u32 align(1),
    dwDeviceClassesOffset: u32 align(1),
    dwMaxCallDataSize: u32 align(1),
    dwCallFeatures2: u32 align(1),
    dwMaxNoAnswerTimeout: u32 align(1),
    dwConnectedModes: u32 align(1),
    dwOfferingModes: u32 align(1),
    dwAvailableMediaModes: u32 align(1),
};

pub const LINEADDRESSSTATUS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumInUse: u32 align(1),
    dwNumActiveCalls: u32 align(1),
    dwNumOnHoldCalls: u32 align(1),
    dwNumOnHoldPendCalls: u32 align(1),
    dwAddressFeatures: u32 align(1),
    dwNumRingsNoAnswer: u32 align(1),
    dwForwardNumEntries: u32 align(1),
    dwForwardSize: u32 align(1),
    dwForwardOffset: u32 align(1),
    dwTerminalModesSize: u32 align(1),
    dwTerminalModesOffset: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
};

pub const LINEAGENTACTIVITYENTRY = extern struct {
    dwID: u32 align(1),
    dwNameSize: u32 align(1),
    dwNameOffset: u32 align(1),
};

pub const LINEAGENTACTIVITYLIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumEntries: u32 align(1),
    dwListSize: u32 align(1),
    dwListOffset: u32 align(1),
};

pub const LINEAGENTCAPS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwAgentHandlerInfoSize: u32 align(1),
    dwAgentHandlerInfoOffset: u32 align(1),
    dwCapsVersion: u32 align(1),
    dwFeatures: u32 align(1),
    dwStates: u32 align(1),
    dwNextStates: u32 align(1),
    dwMaxNumGroupEntries: u32 align(1),
    dwAgentStatusMessages: u32 align(1),
    dwNumAgentExtensionIDs: u32 align(1),
    dwAgentExtensionIDListSize: u32 align(1),
    dwAgentExtensionIDListOffset: u32 align(1),
    ProxyGUID: Guid align(1),
};

pub const LINEAGENTGROUPENTRY = extern struct {
    GroupID: extern struct {
        dwGroupID1: u32 align(1),
        dwGroupID2: u32 align(1),
        dwGroupID3: u32 align(1),
        dwGroupID4: u32 align(1),
    } align(1),
    dwNameSize: u32 align(1),
    dwNameOffset: u32 align(1),
};

pub const LINEAGENTGROUPLIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumEntries: u32 align(1),
    dwListSize: u32 align(1),
    dwListOffset: u32 align(1),
};

pub const LINEAGENTSTATUS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumEntries: u32 align(1),
    dwGroupListSize: u32 align(1),
    dwGroupListOffset: u32 align(1),
    dwState: u32 align(1),
    dwNextState: u32 align(1),
    dwActivityID: u32 align(1),
    dwActivitySize: u32 align(1),
    dwActivityOffset: u32 align(1),
    dwAgentFeatures: u32 align(1),
    dwValidStates: u32 align(1),
    dwValidNextStates: u32 align(1),
};

pub const LINEAPPINFO = extern struct {
    dwMachineNameSize: u32 align(1),
    dwMachineNameOffset: u32 align(1),
    dwUserNameSize: u32 align(1),
    dwUserNameOffset: u32 align(1),
    dwModuleFilenameSize: u32 align(1),
    dwModuleFilenameOffset: u32 align(1),
    dwFriendlyNameSize: u32 align(1),
    dwFriendlyNameOffset: u32 align(1),
    dwMediaModes: u32 align(1),
    dwAddressID: u32 align(1),
};

pub const LINEAGENTENTRY = extern struct {
    hAgent: u32 align(1),
    dwNameSize: u32 align(1),
    dwNameOffset: u32 align(1),
    dwIDSize: u32 align(1),
    dwIDOffset: u32 align(1),
    dwPINSize: u32 align(1),
    dwPINOffset: u32 align(1),
};

pub const LINEAGENTLIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumEntries: u32 align(1),
    dwListSize: u32 align(1),
    dwListOffset: u32 align(1),
};

pub const LINEAGENTINFO = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwAgentState: u32 align(1),
    dwNextAgentState: u32 align(1),
    dwMeasurementPeriod: u32 align(1),
    cyOverallCallRate: CY align(1),
    dwNumberOfACDCalls: u32 align(1),
    dwNumberOfIncomingCalls: u32 align(1),
    dwNumberOfOutgoingCalls: u32 align(1),
    dwTotalACDTalkTime: u32 align(1),
    dwTotalACDCallTime: u32 align(1),
    dwTotalACDWrapUpTime: u32 align(1),
};

pub const LINEAGENTSESSIONENTRY = extern struct {
    hAgentSession: u32 align(1),
    hAgent: u32 align(1),
    GroupID: Guid align(1),
    dwWorkingAddressID: u32 align(1),
};

pub const LINEAGENTSESSIONLIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumEntries: u32 align(1),
    dwListSize: u32 align(1),
    dwListOffset: u32 align(1),
};

pub const LINEAGENTSESSIONINFO = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwAgentSessionState: u32 align(1),
    dwNextAgentSessionState: u32 align(1),
    dateSessionStartTime: f64 align(1),
    dwSessionDuration: u32 align(1),
    dwNumberOfCalls: u32 align(1),
    dwTotalTalkTime: u32 align(1),
    dwAverageTalkTime: u32 align(1),
    dwTotalCallTime: u32 align(1),
    dwAverageCallTime: u32 align(1),
    dwTotalWrapUpTime: u32 align(1),
    dwAverageWrapUpTime: u32 align(1),
    cyACDCallRate: CY align(1),
    dwLongestTimeToAnswer: u32 align(1),
    dwAverageTimeToAnswer: u32 align(1),
};

pub const LINEQUEUEENTRY = extern struct {
    dwQueueID: u32 align(1),
    dwNameSize: u32 align(1),
    dwNameOffset: u32 align(1),
};

pub const LINEQUEUELIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumEntries: u32 align(1),
    dwListSize: u32 align(1),
    dwListOffset: u32 align(1),
};

pub const LINEQUEUEINFO = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwMeasurementPeriod: u32 align(1),
    dwTotalCallsQueued: u32 align(1),
    dwCurrentCallsQueued: u32 align(1),
    dwTotalCallsAbandoned: u32 align(1),
    dwTotalCallsFlowedIn: u32 align(1),
    dwTotalCallsFlowedOut: u32 align(1),
    dwLongestEverWaitTime: u32 align(1),
    dwCurrentLongestWaitTime: u32 align(1),
    dwAverageWaitTime: u32 align(1),
    dwFinalDisposition: u32 align(1),
};

pub const LINEPROXYREQUESTLIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumEntries: u32 align(1),
    dwListSize: u32 align(1),
    dwListOffset: u32 align(1),
};

pub const LINEDIALPARAMS = extern struct {
    dwDialPause: u32 align(1),
    dwDialSpeed: u32 align(1),
    dwDigitDuration: u32 align(1),
    dwWaitForDialtone: u32 align(1),
};

pub const LINECALLINFO = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    hLine: u32 align(1),
    dwLineDeviceID: u32 align(1),
    dwAddressID: u32 align(1),
    dwBearerMode: u32 align(1),
    dwRate: u32 align(1),
    dwMediaMode: u32 align(1),
    dwAppSpecific: u32 align(1),
    dwCallID: u32 align(1),
    dwRelatedCallID: u32 align(1),
    dwCallParamFlags: u32 align(1),
    dwCallStates: u32 align(1),
    dwMonitorDigitModes: u32 align(1),
    dwMonitorMediaModes: u32 align(1),
    DialParams: LINEDIALPARAMS align(1),
    dwOrigin: u32 align(1),
    dwReason: u32 align(1),
    dwCompletionID: u32 align(1),
    dwNumOwners: u32 align(1),
    dwNumMonitors: u32 align(1),
    dwCountryCode: u32 align(1),
    dwTrunk: u32 align(1),
    dwCallerIDFlags: u32 align(1),
    dwCallerIDSize: u32 align(1),
    dwCallerIDOffset: u32 align(1),
    dwCallerIDNameSize: u32 align(1),
    dwCallerIDNameOffset: u32 align(1),
    dwCalledIDFlags: u32 align(1),
    dwCalledIDSize: u32 align(1),
    dwCalledIDOffset: u32 align(1),
    dwCalledIDNameSize: u32 align(1),
    dwCalledIDNameOffset: u32 align(1),
    dwConnectedIDFlags: u32 align(1),
    dwConnectedIDSize: u32 align(1),
    dwConnectedIDOffset: u32 align(1),
    dwConnectedIDNameSize: u32 align(1),
    dwConnectedIDNameOffset: u32 align(1),
    dwRedirectionIDFlags: u32 align(1),
    dwRedirectionIDSize: u32 align(1),
    dwRedirectionIDOffset: u32 align(1),
    dwRedirectionIDNameSize: u32 align(1),
    dwRedirectionIDNameOffset: u32 align(1),
    dwRedirectingIDFlags: u32 align(1),
    dwRedirectingIDSize: u32 align(1),
    dwRedirectingIDOffset: u32 align(1),
    dwRedirectingIDNameSize: u32 align(1),
    dwRedirectingIDNameOffset: u32 align(1),
    dwAppNameSize: u32 align(1),
    dwAppNameOffset: u32 align(1),
    dwDisplayableAddressSize: u32 align(1),
    dwDisplayableAddressOffset: u32 align(1),
    dwCalledPartySize: u32 align(1),
    dwCalledPartyOffset: u32 align(1),
    dwCommentSize: u32 align(1),
    dwCommentOffset: u32 align(1),
    dwDisplaySize: u32 align(1),
    dwDisplayOffset: u32 align(1),
    dwUserUserInfoSize: u32 align(1),
    dwUserUserInfoOffset: u32 align(1),
    dwHighLevelCompSize: u32 align(1),
    dwHighLevelCompOffset: u32 align(1),
    dwLowLevelCompSize: u32 align(1),
    dwLowLevelCompOffset: u32 align(1),
    dwChargingInfoSize: u32 align(1),
    dwChargingInfoOffset: u32 align(1),
    dwTerminalModesSize: u32 align(1),
    dwTerminalModesOffset: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
    dwCallTreatment: u32 align(1),
    dwCallDataSize: u32 align(1),
    dwCallDataOffset: u32 align(1),
    dwSendingFlowspecSize: u32 align(1),
    dwSendingFlowspecOffset: u32 align(1),
    dwReceivingFlowspecSize: u32 align(1),
    dwReceivingFlowspecOffset: u32 align(1),
};

pub const LINECALLLIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwCallsNumEntries: u32 align(1),
    dwCallsSize: u32 align(1),
    dwCallsOffset: u32 align(1),
};

pub const LINECALLPARAMS = extern struct {
    dwTotalSize: u32 align(1),
    dwBearerMode: u32 align(1),
    dwMinRate: u32 align(1),
    dwMaxRate: u32 align(1),
    dwMediaMode: u32 align(1),
    dwCallParamFlags: u32 align(1),
    dwAddressMode: u32 align(1),
    dwAddressID: u32 align(1),
    DialParams: LINEDIALPARAMS align(1),
    dwOrigAddressSize: u32 align(1),
    dwOrigAddressOffset: u32 align(1),
    dwDisplayableAddressSize: u32 align(1),
    dwDisplayableAddressOffset: u32 align(1),
    dwCalledPartySize: u32 align(1),
    dwCalledPartyOffset: u32 align(1),
    dwCommentSize: u32 align(1),
    dwCommentOffset: u32 align(1),
    dwUserUserInfoSize: u32 align(1),
    dwUserUserInfoOffset: u32 align(1),
    dwHighLevelCompSize: u32 align(1),
    dwHighLevelCompOffset: u32 align(1),
    dwLowLevelCompSize: u32 align(1),
    dwLowLevelCompOffset: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
    dwPredictiveAutoTransferStates: u32 align(1),
    dwTargetAddressSize: u32 align(1),
    dwTargetAddressOffset: u32 align(1),
    dwSendingFlowspecSize: u32 align(1),
    dwSendingFlowspecOffset: u32 align(1),
    dwReceivingFlowspecSize: u32 align(1),
    dwReceivingFlowspecOffset: u32 align(1),
    dwDeviceClassSize: u32 align(1),
    dwDeviceClassOffset: u32 align(1),
    dwDeviceConfigSize: u32 align(1),
    dwDeviceConfigOffset: u32 align(1),
    dwCallDataSize: u32 align(1),
    dwCallDataOffset: u32 align(1),
    dwNoAnswerTimeout: u32 align(1),
    dwCallingPartyIDSize: u32 align(1),
    dwCallingPartyIDOffset: u32 align(1),
};

pub const LINECALLSTATUS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwCallState: u32 align(1),
    dwCallStateMode: u32 align(1),
    dwCallPrivilege: u32 align(1),
    dwCallFeatures: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
    dwCallFeatures2: u32 align(1),
    tStateEntryTime: SYSTEMTIME align(1),
};

pub const LINECALLTREATMENTENTRY = extern struct {
    dwCallTreatmentID: u32 align(1),
    dwCallTreatmentNameSize: u32 align(1),
    dwCallTreatmentNameOffset: u32 align(1),
};

pub const LINECARDENTRY = extern struct {
    dwPermanentCardID: u32 align(1),
    dwCardNameSize: u32 align(1),
    dwCardNameOffset: u32 align(1),
    dwCardNumberDigits: u32 align(1),
    dwSameAreaRuleSize: u32 align(1),
    dwSameAreaRuleOffset: u32 align(1),
    dwLongDistanceRuleSize: u32 align(1),
    dwLongDistanceRuleOffset: u32 align(1),
    dwInternationalRuleSize: u32 align(1),
    dwInternationalRuleOffset: u32 align(1),
    dwOptions: u32 align(1),
};

pub const LINECOUNTRYENTRY = extern struct {
    dwCountryID: u32 align(1),
    dwCountryCode: u32 align(1),
    dwNextCountryID: u32 align(1),
    dwCountryNameSize: u32 align(1),
    dwCountryNameOffset: u32 align(1),
    dwSameAreaRuleSize: u32 align(1),
    dwSameAreaRuleOffset: u32 align(1),
    dwLongDistanceRuleSize: u32 align(1),
    dwLongDistanceRuleOffset: u32 align(1),
    dwInternationalRuleSize: u32 align(1),
    dwInternationalRuleOffset: u32 align(1),
};

pub const LINECOUNTRYLIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumCountries: u32 align(1),
    dwCountryListSize: u32 align(1),
    dwCountryListOffset: u32 align(1),
};

pub const LINEDEVCAPS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwProviderInfoSize: u32 align(1),
    dwProviderInfoOffset: u32 align(1),
    dwSwitchInfoSize: u32 align(1),
    dwSwitchInfoOffset: u32 align(1),
    dwPermanentLineID: u32 align(1),
    dwLineNameSize: u32 align(1),
    dwLineNameOffset: u32 align(1),
    dwStringFormat: u32 align(1),
    dwAddressModes: u32 align(1),
    dwNumAddresses: u32 align(1),
    dwBearerModes: u32 align(1),
    dwMaxRate: u32 align(1),
    dwMediaModes: u32 align(1),
    dwGenerateToneModes: u32 align(1),
    dwGenerateToneMaxNumFreq: u32 align(1),
    dwGenerateDigitModes: u32 align(1),
    dwMonitorToneMaxNumFreq: u32 align(1),
    dwMonitorToneMaxNumEntries: u32 align(1),
    dwMonitorDigitModes: u32 align(1),
    dwGatherDigitsMinTimeout: u32 align(1),
    dwGatherDigitsMaxTimeout: u32 align(1),
    dwMedCtlDigitMaxListSize: u32 align(1),
    dwMedCtlMediaMaxListSize: u32 align(1),
    dwMedCtlToneMaxListSize: u32 align(1),
    dwMedCtlCallStateMaxListSize: u32 align(1),
    dwDevCapFlags: u32 align(1),
    dwMaxNumActiveCalls: u32 align(1),
    dwAnswerMode: u32 align(1),
    dwRingModes: u32 align(1),
    dwLineStates: u32 align(1),
    dwUUIAcceptSize: u32 align(1),
    dwUUIAnswerSize: u32 align(1),
    dwUUIMakeCallSize: u32 align(1),
    dwUUIDropSize: u32 align(1),
    dwUUISendUserUserInfoSize: u32 align(1),
    dwUUICallInfoSize: u32 align(1),
    MinDialParams: LINEDIALPARAMS align(1),
    MaxDialParams: LINEDIALPARAMS align(1),
    DefaultDialParams: LINEDIALPARAMS align(1),
    dwNumTerminals: u32 align(1),
    dwTerminalCapsSize: u32 align(1),
    dwTerminalCapsOffset: u32 align(1),
    dwTerminalTextEntrySize: u32 align(1),
    dwTerminalTextSize: u32 align(1),
    dwTerminalTextOffset: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
    dwLineFeatures: u32 align(1),
    dwSettableDevStatus: u32 align(1),
    dwDeviceClassesSize: u32 align(1),
    dwDeviceClassesOffset: u32 align(1),
    PermanentLineGuid: Guid align(1),
};

pub const LINEDEVSTATUS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumOpens: u32 align(1),
    dwOpenMediaModes: u32 align(1),
    dwNumActiveCalls: u32 align(1),
    dwNumOnHoldCalls: u32 align(1),
    dwNumOnHoldPendCalls: u32 align(1),
    dwLineFeatures: u32 align(1),
    dwNumCallCompletions: u32 align(1),
    dwRingMode: u32 align(1),
    dwSignalLevel: u32 align(1),
    dwBatteryLevel: u32 align(1),
    dwRoamMode: u32 align(1),
    dwDevStatusFlags: u32 align(1),
    dwTerminalModesSize: u32 align(1),
    dwTerminalModesOffset: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
    dwAvailableMediaModes: u32 align(1),
    dwAppInfoSize: u32 align(1),
    dwAppInfoOffset: u32 align(1),
};

pub const LINEEXTENSIONID = extern struct {
    dwExtensionID0: u32 align(1),
    dwExtensionID1: u32 align(1),
    dwExtensionID2: u32 align(1),
    dwExtensionID3: u32 align(1),
};

pub const LINEFORWARD = extern struct {
    dwForwardMode: u32 align(1),
    dwCallerAddressSize: u32 align(1),
    dwCallerAddressOffset: u32 align(1),
    dwDestCountryCode: u32 align(1),
    dwDestAddressSize: u32 align(1),
    dwDestAddressOffset: u32 align(1),
};

pub const LINEFORWARDLIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNumEntries: u32 align(1),
    ForwardList: [1]LINEFORWARD align(1),
};

pub const LINEGENERATETONE = extern struct {
    dwFrequency: u32 align(1),
    dwCadenceOn: u32 align(1),
    dwCadenceOff: u32 align(1),
    dwVolume: u32 align(1),
};

pub const LINEINITIALIZEEXPARAMS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwOptions: u32 align(1),
    Handles: extern union {
        hEvent: ?HANDLE align(1),
        hCompletionPort: ?HANDLE align(1),
    } align(1),
    dwCompletionKey: u32 align(1),
};

pub const LINELOCATIONENTRY = extern struct {
    dwPermanentLocationID: u32 align(1),
    dwLocationNameSize: u32 align(1),
    dwLocationNameOffset: u32 align(1),
    dwCountryCode: u32 align(1),
    dwCityCodeSize: u32 align(1),
    dwCityCodeOffset: u32 align(1),
    dwPreferredCardID: u32 align(1),
    dwLocalAccessCodeSize: u32 align(1),
    dwLocalAccessCodeOffset: u32 align(1),
    dwLongDistanceAccessCodeSize: u32 align(1),
    dwLongDistanceAccessCodeOffset: u32 align(1),
    dwTollPrefixListSize: u32 align(1),
    dwTollPrefixListOffset: u32 align(1),
    dwCountryID: u32 align(1),
    dwOptions: u32 align(1),
    dwCancelCallWaitingSize: u32 align(1),
    dwCancelCallWaitingOffset: u32 align(1),
};

pub const LINEMEDIACONTROLCALLSTATE = extern struct {
    dwCallStates: u32 align(1),
    dwMediaControl: u32 align(1),
};

pub const LINEMEDIACONTROLDIGIT = extern struct {
    dwDigit: u32 align(1),
    dwDigitModes: u32 align(1),
    dwMediaControl: u32 align(1),
};

pub const LINEMEDIACONTROLMEDIA = extern struct {
    dwMediaModes: u32 align(1),
    dwDuration: u32 align(1),
    dwMediaControl: u32 align(1),
};

pub const LINEMEDIACONTROLTONE = extern struct {
    dwAppSpecific: u32 align(1),
    dwDuration: u32 align(1),
    dwFrequency1: u32 align(1),
    dwFrequency2: u32 align(1),
    dwFrequency3: u32 align(1),
    dwMediaControl: u32 align(1),
};

pub const LINEMESSAGE = extern struct {
    hDevice: u32 align(1),
    dwMessageID: u32 align(1),
    dwCallbackInstance: usize align(1),
    dwParam1: usize align(1),
    dwParam2: usize align(1),
    dwParam3: usize align(1),
};

pub const LINEMONITORTONE = extern struct {
    dwAppSpecific: u32 align(1),
    dwDuration: u32 align(1),
    dwFrequency1: u32 align(1),
    dwFrequency2: u32 align(1),
    dwFrequency3: u32 align(1),
};

pub const LINEPROVIDERENTRY = extern struct {
    dwPermanentProviderID: u32 align(1),
    dwProviderFilenameSize: u32 align(1),
    dwProviderFilenameOffset: u32 align(1),
};

pub const LINEPROVIDERLIST = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumProviders: u32 align(1),
    dwProviderListSize: u32 align(1),
    dwProviderListOffset: u32 align(1),
};

pub const LINEPROXYREQUEST = extern struct {
    dwSize: u32 align(1),
    dwClientMachineNameSize: u32 align(1),
    dwClientMachineNameOffset: u32 align(1),
    dwClientUserNameSize: u32 align(1),
    dwClientUserNameOffset: u32 align(1),
    dwClientAppAPIVersion: u32 align(1),
    dwRequestType: u32 align(1),
    Anonymous: extern union {
        SetAgentGroup: extern struct {
            dwAddressID: u32 align(1),
            GroupList: LINEAGENTGROUPLIST align(1),
        },
        SetAgentState: extern struct {
            dwAddressID: u32 align(1),
            dwAgentState: u32 align(1),
            dwNextAgentState: u32 align(1),
        },
        SetAgentActivity: extern struct {
            dwAddressID: u32 align(1),
            dwActivityID: u32 align(1),
        },
        GetAgentCaps: extern struct {
            dwAddressID: u32 align(1),
            AgentCaps: LINEAGENTCAPS align(1),
        },
        GetAgentStatus: extern struct {
            dwAddressID: u32 align(1),
            AgentStatus: LINEAGENTSTATUS align(1),
        },
        AgentSpecific: extern struct {
            dwAddressID: u32 align(1),
            dwAgentExtensionIDIndex: u32 align(1),
            dwSize: u32 align(1),
            Params: [1]u8 align(1),
        },
        GetAgentActivityList: extern struct {
            dwAddressID: u32 align(1),
            ActivityList: LINEAGENTACTIVITYLIST align(1),
        },
        GetAgentGroupList: extern struct {
            dwAddressID: u32 align(1),
            GroupList: LINEAGENTGROUPLIST align(1),
        },
        CreateAgent: extern struct {
            hAgent: u32 align(1),
            dwAgentIDSize: u32 align(1),
            dwAgentIDOffset: u32 align(1),
            dwAgentPINSize: u32 align(1),
            dwAgentPINOffset: u32 align(1),
        },
        SetAgentStateEx: extern struct {
            hAgent: u32 align(1),
            dwAgentState: u32 align(1),
            dwNextAgentState: u32 align(1),
        },
        SetAgentMeasurementPeriod: extern struct {
            hAgent: u32 align(1),
            dwMeasurementPeriod: u32 align(1),
        },
        GetAgentInfo: extern struct {
            hAgent: u32 align(1),
            AgentInfo: LINEAGENTINFO align(1),
        },
        CreateAgentSession: extern struct {
            hAgentSession: u32 align(1),
            dwAgentPINSize: u32 align(1),
            dwAgentPINOffset: u32 align(1),
            hAgent: u32 align(1),
            GroupID: Guid align(1),
            dwWorkingAddressID: u32 align(1),
        },
        GetAgentSessionList: extern struct {
            hAgent: u32 align(1),
            SessionList: LINEAGENTSESSIONLIST align(1),
        },
        GetAgentSessionInfo: extern struct {
            hAgentSession: u32 align(1),
            SessionInfo: LINEAGENTSESSIONINFO align(1),
        },
        SetAgentSessionState: extern struct {
            hAgentSession: u32 align(1),
            dwAgentSessionState: u32 align(1),
            dwNextAgentSessionState: u32 align(1),
        },
        GetQueueList: extern struct {
            GroupID: Guid align(1),
            QueueList: LINEQUEUELIST align(1),
        },
        SetQueueMeasurementPeriod: extern struct {
            dwQueueID: u32 align(1),
            dwMeasurementPeriod: u32 align(1),
        },
        GetQueueInfo: extern struct {
            dwQueueID: u32 align(1),
            QueueInfo: LINEQUEUEINFO align(1),
        },
        GetGroupList: extern struct {
            GroupList: LINEAGENTGROUPLIST,
        },
    } align(1),
};

pub const LINEREQMAKECALL = extern struct {
    szDestAddress: [80]CHAR,
    szAppName: [40]CHAR,
    szCalledParty: [40]CHAR,
    szComment: [80]CHAR,
};

pub const linereqmakecallW_tag = extern struct {
    szDestAddress: [80]u16 align(1),
    szAppName: [40]u16 align(1),
    szCalledParty: [40]u16 align(1),
    szComment: [80]u16 align(1),
};

pub const LINEREQMEDIACALL = extern struct {
    hWnd: ?HWND align(1),
    wRequestID: WPARAM align(1),
    szDeviceClass: [40]CHAR align(1),
    ucDeviceID: [40]u8 align(1),
    dwSize: u32 align(1),
    dwSecure: u32 align(1),
    szDestAddress: [80]CHAR align(1),
    szAppName: [40]CHAR align(1),
    szCalledParty: [40]CHAR align(1),
    szComment: [80]CHAR align(1),
};

pub const linereqmediacallW_tag = extern struct {
    hWnd: ?HWND align(1),
    wRequestID: WPARAM align(1),
    szDeviceClass: [40]u16 align(1),
    ucDeviceID: [40]u8 align(1),
    dwSize: u32 align(1),
    dwSecure: u32 align(1),
    szDestAddress: [80]u16 align(1),
    szAppName: [40]u16 align(1),
    szCalledParty: [40]u16 align(1),
    szComment: [80]u16 align(1),
};

pub const LINETERMCAPS = extern struct {
    dwTermDev: u32 align(1),
    dwTermModes: u32 align(1),
    dwTermSharing: u32 align(1),
};

pub const LINETRANSLATECAPS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwNumLocations: u32 align(1),
    dwLocationListSize: u32 align(1),
    dwLocationListOffset: u32 align(1),
    dwCurrentLocationID: u32 align(1),
    dwNumCards: u32 align(1),
    dwCardListSize: u32 align(1),
    dwCardListOffset: u32 align(1),
    dwCurrentPreferredCardID: u32 align(1),
};

pub const LINETRANSLATEOUTPUT = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwDialableStringSize: u32 align(1),
    dwDialableStringOffset: u32 align(1),
    dwDisplayableStringSize: u32 align(1),
    dwDisplayableStringOffset: u32 align(1),
    dwCurrentCountry: u32 align(1),
    dwDestCountry: u32 align(1),
    dwTranslateResults: u32 align(1),
};

pub const PHONEBUTTONINFO = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwButtonMode: u32 align(1),
    dwButtonFunction: u32 align(1),
    dwButtonTextSize: u32 align(1),
    dwButtonTextOffset: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
    dwButtonState: u32 align(1),
};

pub const PHONECAPS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwProviderInfoSize: u32 align(1),
    dwProviderInfoOffset: u32 align(1),
    dwPhoneInfoSize: u32 align(1),
    dwPhoneInfoOffset: u32 align(1),
    dwPermanentPhoneID: u32 align(1),
    dwPhoneNameSize: u32 align(1),
    dwPhoneNameOffset: u32 align(1),
    dwStringFormat: u32 align(1),
    dwPhoneStates: u32 align(1),
    dwHookSwitchDevs: u32 align(1),
    dwHandsetHookSwitchModes: u32 align(1),
    dwSpeakerHookSwitchModes: u32 align(1),
    dwHeadsetHookSwitchModes: u32 align(1),
    dwVolumeFlags: u32 align(1),
    dwGainFlags: u32 align(1),
    dwDisplayNumRows: u32 align(1),
    dwDisplayNumColumns: u32 align(1),
    dwNumRingModes: u32 align(1),
    dwNumButtonLamps: u32 align(1),
    dwButtonModesSize: u32 align(1),
    dwButtonModesOffset: u32 align(1),
    dwButtonFunctionsSize: u32 align(1),
    dwButtonFunctionsOffset: u32 align(1),
    dwLampModesSize: u32 align(1),
    dwLampModesOffset: u32 align(1),
    dwNumSetData: u32 align(1),
    dwSetDataSize: u32 align(1),
    dwSetDataOffset: u32 align(1),
    dwNumGetData: u32 align(1),
    dwGetDataSize: u32 align(1),
    dwGetDataOffset: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
    dwDeviceClassesSize: u32 align(1),
    dwDeviceClassesOffset: u32 align(1),
    dwPhoneFeatures: u32 align(1),
    dwSettableHandsetHookSwitchModes: u32 align(1),
    dwSettableSpeakerHookSwitchModes: u32 align(1),
    dwSettableHeadsetHookSwitchModes: u32 align(1),
    dwMonitoredHandsetHookSwitchModes: u32 align(1),
    dwMonitoredSpeakerHookSwitchModes: u32 align(1),
    dwMonitoredHeadsetHookSwitchModes: u32 align(1),
    PermanentPhoneGuid: Guid align(1),
};

pub const PHONEEXTENSIONID = extern struct {
    dwExtensionID0: u32 align(1),
    dwExtensionID1: u32 align(1),
    dwExtensionID2: u32 align(1),
    dwExtensionID3: u32 align(1),
};

pub const PHONEINITIALIZEEXPARAMS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwOptions: u32 align(1),
    Handles: extern union {
        hEvent: ?HANDLE align(1),
        hCompletionPort: ?HANDLE align(1),
    } align(1),
    dwCompletionKey: u32 align(1),
};

pub const PHONEMESSAGE = extern struct {
    hDevice: u32 align(1),
    dwMessageID: u32 align(1),
    dwCallbackInstance: usize align(1),
    dwParam1: usize align(1),
    dwParam2: usize align(1),
    dwParam3: usize align(1),
};

pub const PHONESTATUS = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwStatusFlags: u32 align(1),
    dwNumOwners: u32 align(1),
    dwNumMonitors: u32 align(1),
    dwRingMode: u32 align(1),
    dwRingVolume: u32 align(1),
    dwHandsetHookSwitchMode: u32 align(1),
    dwHandsetVolume: u32 align(1),
    dwHandsetGain: u32 align(1),
    dwSpeakerHookSwitchMode: u32 align(1),
    dwSpeakerVolume: u32 align(1),
    dwSpeakerGain: u32 align(1),
    dwHeadsetHookSwitchMode: u32 align(1),
    dwHeadsetVolume: u32 align(1),
    dwHeadsetGain: u32 align(1),
    dwDisplaySize: u32 align(1),
    dwDisplayOffset: u32 align(1),
    dwLampModesSize: u32 align(1),
    dwLampModesOffset: u32 align(1),
    dwOwnerNameSize: u32 align(1),
    dwOwnerNameOffset: u32 align(1),
    dwDevSpecificSize: u32 align(1),
    dwDevSpecificOffset: u32 align(1),
    dwPhoneFeatures: u32 align(1),
};

pub const VARSTRING = extern struct {
    dwTotalSize: u32 align(1),
    dwNeededSize: u32 align(1),
    dwUsedSize: u32 align(1),
    dwStringFormat: u32 align(1),
    dwStringSize: u32 align(1),
    dwStringOffset: u32 align(1),
};

pub const HDRVCALL__ = extern struct {
    unused: i32,
};

pub const HDRVLINE__ = extern struct {
    unused: i32,
};

pub const HDRVPHONE__ = extern struct {
    unused: i32,
};

pub const HDRVMSPLINE__ = extern struct {
    unused: i32,
};

pub const HDRVDIALOGINSTANCE__ = extern struct {
    unused: i32,
};

pub const HTAPICALL__ = extern struct {
    unused: i32,
};

pub const HTAPILINE__ = extern struct {
    unused: i32,
};

pub const HTAPIPHONE__ = extern struct {
    unused: i32,
};

pub const HPROVIDER__ = extern struct {
    unused: i32,
};

pub const ASYNC_COMPLETION = *const fn (
    dw_request_i_d: u32,
    l_result: i32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LINEEVENT = *const fn (
    ht_line: ?*HTAPILINE__,
    ht_call: ?*HTAPICALL__,
    dw_msg: u32,
    dw_param1: usize,
    dw_param2: usize,
    dw_param3: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PHONEEVENT = *const fn (
    ht_phone: ?*HTAPIPHONE__,
    dw_msg: u32,
    dw_param1: usize,
    dw_param2: usize,
    dw_param3: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const TUISPIDLLCALLBACK = *const fn (
    dw_object_i_d: usize,
    dw_object_type: u32,
    lp_params: ?*anyopaque,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const TUISPICREATEDIALOGINSTANCEPARAMS = extern struct {
    dwRequestID: u32,
    hdDlgInst: ?*HDRVDIALOGINSTANCE__,
    htDlgInst: u32,
    lpszUIDLLName: ?[*:0]const u16,
    lpParams: ?*anyopaque,
    dwSize: u32,
};

const CLSID_TAPI_Value = Guid.initString("21d6d48e-a88b-11d0-83dd-00aa003ccabd");
pub const CLSID_TAPI = &CLSID_TAPI_Value;

const CLSID_DispatchMapper_Value = Guid.initString("e9225296-c759-11d1-a02b-00c04fb6809f");
pub const CLSID_DispatchMapper = &CLSID_DispatchMapper_Value;

const CLSID_RequestMakeCall_Value = Guid.initString("ac48ffe0-f8c4-11d1-a030-00c04fb6809f");
pub const CLSID_RequestMakeCall = &CLSID_RequestMakeCall_Value;

pub const TAPI_TONEMODE = enum(i32) {
    RINGBACK = 2,
    BUSY = 4,
    BEEP = 8,
    BILLING = 16,
};
pub const TTM_RINGBACK = TAPI_TONEMODE.RINGBACK;
pub const TTM_BUSY = TAPI_TONEMODE.BUSY;
pub const TTM_BEEP = TAPI_TONEMODE.BEEP;
pub const TTM_BILLING = TAPI_TONEMODE.BILLING;

pub const TAPI_GATHERTERM = enum(i32) {
    BUFFERFULL = 1,
    TERMDIGIT = 2,
    FIRSTTIMEOUT = 4,
    INTERTIMEOUT = 8,
    CANCEL = 16,
};
pub const TGT_BUFFERFULL = TAPI_GATHERTERM.BUFFERFULL;
pub const TGT_TERMDIGIT = TAPI_GATHERTERM.TERMDIGIT;
pub const TGT_FIRSTTIMEOUT = TAPI_GATHERTERM.FIRSTTIMEOUT;
pub const TGT_INTERTIMEOUT = TAPI_GATHERTERM.INTERTIMEOUT;
pub const TGT_CANCEL = TAPI_GATHERTERM.CANCEL;

pub const TAPI_CUSTOMTONE = extern struct {
    dwFrequency: u32,
    dwCadenceOn: u32,
    dwCadenceOff: u32,
    dwVolume: u32,
};

pub const TAPI_DETECTTONE = extern struct {
    dwAppSpecific: u32,
    dwDuration: u32,
    dwFrequency1: u32,
    dwFrequency2: u32,
    dwFrequency3: u32,
};

pub const ADDRESS_EVENT = enum(i32) {
    STATE = 0,
    CAPSCHANGE = 1,
    RINGING = 2,
    CONFIGCHANGE = 3,
    FORWARD = 4,
    NEWTERMINAL = 5,
    REMOVETERMINAL = 6,
    MSGWAITON = 7,
    MSGWAITOFF = 8,
    // LASTITEM = 8, this enum value conflicts with MSGWAITOFF
};
pub const AE_STATE = ADDRESS_EVENT.STATE;
pub const AE_CAPSCHANGE = ADDRESS_EVENT.CAPSCHANGE;
pub const AE_RINGING = ADDRESS_EVENT.RINGING;
pub const AE_CONFIGCHANGE = ADDRESS_EVENT.CONFIGCHANGE;
pub const AE_FORWARD = ADDRESS_EVENT.FORWARD;
pub const AE_NEWTERMINAL = ADDRESS_EVENT.NEWTERMINAL;
pub const AE_REMOVETERMINAL = ADDRESS_EVENT.REMOVETERMINAL;
pub const AE_MSGWAITON = ADDRESS_EVENT.MSGWAITON;
pub const AE_MSGWAITOFF = ADDRESS_EVENT.MSGWAITOFF;
pub const AE_LASTITEM = ADDRESS_EVENT.MSGWAITOFF;

pub const ADDRESS_STATE = enum(i32) {
    INSERVICE = 0,
    OUTOFSERVICE = 1,
};
pub const AS_INSERVICE = ADDRESS_STATE.INSERVICE;
pub const AS_OUTOFSERVICE = ADDRESS_STATE.OUTOFSERVICE;

pub const CALL_STATE = enum(i32) {
    IDLE = 0,
    INPROGRESS = 1,
    CONNECTED = 2,
    DISCONNECTED = 3,
    OFFERING = 4,
    HOLD = 5,
    QUEUED = 6,
    // LASTITEM = 6, this enum value conflicts with QUEUED
};
pub const CS_IDLE = CALL_STATE.IDLE;
pub const CS_INPROGRESS = CALL_STATE.INPROGRESS;
pub const CS_CONNECTED = CALL_STATE.CONNECTED;
pub const CS_DISCONNECTED = CALL_STATE.DISCONNECTED;
pub const CS_OFFERING = CALL_STATE.OFFERING;
pub const CS_HOLD = CALL_STATE.HOLD;
pub const CS_QUEUED = CALL_STATE.QUEUED;
pub const CS_LASTITEM = CALL_STATE.QUEUED;

pub const CALL_STATE_EVENT_CAUSE = enum(i32) {
    NONE = 0,
    DISCONNECT_NORMAL = 1,
    DISCONNECT_BUSY = 2,
    DISCONNECT_BADADDRESS = 3,
    DISCONNECT_NOANSWER = 4,
    DISCONNECT_CANCELLED = 5,
    DISCONNECT_REJECTED = 6,
    DISCONNECT_FAILED = 7,
    DISCONNECT_BLOCKED = 8,
};
pub const CEC_NONE = CALL_STATE_EVENT_CAUSE.NONE;
pub const CEC_DISCONNECT_NORMAL = CALL_STATE_EVENT_CAUSE.DISCONNECT_NORMAL;
pub const CEC_DISCONNECT_BUSY = CALL_STATE_EVENT_CAUSE.DISCONNECT_BUSY;
pub const CEC_DISCONNECT_BADADDRESS = CALL_STATE_EVENT_CAUSE.DISCONNECT_BADADDRESS;
pub const CEC_DISCONNECT_NOANSWER = CALL_STATE_EVENT_CAUSE.DISCONNECT_NOANSWER;
pub const CEC_DISCONNECT_CANCELLED = CALL_STATE_EVENT_CAUSE.DISCONNECT_CANCELLED;
pub const CEC_DISCONNECT_REJECTED = CALL_STATE_EVENT_CAUSE.DISCONNECT_REJECTED;
pub const CEC_DISCONNECT_FAILED = CALL_STATE_EVENT_CAUSE.DISCONNECT_FAILED;
pub const CEC_DISCONNECT_BLOCKED = CALL_STATE_EVENT_CAUSE.DISCONNECT_BLOCKED;

pub const CALL_MEDIA_EVENT = enum(i32) {
    NEW_STREAM = 0,
    STREAM_FAIL = 1,
    TERMINAL_FAIL = 2,
    STREAM_NOT_USED = 3,
    STREAM_ACTIVE = 4,
    STREAM_INACTIVE = 5,
    // LASTITEM = 5, this enum value conflicts with STREAM_INACTIVE
};
pub const CME_NEW_STREAM = CALL_MEDIA_EVENT.NEW_STREAM;
pub const CME_STREAM_FAIL = CALL_MEDIA_EVENT.STREAM_FAIL;
pub const CME_TERMINAL_FAIL = CALL_MEDIA_EVENT.TERMINAL_FAIL;
pub const CME_STREAM_NOT_USED = CALL_MEDIA_EVENT.STREAM_NOT_USED;
pub const CME_STREAM_ACTIVE = CALL_MEDIA_EVENT.STREAM_ACTIVE;
pub const CME_STREAM_INACTIVE = CALL_MEDIA_EVENT.STREAM_INACTIVE;
pub const CME_LASTITEM = CALL_MEDIA_EVENT.STREAM_INACTIVE;

pub const CALL_MEDIA_EVENT_CAUSE = enum(i32) {
    UNKNOWN = 0,
    BAD_DEVICE = 1,
    CONNECT_FAIL = 2,
    LOCAL_REQUEST = 3,
    REMOTE_REQUEST = 4,
    MEDIA_TIMEOUT = 5,
    MEDIA_RECOVERED = 6,
    QUALITY_OF_SERVICE = 7,
};
pub const CMC_UNKNOWN = CALL_MEDIA_EVENT_CAUSE.UNKNOWN;
pub const CMC_BAD_DEVICE = CALL_MEDIA_EVENT_CAUSE.BAD_DEVICE;
pub const CMC_CONNECT_FAIL = CALL_MEDIA_EVENT_CAUSE.CONNECT_FAIL;
pub const CMC_LOCAL_REQUEST = CALL_MEDIA_EVENT_CAUSE.LOCAL_REQUEST;
pub const CMC_REMOTE_REQUEST = CALL_MEDIA_EVENT_CAUSE.REMOTE_REQUEST;
pub const CMC_MEDIA_TIMEOUT = CALL_MEDIA_EVENT_CAUSE.MEDIA_TIMEOUT;
pub const CMC_MEDIA_RECOVERED = CALL_MEDIA_EVENT_CAUSE.MEDIA_RECOVERED;
pub const CMC_QUALITY_OF_SERVICE = CALL_MEDIA_EVENT_CAUSE.QUALITY_OF_SERVICE;

pub const DISCONNECT_CODE = enum(i32) {
    NORMAL = 0,
    NOANSWER = 1,
    REJECTED = 2,
};
pub const DC_NORMAL = DISCONNECT_CODE.NORMAL;
pub const DC_NOANSWER = DISCONNECT_CODE.NOANSWER;
pub const DC_REJECTED = DISCONNECT_CODE.REJECTED;

pub const TERMINAL_STATE = enum(i32) {
    INUSE = 0,
    NOTINUSE = 1,
};
pub const TS_INUSE = TERMINAL_STATE.INUSE;
pub const TS_NOTINUSE = TERMINAL_STATE.NOTINUSE;

pub const TERMINAL_DIRECTION = enum(i32) {
    CAPTURE = 0,
    RENDER = 1,
    BIDIRECTIONAL = 2,
    MULTITRACK_MIXED = 3,
    NONE = 4,
};
pub const TD_CAPTURE = TERMINAL_DIRECTION.CAPTURE;
pub const TD_RENDER = TERMINAL_DIRECTION.RENDER;
pub const TD_BIDIRECTIONAL = TERMINAL_DIRECTION.BIDIRECTIONAL;
pub const TD_MULTITRACK_MIXED = TERMINAL_DIRECTION.MULTITRACK_MIXED;
pub const TD_NONE = TERMINAL_DIRECTION.NONE;

pub const TERMINAL_TYPE = enum(i32) {
    STATIC = 0,
    DYNAMIC = 1,
};
pub const TT_STATIC = TERMINAL_TYPE.STATIC;
pub const TT_DYNAMIC = TERMINAL_TYPE.DYNAMIC;

pub const CALL_PRIVILEGE = enum(i32) {
    OWNER = 0,
    MONITOR = 1,
};
pub const CP_OWNER = CALL_PRIVILEGE.OWNER;
pub const CP_MONITOR = CALL_PRIVILEGE.MONITOR;

pub const TAPI_EVENT = enum(i32) {
    TAPIOBJECT = 1,
    ADDRESS = 2,
    CALLNOTIFICATION = 4,
    CALLSTATE = 8,
    CALLMEDIA = 16,
    CALLHUB = 32,
    CALLINFOCHANGE = 64,
    PRIVATE = 128,
    REQUEST = 256,
    AGENT = 512,
    AGENTSESSION = 1024,
    QOSEVENT = 2048,
    AGENTHANDLER = 4096,
    ACDGROUP = 8192,
    QUEUE = 16384,
    DIGITEVENT = 32768,
    GENERATEEVENT = 65536,
    ASRTERMINAL = 131072,
    TTSTERMINAL = 262144,
    FILETERMINAL = 524288,
    TONETERMINAL = 1048576,
    PHONEEVENT = 2097152,
    TONEEVENT = 4194304,
    GATHERDIGITS = 8388608,
    ADDRESSDEVSPECIFIC = 16777216,
    PHONEDEVSPECIFIC = 33554432,
};
pub const TE_TAPIOBJECT = TAPI_EVENT.TAPIOBJECT;
pub const TE_ADDRESS = TAPI_EVENT.ADDRESS;
pub const TE_CALLNOTIFICATION = TAPI_EVENT.CALLNOTIFICATION;
pub const TE_CALLSTATE = TAPI_EVENT.CALLSTATE;
pub const TE_CALLMEDIA = TAPI_EVENT.CALLMEDIA;
pub const TE_CALLHUB = TAPI_EVENT.CALLHUB;
pub const TE_CALLINFOCHANGE = TAPI_EVENT.CALLINFOCHANGE;
pub const TE_PRIVATE = TAPI_EVENT.PRIVATE;
pub const TE_REQUEST = TAPI_EVENT.REQUEST;
pub const TE_AGENT = TAPI_EVENT.AGENT;
pub const TE_AGENTSESSION = TAPI_EVENT.AGENTSESSION;
pub const TE_QOSEVENT = TAPI_EVENT.QOSEVENT;
pub const TE_AGENTHANDLER = TAPI_EVENT.AGENTHANDLER;
pub const TE_ACDGROUP = TAPI_EVENT.ACDGROUP;
pub const TE_QUEUE = TAPI_EVENT.QUEUE;
pub const TE_DIGITEVENT = TAPI_EVENT.DIGITEVENT;
pub const TE_GENERATEEVENT = TAPI_EVENT.GENERATEEVENT;
pub const TE_ASRTERMINAL = TAPI_EVENT.ASRTERMINAL;
pub const TE_TTSTERMINAL = TAPI_EVENT.TTSTERMINAL;
pub const TE_FILETERMINAL = TAPI_EVENT.FILETERMINAL;
pub const TE_TONETERMINAL = TAPI_EVENT.TONETERMINAL;
pub const TE_PHONEEVENT = TAPI_EVENT.PHONEEVENT;
pub const TE_TONEEVENT = TAPI_EVENT.TONEEVENT;
pub const TE_GATHERDIGITS = TAPI_EVENT.GATHERDIGITS;
pub const TE_ADDRESSDEVSPECIFIC = TAPI_EVENT.ADDRESSDEVSPECIFIC;
pub const TE_PHONEDEVSPECIFIC = TAPI_EVENT.PHONEDEVSPECIFIC;

pub const CALL_NOTIFICATION_EVENT = enum(i32) {
    OWNER = 0,
    MONITOR = 1,
    // LASTITEM = 1, this enum value conflicts with MONITOR
};
pub const CNE_OWNER = CALL_NOTIFICATION_EVENT.OWNER;
pub const CNE_MONITOR = CALL_NOTIFICATION_EVENT.MONITOR;
pub const CNE_LASTITEM = CALL_NOTIFICATION_EVENT.MONITOR;

pub const CALLHUB_EVENT = enum(i32) {
    CALLJOIN = 0,
    CALLLEAVE = 1,
    CALLHUBNEW = 2,
    CALLHUBIDLE = 3,
    // LASTITEM = 3, this enum value conflicts with CALLHUBIDLE
};
pub const CHE_CALLJOIN = CALLHUB_EVENT.CALLJOIN;
pub const CHE_CALLLEAVE = CALLHUB_EVENT.CALLLEAVE;
pub const CHE_CALLHUBNEW = CALLHUB_EVENT.CALLHUBNEW;
pub const CHE_CALLHUBIDLE = CALLHUB_EVENT.CALLHUBIDLE;
pub const CHE_LASTITEM = CALLHUB_EVENT.CALLHUBIDLE;

pub const CALLHUB_STATE = enum(i32) {
    ACTIVE = 0,
    IDLE = 1,
};
pub const CHS_ACTIVE = CALLHUB_STATE.ACTIVE;
pub const CHS_IDLE = CALLHUB_STATE.IDLE;

pub const TAPIOBJECT_EVENT = enum(i32) {
    ADDRESSCREATE = 0,
    ADDRESSREMOVE = 1,
    REINIT = 2,
    TRANSLATECHANGE = 3,
    ADDRESSCLOSE = 4,
    PHONECREATE = 5,
    PHONEREMOVE = 6,
};
pub const TE_ADDRESSCREATE = TAPIOBJECT_EVENT.ADDRESSCREATE;
pub const TE_ADDRESSREMOVE = TAPIOBJECT_EVENT.ADDRESSREMOVE;
pub const TE_REINIT = TAPIOBJECT_EVENT.REINIT;
pub const TE_TRANSLATECHANGE = TAPIOBJECT_EVENT.TRANSLATECHANGE;
pub const TE_ADDRESSCLOSE = TAPIOBJECT_EVENT.ADDRESSCLOSE;
pub const TE_PHONECREATE = TAPIOBJECT_EVENT.PHONECREATE;
pub const TE_PHONEREMOVE = TAPIOBJECT_EVENT.PHONEREMOVE;

pub const TAPI_OBJECT_TYPE = enum(i32) {
    NONE = 0,
    TAPI = 1,
    ADDRESS = 2,
    TERMINAL = 3,
    CALL = 4,
    CALLHUB = 5,
    PHONE = 6,
};
pub const TOT_NONE = TAPI_OBJECT_TYPE.NONE;
pub const TOT_TAPI = TAPI_OBJECT_TYPE.TAPI;
pub const TOT_ADDRESS = TAPI_OBJECT_TYPE.ADDRESS;
pub const TOT_TERMINAL = TAPI_OBJECT_TYPE.TERMINAL;
pub const TOT_CALL = TAPI_OBJECT_TYPE.CALL;
pub const TOT_CALLHUB = TAPI_OBJECT_TYPE.CALLHUB;
pub const TOT_PHONE = TAPI_OBJECT_TYPE.PHONE;

pub const QOS_SERVICE_LEVEL = enum(i32) {
    NEEDED = 1,
    IF_AVAILABLE = 2,
    BEST_EFFORT = 3,
};
pub const QSL_NEEDED = QOS_SERVICE_LEVEL.NEEDED;
pub const QSL_IF_AVAILABLE = QOS_SERVICE_LEVEL.IF_AVAILABLE;
pub const QSL_BEST_EFFORT = QOS_SERVICE_LEVEL.BEST_EFFORT;

pub const QOS_EVENT = enum(i32) {
    NOQOS = 1,
    ADMISSIONFAILURE = 2,
    POLICYFAILURE = 3,
    GENERICERROR = 4,
    // LASTITEM = 4, this enum value conflicts with GENERICERROR
};
pub const QE_NOQOS = QOS_EVENT.NOQOS;
pub const QE_ADMISSIONFAILURE = QOS_EVENT.ADMISSIONFAILURE;
pub const QE_POLICYFAILURE = QOS_EVENT.POLICYFAILURE;
pub const QE_GENERICERROR = QOS_EVENT.GENERICERROR;
pub const QE_LASTITEM = QOS_EVENT.GENERICERROR;

pub const CALLINFOCHANGE_CAUSE = enum(i32) {
    OTHER = 0,
    DEVSPECIFIC = 1,
    BEARERMODE = 2,
    RATE = 3,
    APPSPECIFIC = 4,
    CALLID = 5,
    RELATEDCALLID = 6,
    ORIGIN = 7,
    REASON = 8,
    COMPLETIONID = 9,
    NUMOWNERINCR = 10,
    NUMOWNERDECR = 11,
    NUMMONITORS = 12,
    TRUNK = 13,
    CALLERID = 14,
    CALLEDID = 15,
    CONNECTEDID = 16,
    REDIRECTIONID = 17,
    REDIRECTINGID = 18,
    USERUSERINFO = 19,
    HIGHLEVELCOMP = 20,
    LOWLEVELCOMP = 21,
    CHARGINGINFO = 22,
    TREATMENT = 23,
    CALLDATA = 24,
    PRIVILEGE = 25,
    MEDIATYPE = 26,
    // LASTITEM = 26, this enum value conflicts with MEDIATYPE
};
pub const CIC_OTHER = CALLINFOCHANGE_CAUSE.OTHER;
pub const CIC_DEVSPECIFIC = CALLINFOCHANGE_CAUSE.DEVSPECIFIC;
pub const CIC_BEARERMODE = CALLINFOCHANGE_CAUSE.BEARERMODE;
pub const CIC_RATE = CALLINFOCHANGE_CAUSE.RATE;
pub const CIC_APPSPECIFIC = CALLINFOCHANGE_CAUSE.APPSPECIFIC;
pub const CIC_CALLID = CALLINFOCHANGE_CAUSE.CALLID;
pub const CIC_RELATEDCALLID = CALLINFOCHANGE_CAUSE.RELATEDCALLID;
pub const CIC_ORIGIN = CALLINFOCHANGE_CAUSE.ORIGIN;
pub const CIC_REASON = CALLINFOCHANGE_CAUSE.REASON;
pub const CIC_COMPLETIONID = CALLINFOCHANGE_CAUSE.COMPLETIONID;
pub const CIC_NUMOWNERINCR = CALLINFOCHANGE_CAUSE.NUMOWNERINCR;
pub const CIC_NUMOWNERDECR = CALLINFOCHANGE_CAUSE.NUMOWNERDECR;
pub const CIC_NUMMONITORS = CALLINFOCHANGE_CAUSE.NUMMONITORS;
pub const CIC_TRUNK = CALLINFOCHANGE_CAUSE.TRUNK;
pub const CIC_CALLERID = CALLINFOCHANGE_CAUSE.CALLERID;
pub const CIC_CALLEDID = CALLINFOCHANGE_CAUSE.CALLEDID;
pub const CIC_CONNECTEDID = CALLINFOCHANGE_CAUSE.CONNECTEDID;
pub const CIC_REDIRECTIONID = CALLINFOCHANGE_CAUSE.REDIRECTIONID;
pub const CIC_REDIRECTINGID = CALLINFOCHANGE_CAUSE.REDIRECTINGID;
pub const CIC_USERUSERINFO = CALLINFOCHANGE_CAUSE.USERUSERINFO;
pub const CIC_HIGHLEVELCOMP = CALLINFOCHANGE_CAUSE.HIGHLEVELCOMP;
pub const CIC_LOWLEVELCOMP = CALLINFOCHANGE_CAUSE.LOWLEVELCOMP;
pub const CIC_CHARGINGINFO = CALLINFOCHANGE_CAUSE.CHARGINGINFO;
pub const CIC_TREATMENT = CALLINFOCHANGE_CAUSE.TREATMENT;
pub const CIC_CALLDATA = CALLINFOCHANGE_CAUSE.CALLDATA;
pub const CIC_PRIVILEGE = CALLINFOCHANGE_CAUSE.PRIVILEGE;
pub const CIC_MEDIATYPE = CALLINFOCHANGE_CAUSE.MEDIATYPE;
pub const CIC_LASTITEM = CALLINFOCHANGE_CAUSE.MEDIATYPE;

pub const CALLINFO_LONG = enum(i32) {
    MEDIATYPESAVAILABLE = 0,
    BEARERMODE = 1,
    CALLERIDADDRESSTYPE = 2,
    CALLEDIDADDRESSTYPE = 3,
    CONNECTEDIDADDRESSTYPE = 4,
    REDIRECTIONIDADDRESSTYPE = 5,
    REDIRECTINGIDADDRESSTYPE = 6,
    ORIGIN = 7,
    REASON = 8,
    APPSPECIFIC = 9,
    CALLPARAMSFLAGS = 10,
    CALLTREATMENT = 11,
    MINRATE = 12,
    MAXRATE = 13,
    COUNTRYCODE = 14,
    CALLID = 15,
    RELATEDCALLID = 16,
    COMPLETIONID = 17,
    NUMBEROFOWNERS = 18,
    NUMBEROFMONITORS = 19,
    TRUNK = 20,
    RATE = 21,
    GENERATEDIGITDURATION = 22,
    MONITORDIGITMODES = 23,
    MONITORMEDIAMODES = 24,
};
pub const CIL_MEDIATYPESAVAILABLE = CALLINFO_LONG.MEDIATYPESAVAILABLE;
pub const CIL_BEARERMODE = CALLINFO_LONG.BEARERMODE;
pub const CIL_CALLERIDADDRESSTYPE = CALLINFO_LONG.CALLERIDADDRESSTYPE;
pub const CIL_CALLEDIDADDRESSTYPE = CALLINFO_LONG.CALLEDIDADDRESSTYPE;
pub const CIL_CONNECTEDIDADDRESSTYPE = CALLINFO_LONG.CONNECTEDIDADDRESSTYPE;
pub const CIL_REDIRECTIONIDADDRESSTYPE = CALLINFO_LONG.REDIRECTIONIDADDRESSTYPE;
pub const CIL_REDIRECTINGIDADDRESSTYPE = CALLINFO_LONG.REDIRECTINGIDADDRESSTYPE;
pub const CIL_ORIGIN = CALLINFO_LONG.ORIGIN;
pub const CIL_REASON = CALLINFO_LONG.REASON;
pub const CIL_APPSPECIFIC = CALLINFO_LONG.APPSPECIFIC;
pub const CIL_CALLPARAMSFLAGS = CALLINFO_LONG.CALLPARAMSFLAGS;
pub const CIL_CALLTREATMENT = CALLINFO_LONG.CALLTREATMENT;
pub const CIL_MINRATE = CALLINFO_LONG.MINRATE;
pub const CIL_MAXRATE = CALLINFO_LONG.MAXRATE;
pub const CIL_COUNTRYCODE = CALLINFO_LONG.COUNTRYCODE;
pub const CIL_CALLID = CALLINFO_LONG.CALLID;
pub const CIL_RELATEDCALLID = CALLINFO_LONG.RELATEDCALLID;
pub const CIL_COMPLETIONID = CALLINFO_LONG.COMPLETIONID;
pub const CIL_NUMBEROFOWNERS = CALLINFO_LONG.NUMBEROFOWNERS;
pub const CIL_NUMBEROFMONITORS = CALLINFO_LONG.NUMBEROFMONITORS;
pub const CIL_TRUNK = CALLINFO_LONG.TRUNK;
pub const CIL_RATE = CALLINFO_LONG.RATE;
pub const CIL_GENERATEDIGITDURATION = CALLINFO_LONG.GENERATEDIGITDURATION;
pub const CIL_MONITORDIGITMODES = CALLINFO_LONG.MONITORDIGITMODES;
pub const CIL_MONITORMEDIAMODES = CALLINFO_LONG.MONITORMEDIAMODES;

pub const CALLINFO_STRING = enum(i32) {
    CALLERIDNAME = 0,
    CALLERIDNUMBER = 1,
    CALLEDIDNAME = 2,
    CALLEDIDNUMBER = 3,
    CONNECTEDIDNAME = 4,
    CONNECTEDIDNUMBER = 5,
    REDIRECTIONIDNAME = 6,
    REDIRECTIONIDNUMBER = 7,
    REDIRECTINGIDNAME = 8,
    REDIRECTINGIDNUMBER = 9,
    CALLEDPARTYFRIENDLYNAME = 10,
    COMMENT = 11,
    DISPLAYABLEADDRESS = 12,
    CALLINGPARTYID = 13,
};
pub const CIS_CALLERIDNAME = CALLINFO_STRING.CALLERIDNAME;
pub const CIS_CALLERIDNUMBER = CALLINFO_STRING.CALLERIDNUMBER;
pub const CIS_CALLEDIDNAME = CALLINFO_STRING.CALLEDIDNAME;
pub const CIS_CALLEDIDNUMBER = CALLINFO_STRING.CALLEDIDNUMBER;
pub const CIS_CONNECTEDIDNAME = CALLINFO_STRING.CONNECTEDIDNAME;
pub const CIS_CONNECTEDIDNUMBER = CALLINFO_STRING.CONNECTEDIDNUMBER;
pub const CIS_REDIRECTIONIDNAME = CALLINFO_STRING.REDIRECTIONIDNAME;
pub const CIS_REDIRECTIONIDNUMBER = CALLINFO_STRING.REDIRECTIONIDNUMBER;
pub const CIS_REDIRECTINGIDNAME = CALLINFO_STRING.REDIRECTINGIDNAME;
pub const CIS_REDIRECTINGIDNUMBER = CALLINFO_STRING.REDIRECTINGIDNUMBER;
pub const CIS_CALLEDPARTYFRIENDLYNAME = CALLINFO_STRING.CALLEDPARTYFRIENDLYNAME;
pub const CIS_COMMENT = CALLINFO_STRING.COMMENT;
pub const CIS_DISPLAYABLEADDRESS = CALLINFO_STRING.DISPLAYABLEADDRESS;
pub const CIS_CALLINGPARTYID = CALLINFO_STRING.CALLINGPARTYID;

pub const CALLINFO_BUFFER = enum(i32) {
    USERUSERINFO = 0,
    DEVSPECIFICBUFFER = 1,
    CALLDATABUFFER = 2,
    CHARGINGINFOBUFFER = 3,
    HIGHLEVELCOMPATIBILITYBUFFER = 4,
    LOWLEVELCOMPATIBILITYBUFFER = 5,
};
pub const CIB_USERUSERINFO = CALLINFO_BUFFER.USERUSERINFO;
pub const CIB_DEVSPECIFICBUFFER = CALLINFO_BUFFER.DEVSPECIFICBUFFER;
pub const CIB_CALLDATABUFFER = CALLINFO_BUFFER.CALLDATABUFFER;
pub const CIB_CHARGINGINFOBUFFER = CALLINFO_BUFFER.CHARGINGINFOBUFFER;
pub const CIB_HIGHLEVELCOMPATIBILITYBUFFER = CALLINFO_BUFFER.HIGHLEVELCOMPATIBILITYBUFFER;
pub const CIB_LOWLEVELCOMPATIBILITYBUFFER = CALLINFO_BUFFER.LOWLEVELCOMPATIBILITYBUFFER;

pub const ADDRESS_CAPABILITY = enum(i32) {
    ADDRESSTYPES = 0,
    BEARERMODES = 1,
    MAXACTIVECALLS = 2,
    MAXONHOLDCALLS = 3,
    MAXONHOLDPENDINGCALLS = 4,
    MAXNUMCONFERENCE = 5,
    MAXNUMTRANSCONF = 6,
    MONITORDIGITSUPPORT = 7,
    GENERATEDIGITSUPPORT = 8,
    GENERATETONEMODES = 9,
    GENERATETONEMAXNUMFREQ = 10,
    MONITORTONEMAXNUMFREQ = 11,
    MONITORTONEMAXNUMENTRIES = 12,
    DEVCAPFLAGS = 13,
    ANSWERMODES = 14,
    LINEFEATURES = 15,
    SETTABLEDEVSTATUS = 16,
    PARKSUPPORT = 17,
    CALLERIDSUPPORT = 18,
    CALLEDIDSUPPORT = 19,
    CONNECTEDIDSUPPORT = 20,
    REDIRECTIONIDSUPPORT = 21,
    REDIRECTINGIDSUPPORT = 22,
    ADDRESSCAPFLAGS = 23,
    CALLFEATURES1 = 24,
    CALLFEATURES2 = 25,
    REMOVEFROMCONFCAPS = 26,
    REMOVEFROMCONFSTATE = 27,
    TRANSFERMODES = 28,
    ADDRESSFEATURES = 29,
    PREDICTIVEAUTOTRANSFERSTATES = 30,
    MAXCALLDATASIZE = 31,
    LINEID = 32,
    ADDRESSID = 33,
    FORWARDMODES = 34,
    MAXFORWARDENTRIES = 35,
    MAXSPECIFICENTRIES = 36,
    MINFWDNUMRINGS = 37,
    MAXFWDNUMRINGS = 38,
    MAXCALLCOMPLETIONS = 39,
    CALLCOMPLETIONCONDITIONS = 40,
    CALLCOMPLETIONMODES = 41,
    PERMANENTDEVICEID = 42,
    GATHERDIGITSMINTIMEOUT = 43,
    GATHERDIGITSMAXTIMEOUT = 44,
    GENERATEDIGITMINDURATION = 45,
    GENERATEDIGITMAXDURATION = 46,
    GENERATEDIGITDEFAULTDURATION = 47,
};
pub const AC_ADDRESSTYPES = ADDRESS_CAPABILITY.ADDRESSTYPES;
pub const AC_BEARERMODES = ADDRESS_CAPABILITY.BEARERMODES;
pub const AC_MAXACTIVECALLS = ADDRESS_CAPABILITY.MAXACTIVECALLS;
pub const AC_MAXONHOLDCALLS = ADDRESS_CAPABILITY.MAXONHOLDCALLS;
pub const AC_MAXONHOLDPENDINGCALLS = ADDRESS_CAPABILITY.MAXONHOLDPENDINGCALLS;
pub const AC_MAXNUMCONFERENCE = ADDRESS_CAPABILITY.MAXNUMCONFERENCE;
pub const AC_MAXNUMTRANSCONF = ADDRESS_CAPABILITY.MAXNUMTRANSCONF;
pub const AC_MONITORDIGITSUPPORT = ADDRESS_CAPABILITY.MONITORDIGITSUPPORT;
pub const AC_GENERATEDIGITSUPPORT = ADDRESS_CAPABILITY.GENERATEDIGITSUPPORT;
pub const AC_GENERATETONEMODES = ADDRESS_CAPABILITY.GENERATETONEMODES;
pub const AC_GENERATETONEMAXNUMFREQ = ADDRESS_CAPABILITY.GENERATETONEMAXNUMFREQ;
pub const AC_MONITORTONEMAXNUMFREQ = ADDRESS_CAPABILITY.MONITORTONEMAXNUMFREQ;
pub const AC_MONITORTONEMAXNUMENTRIES = ADDRESS_CAPABILITY.MONITORTONEMAXNUMENTRIES;
pub const AC_DEVCAPFLAGS = ADDRESS_CAPABILITY.DEVCAPFLAGS;
pub const AC_ANSWERMODES = ADDRESS_CAPABILITY.ANSWERMODES;
pub const AC_LINEFEATURES = ADDRESS_CAPABILITY.LINEFEATURES;
pub const AC_SETTABLEDEVSTATUS = ADDRESS_CAPABILITY.SETTABLEDEVSTATUS;
pub const AC_PARKSUPPORT = ADDRESS_CAPABILITY.PARKSUPPORT;
pub const AC_CALLERIDSUPPORT = ADDRESS_CAPABILITY.CALLERIDSUPPORT;
pub const AC_CALLEDIDSUPPORT = ADDRESS_CAPABILITY.CALLEDIDSUPPORT;
pub const AC_CONNECTEDIDSUPPORT = ADDRESS_CAPABILITY.CONNECTEDIDSUPPORT;
pub const AC_REDIRECTIONIDSUPPORT = ADDRESS_CAPABILITY.REDIRECTIONIDSUPPORT;
pub const AC_REDIRECTINGIDSUPPORT = ADDRESS_CAPABILITY.REDIRECTINGIDSUPPORT;
pub const AC_ADDRESSCAPFLAGS = ADDRESS_CAPABILITY.ADDRESSCAPFLAGS;
pub const AC_CALLFEATURES1 = ADDRESS_CAPABILITY.CALLFEATURES1;
pub const AC_CALLFEATURES2 = ADDRESS_CAPABILITY.CALLFEATURES2;
pub const AC_REMOVEFROMCONFCAPS = ADDRESS_CAPABILITY.REMOVEFROMCONFCAPS;
pub const AC_REMOVEFROMCONFSTATE = ADDRESS_CAPABILITY.REMOVEFROMCONFSTATE;
pub const AC_TRANSFERMODES = ADDRESS_CAPABILITY.TRANSFERMODES;
pub const AC_ADDRESSFEATURES = ADDRESS_CAPABILITY.ADDRESSFEATURES;
pub const AC_PREDICTIVEAUTOTRANSFERSTATES = ADDRESS_CAPABILITY.PREDICTIVEAUTOTRANSFERSTATES;
pub const AC_MAXCALLDATASIZE = ADDRESS_CAPABILITY.MAXCALLDATASIZE;
pub const AC_LINEID = ADDRESS_CAPABILITY.LINEID;
pub const AC_ADDRESSID = ADDRESS_CAPABILITY.ADDRESSID;
pub const AC_FORWARDMODES = ADDRESS_CAPABILITY.FORWARDMODES;
pub const AC_MAXFORWARDENTRIES = ADDRESS_CAPABILITY.MAXFORWARDENTRIES;
pub const AC_MAXSPECIFICENTRIES = ADDRESS_CAPABILITY.MAXSPECIFICENTRIES;
pub const AC_MINFWDNUMRINGS = ADDRESS_CAPABILITY.MINFWDNUMRINGS;
pub const AC_MAXFWDNUMRINGS = ADDRESS_CAPABILITY.MAXFWDNUMRINGS;
pub const AC_MAXCALLCOMPLETIONS = ADDRESS_CAPABILITY.MAXCALLCOMPLETIONS;
pub const AC_CALLCOMPLETIONCONDITIONS = ADDRESS_CAPABILITY.CALLCOMPLETIONCONDITIONS;
pub const AC_CALLCOMPLETIONMODES = ADDRESS_CAPABILITY.CALLCOMPLETIONMODES;
pub const AC_PERMANENTDEVICEID = ADDRESS_CAPABILITY.PERMANENTDEVICEID;
pub const AC_GATHERDIGITSMINTIMEOUT = ADDRESS_CAPABILITY.GATHERDIGITSMINTIMEOUT;
pub const AC_GATHERDIGITSMAXTIMEOUT = ADDRESS_CAPABILITY.GATHERDIGITSMAXTIMEOUT;
pub const AC_GENERATEDIGITMINDURATION = ADDRESS_CAPABILITY.GENERATEDIGITMINDURATION;
pub const AC_GENERATEDIGITMAXDURATION = ADDRESS_CAPABILITY.GENERATEDIGITMAXDURATION;
pub const AC_GENERATEDIGITDEFAULTDURATION = ADDRESS_CAPABILITY.GENERATEDIGITDEFAULTDURATION;

pub const ADDRESS_CAPABILITY_STRING = enum(i32) {
    PROTOCOL = 0,
    ADDRESSDEVICESPECIFIC = 1,
    LINEDEVICESPECIFIC = 2,
    PROVIDERSPECIFIC = 3,
    SWITCHSPECIFIC = 4,
    PERMANENTDEVICEGUID = 5,
};
pub const ACS_PROTOCOL = ADDRESS_CAPABILITY_STRING.PROTOCOL;
pub const ACS_ADDRESSDEVICESPECIFIC = ADDRESS_CAPABILITY_STRING.ADDRESSDEVICESPECIFIC;
pub const ACS_LINEDEVICESPECIFIC = ADDRESS_CAPABILITY_STRING.LINEDEVICESPECIFIC;
pub const ACS_PROVIDERSPECIFIC = ADDRESS_CAPABILITY_STRING.PROVIDERSPECIFIC;
pub const ACS_SWITCHSPECIFIC = ADDRESS_CAPABILITY_STRING.SWITCHSPECIFIC;
pub const ACS_PERMANENTDEVICEGUID = ADDRESS_CAPABILITY_STRING.PERMANENTDEVICEGUID;

pub const FULLDUPLEX_SUPPORT = enum(i32) {
    SUPPORTED = 0,
    NOTSUPPORTED = 1,
    UNKNOWN = 2,
};
pub const FDS_SUPPORTED = FULLDUPLEX_SUPPORT.SUPPORTED;
pub const FDS_NOTSUPPORTED = FULLDUPLEX_SUPPORT.NOTSUPPORTED;
pub const FDS_UNKNOWN = FULLDUPLEX_SUPPORT.UNKNOWN;

pub const FINISH_MODE = enum(i32) {
    TRANSFER = 0,
    CONFERENCE = 1,
};
pub const FM_ASTRANSFER = FINISH_MODE.TRANSFER;
pub const FM_ASCONFERENCE = FINISH_MODE.CONFERENCE;

pub const PHONE_PRIVILEGE = enum(i32) {
    OWNER = 0,
    MONITOR = 1,
};
pub const PP_OWNER = PHONE_PRIVILEGE.OWNER;
pub const PP_MONITOR = PHONE_PRIVILEGE.MONITOR;

pub const PHONE_HOOK_SWITCH_DEVICE = enum(i32) {
    HANDSET = 1,
    SPEAKERPHONE = 2,
    HEADSET = 4,
};
pub const PHSD_HANDSET = PHONE_HOOK_SWITCH_DEVICE.HANDSET;
pub const PHSD_SPEAKERPHONE = PHONE_HOOK_SWITCH_DEVICE.SPEAKERPHONE;
pub const PHSD_HEADSET = PHONE_HOOK_SWITCH_DEVICE.HEADSET;

pub const PHONE_HOOK_SWITCH_STATE = enum(i32) {
    NHOOK = 1,
    FFHOOK_MIC_ONLY = 2,
    FFHOOK_SPEAKER_ONLY = 4,
    FFHOOK = 8,
};
pub const PHSS_ONHOOK = PHONE_HOOK_SWITCH_STATE.NHOOK;
pub const PHSS_OFFHOOK_MIC_ONLY = PHONE_HOOK_SWITCH_STATE.FFHOOK_MIC_ONLY;
pub const PHSS_OFFHOOK_SPEAKER_ONLY = PHONE_HOOK_SWITCH_STATE.FFHOOK_SPEAKER_ONLY;
pub const PHSS_OFFHOOK = PHONE_HOOK_SWITCH_STATE.FFHOOK;

pub const PHONE_LAMP_MODE = enum(i32) {
    DUMMY = 1,
    OFF = 2,
    STEADY = 4,
    WINK = 8,
    FLASH = 16,
    FLUTTER = 32,
    BROKENFLUTTER = 64,
    UNKNOWN = 128,
};
pub const LM_DUMMY = PHONE_LAMP_MODE.DUMMY;
pub const LM_OFF = PHONE_LAMP_MODE.OFF;
pub const LM_STEADY = PHONE_LAMP_MODE.STEADY;
pub const LM_WINK = PHONE_LAMP_MODE.WINK;
pub const LM_FLASH = PHONE_LAMP_MODE.FLASH;
pub const LM_FLUTTER = PHONE_LAMP_MODE.FLUTTER;
pub const LM_BROKENFLUTTER = PHONE_LAMP_MODE.BROKENFLUTTER;
pub const LM_UNKNOWN = PHONE_LAMP_MODE.UNKNOWN;

pub const PHONECAPS_LONG = enum(i32) {
    HOOKSWITCHES = 0,
    HANDSETHOOKSWITCHMODES = 1,
    HEADSETHOOKSWITCHMODES = 2,
    SPEAKERPHONEHOOKSWITCHMODES = 3,
    DISPLAYNUMROWS = 4,
    DISPLAYNUMCOLUMNS = 5,
    NUMRINGMODES = 6,
    NUMBUTTONLAMPS = 7,
    GENERICPHONE = 8,
};
pub const PCL_HOOKSWITCHES = PHONECAPS_LONG.HOOKSWITCHES;
pub const PCL_HANDSETHOOKSWITCHMODES = PHONECAPS_LONG.HANDSETHOOKSWITCHMODES;
pub const PCL_HEADSETHOOKSWITCHMODES = PHONECAPS_LONG.HEADSETHOOKSWITCHMODES;
pub const PCL_SPEAKERPHONEHOOKSWITCHMODES = PHONECAPS_LONG.SPEAKERPHONEHOOKSWITCHMODES;
pub const PCL_DISPLAYNUMROWS = PHONECAPS_LONG.DISPLAYNUMROWS;
pub const PCL_DISPLAYNUMCOLUMNS = PHONECAPS_LONG.DISPLAYNUMCOLUMNS;
pub const PCL_NUMRINGMODES = PHONECAPS_LONG.NUMRINGMODES;
pub const PCL_NUMBUTTONLAMPS = PHONECAPS_LONG.NUMBUTTONLAMPS;
pub const PCL_GENERICPHONE = PHONECAPS_LONG.GENERICPHONE;

pub const PHONECAPS_STRING = enum(i32) {
    HONENAME = 0,
    HONEINFO = 1,
    ROVIDERINFO = 2,
};
pub const PCS_PHONENAME = PHONECAPS_STRING.HONENAME;
pub const PCS_PHONEINFO = PHONECAPS_STRING.HONEINFO;
pub const PCS_PROVIDERINFO = PHONECAPS_STRING.ROVIDERINFO;

pub const PHONECAPS_BUFFER = enum(i32) {
    R = 0,
};
pub const PCB_DEVSPECIFICBUFFER = PHONECAPS_BUFFER.R;

pub const PHONE_BUTTON_STATE = enum(i32) {
    UP = 1,
    DOWN = 2,
    UNKNOWN = 4,
    UNAVAIL = 8,
};
pub const PBS_UP = PHONE_BUTTON_STATE.UP;
pub const PBS_DOWN = PHONE_BUTTON_STATE.DOWN;
pub const PBS_UNKNOWN = PHONE_BUTTON_STATE.UNKNOWN;
pub const PBS_UNAVAIL = PHONE_BUTTON_STATE.UNAVAIL;

pub const PHONE_BUTTON_MODE = enum(i32) {
    DUMMY = 0,
    CALL = 1,
    FEATURE = 2,
    KEYPAD = 3,
    LOCAL = 4,
    DISPLAY = 5,
};
pub const PBM_DUMMY = PHONE_BUTTON_MODE.DUMMY;
pub const PBM_CALL = PHONE_BUTTON_MODE.CALL;
pub const PBM_FEATURE = PHONE_BUTTON_MODE.FEATURE;
pub const PBM_KEYPAD = PHONE_BUTTON_MODE.KEYPAD;
pub const PBM_LOCAL = PHONE_BUTTON_MODE.LOCAL;
pub const PBM_DISPLAY = PHONE_BUTTON_MODE.DISPLAY;

pub const PHONE_BUTTON_FUNCTION = enum(i32) {
    UNKNOWN = 0,
    CONFERENCE = 1,
    TRANSFER = 2,
    DROP = 3,
    HOLD = 4,
    RECALL = 5,
    DISCONNECT = 6,
    CONNECT = 7,
    MSGWAITON = 8,
    MSGWAITOFF = 9,
    SELECTRING = 10,
    ABBREVDIAL = 11,
    FORWARD = 12,
    PICKUP = 13,
    RINGAGAIN = 14,
    PARK = 15,
    REJECT = 16,
    REDIRECT = 17,
    MUTE = 18,
    VOLUMEUP = 19,
    VOLUMEDOWN = 20,
    SPEAKERON = 21,
    SPEAKEROFF = 22,
    FLASH = 23,
    DATAON = 24,
    DATAOFF = 25,
    DONOTDISTURB = 26,
    INTERCOM = 27,
    BRIDGEDAPP = 28,
    BUSY = 29,
    CALLAPP = 30,
    DATETIME = 31,
    DIRECTORY = 32,
    COVER = 33,
    CALLID = 34,
    LASTNUM = 35,
    NIGHTSRV = 36,
    SENDCALLS = 37,
    MSGINDICATOR = 38,
    REPDIAL = 39,
    SETREPDIAL = 40,
    SYSTEMSPEED = 41,
    STATIONSPEED = 42,
    CAMPON = 43,
    SAVEREPEAT = 44,
    QUEUECALL = 45,
    NONE = 46,
    SEND = 47,
};
pub const PBF_UNKNOWN = PHONE_BUTTON_FUNCTION.UNKNOWN;
pub const PBF_CONFERENCE = PHONE_BUTTON_FUNCTION.CONFERENCE;
pub const PBF_TRANSFER = PHONE_BUTTON_FUNCTION.TRANSFER;
pub const PBF_DROP = PHONE_BUTTON_FUNCTION.DROP;
pub const PBF_HOLD = PHONE_BUTTON_FUNCTION.HOLD;
pub const PBF_RECALL = PHONE_BUTTON_FUNCTION.RECALL;
pub const PBF_DISCONNECT = PHONE_BUTTON_FUNCTION.DISCONNECT;
pub const PBF_CONNECT = PHONE_BUTTON_FUNCTION.CONNECT;
pub const PBF_MSGWAITON = PHONE_BUTTON_FUNCTION.MSGWAITON;
pub const PBF_MSGWAITOFF = PHONE_BUTTON_FUNCTION.MSGWAITOFF;
pub const PBF_SELECTRING = PHONE_BUTTON_FUNCTION.SELECTRING;
pub const PBF_ABBREVDIAL = PHONE_BUTTON_FUNCTION.ABBREVDIAL;
pub const PBF_FORWARD = PHONE_BUTTON_FUNCTION.FORWARD;
pub const PBF_PICKUP = PHONE_BUTTON_FUNCTION.PICKUP;
pub const PBF_RINGAGAIN = PHONE_BUTTON_FUNCTION.RINGAGAIN;
pub const PBF_PARK = PHONE_BUTTON_FUNCTION.PARK;
pub const PBF_REJECT = PHONE_BUTTON_FUNCTION.REJECT;
pub const PBF_REDIRECT = PHONE_BUTTON_FUNCTION.REDIRECT;
pub const PBF_MUTE = PHONE_BUTTON_FUNCTION.MUTE;
pub const PBF_VOLUMEUP = PHONE_BUTTON_FUNCTION.VOLUMEUP;
pub const PBF_VOLUMEDOWN = PHONE_BUTTON_FUNCTION.VOLUMEDOWN;
pub const PBF_SPEAKERON = PHONE_BUTTON_FUNCTION.SPEAKERON;
pub const PBF_SPEAKEROFF = PHONE_BUTTON_FUNCTION.SPEAKEROFF;
pub const PBF_FLASH = PHONE_BUTTON_FUNCTION.FLASH;
pub const PBF_DATAON = PHONE_BUTTON_FUNCTION.DATAON;
pub const PBF_DATAOFF = PHONE_BUTTON_FUNCTION.DATAOFF;
pub const PBF_DONOTDISTURB = PHONE_BUTTON_FUNCTION.DONOTDISTURB;
pub const PBF_INTERCOM = PHONE_BUTTON_FUNCTION.INTERCOM;
pub const PBF_BRIDGEDAPP = PHONE_BUTTON_FUNCTION.BRIDGEDAPP;
pub const PBF_BUSY = PHONE_BUTTON_FUNCTION.BUSY;
pub const PBF_CALLAPP = PHONE_BUTTON_FUNCTION.CALLAPP;
pub const PBF_DATETIME = PHONE_BUTTON_FUNCTION.DATETIME;
pub const PBF_DIRECTORY = PHONE_BUTTON_FUNCTION.DIRECTORY;
pub const PBF_COVER = PHONE_BUTTON_FUNCTION.COVER;
pub const PBF_CALLID = PHONE_BUTTON_FUNCTION.CALLID;
pub const PBF_LASTNUM = PHONE_BUTTON_FUNCTION.LASTNUM;
pub const PBF_NIGHTSRV = PHONE_BUTTON_FUNCTION.NIGHTSRV;
pub const PBF_SENDCALLS = PHONE_BUTTON_FUNCTION.SENDCALLS;
pub const PBF_MSGINDICATOR = PHONE_BUTTON_FUNCTION.MSGINDICATOR;
pub const PBF_REPDIAL = PHONE_BUTTON_FUNCTION.REPDIAL;
pub const PBF_SETREPDIAL = PHONE_BUTTON_FUNCTION.SETREPDIAL;
pub const PBF_SYSTEMSPEED = PHONE_BUTTON_FUNCTION.SYSTEMSPEED;
pub const PBF_STATIONSPEED = PHONE_BUTTON_FUNCTION.STATIONSPEED;
pub const PBF_CAMPON = PHONE_BUTTON_FUNCTION.CAMPON;
pub const PBF_SAVEREPEAT = PHONE_BUTTON_FUNCTION.SAVEREPEAT;
pub const PBF_QUEUECALL = PHONE_BUTTON_FUNCTION.QUEUECALL;
pub const PBF_NONE = PHONE_BUTTON_FUNCTION.NONE;
pub const PBF_SEND = PHONE_BUTTON_FUNCTION.SEND;

pub const PHONE_TONE = enum(i32) {
    KEYPADZERO = 0,
    KEYPADONE = 1,
    KEYPADTWO = 2,
    KEYPADTHREE = 3,
    KEYPADFOUR = 4,
    KEYPADFIVE = 5,
    KEYPADSIX = 6,
    KEYPADSEVEN = 7,
    KEYPADEIGHT = 8,
    KEYPADNINE = 9,
    KEYPADSTAR = 10,
    KEYPADPOUND = 11,
    KEYPADA = 12,
    KEYPADB = 13,
    KEYPADC = 14,
    KEYPADD = 15,
    NORMALDIALTONE = 16,
    EXTERNALDIALTONE = 17,
    BUSY = 18,
    RINGBACK = 19,
    ERRORTONE = 20,
    SILENCE = 21,
};
pub const PT_KEYPADZERO = PHONE_TONE.KEYPADZERO;
pub const PT_KEYPADONE = PHONE_TONE.KEYPADONE;
pub const PT_KEYPADTWO = PHONE_TONE.KEYPADTWO;
pub const PT_KEYPADTHREE = PHONE_TONE.KEYPADTHREE;
pub const PT_KEYPADFOUR = PHONE_TONE.KEYPADFOUR;
pub const PT_KEYPADFIVE = PHONE_TONE.KEYPADFIVE;
pub const PT_KEYPADSIX = PHONE_TONE.KEYPADSIX;
pub const PT_KEYPADSEVEN = PHONE_TONE.KEYPADSEVEN;
pub const PT_KEYPADEIGHT = PHONE_TONE.KEYPADEIGHT;
pub const PT_KEYPADNINE = PHONE_TONE.KEYPADNINE;
pub const PT_KEYPADSTAR = PHONE_TONE.KEYPADSTAR;
pub const PT_KEYPADPOUND = PHONE_TONE.KEYPADPOUND;
pub const PT_KEYPADA = PHONE_TONE.KEYPADA;
pub const PT_KEYPADB = PHONE_TONE.KEYPADB;
pub const PT_KEYPADC = PHONE_TONE.KEYPADC;
pub const PT_KEYPADD = PHONE_TONE.KEYPADD;
pub const PT_NORMALDIALTONE = PHONE_TONE.NORMALDIALTONE;
pub const PT_EXTERNALDIALTONE = PHONE_TONE.EXTERNALDIALTONE;
pub const PT_BUSY = PHONE_TONE.BUSY;
pub const PT_RINGBACK = PHONE_TONE.RINGBACK;
pub const PT_ERRORTONE = PHONE_TONE.ERRORTONE;
pub const PT_SILENCE = PHONE_TONE.SILENCE;

pub const PHONE_EVENT = enum(i32) {
    DISPLAY = 0,
    LAMPMODE = 1,
    RINGMODE = 2,
    RINGVOLUME = 3,
    HOOKSWITCH = 4,
    CAPSCHANGE = 5,
    BUTTON = 6,
    CLOSE = 7,
    NUMBERGATHERED = 8,
    DIALING = 9,
    ANSWER = 10,
    DISCONNECT = 11,
    // LASTITEM = 11, this enum value conflicts with DISCONNECT
};
pub const PE_DISPLAY = PHONE_EVENT.DISPLAY;
pub const PE_LAMPMODE = PHONE_EVENT.LAMPMODE;
pub const PE_RINGMODE = PHONE_EVENT.RINGMODE;
pub const PE_RINGVOLUME = PHONE_EVENT.RINGVOLUME;
pub const PE_HOOKSWITCH = PHONE_EVENT.HOOKSWITCH;
pub const PE_CAPSCHANGE = PHONE_EVENT.CAPSCHANGE;
pub const PE_BUTTON = PHONE_EVENT.BUTTON;
pub const PE_CLOSE = PHONE_EVENT.CLOSE;
pub const PE_NUMBERGATHERED = PHONE_EVENT.NUMBERGATHERED;
pub const PE_DIALING = PHONE_EVENT.DIALING;
pub const PE_ANSWER = PHONE_EVENT.ANSWER;
pub const PE_DISCONNECT = PHONE_EVENT.DISCONNECT;
pub const PE_LASTITEM = PHONE_EVENT.DISCONNECT;

const IID_ITTAPI_Value = Guid.initString("b1efc382-9355-11d0-835c-00aa003ccabd");
pub const IID_ITTAPI = &IID_ITTAPI_Value;
pub const ITTAPI = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const ITTAPI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const ITTAPI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Addresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPI,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAddresses: *const fn (
            self: *const ITTAPI,
            pp_enum_address: ?*?*IEnumAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterCallNotifications: *const fn (
            self: *const ITTAPI,
            p_address: ?*ITAddress,
            f_monitor: i16,
            f_owner: i16,
            l_media_types: i32,
            l_callback_instance: i32,
            pl_register: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterNotifications: *const fn (
            self: *const ITTAPI,
            l_register: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallHubs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPI,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateCallHubs: *const fn (
            self: *const ITTAPI,
            pp_enum_call_hub: ?*?*IEnumCallHub,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCallHubTracking: *const fn (
            self: *const ITTAPI,
            p_addresses: VARIANT,
            b_tracking: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePrivateTAPIObjects: *const fn (
            self: *const ITTAPI,
            pp_enum_unknown: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateTAPIObjects: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPI,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterRequestRecipient: *const fn (
            self: *const ITTAPI,
            l_registration_instance: i32,
            l_request_mode: i32,
            f_enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAssistedTelephonyPriority: *const fn (
            self: *const ITTAPI,
            p_app_filename: ?BSTR,
            f_priority: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationPriority: *const fn (
            self: *const ITTAPI,
            p_app_filename: ?BSTR,
            l_media_type: i32,
            f_priority: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPI,
            l_filter_mask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPI,
            pl_filter_mask: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ITTAPI, @ptrCast(self)));
            }
            pub inline fn shutdown(self: *const T) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const ITTAPI, @ptrCast(self)));
            }
            pub inline fn getAddresses(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).get_Addresses(@as(*const ITTAPI, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateAddresses(self: *const T, pp_enum_address_: ?*?*IEnumAddress) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).EnumerateAddresses(@as(*const ITTAPI, @ptrCast(self)), pp_enum_address_);
            }
            pub inline fn registerCallNotifications(self: *const T, p_address_: ?*ITAddress, f_monitor_: i16, f_owner_: i16, l_media_types_: i32, l_callback_instance_: i32, pl_register_: ?*i32) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).RegisterCallNotifications(@as(*const ITTAPI, @ptrCast(self)), p_address_, f_monitor_, f_owner_, l_media_types_, l_callback_instance_, pl_register_);
            }
            pub inline fn unregisterNotifications(self: *const T, l_register_: i32) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).UnregisterNotifications(@as(*const ITTAPI, @ptrCast(self)), l_register_);
            }
            pub inline fn getCallHubs(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).get_CallHubs(@as(*const ITTAPI, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateCallHubs(self: *const T, pp_enum_call_hub_: ?*?*IEnumCallHub) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).EnumerateCallHubs(@as(*const ITTAPI, @ptrCast(self)), pp_enum_call_hub_);
            }
            pub inline fn setCallHubTracking(self: *const T, p_addresses_: VARIANT, b_tracking_: i16) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).SetCallHubTracking(@as(*const ITTAPI, @ptrCast(self)), p_addresses_, b_tracking_);
            }
            pub inline fn enumeratePrivateTAPIObjects(self: *const T, pp_enum_unknown_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).EnumeratePrivateTAPIObjects(@as(*const ITTAPI, @ptrCast(self)), pp_enum_unknown_);
            }
            pub inline fn getPrivateTAPIObjects(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).get_PrivateTAPIObjects(@as(*const ITTAPI, @ptrCast(self)), p_variant_);
            }
            pub inline fn registerRequestRecipient(self: *const T, l_registration_instance_: i32, l_request_mode_: i32, f_enable_: i16) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).RegisterRequestRecipient(@as(*const ITTAPI, @ptrCast(self)), l_registration_instance_, l_request_mode_, f_enable_);
            }
            pub inline fn setAssistedTelephonyPriority(self: *const T, p_app_filename_: ?BSTR, f_priority_: i16) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).SetAssistedTelephonyPriority(@as(*const ITTAPI, @ptrCast(self)), p_app_filename_, f_priority_);
            }
            pub inline fn setApplicationPriority(self: *const T, p_app_filename_: ?BSTR, l_media_type_: i32, f_priority_: i16) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).SetApplicationPriority(@as(*const ITTAPI, @ptrCast(self)), p_app_filename_, l_media_type_, f_priority_);
            }
            pub inline fn putEventFilter(self: *const T, l_filter_mask_: i32) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).put_EventFilter(@as(*const ITTAPI, @ptrCast(self)), l_filter_mask_);
            }
            pub inline fn getEventFilter(self: *const T, pl_filter_mask_: ?*i32) HRESULT {
                return @as(*const ITTAPI.VTable, @ptrCast(self.vtable)).get_EventFilter(@as(*const ITTAPI, @ptrCast(self)), pl_filter_mask_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTAPI2_Value = Guid.initString("54fbdc8c-d90f-4dad-9695-b373097f094b");
pub const IID_ITTAPI2 = &IID_ITTAPI2_Value;
pub const ITTAPI2 = extern struct {
    pub const VTable = extern struct {
        base: ITTAPI.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Phones: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPI2,
            p_phones: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePhones: *const fn (
            self: *const ITTAPI2,
            pp_enum_phone: ?*?*IEnumPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEmptyCollectionObject: *const fn (
            self: *const ITTAPI2,
            pp_collection: ?*?*ITCollection2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITTAPI.MethodMixin(T);
            pub inline fn getPhones(self: *const T, p_phones_: ?*VARIANT) HRESULT {
                return @as(*const ITTAPI2.VTable, @ptrCast(self.vtable)).get_Phones(@as(*const ITTAPI2, @ptrCast(self)), p_phones_);
            }
            pub inline fn enumeratePhones(self: *const T, pp_enum_phone_: ?*?*IEnumPhone) HRESULT {
                return @as(*const ITTAPI2.VTable, @ptrCast(self.vtable)).EnumeratePhones(@as(*const ITTAPI2, @ptrCast(self)), pp_enum_phone_);
            }
            pub inline fn createEmptyCollectionObject(self: *const T, pp_collection_: ?*?*ITCollection2) HRESULT {
                return @as(*const ITTAPI2.VTable, @ptrCast(self.vtable)).CreateEmptyCollectionObject(@as(*const ITTAPI2, @ptrCast(self)), pp_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITMediaSupport_Value = Guid.initString("b1efc384-9355-11d0-835c-00aa003ccabd");
pub const IID_ITMediaSupport = &IID_ITMediaSupport_Value;
pub const ITMediaSupport = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITMediaSupport,
            pl_media_types: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryMediaType: *const fn (
            self: *const ITMediaSupport,
            l_media_type: i32,
            pf_support: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getMediaTypes(self: *const T, pl_media_types_: ?*i32) HRESULT {
                return @as(*const ITMediaSupport.VTable, @ptrCast(self.vtable)).get_MediaTypes(@as(*const ITMediaSupport, @ptrCast(self)), pl_media_types_);
            }
            pub inline fn queryMediaType(self: *const T, l_media_type_: i32, pf_support_: ?*i16) HRESULT {
                return @as(*const ITMediaSupport.VTable, @ptrCast(self.vtable)).QueryMediaType(@as(*const ITMediaSupport, @ptrCast(self)), l_media_type_, pf_support_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITPluggableTerminalClassInfo_Value = Guid.initString("41757f4a-cf09-4b34-bc96-0a79d2390076");
pub const IID_ITPluggableTerminalClassInfo = &IID_ITPluggableTerminalClassInfo_Value;
pub const ITPluggableTerminalClassInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPluggableTerminalClassInfo,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Company: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPluggableTerminalClassInfo,
            p_company: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPluggableTerminalClassInfo,
            p_version: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TerminalClass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPluggableTerminalClassInfo,
            p_terminal_class: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPluggableTerminalClassInfo,
            p_c_l_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Direction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPluggableTerminalClassInfo,
            p_direction: ?*TERMINAL_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPluggableTerminalClassInfo,
            p_media_types: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const ITPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITPluggableTerminalClassInfo, @ptrCast(self)), p_name_);
            }
            pub inline fn getCompany(self: *const T, p_company_: ?*?BSTR) HRESULT {
                return @as(*const ITPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).get_Company(@as(*const ITPluggableTerminalClassInfo, @ptrCast(self)), p_company_);
            }
            pub inline fn getVersion(self: *const T, p_version_: ?*?BSTR) HRESULT {
                return @as(*const ITPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).get_Version(@as(*const ITPluggableTerminalClassInfo, @ptrCast(self)), p_version_);
            }
            pub inline fn getTerminalClass(self: *const T, p_terminal_class_: ?*?BSTR) HRESULT {
                return @as(*const ITPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).get_TerminalClass(@as(*const ITPluggableTerminalClassInfo, @ptrCast(self)), p_terminal_class_);
            }
            pub inline fn getCLSID(self: *const T, p_c_l_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const ITPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).get_CLSID(@as(*const ITPluggableTerminalClassInfo, @ptrCast(self)), p_c_l_s_i_d_);
            }
            pub inline fn getDirection(self: *const T, p_direction_: ?*TERMINAL_DIRECTION) HRESULT {
                return @as(*const ITPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).get_Direction(@as(*const ITPluggableTerminalClassInfo, @ptrCast(self)), p_direction_);
            }
            pub inline fn getMediaTypes(self: *const T, p_media_types_: ?*i32) HRESULT {
                return @as(*const ITPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).get_MediaTypes(@as(*const ITPluggableTerminalClassInfo, @ptrCast(self)), p_media_types_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITPluggableTerminalSuperclassInfo_Value = Guid.initString("6d54e42c-4625-4359-a6f7-631999107e05");
pub const IID_ITPluggableTerminalSuperclassInfo = &IID_ITPluggableTerminalSuperclassInfo_Value;
pub const ITPluggableTerminalSuperclassInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPluggableTerminalSuperclassInfo,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPluggableTerminalSuperclassInfo,
            p_c_l_s_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const ITPluggableTerminalSuperclassInfo.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITPluggableTerminalSuperclassInfo, @ptrCast(self)), p_name_);
            }
            pub inline fn getCLSID(self: *const T, p_c_l_s_i_d_: ?*?BSTR) HRESULT {
                return @as(*const ITPluggableTerminalSuperclassInfo.VTable, @ptrCast(self.vtable)).get_CLSID(@as(*const ITPluggableTerminalSuperclassInfo, @ptrCast(self)), p_c_l_s_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTerminalSupport_Value = Guid.initString("b1efc385-9355-11d0-835c-00aa003ccabd");
pub const IID_ITTerminalSupport = &IID_ITTerminalSupport_Value;
pub const ITTerminalSupport = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StaticTerminals: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminalSupport,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateStaticTerminals: *const fn (
            self: *const ITTerminalSupport,
            pp_terminal_enumerator: ?*?*IEnumTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DynamicTerminalClasses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminalSupport,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateDynamicTerminalClasses: *const fn (
            self: *const ITTerminalSupport,
            pp_terminal_class_enumerator: ?*?*IEnumTerminalClass,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTerminal: *const fn (
            self: *const ITTerminalSupport,
            p_terminal_class: ?BSTR,
            l_media_type: i32,
            direction: TERMINAL_DIRECTION,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultStaticTerminal: *const fn (
            self: *const ITTerminalSupport,
            l_media_type: i32,
            direction: TERMINAL_DIRECTION,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStaticTerminals(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITTerminalSupport.VTable, @ptrCast(self.vtable)).get_StaticTerminals(@as(*const ITTerminalSupport, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateStaticTerminals(self: *const T, pp_terminal_enumerator_: ?*?*IEnumTerminal) HRESULT {
                return @as(*const ITTerminalSupport.VTable, @ptrCast(self.vtable)).EnumerateStaticTerminals(@as(*const ITTerminalSupport, @ptrCast(self)), pp_terminal_enumerator_);
            }
            pub inline fn getDynamicTerminalClasses(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITTerminalSupport.VTable, @ptrCast(self.vtable)).get_DynamicTerminalClasses(@as(*const ITTerminalSupport, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateDynamicTerminalClasses(self: *const T, pp_terminal_class_enumerator_: ?*?*IEnumTerminalClass) HRESULT {
                return @as(*const ITTerminalSupport.VTable, @ptrCast(self.vtable)).EnumerateDynamicTerminalClasses(@as(*const ITTerminalSupport, @ptrCast(self)), pp_terminal_class_enumerator_);
            }
            pub inline fn createTerminal(self: *const T, p_terminal_class_: ?BSTR, l_media_type_: i32, direction_: TERMINAL_DIRECTION, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITTerminalSupport.VTable, @ptrCast(self.vtable)).CreateTerminal(@as(*const ITTerminalSupport, @ptrCast(self)), p_terminal_class_, l_media_type_, direction_, pp_terminal_);
            }
            pub inline fn getDefaultStaticTerminal(self: *const T, l_media_type_: i32, direction_: TERMINAL_DIRECTION, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITTerminalSupport.VTable, @ptrCast(self.vtable)).GetDefaultStaticTerminal(@as(*const ITTerminalSupport, @ptrCast(self)), l_media_type_, direction_, pp_terminal_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTerminalSupport2_Value = Guid.initString("f3eb39bc-1b1f-4e99-a0c0-56305c4dd591");
pub const IID_ITTerminalSupport2 = &IID_ITTerminalSupport2_Value;
pub const ITTerminalSupport2 = extern struct {
    pub const VTable = extern struct {
        base: ITTerminalSupport.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PluggableSuperclasses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminalSupport2,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePluggableSuperclasses: *const fn (
            self: *const ITTerminalSupport2,
            pp_superclass_enumerator: ?*?*IEnumPluggableSuperclassInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PluggableTerminalClasses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminalSupport2,
            bstr_terminal_superclass: ?BSTR,
            l_media_type: i32,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePluggableTerminalClasses: *const fn (
            self: *const ITTerminalSupport2,
            iid_terminal_superclass: Guid,
            l_media_type: i32,
            pp_class_enumerator: ?*?*IEnumPluggableTerminalClassInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITTerminalSupport.MethodMixin(T);
            pub inline fn getPluggableSuperclasses(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITTerminalSupport2.VTable, @ptrCast(self.vtable)).get_PluggableSuperclasses(@as(*const ITTerminalSupport2, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumeratePluggableSuperclasses(self: *const T, pp_superclass_enumerator_: ?*?*IEnumPluggableSuperclassInfo) HRESULT {
                return @as(*const ITTerminalSupport2.VTable, @ptrCast(self.vtable)).EnumeratePluggableSuperclasses(@as(*const ITTerminalSupport2, @ptrCast(self)), pp_superclass_enumerator_);
            }
            pub inline fn getPluggableTerminalClasses(self: *const T, bstr_terminal_superclass_: ?BSTR, l_media_type_: i32, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITTerminalSupport2.VTable, @ptrCast(self.vtable)).get_PluggableTerminalClasses(@as(*const ITTerminalSupport2, @ptrCast(self)), bstr_terminal_superclass_, l_media_type_, p_variant_);
            }
            pub inline fn enumeratePluggableTerminalClasses(self: *const T, iid_terminal_superclass_: Guid, l_media_type_: i32, pp_class_enumerator_: ?*?*IEnumPluggableTerminalClassInfo) HRESULT {
                return @as(*const ITTerminalSupport2.VTable, @ptrCast(self.vtable)).EnumeratePluggableTerminalClasses(@as(*const ITTerminalSupport2, @ptrCast(self)), iid_terminal_superclass_, l_media_type_, pp_class_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAddress_Value = Guid.initString("b1efc386-9355-11d0-835c-00aa003ccabd");
pub const IID_ITAddress = &IID_ITAddress_Value;
pub const ITAddress = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            p_address_state: ?*ADDRESS_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddressName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            pp_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            pp_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TAPIObject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            pp_tapi_object: ?*?*ITTAPI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCall: *const fn (
            self: *const ITAddress,
            p_dest_address: ?BSTR,
            l_address_type: i32,
            l_media_types: i32,
            pp_call: ?*?*ITBasicCallControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Calls: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateCalls: *const fn (
            self: *const ITAddress,
            pp_call_enum: ?*?*IEnumCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DialableAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            p_dialable_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateForwardInfoObject: *const fn (
            self: *const ITAddress,
            pp_forward_info: ?*?*ITForwardInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forward: *const fn (
            self: *const ITAddress,
            p_forward_info: ?*ITForwardInformation,
            p_call: ?*ITBasicCallControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentForwardInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            pp_forward_info: ?*?*ITForwardInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MessageWaiting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            f_message_waiting: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MessageWaiting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            pf_message_waiting: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DoNotDisturb: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            f_do_not_disturb: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DoNotDisturb: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress,
            pf_do_not_disturb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getState(self: *const T, p_address_state_: ?*ADDRESS_STATE) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).get_State(@as(*const ITAddress, @ptrCast(self)), p_address_state_);
            }
            pub inline fn getAddressName(self: *const T, pp_name_: ?*?BSTR) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).get_AddressName(@as(*const ITAddress, @ptrCast(self)), pp_name_);
            }
            pub inline fn getServiceProviderName(self: *const T, pp_name_: ?*?BSTR) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).get_ServiceProviderName(@as(*const ITAddress, @ptrCast(self)), pp_name_);
            }
            pub inline fn getTAPIObject(self: *const T, pp_tapi_object_: ?*?*ITTAPI) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).get_TAPIObject(@as(*const ITAddress, @ptrCast(self)), pp_tapi_object_);
            }
            pub inline fn createCall(self: *const T, p_dest_address_: ?BSTR, l_address_type_: i32, l_media_types_: i32, pp_call_: ?*?*ITBasicCallControl) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).CreateCall(@as(*const ITAddress, @ptrCast(self)), p_dest_address_, l_address_type_, l_media_types_, pp_call_);
            }
            pub inline fn getCalls(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).get_Calls(@as(*const ITAddress, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateCalls(self: *const T, pp_call_enum_: ?*?*IEnumCall) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).EnumerateCalls(@as(*const ITAddress, @ptrCast(self)), pp_call_enum_);
            }
            pub inline fn getDialableAddress(self: *const T, p_dialable_address_: ?*?BSTR) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).get_DialableAddress(@as(*const ITAddress, @ptrCast(self)), p_dialable_address_);
            }
            pub inline fn createForwardInfoObject(self: *const T, pp_forward_info_: ?*?*ITForwardInformation) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).CreateForwardInfoObject(@as(*const ITAddress, @ptrCast(self)), pp_forward_info_);
            }
            pub inline fn forward(self: *const T, p_forward_info_: ?*ITForwardInformation, p_call_: ?*ITBasicCallControl) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).Forward(@as(*const ITAddress, @ptrCast(self)), p_forward_info_, p_call_);
            }
            pub inline fn getCurrentForwardInfo(self: *const T, pp_forward_info_: ?*?*ITForwardInformation) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).get_CurrentForwardInfo(@as(*const ITAddress, @ptrCast(self)), pp_forward_info_);
            }
            pub inline fn putMessageWaiting(self: *const T, f_message_waiting_: i16) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).put_MessageWaiting(@as(*const ITAddress, @ptrCast(self)), f_message_waiting_);
            }
            pub inline fn getMessageWaiting(self: *const T, pf_message_waiting_: ?*i16) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).get_MessageWaiting(@as(*const ITAddress, @ptrCast(self)), pf_message_waiting_);
            }
            pub inline fn putDoNotDisturb(self: *const T, f_do_not_disturb_: i16) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).put_DoNotDisturb(@as(*const ITAddress, @ptrCast(self)), f_do_not_disturb_);
            }
            pub inline fn getDoNotDisturb(self: *const T, pf_do_not_disturb_: ?*i16) HRESULT {
                return @as(*const ITAddress.VTable, @ptrCast(self.vtable)).get_DoNotDisturb(@as(*const ITAddress, @ptrCast(self)), pf_do_not_disturb_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAddress2_Value = Guid.initString("b0ae5d9b-be51-46c9-b0f7-dfa8a22a8bc4");
pub const IID_ITAddress2 = &IID_ITAddress2_Value;
pub const ITAddress2 = extern struct {
    pub const VTable = extern struct {
        base: ITAddress.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Phones: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress2,
            p_phones: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePhones: *const fn (
            self: *const ITAddress2,
            pp_enum_phone: ?*?*IEnumPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPhoneFromTerminal: *const fn (
            self: *const ITAddress2,
            p_terminal: ?*ITTerminal,
            pp_phone: ?*?*ITPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredPhones: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress2,
            p_phones: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePreferredPhones: *const fn (
            self: *const ITAddress2,
            pp_enum_phone: ?*?*IEnumPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress2,
            tapi_event: TAPI_EVENT,
            l_sub_event: i32,
            p_enable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddress2,
            tapi_event: TAPI_EVENT,
            l_sub_event: i32,
            b_enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceSpecific: *const fn (
            self: *const ITAddress2,
            p_call: ?*ITCallInfo,
            p_params: ?*u8,
            dw_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceSpecificVariant: *const fn (
            self: *const ITAddress2,
            p_call: ?*ITCallInfo,
            var_dev_specific_byte_array: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NegotiateExtVersion: *const fn (
            self: *const ITAddress2,
            l_low_version: i32,
            l_high_version: i32,
            pl_ext_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITAddress.MethodMixin(T);
            pub inline fn getPhones(self: *const T, p_phones_: ?*VARIANT) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).get_Phones(@as(*const ITAddress2, @ptrCast(self)), p_phones_);
            }
            pub inline fn enumeratePhones(self: *const T, pp_enum_phone_: ?*?*IEnumPhone) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).EnumeratePhones(@as(*const ITAddress2, @ptrCast(self)), pp_enum_phone_);
            }
            pub inline fn getPhoneFromTerminal(self: *const T, p_terminal_: ?*ITTerminal, pp_phone_: ?*?*ITPhone) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).GetPhoneFromTerminal(@as(*const ITAddress2, @ptrCast(self)), p_terminal_, pp_phone_);
            }
            pub inline fn getPreferredPhones(self: *const T, p_phones_: ?*VARIANT) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).get_PreferredPhones(@as(*const ITAddress2, @ptrCast(self)), p_phones_);
            }
            pub inline fn enumeratePreferredPhones(self: *const T, pp_enum_phone_: ?*?*IEnumPhone) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).EnumeratePreferredPhones(@as(*const ITAddress2, @ptrCast(self)), pp_enum_phone_);
            }
            pub inline fn getEventFilter(self: *const T, tapi_event_: TAPI_EVENT, l_sub_event_: i32, p_enable_: ?*i16) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).get_EventFilter(@as(*const ITAddress2, @ptrCast(self)), tapi_event_, l_sub_event_, p_enable_);
            }
            pub inline fn putEventFilter(self: *const T, tapi_event_: TAPI_EVENT, l_sub_event_: i32, b_enable_: i16) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).put_EventFilter(@as(*const ITAddress2, @ptrCast(self)), tapi_event_, l_sub_event_, b_enable_);
            }
            pub inline fn deviceSpecific(self: *const T, p_call_: ?*ITCallInfo, p_params_: ?*u8, dw_size_: u32) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).DeviceSpecific(@as(*const ITAddress2, @ptrCast(self)), p_call_, p_params_, dw_size_);
            }
            pub inline fn deviceSpecificVariant(self: *const T, p_call_: ?*ITCallInfo, var_dev_specific_byte_array_: VARIANT) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).DeviceSpecificVariant(@as(*const ITAddress2, @ptrCast(self)), p_call_, var_dev_specific_byte_array_);
            }
            pub inline fn negotiateExtVersion(self: *const T, l_low_version_: i32, l_high_version_: i32, pl_ext_version_: ?*i32) HRESULT {
                return @as(*const ITAddress2.VTable, @ptrCast(self.vtable)).NegotiateExtVersion(@as(*const ITAddress2, @ptrCast(self)), l_low_version_, l_high_version_, pl_ext_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAddressCapabilities_Value = Guid.initString("8df232f5-821b-11d1-bb5c-00c04fb6809f");
pub const IID_ITAddressCapabilities = &IID_ITAddressCapabilities_Value;
pub const ITAddressCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddressCapability: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressCapabilities,
            address_cap: ADDRESS_CAPABILITY,
            pl_capability: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddressCapabilityString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressCapabilities,
            address_cap_string: ADDRESS_CAPABILITY_STRING,
            pp_capability_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallTreatments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressCapabilities,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateCallTreatments: *const fn (
            self: *const ITAddressCapabilities,
            pp_enum_call_treatment: ?*?*IEnumBstr,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CompletionMessages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressCapabilities,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateCompletionMessages: *const fn (
            self: *const ITAddressCapabilities,
            pp_enum_completion_message: ?*?*IEnumBstr,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceClasses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressCapabilities,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateDeviceClasses: *const fn (
            self: *const ITAddressCapabilities,
            pp_enum_device_class: ?*?*IEnumBstr,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAddressCapability(self: *const T, address_cap_: ADDRESS_CAPABILITY, pl_capability_: ?*i32) HRESULT {
                return @as(*const ITAddressCapabilities.VTable, @ptrCast(self.vtable)).get_AddressCapability(@as(*const ITAddressCapabilities, @ptrCast(self)), address_cap_, pl_capability_);
            }
            pub inline fn getAddressCapabilityString(self: *const T, address_cap_string_: ADDRESS_CAPABILITY_STRING, pp_capability_string_: ?*?BSTR) HRESULT {
                return @as(*const ITAddressCapabilities.VTable, @ptrCast(self.vtable)).get_AddressCapabilityString(@as(*const ITAddressCapabilities, @ptrCast(self)), address_cap_string_, pp_capability_string_);
            }
            pub inline fn getCallTreatments(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAddressCapabilities.VTable, @ptrCast(self.vtable)).get_CallTreatments(@as(*const ITAddressCapabilities, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateCallTreatments(self: *const T, pp_enum_call_treatment_: ?*?*IEnumBstr) HRESULT {
                return @as(*const ITAddressCapabilities.VTable, @ptrCast(self.vtable)).EnumerateCallTreatments(@as(*const ITAddressCapabilities, @ptrCast(self)), pp_enum_call_treatment_);
            }
            pub inline fn getCompletionMessages(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAddressCapabilities.VTable, @ptrCast(self.vtable)).get_CompletionMessages(@as(*const ITAddressCapabilities, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateCompletionMessages(self: *const T, pp_enum_completion_message_: ?*?*IEnumBstr) HRESULT {
                return @as(*const ITAddressCapabilities.VTable, @ptrCast(self.vtable)).EnumerateCompletionMessages(@as(*const ITAddressCapabilities, @ptrCast(self)), pp_enum_completion_message_);
            }
            pub inline fn getDeviceClasses(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAddressCapabilities.VTable, @ptrCast(self.vtable)).get_DeviceClasses(@as(*const ITAddressCapabilities, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateDeviceClasses(self: *const T, pp_enum_device_class_: ?*?*IEnumBstr) HRESULT {
                return @as(*const ITAddressCapabilities.VTable, @ptrCast(self.vtable)).EnumerateDeviceClasses(@as(*const ITAddressCapabilities, @ptrCast(self)), pp_enum_device_class_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITPhone_Value = Guid.initString("09d48db4-10cc-4388-9de7-a8465618975a");
pub const IID_ITPhone = &IID_ITPhone_Value;
pub const ITPhone = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Open: *const fn (
            self: *const ITPhone,
            privilege: PHONE_PRIVILEGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const ITPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Addresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            p_addresses: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAddresses: *const fn (
            self: *const ITPhone,
            pp_enum_address: ?*?*IEnumAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PhoneCapsLong: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            pcl_cap: PHONECAPS_LONG,
            pl_capability: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PhoneCapsString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            pcs_cap: PHONECAPS_STRING,
            pp_capability: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Terminals: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            p_address: ?*ITAddress,
            p_terminals: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateTerminals: *const fn (
            self: *const ITPhone,
            p_address: ?*ITAddress,
            pp_enum_terminal: ?*?*IEnumTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ButtonMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_button_i_d: i32,
            p_button_mode: ?*PHONE_BUTTON_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ButtonMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_button_i_d: i32,
            button_mode: PHONE_BUTTON_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ButtonFunction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_button_i_d: i32,
            p_button_function: ?*PHONE_BUTTON_FUNCTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ButtonFunction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_button_i_d: i32,
            button_function: PHONE_BUTTON_FUNCTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ButtonText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_button_i_d: i32,
            pp_button_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ButtonText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_button_i_d: i32,
            bstr_button_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ButtonState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_button_i_d: i32,
            p_button_state: ?*PHONE_BUTTON_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HookSwitchState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            hook_switch_device: PHONE_HOOK_SWITCH_DEVICE,
            p_hook_switch_state: ?*PHONE_HOOK_SWITCH_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HookSwitchState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            hook_switch_device: PHONE_HOOK_SWITCH_DEVICE,
            hook_switch_state: PHONE_HOOK_SWITCH_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RingMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_ring_mode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RingMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            pl_ring_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RingVolume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_ring_volume: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RingVolume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            pl_ring_volume: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Privilege: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            p_privilege: ?*PHONE_PRIVILEGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPhoneCapsBuffer: *const fn (
            self: *const ITPhone,
            pcb_caps: PHONECAPS_BUFFER,
            pdw_size: ?*u32,
            pp_phone_caps_buffer: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PhoneCapsBuffer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            pcb_caps: PHONECAPS_BUFFER,
            p_var_buffer: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LampMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_lamp_i_d: i32,
            p_lamp_mode: ?*PHONE_LAMP_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LampMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            l_lamp_i_d: i32,
            lamp_mode: PHONE_LAMP_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Display: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            pbstr_display: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDisplay: *const fn (
            self: *const ITPhone,
            l_row: i32,
            l_column: i32,
            bstr_display: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhone,
            p_addresses: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePreferredAddresses: *const fn (
            self: *const ITPhone,
            pp_enum_address: ?*?*IEnumAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceSpecific: *const fn (
            self: *const ITPhone,
            p_params: ?*u8,
            dw_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceSpecificVariant: *const fn (
            self: *const ITPhone,
            var_dev_specific_byte_array: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NegotiateExtVersion: *const fn (
            self: *const ITPhone,
            l_low_version: i32,
            l_high_version: i32,
            pl_ext_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn open(self: *const T, privilege_: PHONE_PRIVILEGE) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).Open(@as(*const ITPhone, @ptrCast(self)), privilege_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).Close(@as(*const ITPhone, @ptrCast(self)));
            }
            pub inline fn getAddresses(self: *const T, p_addresses_: ?*VARIANT) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_Addresses(@as(*const ITPhone, @ptrCast(self)), p_addresses_);
            }
            pub inline fn enumerateAddresses(self: *const T, pp_enum_address_: ?*?*IEnumAddress) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).EnumerateAddresses(@as(*const ITPhone, @ptrCast(self)), pp_enum_address_);
            }
            pub inline fn getPhoneCapsLong(self: *const T, pcl_cap_: PHONECAPS_LONG, pl_capability_: ?*i32) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_PhoneCapsLong(@as(*const ITPhone, @ptrCast(self)), pcl_cap_, pl_capability_);
            }
            pub inline fn getPhoneCapsString(self: *const T, pcs_cap_: PHONECAPS_STRING, pp_capability_: ?*?BSTR) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_PhoneCapsString(@as(*const ITPhone, @ptrCast(self)), pcs_cap_, pp_capability_);
            }
            pub inline fn getTerminals(self: *const T, p_address_: ?*ITAddress, p_terminals_: ?*VARIANT) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_Terminals(@as(*const ITPhone, @ptrCast(self)), p_address_, p_terminals_);
            }
            pub inline fn enumerateTerminals(self: *const T, p_address_: ?*ITAddress, pp_enum_terminal_: ?*?*IEnumTerminal) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).EnumerateTerminals(@as(*const ITPhone, @ptrCast(self)), p_address_, pp_enum_terminal_);
            }
            pub inline fn getButtonMode(self: *const T, l_button_i_d_: i32, p_button_mode_: ?*PHONE_BUTTON_MODE) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_ButtonMode(@as(*const ITPhone, @ptrCast(self)), l_button_i_d_, p_button_mode_);
            }
            pub inline fn putButtonMode(self: *const T, l_button_i_d_: i32, button_mode_: PHONE_BUTTON_MODE) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).put_ButtonMode(@as(*const ITPhone, @ptrCast(self)), l_button_i_d_, button_mode_);
            }
            pub inline fn getButtonFunction(self: *const T, l_button_i_d_: i32, p_button_function_: ?*PHONE_BUTTON_FUNCTION) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_ButtonFunction(@as(*const ITPhone, @ptrCast(self)), l_button_i_d_, p_button_function_);
            }
            pub inline fn putButtonFunction(self: *const T, l_button_i_d_: i32, button_function_: PHONE_BUTTON_FUNCTION) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).put_ButtonFunction(@as(*const ITPhone, @ptrCast(self)), l_button_i_d_, button_function_);
            }
            pub inline fn getButtonText(self: *const T, l_button_i_d_: i32, pp_button_text_: ?*?BSTR) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_ButtonText(@as(*const ITPhone, @ptrCast(self)), l_button_i_d_, pp_button_text_);
            }
            pub inline fn putButtonText(self: *const T, l_button_i_d_: i32, bstr_button_text_: ?BSTR) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).put_ButtonText(@as(*const ITPhone, @ptrCast(self)), l_button_i_d_, bstr_button_text_);
            }
            pub inline fn getButtonState(self: *const T, l_button_i_d_: i32, p_button_state_: ?*PHONE_BUTTON_STATE) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_ButtonState(@as(*const ITPhone, @ptrCast(self)), l_button_i_d_, p_button_state_);
            }
            pub inline fn getHookSwitchState(self: *const T, hook_switch_device_: PHONE_HOOK_SWITCH_DEVICE, p_hook_switch_state_: ?*PHONE_HOOK_SWITCH_STATE) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_HookSwitchState(@as(*const ITPhone, @ptrCast(self)), hook_switch_device_, p_hook_switch_state_);
            }
            pub inline fn putHookSwitchState(self: *const T, hook_switch_device_: PHONE_HOOK_SWITCH_DEVICE, hook_switch_state_: PHONE_HOOK_SWITCH_STATE) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).put_HookSwitchState(@as(*const ITPhone, @ptrCast(self)), hook_switch_device_, hook_switch_state_);
            }
            pub inline fn putRingMode(self: *const T, l_ring_mode_: i32) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).put_RingMode(@as(*const ITPhone, @ptrCast(self)), l_ring_mode_);
            }
            pub inline fn getRingMode(self: *const T, pl_ring_mode_: ?*i32) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_RingMode(@as(*const ITPhone, @ptrCast(self)), pl_ring_mode_);
            }
            pub inline fn putRingVolume(self: *const T, l_ring_volume_: i32) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).put_RingVolume(@as(*const ITPhone, @ptrCast(self)), l_ring_volume_);
            }
            pub inline fn getRingVolume(self: *const T, pl_ring_volume_: ?*i32) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_RingVolume(@as(*const ITPhone, @ptrCast(self)), pl_ring_volume_);
            }
            pub inline fn getPrivilege(self: *const T, p_privilege_: ?*PHONE_PRIVILEGE) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_Privilege(@as(*const ITPhone, @ptrCast(self)), p_privilege_);
            }
            pub inline fn getPhoneCapsBuffer(self: *const T, pcb_caps_: PHONECAPS_BUFFER, pdw_size_: ?*u32, pp_phone_caps_buffer_: ?*?*u8) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).GetPhoneCapsBuffer(@as(*const ITPhone, @ptrCast(self)), pcb_caps_, pdw_size_, pp_phone_caps_buffer_);
            }
            pub inline fn getPhoneCapsBuffer1(self: *const T, pcb_caps_: PHONECAPS_BUFFER, p_var_buffer_: ?*VARIANT) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_PhoneCapsBuffer(@as(*const ITPhone, @ptrCast(self)), pcb_caps_, p_var_buffer_);
            }
            pub inline fn getLampMode(self: *const T, l_lamp_i_d_: i32, p_lamp_mode_: ?*PHONE_LAMP_MODE) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_LampMode(@as(*const ITPhone, @ptrCast(self)), l_lamp_i_d_, p_lamp_mode_);
            }
            pub inline fn putLampMode(self: *const T, l_lamp_i_d_: i32, lamp_mode_: PHONE_LAMP_MODE) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).put_LampMode(@as(*const ITPhone, @ptrCast(self)), l_lamp_i_d_, lamp_mode_);
            }
            pub inline fn getDisplay(self: *const T, pbstr_display_: ?*?BSTR) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_Display(@as(*const ITPhone, @ptrCast(self)), pbstr_display_);
            }
            pub inline fn setDisplay(self: *const T, l_row_: i32, l_column_: i32, bstr_display_: ?BSTR) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).SetDisplay(@as(*const ITPhone, @ptrCast(self)), l_row_, l_column_, bstr_display_);
            }
            pub inline fn getPreferredAddresses(self: *const T, p_addresses_: ?*VARIANT) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).get_PreferredAddresses(@as(*const ITPhone, @ptrCast(self)), p_addresses_);
            }
            pub inline fn enumeratePreferredAddresses(self: *const T, pp_enum_address_: ?*?*IEnumAddress) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).EnumeratePreferredAddresses(@as(*const ITPhone, @ptrCast(self)), pp_enum_address_);
            }
            pub inline fn deviceSpecific(self: *const T, p_params_: ?*u8, dw_size_: u32) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).DeviceSpecific(@as(*const ITPhone, @ptrCast(self)), p_params_, dw_size_);
            }
            pub inline fn deviceSpecificVariant(self: *const T, var_dev_specific_byte_array_: VARIANT) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).DeviceSpecificVariant(@as(*const ITPhone, @ptrCast(self)), var_dev_specific_byte_array_);
            }
            pub inline fn negotiateExtVersion(self: *const T, l_low_version_: i32, l_high_version_: i32, pl_ext_version_: ?*i32) HRESULT {
                return @as(*const ITPhone.VTable, @ptrCast(self.vtable)).NegotiateExtVersion(@as(*const ITPhone, @ptrCast(self)), l_low_version_, l_high_version_, pl_ext_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAutomatedPhoneControl_Value = Guid.initString("1ee1af0e-6159-4a61-b79b-6a4ba3fc9dfc");
pub const IID_ITAutomatedPhoneControl = &IID_ITAutomatedPhoneControl_Value;
pub const ITAutomatedPhoneControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        StartTone: *const fn (
            self: *const ITAutomatedPhoneControl,
            tone: PHONE_TONE,
            l_duration: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopTone: *const fn (
            self: *const ITAutomatedPhoneControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            p_tone: ?*PHONE_TONE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartRinger: *const fn (
            self: *const ITAutomatedPhoneControl,
            l_ring_mode: i32,
            l_duration: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopRinger: *const fn (
            self: *const ITAutomatedPhoneControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ringer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pf_ringing: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PhoneHandlingEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            f_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PhoneHandlingEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoEndOfNumberTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            l_timeout: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoEndOfNumberTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pl_timeout: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoDialtone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            f_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoDialtone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoStopTonesOnOnHook: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            f_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoStopTonesOnOnHook: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoStopRingOnOffHook: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            f_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoStopRingOnOffHook: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoKeypadTones: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            f_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoKeypadTones: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoKeypadTonesMinimumDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            l_duration: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoKeypadTonesMinimumDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pl_duration: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoVolumeControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            f_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoVolumeControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            f_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoVolumeControlStep: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            l_step_size: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoVolumeControlStep: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pl_step_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoVolumeControlRepeatDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            l_delay: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoVolumeControlRepeatDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pl_delay: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoVolumeControlRepeatPeriod: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            l_period: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoVolumeControlRepeatPeriod: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            pl_period: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectCall: *const fn (
            self: *const ITAutomatedPhoneControl,
            p_call: ?*ITCallInfo,
            f_select_default_terminals: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnselectCall: *const fn (
            self: *const ITAutomatedPhoneControl,
            p_call: ?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateSelectedCalls: *const fn (
            self: *const ITAutomatedPhoneControl,
            pp_call_enum: ?*?*IEnumCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelectedCalls: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAutomatedPhoneControl,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn startTone(self: *const T, tone_: PHONE_TONE, l_duration_: i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).StartTone(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), tone_, l_duration_);
            }
            pub inline fn stopTone(self: *const T) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).StopTone(@as(*const ITAutomatedPhoneControl, @ptrCast(self)));
            }
            pub inline fn getTone(self: *const T, p_tone_: ?*PHONE_TONE) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_Tone(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), p_tone_);
            }
            pub inline fn startRinger(self: *const T, l_ring_mode_: i32, l_duration_: i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).StartRinger(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), l_ring_mode_, l_duration_);
            }
            pub inline fn stopRinger(self: *const T) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).StopRinger(@as(*const ITAutomatedPhoneControl, @ptrCast(self)));
            }
            pub inline fn getRinger(self: *const T, pf_ringing_: ?*i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_Ringer(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pf_ringing_);
            }
            pub inline fn putPhoneHandlingEnabled(self: *const T, f_enabled_: i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_PhoneHandlingEnabled(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), f_enabled_);
            }
            pub inline fn getPhoneHandlingEnabled(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_PhoneHandlingEnabled(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn putAutoEndOfNumberTimeout(self: *const T, l_timeout_: i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoEndOfNumberTimeout(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), l_timeout_);
            }
            pub inline fn getAutoEndOfNumberTimeout(self: *const T, pl_timeout_: ?*i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoEndOfNumberTimeout(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pl_timeout_);
            }
            pub inline fn putAutoDialtone(self: *const T, f_enabled_: i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoDialtone(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), f_enabled_);
            }
            pub inline fn getAutoDialtone(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoDialtone(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn putAutoStopTonesOnOnHook(self: *const T, f_enabled_: i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoStopTonesOnOnHook(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), f_enabled_);
            }
            pub inline fn getAutoStopTonesOnOnHook(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoStopTonesOnOnHook(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn putAutoStopRingOnOffHook(self: *const T, f_enabled_: i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoStopRingOnOffHook(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), f_enabled_);
            }
            pub inline fn getAutoStopRingOnOffHook(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoStopRingOnOffHook(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn putAutoKeypadTones(self: *const T, f_enabled_: i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoKeypadTones(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), f_enabled_);
            }
            pub inline fn getAutoKeypadTones(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoKeypadTones(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn putAutoKeypadTonesMinimumDuration(self: *const T, l_duration_: i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoKeypadTonesMinimumDuration(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), l_duration_);
            }
            pub inline fn getAutoKeypadTonesMinimumDuration(self: *const T, pl_duration_: ?*i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoKeypadTonesMinimumDuration(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pl_duration_);
            }
            pub inline fn putAutoVolumeControl(self: *const T, f_enabled_: i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoVolumeControl(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), f_enabled_);
            }
            pub inline fn getAutoVolumeControl(self: *const T, f_enabled_: ?*i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoVolumeControl(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), f_enabled_);
            }
            pub inline fn putAutoVolumeControlStep(self: *const T, l_step_size_: i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoVolumeControlStep(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), l_step_size_);
            }
            pub inline fn getAutoVolumeControlStep(self: *const T, pl_step_size_: ?*i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoVolumeControlStep(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pl_step_size_);
            }
            pub inline fn putAutoVolumeControlRepeatDelay(self: *const T, l_delay_: i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoVolumeControlRepeatDelay(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), l_delay_);
            }
            pub inline fn getAutoVolumeControlRepeatDelay(self: *const T, pl_delay_: ?*i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoVolumeControlRepeatDelay(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pl_delay_);
            }
            pub inline fn putAutoVolumeControlRepeatPeriod(self: *const T, l_period_: i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).put_AutoVolumeControlRepeatPeriod(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), l_period_);
            }
            pub inline fn getAutoVolumeControlRepeatPeriod(self: *const T, pl_period_: ?*i32) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_AutoVolumeControlRepeatPeriod(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pl_period_);
            }
            pub inline fn selectCall(self: *const T, p_call_: ?*ITCallInfo, f_select_default_terminals_: i16) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).SelectCall(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), p_call_, f_select_default_terminals_);
            }
            pub inline fn unselectCall(self: *const T, p_call_: ?*ITCallInfo) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).UnselectCall(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), p_call_);
            }
            pub inline fn enumerateSelectedCalls(self: *const T, pp_call_enum_: ?*?*IEnumCall) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).EnumerateSelectedCalls(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), pp_call_enum_);
            }
            pub inline fn getSelectedCalls(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAutomatedPhoneControl.VTable, @ptrCast(self.vtable)).get_SelectedCalls(@as(*const ITAutomatedPhoneControl, @ptrCast(self)), p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITBasicCallControl_Value = Guid.initString("b1efc389-9355-11d0-835c-00aa003ccabd");
pub const IID_ITBasicCallControl = &IID_ITBasicCallControl_Value;
pub const ITBasicCallControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Connect: *const fn (
            self: *const ITBasicCallControl,
            f_sync: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Answer: *const fn (
            self: *const ITBasicCallControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const ITBasicCallControl,
            code: DISCONNECT_CODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Hold: *const fn (
            self: *const ITBasicCallControl,
            f_hold: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandoffDirect: *const fn (
            self: *const ITBasicCallControl,
            p_application_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandoffIndirect: *const fn (
            self: *const ITBasicCallControl,
            l_media_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Conference: *const fn (
            self: *const ITBasicCallControl,
            p_call: ?*ITBasicCallControl,
            f_sync: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Transfer: *const fn (
            self: *const ITBasicCallControl,
            p_call: ?*ITBasicCallControl,
            f_sync: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BlindTransfer: *const fn (
            self: *const ITBasicCallControl,
            p_dest_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SwapHold: *const fn (
            self: *const ITBasicCallControl,
            p_call: ?*ITBasicCallControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ParkDirect: *const fn (
            self: *const ITBasicCallControl,
            p_park_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ParkIndirect: *const fn (
            self: *const ITBasicCallControl,
            pp_non_dir_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unpark: *const fn (
            self: *const ITBasicCallControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetQOS: *const fn (
            self: *const ITBasicCallControl,
            l_media_type: i32,
            service_level: QOS_SERVICE_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pickup: *const fn (
            self: *const ITBasicCallControl,
            p_group_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Dial: *const fn (
            self: *const ITBasicCallControl,
            p_dest_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish: *const fn (
            self: *const ITBasicCallControl,
            finish_mode: FINISH_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromConference: *const fn (
            self: *const ITBasicCallControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn connect(self: *const T, f_sync_: i16) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Connect(@as(*const ITBasicCallControl, @ptrCast(self)), f_sync_);
            }
            pub inline fn answer(self: *const T) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Answer(@as(*const ITBasicCallControl, @ptrCast(self)));
            }
            pub inline fn disconnect(self: *const T, code_: DISCONNECT_CODE) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const ITBasicCallControl, @ptrCast(self)), code_);
            }
            pub inline fn hold(self: *const T, f_hold_: i16) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Hold(@as(*const ITBasicCallControl, @ptrCast(self)), f_hold_);
            }
            pub inline fn handoffDirect(self: *const T, p_application_name_: ?BSTR) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).HandoffDirect(@as(*const ITBasicCallControl, @ptrCast(self)), p_application_name_);
            }
            pub inline fn handoffIndirect(self: *const T, l_media_type_: i32) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).HandoffIndirect(@as(*const ITBasicCallControl, @ptrCast(self)), l_media_type_);
            }
            pub inline fn conference(self: *const T, p_call_: ?*ITBasicCallControl, f_sync_: i16) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Conference(@as(*const ITBasicCallControl, @ptrCast(self)), p_call_, f_sync_);
            }
            pub inline fn transfer(self: *const T, p_call_: ?*ITBasicCallControl, f_sync_: i16) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Transfer(@as(*const ITBasicCallControl, @ptrCast(self)), p_call_, f_sync_);
            }
            pub inline fn blindTransfer(self: *const T, p_dest_address_: ?BSTR) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).BlindTransfer(@as(*const ITBasicCallControl, @ptrCast(self)), p_dest_address_);
            }
            pub inline fn swapHold(self: *const T, p_call_: ?*ITBasicCallControl) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).SwapHold(@as(*const ITBasicCallControl, @ptrCast(self)), p_call_);
            }
            pub inline fn parkDirect(self: *const T, p_park_address_: ?BSTR) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).ParkDirect(@as(*const ITBasicCallControl, @ptrCast(self)), p_park_address_);
            }
            pub inline fn parkIndirect(self: *const T, pp_non_dir_address_: ?*?BSTR) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).ParkIndirect(@as(*const ITBasicCallControl, @ptrCast(self)), pp_non_dir_address_);
            }
            pub inline fn unpark(self: *const T) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Unpark(@as(*const ITBasicCallControl, @ptrCast(self)));
            }
            pub inline fn setQOS(self: *const T, l_media_type_: i32, service_level_: QOS_SERVICE_LEVEL) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).SetQOS(@as(*const ITBasicCallControl, @ptrCast(self)), l_media_type_, service_level_);
            }
            pub inline fn pickup(self: *const T, p_group_i_d_: ?BSTR) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Pickup(@as(*const ITBasicCallControl, @ptrCast(self)), p_group_i_d_);
            }
            pub inline fn dial(self: *const T, p_dest_address_: ?BSTR) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Dial(@as(*const ITBasicCallControl, @ptrCast(self)), p_dest_address_);
            }
            pub inline fn finish(self: *const T, finish_mode_: FINISH_MODE) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).Finish(@as(*const ITBasicCallControl, @ptrCast(self)), finish_mode_);
            }
            pub inline fn removeFromConference(self: *const T) HRESULT {
                return @as(*const ITBasicCallControl.VTable, @ptrCast(self.vtable)).RemoveFromConference(@as(*const ITBasicCallControl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCallInfo_Value = Guid.initString("350f85d1-1227-11d3-83d4-00c04fb6809f");
pub const IID_ITCallInfo = &IID_ITCallInfo_Value;
pub const ITCallInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            pp_address: ?*?*ITAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            p_call_state: ?*CALL_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Privilege: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            p_privilege: ?*CALL_PRIVILEGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallHub: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            pp_call_hub: ?*?*ITCallHub,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallInfoLong: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            call_info_long: CALLINFO_LONG,
            pl_call_info_long_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CallInfoLong: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            call_info_long: CALLINFO_LONG,
            l_call_info_long_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallInfoString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            call_info_string: CALLINFO_STRING,
            pp_call_info_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CallInfoString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            call_info_string: CALLINFO_STRING,
            p_call_info_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallInfoBuffer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            call_info_buffer: CALLINFO_BUFFER,
            pp_call_info_buffer: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CallInfoBuffer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo,
            call_info_buffer: CALLINFO_BUFFER,
            p_call_info_buffer: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCallInfoBuffer: *const fn (
            self: *const ITCallInfo,
            call_info_buffer: CALLINFO_BUFFER,
            pdw_size: ?*u32,
            pp_call_info_buffer: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCallInfoBuffer: *const fn (
            self: *const ITCallInfo,
            call_info_buffer: CALLINFO_BUFFER,
            dw_size: u32,
            p_call_info_buffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseUserUserInfo: *const fn (
            self: *const ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAddress(self: *const T, pp_address_: ?*?*ITAddress) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).get_Address(@as(*const ITCallInfo, @ptrCast(self)), pp_address_);
            }
            pub inline fn getCallState(self: *const T, p_call_state_: ?*CALL_STATE) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).get_CallState(@as(*const ITCallInfo, @ptrCast(self)), p_call_state_);
            }
            pub inline fn getPrivilege(self: *const T, p_privilege_: ?*CALL_PRIVILEGE) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).get_Privilege(@as(*const ITCallInfo, @ptrCast(self)), p_privilege_);
            }
            pub inline fn getCallHub(self: *const T, pp_call_hub_: ?*?*ITCallHub) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).get_CallHub(@as(*const ITCallInfo, @ptrCast(self)), pp_call_hub_);
            }
            pub inline fn getCallInfoLong(self: *const T, call_info_long_: CALLINFO_LONG, pl_call_info_long_val_: ?*i32) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).get_CallInfoLong(@as(*const ITCallInfo, @ptrCast(self)), call_info_long_, pl_call_info_long_val_);
            }
            pub inline fn putCallInfoLong(self: *const T, call_info_long_: CALLINFO_LONG, l_call_info_long_val_: i32) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).put_CallInfoLong(@as(*const ITCallInfo, @ptrCast(self)), call_info_long_, l_call_info_long_val_);
            }
            pub inline fn getCallInfoString(self: *const T, call_info_string_: CALLINFO_STRING, pp_call_info_string_: ?*?BSTR) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).get_CallInfoString(@as(*const ITCallInfo, @ptrCast(self)), call_info_string_, pp_call_info_string_);
            }
            pub inline fn putCallInfoString(self: *const T, call_info_string_: CALLINFO_STRING, p_call_info_string_: ?BSTR) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).put_CallInfoString(@as(*const ITCallInfo, @ptrCast(self)), call_info_string_, p_call_info_string_);
            }
            pub inline fn getCallInfoBuffer(self: *const T, call_info_buffer_: CALLINFO_BUFFER, pp_call_info_buffer_: ?*VARIANT) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).get_CallInfoBuffer(@as(*const ITCallInfo, @ptrCast(self)), call_info_buffer_, pp_call_info_buffer_);
            }
            pub inline fn putCallInfoBuffer(self: *const T, call_info_buffer_: CALLINFO_BUFFER, p_call_info_buffer_: VARIANT) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).put_CallInfoBuffer(@as(*const ITCallInfo, @ptrCast(self)), call_info_buffer_, p_call_info_buffer_);
            }
            pub inline fn getCallInfoBuffer1(self: *const T, call_info_buffer_: CALLINFO_BUFFER, pdw_size_: ?*u32, pp_call_info_buffer_: [*]?*u8) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).GetCallInfoBuffer(@as(*const ITCallInfo, @ptrCast(self)), call_info_buffer_, pdw_size_, pp_call_info_buffer_);
            }
            pub inline fn setCallInfoBuffer(self: *const T, call_info_buffer_: CALLINFO_BUFFER, dw_size_: u32, p_call_info_buffer_: [*:0]u8) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).SetCallInfoBuffer(@as(*const ITCallInfo, @ptrCast(self)), call_info_buffer_, dw_size_, p_call_info_buffer_);
            }
            pub inline fn releaseUserUserInfo(self: *const T) HRESULT {
                return @as(*const ITCallInfo.VTable, @ptrCast(self.vtable)).ReleaseUserUserInfo(@as(*const ITCallInfo, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCallInfo2_Value = Guid.initString("94d70ca6-7ab0-4daa-81ca-b8f8643faec1");
pub const IID_ITCallInfo2 = &IID_ITCallInfo2_Value;
pub const ITCallInfo2 = extern struct {
    pub const VTable = extern struct {
        base: ITCallInfo.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo2,
            tapi_event: TAPI_EVENT,
            l_sub_event: i32,
            p_enable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfo2,
            tapi_event: TAPI_EVENT,
            l_sub_event: i32,
            b_enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITCallInfo.MethodMixin(T);
            pub inline fn getEventFilter(self: *const T, tapi_event_: TAPI_EVENT, l_sub_event_: i32, p_enable_: ?*i16) HRESULT {
                return @as(*const ITCallInfo2.VTable, @ptrCast(self.vtable)).get_EventFilter(@as(*const ITCallInfo2, @ptrCast(self)), tapi_event_, l_sub_event_, p_enable_);
            }
            pub inline fn putEventFilter(self: *const T, tapi_event_: TAPI_EVENT, l_sub_event_: i32, b_enable_: i16) HRESULT {
                return @as(*const ITCallInfo2.VTable, @ptrCast(self.vtable)).put_EventFilter(@as(*const ITCallInfo2, @ptrCast(self)), tapi_event_, l_sub_event_, b_enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTerminal_Value = Guid.initString("b1efc38a-9355-11d0-835c-00aa003ccabd");
pub const IID_ITTerminal = &IID_ITTerminal_Value;
pub const ITTerminal = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminal,
            pp_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminal,
            p_terminal_state: ?*TERMINAL_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TerminalType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminal,
            p_type: ?*TERMINAL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TerminalClass: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminal,
            pp_terminal_class: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminal,
            pl_media_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Direction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTerminal,
            p_direction: ?*TERMINAL_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pp_name_: ?*?BSTR) HRESULT {
                return @as(*const ITTerminal.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITTerminal, @ptrCast(self)), pp_name_);
            }
            pub inline fn getState(self: *const T, p_terminal_state_: ?*TERMINAL_STATE) HRESULT {
                return @as(*const ITTerminal.VTable, @ptrCast(self.vtable)).get_State(@as(*const ITTerminal, @ptrCast(self)), p_terminal_state_);
            }
            pub inline fn getTerminalType(self: *const T, p_type_: ?*TERMINAL_TYPE) HRESULT {
                return @as(*const ITTerminal.VTable, @ptrCast(self.vtable)).get_TerminalType(@as(*const ITTerminal, @ptrCast(self)), p_type_);
            }
            pub inline fn getTerminalClass(self: *const T, pp_terminal_class_: ?*?BSTR) HRESULT {
                return @as(*const ITTerminal.VTable, @ptrCast(self.vtable)).get_TerminalClass(@as(*const ITTerminal, @ptrCast(self)), pp_terminal_class_);
            }
            pub inline fn getMediaType(self: *const T, pl_media_type_: ?*i32) HRESULT {
                return @as(*const ITTerminal.VTable, @ptrCast(self.vtable)).get_MediaType(@as(*const ITTerminal, @ptrCast(self)), pl_media_type_);
            }
            pub inline fn getDirection(self: *const T, p_direction_: ?*TERMINAL_DIRECTION) HRESULT {
                return @as(*const ITTerminal.VTable, @ptrCast(self.vtable)).get_Direction(@as(*const ITTerminal, @ptrCast(self)), p_direction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITMultiTrackTerminal_Value = Guid.initString("fe040091-ade8-4072-95c9-bf7de8c54b44");
pub const IID_ITMultiTrackTerminal = &IID_ITMultiTrackTerminal_Value;
pub const ITMultiTrackTerminal = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TrackTerminals: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITMultiTrackTerminal,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateTrackTerminals: *const fn (
            self: *const ITMultiTrackTerminal,
            pp_enum_terminal: ?*?*IEnumTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTrackTerminal: *const fn (
            self: *const ITMultiTrackTerminal,
            media_type: i32,
            terminal_direction: TERMINAL_DIRECTION,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaTypesInUse: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITMultiTrackTerminal,
            pl_media_types_in_use: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DirectionsInUse: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITMultiTrackTerminal,
            pl_directions_in_used: ?*TERMINAL_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveTrackTerminal: *const fn (
            self: *const ITMultiTrackTerminal,
            p_track_terminal_to_remove: ?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTrackTerminals(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITMultiTrackTerminal.VTable, @ptrCast(self.vtable)).get_TrackTerminals(@as(*const ITMultiTrackTerminal, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateTrackTerminals(self: *const T, pp_enum_terminal_: ?*?*IEnumTerminal) HRESULT {
                return @as(*const ITMultiTrackTerminal.VTable, @ptrCast(self.vtable)).EnumerateTrackTerminals(@as(*const ITMultiTrackTerminal, @ptrCast(self)), pp_enum_terminal_);
            }
            pub inline fn createTrackTerminal(self: *const T, media_type_: i32, terminal_direction_: TERMINAL_DIRECTION, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITMultiTrackTerminal.VTable, @ptrCast(self.vtable)).CreateTrackTerminal(@as(*const ITMultiTrackTerminal, @ptrCast(self)), media_type_, terminal_direction_, pp_terminal_);
            }
            pub inline fn getMediaTypesInUse(self: *const T, pl_media_types_in_use_: ?*i32) HRESULT {
                return @as(*const ITMultiTrackTerminal.VTable, @ptrCast(self.vtable)).get_MediaTypesInUse(@as(*const ITMultiTrackTerminal, @ptrCast(self)), pl_media_types_in_use_);
            }
            pub inline fn getDirectionsInUse(self: *const T, pl_directions_in_used_: ?*TERMINAL_DIRECTION) HRESULT {
                return @as(*const ITMultiTrackTerminal.VTable, @ptrCast(self.vtable)).get_DirectionsInUse(@as(*const ITMultiTrackTerminal, @ptrCast(self)), pl_directions_in_used_);
            }
            pub inline fn removeTrackTerminal(self: *const T, p_track_terminal_to_remove_: ?*ITTerminal) HRESULT {
                return @as(*const ITMultiTrackTerminal.VTable, @ptrCast(self.vtable)).RemoveTrackTerminal(@as(*const ITMultiTrackTerminal, @ptrCast(self)), p_track_terminal_to_remove_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const TERMINAL_MEDIA_STATE = enum(i32) {
    IDLE = 0,
    ACTIVE = 1,
    PAUSED = 2,
    // LASTITEM = 2, this enum value conflicts with PAUSED
};
pub const TMS_IDLE = TERMINAL_MEDIA_STATE.IDLE;
pub const TMS_ACTIVE = TERMINAL_MEDIA_STATE.ACTIVE;
pub const TMS_PAUSED = TERMINAL_MEDIA_STATE.PAUSED;
pub const TMS_LASTITEM = TERMINAL_MEDIA_STATE.PAUSED;

pub const FT_STATE_EVENT_CAUSE = enum(i32) {
    NORMAL = 0,
    END_OF_FILE = 1,
    READ_ERROR = 2,
    WRITE_ERROR = 3,
};
pub const FTEC_NORMAL = FT_STATE_EVENT_CAUSE.NORMAL;
pub const FTEC_END_OF_FILE = FT_STATE_EVENT_CAUSE.END_OF_FILE;
pub const FTEC_READ_ERROR = FT_STATE_EVENT_CAUSE.READ_ERROR;
pub const FTEC_WRITE_ERROR = FT_STATE_EVENT_CAUSE.WRITE_ERROR;

const IID_ITFileTrack_Value = Guid.initString("31ca6ea9-c08a-4bea-8811-8e9c1ba3ea3a");
pub const IID_ITFileTrack = &IID_ITFileTrack_Value;
pub const ITFileTrack = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Format: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTrack,
            ppmt: ?*?*AM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Format: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTrack,
            pmt: ?*const AM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ControllingTerminal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTrack,
            pp_controlling_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AudioFormatForScripting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTrack,
            pp_audio_format: ?*?*ITScriptableAudioFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AudioFormatForScripting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTrack,
            p_audio_format: ?*ITScriptableAudioFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EmptyAudioFormatForScripting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTrack,
            pp_audio_format: ?*?*ITScriptableAudioFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFormat(self: *const T, ppmt_: ?*?*AM_MEDIA_TYPE) HRESULT {
                return @as(*const ITFileTrack.VTable, @ptrCast(self.vtable)).get_Format(@as(*const ITFileTrack, @ptrCast(self)), ppmt_);
            }
            pub inline fn putFormat(self: *const T, pmt_: ?*const AM_MEDIA_TYPE) HRESULT {
                return @as(*const ITFileTrack.VTable, @ptrCast(self.vtable)).put_Format(@as(*const ITFileTrack, @ptrCast(self)), pmt_);
            }
            pub inline fn getControllingTerminal(self: *const T, pp_controlling_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITFileTrack.VTable, @ptrCast(self.vtable)).get_ControllingTerminal(@as(*const ITFileTrack, @ptrCast(self)), pp_controlling_terminal_);
            }
            pub inline fn getAudioFormatForScripting(self: *const T, pp_audio_format_: ?*?*ITScriptableAudioFormat) HRESULT {
                return @as(*const ITFileTrack.VTable, @ptrCast(self.vtable)).get_AudioFormatForScripting(@as(*const ITFileTrack, @ptrCast(self)), pp_audio_format_);
            }
            pub inline fn putAudioFormatForScripting(self: *const T, p_audio_format_: ?*ITScriptableAudioFormat) HRESULT {
                return @as(*const ITFileTrack.VTable, @ptrCast(self.vtable)).put_AudioFormatForScripting(@as(*const ITFileTrack, @ptrCast(self)), p_audio_format_);
            }
            pub inline fn getEmptyAudioFormatForScripting(self: *const T, pp_audio_format_: ?*?*ITScriptableAudioFormat) HRESULT {
                return @as(*const ITFileTrack.VTable, @ptrCast(self.vtable)).get_EmptyAudioFormatForScripting(@as(*const ITFileTrack, @ptrCast(self)), pp_audio_format_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITMediaPlayback_Value = Guid.initString("627e8ae6-ae4c-4a69-bb63-2ad625404b77");
pub const IID_ITMediaPlayback = &IID_ITMediaPlayback_Value;
pub const ITMediaPlayback = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PlayList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITMediaPlayback,
            play_list_variant: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlayList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITMediaPlayback,
            p_play_list_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putPlayList(self: *const T, play_list_variant_: VARIANT) HRESULT {
                return @as(*const ITMediaPlayback.VTable, @ptrCast(self.vtable)).put_PlayList(@as(*const ITMediaPlayback, @ptrCast(self)), play_list_variant_);
            }
            pub inline fn getPlayList(self: *const T, p_play_list_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITMediaPlayback.VTable, @ptrCast(self.vtable)).get_PlayList(@as(*const ITMediaPlayback, @ptrCast(self)), p_play_list_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITMediaRecord_Value = Guid.initString("f5dd4592-5476-4cc1-9d4d-fad3eefe7db2");
pub const IID_ITMediaRecord = &IID_ITMediaRecord_Value;
pub const ITMediaRecord = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITMediaRecord,
            bstr_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITMediaRecord,
            pbstr_file_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putFileName(self: *const T, bstr_file_name_: ?BSTR) HRESULT {
                return @as(*const ITMediaRecord.VTable, @ptrCast(self.vtable)).put_FileName(@as(*const ITMediaRecord, @ptrCast(self)), bstr_file_name_);
            }
            pub inline fn getFileName(self: *const T, pbstr_file_name_: ?*?BSTR) HRESULT {
                return @as(*const ITMediaRecord.VTable, @ptrCast(self.vtable)).get_FileName(@as(*const ITMediaRecord, @ptrCast(self)), pbstr_file_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITMediaControl_Value = Guid.initString("c445dde8-5199-4bc7-9807-5ffb92e42e09");
pub const IID_ITMediaControl = &IID_ITMediaControl_Value;
pub const ITMediaControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Start: *const fn (
            self: *const ITMediaControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const ITMediaControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const ITMediaControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITMediaControl,
            p_terminal_media_state: ?*TERMINAL_MEDIA_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn start(self: *const T) HRESULT {
                return @as(*const ITMediaControl.VTable, @ptrCast(self.vtable)).Start(@as(*const ITMediaControl, @ptrCast(self)));
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const ITMediaControl.VTable, @ptrCast(self.vtable)).Stop(@as(*const ITMediaControl, @ptrCast(self)));
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const ITMediaControl.VTable, @ptrCast(self.vtable)).Pause(@as(*const ITMediaControl, @ptrCast(self)));
            }
            pub inline fn getMediaState(self: *const T, p_terminal_media_state_: ?*TERMINAL_MEDIA_STATE) HRESULT {
                return @as(*const ITMediaControl.VTable, @ptrCast(self.vtable)).get_MediaState(@as(*const ITMediaControl, @ptrCast(self)), p_terminal_media_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITBasicAudioTerminal_Value = Guid.initString("b1efc38d-9355-11d0-835c-00aa003ccabd");
pub const IID_ITBasicAudioTerminal = &IID_ITBasicAudioTerminal_Value;
pub const ITBasicAudioTerminal = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Volume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITBasicAudioTerminal,
            l_volume: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Volume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITBasicAudioTerminal,
            pl_volume: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Balance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITBasicAudioTerminal,
            l_balance: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Balance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITBasicAudioTerminal,
            pl_balance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putVolume(self: *const T, l_volume_: i32) HRESULT {
                return @as(*const ITBasicAudioTerminal.VTable, @ptrCast(self.vtable)).put_Volume(@as(*const ITBasicAudioTerminal, @ptrCast(self)), l_volume_);
            }
            pub inline fn getVolume(self: *const T, pl_volume_: ?*i32) HRESULT {
                return @as(*const ITBasicAudioTerminal.VTable, @ptrCast(self.vtable)).get_Volume(@as(*const ITBasicAudioTerminal, @ptrCast(self)), pl_volume_);
            }
            pub inline fn putBalance(self: *const T, l_balance_: i32) HRESULT {
                return @as(*const ITBasicAudioTerminal.VTable, @ptrCast(self.vtable)).put_Balance(@as(*const ITBasicAudioTerminal, @ptrCast(self)), l_balance_);
            }
            pub inline fn getBalance(self: *const T, pl_balance_: ?*i32) HRESULT {
                return @as(*const ITBasicAudioTerminal.VTable, @ptrCast(self.vtable)).get_Balance(@as(*const ITBasicAudioTerminal, @ptrCast(self)), pl_balance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITStaticAudioTerminal_Value = Guid.initString("a86b7871-d14c-48e6-922e-a8d15f984800");
pub const IID_ITStaticAudioTerminal = &IID_ITStaticAudioTerminal_Value;
pub const ITStaticAudioTerminal = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WaveId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITStaticAudioTerminal,
            pl_wave_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getWaveId(self: *const T, pl_wave_id_: ?*i32) HRESULT {
                return @as(*const ITStaticAudioTerminal.VTable, @ptrCast(self.vtable)).get_WaveId(@as(*const ITStaticAudioTerminal, @ptrCast(self)), pl_wave_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCallHub_Value = Guid.initString("a3c1544e-5b92-11d1-8f4e-00c04fb6809f");
pub const IID_ITCallHub = &IID_ITCallHub_Value;
pub const ITCallHub = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Clear: *const fn (
            self: *const ITCallHub,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateCalls: *const fn (
            self: *const ITCallHub,
            pp_enum_call: ?*?*IEnumCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Calls: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallHub,
            p_calls: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumCalls: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallHub,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallHub,
            p_state: ?*CALLHUB_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ITCallHub.VTable, @ptrCast(self.vtable)).Clear(@as(*const ITCallHub, @ptrCast(self)));
            }
            pub inline fn enumerateCalls(self: *const T, pp_enum_call_: ?*?*IEnumCall) HRESULT {
                return @as(*const ITCallHub.VTable, @ptrCast(self.vtable)).EnumerateCalls(@as(*const ITCallHub, @ptrCast(self)), pp_enum_call_);
            }
            pub inline fn getCalls(self: *const T, p_calls_: ?*VARIANT) HRESULT {
                return @as(*const ITCallHub.VTable, @ptrCast(self.vtable)).get_Calls(@as(*const ITCallHub, @ptrCast(self)), p_calls_);
            }
            pub inline fn getNumCalls(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITCallHub.VTable, @ptrCast(self.vtable)).get_NumCalls(@as(*const ITCallHub, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getState(self: *const T, p_state_: ?*CALLHUB_STATE) HRESULT {
                return @as(*const ITCallHub.VTable, @ptrCast(self.vtable)).get_State(@as(*const ITCallHub, @ptrCast(self)), p_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITLegacyAddressMediaControl_Value = Guid.initString("ab493640-4c0b-11d2-a046-00c04fb6809f");
pub const IID_ITLegacyAddressMediaControl = &IID_ITLegacyAddressMediaControl_Value;
pub const ITLegacyAddressMediaControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetID: *const fn (
            self: *const ITLegacyAddressMediaControl,
            p_device_class: ?BSTR,
            pdw_size: ?*u32,
            pp_device_i_d: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevConfig: *const fn (
            self: *const ITLegacyAddressMediaControl,
            p_device_class: ?BSTR,
            pdw_size: ?*u32,
            pp_device_config: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDevConfig: *const fn (
            self: *const ITLegacyAddressMediaControl,
            p_device_class: ?BSTR,
            dw_size: u32,
            p_device_config: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getID(self: *const T, p_device_class_: ?BSTR, pdw_size_: ?*u32, pp_device_i_d_: [*]?*u8) HRESULT {
                return @as(*const ITLegacyAddressMediaControl.VTable, @ptrCast(self.vtable)).GetID(@as(*const ITLegacyAddressMediaControl, @ptrCast(self)), p_device_class_, pdw_size_, pp_device_i_d_);
            }
            pub inline fn getDevConfig(self: *const T, p_device_class_: ?BSTR, pdw_size_: ?*u32, pp_device_config_: [*]?*u8) HRESULT {
                return @as(*const ITLegacyAddressMediaControl.VTable, @ptrCast(self.vtable)).GetDevConfig(@as(*const ITLegacyAddressMediaControl, @ptrCast(self)), p_device_class_, pdw_size_, pp_device_config_);
            }
            pub inline fn setDevConfig(self: *const T, p_device_class_: ?BSTR, dw_size_: u32, p_device_config_: [*:0]u8) HRESULT {
                return @as(*const ITLegacyAddressMediaControl.VTable, @ptrCast(self.vtable)).SetDevConfig(@as(*const ITLegacyAddressMediaControl, @ptrCast(self)), p_device_class_, dw_size_, p_device_config_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITPrivateEvent_Value = Guid.initString("0e269cd0-10d4-4121-9c22-9c85d625650d");
pub const IID_ITPrivateEvent = &IID_ITPrivateEvent_Value;
pub const ITPrivateEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPrivateEvent,
            pp_address: ?*?*ITAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPrivateEvent,
            pp_call_info: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallHub: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPrivateEvent,
            pp_call_hub: ?*?*ITCallHub,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPrivateEvent,
            pl_event_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventInterface: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPrivateEvent,
            p_event_interface: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAddress(self: *const T, pp_address_: ?*?*ITAddress) HRESULT {
                return @as(*const ITPrivateEvent.VTable, @ptrCast(self.vtable)).get_Address(@as(*const ITPrivateEvent, @ptrCast(self)), pp_address_);
            }
            pub inline fn getCall(self: *const T, pp_call_info_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITPrivateEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITPrivateEvent, @ptrCast(self)), pp_call_info_);
            }
            pub inline fn getCallHub(self: *const T, pp_call_hub_: ?*?*ITCallHub) HRESULT {
                return @as(*const ITPrivateEvent.VTable, @ptrCast(self.vtable)).get_CallHub(@as(*const ITPrivateEvent, @ptrCast(self)), pp_call_hub_);
            }
            pub inline fn getEventCode(self: *const T, pl_event_code_: ?*i32) HRESULT {
                return @as(*const ITPrivateEvent.VTable, @ptrCast(self.vtable)).get_EventCode(@as(*const ITPrivateEvent, @ptrCast(self)), pl_event_code_);
            }
            pub inline fn getEventInterface(self: *const T, p_event_interface_: ?*?*IDispatch) HRESULT {
                return @as(*const ITPrivateEvent.VTable, @ptrCast(self.vtable)).get_EventInterface(@as(*const ITPrivateEvent, @ptrCast(self)), p_event_interface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITLegacyAddressMediaControl2_Value = Guid.initString("b0ee512b-a531-409e-9dd9-4099fe86c738");
pub const IID_ITLegacyAddressMediaControl2 = &IID_ITLegacyAddressMediaControl2_Value;
pub const ITLegacyAddressMediaControl2 = extern struct {
    pub const VTable = extern struct {
        base: ITLegacyAddressMediaControl.VTable,
        ConfigDialog: *const fn (
            self: *const ITLegacyAddressMediaControl2,
            hwnd_owner: ?HWND,
            p_device_class: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigDialogEdit: *const fn (
            self: *const ITLegacyAddressMediaControl2,
            hwnd_owner: ?HWND,
            p_device_class: ?BSTR,
            dw_size_in: u32,
            p_device_config_in: [*:0]u8,
            pdw_size_out: ?*u32,
            pp_device_config_out: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITLegacyAddressMediaControl.MethodMixin(T);
            pub inline fn configDialog(self: *const T, hwnd_owner_: ?HWND, p_device_class_: ?BSTR) HRESULT {
                return @as(*const ITLegacyAddressMediaControl2.VTable, @ptrCast(self.vtable)).ConfigDialog(@as(*const ITLegacyAddressMediaControl2, @ptrCast(self)), hwnd_owner_, p_device_class_);
            }
            pub inline fn configDialogEdit(self: *const T, hwnd_owner_: ?HWND, p_device_class_: ?BSTR, dw_size_in_: u32, p_device_config_in_: [*:0]u8, pdw_size_out_: ?*u32, pp_device_config_out_: [*]?*u8) HRESULT {
                return @as(*const ITLegacyAddressMediaControl2.VTable, @ptrCast(self.vtable)).ConfigDialogEdit(@as(*const ITLegacyAddressMediaControl2, @ptrCast(self)), hwnd_owner_, p_device_class_, dw_size_in_, p_device_config_in_, pdw_size_out_, pp_device_config_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITLegacyCallMediaControl_Value = Guid.initString("d624582f-cc23-4436-b8a5-47c625c8045d");
pub const IID_ITLegacyCallMediaControl = &IID_ITLegacyCallMediaControl_Value;
pub const ITLegacyCallMediaControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        DetectDigits: *const fn (
            self: *const ITLegacyCallMediaControl,
            digit_mode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateDigits: *const fn (
            self: *const ITLegacyCallMediaControl,
            p_digits: ?BSTR,
            digit_mode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetID: *const fn (
            self: *const ITLegacyCallMediaControl,
            p_device_class: ?BSTR,
            pdw_size: ?*u32,
            pp_device_i_d: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMediaType: *const fn (
            self: *const ITLegacyCallMediaControl,
            l_media_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MonitorMedia: *const fn (
            self: *const ITLegacyCallMediaControl,
            l_media_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn detectDigits(self: *const T, digit_mode_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl.VTable, @ptrCast(self.vtable)).DetectDigits(@as(*const ITLegacyCallMediaControl, @ptrCast(self)), digit_mode_);
            }
            pub inline fn generateDigits(self: *const T, p_digits_: ?BSTR, digit_mode_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl.VTable, @ptrCast(self.vtable)).GenerateDigits(@as(*const ITLegacyCallMediaControl, @ptrCast(self)), p_digits_, digit_mode_);
            }
            pub inline fn getID(self: *const T, p_device_class_: ?BSTR, pdw_size_: ?*u32, pp_device_i_d_: [*]?*u8) HRESULT {
                return @as(*const ITLegacyCallMediaControl.VTable, @ptrCast(self.vtable)).GetID(@as(*const ITLegacyCallMediaControl, @ptrCast(self)), p_device_class_, pdw_size_, pp_device_i_d_);
            }
            pub inline fn setMediaType(self: *const T, l_media_type_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl.VTable, @ptrCast(self.vtable)).SetMediaType(@as(*const ITLegacyCallMediaControl, @ptrCast(self)), l_media_type_);
            }
            pub inline fn monitorMedia(self: *const T, l_media_type_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl.VTable, @ptrCast(self.vtable)).MonitorMedia(@as(*const ITLegacyCallMediaControl, @ptrCast(self)), l_media_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITLegacyCallMediaControl2_Value = Guid.initString("57ca332d-7bc2-44f1-a60c-936fe8d7ce73");
pub const IID_ITLegacyCallMediaControl2 = &IID_ITLegacyCallMediaControl2_Value;
pub const ITLegacyCallMediaControl2 = extern struct {
    pub const VTable = extern struct {
        base: ITLegacyCallMediaControl.VTable,
        GenerateDigits2: *const fn (
            self: *const ITLegacyCallMediaControl2,
            p_digits: ?BSTR,
            digit_mode: i32,
            l_duration: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GatherDigits: *const fn (
            self: *const ITLegacyCallMediaControl2,
            digit_mode: i32,
            l_num_digits: i32,
            p_termination_digits: ?BSTR,
            l_first_digit_timeout: i32,
            l_inter_digit_timeout: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DetectTones: *const fn (
            self: *const ITLegacyCallMediaControl2,
            p_tone_list: ?*TAPI_DETECTTONE,
            l_num_tones: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DetectTonesByCollection: *const fn (
            self: *const ITLegacyCallMediaControl2,
            p_detect_tone_collection: ?*ITCollection2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateTone: *const fn (
            self: *const ITLegacyCallMediaControl2,
            tone_mode: TAPI_TONEMODE,
            l_duration: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateCustomTones: *const fn (
            self: *const ITLegacyCallMediaControl2,
            p_tone_list: ?*TAPI_CUSTOMTONE,
            l_num_tones: i32,
            l_duration: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateCustomTonesByCollection: *const fn (
            self: *const ITLegacyCallMediaControl2,
            p_custom_tone_collection: ?*ITCollection2,
            l_duration: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDetectToneObject: *const fn (
            self: *const ITLegacyCallMediaControl2,
            pp_detect_tone: ?*?*ITDetectTone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomToneObject: *const fn (
            self: *const ITLegacyCallMediaControl2,
            pp_custom_tone: ?*?*ITCustomTone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDAsVariant: *const fn (
            self: *const ITLegacyCallMediaControl2,
            bstr_device_class: ?BSTR,
            p_var_device_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITLegacyCallMediaControl.MethodMixin(T);
            pub inline fn generateDigits2(self: *const T, p_digits_: ?BSTR, digit_mode_: i32, l_duration_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).GenerateDigits2(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), p_digits_, digit_mode_, l_duration_);
            }
            pub inline fn gatherDigits(self: *const T, digit_mode_: i32, l_num_digits_: i32, p_termination_digits_: ?BSTR, l_first_digit_timeout_: i32, l_inter_digit_timeout_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).GatherDigits(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), digit_mode_, l_num_digits_, p_termination_digits_, l_first_digit_timeout_, l_inter_digit_timeout_);
            }
            pub inline fn detectTones(self: *const T, p_tone_list_: ?*TAPI_DETECTTONE, l_num_tones_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).DetectTones(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), p_tone_list_, l_num_tones_);
            }
            pub inline fn detectTonesByCollection(self: *const T, p_detect_tone_collection_: ?*ITCollection2) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).DetectTonesByCollection(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), p_detect_tone_collection_);
            }
            pub inline fn generateTone(self: *const T, tone_mode_: TAPI_TONEMODE, l_duration_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).GenerateTone(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), tone_mode_, l_duration_);
            }
            pub inline fn generateCustomTones(self: *const T, p_tone_list_: ?*TAPI_CUSTOMTONE, l_num_tones_: i32, l_duration_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).GenerateCustomTones(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), p_tone_list_, l_num_tones_, l_duration_);
            }
            pub inline fn generateCustomTonesByCollection(self: *const T, p_custom_tone_collection_: ?*ITCollection2, l_duration_: i32) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).GenerateCustomTonesByCollection(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), p_custom_tone_collection_, l_duration_);
            }
            pub inline fn createDetectToneObject(self: *const T, pp_detect_tone_: ?*?*ITDetectTone) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).CreateDetectToneObject(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), pp_detect_tone_);
            }
            pub inline fn createCustomToneObject(self: *const T, pp_custom_tone_: ?*?*ITCustomTone) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).CreateCustomToneObject(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), pp_custom_tone_);
            }
            pub inline fn getIDAsVariant(self: *const T, bstr_device_class_: ?BSTR, p_var_device_i_d_: ?*VARIANT) HRESULT {
                return @as(*const ITLegacyCallMediaControl2.VTable, @ptrCast(self.vtable)).GetIDAsVariant(@as(*const ITLegacyCallMediaControl2, @ptrCast(self)), bstr_device_class_, p_var_device_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITDetectTone_Value = Guid.initString("961f79bd-3097-49df-a1d6-909b77e89ca0");
pub const IID_ITDetectTone = &IID_ITDetectTone_Value;
pub const ITDetectTone = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDetectTone,
            pl_app_specific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDetectTone,
            l_app_specific: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Duration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDetectTone,
            pl_duration: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Duration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDetectTone,
            l_duration: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Frequency: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDetectTone,
            index: i32,
            pl_frequency: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Frequency: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDetectTone,
            index: i32,
            l_frequency: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAppSpecific(self: *const T, pl_app_specific_: ?*i32) HRESULT {
                return @as(*const ITDetectTone.VTable, @ptrCast(self.vtable)).get_AppSpecific(@as(*const ITDetectTone, @ptrCast(self)), pl_app_specific_);
            }
            pub inline fn putAppSpecific(self: *const T, l_app_specific_: i32) HRESULT {
                return @as(*const ITDetectTone.VTable, @ptrCast(self.vtable)).put_AppSpecific(@as(*const ITDetectTone, @ptrCast(self)), l_app_specific_);
            }
            pub inline fn getDuration(self: *const T, pl_duration_: ?*i32) HRESULT {
                return @as(*const ITDetectTone.VTable, @ptrCast(self.vtable)).get_Duration(@as(*const ITDetectTone, @ptrCast(self)), pl_duration_);
            }
            pub inline fn putDuration(self: *const T, l_duration_: i32) HRESULT {
                return @as(*const ITDetectTone.VTable, @ptrCast(self.vtable)).put_Duration(@as(*const ITDetectTone, @ptrCast(self)), l_duration_);
            }
            pub inline fn getFrequency(self: *const T, index_: i32, pl_frequency_: ?*i32) HRESULT {
                return @as(*const ITDetectTone.VTable, @ptrCast(self.vtable)).get_Frequency(@as(*const ITDetectTone, @ptrCast(self)), index_, pl_frequency_);
            }
            pub inline fn putFrequency(self: *const T, index_: i32, l_frequency_: i32) HRESULT {
                return @as(*const ITDetectTone.VTable, @ptrCast(self.vtable)).put_Frequency(@as(*const ITDetectTone, @ptrCast(self)), index_, l_frequency_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCustomTone_Value = Guid.initString("357ad764-b3c6-4b2a-8fa5-0722827a9254");
pub const IID_ITCustomTone = &IID_ITCustomTone_Value;
pub const ITCustomTone = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Frequency: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCustomTone,
            pl_frequency: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Frequency: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCustomTone,
            l_frequency: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CadenceOn: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCustomTone,
            pl_cadence_on: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CadenceOn: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCustomTone,
            cadence_on: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CadenceOff: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCustomTone,
            pl_cadence_off: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CadenceOff: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCustomTone,
            l_cadence_off: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Volume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCustomTone,
            pl_volume: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Volume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCustomTone,
            l_volume: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFrequency(self: *const T, pl_frequency_: ?*i32) HRESULT {
                return @as(*const ITCustomTone.VTable, @ptrCast(self.vtable)).get_Frequency(@as(*const ITCustomTone, @ptrCast(self)), pl_frequency_);
            }
            pub inline fn putFrequency(self: *const T, l_frequency_: i32) HRESULT {
                return @as(*const ITCustomTone.VTable, @ptrCast(self.vtable)).put_Frequency(@as(*const ITCustomTone, @ptrCast(self)), l_frequency_);
            }
            pub inline fn getCadenceOn(self: *const T, pl_cadence_on_: ?*i32) HRESULT {
                return @as(*const ITCustomTone.VTable, @ptrCast(self.vtable)).get_CadenceOn(@as(*const ITCustomTone, @ptrCast(self)), pl_cadence_on_);
            }
            pub inline fn putCadenceOn(self: *const T, cadence_on_: i32) HRESULT {
                return @as(*const ITCustomTone.VTable, @ptrCast(self.vtable)).put_CadenceOn(@as(*const ITCustomTone, @ptrCast(self)), cadence_on_);
            }
            pub inline fn getCadenceOff(self: *const T, pl_cadence_off_: ?*i32) HRESULT {
                return @as(*const ITCustomTone.VTable, @ptrCast(self.vtable)).get_CadenceOff(@as(*const ITCustomTone, @ptrCast(self)), pl_cadence_off_);
            }
            pub inline fn putCadenceOff(self: *const T, l_cadence_off_: i32) HRESULT {
                return @as(*const ITCustomTone.VTable, @ptrCast(self.vtable)).put_CadenceOff(@as(*const ITCustomTone, @ptrCast(self)), l_cadence_off_);
            }
            pub inline fn getVolume(self: *const T, pl_volume_: ?*i32) HRESULT {
                return @as(*const ITCustomTone.VTable, @ptrCast(self.vtable)).get_Volume(@as(*const ITCustomTone, @ptrCast(self)), pl_volume_);
            }
            pub inline fn putVolume(self: *const T, l_volume_: i32) HRESULT {
                return @as(*const ITCustomTone.VTable, @ptrCast(self.vtable)).put_Volume(@as(*const ITCustomTone, @ptrCast(self)), l_volume_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumPhone_Value = Guid.initString("f15b7669-4780-4595-8c89-fb369c8cf7aa");
pub const IID_IEnumPhone = &IID_IEnumPhone_Value;
pub const IEnumPhone = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumPhone,
            celt: u32,
            pp_elements: [*]?*ITPhone,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumPhone,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumPhone,
            pp_enum: ?*?*IEnumPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*ITPhone, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumPhone.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumPhone, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumPhone.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumPhone, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumPhone.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumPhone, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumPhone) HRESULT {
                return @as(*const IEnumPhone.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumPhone, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumTerminal_Value = Guid.initString("ae269cf4-935e-11d0-835c-00aa003ccabd");
pub const IID_IEnumTerminal = &IID_IEnumTerminal_Value;
pub const IEnumTerminal = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumTerminal,
            celt: u32,
            pp_elements: ?*?*ITTerminal,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumTerminal,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumTerminal,
            pp_enum: ?*?*IEnumTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITTerminal, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumTerminal.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumTerminal, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumTerminal.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumTerminal, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumTerminal.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumTerminal, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumTerminal) HRESULT {
                return @as(*const IEnumTerminal.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumTerminal, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumTerminalClass_Value = Guid.initString("ae269cf5-935e-11d0-835c-00aa003ccabd");
pub const IID_IEnumTerminalClass = &IID_IEnumTerminalClass_Value;
pub const IEnumTerminalClass = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumTerminalClass,
            celt: u32,
            p_elements: [*]Guid,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumTerminalClass,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumTerminalClass,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumTerminalClass,
            pp_enum: ?*?*IEnumTerminalClass,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, p_elements_: [*]Guid, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumTerminalClass.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumTerminalClass, @ptrCast(self)), celt_, p_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumTerminalClass.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumTerminalClass, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumTerminalClass.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumTerminalClass, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumTerminalClass) HRESULT {
                return @as(*const IEnumTerminalClass.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumTerminalClass, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumCall_Value = Guid.initString("ae269cf6-935e-11d0-835c-00aa003ccabd");
pub const IID_IEnumCall = &IID_IEnumCall_Value;
pub const IEnumCall = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumCall,
            celt: u32,
            pp_elements: ?*?*ITCallInfo,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumCall,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumCall,
            pp_enum: ?*?*IEnumCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITCallInfo, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumCall.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumCall, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumCall.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumCall, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumCall.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumCall, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumCall) HRESULT {
                return @as(*const IEnumCall.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumCall, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumAddress_Value = Guid.initString("1666fca1-9363-11d0-835c-00aa003ccabd");
pub const IID_IEnumAddress = &IID_IEnumAddress_Value;
pub const IEnumAddress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumAddress,
            celt: u32,
            pp_elements: [*]?*ITAddress,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumAddress,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumAddress,
            pp_enum: ?*?*IEnumAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*ITAddress, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumAddress.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumAddress, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumAddress.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumAddress, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumAddress.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumAddress, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumAddress) HRESULT {
                return @as(*const IEnumAddress.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumAddress, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumCallHub_Value = Guid.initString("a3c15450-5b92-11d1-8f4e-00c04fb6809f");
pub const IID_IEnumCallHub = &IID_IEnumCallHub_Value;
pub const IEnumCallHub = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumCallHub,
            celt: u32,
            pp_elements: [*]?*ITCallHub,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumCallHub,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumCallHub,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumCallHub,
            pp_enum: ?*?*IEnumCallHub,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*ITCallHub, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumCallHub.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumCallHub, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumCallHub.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumCallHub, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumCallHub.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumCallHub, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumCallHub) HRESULT {
                return @as(*const IEnumCallHub.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumCallHub, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumBstr_Value = Guid.initString("35372049-0bc6-11d2-a033-00c04fb6809f");
pub const IID_IEnumBstr = &IID_IEnumBstr_Value;
pub const IEnumBstr = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumBstr,
            celt: u32,
            pp_strings: [*]?BSTR,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumBstr,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumBstr,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumBstr,
            pp_enum: ?*?*IEnumBstr,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_strings_: [*]?BSTR, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumBstr.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumBstr, @ptrCast(self)), celt_, pp_strings_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumBstr.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumBstr, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumBstr.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumBstr, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumBstr) HRESULT {
                return @as(*const IEnumBstr.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumBstr, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumPluggableTerminalClassInfo_Value = Guid.initString("4567450c-dbee-4e3f-aaf5-37bf9ebf5e29");
pub const IID_IEnumPluggableTerminalClassInfo = &IID_IEnumPluggableTerminalClassInfo_Value;
pub const IEnumPluggableTerminalClassInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumPluggableTerminalClassInfo,
            celt: u32,
            pp_elements: [*]?*ITPluggableTerminalClassInfo,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumPluggableTerminalClassInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumPluggableTerminalClassInfo,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumPluggableTerminalClassInfo,
            pp_enum: ?*?*IEnumPluggableTerminalClassInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*ITPluggableTerminalClassInfo, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumPluggableTerminalClassInfo, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumPluggableTerminalClassInfo, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumPluggableTerminalClassInfo, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumPluggableTerminalClassInfo) HRESULT {
                return @as(*const IEnumPluggableTerminalClassInfo.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumPluggableTerminalClassInfo, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumPluggableSuperclassInfo_Value = Guid.initString("e9586a80-89e6-4cff-931d-478d5751f4c0");
pub const IID_IEnumPluggableSuperclassInfo = &IID_IEnumPluggableSuperclassInfo_Value;
pub const IEnumPluggableSuperclassInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumPluggableSuperclassInfo,
            celt: u32,
            pp_elements: [*]?*ITPluggableTerminalSuperclassInfo,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumPluggableSuperclassInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumPluggableSuperclassInfo,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumPluggableSuperclassInfo,
            pp_enum: ?*?*IEnumPluggableSuperclassInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*ITPluggableTerminalSuperclassInfo, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumPluggableSuperclassInfo.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumPluggableSuperclassInfo, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumPluggableSuperclassInfo.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumPluggableSuperclassInfo, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumPluggableSuperclassInfo.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumPluggableSuperclassInfo, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumPluggableSuperclassInfo) HRESULT {
                return @as(*const IEnumPluggableSuperclassInfo.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumPluggableSuperclassInfo, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITPhoneEvent_Value = Guid.initString("8f942dd8-64ed-4aaf-a77d-b23db0837ead");
pub const IID_ITPhoneEvent = &IID_ITPhoneEvent_Value;
pub const ITPhoneEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Phone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneEvent,
            pp_phone: ?*?*ITPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneEvent,
            p_event: ?*PHONE_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ButtonState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneEvent,
            p_state: ?*PHONE_BUTTON_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HookSwitchState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneEvent,
            p_state: ?*PHONE_HOOK_SWITCH_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HookSwitchDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneEvent,
            p_device: ?*PHONE_HOOK_SWITCH_DEVICE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RingMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneEvent,
            pl_ring_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ButtonLampId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneEvent,
            pl_button_lamp_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberGathered: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneEvent,
            pp_number: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneEvent,
            pp_call_info: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPhone(self: *const T, pp_phone_: ?*?*ITPhone) HRESULT {
                return @as(*const ITPhoneEvent.VTable, @ptrCast(self.vtable)).get_Phone(@as(*const ITPhoneEvent, @ptrCast(self)), pp_phone_);
            }
            pub inline fn getEvent(self: *const T, p_event_: ?*PHONE_EVENT) HRESULT {
                return @as(*const ITPhoneEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITPhoneEvent, @ptrCast(self)), p_event_);
            }
            pub inline fn getButtonState(self: *const T, p_state_: ?*PHONE_BUTTON_STATE) HRESULT {
                return @as(*const ITPhoneEvent.VTable, @ptrCast(self.vtable)).get_ButtonState(@as(*const ITPhoneEvent, @ptrCast(self)), p_state_);
            }
            pub inline fn getHookSwitchState(self: *const T, p_state_: ?*PHONE_HOOK_SWITCH_STATE) HRESULT {
                return @as(*const ITPhoneEvent.VTable, @ptrCast(self.vtable)).get_HookSwitchState(@as(*const ITPhoneEvent, @ptrCast(self)), p_state_);
            }
            pub inline fn getHookSwitchDevice(self: *const T, p_device_: ?*PHONE_HOOK_SWITCH_DEVICE) HRESULT {
                return @as(*const ITPhoneEvent.VTable, @ptrCast(self.vtable)).get_HookSwitchDevice(@as(*const ITPhoneEvent, @ptrCast(self)), p_device_);
            }
            pub inline fn getRingMode(self: *const T, pl_ring_mode_: ?*i32) HRESULT {
                return @as(*const ITPhoneEvent.VTable, @ptrCast(self.vtable)).get_RingMode(@as(*const ITPhoneEvent, @ptrCast(self)), pl_ring_mode_);
            }
            pub inline fn getButtonLampId(self: *const T, pl_button_lamp_id_: ?*i32) HRESULT {
                return @as(*const ITPhoneEvent.VTable, @ptrCast(self.vtable)).get_ButtonLampId(@as(*const ITPhoneEvent, @ptrCast(self)), pl_button_lamp_id_);
            }
            pub inline fn getNumberGathered(self: *const T, pp_number_: ?*?BSTR) HRESULT {
                return @as(*const ITPhoneEvent.VTable, @ptrCast(self.vtable)).get_NumberGathered(@as(*const ITPhoneEvent, @ptrCast(self)), pp_number_);
            }
            pub inline fn getCall(self: *const T, pp_call_info_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITPhoneEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITPhoneEvent, @ptrCast(self)), pp_call_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCallStateEvent_Value = Guid.initString("62f47097-95c9-11d0-835d-00aa003ccabd");
pub const IID_ITCallStateEvent = &IID_ITCallStateEvent_Value;
pub const ITCallStateEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallStateEvent,
            pp_call_info: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallStateEvent,
            p_call_state: ?*CALL_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cause: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallStateEvent,
            p_c_e_c: ?*CALL_STATE_EVENT_CAUSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallbackInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallStateEvent,
            pl_callback_instance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCall(self: *const T, pp_call_info_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITCallStateEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITCallStateEvent, @ptrCast(self)), pp_call_info_);
            }
            pub inline fn getState(self: *const T, p_call_state_: ?*CALL_STATE) HRESULT {
                return @as(*const ITCallStateEvent.VTable, @ptrCast(self.vtable)).get_State(@as(*const ITCallStateEvent, @ptrCast(self)), p_call_state_);
            }
            pub inline fn getCause(self: *const T, p_c_e_c_: ?*CALL_STATE_EVENT_CAUSE) HRESULT {
                return @as(*const ITCallStateEvent.VTable, @ptrCast(self.vtable)).get_Cause(@as(*const ITCallStateEvent, @ptrCast(self)), p_c_e_c_);
            }
            pub inline fn getCallbackInstance(self: *const T, pl_callback_instance_: ?*i32) HRESULT {
                return @as(*const ITCallStateEvent.VTable, @ptrCast(self.vtable)).get_CallbackInstance(@as(*const ITCallStateEvent, @ptrCast(self)), pl_callback_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITPhoneDeviceSpecificEvent_Value = Guid.initString("63ffb2a6-872b-4cd3-a501-326e8fb40af7");
pub const IID_ITPhoneDeviceSpecificEvent = &IID_ITPhoneDeviceSpecificEvent_Value;
pub const ITPhoneDeviceSpecificEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Phone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneDeviceSpecificEvent,
            pp_phone: ?*?*ITPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lParam1: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneDeviceSpecificEvent,
            p_param1: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lParam2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneDeviceSpecificEvent,
            p_param2: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lParam3: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITPhoneDeviceSpecificEvent,
            p_param3: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPhone(self: *const T, pp_phone_: ?*?*ITPhone) HRESULT {
                return @as(*const ITPhoneDeviceSpecificEvent.VTable, @ptrCast(self.vtable)).get_Phone(@as(*const ITPhoneDeviceSpecificEvent, @ptrCast(self)), pp_phone_);
            }
            pub inline fn getLParam1(self: *const T, p_param1_: ?*i32) HRESULT {
                return @as(*const ITPhoneDeviceSpecificEvent.VTable, @ptrCast(self.vtable)).get_lParam1(@as(*const ITPhoneDeviceSpecificEvent, @ptrCast(self)), p_param1_);
            }
            pub inline fn getLParam2(self: *const T, p_param2_: ?*i32) HRESULT {
                return @as(*const ITPhoneDeviceSpecificEvent.VTable, @ptrCast(self.vtable)).get_lParam2(@as(*const ITPhoneDeviceSpecificEvent, @ptrCast(self)), p_param2_);
            }
            pub inline fn getLParam3(self: *const T, p_param3_: ?*i32) HRESULT {
                return @as(*const ITPhoneDeviceSpecificEvent.VTable, @ptrCast(self.vtable)).get_lParam3(@as(*const ITPhoneDeviceSpecificEvent, @ptrCast(self)), p_param3_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCallMediaEvent_Value = Guid.initString("ff36b87f-ec3a-11d0-8ee4-00c04fb6809f");
pub const IID_ITCallMediaEvent = &IID_ITCallMediaEvent_Value;
pub const ITCallMediaEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallMediaEvent,
            pp_call_info: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallMediaEvent,
            p_call_media_event: ?*CALL_MEDIA_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Error: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallMediaEvent,
            phr_error: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Terminal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallMediaEvent,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Stream: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallMediaEvent,
            pp_stream: ?*?*ITStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cause: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallMediaEvent,
            p_cause: ?*CALL_MEDIA_EVENT_CAUSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCall(self: *const T, pp_call_info_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITCallMediaEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITCallMediaEvent, @ptrCast(self)), pp_call_info_);
            }
            pub inline fn getEvent(self: *const T, p_call_media_event_: ?*CALL_MEDIA_EVENT) HRESULT {
                return @as(*const ITCallMediaEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITCallMediaEvent, @ptrCast(self)), p_call_media_event_);
            }
            pub inline fn getError(self: *const T, phr_error_: ?*HRESULT) HRESULT {
                return @as(*const ITCallMediaEvent.VTable, @ptrCast(self.vtable)).get_Error(@as(*const ITCallMediaEvent, @ptrCast(self)), phr_error_);
            }
            pub inline fn getTerminal(self: *const T, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITCallMediaEvent.VTable, @ptrCast(self.vtable)).get_Terminal(@as(*const ITCallMediaEvent, @ptrCast(self)), pp_terminal_);
            }
            pub inline fn getStream(self: *const T, pp_stream_: ?*?*ITStream) HRESULT {
                return @as(*const ITCallMediaEvent.VTable, @ptrCast(self.vtable)).get_Stream(@as(*const ITCallMediaEvent, @ptrCast(self)), pp_stream_);
            }
            pub inline fn getCause(self: *const T, p_cause_: ?*CALL_MEDIA_EVENT_CAUSE) HRESULT {
                return @as(*const ITCallMediaEvent.VTable, @ptrCast(self.vtable)).get_Cause(@as(*const ITCallMediaEvent, @ptrCast(self)), p_cause_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITDigitDetectionEvent_Value = Guid.initString("80d3bfac-57d9-11d2-a04a-00c04fb6809f");
pub const IID_ITDigitDetectionEvent = &IID_ITDigitDetectionEvent_Value;
pub const ITDigitDetectionEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitDetectionEvent,
            pp_call_info: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Digit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitDetectionEvent,
            puc_digit: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DigitMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitDetectionEvent,
            p_digit_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TickCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitDetectionEvent,
            pl_tick_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallbackInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitDetectionEvent,
            pl_callback_instance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCall(self: *const T, pp_call_info_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITDigitDetectionEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITDigitDetectionEvent, @ptrCast(self)), pp_call_info_);
            }
            pub inline fn getDigit(self: *const T, puc_digit_: ?*u8) HRESULT {
                return @as(*const ITDigitDetectionEvent.VTable, @ptrCast(self.vtable)).get_Digit(@as(*const ITDigitDetectionEvent, @ptrCast(self)), puc_digit_);
            }
            pub inline fn getDigitMode(self: *const T, p_digit_mode_: ?*i32) HRESULT {
                return @as(*const ITDigitDetectionEvent.VTable, @ptrCast(self.vtable)).get_DigitMode(@as(*const ITDigitDetectionEvent, @ptrCast(self)), p_digit_mode_);
            }
            pub inline fn getTickCount(self: *const T, pl_tick_count_: ?*i32) HRESULT {
                return @as(*const ITDigitDetectionEvent.VTable, @ptrCast(self.vtable)).get_TickCount(@as(*const ITDigitDetectionEvent, @ptrCast(self)), pl_tick_count_);
            }
            pub inline fn getCallbackInstance(self: *const T, pl_callback_instance_: ?*i32) HRESULT {
                return @as(*const ITDigitDetectionEvent.VTable, @ptrCast(self.vtable)).get_CallbackInstance(@as(*const ITDigitDetectionEvent, @ptrCast(self)), pl_callback_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITDigitGenerationEvent_Value = Guid.initString("80d3bfad-57d9-11d2-a04a-00c04fb6809f");
pub const IID_ITDigitGenerationEvent = &IID_ITDigitGenerationEvent_Value;
pub const ITDigitGenerationEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitGenerationEvent,
            pp_call_info: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GenerationTermination: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitGenerationEvent,
            pl_generation_termination: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TickCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitGenerationEvent,
            pl_tick_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallbackInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitGenerationEvent,
            pl_callback_instance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCall(self: *const T, pp_call_info_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITDigitGenerationEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITDigitGenerationEvent, @ptrCast(self)), pp_call_info_);
            }
            pub inline fn getGenerationTermination(self: *const T, pl_generation_termination_: ?*i32) HRESULT {
                return @as(*const ITDigitGenerationEvent.VTable, @ptrCast(self.vtable)).get_GenerationTermination(@as(*const ITDigitGenerationEvent, @ptrCast(self)), pl_generation_termination_);
            }
            pub inline fn getTickCount(self: *const T, pl_tick_count_: ?*i32) HRESULT {
                return @as(*const ITDigitGenerationEvent.VTable, @ptrCast(self.vtable)).get_TickCount(@as(*const ITDigitGenerationEvent, @ptrCast(self)), pl_tick_count_);
            }
            pub inline fn getCallbackInstance(self: *const T, pl_callback_instance_: ?*i32) HRESULT {
                return @as(*const ITDigitGenerationEvent.VTable, @ptrCast(self.vtable)).get_CallbackInstance(@as(*const ITDigitGenerationEvent, @ptrCast(self)), pl_callback_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITDigitsGatheredEvent_Value = Guid.initString("e52ec4c1-cba3-441a-9e6a-93cb909e9724");
pub const IID_ITDigitsGatheredEvent = &IID_ITDigitsGatheredEvent_Value;
pub const ITDigitsGatheredEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitsGatheredEvent,
            pp_call_info: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Digits: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitsGatheredEvent,
            pp_digits: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GatherTermination: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitsGatheredEvent,
            p_gather_termination: ?*TAPI_GATHERTERM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TickCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitsGatheredEvent,
            pl_tick_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallbackInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDigitsGatheredEvent,
            pl_callback_instance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCall(self: *const T, pp_call_info_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITDigitsGatheredEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITDigitsGatheredEvent, @ptrCast(self)), pp_call_info_);
            }
            pub inline fn getDigits(self: *const T, pp_digits_: ?*?BSTR) HRESULT {
                return @as(*const ITDigitsGatheredEvent.VTable, @ptrCast(self.vtable)).get_Digits(@as(*const ITDigitsGatheredEvent, @ptrCast(self)), pp_digits_);
            }
            pub inline fn getGatherTermination(self: *const T, p_gather_termination_: ?*TAPI_GATHERTERM) HRESULT {
                return @as(*const ITDigitsGatheredEvent.VTable, @ptrCast(self.vtable)).get_GatherTermination(@as(*const ITDigitsGatheredEvent, @ptrCast(self)), p_gather_termination_);
            }
            pub inline fn getTickCount(self: *const T, pl_tick_count_: ?*i32) HRESULT {
                return @as(*const ITDigitsGatheredEvent.VTable, @ptrCast(self.vtable)).get_TickCount(@as(*const ITDigitsGatheredEvent, @ptrCast(self)), pl_tick_count_);
            }
            pub inline fn getCallbackInstance(self: *const T, pl_callback_instance_: ?*i32) HRESULT {
                return @as(*const ITDigitsGatheredEvent.VTable, @ptrCast(self.vtable)).get_CallbackInstance(@as(*const ITDigitsGatheredEvent, @ptrCast(self)), pl_callback_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITToneDetectionEvent_Value = Guid.initString("407e0faf-d047-4753-b0c6-8e060373fecd");
pub const IID_ITToneDetectionEvent = &IID_ITToneDetectionEvent_Value;
pub const ITToneDetectionEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITToneDetectionEvent,
            pp_call_info: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppSpecific: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITToneDetectionEvent,
            pl_app_specific: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TickCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITToneDetectionEvent,
            pl_tick_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallbackInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITToneDetectionEvent,
            pl_callback_instance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCall(self: *const T, pp_call_info_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITToneDetectionEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITToneDetectionEvent, @ptrCast(self)), pp_call_info_);
            }
            pub inline fn getAppSpecific(self: *const T, pl_app_specific_: ?*i32) HRESULT {
                return @as(*const ITToneDetectionEvent.VTable, @ptrCast(self.vtable)).get_AppSpecific(@as(*const ITToneDetectionEvent, @ptrCast(self)), pl_app_specific_);
            }
            pub inline fn getTickCount(self: *const T, pl_tick_count_: ?*i32) HRESULT {
                return @as(*const ITToneDetectionEvent.VTable, @ptrCast(self.vtable)).get_TickCount(@as(*const ITToneDetectionEvent, @ptrCast(self)), pl_tick_count_);
            }
            pub inline fn getCallbackInstance(self: *const T, pl_callback_instance_: ?*i32) HRESULT {
                return @as(*const ITToneDetectionEvent.VTable, @ptrCast(self.vtable)).get_CallbackInstance(@as(*const ITToneDetectionEvent, @ptrCast(self)), pl_callback_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTAPIObjectEvent_Value = Guid.initString("f4854d48-937a-11d1-bb58-00c04fb6809f");
pub const IID_ITTAPIObjectEvent = &IID_ITTAPIObjectEvent_Value;
pub const ITTAPIObjectEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TAPIObject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPIObjectEvent,
            pp_t_a_p_i_object: ?*?*ITTAPI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPIObjectEvent,
            p_event: ?*TAPIOBJECT_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPIObjectEvent,
            pp_address: ?*?*ITAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallbackInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPIObjectEvent,
            pl_callback_instance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTAPIObject(self: *const T, pp_t_a_p_i_object_: ?*?*ITTAPI) HRESULT {
                return @as(*const ITTAPIObjectEvent.VTable, @ptrCast(self.vtable)).get_TAPIObject(@as(*const ITTAPIObjectEvent, @ptrCast(self)), pp_t_a_p_i_object_);
            }
            pub inline fn getEvent(self: *const T, p_event_: ?*TAPIOBJECT_EVENT) HRESULT {
                return @as(*const ITTAPIObjectEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITTAPIObjectEvent, @ptrCast(self)), p_event_);
            }
            pub inline fn getAddress(self: *const T, pp_address_: ?*?*ITAddress) HRESULT {
                return @as(*const ITTAPIObjectEvent.VTable, @ptrCast(self.vtable)).get_Address(@as(*const ITTAPIObjectEvent, @ptrCast(self)), pp_address_);
            }
            pub inline fn getCallbackInstance(self: *const T, pl_callback_instance_: ?*i32) HRESULT {
                return @as(*const ITTAPIObjectEvent.VTable, @ptrCast(self.vtable)).get_CallbackInstance(@as(*const ITTAPIObjectEvent, @ptrCast(self)), pl_callback_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTAPIObjectEvent2_Value = Guid.initString("359dda6e-68ce-4383-bf0b-169133c41b46");
pub const IID_ITTAPIObjectEvent2 = &IID_ITTAPIObjectEvent2_Value;
pub const ITTAPIObjectEvent2 = extern struct {
    pub const VTable = extern struct {
        base: ITTAPIObjectEvent.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Phone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPIObjectEvent2,
            pp_phone: ?*?*ITPhone,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITTAPIObjectEvent.MethodMixin(T);
            pub inline fn getPhone(self: *const T, pp_phone_: ?*?*ITPhone) HRESULT {
                return @as(*const ITTAPIObjectEvent2.VTable, @ptrCast(self.vtable)).get_Phone(@as(*const ITTAPIObjectEvent2, @ptrCast(self)), pp_phone_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTAPIEventNotification_Value = Guid.initString("eddb9426-3b91-11d1-8f30-00c04fb6809f");
pub const IID_ITTAPIEventNotification = &IID_ITTAPIEventNotification_Value;
pub const ITTAPIEventNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Event: *const fn (
            self: *const ITTAPIEventNotification,
            tapi_event: TAPI_EVENT,
            p_event: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn event(self: *const T, tapi_event_: TAPI_EVENT, p_event_: ?*IDispatch) HRESULT {
                return @as(*const ITTAPIEventNotification.VTable, @ptrCast(self.vtable)).Event(@as(*const ITTAPIEventNotification, @ptrCast(self)), tapi_event_, p_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCallHubEvent_Value = Guid.initString("a3c15451-5b92-11d1-8f4e-00c04fb6809f");
pub const IID_ITCallHubEvent = &IID_ITCallHubEvent_Value;
pub const ITCallHubEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallHubEvent,
            p_event: ?*CALLHUB_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallHub: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallHubEvent,
            pp_call_hub: ?*?*ITCallHub,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallHubEvent,
            pp_call: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getEvent(self: *const T, p_event_: ?*CALLHUB_EVENT) HRESULT {
                return @as(*const ITCallHubEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITCallHubEvent, @ptrCast(self)), p_event_);
            }
            pub inline fn getCallHub(self: *const T, pp_call_hub_: ?*?*ITCallHub) HRESULT {
                return @as(*const ITCallHubEvent.VTable, @ptrCast(self.vtable)).get_CallHub(@as(*const ITCallHubEvent, @ptrCast(self)), pp_call_hub_);
            }
            pub inline fn getCall(self: *const T, pp_call_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITCallHubEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITCallHubEvent, @ptrCast(self)), pp_call_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAddressEvent_Value = Guid.initString("831ce2d1-83b5-11d1-bb5c-00c04fb6809f");
pub const IID_ITAddressEvent = &IID_ITAddressEvent_Value;
pub const ITAddressEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressEvent,
            pp_address: ?*?*ITAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressEvent,
            p_event: ?*ADDRESS_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Terminal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressEvent,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAddress(self: *const T, pp_address_: ?*?*ITAddress) HRESULT {
                return @as(*const ITAddressEvent.VTable, @ptrCast(self.vtable)).get_Address(@as(*const ITAddressEvent, @ptrCast(self)), pp_address_);
            }
            pub inline fn getEvent(self: *const T, p_event_: ?*ADDRESS_EVENT) HRESULT {
                return @as(*const ITAddressEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITAddressEvent, @ptrCast(self)), p_event_);
            }
            pub inline fn getTerminal(self: *const T, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITAddressEvent.VTable, @ptrCast(self.vtable)).get_Terminal(@as(*const ITAddressEvent, @ptrCast(self)), pp_terminal_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAddressDeviceSpecificEvent_Value = Guid.initString("3acb216b-40bd-487a-8672-5ce77bd7e3a3");
pub const IID_ITAddressDeviceSpecificEvent = &IID_ITAddressDeviceSpecificEvent_Value;
pub const ITAddressDeviceSpecificEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressDeviceSpecificEvent,
            pp_address: ?*?*ITAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressDeviceSpecificEvent,
            pp_call: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lParam1: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressDeviceSpecificEvent,
            p_param1: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lParam2: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressDeviceSpecificEvent,
            p_param2: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lParam3: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressDeviceSpecificEvent,
            p_param3: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAddress(self: *const T, pp_address_: ?*?*ITAddress) HRESULT {
                return @as(*const ITAddressDeviceSpecificEvent.VTable, @ptrCast(self.vtable)).get_Address(@as(*const ITAddressDeviceSpecificEvent, @ptrCast(self)), pp_address_);
            }
            pub inline fn getCall(self: *const T, pp_call_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITAddressDeviceSpecificEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITAddressDeviceSpecificEvent, @ptrCast(self)), pp_call_);
            }
            pub inline fn getLParam1(self: *const T, p_param1_: ?*i32) HRESULT {
                return @as(*const ITAddressDeviceSpecificEvent.VTable, @ptrCast(self.vtable)).get_lParam1(@as(*const ITAddressDeviceSpecificEvent, @ptrCast(self)), p_param1_);
            }
            pub inline fn getLParam2(self: *const T, p_param2_: ?*i32) HRESULT {
                return @as(*const ITAddressDeviceSpecificEvent.VTable, @ptrCast(self.vtable)).get_lParam2(@as(*const ITAddressDeviceSpecificEvent, @ptrCast(self)), p_param2_);
            }
            pub inline fn getLParam3(self: *const T, p_param3_: ?*i32) HRESULT {
                return @as(*const ITAddressDeviceSpecificEvent.VTable, @ptrCast(self.vtable)).get_lParam3(@as(*const ITAddressDeviceSpecificEvent, @ptrCast(self)), p_param3_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITFileTerminalEvent_Value = Guid.initString("e4a7fbac-8c17-4427-9f55-9f589ac8af00");
pub const IID_ITFileTerminalEvent = &IID_ITFileTerminalEvent_Value;
pub const ITFileTerminalEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Terminal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTerminalEvent,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Track: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTerminalEvent,
            pp_track_terminal: ?*?*ITFileTrack,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTerminalEvent,
            pp_call: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTerminalEvent,
            p_state: ?*TERMINAL_MEDIA_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cause: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTerminalEvent,
            p_cause: ?*FT_STATE_EVENT_CAUSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Error: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITFileTerminalEvent,
            phr_error_code: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTerminal(self: *const T, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITFileTerminalEvent.VTable, @ptrCast(self.vtable)).get_Terminal(@as(*const ITFileTerminalEvent, @ptrCast(self)), pp_terminal_);
            }
            pub inline fn getTrack(self: *const T, pp_track_terminal_: ?*?*ITFileTrack) HRESULT {
                return @as(*const ITFileTerminalEvent.VTable, @ptrCast(self.vtable)).get_Track(@as(*const ITFileTerminalEvent, @ptrCast(self)), pp_track_terminal_);
            }
            pub inline fn getCall(self: *const T, pp_call_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITFileTerminalEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITFileTerminalEvent, @ptrCast(self)), pp_call_);
            }
            pub inline fn getState(self: *const T, p_state_: ?*TERMINAL_MEDIA_STATE) HRESULT {
                return @as(*const ITFileTerminalEvent.VTable, @ptrCast(self.vtable)).get_State(@as(*const ITFileTerminalEvent, @ptrCast(self)), p_state_);
            }
            pub inline fn getCause(self: *const T, p_cause_: ?*FT_STATE_EVENT_CAUSE) HRESULT {
                return @as(*const ITFileTerminalEvent.VTable, @ptrCast(self.vtable)).get_Cause(@as(*const ITFileTerminalEvent, @ptrCast(self)), p_cause_);
            }
            pub inline fn getError(self: *const T, phr_error_code_: ?*HRESULT) HRESULT {
                return @as(*const ITFileTerminalEvent.VTable, @ptrCast(self.vtable)).get_Error(@as(*const ITFileTerminalEvent, @ptrCast(self)), phr_error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTTSTerminalEvent_Value = Guid.initString("d964788f-95a5-461d-ab0c-b9900a6c2713");
pub const IID_ITTTSTerminalEvent = &IID_ITTTSTerminalEvent_Value;
pub const ITTTSTerminalEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Terminal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTTSTerminalEvent,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTTSTerminalEvent,
            pp_call: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Error: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTTSTerminalEvent,
            phr_error_code: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTerminal(self: *const T, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITTTSTerminalEvent.VTable, @ptrCast(self.vtable)).get_Terminal(@as(*const ITTTSTerminalEvent, @ptrCast(self)), pp_terminal_);
            }
            pub inline fn getCall(self: *const T, pp_call_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITTTSTerminalEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITTTSTerminalEvent, @ptrCast(self)), pp_call_);
            }
            pub inline fn getError(self: *const T, phr_error_code_: ?*HRESULT) HRESULT {
                return @as(*const ITTTSTerminalEvent.VTable, @ptrCast(self.vtable)).get_Error(@as(*const ITTTSTerminalEvent, @ptrCast(self)), phr_error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITASRTerminalEvent_Value = Guid.initString("ee016a02-4fa9-467c-933f-5a15b12377d7");
pub const IID_ITASRTerminalEvent = &IID_ITASRTerminalEvent_Value;
pub const ITASRTerminalEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Terminal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITASRTerminalEvent,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITASRTerminalEvent,
            pp_call: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Error: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITASRTerminalEvent,
            phr_error_code: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTerminal(self: *const T, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITASRTerminalEvent.VTable, @ptrCast(self.vtable)).get_Terminal(@as(*const ITASRTerminalEvent, @ptrCast(self)), pp_terminal_);
            }
            pub inline fn getCall(self: *const T, pp_call_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITASRTerminalEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITASRTerminalEvent, @ptrCast(self)), pp_call_);
            }
            pub inline fn getError(self: *const T, phr_error_code_: ?*HRESULT) HRESULT {
                return @as(*const ITASRTerminalEvent.VTable, @ptrCast(self.vtable)).get_Error(@as(*const ITASRTerminalEvent, @ptrCast(self)), phr_error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITToneTerminalEvent_Value = Guid.initString("e6f56009-611f-4945-bbd2-2d0ce5612056");
pub const IID_ITToneTerminalEvent = &IID_ITToneTerminalEvent_Value;
pub const ITToneTerminalEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Terminal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITToneTerminalEvent,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITToneTerminalEvent,
            pp_call: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Error: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITToneTerminalEvent,
            phr_error_code: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTerminal(self: *const T, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITToneTerminalEvent.VTable, @ptrCast(self.vtable)).get_Terminal(@as(*const ITToneTerminalEvent, @ptrCast(self)), pp_terminal_);
            }
            pub inline fn getCall(self: *const T, pp_call_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITToneTerminalEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITToneTerminalEvent, @ptrCast(self)), pp_call_);
            }
            pub inline fn getError(self: *const T, phr_error_code_: ?*HRESULT) HRESULT {
                return @as(*const ITToneTerminalEvent.VTable, @ptrCast(self.vtable)).get_Error(@as(*const ITToneTerminalEvent, @ptrCast(self)), phr_error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITQOSEvent_Value = Guid.initString("cfa3357c-ad77-11d1-bb68-00c04fb6809f");
pub const IID_ITQOSEvent = &IID_ITQOSEvent_Value;
pub const ITQOSEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQOSEvent,
            pp_call: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQOSEvent,
            p_qos_event: ?*QOS_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQOSEvent,
            pl_media_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCall(self: *const T, pp_call_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITQOSEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITQOSEvent, @ptrCast(self)), pp_call_);
            }
            pub inline fn getEvent(self: *const T, p_qos_event_: ?*QOS_EVENT) HRESULT {
                return @as(*const ITQOSEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITQOSEvent, @ptrCast(self)), p_qos_event_);
            }
            pub inline fn getMediaType(self: *const T, pl_media_type_: ?*i32) HRESULT {
                return @as(*const ITQOSEvent.VTable, @ptrCast(self.vtable)).get_MediaType(@as(*const ITQOSEvent, @ptrCast(self)), pl_media_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCallInfoChangeEvent_Value = Guid.initString("5d4b65f9-e51c-11d1-a02f-00c04fb6809f");
pub const IID_ITCallInfoChangeEvent = &IID_ITCallInfoChangeEvent_Value;
pub const ITCallInfoChangeEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfoChangeEvent,
            pp_call: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cause: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfoChangeEvent,
            p_c_i_c: ?*CALLINFOCHANGE_CAUSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallbackInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallInfoChangeEvent,
            pl_callback_instance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCall(self: *const T, pp_call_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITCallInfoChangeEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITCallInfoChangeEvent, @ptrCast(self)), pp_call_);
            }
            pub inline fn getCause(self: *const T, p_c_i_c_: ?*CALLINFOCHANGE_CAUSE) HRESULT {
                return @as(*const ITCallInfoChangeEvent.VTable, @ptrCast(self.vtable)).get_Cause(@as(*const ITCallInfoChangeEvent, @ptrCast(self)), p_c_i_c_);
            }
            pub inline fn getCallbackInstance(self: *const T, pl_callback_instance_: ?*i32) HRESULT {
                return @as(*const ITCallInfoChangeEvent.VTable, @ptrCast(self.vtable)).get_CallbackInstance(@as(*const ITCallInfoChangeEvent, @ptrCast(self)), pl_callback_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITRequest_Value = Guid.initString("ac48ffdf-f8c4-11d1-a030-00c04fb6809f");
pub const IID_ITRequest = &IID_ITRequest_Value;
pub const ITRequest = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        MakeCall: *const fn (
            self: *const ITRequest,
            p_dest_address: ?BSTR,
            p_app_name: ?BSTR,
            p_called_party: ?BSTR,
            p_comment: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn makeCall(self: *const T, p_dest_address_: ?BSTR, p_app_name_: ?BSTR, p_called_party_: ?BSTR, p_comment_: ?BSTR) HRESULT {
                return @as(*const ITRequest.VTable, @ptrCast(self.vtable)).MakeCall(@as(*const ITRequest, @ptrCast(self)), p_dest_address_, p_app_name_, p_called_party_, p_comment_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITRequestEvent_Value = Guid.initString("ac48ffde-f8c4-11d1-a030-00c04fb6809f");
pub const IID_ITRequestEvent = &IID_ITRequestEvent_Value;
pub const ITRequestEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegistrationInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITRequestEvent,
            pl_registration_instance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITRequestEvent,
            pl_request_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITRequestEvent,
            pp_dest_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITRequestEvent,
            pp_app_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CalledParty: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITRequestEvent,
            pp_called_party: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Comment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITRequestEvent,
            pp_comment: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getRegistrationInstance(self: *const T, pl_registration_instance_: ?*i32) HRESULT {
                return @as(*const ITRequestEvent.VTable, @ptrCast(self.vtable)).get_RegistrationInstance(@as(*const ITRequestEvent, @ptrCast(self)), pl_registration_instance_);
            }
            pub inline fn getRequestMode(self: *const T, pl_request_mode_: ?*i32) HRESULT {
                return @as(*const ITRequestEvent.VTable, @ptrCast(self.vtable)).get_RequestMode(@as(*const ITRequestEvent, @ptrCast(self)), pl_request_mode_);
            }
            pub inline fn getDestAddress(self: *const T, pp_dest_address_: ?*?BSTR) HRESULT {
                return @as(*const ITRequestEvent.VTable, @ptrCast(self.vtable)).get_DestAddress(@as(*const ITRequestEvent, @ptrCast(self)), pp_dest_address_);
            }
            pub inline fn getAppName(self: *const T, pp_app_name_: ?*?BSTR) HRESULT {
                return @as(*const ITRequestEvent.VTable, @ptrCast(self.vtable)).get_AppName(@as(*const ITRequestEvent, @ptrCast(self)), pp_app_name_);
            }
            pub inline fn getCalledParty(self: *const T, pp_called_party_: ?*?BSTR) HRESULT {
                return @as(*const ITRequestEvent.VTable, @ptrCast(self.vtable)).get_CalledParty(@as(*const ITRequestEvent, @ptrCast(self)), pp_called_party_);
            }
            pub inline fn getComment(self: *const T, pp_comment_: ?*?BSTR) HRESULT {
                return @as(*const ITRequestEvent.VTable, @ptrCast(self.vtable)).get_Comment(@as(*const ITRequestEvent, @ptrCast(self)), pp_comment_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCollection_Value = Guid.initString("5ec5acf2-9c02-11d0-8362-00aa003ccabd");
pub const IID_ITCollection = &IID_ITCollection_Value;
pub const ITCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCollection,
            l_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCollection,
            index: i32,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCollection,
            pp_new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, l_count_: ?*i32) HRESULT {
                return @as(*const ITCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ITCollection, @ptrCast(self)), l_count_);
            }
            pub inline fn getItem(self: *const T, index_: i32, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ITCollection, @ptrCast(self)), index_, p_variant_);
            }
            pub inline fn getNewEnum(self: *const T, pp_new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const ITCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ITCollection, @ptrCast(self)), pp_new_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCollection2_Value = Guid.initString("e6dddda5-a6d3-48ff-8737-d32fc4d95477");
pub const IID_ITCollection2 = &IID_ITCollection2_Value;
pub const ITCollection2 = extern struct {
    pub const VTable = extern struct {
        base: ITCollection.VTable,
        Add: *const fn (
            self: *const ITCollection2,
            index: i32,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ITCollection2,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITCollection.MethodMixin(T);
            pub inline fn add(self: *const T, index_: i32, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITCollection2.VTable, @ptrCast(self.vtable)).Add(@as(*const ITCollection2, @ptrCast(self)), index_, p_variant_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ITCollection2.VTable, @ptrCast(self.vtable)).Remove(@as(*const ITCollection2, @ptrCast(self)), index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITForwardInformation_Value = Guid.initString("449f659e-88a3-11d1-bb5d-00c04fb6809f");
pub const IID_ITForwardInformation = &IID_ITForwardInformation_Value;
pub const ITForwardInformation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NumRingsNoAnswer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITForwardInformation,
            l_num_rings: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumRingsNoAnswer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITForwardInformation,
            pl_num_rings: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetForwardType: *const fn (
            self: *const ITForwardInformation,
            forward_type: i32,
            p_dest_address: ?BSTR,
            p_caller_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForwardTypeDestination: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITForwardInformation,
            forward_type: i32,
            pp_dest_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForwardTypeCaller: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITForwardInformation,
            forwardtype: i32,
            pp_caller_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForwardType: *const fn (
            self: *const ITForwardInformation,
            forward_type: i32,
            pp_destination_address: ?*?BSTR,
            pp_caller_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ITForwardInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putNumRingsNoAnswer(self: *const T, l_num_rings_: i32) HRESULT {
                return @as(*const ITForwardInformation.VTable, @ptrCast(self.vtable)).put_NumRingsNoAnswer(@as(*const ITForwardInformation, @ptrCast(self)), l_num_rings_);
            }
            pub inline fn getNumRingsNoAnswer(self: *const T, pl_num_rings_: ?*i32) HRESULT {
                return @as(*const ITForwardInformation.VTable, @ptrCast(self.vtable)).get_NumRingsNoAnswer(@as(*const ITForwardInformation, @ptrCast(self)), pl_num_rings_);
            }
            pub inline fn setForwardType(self: *const T, forward_type_: i32, p_dest_address_: ?BSTR, p_caller_address_: ?BSTR) HRESULT {
                return @as(*const ITForwardInformation.VTable, @ptrCast(self.vtable)).SetForwardType(@as(*const ITForwardInformation, @ptrCast(self)), forward_type_, p_dest_address_, p_caller_address_);
            }
            pub inline fn getForwardTypeDestination(self: *const T, forward_type_: i32, pp_dest_address_: ?*?BSTR) HRESULT {
                return @as(*const ITForwardInformation.VTable, @ptrCast(self.vtable)).get_ForwardTypeDestination(@as(*const ITForwardInformation, @ptrCast(self)), forward_type_, pp_dest_address_);
            }
            pub inline fn getForwardTypeCaller(self: *const T, forwardtype_: i32, pp_caller_address_: ?*?BSTR) HRESULT {
                return @as(*const ITForwardInformation.VTable, @ptrCast(self.vtable)).get_ForwardTypeCaller(@as(*const ITForwardInformation, @ptrCast(self)), forwardtype_, pp_caller_address_);
            }
            pub inline fn getForwardType(self: *const T, forward_type_: i32, pp_destination_address_: ?*?BSTR, pp_caller_address_: ?*?BSTR) HRESULT {
                return @as(*const ITForwardInformation.VTable, @ptrCast(self.vtable)).GetForwardType(@as(*const ITForwardInformation, @ptrCast(self)), forward_type_, pp_destination_address_, pp_caller_address_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ITForwardInformation.VTable, @ptrCast(self.vtable)).Clear(@as(*const ITForwardInformation, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITForwardInformation2_Value = Guid.initString("5229b4ed-b260-4382-8e1a-5df3a8a4ccc0");
pub const IID_ITForwardInformation2 = &IID_ITForwardInformation2_Value;
pub const ITForwardInformation2 = extern struct {
    pub const VTable = extern struct {
        base: ITForwardInformation.VTable,
        SetForwardType2: *const fn (
            self: *const ITForwardInformation2,
            forward_type: i32,
            p_dest_address: ?BSTR,
            dest_address_type: i32,
            p_caller_address: ?BSTR,
            caller_address_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForwardType2: *const fn (
            self: *const ITForwardInformation2,
            forward_type: i32,
            pp_destination_address: ?*?BSTR,
            p_dest_address_type: ?*i32,
            pp_caller_address: ?*?BSTR,
            p_caller_address_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForwardTypeDestinationAddressType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITForwardInformation2,
            forward_type: i32,
            p_dest_address_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForwardTypeCallerAddressType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITForwardInformation2,
            forwardtype: i32,
            p_caller_address_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITForwardInformation.MethodMixin(T);
            pub inline fn setForwardType2(self: *const T, forward_type_: i32, p_dest_address_: ?BSTR, dest_address_type_: i32, p_caller_address_: ?BSTR, caller_address_type_: i32) HRESULT {
                return @as(*const ITForwardInformation2.VTable, @ptrCast(self.vtable)).SetForwardType2(@as(*const ITForwardInformation2, @ptrCast(self)), forward_type_, p_dest_address_, dest_address_type_, p_caller_address_, caller_address_type_);
            }
            pub inline fn getForwardType2(self: *const T, forward_type_: i32, pp_destination_address_: ?*?BSTR, p_dest_address_type_: ?*i32, pp_caller_address_: ?*?BSTR, p_caller_address_type_: ?*i32) HRESULT {
                return @as(*const ITForwardInformation2.VTable, @ptrCast(self.vtable)).GetForwardType2(@as(*const ITForwardInformation2, @ptrCast(self)), forward_type_, pp_destination_address_, p_dest_address_type_, pp_caller_address_, p_caller_address_type_);
            }
            pub inline fn getForwardTypeDestinationAddressType(self: *const T, forward_type_: i32, p_dest_address_type_: ?*i32) HRESULT {
                return @as(*const ITForwardInformation2.VTable, @ptrCast(self.vtable)).get_ForwardTypeDestinationAddressType(@as(*const ITForwardInformation2, @ptrCast(self)), forward_type_, p_dest_address_type_);
            }
            pub inline fn getForwardTypeCallerAddressType(self: *const T, forwardtype_: i32, p_caller_address_type_: ?*i32) HRESULT {
                return @as(*const ITForwardInformation2.VTable, @ptrCast(self.vtable)).get_ForwardTypeCallerAddressType(@as(*const ITForwardInformation2, @ptrCast(self)), forwardtype_, p_caller_address_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAddressTranslation_Value = Guid.initString("0c4d8f03-8ddb-11d1-a09e-00805fc147d3");
pub const IID_ITAddressTranslation = &IID_ITAddressTranslation_Value;
pub const ITAddressTranslation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        TranslateAddress: *const fn (
            self: *const ITAddressTranslation,
            p_address_to_translate: ?BSTR,
            l_card: i32,
            l_translate_options: i32,
            pp_translated: ?*?*ITAddressTranslationInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateDialog: *const fn (
            self: *const ITAddressTranslation,
            hwnd_owner: isize,
            p_address_in: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateLocations: *const fn (
            self: *const ITAddressTranslation,
            pp_enum_location: ?*?*IEnumLocation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Locations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressTranslation,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateCallingCards: *const fn (
            self: *const ITAddressTranslation,
            pp_enum_calling_card: ?*?*IEnumCallingCard,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallingCards: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressTranslation,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn translateAddress(self: *const T, p_address_to_translate_: ?BSTR, l_card_: i32, l_translate_options_: i32, pp_translated_: ?*?*ITAddressTranslationInfo) HRESULT {
                return @as(*const ITAddressTranslation.VTable, @ptrCast(self.vtable)).TranslateAddress(@as(*const ITAddressTranslation, @ptrCast(self)), p_address_to_translate_, l_card_, l_translate_options_, pp_translated_);
            }
            pub inline fn translateDialog(self: *const T, hwnd_owner_: isize, p_address_in_: ?BSTR) HRESULT {
                return @as(*const ITAddressTranslation.VTable, @ptrCast(self.vtable)).TranslateDialog(@as(*const ITAddressTranslation, @ptrCast(self)), hwnd_owner_, p_address_in_);
            }
            pub inline fn enumerateLocations(self: *const T, pp_enum_location_: ?*?*IEnumLocation) HRESULT {
                return @as(*const ITAddressTranslation.VTable, @ptrCast(self.vtable)).EnumerateLocations(@as(*const ITAddressTranslation, @ptrCast(self)), pp_enum_location_);
            }
            pub inline fn getLocations(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAddressTranslation.VTable, @ptrCast(self.vtable)).get_Locations(@as(*const ITAddressTranslation, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateCallingCards(self: *const T, pp_enum_calling_card_: ?*?*IEnumCallingCard) HRESULT {
                return @as(*const ITAddressTranslation.VTable, @ptrCast(self.vtable)).EnumerateCallingCards(@as(*const ITAddressTranslation, @ptrCast(self)), pp_enum_calling_card_);
            }
            pub inline fn getCallingCards(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAddressTranslation.VTable, @ptrCast(self.vtable)).get_CallingCards(@as(*const ITAddressTranslation, @ptrCast(self)), p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAddressTranslationInfo_Value = Guid.initString("afc15945-8d40-11d1-a09e-00805fc147d3");
pub const IID_ITAddressTranslationInfo = &IID_ITAddressTranslationInfo_Value;
pub const ITAddressTranslationInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DialableString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressTranslationInfo,
            pp_dialable_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayableString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressTranslationInfo,
            pp_displayable_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentCountryCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressTranslationInfo,
            country_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DestinationCountryCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressTranslationInfo,
            country_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TranslationResults: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAddressTranslationInfo,
            pl_results: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDialableString(self: *const T, pp_dialable_string_: ?*?BSTR) HRESULT {
                return @as(*const ITAddressTranslationInfo.VTable, @ptrCast(self.vtable)).get_DialableString(@as(*const ITAddressTranslationInfo, @ptrCast(self)), pp_dialable_string_);
            }
            pub inline fn getDisplayableString(self: *const T, pp_displayable_string_: ?*?BSTR) HRESULT {
                return @as(*const ITAddressTranslationInfo.VTable, @ptrCast(self.vtable)).get_DisplayableString(@as(*const ITAddressTranslationInfo, @ptrCast(self)), pp_displayable_string_);
            }
            pub inline fn getCurrentCountryCode(self: *const T, country_code_: ?*i32) HRESULT {
                return @as(*const ITAddressTranslationInfo.VTable, @ptrCast(self.vtable)).get_CurrentCountryCode(@as(*const ITAddressTranslationInfo, @ptrCast(self)), country_code_);
            }
            pub inline fn getDestinationCountryCode(self: *const T, country_code_: ?*i32) HRESULT {
                return @as(*const ITAddressTranslationInfo.VTable, @ptrCast(self.vtable)).get_DestinationCountryCode(@as(*const ITAddressTranslationInfo, @ptrCast(self)), country_code_);
            }
            pub inline fn getTranslationResults(self: *const T, pl_results_: ?*i32) HRESULT {
                return @as(*const ITAddressTranslationInfo.VTable, @ptrCast(self.vtable)).get_TranslationResults(@as(*const ITAddressTranslationInfo, @ptrCast(self)), pl_results_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITLocationInfo_Value = Guid.initString("0c4d8eff-8ddb-11d1-a09e-00805fc147d3");
pub const IID_ITLocationInfo = &IID_ITLocationInfo_Value;
pub const ITLocationInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermanentLocationID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pl_location_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CountryCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pl_country_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CountryID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pl_country_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Options: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pl_options: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredCardID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pl_card_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocationName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pp_location_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CityCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pp_code: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalAccessCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pp_code: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LongDistanceAccessCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pp_code: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TollPrefixList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pp_toll_list: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CancelCallWaitingCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITLocationInfo,
            pp_code: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPermanentLocationID(self: *const T, pl_location_i_d_: ?*i32) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_PermanentLocationID(@as(*const ITLocationInfo, @ptrCast(self)), pl_location_i_d_);
            }
            pub inline fn getCountryCode(self: *const T, pl_country_code_: ?*i32) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_CountryCode(@as(*const ITLocationInfo, @ptrCast(self)), pl_country_code_);
            }
            pub inline fn getCountryID(self: *const T, pl_country_i_d_: ?*i32) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_CountryID(@as(*const ITLocationInfo, @ptrCast(self)), pl_country_i_d_);
            }
            pub inline fn getOptions(self: *const T, pl_options_: ?*i32) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_Options(@as(*const ITLocationInfo, @ptrCast(self)), pl_options_);
            }
            pub inline fn getPreferredCardID(self: *const T, pl_card_i_d_: ?*i32) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_PreferredCardID(@as(*const ITLocationInfo, @ptrCast(self)), pl_card_i_d_);
            }
            pub inline fn getLocationName(self: *const T, pp_location_name_: ?*?BSTR) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_LocationName(@as(*const ITLocationInfo, @ptrCast(self)), pp_location_name_);
            }
            pub inline fn getCityCode(self: *const T, pp_code_: ?*?BSTR) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_CityCode(@as(*const ITLocationInfo, @ptrCast(self)), pp_code_);
            }
            pub inline fn getLocalAccessCode(self: *const T, pp_code_: ?*?BSTR) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_LocalAccessCode(@as(*const ITLocationInfo, @ptrCast(self)), pp_code_);
            }
            pub inline fn getLongDistanceAccessCode(self: *const T, pp_code_: ?*?BSTR) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_LongDistanceAccessCode(@as(*const ITLocationInfo, @ptrCast(self)), pp_code_);
            }
            pub inline fn getTollPrefixList(self: *const T, pp_toll_list_: ?*?BSTR) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_TollPrefixList(@as(*const ITLocationInfo, @ptrCast(self)), pp_toll_list_);
            }
            pub inline fn getCancelCallWaitingCode(self: *const T, pp_code_: ?*?BSTR) HRESULT {
                return @as(*const ITLocationInfo.VTable, @ptrCast(self.vtable)).get_CancelCallWaitingCode(@as(*const ITLocationInfo, @ptrCast(self)), pp_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumLocation_Value = Guid.initString("0c4d8f01-8ddb-11d1-a09e-00805fc147d3");
pub const IID_IEnumLocation = &IID_IEnumLocation_Value;
pub const IEnumLocation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumLocation,
            celt: u32,
            pp_elements: ?*?*ITLocationInfo,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumLocation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumLocation,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumLocation,
            pp_enum: ?*?*IEnumLocation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITLocationInfo, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumLocation.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumLocation, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumLocation.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumLocation, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumLocation.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumLocation, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumLocation) HRESULT {
                return @as(*const IEnumLocation.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumLocation, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCallingCard_Value = Guid.initString("0c4d8f00-8ddb-11d1-a09e-00805fc147d3");
pub const IID_ITCallingCard = &IID_ITCallingCard_Value;
pub const ITCallingCard = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PermanentCardID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallingCard,
            pl_card_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfDigits: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallingCard,
            pl_digits: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Options: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallingCard,
            pl_options: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CardName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallingCard,
            pp_card_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SameAreaDialingRule: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallingCard,
            pp_rule: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LongDistanceDialingRule: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallingCard,
            pp_rule: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternationalDialingRule: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallingCard,
            pp_rule: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPermanentCardID(self: *const T, pl_card_i_d_: ?*i32) HRESULT {
                return @as(*const ITCallingCard.VTable, @ptrCast(self.vtable)).get_PermanentCardID(@as(*const ITCallingCard, @ptrCast(self)), pl_card_i_d_);
            }
            pub inline fn getNumberOfDigits(self: *const T, pl_digits_: ?*i32) HRESULT {
                return @as(*const ITCallingCard.VTable, @ptrCast(self.vtable)).get_NumberOfDigits(@as(*const ITCallingCard, @ptrCast(self)), pl_digits_);
            }
            pub inline fn getOptions(self: *const T, pl_options_: ?*i32) HRESULT {
                return @as(*const ITCallingCard.VTable, @ptrCast(self.vtable)).get_Options(@as(*const ITCallingCard, @ptrCast(self)), pl_options_);
            }
            pub inline fn getCardName(self: *const T, pp_card_name_: ?*?BSTR) HRESULT {
                return @as(*const ITCallingCard.VTable, @ptrCast(self.vtable)).get_CardName(@as(*const ITCallingCard, @ptrCast(self)), pp_card_name_);
            }
            pub inline fn getSameAreaDialingRule(self: *const T, pp_rule_: ?*?BSTR) HRESULT {
                return @as(*const ITCallingCard.VTable, @ptrCast(self.vtable)).get_SameAreaDialingRule(@as(*const ITCallingCard, @ptrCast(self)), pp_rule_);
            }
            pub inline fn getLongDistanceDialingRule(self: *const T, pp_rule_: ?*?BSTR) HRESULT {
                return @as(*const ITCallingCard.VTable, @ptrCast(self.vtable)).get_LongDistanceDialingRule(@as(*const ITCallingCard, @ptrCast(self)), pp_rule_);
            }
            pub inline fn getInternationalDialingRule(self: *const T, pp_rule_: ?*?BSTR) HRESULT {
                return @as(*const ITCallingCard.VTable, @ptrCast(self.vtable)).get_InternationalDialingRule(@as(*const ITCallingCard, @ptrCast(self)), pp_rule_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumCallingCard_Value = Guid.initString("0c4d8f02-8ddb-11d1-a09e-00805fc147d3");
pub const IID_IEnumCallingCard = &IID_IEnumCallingCard_Value;
pub const IEnumCallingCard = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumCallingCard,
            celt: u32,
            pp_elements: ?*?*ITCallingCard,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumCallingCard,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumCallingCard,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumCallingCard,
            pp_enum: ?*?*IEnumCallingCard,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITCallingCard, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumCallingCard.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumCallingCard, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumCallingCard.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumCallingCard, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumCallingCard.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumCallingCard, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumCallingCard) HRESULT {
                return @as(*const IEnumCallingCard.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumCallingCard, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITCallNotificationEvent_Value = Guid.initString("895801df-3dd6-11d1-8f30-00c04fb6809f");
pub const IID_ITCallNotificationEvent = &IID_ITCallNotificationEvent_Value;
pub const ITCallNotificationEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Call: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallNotificationEvent,
            pp_call: ?*?*ITCallInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallNotificationEvent,
            p_call_notification_event: ?*CALL_NOTIFICATION_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CallbackInstance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITCallNotificationEvent,
            pl_callback_instance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCall(self: *const T, pp_call_: ?*?*ITCallInfo) HRESULT {
                return @as(*const ITCallNotificationEvent.VTable, @ptrCast(self.vtable)).get_Call(@as(*const ITCallNotificationEvent, @ptrCast(self)), pp_call_);
            }
            pub inline fn getEvent(self: *const T, p_call_notification_event_: ?*CALL_NOTIFICATION_EVENT) HRESULT {
                return @as(*const ITCallNotificationEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITCallNotificationEvent, @ptrCast(self)), p_call_notification_event_);
            }
            pub inline fn getCallbackInstance(self: *const T, pl_callback_instance_: ?*i32) HRESULT {
                return @as(*const ITCallNotificationEvent.VTable, @ptrCast(self.vtable)).get_CallbackInstance(@as(*const ITCallNotificationEvent, @ptrCast(self)), pl_callback_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITDispatchMapper_Value = Guid.initString("e9225295-c759-11d1-a02b-00c04fb6809f");
pub const IID_ITDispatchMapper = &IID_ITDispatchMapper_Value;
pub const ITDispatchMapper = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        QueryDispatchInterface: *const fn (
            self: *const ITDispatchMapper,
            p_i_i_d: ?BSTR,
            p_interface_to_map: ?*IDispatch,
            pp_returned_interface: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn queryDispatchInterface(self: *const T, p_i_i_d_: ?BSTR, p_interface_to_map_: ?*IDispatch, pp_returned_interface_: ?*?*IDispatch) HRESULT {
                return @as(*const ITDispatchMapper.VTable, @ptrCast(self.vtable)).QueryDispatchInterface(@as(*const ITDispatchMapper, @ptrCast(self)), p_i_i_d_, p_interface_to_map_, pp_returned_interface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITStreamControl_Value = Guid.initString("ee3bd604-3868-11d2-a045-00c04fb6809f");
pub const IID_ITStreamControl = &IID_ITStreamControl_Value;
pub const ITStreamControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateStream: *const fn (
            self: *const ITStreamControl,
            l_media_type: i32,
            td: TERMINAL_DIRECTION,
            pp_stream: ?*?*ITStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStream: *const fn (
            self: *const ITStreamControl,
            p_stream: ?*ITStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateStreams: *const fn (
            self: *const ITStreamControl,
            pp_enum_stream: ?*?*IEnumStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Streams: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITStreamControl,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createStream(self: *const T, l_media_type_: i32, td_: TERMINAL_DIRECTION, pp_stream_: ?*?*ITStream) HRESULT {
                return @as(*const ITStreamControl.VTable, @ptrCast(self.vtable)).CreateStream(@as(*const ITStreamControl, @ptrCast(self)), l_media_type_, td_, pp_stream_);
            }
            pub inline fn removeStream(self: *const T, p_stream_: ?*ITStream) HRESULT {
                return @as(*const ITStreamControl.VTable, @ptrCast(self.vtable)).RemoveStream(@as(*const ITStreamControl, @ptrCast(self)), p_stream_);
            }
            pub inline fn enumerateStreams(self: *const T, pp_enum_stream_: ?*?*IEnumStream) HRESULT {
                return @as(*const ITStreamControl.VTable, @ptrCast(self.vtable)).EnumerateStreams(@as(*const ITStreamControl, @ptrCast(self)), pp_enum_stream_);
            }
            pub inline fn getStreams(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITStreamControl.VTable, @ptrCast(self.vtable)).get_Streams(@as(*const ITStreamControl, @ptrCast(self)), p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITStream_Value = Guid.initString("ee3bd605-3868-11d2-a045-00c04fb6809f");
pub const IID_ITStream = &IID_ITStream_Value;
pub const ITStream = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITStream,
            pl_media_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Direction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITStream,
            p_t_d: ?*TERMINAL_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITStream,
            pp_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartStream: *const fn (
            self: *const ITStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseStream: *const fn (
            self: *const ITStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopStream: *const fn (
            self: *const ITStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectTerminal: *const fn (
            self: *const ITStream,
            p_terminal: ?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnselectTerminal: *const fn (
            self: *const ITStream,
            p_terminal: ?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateTerminals: *const fn (
            self: *const ITStream,
            pp_enum_terminal: ?*?*IEnumTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Terminals: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITStream,
            p_terminals: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getMediaType(self: *const T, pl_media_type_: ?*i32) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).get_MediaType(@as(*const ITStream, @ptrCast(self)), pl_media_type_);
            }
            pub inline fn getDirection(self: *const T, p_t_d_: ?*TERMINAL_DIRECTION) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).get_Direction(@as(*const ITStream, @ptrCast(self)), p_t_d_);
            }
            pub inline fn getName(self: *const T, pp_name_: ?*?BSTR) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITStream, @ptrCast(self)), pp_name_);
            }
            pub inline fn startStream(self: *const T) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).StartStream(@as(*const ITStream, @ptrCast(self)));
            }
            pub inline fn pauseStream(self: *const T) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).PauseStream(@as(*const ITStream, @ptrCast(self)));
            }
            pub inline fn stopStream(self: *const T) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).StopStream(@as(*const ITStream, @ptrCast(self)));
            }
            pub inline fn selectTerminal(self: *const T, p_terminal_: ?*ITTerminal) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).SelectTerminal(@as(*const ITStream, @ptrCast(self)), p_terminal_);
            }
            pub inline fn unselectTerminal(self: *const T, p_terminal_: ?*ITTerminal) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).UnselectTerminal(@as(*const ITStream, @ptrCast(self)), p_terminal_);
            }
            pub inline fn enumerateTerminals(self: *const T, pp_enum_terminal_: ?*?*IEnumTerminal) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).EnumerateTerminals(@as(*const ITStream, @ptrCast(self)), pp_enum_terminal_);
            }
            pub inline fn getTerminals(self: *const T, p_terminals_: ?*VARIANT) HRESULT {
                return @as(*const ITStream.VTable, @ptrCast(self.vtable)).get_Terminals(@as(*const ITStream, @ptrCast(self)), p_terminals_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumStream_Value = Guid.initString("ee3bd606-3868-11d2-a045-00c04fb6809f");
pub const IID_IEnumStream = &IID_IEnumStream_Value;
pub const IEnumStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumStream,
            celt: u32,
            pp_elements: ?*?*ITStream,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumStream,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumStream,
            pp_enum: ?*?*IEnumStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITStream, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumStream.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumStream, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumStream.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumStream, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumStream.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumStream, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumStream) HRESULT {
                return @as(*const IEnumStream.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumStream, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITSubStreamControl_Value = Guid.initString("ee3bd607-3868-11d2-a045-00c04fb6809f");
pub const IID_ITSubStreamControl = &IID_ITSubStreamControl_Value;
pub const ITSubStreamControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateSubStream: *const fn (
            self: *const ITSubStreamControl,
            pp_sub_stream: ?*?*ITSubStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveSubStream: *const fn (
            self: *const ITSubStreamControl,
            p_sub_stream: ?*ITSubStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateSubStreams: *const fn (
            self: *const ITSubStreamControl,
            pp_enum_sub_stream: ?*?*IEnumSubStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubStreams: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITSubStreamControl,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createSubStream(self: *const T, pp_sub_stream_: ?*?*ITSubStream) HRESULT {
                return @as(*const ITSubStreamControl.VTable, @ptrCast(self.vtable)).CreateSubStream(@as(*const ITSubStreamControl, @ptrCast(self)), pp_sub_stream_);
            }
            pub inline fn removeSubStream(self: *const T, p_sub_stream_: ?*ITSubStream) HRESULT {
                return @as(*const ITSubStreamControl.VTable, @ptrCast(self.vtable)).RemoveSubStream(@as(*const ITSubStreamControl, @ptrCast(self)), p_sub_stream_);
            }
            pub inline fn enumerateSubStreams(self: *const T, pp_enum_sub_stream_: ?*?*IEnumSubStream) HRESULT {
                return @as(*const ITSubStreamControl.VTable, @ptrCast(self.vtable)).EnumerateSubStreams(@as(*const ITSubStreamControl, @ptrCast(self)), pp_enum_sub_stream_);
            }
            pub inline fn getSubStreams(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITSubStreamControl.VTable, @ptrCast(self.vtable)).get_SubStreams(@as(*const ITSubStreamControl, @ptrCast(self)), p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITSubStream_Value = Guid.initString("ee3bd608-3868-11d2-a045-00c04fb6809f");
pub const IID_ITSubStream = &IID_ITSubStream_Value;
pub const ITSubStream = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        StartSubStream: *const fn (
            self: *const ITSubStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseSubStream: *const fn (
            self: *const ITSubStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSubStream: *const fn (
            self: *const ITSubStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectTerminal: *const fn (
            self: *const ITSubStream,
            p_terminal: ?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnselectTerminal: *const fn (
            self: *const ITSubStream,
            p_terminal: ?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateTerminals: *const fn (
            self: *const ITSubStream,
            pp_enum_terminal: ?*?*IEnumTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Terminals: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITSubStream,
            p_terminals: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Stream: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITSubStream,
            pp_i_t_stream: ?*?*ITStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn startSubStream(self: *const T) HRESULT {
                return @as(*const ITSubStream.VTable, @ptrCast(self.vtable)).StartSubStream(@as(*const ITSubStream, @ptrCast(self)));
            }
            pub inline fn pauseSubStream(self: *const T) HRESULT {
                return @as(*const ITSubStream.VTable, @ptrCast(self.vtable)).PauseSubStream(@as(*const ITSubStream, @ptrCast(self)));
            }
            pub inline fn stopSubStream(self: *const T) HRESULT {
                return @as(*const ITSubStream.VTable, @ptrCast(self.vtable)).StopSubStream(@as(*const ITSubStream, @ptrCast(self)));
            }
            pub inline fn selectTerminal(self: *const T, p_terminal_: ?*ITTerminal) HRESULT {
                return @as(*const ITSubStream.VTable, @ptrCast(self.vtable)).SelectTerminal(@as(*const ITSubStream, @ptrCast(self)), p_terminal_);
            }
            pub inline fn unselectTerminal(self: *const T, p_terminal_: ?*ITTerminal) HRESULT {
                return @as(*const ITSubStream.VTable, @ptrCast(self.vtable)).UnselectTerminal(@as(*const ITSubStream, @ptrCast(self)), p_terminal_);
            }
            pub inline fn enumerateTerminals(self: *const T, pp_enum_terminal_: ?*?*IEnumTerminal) HRESULT {
                return @as(*const ITSubStream.VTable, @ptrCast(self.vtable)).EnumerateTerminals(@as(*const ITSubStream, @ptrCast(self)), pp_enum_terminal_);
            }
            pub inline fn getTerminals(self: *const T, p_terminals_: ?*VARIANT) HRESULT {
                return @as(*const ITSubStream.VTable, @ptrCast(self.vtable)).get_Terminals(@as(*const ITSubStream, @ptrCast(self)), p_terminals_);
            }
            pub inline fn getStream(self: *const T, pp_i_t_stream_: ?*?*ITStream) HRESULT {
                return @as(*const ITSubStream.VTable, @ptrCast(self.vtable)).get_Stream(@as(*const ITSubStream, @ptrCast(self)), pp_i_t_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumSubStream_Value = Guid.initString("ee3bd609-3868-11d2-a045-00c04fb6809f");
pub const IID_IEnumSubStream = &IID_IEnumSubStream_Value;
pub const IEnumSubStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumSubStream,
            celt: u32,
            pp_elements: ?*?*ITSubStream,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumSubStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumSubStream,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumSubStream,
            pp_enum: ?*?*IEnumSubStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITSubStream, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumSubStream.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumSubStream, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumSubStream.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumSubStream, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumSubStream.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumSubStream, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumSubStream) HRESULT {
                return @as(*const IEnumSubStream.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumSubStream, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITLegacyWaveSupport_Value = Guid.initString("207823ea-e252-11d2-b77e-0080c7135381");
pub const IID_ITLegacyWaveSupport = &IID_ITLegacyWaveSupport_Value;
pub const ITLegacyWaveSupport = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        IsFullDuplex: *const fn (
            self: *const ITLegacyWaveSupport,
            p_support: ?*FULLDUPLEX_SUPPORT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn isFullDuplex(self: *const T, p_support_: ?*FULLDUPLEX_SUPPORT) HRESULT {
                return @as(*const ITLegacyWaveSupport.VTable, @ptrCast(self.vtable)).IsFullDuplex(@as(*const ITLegacyWaveSupport, @ptrCast(self)), p_support_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITBasicCallControl2_Value = Guid.initString("161a4a56-1e99-4b3f-a46a-168f38a5ee4c");
pub const IID_ITBasicCallControl2 = &IID_ITBasicCallControl2_Value;
pub const ITBasicCallControl2 = extern struct {
    pub const VTable = extern struct {
        base: ITBasicCallControl.VTable,
        RequestTerminal: *const fn (
            self: *const ITBasicCallControl2,
            bstr_terminal_class_g_u_i_d: ?BSTR,
            l_media_type: i32,
            direction: TERMINAL_DIRECTION,
            pp_terminal: ?*?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectTerminalOnCall: *const fn (
            self: *const ITBasicCallControl2,
            p_terminal: ?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnselectTerminalOnCall: *const fn (
            self: *const ITBasicCallControl2,
            p_terminal: ?*ITTerminal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITBasicCallControl.MethodMixin(T);
            pub inline fn requestTerminal(self: *const T, bstr_terminal_class_g_u_i_d_: ?BSTR, l_media_type_: i32, direction_: TERMINAL_DIRECTION, pp_terminal_: ?*?*ITTerminal) HRESULT {
                return @as(*const ITBasicCallControl2.VTable, @ptrCast(self.vtable)).RequestTerminal(@as(*const ITBasicCallControl2, @ptrCast(self)), bstr_terminal_class_g_u_i_d_, l_media_type_, direction_, pp_terminal_);
            }
            pub inline fn selectTerminalOnCall(self: *const T, p_terminal_: ?*ITTerminal) HRESULT {
                return @as(*const ITBasicCallControl2.VTable, @ptrCast(self.vtable)).SelectTerminalOnCall(@as(*const ITBasicCallControl2, @ptrCast(self)), p_terminal_);
            }
            pub inline fn unselectTerminalOnCall(self: *const T, p_terminal_: ?*ITTerminal) HRESULT {
                return @as(*const ITBasicCallControl2.VTable, @ptrCast(self.vtable)).UnselectTerminalOnCall(@as(*const ITBasicCallControl2, @ptrCast(self)), p_terminal_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITScriptableAudioFormat_Value = Guid.initString("b87658bd-3c59-4f64-be74-aede3e86a81e");
pub const IID_ITScriptableAudioFormat = &IID_ITScriptableAudioFormat_Value;
pub const ITScriptableAudioFormat = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Channels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Channels: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            n_new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SamplesPerSec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SamplesPerSec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            n_new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AvgBytesPerSec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AvgBytesPerSec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            n_new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BlockAlign: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BlockAlign: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            n_new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BitsPerSample: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BitsPerSample: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            n_new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FormatTag: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FormatTag: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITScriptableAudioFormat,
            n_new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getChannels(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).get_Channels(@as(*const ITScriptableAudioFormat, @ptrCast(self)), p_val_);
            }
            pub inline fn putChannels(self: *const T, n_new_val_: i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).put_Channels(@as(*const ITScriptableAudioFormat, @ptrCast(self)), n_new_val_);
            }
            pub inline fn getSamplesPerSec(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).get_SamplesPerSec(@as(*const ITScriptableAudioFormat, @ptrCast(self)), p_val_);
            }
            pub inline fn putSamplesPerSec(self: *const T, n_new_val_: i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).put_SamplesPerSec(@as(*const ITScriptableAudioFormat, @ptrCast(self)), n_new_val_);
            }
            pub inline fn getAvgBytesPerSec(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).get_AvgBytesPerSec(@as(*const ITScriptableAudioFormat, @ptrCast(self)), p_val_);
            }
            pub inline fn putAvgBytesPerSec(self: *const T, n_new_val_: i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).put_AvgBytesPerSec(@as(*const ITScriptableAudioFormat, @ptrCast(self)), n_new_val_);
            }
            pub inline fn getBlockAlign(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).get_BlockAlign(@as(*const ITScriptableAudioFormat, @ptrCast(self)), p_val_);
            }
            pub inline fn putBlockAlign(self: *const T, n_new_val_: i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).put_BlockAlign(@as(*const ITScriptableAudioFormat, @ptrCast(self)), n_new_val_);
            }
            pub inline fn getBitsPerSample(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).get_BitsPerSample(@as(*const ITScriptableAudioFormat, @ptrCast(self)), p_val_);
            }
            pub inline fn putBitsPerSample(self: *const T, n_new_val_: i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).put_BitsPerSample(@as(*const ITScriptableAudioFormat, @ptrCast(self)), n_new_val_);
            }
            pub inline fn getFormatTag(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).get_FormatTag(@as(*const ITScriptableAudioFormat, @ptrCast(self)), p_val_);
            }
            pub inline fn putFormatTag(self: *const T, n_new_val_: i32) HRESULT {
                return @as(*const ITScriptableAudioFormat.VTable, @ptrCast(self.vtable)).put_FormatTag(@as(*const ITScriptableAudioFormat, @ptrCast(self)), n_new_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AGENT_EVENT = enum(i32) {
    NOT_READY = 0,
    READY = 1,
    BUSY_ACD = 2,
    BUSY_INCOMING = 3,
    BUSY_OUTGOING = 4,
    UNKNOWN = 5,
};
pub const AE_NOT_READY = AGENT_EVENT.NOT_READY;
pub const AE_READY = AGENT_EVENT.READY;
pub const AE_BUSY_ACD = AGENT_EVENT.BUSY_ACD;
pub const AE_BUSY_INCOMING = AGENT_EVENT.BUSY_INCOMING;
pub const AE_BUSY_OUTGOING = AGENT_EVENT.BUSY_OUTGOING;
pub const AE_UNKNOWN = AGENT_EVENT.UNKNOWN;

pub const AGENT_STATE = enum(i32) {
    NOT_READY = 0,
    READY = 1,
    BUSY_ACD = 2,
    BUSY_INCOMING = 3,
    BUSY_OUTGOING = 4,
    UNKNOWN = 5,
};
pub const AS_NOT_READY = AGENT_STATE.NOT_READY;
pub const AS_READY = AGENT_STATE.READY;
pub const AS_BUSY_ACD = AGENT_STATE.BUSY_ACD;
pub const AS_BUSY_INCOMING = AGENT_STATE.BUSY_INCOMING;
pub const AS_BUSY_OUTGOING = AGENT_STATE.BUSY_OUTGOING;
pub const AS_UNKNOWN = AGENT_STATE.UNKNOWN;

pub const AGENT_SESSION_EVENT = enum(i32) {
    NEW_SESSION = 0,
    NOT_READY = 1,
    READY = 2,
    BUSY = 3,
    WRAPUP = 4,
    END = 5,
};
pub const ASE_NEW_SESSION = AGENT_SESSION_EVENT.NEW_SESSION;
pub const ASE_NOT_READY = AGENT_SESSION_EVENT.NOT_READY;
pub const ASE_READY = AGENT_SESSION_EVENT.READY;
pub const ASE_BUSY = AGENT_SESSION_EVENT.BUSY;
pub const ASE_WRAPUP = AGENT_SESSION_EVENT.WRAPUP;
pub const ASE_END = AGENT_SESSION_EVENT.END;

pub const AGENT_SESSION_STATE = enum(i32) {
    NOT_READY = 0,
    READY = 1,
    BUSY_ON_CALL = 2,
    BUSY_WRAPUP = 3,
    SESSION_ENDED = 4,
};
pub const ASST_NOT_READY = AGENT_SESSION_STATE.NOT_READY;
pub const ASST_READY = AGENT_SESSION_STATE.READY;
pub const ASST_BUSY_ON_CALL = AGENT_SESSION_STATE.BUSY_ON_CALL;
pub const ASST_BUSY_WRAPUP = AGENT_SESSION_STATE.BUSY_WRAPUP;
pub const ASST_SESSION_ENDED = AGENT_SESSION_STATE.SESSION_ENDED;

pub const AGENTHANDLER_EVENT = enum(i32) {
    NEW_AGENTHANDLER = 0,
    AGENTHANDLER_REMOVED = 1,
};
pub const AHE_NEW_AGENTHANDLER = AGENTHANDLER_EVENT.NEW_AGENTHANDLER;
pub const AHE_AGENTHANDLER_REMOVED = AGENTHANDLER_EVENT.AGENTHANDLER_REMOVED;

pub const ACDGROUP_EVENT = enum(i32) {
    NEW_GROUP = 0,
    GROUP_REMOVED = 1,
};
pub const ACDGE_NEW_GROUP = ACDGROUP_EVENT.NEW_GROUP;
pub const ACDGE_GROUP_REMOVED = ACDGROUP_EVENT.GROUP_REMOVED;

pub const ACDQUEUE_EVENT = enum(i32) {
    NEW_QUEUE = 0,
    QUEUE_REMOVED = 1,
};
pub const ACDQE_NEW_QUEUE = ACDQUEUE_EVENT.NEW_QUEUE;
pub const ACDQE_QUEUE_REMOVED = ACDQUEUE_EVENT.QUEUE_REMOVED;

const IID_ITAgent_Value = Guid.initString("5770ece5-4b27-11d1-bf80-00805fc147d3");
pub const IID_ITAgent = &IID_ITAgent_Value;
pub const ITAgent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        EnumerateAgentSessions: *const fn (
            self: *const ITAgent,
            pp_enum_agent_session: ?*?*IEnumAgentSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSession: *const fn (
            self: *const ITAgent,
            p_a_c_d_group: ?*ITACDGroup,
            p_address: ?*ITAddress,
            pp_agent_session: ?*?*ITAgentSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSessionWithPIN: *const fn (
            self: *const ITAgent,
            p_a_c_d_group: ?*ITACDGroup,
            p_address: ?*ITAddress,
            p_p_i_n: ?BSTR,
            pp_agent_session: ?*?*ITAgentSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pp_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_User: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pp_user: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            agent_state: AGENT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            p_agent_state: ?*AGENT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MeasurementPeriod: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            l_period: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MeasurementPeriod: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pl_period: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OverallCallRate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pcy_callrate: ?*CY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfACDCalls: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfIncomingCalls: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfOutgoingCalls: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalACDTalkTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pl_talk_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalACDCallTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pl_call_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalWrapUpTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            pl_wrap_up_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AgentSessions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgent,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn enumerateAgentSessions(self: *const T, pp_enum_agent_session_: ?*?*IEnumAgentSession) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).EnumerateAgentSessions(@as(*const ITAgent, @ptrCast(self)), pp_enum_agent_session_);
            }
            pub inline fn createSession(self: *const T, p_a_c_d_group_: ?*ITACDGroup, p_address_: ?*ITAddress, pp_agent_session_: ?*?*ITAgentSession) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).CreateSession(@as(*const ITAgent, @ptrCast(self)), p_a_c_d_group_, p_address_, pp_agent_session_);
            }
            pub inline fn createSessionWithPIN(self: *const T, p_a_c_d_group_: ?*ITACDGroup, p_address_: ?*ITAddress, p_p_i_n_: ?BSTR, pp_agent_session_: ?*?*ITAgentSession) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).CreateSessionWithPIN(@as(*const ITAgent, @ptrCast(self)), p_a_c_d_group_, p_address_, p_p_i_n_, pp_agent_session_);
            }
            pub inline fn getID(self: *const T, pp_i_d_: ?*?BSTR) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_ID(@as(*const ITAgent, @ptrCast(self)), pp_i_d_);
            }
            pub inline fn getUser(self: *const T, pp_user_: ?*?BSTR) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_User(@as(*const ITAgent, @ptrCast(self)), pp_user_);
            }
            pub inline fn putState(self: *const T, agent_state_: AGENT_STATE) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).put_State(@as(*const ITAgent, @ptrCast(self)), agent_state_);
            }
            pub inline fn getState(self: *const T, p_agent_state_: ?*AGENT_STATE) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_State(@as(*const ITAgent, @ptrCast(self)), p_agent_state_);
            }
            pub inline fn putMeasurementPeriod(self: *const T, l_period_: i32) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).put_MeasurementPeriod(@as(*const ITAgent, @ptrCast(self)), l_period_);
            }
            pub inline fn getMeasurementPeriod(self: *const T, pl_period_: ?*i32) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_MeasurementPeriod(@as(*const ITAgent, @ptrCast(self)), pl_period_);
            }
            pub inline fn getOverallCallRate(self: *const T, pcy_callrate_: ?*CY) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_OverallCallRate(@as(*const ITAgent, @ptrCast(self)), pcy_callrate_);
            }
            pub inline fn getNumberOfACDCalls(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_NumberOfACDCalls(@as(*const ITAgent, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getNumberOfIncomingCalls(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_NumberOfIncomingCalls(@as(*const ITAgent, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getNumberOfOutgoingCalls(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_NumberOfOutgoingCalls(@as(*const ITAgent, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getTotalACDTalkTime(self: *const T, pl_talk_time_: ?*i32) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_TotalACDTalkTime(@as(*const ITAgent, @ptrCast(self)), pl_talk_time_);
            }
            pub inline fn getTotalACDCallTime(self: *const T, pl_call_time_: ?*i32) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_TotalACDCallTime(@as(*const ITAgent, @ptrCast(self)), pl_call_time_);
            }
            pub inline fn getTotalWrapUpTime(self: *const T, pl_wrap_up_time_: ?*i32) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_TotalWrapUpTime(@as(*const ITAgent, @ptrCast(self)), pl_wrap_up_time_);
            }
            pub inline fn getAgentSessions(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAgent.VTable, @ptrCast(self.vtable)).get_AgentSessions(@as(*const ITAgent, @ptrCast(self)), p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAgentSession_Value = Guid.initString("5afc3147-4bcc-11d1-bf80-00805fc147d3");
pub const IID_ITAgentSession = &IID_ITAgentSession_Value;
pub const ITAgentSession = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Agent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pp_agent: ?*?*ITAgent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pp_address: ?*?*ITAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ACDGroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pp_a_c_d_group: ?*?*ITACDGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            session_state: AGENT_SESSION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            p_session_state: ?*AGENT_SESSION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionStartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pdate_session_start: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_duration: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfCalls: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalTalkTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_talk_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AverageTalkTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_talk_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalCallTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_call_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AverageCallTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_call_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalWrapUpTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_wrap_up_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AverageWrapUpTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_wrap_up_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ACDCallRate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pcy_callrate: ?*CY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LongestTimeToAnswer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_answer_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AverageTimeToAnswer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSession,
            pl_answer_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAgent(self: *const T, pp_agent_: ?*?*ITAgent) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_Agent(@as(*const ITAgentSession, @ptrCast(self)), pp_agent_);
            }
            pub inline fn getAddress(self: *const T, pp_address_: ?*?*ITAddress) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_Address(@as(*const ITAgentSession, @ptrCast(self)), pp_address_);
            }
            pub inline fn getACDGroup(self: *const T, pp_a_c_d_group_: ?*?*ITACDGroup) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_ACDGroup(@as(*const ITAgentSession, @ptrCast(self)), pp_a_c_d_group_);
            }
            pub inline fn putState(self: *const T, session_state_: AGENT_SESSION_STATE) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).put_State(@as(*const ITAgentSession, @ptrCast(self)), session_state_);
            }
            pub inline fn getState(self: *const T, p_session_state_: ?*AGENT_SESSION_STATE) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_State(@as(*const ITAgentSession, @ptrCast(self)), p_session_state_);
            }
            pub inline fn getSessionStartTime(self: *const T, pdate_session_start_: ?*f64) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_SessionStartTime(@as(*const ITAgentSession, @ptrCast(self)), pdate_session_start_);
            }
            pub inline fn getSessionDuration(self: *const T, pl_duration_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_SessionDuration(@as(*const ITAgentSession, @ptrCast(self)), pl_duration_);
            }
            pub inline fn getNumberOfCalls(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_NumberOfCalls(@as(*const ITAgentSession, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getTotalTalkTime(self: *const T, pl_talk_time_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_TotalTalkTime(@as(*const ITAgentSession, @ptrCast(self)), pl_talk_time_);
            }
            pub inline fn getAverageTalkTime(self: *const T, pl_talk_time_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_AverageTalkTime(@as(*const ITAgentSession, @ptrCast(self)), pl_talk_time_);
            }
            pub inline fn getTotalCallTime(self: *const T, pl_call_time_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_TotalCallTime(@as(*const ITAgentSession, @ptrCast(self)), pl_call_time_);
            }
            pub inline fn getAverageCallTime(self: *const T, pl_call_time_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_AverageCallTime(@as(*const ITAgentSession, @ptrCast(self)), pl_call_time_);
            }
            pub inline fn getTotalWrapUpTime(self: *const T, pl_wrap_up_time_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_TotalWrapUpTime(@as(*const ITAgentSession, @ptrCast(self)), pl_wrap_up_time_);
            }
            pub inline fn getAverageWrapUpTime(self: *const T, pl_wrap_up_time_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_AverageWrapUpTime(@as(*const ITAgentSession, @ptrCast(self)), pl_wrap_up_time_);
            }
            pub inline fn getACDCallRate(self: *const T, pcy_callrate_: ?*CY) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_ACDCallRate(@as(*const ITAgentSession, @ptrCast(self)), pcy_callrate_);
            }
            pub inline fn getLongestTimeToAnswer(self: *const T, pl_answer_time_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_LongestTimeToAnswer(@as(*const ITAgentSession, @ptrCast(self)), pl_answer_time_);
            }
            pub inline fn getAverageTimeToAnswer(self: *const T, pl_answer_time_: ?*i32) HRESULT {
                return @as(*const ITAgentSession.VTable, @ptrCast(self.vtable)).get_AverageTimeToAnswer(@as(*const ITAgentSession, @ptrCast(self)), pl_answer_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITACDGroup_Value = Guid.initString("5afc3148-4bcc-11d1-bf80-00805fc147d3");
pub const IID_ITACDGroup = &IID_ITACDGroup_Value;
pub const ITACDGroup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITACDGroup,
            pp_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateQueues: *const fn (
            self: *const ITACDGroup,
            pp_enum_queue: ?*?*IEnumQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Queues: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITACDGroup,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pp_name_: ?*?BSTR) HRESULT {
                return @as(*const ITACDGroup.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITACDGroup, @ptrCast(self)), pp_name_);
            }
            pub inline fn enumerateQueues(self: *const T, pp_enum_queue_: ?*?*IEnumQueue) HRESULT {
                return @as(*const ITACDGroup.VTable, @ptrCast(self.vtable)).EnumerateQueues(@as(*const ITACDGroup, @ptrCast(self)), pp_enum_queue_);
            }
            pub inline fn getQueues(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITACDGroup.VTable, @ptrCast(self.vtable)).get_Queues(@as(*const ITACDGroup, @ptrCast(self)), p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITQueue_Value = Guid.initString("5afc3149-4bcc-11d1-bf80-00805fc147d3");
pub const IID_ITQueue = &IID_ITQueue_Value;
pub const ITQueue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MeasurementPeriod: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            l_period: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MeasurementPeriod: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_period: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalCallsQueued: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentCallsQueued: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalCallsAbandoned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalCallsFlowedIn: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalCallsFlowedOut: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LongestEverWaitTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_wait_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentLongestWaitTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_wait_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AverageWaitTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_wait_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FinalDisposition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pl_calls: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueue,
            pp_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putMeasurementPeriod(self: *const T, l_period_: i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).put_MeasurementPeriod(@as(*const ITQueue, @ptrCast(self)), l_period_);
            }
            pub inline fn getMeasurementPeriod(self: *const T, pl_period_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_MeasurementPeriod(@as(*const ITQueue, @ptrCast(self)), pl_period_);
            }
            pub inline fn getTotalCallsQueued(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_TotalCallsQueued(@as(*const ITQueue, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getCurrentCallsQueued(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_CurrentCallsQueued(@as(*const ITQueue, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getTotalCallsAbandoned(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_TotalCallsAbandoned(@as(*const ITQueue, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getTotalCallsFlowedIn(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_TotalCallsFlowedIn(@as(*const ITQueue, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getTotalCallsFlowedOut(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_TotalCallsFlowedOut(@as(*const ITQueue, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getLongestEverWaitTime(self: *const T, pl_wait_time_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_LongestEverWaitTime(@as(*const ITQueue, @ptrCast(self)), pl_wait_time_);
            }
            pub inline fn getCurrentLongestWaitTime(self: *const T, pl_wait_time_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_CurrentLongestWaitTime(@as(*const ITQueue, @ptrCast(self)), pl_wait_time_);
            }
            pub inline fn getAverageWaitTime(self: *const T, pl_wait_time_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_AverageWaitTime(@as(*const ITQueue, @ptrCast(self)), pl_wait_time_);
            }
            pub inline fn getFinalDisposition(self: *const T, pl_calls_: ?*i32) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_FinalDisposition(@as(*const ITQueue, @ptrCast(self)), pl_calls_);
            }
            pub inline fn getName(self: *const T, pp_name_: ?*?BSTR) HRESULT {
                return @as(*const ITQueue.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITQueue, @ptrCast(self)), pp_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAgentEvent_Value = Guid.initString("5afc314a-4bcc-11d1-bf80-00805fc147d3");
pub const IID_ITAgentEvent = &IID_ITAgentEvent_Value;
pub const ITAgentEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Agent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentEvent,
            pp_agent: ?*?*ITAgent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentEvent,
            p_event: ?*AGENT_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAgent(self: *const T, pp_agent_: ?*?*ITAgent) HRESULT {
                return @as(*const ITAgentEvent.VTable, @ptrCast(self.vtable)).get_Agent(@as(*const ITAgentEvent, @ptrCast(self)), pp_agent_);
            }
            pub inline fn getEvent(self: *const T, p_event_: ?*AGENT_EVENT) HRESULT {
                return @as(*const ITAgentEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITAgentEvent, @ptrCast(self)), p_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAgentSessionEvent_Value = Guid.initString("5afc314b-4bcc-11d1-bf80-00805fc147d3");
pub const IID_ITAgentSessionEvent = &IID_ITAgentSessionEvent_Value;
pub const ITAgentSessionEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSessionEvent,
            pp_session: ?*?*ITAgentSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentSessionEvent,
            p_event: ?*AGENT_SESSION_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_session_: ?*?*ITAgentSession) HRESULT {
                return @as(*const ITAgentSessionEvent.VTable, @ptrCast(self.vtable)).get_Session(@as(*const ITAgentSessionEvent, @ptrCast(self)), pp_session_);
            }
            pub inline fn getEvent(self: *const T, p_event_: ?*AGENT_SESSION_EVENT) HRESULT {
                return @as(*const ITAgentSessionEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITAgentSessionEvent, @ptrCast(self)), p_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITACDGroupEvent_Value = Guid.initString("297f3032-bd11-11d1-a0a7-00805fc147d3");
pub const IID_ITACDGroupEvent = &IID_ITACDGroupEvent_Value;
pub const ITACDGroupEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Group: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITACDGroupEvent,
            pp_group: ?*?*ITACDGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITACDGroupEvent,
            p_event: ?*ACDGROUP_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getGroup(self: *const T, pp_group_: ?*?*ITACDGroup) HRESULT {
                return @as(*const ITACDGroupEvent.VTable, @ptrCast(self.vtable)).get_Group(@as(*const ITACDGroupEvent, @ptrCast(self)), pp_group_);
            }
            pub inline fn getEvent(self: *const T, p_event_: ?*ACDGROUP_EVENT) HRESULT {
                return @as(*const ITACDGroupEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITACDGroupEvent, @ptrCast(self)), p_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITQueueEvent_Value = Guid.initString("297f3033-bd11-11d1-a0a7-00805fc147d3");
pub const IID_ITQueueEvent = &IID_ITQueueEvent_Value;
pub const ITQueueEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Queue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueueEvent,
            pp_queue: ?*?*ITQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITQueueEvent,
            p_event: ?*ACDQUEUE_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getQueue(self: *const T, pp_queue_: ?*?*ITQueue) HRESULT {
                return @as(*const ITQueueEvent.VTable, @ptrCast(self.vtable)).get_Queue(@as(*const ITQueueEvent, @ptrCast(self)), pp_queue_);
            }
            pub inline fn getEvent(self: *const T, p_event_: ?*ACDQUEUE_EVENT) HRESULT {
                return @as(*const ITQueueEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITQueueEvent, @ptrCast(self)), p_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAgentHandlerEvent_Value = Guid.initString("297f3034-bd11-11d1-a0a7-00805fc147d3");
pub const IID_ITAgentHandlerEvent = &IID_ITAgentHandlerEvent_Value;
pub const ITAgentHandlerEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AgentHandler: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentHandlerEvent,
            pp_agent_handler: ?*?*ITAgentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Event: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentHandlerEvent,
            p_event: ?*AGENTHANDLER_EVENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAgentHandler(self: *const T, pp_agent_handler_: ?*?*ITAgentHandler) HRESULT {
                return @as(*const ITAgentHandlerEvent.VTable, @ptrCast(self.vtable)).get_AgentHandler(@as(*const ITAgentHandlerEvent, @ptrCast(self)), pp_agent_handler_);
            }
            pub inline fn getEvent(self: *const T, p_event_: ?*AGENTHANDLER_EVENT) HRESULT {
                return @as(*const ITAgentHandlerEvent.VTable, @ptrCast(self.vtable)).get_Event(@as(*const ITAgentHandlerEvent, @ptrCast(self)), p_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTAPICallCenter_Value = Guid.initString("5afc3154-4bcc-11d1-bf80-00805fc147d3");
pub const IID_ITTAPICallCenter = &IID_ITTAPICallCenter_Value;
pub const ITTAPICallCenter = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        EnumerateAgentHandlers: *const fn (
            self: *const ITTAPICallCenter,
            pp_enum_handler: ?*?*IEnumAgentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AgentHandlers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITTAPICallCenter,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn enumerateAgentHandlers(self: *const T, pp_enum_handler_: ?*?*IEnumAgentHandler) HRESULT {
                return @as(*const ITTAPICallCenter.VTable, @ptrCast(self.vtable)).EnumerateAgentHandlers(@as(*const ITTAPICallCenter, @ptrCast(self)), pp_enum_handler_);
            }
            pub inline fn getAgentHandlers(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITTAPICallCenter.VTable, @ptrCast(self.vtable)).get_AgentHandlers(@as(*const ITTAPICallCenter, @ptrCast(self)), p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAgentHandler_Value = Guid.initString("587e8c22-9802-11d1-a0a4-00805fc147d3");
pub const IID_ITAgentHandler = &IID_ITAgentHandler_Value;
pub const ITAgentHandler = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentHandler,
            pp_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAgent: *const fn (
            self: *const ITAgentHandler,
            pp_agent: ?*?*ITAgent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAgentWithID: *const fn (
            self: *const ITAgentHandler,
            p_i_d: ?BSTR,
            p_p_i_n: ?BSTR,
            pp_agent: ?*?*ITAgent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateACDGroups: *const fn (
            self: *const ITAgentHandler,
            pp_enum_a_c_d_group: ?*?*IEnumACDGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateUsableAddresses: *const fn (
            self: *const ITAgentHandler,
            pp_enum_address: ?*?*IEnumAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ACDGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentHandler,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UsableAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAgentHandler,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pp_name_: ?*?BSTR) HRESULT {
                return @as(*const ITAgentHandler.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITAgentHandler, @ptrCast(self)), pp_name_);
            }
            pub inline fn createAgent(self: *const T, pp_agent_: ?*?*ITAgent) HRESULT {
                return @as(*const ITAgentHandler.VTable, @ptrCast(self.vtable)).CreateAgent(@as(*const ITAgentHandler, @ptrCast(self)), pp_agent_);
            }
            pub inline fn createAgentWithID(self: *const T, p_i_d_: ?BSTR, p_p_i_n_: ?BSTR, pp_agent_: ?*?*ITAgent) HRESULT {
                return @as(*const ITAgentHandler.VTable, @ptrCast(self.vtable)).CreateAgentWithID(@as(*const ITAgentHandler, @ptrCast(self)), p_i_d_, p_p_i_n_, pp_agent_);
            }
            pub inline fn enumerateACDGroups(self: *const T, pp_enum_a_c_d_group_: ?*?*IEnumACDGroup) HRESULT {
                return @as(*const ITAgentHandler.VTable, @ptrCast(self.vtable)).EnumerateACDGroups(@as(*const ITAgentHandler, @ptrCast(self)), pp_enum_a_c_d_group_);
            }
            pub inline fn enumerateUsableAddresses(self: *const T, pp_enum_address_: ?*?*IEnumAddress) HRESULT {
                return @as(*const ITAgentHandler.VTable, @ptrCast(self.vtable)).EnumerateUsableAddresses(@as(*const ITAgentHandler, @ptrCast(self)), pp_enum_address_);
            }
            pub inline fn getACDGroups(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAgentHandler.VTable, @ptrCast(self.vtable)).get_ACDGroups(@as(*const ITAgentHandler, @ptrCast(self)), p_variant_);
            }
            pub inline fn getUsableAddresses(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITAgentHandler.VTable, @ptrCast(self.vtable)).get_UsableAddresses(@as(*const ITAgentHandler, @ptrCast(self)), p_variant_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumAgent_Value = Guid.initString("5afc314d-4bcc-11d1-bf80-00805fc147d3");
pub const IID_IEnumAgent = &IID_IEnumAgent_Value;
pub const IEnumAgent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumAgent,
            celt: u32,
            pp_elements: ?*?*ITAgent,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumAgent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumAgent,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumAgent,
            pp_enum: ?*?*IEnumAgent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITAgent, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumAgent.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumAgent, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumAgent.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumAgent, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumAgent.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumAgent, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumAgent) HRESULT {
                return @as(*const IEnumAgent.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumAgent, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumAgentSession_Value = Guid.initString("5afc314e-4bcc-11d1-bf80-00805fc147d3");
pub const IID_IEnumAgentSession = &IID_IEnumAgentSession_Value;
pub const IEnumAgentSession = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumAgentSession,
            celt: u32,
            pp_elements: ?*?*ITAgentSession,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumAgentSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumAgentSession,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumAgentSession,
            pp_enum: ?*?*IEnumAgentSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITAgentSession, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumAgentSession.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumAgentSession, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumAgentSession.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumAgentSession, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumAgentSession.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumAgentSession, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumAgentSession) HRESULT {
                return @as(*const IEnumAgentSession.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumAgentSession, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumQueue_Value = Guid.initString("5afc3158-4bcc-11d1-bf80-00805fc147d3");
pub const IID_IEnumQueue = &IID_IEnumQueue_Value;
pub const IEnumQueue = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumQueue,
            celt: u32,
            pp_elements: ?*?*ITQueue,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumQueue,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumQueue,
            pp_enum: ?*?*IEnumQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITQueue, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumQueue.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumQueue, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumQueue.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumQueue, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumQueue.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumQueue, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumQueue) HRESULT {
                return @as(*const IEnumQueue.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumQueue, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumACDGroup_Value = Guid.initString("5afc3157-4bcc-11d1-bf80-00805fc147d3");
pub const IID_IEnumACDGroup = &IID_IEnumACDGroup_Value;
pub const IEnumACDGroup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumACDGroup,
            celt: u32,
            pp_elements: ?*?*ITACDGroup,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumACDGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumACDGroup,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumACDGroup,
            pp_enum: ?*?*IEnumACDGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITACDGroup, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumACDGroup.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumACDGroup, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumACDGroup.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumACDGroup, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumACDGroup.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumACDGroup, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumACDGroup) HRESULT {
                return @as(*const IEnumACDGroup.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumACDGroup, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumAgentHandler_Value = Guid.initString("587e8c28-9802-11d1-a0a4-00805fc147d3");
pub const IID_IEnumAgentHandler = &IID_IEnumAgentHandler_Value;
pub const IEnumAgentHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumAgentHandler,
            celt: u32,
            pp_elements: ?*?*ITAgentHandler,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumAgentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumAgentHandler,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumAgentHandler,
            pp_enum: ?*?*IEnumAgentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: ?*?*ITAgentHandler, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumAgentHandler.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumAgentHandler, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumAgentHandler.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumAgentHandler, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumAgentHandler.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumAgentHandler, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumAgentHandler) HRESULT {
                return @as(*const IEnumAgentHandler.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumAgentHandler, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAMMediaFormat_Value = Guid.initString("0364eb00-4a77-11d1-a671-006097c9a2e8");
pub const IID_ITAMMediaFormat = &IID_ITAMMediaFormat_Value;
pub const ITAMMediaFormat = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAMMediaFormat,
            ppmt: ?*?*AM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MediaFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITAMMediaFormat,
            pmt: ?*const AM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMediaFormat(self: *const T, ppmt_: ?*?*AM_MEDIA_TYPE) HRESULT {
                return @as(*const ITAMMediaFormat.VTable, @ptrCast(self.vtable)).get_MediaFormat(@as(*const ITAMMediaFormat, @ptrCast(self)), ppmt_);
            }
            pub inline fn putMediaFormat(self: *const T, pmt_: ?*const AM_MEDIA_TYPE) HRESULT {
                return @as(*const ITAMMediaFormat.VTable, @ptrCast(self.vtable)).put_MediaFormat(@as(*const ITAMMediaFormat, @ptrCast(self)), pmt_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITAllocatorProperties_Value = Guid.initString("c1bc3c90-bcfe-11d1-9745-00c04fd91ac0");
pub const IID_ITAllocatorProperties = &IID_ITAllocatorProperties_Value;
pub const ITAllocatorProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllocatorProperties: *const fn (
            self: *const ITAllocatorProperties,
            p_alloc_properties: ?*ALLOCATOR_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocatorProperties: *const fn (
            self: *const ITAllocatorProperties,
            p_alloc_properties: ?*ALLOCATOR_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateBuffers: *const fn (
            self: *const ITAllocatorProperties,
            b_alloc_buffers: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateBuffers: *const fn (
            self: *const ITAllocatorProperties,
            pb_alloc_buffers: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBufferSize: *const fn (
            self: *const ITAllocatorProperties,
            buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferSize: *const fn (
            self: *const ITAllocatorProperties,
            p_buffer_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllocatorProperties(self: *const T, p_alloc_properties_: ?*ALLOCATOR_PROPERTIES) HRESULT {
                return @as(*const ITAllocatorProperties.VTable, @ptrCast(self.vtable)).SetAllocatorProperties(@as(*const ITAllocatorProperties, @ptrCast(self)), p_alloc_properties_);
            }
            pub inline fn getAllocatorProperties(self: *const T, p_alloc_properties_: ?*ALLOCATOR_PROPERTIES) HRESULT {
                return @as(*const ITAllocatorProperties.VTable, @ptrCast(self.vtable)).GetAllocatorProperties(@as(*const ITAllocatorProperties, @ptrCast(self)), p_alloc_properties_);
            }
            pub inline fn setAllocateBuffers(self: *const T, b_alloc_buffers_: BOOL) HRESULT {
                return @as(*const ITAllocatorProperties.VTable, @ptrCast(self.vtable)).SetAllocateBuffers(@as(*const ITAllocatorProperties, @ptrCast(self)), b_alloc_buffers_);
            }
            pub inline fn getAllocateBuffers(self: *const T, pb_alloc_buffers_: ?*BOOL) HRESULT {
                return @as(*const ITAllocatorProperties.VTable, @ptrCast(self.vtable)).GetAllocateBuffers(@as(*const ITAllocatorProperties, @ptrCast(self)), pb_alloc_buffers_);
            }
            pub inline fn setBufferSize(self: *const T, buffer_size_: u32) HRESULT {
                return @as(*const ITAllocatorProperties.VTable, @ptrCast(self.vtable)).SetBufferSize(@as(*const ITAllocatorProperties, @ptrCast(self)), buffer_size_);
            }
            pub inline fn getBufferSize(self: *const T, p_buffer_size_: ?*u32) HRESULT {
                return @as(*const ITAllocatorProperties.VTable, @ptrCast(self.vtable)).GetBufferSize(@as(*const ITAllocatorProperties, @ptrCast(self)), p_buffer_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const MSP_ADDRESS_EVENT = enum(i32) {
    AVAILABLE = 0,
    UNAVAILABLE = 1,
};
pub const ADDRESS_TERMINAL_AVAILABLE = MSP_ADDRESS_EVENT.AVAILABLE;
pub const ADDRESS_TERMINAL_UNAVAILABLE = MSP_ADDRESS_EVENT.UNAVAILABLE;

pub const MSP_CALL_EVENT = enum(i32) {
    NEW_STREAM = 0,
    STREAM_FAIL = 1,
    TERMINAL_FAIL = 2,
    STREAM_NOT_USED = 3,
    STREAM_ACTIVE = 4,
    STREAM_INACTIVE = 5,
};
pub const CALL_NEW_STREAM = MSP_CALL_EVENT.NEW_STREAM;
pub const CALL_STREAM_FAIL = MSP_CALL_EVENT.STREAM_FAIL;
pub const CALL_TERMINAL_FAIL = MSP_CALL_EVENT.TERMINAL_FAIL;
pub const CALL_STREAM_NOT_USED = MSP_CALL_EVENT.STREAM_NOT_USED;
pub const CALL_STREAM_ACTIVE = MSP_CALL_EVENT.STREAM_ACTIVE;
pub const CALL_STREAM_INACTIVE = MSP_CALL_EVENT.STREAM_INACTIVE;

pub const MSP_CALL_EVENT_CAUSE = enum(i32) {
    UNKNOWN = 0,
    BAD_DEVICE = 1,
    CONNECT_FAIL = 2,
    LOCAL_REQUEST = 3,
    REMOTE_REQUEST = 4,
    MEDIA_TIMEOUT = 5,
    MEDIA_RECOVERED = 6,
    QUALITY_OF_SERVICE = 7,
};
pub const CALL_CAUSE_UNKNOWN = MSP_CALL_EVENT_CAUSE.UNKNOWN;
pub const CALL_CAUSE_BAD_DEVICE = MSP_CALL_EVENT_CAUSE.BAD_DEVICE;
pub const CALL_CAUSE_CONNECT_FAIL = MSP_CALL_EVENT_CAUSE.CONNECT_FAIL;
pub const CALL_CAUSE_LOCAL_REQUEST = MSP_CALL_EVENT_CAUSE.LOCAL_REQUEST;
pub const CALL_CAUSE_REMOTE_REQUEST = MSP_CALL_EVENT_CAUSE.REMOTE_REQUEST;
pub const CALL_CAUSE_MEDIA_TIMEOUT = MSP_CALL_EVENT_CAUSE.MEDIA_TIMEOUT;
pub const CALL_CAUSE_MEDIA_RECOVERED = MSP_CALL_EVENT_CAUSE.MEDIA_RECOVERED;
pub const CALL_CAUSE_QUALITY_OF_SERVICE = MSP_CALL_EVENT_CAUSE.QUALITY_OF_SERVICE;

pub const MSP_EVENT = enum(i32) {
    ADDRESS_EVENT = 0,
    CALL_EVENT = 1,
    TSP_DATA = 2,
    PRIVATE_EVENT = 3,
    ASR_TERMINAL_EVENT = 4,
    TTS_TERMINAL_EVENT = 5,
    FILE_TERMINAL_EVENT = 6,
    TONE_TERMINAL_EVENT = 7,
};
pub const ME_ADDRESS_EVENT = MSP_EVENT.ADDRESS_EVENT;
pub const ME_CALL_EVENT = MSP_EVENT.CALL_EVENT;
pub const ME_TSP_DATA = MSP_EVENT.TSP_DATA;
pub const ME_PRIVATE_EVENT = MSP_EVENT.PRIVATE_EVENT;
pub const ME_ASR_TERMINAL_EVENT = MSP_EVENT.ASR_TERMINAL_EVENT;
pub const ME_TTS_TERMINAL_EVENT = MSP_EVENT.TTS_TERMINAL_EVENT;
pub const ME_FILE_TERMINAL_EVENT = MSP_EVENT.FILE_TERMINAL_EVENT;
pub const ME_TONE_TERMINAL_EVENT = MSP_EVENT.TONE_TERMINAL_EVENT;

pub const MSP_EVENT_INFO = extern struct {
    dwSize: u32,
    Event: MSP_EVENT,
    hCall: ?*i32,
    Anonymous: extern union {
        MSP_ADDRESS_EVENT_INFO: extern struct {
            Type: MSP_ADDRESS_EVENT,
            pTerminal: ?*ITTerminal,
        },
        MSP_CALL_EVENT_INFO: extern struct {
            Type: MSP_CALL_EVENT,
            Cause: MSP_CALL_EVENT_CAUSE,
            pStream: ?*ITStream,
            pTerminal: ?*ITTerminal,
            hrError: HRESULT,
        },
        MSP_TSP_DATA: extern struct {
            dwBufferSize: u32,
            pBuffer: [1]u8,
        },
        MSP_PRIVATE_EVENT_INFO: extern struct {
            pEvent: ?*IDispatch,
            lEventCode: i32,
        },
        MSP_FILE_TERMINAL_EVENT_INFO: extern struct {
            pParentFileTerminal: ?*ITTerminal,
            pFileTrack: ?*ITFileTrack,
            TerminalMediaState: TERMINAL_MEDIA_STATE,
            ftecEventCause: FT_STATE_EVENT_CAUSE,
            hrErrorCode: HRESULT,
        },
        MSP_ASR_TERMINAL_EVENT_INFO: extern struct {
            pASRTerminal: ?*ITTerminal,
            hrErrorCode: HRESULT,
        },
        MSP_TTS_TERMINAL_EVENT_INFO: extern struct {
            pTTSTerminal: ?*ITTerminal,
            hrErrorCode: HRESULT,
        },
        MSP_TONE_TERMINAL_EVENT_INFO: extern struct {
            pToneTerminal: ?*ITTerminal,
            hrErrorCode: HRESULT,
        },
    },
};

const IID_ITPluggableTerminalEventSink_Value = Guid.initString("6e0887be-ba1a-492e-bd10-4020ec5e33e0");
pub const IID_ITPluggableTerminalEventSink = &IID_ITPluggableTerminalEventSink_Value;
pub const ITPluggableTerminalEventSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FireEvent: *const fn (
            self: *const ITPluggableTerminalEventSink,
            p_msp_event_info: ?*const MSP_EVENT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn fireEvent(self: *const T, p_msp_event_info_: ?*const MSP_EVENT_INFO) HRESULT {
                return @as(*const ITPluggableTerminalEventSink.VTable, @ptrCast(self.vtable)).FireEvent(@as(*const ITPluggableTerminalEventSink, @ptrCast(self)), p_msp_event_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITPluggableTerminalEventSinkRegistration_Value = Guid.initString("f7115709-a216-4957-a759-060ab32a90d1");
pub const IID_ITPluggableTerminalEventSinkRegistration = &IID_ITPluggableTerminalEventSinkRegistration_Value;
pub const ITPluggableTerminalEventSinkRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterSink: *const fn (
            self: *const ITPluggableTerminalEventSinkRegistration,
            p_event_sink: ?*ITPluggableTerminalEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterSink: *const fn (
            self: *const ITPluggableTerminalEventSinkRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerSink(self: *const T, p_event_sink_: ?*ITPluggableTerminalEventSink) HRESULT {
                return @as(*const ITPluggableTerminalEventSinkRegistration.VTable, @ptrCast(self.vtable)).RegisterSink(@as(*const ITPluggableTerminalEventSinkRegistration, @ptrCast(self)), p_event_sink_);
            }
            pub inline fn unregisterSink(self: *const T) HRESULT {
                return @as(*const ITPluggableTerminalEventSinkRegistration.VTable, @ptrCast(self.vtable)).UnregisterSink(@as(*const ITPluggableTerminalEventSinkRegistration, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITMSPAddress_Value = Guid.initString("ee3bd600-3868-11d2-a045-00c04fb6809f");
pub const IID_ITMSPAddress = &IID_ITMSPAddress_Value;
pub const ITMSPAddress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const ITMSPAddress,
            h_event: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const ITMSPAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMSPCall: *const fn (
            self: *const ITMSPAddress,
            h_call: ?*i32,
            dw_reserved: u32,
            dw_media_type: u32,
            p_outer_unknown: ?*IUnknown,
            pp_stream_control: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownMSPCall: *const fn (
            self: *const ITMSPAddress,
            p_stream_control: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReceiveTSPData: *const fn (
            self: *const ITMSPAddress,
            p_m_s_p_call: ?*IUnknown,
            p_buffer: [*:0]u8,
            dw_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEvent: *const fn (
            self: *const ITMSPAddress,
            pdw_size: ?*u32,
            p_event_buffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, h_event_: ?*i32) HRESULT {
                return @as(*const ITMSPAddress.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ITMSPAddress, @ptrCast(self)), h_event_);
            }
            pub inline fn shutdown(self: *const T) HRESULT {
                return @as(*const ITMSPAddress.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const ITMSPAddress, @ptrCast(self)));
            }
            pub inline fn createMSPCall(self: *const T, h_call_: ?*i32, dw_reserved_: u32, dw_media_type_: u32, p_outer_unknown_: ?*IUnknown, pp_stream_control_: ?*?*IUnknown) HRESULT {
                return @as(*const ITMSPAddress.VTable, @ptrCast(self.vtable)).CreateMSPCall(@as(*const ITMSPAddress, @ptrCast(self)), h_call_, dw_reserved_, dw_media_type_, p_outer_unknown_, pp_stream_control_);
            }
            pub inline fn shutdownMSPCall(self: *const T, p_stream_control_: ?*IUnknown) HRESULT {
                return @as(*const ITMSPAddress.VTable, @ptrCast(self.vtable)).ShutdownMSPCall(@as(*const ITMSPAddress, @ptrCast(self)), p_stream_control_);
            }
            pub inline fn receiveTSPData(self: *const T, p_m_s_p_call_: ?*IUnknown, p_buffer_: [*:0]u8, dw_size_: u32) HRESULT {
                return @as(*const ITMSPAddress.VTable, @ptrCast(self.vtable)).ReceiveTSPData(@as(*const ITMSPAddress, @ptrCast(self)), p_m_s_p_call_, p_buffer_, dw_size_);
            }
            pub inline fn getEvent(self: *const T, pdw_size_: ?*u32, p_event_buffer_: [*:0]u8) HRESULT {
                return @as(*const ITMSPAddress.VTable, @ptrCast(self.vtable)).GetEvent(@as(*const ITMSPAddress, @ptrCast(self)), pdw_size_, p_event_buffer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITTAPIDispatchEventNotification_Value = Guid.initString("9f34325b-7e62-11d2-9457-00c04f8ec888");
pub const IID_ITTAPIDispatchEventNotification = &IID_ITTAPIDispatchEventNotification_Value;
pub const ITTAPIDispatchEventNotification = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_Rendezvous_Value = Guid.initString("f1029e5b-cb5b-11d0-8d59-00c04fd91ac0");
pub const CLSID_Rendezvous = &CLSID_Rendezvous_Value;

pub const DIRECTORY_TYPE = enum(i32) {
    NTDS = 1,
    ILS = 2,
};
pub const DT_NTDS = DIRECTORY_TYPE.NTDS;
pub const DT_ILS = DIRECTORY_TYPE.ILS;

pub const DIRECTORY_OBJECT_TYPE = enum(i32) {
    CONFERENCE = 1,
    USER = 2,
};
pub const OT_CONFERENCE = DIRECTORY_OBJECT_TYPE.CONFERENCE;
pub const OT_USER = DIRECTORY_OBJECT_TYPE.USER;

pub const RND_ADVERTISING_SCOPE = enum(i32) {
    LOCAL = 1,
    SITE = 2,
    REGION = 3,
    WORLD = 4,
};
pub const RAS_LOCAL = RND_ADVERTISING_SCOPE.LOCAL;
pub const RAS_SITE = RND_ADVERTISING_SCOPE.SITE;
pub const RAS_REGION = RND_ADVERTISING_SCOPE.REGION;
pub const RAS_WORLD = RND_ADVERTISING_SCOPE.WORLD;

const IID_ITDirectoryObjectConference_Value = Guid.initString("f1029e5d-cb5b-11d0-8d59-00c04fd91ac0");
pub const IID_ITDirectoryObjectConference = &IID_ITDirectoryObjectConference_Value;
pub const ITDirectoryObjectConference = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            pp_protocol: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Originator: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            pp_originator: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Originator: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            p_originator: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdvertisingScope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            p_advertising_scope: ?*RND_ADVERTISING_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AdvertisingScope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            advertising_scope: RND_ADVERTISING_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Url: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            pp_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Url: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            p_url: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            pp_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            p_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsEncrypted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            pf_encrypted: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsEncrypted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            f_encrypted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StopTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StopTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectConference,
            date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProtocol(self: *const T, pp_protocol_: ?*?BSTR) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).get_Protocol(@as(*const ITDirectoryObjectConference, @ptrCast(self)), pp_protocol_);
            }
            pub inline fn getOriginator(self: *const T, pp_originator_: ?*?BSTR) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).get_Originator(@as(*const ITDirectoryObjectConference, @ptrCast(self)), pp_originator_);
            }
            pub inline fn putOriginator(self: *const T, p_originator_: ?BSTR) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).put_Originator(@as(*const ITDirectoryObjectConference, @ptrCast(self)), p_originator_);
            }
            pub inline fn getAdvertisingScope(self: *const T, p_advertising_scope_: ?*RND_ADVERTISING_SCOPE) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).get_AdvertisingScope(@as(*const ITDirectoryObjectConference, @ptrCast(self)), p_advertising_scope_);
            }
            pub inline fn putAdvertisingScope(self: *const T, advertising_scope_: RND_ADVERTISING_SCOPE) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).put_AdvertisingScope(@as(*const ITDirectoryObjectConference, @ptrCast(self)), advertising_scope_);
            }
            pub inline fn getUrl(self: *const T, pp_url_: ?*?BSTR) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).get_Url(@as(*const ITDirectoryObjectConference, @ptrCast(self)), pp_url_);
            }
            pub inline fn putUrl(self: *const T, p_url_: ?BSTR) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).put_Url(@as(*const ITDirectoryObjectConference, @ptrCast(self)), p_url_);
            }
            pub inline fn getDescription(self: *const T, pp_description_: ?*?BSTR) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).get_Description(@as(*const ITDirectoryObjectConference, @ptrCast(self)), pp_description_);
            }
            pub inline fn putDescription(self: *const T, p_description_: ?BSTR) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).put_Description(@as(*const ITDirectoryObjectConference, @ptrCast(self)), p_description_);
            }
            pub inline fn getIsEncrypted(self: *const T, pf_encrypted_: ?*i16) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).get_IsEncrypted(@as(*const ITDirectoryObjectConference, @ptrCast(self)), pf_encrypted_);
            }
            pub inline fn putIsEncrypted(self: *const T, f_encrypted_: i16) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).put_IsEncrypted(@as(*const ITDirectoryObjectConference, @ptrCast(self)), f_encrypted_);
            }
            pub inline fn getStartTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).get_StartTime(@as(*const ITDirectoryObjectConference, @ptrCast(self)), p_date_);
            }
            pub inline fn putStartTime(self: *const T, date_: f64) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).put_StartTime(@as(*const ITDirectoryObjectConference, @ptrCast(self)), date_);
            }
            pub inline fn getStopTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).get_StopTime(@as(*const ITDirectoryObjectConference, @ptrCast(self)), p_date_);
            }
            pub inline fn putStopTime(self: *const T, date_: f64) HRESULT {
                return @as(*const ITDirectoryObjectConference.VTable, @ptrCast(self.vtable)).put_StopTime(@as(*const ITDirectoryObjectConference, @ptrCast(self)), date_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITDirectoryObjectUser_Value = Guid.initString("34621d6f-6cff-11d1-aff7-00c04fc31fee");
pub const IID_ITDirectoryObjectUser = &IID_ITDirectoryObjectUser_Value;
pub const ITDirectoryObjectUser = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IPPhonePrimary: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectUser,
            pp_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IPPhonePrimary: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObjectUser,
            p_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIPPhonePrimary(self: *const T, pp_name_: ?*?BSTR) HRESULT {
                return @as(*const ITDirectoryObjectUser.VTable, @ptrCast(self.vtable)).get_IPPhonePrimary(@as(*const ITDirectoryObjectUser, @ptrCast(self)), pp_name_);
            }
            pub inline fn putIPPhonePrimary(self: *const T, p_name_: ?BSTR) HRESULT {
                return @as(*const ITDirectoryObjectUser.VTable, @ptrCast(self.vtable)).put_IPPhonePrimary(@as(*const ITDirectoryObjectUser, @ptrCast(self)), p_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumDialableAddrs_Value = Guid.initString("34621d70-6cff-11d1-aff7-00c04fc31fee");
pub const IID_IEnumDialableAddrs = &IID_IEnumDialableAddrs_Value;
pub const IEnumDialableAddrs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumDialableAddrs,
            celt: u32,
            pp_elements: [*]?BSTR,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumDialableAddrs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumDialableAddrs,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumDialableAddrs,
            pp_enum: ?*?*IEnumDialableAddrs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?BSTR, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumDialableAddrs.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumDialableAddrs, @ptrCast(self)), celt_, pp_elements_, pc_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumDialableAddrs.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumDialableAddrs, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumDialableAddrs.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumDialableAddrs, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumDialableAddrs) HRESULT {
                return @as(*const IEnumDialableAddrs.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumDialableAddrs, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITDirectoryObject_Value = Guid.initString("34621d6e-6cff-11d1-aff7-00c04fc31fee");
pub const IID_ITDirectoryObject = &IID_ITDirectoryObject_Value;
pub const ITDirectoryObject = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObject,
            p_object_type: ?*DIRECTORY_OBJECT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObject,
            pp_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObject,
            p_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DialableAddrs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObject,
            dw_address_type: i32,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateDialableAddrs: *const fn (
            self: *const ITDirectoryObject,
            dw_address_type: u32,
            pp_enum_dialable_addrs: ?*?*IEnumDialableAddrs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecurityDescriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObject,
            pp_sec_des: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecurityDescriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectoryObject,
            p_sec_des: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getObjectType(self: *const T, p_object_type_: ?*DIRECTORY_OBJECT_TYPE) HRESULT {
                return @as(*const ITDirectoryObject.VTable, @ptrCast(self.vtable)).get_ObjectType(@as(*const ITDirectoryObject, @ptrCast(self)), p_object_type_);
            }
            pub inline fn getName(self: *const T, pp_name_: ?*?BSTR) HRESULT {
                return @as(*const ITDirectoryObject.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITDirectoryObject, @ptrCast(self)), pp_name_);
            }
            pub inline fn putName(self: *const T, p_name_: ?BSTR) HRESULT {
                return @as(*const ITDirectoryObject.VTable, @ptrCast(self.vtable)).put_Name(@as(*const ITDirectoryObject, @ptrCast(self)), p_name_);
            }
            pub inline fn getDialableAddrs(self: *const T, dw_address_type_: i32, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITDirectoryObject.VTable, @ptrCast(self.vtable)).get_DialableAddrs(@as(*const ITDirectoryObject, @ptrCast(self)), dw_address_type_, p_variant_);
            }
            pub inline fn enumerateDialableAddrs(self: *const T, dw_address_type_: u32, pp_enum_dialable_addrs_: ?*?*IEnumDialableAddrs) HRESULT {
                return @as(*const ITDirectoryObject.VTable, @ptrCast(self.vtable)).EnumerateDialableAddrs(@as(*const ITDirectoryObject, @ptrCast(self)), dw_address_type_, pp_enum_dialable_addrs_);
            }
            pub inline fn getSecurityDescriptor(self: *const T, pp_sec_des_: ?*?*IDispatch) HRESULT {
                return @as(*const ITDirectoryObject.VTable, @ptrCast(self.vtable)).get_SecurityDescriptor(@as(*const ITDirectoryObject, @ptrCast(self)), pp_sec_des_);
            }
            pub inline fn putSecurityDescriptor(self: *const T, p_sec_des_: ?*IDispatch) HRESULT {
                return @as(*const ITDirectoryObject.VTable, @ptrCast(self.vtable)).put_SecurityDescriptor(@as(*const ITDirectoryObject, @ptrCast(self)), p_sec_des_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumDirectoryObject_Value = Guid.initString("06c9b64a-306d-11d1-9774-00c04fd91ac0");
pub const IID_IEnumDirectoryObject = &IID_IEnumDirectoryObject_Value;
pub const IEnumDirectoryObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumDirectoryObject,
            celt: u32,
            p_val: [*]?*ITDirectoryObject,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumDirectoryObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumDirectoryObject,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumDirectoryObject,
            pp_enum: ?*?*IEnumDirectoryObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, p_val_: [*]?*ITDirectoryObject, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumDirectoryObject.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumDirectoryObject, @ptrCast(self)), celt_, p_val_, pc_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumDirectoryObject.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumDirectoryObject, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumDirectoryObject.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumDirectoryObject, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumDirectoryObject) HRESULT {
                return @as(*const IEnumDirectoryObject.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumDirectoryObject, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITILSConfig_Value = Guid.initString("34621d72-6cff-11d1-aff7-00c04fc31fee");
pub const IID_ITILSConfig = &IID_ITILSConfig_Value;
pub const ITILSConfig = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Port: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITILSConfig,
            p_port: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Port: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITILSConfig,
            port: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPort(self: *const T, p_port_: ?*i32) HRESULT {
                return @as(*const ITILSConfig.VTable, @ptrCast(self.vtable)).get_Port(@as(*const ITILSConfig, @ptrCast(self)), p_port_);
            }
            pub inline fn putPort(self: *const T, port_: i32) HRESULT {
                return @as(*const ITILSConfig.VTable, @ptrCast(self.vtable)).put_Port(@as(*const ITILSConfig, @ptrCast(self)), port_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITDirectory_Value = Guid.initString("34621d6c-6cff-11d1-aff7-00c04fc31fee");
pub const IID_ITDirectory = &IID_ITDirectory_Value;
pub const ITDirectory = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DirectoryType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectory,
            p_directory_type: ?*DIRECTORY_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectory,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsDynamic: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectory,
            pf_dynamic: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultObjectTTL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectory,
            p_t_t_l: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultObjectTTL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectory,
            t_t_l: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableAutoRefresh: *const fn (
            self: *const ITDirectory,
            f_enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn (
            self: *const ITDirectory,
            f_secure: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Bind: *const fn (
            self: *const ITDirectory,
            p_domain_name: ?BSTR,
            p_user_name: ?BSTR,
            p_password: ?BSTR,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDirectoryObject: *const fn (
            self: *const ITDirectory,
            p_directory_object: ?*ITDirectoryObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyDirectoryObject: *const fn (
            self: *const ITDirectory,
            p_directory_object: ?*ITDirectoryObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshDirectoryObject: *const fn (
            self: *const ITDirectory,
            p_directory_object: ?*ITDirectoryObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDirectoryObject: *const fn (
            self: *const ITDirectory,
            p_directory_object: ?*ITDirectoryObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DirectoryObjects: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITDirectory,
            directory_object_type: DIRECTORY_OBJECT_TYPE,
            p_name: ?BSTR,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateDirectoryObjects: *const fn (
            self: *const ITDirectory,
            directory_object_type: DIRECTORY_OBJECT_TYPE,
            p_name: ?BSTR,
            pp_enum_object: ?*?*IEnumDirectoryObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDirectoryType(self: *const T, p_directory_type_: ?*DIRECTORY_TYPE) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).get_DirectoryType(@as(*const ITDirectory, @ptrCast(self)), p_directory_type_);
            }
            pub inline fn getDisplayName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const ITDirectory, @ptrCast(self)), p_name_);
            }
            pub inline fn getIsDynamic(self: *const T, pf_dynamic_: ?*i16) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).get_IsDynamic(@as(*const ITDirectory, @ptrCast(self)), pf_dynamic_);
            }
            pub inline fn getDefaultObjectTTL(self: *const T, p_t_t_l_: ?*i32) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).get_DefaultObjectTTL(@as(*const ITDirectory, @ptrCast(self)), p_t_t_l_);
            }
            pub inline fn putDefaultObjectTTL(self: *const T, t_t_l_: i32) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).put_DefaultObjectTTL(@as(*const ITDirectory, @ptrCast(self)), t_t_l_);
            }
            pub inline fn enableAutoRefresh(self: *const T, f_enable_: i16) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).EnableAutoRefresh(@as(*const ITDirectory, @ptrCast(self)), f_enable_);
            }
            pub inline fn connect(self: *const T, f_secure_: i16) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).Connect(@as(*const ITDirectory, @ptrCast(self)), f_secure_);
            }
            pub inline fn bind(self: *const T, p_domain_name_: ?BSTR, p_user_name_: ?BSTR, p_password_: ?BSTR, l_flags_: i32) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).Bind(@as(*const ITDirectory, @ptrCast(self)), p_domain_name_, p_user_name_, p_password_, l_flags_);
            }
            pub inline fn addDirectoryObject(self: *const T, p_directory_object_: ?*ITDirectoryObject) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).AddDirectoryObject(@as(*const ITDirectory, @ptrCast(self)), p_directory_object_);
            }
            pub inline fn modifyDirectoryObject(self: *const T, p_directory_object_: ?*ITDirectoryObject) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).ModifyDirectoryObject(@as(*const ITDirectory, @ptrCast(self)), p_directory_object_);
            }
            pub inline fn refreshDirectoryObject(self: *const T, p_directory_object_: ?*ITDirectoryObject) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).RefreshDirectoryObject(@as(*const ITDirectory, @ptrCast(self)), p_directory_object_);
            }
            pub inline fn deleteDirectoryObject(self: *const T, p_directory_object_: ?*ITDirectoryObject) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).DeleteDirectoryObject(@as(*const ITDirectory, @ptrCast(self)), p_directory_object_);
            }
            pub inline fn getDirectoryObjects(self: *const T, directory_object_type_: DIRECTORY_OBJECT_TYPE, p_name_: ?BSTR, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).get_DirectoryObjects(@as(*const ITDirectory, @ptrCast(self)), directory_object_type_, p_name_, p_variant_);
            }
            pub inline fn enumerateDirectoryObjects(self: *const T, directory_object_type_: DIRECTORY_OBJECT_TYPE, p_name_: ?BSTR, pp_enum_object_: ?*?*IEnumDirectoryObject) HRESULT {
                return @as(*const ITDirectory.VTable, @ptrCast(self.vtable)).EnumerateDirectoryObjects(@as(*const ITDirectory, @ptrCast(self)), directory_object_type_, p_name_, pp_enum_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumDirectory_Value = Guid.initString("34621d6d-6cff-11d1-aff7-00c04fc31fee");
pub const IID_IEnumDirectory = &IID_IEnumDirectory_Value;
pub const IEnumDirectory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumDirectory,
            celt: u32,
            pp_elements: [*]?*ITDirectory,
            pc_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumDirectory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumDirectory,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumDirectory,
            pp_enum: ?*?*IEnumDirectory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*ITDirectory, pc_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumDirectory.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumDirectory, @ptrCast(self)), celt_, pp_elements_, pc_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumDirectory.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumDirectory, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumDirectory.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumDirectory, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumDirectory) HRESULT {
                return @as(*const IEnumDirectory.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumDirectory, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITRendezvous_Value = Guid.initString("34621d6b-6cff-11d1-aff7-00c04fc31fee");
pub const IID_ITRendezvous = &IID_ITRendezvous_Value;
pub const ITRendezvous = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultDirectories: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITRendezvous,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateDefaultDirectories: *const fn (
            self: *const ITRendezvous,
            pp_enum_directory: ?*?*IEnumDirectory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDirectory: *const fn (
            self: *const ITRendezvous,
            directory_type: DIRECTORY_TYPE,
            p_name: ?BSTR,
            pp_dir: ?*?*ITDirectory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDirectoryObject: *const fn (
            self: *const ITRendezvous,
            directory_object_type: DIRECTORY_OBJECT_TYPE,
            p_name: ?BSTR,
            pp_directory_object: ?*?*ITDirectoryObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDefaultDirectories(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const ITRendezvous.VTable, @ptrCast(self.vtable)).get_DefaultDirectories(@as(*const ITRendezvous, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateDefaultDirectories(self: *const T, pp_enum_directory_: ?*?*IEnumDirectory) HRESULT {
                return @as(*const ITRendezvous.VTable, @ptrCast(self.vtable)).EnumerateDefaultDirectories(@as(*const ITRendezvous, @ptrCast(self)), pp_enum_directory_);
            }
            pub inline fn createDirectory(self: *const T, directory_type_: DIRECTORY_TYPE, p_name_: ?BSTR, pp_dir_: ?*?*ITDirectory) HRESULT {
                return @as(*const ITRendezvous.VTable, @ptrCast(self.vtable)).CreateDirectory(@as(*const ITRendezvous, @ptrCast(self)), directory_type_, p_name_, pp_dir_);
            }
            pub inline fn createDirectoryObject(self: *const T, directory_object_type_: DIRECTORY_OBJECT_TYPE, p_name_: ?BSTR, pp_directory_object_: ?*?*ITDirectoryObject) HRESULT {
                return @as(*const ITRendezvous.VTable, @ptrCast(self.vtable)).CreateDirectoryObject(@as(*const ITRendezvous, @ptrCast(self)), directory_object_type_, p_name_, pp_directory_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_McastAddressAllocation_Value = Guid.initString("df0daef2-a289-11d1-8697-006008b0e5d2");
pub const CLSID_McastAddressAllocation = &CLSID_McastAddressAllocation_Value;

const IID_IMcastScope_Value = Guid.initString("df0daef4-a289-11d1-8697-006008b0e5d2");
pub const IID_IMcastScope = &IID_IMcastScope_Value;
pub const IMcastScope = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScopeID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastScope,
            p_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastScope,
            p_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InterfaceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastScope,
            p_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScopeDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastScope,
            pp_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TTL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastScope,
            p_t_t_l: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getScopeID(self: *const T, p_i_d_: ?*i32) HRESULT {
                return @as(*const IMcastScope.VTable, @ptrCast(self.vtable)).get_ScopeID(@as(*const IMcastScope, @ptrCast(self)), p_i_d_);
            }
            pub inline fn getServerID(self: *const T, p_i_d_: ?*i32) HRESULT {
                return @as(*const IMcastScope.VTable, @ptrCast(self.vtable)).get_ServerID(@as(*const IMcastScope, @ptrCast(self)), p_i_d_);
            }
            pub inline fn getInterfaceID(self: *const T, p_i_d_: ?*i32) HRESULT {
                return @as(*const IMcastScope.VTable, @ptrCast(self.vtable)).get_InterfaceID(@as(*const IMcastScope, @ptrCast(self)), p_i_d_);
            }
            pub inline fn getScopeDescription(self: *const T, pp_description_: ?*?BSTR) HRESULT {
                return @as(*const IMcastScope.VTable, @ptrCast(self.vtable)).get_ScopeDescription(@as(*const IMcastScope, @ptrCast(self)), pp_description_);
            }
            pub inline fn getTTL(self: *const T, p_t_t_l_: ?*i32) HRESULT {
                return @as(*const IMcastScope.VTable, @ptrCast(self.vtable)).get_TTL(@as(*const IMcastScope, @ptrCast(self)), p_t_t_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMcastLeaseInfo_Value = Guid.initString("df0daefd-a289-11d1-8697-006008b0e5d2");
pub const IID_IMcastLeaseInfo = &IID_IMcastLeaseInfo_Value;
pub const IMcastLeaseInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastLeaseInfo,
            pp_request_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LeaseStartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastLeaseInfo,
            p_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LeaseStartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastLeaseInfo,
            time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LeaseStopTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastLeaseInfo,
            p_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LeaseStopTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastLeaseInfo,
            time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddressCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastLeaseInfo,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastLeaseInfo,
            pp_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TTL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastLeaseInfo,
            p_t_t_l: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Addresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastLeaseInfo,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAddresses: *const fn (
            self: *const IMcastLeaseInfo,
            pp_enum_addresses: ?*?*IEnumBstr,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getRequestID(self: *const T, pp_request_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).get_RequestID(@as(*const IMcastLeaseInfo, @ptrCast(self)), pp_request_i_d_);
            }
            pub inline fn getLeaseStartTime(self: *const T, p_time_: ?*f64) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).get_LeaseStartTime(@as(*const IMcastLeaseInfo, @ptrCast(self)), p_time_);
            }
            pub inline fn putLeaseStartTime(self: *const T, time_: f64) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).put_LeaseStartTime(@as(*const IMcastLeaseInfo, @ptrCast(self)), time_);
            }
            pub inline fn getLeaseStopTime(self: *const T, p_time_: ?*f64) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).get_LeaseStopTime(@as(*const IMcastLeaseInfo, @ptrCast(self)), p_time_);
            }
            pub inline fn putLeaseStopTime(self: *const T, time_: f64) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).put_LeaseStopTime(@as(*const IMcastLeaseInfo, @ptrCast(self)), time_);
            }
            pub inline fn getAddressCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).get_AddressCount(@as(*const IMcastLeaseInfo, @ptrCast(self)), p_count_);
            }
            pub inline fn getServerAddress(self: *const T, pp_address_: ?*?BSTR) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).get_ServerAddress(@as(*const IMcastLeaseInfo, @ptrCast(self)), pp_address_);
            }
            pub inline fn getTTL(self: *const T, p_t_t_l_: ?*i32) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).get_TTL(@as(*const IMcastLeaseInfo, @ptrCast(self)), p_t_t_l_);
            }
            pub inline fn getAddresses(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).get_Addresses(@as(*const IMcastLeaseInfo, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateAddresses(self: *const T, pp_enum_addresses_: ?*?*IEnumBstr) HRESULT {
                return @as(*const IMcastLeaseInfo.VTable, @ptrCast(self.vtable)).EnumerateAddresses(@as(*const IMcastLeaseInfo, @ptrCast(self)), pp_enum_addresses_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumMcastScope_Value = Guid.initString("df0daf09-a289-11d1-8697-006008b0e5d2");
pub const IID_IEnumMcastScope = &IID_IEnumMcastScope_Value;
pub const IEnumMcastScope = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumMcastScope,
            celt: u32,
            pp_scopes: ?*?*IMcastScope,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumMcastScope,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumMcastScope,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumMcastScope,
            pp_enum: ?*?*IEnumMcastScope,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_scopes_: ?*?*IMcastScope, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumMcastScope.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumMcastScope, @ptrCast(self)), celt_, pp_scopes_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumMcastScope.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumMcastScope, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumMcastScope.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumMcastScope, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumMcastScope) HRESULT {
                return @as(*const IEnumMcastScope.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumMcastScope, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMcastAddressAllocation_Value = Guid.initString("df0daef1-a289-11d1-8697-006008b0e5d2");
pub const IID_IMcastAddressAllocation = &IID_IMcastAddressAllocation_Value;
pub const IMcastAddressAllocation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scopes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMcastAddressAllocation,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateScopes: *const fn (
            self: *const IMcastAddressAllocation,
            pp_enum_mcast_scope: ?*?*IEnumMcastScope,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAddress: *const fn (
            self: *const IMcastAddressAllocation,
            p_scope: ?*IMcastScope,
            lease_start_time: f64,
            lease_stop_time: f64,
            num_addresses: i32,
            pp_lease_response: ?*?*IMcastLeaseInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenewAddress: *const fn (
            self: *const IMcastAddressAllocation,
            l_reserved: i32,
            p_renew_request: ?*IMcastLeaseInfo,
            pp_renew_response: ?*?*IMcastLeaseInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseAddress: *const fn (
            self: *const IMcastAddressAllocation,
            p_release_request: ?*IMcastLeaseInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLeaseInfo: *const fn (
            self: *const IMcastAddressAllocation,
            lease_start_time: f64,
            lease_stop_time: f64,
            dw_num_addresses: u32,
            pp_addresses: ?*?PWSTR,
            p_request_i_d: ?PWSTR,
            p_server_address: ?PWSTR,
            pp_release_request: ?*?*IMcastLeaseInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLeaseInfoFromVariant: *const fn (
            self: *const IMcastAddressAllocation,
            lease_start_time: f64,
            lease_stop_time: f64,
            v_addresses: VARIANT,
            p_request_i_d: ?BSTR,
            p_server_address: ?BSTR,
            pp_release_request: ?*?*IMcastLeaseInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getScopes(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const IMcastAddressAllocation.VTable, @ptrCast(self.vtable)).get_Scopes(@as(*const IMcastAddressAllocation, @ptrCast(self)), p_variant_);
            }
            pub inline fn enumerateScopes(self: *const T, pp_enum_mcast_scope_: ?*?*IEnumMcastScope) HRESULT {
                return @as(*const IMcastAddressAllocation.VTable, @ptrCast(self.vtable)).EnumerateScopes(@as(*const IMcastAddressAllocation, @ptrCast(self)), pp_enum_mcast_scope_);
            }
            pub inline fn requestAddress(self: *const T, p_scope_: ?*IMcastScope, lease_start_time_: f64, lease_stop_time_: f64, num_addresses_: i32, pp_lease_response_: ?*?*IMcastLeaseInfo) HRESULT {
                return @as(*const IMcastAddressAllocation.VTable, @ptrCast(self.vtable)).RequestAddress(@as(*const IMcastAddressAllocation, @ptrCast(self)), p_scope_, lease_start_time_, lease_stop_time_, num_addresses_, pp_lease_response_);
            }
            pub inline fn renewAddress(self: *const T, l_reserved_: i32, p_renew_request_: ?*IMcastLeaseInfo, pp_renew_response_: ?*?*IMcastLeaseInfo) HRESULT {
                return @as(*const IMcastAddressAllocation.VTable, @ptrCast(self.vtable)).RenewAddress(@as(*const IMcastAddressAllocation, @ptrCast(self)), l_reserved_, p_renew_request_, pp_renew_response_);
            }
            pub inline fn releaseAddress(self: *const T, p_release_request_: ?*IMcastLeaseInfo) HRESULT {
                return @as(*const IMcastAddressAllocation.VTable, @ptrCast(self.vtable)).ReleaseAddress(@as(*const IMcastAddressAllocation, @ptrCast(self)), p_release_request_);
            }
            pub inline fn createLeaseInfo(self: *const T, lease_start_time_: f64, lease_stop_time_: f64, dw_num_addresses_: u32, pp_addresses_: ?*?PWSTR, p_request_i_d_: ?PWSTR, p_server_address_: ?PWSTR, pp_release_request_: ?*?*IMcastLeaseInfo) HRESULT {
                return @as(*const IMcastAddressAllocation.VTable, @ptrCast(self.vtable)).CreateLeaseInfo(@as(*const IMcastAddressAllocation, @ptrCast(self)), lease_start_time_, lease_stop_time_, dw_num_addresses_, pp_addresses_, p_request_i_d_, p_server_address_, pp_release_request_);
            }
            pub inline fn createLeaseInfoFromVariant(self: *const T, lease_start_time_: f64, lease_stop_time_: f64, v_addresses_: VARIANT, p_request_i_d_: ?BSTR, p_server_address_: ?BSTR, pp_release_request_: ?*?*IMcastLeaseInfo) HRESULT {
                return @as(*const IMcastAddressAllocation.VTable, @ptrCast(self.vtable)).CreateLeaseInfoFromVariant(@as(*const IMcastAddressAllocation, @ptrCast(self)), lease_start_time_, lease_stop_time_, v_addresses_, p_request_i_d_, p_server_address_, pp_release_request_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const STnefProblem = extern struct {
    ulComponent: u32,
    ulAttribute: u32,
    ulPropTag: u32,
    scode: i32,
};

pub const STnefProblemArray = extern struct {
    cProblem: u32,
    aProblem: [1]STnefProblem,
};

pub const ITnef = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddProps: *const fn (
            self: *const ITnef,
            ul_flags: u32,
            ul_elem_i_d: u32,
            lpv_data: ?*anyopaque,
            lp_prop_list: ?*SPropTagArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExtractProps: *const fn (
            self: *const ITnef,
            ul_flags: u32,
            lp_prop_list: ?*SPropTagArray,
            lp_problems: ?*?*STnefProblemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish: *const fn (
            self: *const ITnef,
            ul_flags: u32,
            lp_key: ?*u16,
            lp_problems: ?*?*STnefProblemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenTaggedBody: *const fn (
            self: *const ITnef,
            lp_message: ?*IMessage,
            ul_flags: u32,
            lpp_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProps: *const fn (
            self: *const ITnef,
            ul_flags: u32,
            ul_elem_i_d: u32,
            c_values: u32,
            lp_props: ?*SPropValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeRecips: *const fn (
            self: *const ITnef,
            ul_flags: u32,
            lp_recipient_table: ?*IMAPITable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinishComponent: *const fn (
            self: *const ITnef,
            ul_flags: u32,
            ul_component_i_d: u32,
            lp_custom_prop_list: ?*SPropTagArray,
            lp_custom_props: ?*SPropValue,
            lp_prop_list: ?*SPropTagArray,
            lp_problems: ?*?*STnefProblemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addProps(self: *const T, ul_flags_: u32, ul_elem_i_d_: u32, lpv_data_: ?*anyopaque, lp_prop_list_: ?*SPropTagArray) HRESULT {
                return @as(*const ITnef.VTable, @ptrCast(self.vtable)).AddProps(@as(*const ITnef, @ptrCast(self)), ul_flags_, ul_elem_i_d_, lpv_data_, lp_prop_list_);
            }
            pub inline fn extractProps(self: *const T, ul_flags_: u32, lp_prop_list_: ?*SPropTagArray, lp_problems_: ?*?*STnefProblemArray) HRESULT {
                return @as(*const ITnef.VTable, @ptrCast(self.vtable)).ExtractProps(@as(*const ITnef, @ptrCast(self)), ul_flags_, lp_prop_list_, lp_problems_);
            }
            pub inline fn finish(self: *const T, ul_flags_: u32, lp_key_: ?*u16, lp_problems_: ?*?*STnefProblemArray) HRESULT {
                return @as(*const ITnef.VTable, @ptrCast(self.vtable)).Finish(@as(*const ITnef, @ptrCast(self)), ul_flags_, lp_key_, lp_problems_);
            }
            pub inline fn openTaggedBody(self: *const T, lp_message_: ?*IMessage, ul_flags_: u32, lpp_stream_: ?*?*IStream) HRESULT {
                return @as(*const ITnef.VTable, @ptrCast(self.vtable)).OpenTaggedBody(@as(*const ITnef, @ptrCast(self)), lp_message_, ul_flags_, lpp_stream_);
            }
            pub inline fn setProps(self: *const T, ul_flags_: u32, ul_elem_i_d_: u32, c_values_: u32, lp_props_: ?*SPropValue) HRESULT {
                return @as(*const ITnef.VTable, @ptrCast(self.vtable)).SetProps(@as(*const ITnef, @ptrCast(self)), ul_flags_, ul_elem_i_d_, c_values_, lp_props_);
            }
            pub inline fn encodeRecips(self: *const T, ul_flags_: u32, lp_recipient_table_: ?*IMAPITable) HRESULT {
                return @as(*const ITnef.VTable, @ptrCast(self.vtable)).EncodeRecips(@as(*const ITnef, @ptrCast(self)), ul_flags_, lp_recipient_table_);
            }
            pub inline fn finishComponent(self: *const T, ul_flags_: u32, ul_component_i_d_: u32, lp_custom_prop_list_: ?*SPropTagArray, lp_custom_props_: ?*SPropValue, lp_prop_list_: ?*SPropTagArray, lp_problems_: ?*?*STnefProblemArray) HRESULT {
                return @as(*const ITnef.VTable, @ptrCast(self.vtable)).FinishComponent(@as(*const ITnef, @ptrCast(self)), ul_flags_, ul_component_i_d_, lp_custom_prop_list_, lp_custom_props_, lp_prop_list_, lp_problems_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const LPOPENTNEFSTREAM = *const fn (
    lpv_support: ?*anyopaque,
    lp_stream: ?*IStream,
    lpsz_stream_name: ?*i8,
    ul_flags: u32,
    lp_message: ?*IMessage,
    w_key_val: u16,
    lpp_t_n_e_f: ?*?*ITnef,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPOPENTNEFSTREAMEX = *const fn (
    lpv_support: ?*anyopaque,
    lp_stream: ?*IStream,
    lpsz_stream_name: ?*i8,
    ul_flags: u32,
    lp_message: ?*IMessage,
    w_key_val: u16,
    lp_adress_book: ?*IAddrBook,
    lpp_t_n_e_f: ?*?*ITnef,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPGETTNEFSTREAMCODEPAGE = *const fn (
    lp_stream: ?*IStream,
    lpul_codepage: ?*u32,
    lpul_sub_codepage: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const _renddata = extern struct {
    atyp: u16 align(1),
    ulPosition: u32 align(1),
    dxWidth: u16 align(1),
    dyHeight: u16 align(1),
    dwFlags: u32 align(1),
};

pub const _dtr = extern struct {
    wYear: u16 align(1),
    wMonth: u16 align(1),
    wDay: u16 align(1),
    wHour: u16 align(1),
    wMinute: u16 align(1),
    wSecond: u16 align(1),
    wDayOfWeek: u16 align(1),
};

pub const _trp = extern struct {
    trpid: u16,
    cbgrtrp: u16,
    cch: u16,
    cbRgb: u16,
};

pub const _ADDR_ALIAS = extern struct {
    rgchName: [41]CHAR,
    rgchEName: [11]CHAR,
    rgchSrvr: [12]CHAR,
    dibDetail: u32,
    type: u16,
};

pub const NSID = extern struct {
    dwSize: u32,
    uchType: [16]u8,
    xtype: u32,
    lTime: i32,
    address: extern union {
        alias: _ADDR_ALIAS,
        rgchInterNet: [1]CHAR,
    },
};

//--------------------------------------------------------------------------------
// Section: Functions (252)
//--------------------------------------------------------------------------------
pub extern "tapi32" fn lineAccept(
    h_call: u32,
    lps_user_user_info: ?[*:0]const u8,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineAddProvider(
    lpsz_provider_filename: ?[*:0]const u8,
    hwnd_owner: ?HWND,
    lpdw_permanent_provider_i_d: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineAddProviderA(
    lpsz_provider_filename: ?[*:0]const u8,
    hwnd_owner: ?HWND,
    lpdw_permanent_provider_i_d: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineAddProviderW(
    lpsz_provider_filename: ?[*:0]const u16,
    hwnd_owner: ?HWND,
    lpdw_permanent_provider_i_d: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineAddToConference(
    h_conf_call: u32,
    h_consult_call: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineAgentSpecific(
    h_line: u32,
    dw_address_i_d: u32,
    dw_agent_extension_i_d_index: u32,
    lp_params: ?*anyopaque,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineAnswer(
    h_call: u32,
    lps_user_user_info: ?[*:0]const u8,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineBlindTransfer(
    h_call: u32,
    lpsz_dest_address: ?[*:0]const u8,
    dw_country_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineBlindTransferA(
    h_call: u32,
    lpsz_dest_address: ?[*:0]const u8,
    dw_country_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineBlindTransferW(
    h_call: u32,
    lpsz_dest_address_w: ?[*:0]const u16,
    dw_country_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineClose(
    h_line: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineCompleteCall(
    h_call: u32,
    lpdw_completion_i_d: ?*u32,
    dw_completion_mode: u32,
    dw_message_i_d: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineCompleteTransfer(
    h_call: u32,
    h_consult_call: u32,
    lph_conf_call: ?*u32,
    dw_transfer_mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineConfigDialog(
    dw_device_i_d: u32,
    hwnd_owner: ?HWND,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineConfigDialogA(
    dw_device_i_d: u32,
    hwnd_owner: ?HWND,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineConfigDialogW(
    dw_device_i_d: u32,
    hwnd_owner: ?HWND,
    lpsz_device_class: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineConfigDialogEdit(
    dw_device_i_d: u32,
    hwnd_owner: ?HWND,
    lpsz_device_class: ?[*:0]const u8,
    lp_device_config_in: ?*const anyopaque,
    dw_size: u32,
    lp_device_config_out: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineConfigDialogEditA(
    dw_device_i_d: u32,
    hwnd_owner: ?HWND,
    lpsz_device_class: ?[*:0]const u8,
    lp_device_config_in: ?*const anyopaque,
    dw_size: u32,
    lp_device_config_out: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineConfigDialogEditW(
    dw_device_i_d: u32,
    hwnd_owner: ?HWND,
    lpsz_device_class: ?[*:0]const u16,
    lp_device_config_in: ?*const anyopaque,
    dw_size: u32,
    lp_device_config_out: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineConfigProvider(
    hwnd_owner: ?HWND,
    dw_permanent_provider_i_d: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineCreateAgentW(
    h_line: u32,
    lpsz_agent_i_d: ?[*:0]const u16,
    lpsz_agent_p_i_n: ?[*:0]const u16,
    lph_agent: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineCreateAgentA(
    h_line: u32,
    lpsz_agent_i_d: ?[*:0]const u8,
    lpsz_agent_p_i_n: ?[*:0]const u8,
    lph_agent: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineCreateAgentSessionW(
    h_line: u32,
    h_agent: u32,
    lpsz_agent_p_i_n: ?[*:0]const u16,
    dw_working_address_i_d: u32,
    lp_group_i_d: ?*Guid,
    lph_agent_session: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineCreateAgentSessionA(
    h_line: u32,
    h_agent: u32,
    lpsz_agent_p_i_n: ?[*:0]const u8,
    dw_working_address_i_d: u32,
    lp_group_i_d: ?*Guid,
    lph_agent_session: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineDeallocateCall(
    h_call: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineDevSpecific(
    h_line: u32,
    dw_address_i_d: u32,
    h_call: u32,
    lp_params: ?*anyopaque,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineDevSpecificFeature(
    h_line: u32,
    dw_feature: u32,
    lp_params: ?*anyopaque,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineDial(
    h_call: u32,
    lpsz_dest_address: ?[*:0]const u8,
    dw_country_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineDialA(
    h_call: u32,
    lpsz_dest_address: ?[*:0]const u8,
    dw_country_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineDialW(
    h_call: u32,
    lpsz_dest_address: ?[*:0]const u16,
    dw_country_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineDrop(
    h_call: u32,
    lps_user_user_info: ?[*:0]const u8,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineForward(
    h_line: u32,
    b_all_addresses: u32,
    dw_address_i_d: u32,
    lp_forward_list: ?*const LINEFORWARDLIST,
    dw_num_rings_no_answer: u32,
    lph_consult_call: ?*u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineForwardA(
    h_line: u32,
    b_all_addresses: u32,
    dw_address_i_d: u32,
    lp_forward_list: ?*const LINEFORWARDLIST,
    dw_num_rings_no_answer: u32,
    lph_consult_call: ?*u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineForwardW(
    h_line: u32,
    b_all_addresses: u32,
    dw_address_i_d: u32,
    lp_forward_list: ?*const LINEFORWARDLIST,
    dw_num_rings_no_answer: u32,
    lph_consult_call: ?*u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGatherDigits(
    h_call: u32,
    dw_digit_modes: u32,
    lps_digits: ?[*:0]u8,
    dw_num_digits: u32,
    lpsz_termination_digits: ?[*:0]const u8,
    dw_first_digit_timeout: u32,
    dw_inter_digit_timeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGatherDigitsA(
    h_call: u32,
    dw_digit_modes: u32,
    lps_digits: ?[*:0]u8,
    dw_num_digits: u32,
    lpsz_termination_digits: ?[*:0]const u8,
    dw_first_digit_timeout: u32,
    dw_inter_digit_timeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGatherDigitsW(
    h_call: u32,
    dw_digit_modes: u32,
    lps_digits: ?[*:0]u16,
    dw_num_digits: u32,
    lpsz_termination_digits: ?[*:0]const u16,
    dw_first_digit_timeout: u32,
    dw_inter_digit_timeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGenerateDigits(
    h_call: u32,
    dw_digit_mode: u32,
    lpsz_digits: ?[*:0]const u8,
    dw_duration: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGenerateDigitsA(
    h_call: u32,
    dw_digit_mode: u32,
    lpsz_digits: ?[*:0]const u8,
    dw_duration: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGenerateDigitsW(
    h_call: u32,
    dw_digit_mode: u32,
    lpsz_digits: ?[*:0]const u16,
    dw_duration: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGenerateTone(
    h_call: u32,
    dw_tone_mode: u32,
    dw_duration: u32,
    dw_num_tones: u32,
    lp_tones: ?*const LINEGENERATETONE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAddressCaps(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_address_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    lp_address_caps: ?*LINEADDRESSCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAddressCapsA(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_address_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    lp_address_caps: ?*LINEADDRESSCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAddressCapsW(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_address_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    lp_address_caps: ?*LINEADDRESSCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAddressID(
    h_line: u32,
    lpdw_address_i_d: ?*u32,
    dw_address_mode: u32,
    lps_address: ?[*:0]const u8,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAddressIDA(
    h_line: u32,
    lpdw_address_i_d: ?*u32,
    dw_address_mode: u32,
    lps_address: ?[*:0]const u8,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAddressIDW(
    h_line: u32,
    lpdw_address_i_d: ?*u32,
    dw_address_mode: u32,
    lps_address: ?[*:0]const u16,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAddressStatus(
    h_line: u32,
    dw_address_i_d: u32,
    lp_address_status: ?*LINEADDRESSSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAddressStatusA(
    h_line: u32,
    dw_address_i_d: u32,
    lp_address_status: ?*LINEADDRESSSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAddressStatusW(
    h_line: u32,
    dw_address_i_d: u32,
    lp_address_status: ?*LINEADDRESSSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentActivityListA(
    h_line: u32,
    dw_address_i_d: u32,
    lp_agent_activity_list: ?*LINEAGENTACTIVITYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentActivityListW(
    h_line: u32,
    dw_address_i_d: u32,
    lp_agent_activity_list: ?*LINEAGENTACTIVITYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentCapsA(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_address_i_d: u32,
    dw_app_a_p_i_version: u32,
    lp_agent_caps: ?*LINEAGENTCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentCapsW(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_address_i_d: u32,
    dw_app_a_p_i_version: u32,
    lp_agent_caps: ?*LINEAGENTCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentGroupListA(
    h_line: u32,
    dw_address_i_d: u32,
    lp_agent_group_list: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentGroupListW(
    h_line: u32,
    dw_address_i_d: u32,
    lp_agent_group_list: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentInfo(
    h_line: u32,
    h_agent: u32,
    lp_agent_info: ?*LINEAGENTINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentSessionInfo(
    h_line: u32,
    h_agent_session: u32,
    lp_agent_session_info: ?*LINEAGENTSESSIONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentSessionList(
    h_line: u32,
    h_agent: u32,
    lp_agent_session_list: ?*LINEAGENTSESSIONLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentStatusA(
    h_line: u32,
    dw_address_i_d: u32,
    lp_agent_status: ?*LINEAGENTSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAgentStatusW(
    h_line: u32,
    dw_address_i_d: u32,
    lp_agent_status: ?*LINEAGENTSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAppPriority(
    lpsz_app_filename: ?[*:0]const u8,
    dw_media_mode: u32,
    lp_extension_i_d: ?*LINEEXTENSIONID,
    dw_request_mode: u32,
    lp_extension_name: ?*VARSTRING,
    lpdw_priority: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAppPriorityA(
    lpsz_app_filename: ?[*:0]const u8,
    dw_media_mode: u32,
    lp_extension_i_d: ?*LINEEXTENSIONID,
    dw_request_mode: u32,
    lp_extension_name: ?*VARSTRING,
    lpdw_priority: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetAppPriorityW(
    lpsz_app_filename: ?[*:0]const u16,
    dw_media_mode: u32,
    lp_extension_i_d: ?*LINEEXTENSIONID,
    dw_request_mode: u32,
    lp_extension_name: ?*VARSTRING,
    lpdw_priority: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetCallInfo(
    h_call: u32,
    lp_call_info: ?*LINECALLINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetCallInfoA(
    h_call: u32,
    lp_call_info: ?*LINECALLINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetCallInfoW(
    h_call: u32,
    lp_call_info: ?*LINECALLINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetCallStatus(
    h_call: u32,
    lp_call_status: ?*LINECALLSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetConfRelatedCalls(
    h_call: u32,
    lp_call_list: ?*LINECALLLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetCountry(
    dw_country_i_d: u32,
    dw_a_p_i_version: u32,
    lp_line_country_list: ?*LINECOUNTRYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetCountryA(
    dw_country_i_d: u32,
    dw_a_p_i_version: u32,
    lp_line_country_list: ?*LINECOUNTRYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetCountryW(
    dw_country_i_d: u32,
    dw_a_p_i_version: u32,
    lp_line_country_list: ?*LINECOUNTRYLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetDevCaps(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    lp_line_dev_caps: ?*LINEDEVCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetDevCapsA(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    lp_line_dev_caps: ?*LINEDEVCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetDevCapsW(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    lp_line_dev_caps: ?*LINEDEVCAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetDevConfig(
    dw_device_i_d: u32,
    lp_device_config: ?*VARSTRING,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetDevConfigA(
    dw_device_i_d: u32,
    lp_device_config: ?*VARSTRING,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetDevConfigW(
    dw_device_i_d: u32,
    lp_device_config: ?*VARSTRING,
    lpsz_device_class: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetGroupListA(
    h_line: u32,
    lp_group_list: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetGroupListW(
    h_line: u32,
    lp_group_list: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetIcon(
    dw_device_i_d: u32,
    lpsz_device_class: ?[*:0]const u8,
    lph_icon: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetIconA(
    dw_device_i_d: u32,
    lpsz_device_class: ?[*:0]const u8,
    lph_icon: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetIconW(
    dw_device_i_d: u32,
    lpsz_device_class: ?[*:0]const u16,
    lph_icon: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetID(
    h_line: u32,
    dw_address_i_d: u32,
    h_call: u32,
    dw_select: u32,
    lp_device_i_d: ?*VARSTRING,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetIDA(
    h_line: u32,
    dw_address_i_d: u32,
    h_call: u32,
    dw_select: u32,
    lp_device_i_d: ?*VARSTRING,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetIDW(
    h_line: u32,
    dw_address_i_d: u32,
    h_call: u32,
    dw_select: u32,
    lp_device_i_d: ?*VARSTRING,
    lpsz_device_class: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetLineDevStatus(
    h_line: u32,
    lp_line_dev_status: ?*LINEDEVSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetLineDevStatusA(
    h_line: u32,
    lp_line_dev_status: ?*LINEDEVSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetLineDevStatusW(
    h_line: u32,
    lp_line_dev_status: ?*LINEDEVSTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetMessage(
    h_line_app: u32,
    lp_message: ?*LINEMESSAGE,
    dw_timeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetNewCalls(
    h_line: u32,
    dw_address_i_d: u32,
    dw_select: u32,
    lp_call_list: ?*LINECALLLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetNumRings(
    h_line: u32,
    dw_address_i_d: u32,
    lpdw_num_rings: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetProviderList(
    dw_a_p_i_version: u32,
    lp_provider_list: ?*LINEPROVIDERLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetProviderListA(
    dw_a_p_i_version: u32,
    lp_provider_list: ?*LINEPROVIDERLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetProviderListW(
    dw_a_p_i_version: u32,
    lp_provider_list: ?*LINEPROVIDERLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetProxyStatus(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_app_a_p_i_version: u32,
    lp_line_proxy_reqest_list: ?*LINEPROXYREQUESTLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetQueueInfo(
    h_line: u32,
    dw_queue_i_d: u32,
    lp_line_queue_info: ?*LINEQUEUEINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetQueueListA(
    h_line: u32,
    lp_group_i_d: ?*Guid,
    lp_queue_list: ?*LINEQUEUELIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetQueueListW(
    h_line: u32,
    lp_group_i_d: ?*Guid,
    lp_queue_list: ?*LINEQUEUELIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetRequest(
    h_line_app: u32,
    dw_request_mode: u32,
    lp_request_buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetRequestA(
    h_line_app: u32,
    dw_request_mode: u32,
    lp_request_buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetRequestW(
    h_line_app: u32,
    dw_request_mode: u32,
    lp_request_buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetStatusMessages(
    h_line: u32,
    lpdw_line_states: ?*u32,
    lpdw_address_states: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetTranslateCaps(
    h_line_app: u32,
    dw_a_p_i_version: u32,
    lp_translate_caps: ?*LINETRANSLATECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetTranslateCapsA(
    h_line_app: u32,
    dw_a_p_i_version: u32,
    lp_translate_caps: ?*LINETRANSLATECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineGetTranslateCapsW(
    h_line_app: u32,
    dw_a_p_i_version: u32,
    lp_translate_caps: ?*LINETRANSLATECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineHandoff(
    h_call: u32,
    lpsz_file_name: ?[*:0]const u8,
    dw_media_mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineHandoffA(
    h_call: u32,
    lpsz_file_name: ?[*:0]const u8,
    dw_media_mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineHandoffW(
    h_call: u32,
    lpsz_file_name: ?[*:0]const u16,
    dw_media_mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineHold(
    h_call: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineInitialize(
    lph_line_app: ?*u32,
    h_instance: ?HINSTANCE,
    lpfn_callback: ?LINECALLBACK,
    lpsz_app_name: ?[*:0]const u8,
    lpdw_num_devs: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineInitializeExA(
    lph_line_app: ?*u32,
    h_instance: ?HINSTANCE,
    lpfn_callback: ?LINECALLBACK,
    lpsz_friendly_app_name: ?[*:0]const u8,
    lpdw_num_devs: ?*u32,
    lpdw_a_p_i_version: ?*u32,
    lp_line_initialize_ex_params: ?*LINEINITIALIZEEXPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineInitializeExW(
    lph_line_app: ?*u32,
    h_instance: ?HINSTANCE,
    lpfn_callback: ?LINECALLBACK,
    lpsz_friendly_app_name: ?[*:0]const u16,
    lpdw_num_devs: ?*u32,
    lpdw_a_p_i_version: ?*u32,
    lp_line_initialize_ex_params: ?*LINEINITIALIZEEXPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineMakeCall(
    h_line: u32,
    lph_call: ?*u32,
    lpsz_dest_address: ?[*:0]const u8,
    dw_country_code: u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineMakeCallA(
    h_line: u32,
    lph_call: ?*u32,
    lpsz_dest_address: ?[*:0]const u8,
    dw_country_code: u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineMakeCallW(
    h_line: u32,
    lph_call: ?*u32,
    lpsz_dest_address: ?[*:0]const u16,
    dw_country_code: u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineMonitorDigits(
    h_call: u32,
    dw_digit_modes: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineMonitorMedia(
    h_call: u32,
    dw_media_modes: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineMonitorTones(
    h_call: u32,
    lp_tone_list: ?*const LINEMONITORTONE,
    dw_num_entries: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineNegotiateAPIVersion(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_low_version: u32,
    dw_a_p_i_high_version: u32,
    lpdw_a_p_i_version: ?*u32,
    lp_extension_i_d: ?*LINEEXTENSIONID,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineNegotiateExtVersion(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_low_version: u32,
    dw_ext_high_version: u32,
    lpdw_ext_version: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineOpen(
    h_line_app: u32,
    dw_device_i_d: u32,
    lph_line: ?*u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    dw_callback_instance: usize,
    dw_privileges: u32,
    dw_media_modes: u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineOpenA(
    h_line_app: u32,
    dw_device_i_d: u32,
    lph_line: ?*u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    dw_callback_instance: usize,
    dw_privileges: u32,
    dw_media_modes: u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineOpenW(
    h_line_app: u32,
    dw_device_i_d: u32,
    lph_line: ?*u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    dw_callback_instance: usize,
    dw_privileges: u32,
    dw_media_modes: u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn linePark(
    h_call: u32,
    dw_park_mode: u32,
    lpsz_dir_address: ?[*:0]const u8,
    lp_non_dir_address: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineParkA(
    h_call: u32,
    dw_park_mode: u32,
    lpsz_dir_address: ?[*:0]const u8,
    lp_non_dir_address: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineParkW(
    h_call: u32,
    dw_park_mode: u32,
    lpsz_dir_address: ?[*:0]const u16,
    lp_non_dir_address: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn linePickup(
    h_line: u32,
    dw_address_i_d: u32,
    lph_call: ?*u32,
    lpsz_dest_address: ?[*:0]const u8,
    lpsz_group_i_d: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn linePickupA(
    h_line: u32,
    dw_address_i_d: u32,
    lph_call: ?*u32,
    lpsz_dest_address: ?[*:0]const u8,
    lpsz_group_i_d: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn linePickupW(
    h_line: u32,
    dw_address_i_d: u32,
    lph_call: ?*u32,
    lpsz_dest_address: ?[*:0]const u16,
    lpsz_group_i_d: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn linePrepareAddToConference(
    h_conf_call: u32,
    lph_consult_call: ?*u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn linePrepareAddToConferenceA(
    h_conf_call: u32,
    lph_consult_call: ?*u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn linePrepareAddToConferenceW(
    h_conf_call: u32,
    lph_consult_call: ?*u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineProxyMessage(
    h_line: u32,
    h_call: u32,
    dw_msg: u32,
    dw_param1: u32,
    dw_param2: u32,
    dw_param3: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineProxyResponse(
    h_line: u32,
    lp_proxy_request: ?*LINEPROXYREQUEST,
    dw_result: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineRedirect(
    h_call: u32,
    lpsz_dest_address: ?[*:0]const u8,
    dw_country_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineRedirectA(
    h_call: u32,
    lpsz_dest_address: ?[*:0]const u8,
    dw_country_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineRedirectW(
    h_call: u32,
    lpsz_dest_address: ?[*:0]const u16,
    dw_country_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineRegisterRequestRecipient(
    h_line_app: u32,
    dw_registration_instance: u32,
    dw_request_mode: u32,
    b_enable: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineReleaseUserUserInfo(
    h_call: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineRemoveFromConference(
    h_call: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineRemoveProvider(
    dw_permanent_provider_i_d: u32,
    hwnd_owner: ?HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSecureCall(
    h_call: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSendUserUserInfo(
    h_call: u32,
    lps_user_user_info: ?[*:0]const u8,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAgentActivity(
    h_line: u32,
    dw_address_i_d: u32,
    dw_activity_i_d: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAgentGroup(
    h_line: u32,
    dw_address_i_d: u32,
    lp_agent_group_list: ?*LINEAGENTGROUPLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAgentMeasurementPeriod(
    h_line: u32,
    h_agent: u32,
    dw_measurement_period: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAgentSessionState(
    h_line: u32,
    h_agent_session: u32,
    dw_agent_session_state: u32,
    dw_next_agent_session_state: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAgentStateEx(
    h_line: u32,
    h_agent: u32,
    dw_agent_state: u32,
    dw_next_agent_state: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAgentState(
    h_line: u32,
    dw_address_i_d: u32,
    dw_agent_state: u32,
    dw_next_agent_state: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAppPriority(
    lpsz_app_filename: ?[*:0]const u8,
    dw_media_mode: u32,
    lp_extension_i_d: ?*LINEEXTENSIONID,
    dw_request_mode: u32,
    lpsz_extension_name: ?[*:0]const u8,
    dw_priority: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAppPriorityA(
    lpsz_app_filename: ?[*:0]const u8,
    dw_media_mode: u32,
    lp_extension_i_d: ?*LINEEXTENSIONID,
    dw_request_mode: u32,
    lpsz_extension_name: ?[*:0]const u8,
    dw_priority: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAppPriorityW(
    lpsz_app_filename: ?[*:0]const u16,
    dw_media_mode: u32,
    lp_extension_i_d: ?*LINEEXTENSIONID,
    dw_request_mode: u32,
    lpsz_extension_name: ?[*:0]const u16,
    dw_priority: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetAppSpecific(
    h_call: u32,
    dw_app_specific: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetCallData(
    h_call: u32,
    lp_call_data: ?*anyopaque,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetCallParams(
    h_call: u32,
    dw_bearer_mode: u32,
    dw_min_rate: u32,
    dw_max_rate: u32,
    lp_dial_params: ?*const LINEDIALPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetCallPrivilege(
    h_call: u32,
    dw_call_privilege: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetCallQualityOfService(
    h_call: u32,
    lp_sending_flowspec: ?*anyopaque,
    dw_sending_flowspec_size: u32,
    lp_receiving_flowspec: ?*anyopaque,
    dw_receiving_flowspec_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetCallTreatment(
    h_call: u32,
    dw_treatment: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetCurrentLocation(
    h_line_app: u32,
    dw_location: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetDevConfig(
    dw_device_i_d: u32,
    lp_device_config: ?*const anyopaque,
    dw_size: u32,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetDevConfigA(
    dw_device_i_d: u32,
    lp_device_config: ?*const anyopaque,
    dw_size: u32,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetDevConfigW(
    dw_device_i_d: u32,
    lp_device_config: ?*const anyopaque,
    dw_size: u32,
    lpsz_device_class: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetLineDevStatus(
    h_line: u32,
    dw_status_to_change: u32,
    f_status: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetMediaControl(
    h_line: u32,
    dw_address_i_d: u32,
    h_call: u32,
    dw_select: u32,
    lp_digit_list: ?*const LINEMEDIACONTROLDIGIT,
    dw_digit_num_entries: u32,
    lp_media_list: ?*const LINEMEDIACONTROLMEDIA,
    dw_media_num_entries: u32,
    lp_tone_list: ?*const LINEMEDIACONTROLTONE,
    dw_tone_num_entries: u32,
    lp_call_state_list: ?*const LINEMEDIACONTROLCALLSTATE,
    dw_call_state_num_entries: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetMediaMode(
    h_call: u32,
    dw_media_modes: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetQueueMeasurementPeriod(
    h_line: u32,
    dw_queue_i_d: u32,
    dw_measurement_period: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetNumRings(
    h_line: u32,
    dw_address_i_d: u32,
    dw_num_rings: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetStatusMessages(
    h_line: u32,
    dw_line_states: u32,
    dw_address_states: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetTerminal(
    h_line: u32,
    dw_address_i_d: u32,
    h_call: u32,
    dw_select: u32,
    dw_terminal_modes: u32,
    dw_terminal_i_d: u32,
    b_enable: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetTollList(
    h_line_app: u32,
    dw_device_i_d: u32,
    lpsz_address_in: ?[*:0]const u8,
    dw_toll_list_option: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetTollListA(
    h_line_app: u32,
    dw_device_i_d: u32,
    lpsz_address_in: ?[*:0]const u8,
    dw_toll_list_option: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetTollListW(
    h_line_app: u32,
    dw_device_i_d: u32,
    lpsz_address_in_w: ?[*:0]const u16,
    dw_toll_list_option: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetupConference(
    h_call: u32,
    h_line: u32,
    lph_conf_call: ?*u32,
    lph_consult_call: ?*u32,
    dw_num_parties: u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetupConferenceA(
    h_call: u32,
    h_line: u32,
    lph_conf_call: ?*u32,
    lph_consult_call: ?*u32,
    dw_num_parties: u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetupConferenceW(
    h_call: u32,
    h_line: u32,
    lph_conf_call: ?*u32,
    lph_consult_call: ?*u32,
    dw_num_parties: u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetupTransfer(
    h_call: u32,
    lph_consult_call: ?*u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetupTransferA(
    h_call: u32,
    lph_consult_call: ?*u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSetupTransferW(
    h_call: u32,
    lph_consult_call: ?*u32,
    lp_call_params: ?*const LINECALLPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineShutdown(
    h_line_app: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineSwapHold(
    h_active_call: u32,
    h_held_call: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineTranslateAddress(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    lpsz_address_in: ?[*:0]const u8,
    dw_card: u32,
    dw_translate_options: u32,
    lp_translate_output: ?*LINETRANSLATEOUTPUT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineTranslateAddressA(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    lpsz_address_in: ?[*:0]const u8,
    dw_card: u32,
    dw_translate_options: u32,
    lp_translate_output: ?*LINETRANSLATEOUTPUT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineTranslateAddressW(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    lpsz_address_in: ?[*:0]const u16,
    dw_card: u32,
    dw_translate_options: u32,
    lp_translate_output: ?*LINETRANSLATEOUTPUT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineTranslateDialog(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    hwnd_owner: ?HWND,
    lpsz_address_in: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineTranslateDialogA(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    hwnd_owner: ?HWND,
    lpsz_address_in: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineTranslateDialogW(
    h_line_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    hwnd_owner: ?HWND,
    lpsz_address_in: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineUncompleteCall(
    h_line: u32,
    dw_completion_i_d: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineUnhold(
    h_call: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineUnpark(
    h_line: u32,
    dw_address_i_d: u32,
    lph_call: ?*u32,
    lpsz_dest_address: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineUnparkA(
    h_line: u32,
    dw_address_i_d: u32,
    lph_call: ?*u32,
    lpsz_dest_address: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn lineUnparkW(
    h_line: u32,
    dw_address_i_d: u32,
    lph_call: ?*u32,
    lpsz_dest_address: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneClose(
    h_phone: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneConfigDialog(
    dw_device_i_d: u32,
    hwnd_owner: ?HWND,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneConfigDialogA(
    dw_device_i_d: u32,
    hwnd_owner: ?HWND,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneConfigDialogW(
    dw_device_i_d: u32,
    hwnd_owner: ?HWND,
    lpsz_device_class: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneDevSpecific(
    h_phone: u32,
    lp_params: ?*anyopaque,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetButtonInfo(
    h_phone: u32,
    dw_button_lamp_i_d: u32,
    lp_button_info: ?*PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetButtonInfoA(
    h_phone: u32,
    dw_button_lamp_i_d: u32,
    lp_button_info: ?*PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetButtonInfoW(
    h_phone: u32,
    dw_button_lamp_i_d: u32,
    lp_button_info: ?*PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetData(
    h_phone: u32,
    dw_data_i_d: u32,
    lp_data: ?*anyopaque,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetDevCaps(
    h_phone_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    lp_phone_caps: ?*PHONECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetDevCapsA(
    h_phone_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    lp_phone_caps: ?*PHONECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetDevCapsW(
    h_phone_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    lp_phone_caps: ?*PHONECAPS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetDisplay(
    h_phone: u32,
    lp_display: ?*VARSTRING,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetGain(
    h_phone: u32,
    dw_hook_switch_dev: u32,
    lpdw_gain: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetHookSwitch(
    h_phone: u32,
    lpdw_hook_switch_devs: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetIcon(
    dw_device_i_d: u32,
    lpsz_device_class: ?[*:0]const u8,
    lph_icon: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetIconA(
    dw_device_i_d: u32,
    lpsz_device_class: ?[*:0]const u8,
    lph_icon: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetIconW(
    dw_device_i_d: u32,
    lpsz_device_class: ?[*:0]const u16,
    lph_icon: ?*isize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetID(
    h_phone: u32,
    lp_device_i_d: ?*VARSTRING,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetIDA(
    h_phone: u32,
    lp_device_i_d: ?*VARSTRING,
    lpsz_device_class: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetIDW(
    h_phone: u32,
    lp_device_i_d: ?*VARSTRING,
    lpsz_device_class: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetLamp(
    h_phone: u32,
    dw_button_lamp_i_d: u32,
    lpdw_lamp_mode: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetMessage(
    h_phone_app: u32,
    lp_message: ?*PHONEMESSAGE,
    dw_timeout: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetRing(
    h_phone: u32,
    lpdw_ring_mode: ?*u32,
    lpdw_volume: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetStatus(
    h_phone: u32,
    lp_phone_status: ?*PHONESTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetStatusA(
    h_phone: u32,
    lp_phone_status: ?*PHONESTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetStatusW(
    h_phone: u32,
    lp_phone_status: ?*PHONESTATUS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetStatusMessages(
    h_phone: u32,
    lpdw_phone_states: ?*u32,
    lpdw_button_modes: ?*u32,
    lpdw_button_states: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneGetVolume(
    h_phone: u32,
    dw_hook_switch_dev: u32,
    lpdw_volume: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneInitialize(
    lph_phone_app: ?*u32,
    h_instance: ?HINSTANCE,
    lpfn_callback: ?PHONECALLBACK,
    lpsz_app_name: ?[*:0]const u8,
    lpdw_num_devs: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneInitializeExA(
    lph_phone_app: ?*u32,
    h_instance: ?HINSTANCE,
    lpfn_callback: ?PHONECALLBACK,
    lpsz_friendly_app_name: ?[*:0]const u8,
    lpdw_num_devs: ?*u32,
    lpdw_a_p_i_version: ?*u32,
    lp_phone_initialize_ex_params: ?*PHONEINITIALIZEEXPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneInitializeExW(
    lph_phone_app: ?*u32,
    h_instance: ?HINSTANCE,
    lpfn_callback: ?PHONECALLBACK,
    lpsz_friendly_app_name: ?[*:0]const u16,
    lpdw_num_devs: ?*u32,
    lpdw_a_p_i_version: ?*u32,
    lp_phone_initialize_ex_params: ?*PHONEINITIALIZEEXPARAMS,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneNegotiateAPIVersion(
    h_phone_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_low_version: u32,
    dw_a_p_i_high_version: u32,
    lpdw_a_p_i_version: ?*u32,
    lp_extension_i_d: ?*PHONEEXTENSIONID,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneNegotiateExtVersion(
    h_phone_app: u32,
    dw_device_i_d: u32,
    dw_a_p_i_version: u32,
    dw_ext_low_version: u32,
    dw_ext_high_version: u32,
    lpdw_ext_version: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneOpen(
    h_phone_app: u32,
    dw_device_i_d: u32,
    lph_phone: ?*u32,
    dw_a_p_i_version: u32,
    dw_ext_version: u32,
    dw_callback_instance: usize,
    dw_privilege: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetButtonInfo(
    h_phone: u32,
    dw_button_lamp_i_d: u32,
    lp_button_info: ?*const PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetButtonInfoA(
    h_phone: u32,
    dw_button_lamp_i_d: u32,
    lp_button_info: ?*const PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetButtonInfoW(
    h_phone: u32,
    dw_button_lamp_i_d: u32,
    lp_button_info: ?*const PHONEBUTTONINFO,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetData(
    h_phone: u32,
    dw_data_i_d: u32,
    lp_data: ?*const anyopaque,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetDisplay(
    h_phone: u32,
    dw_row: u32,
    dw_column: u32,
    lps_display: ?[*:0]const u8,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetGain(
    h_phone: u32,
    dw_hook_switch_dev: u32,
    dw_gain: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetHookSwitch(
    h_phone: u32,
    dw_hook_switch_devs: u32,
    dw_hook_switch_mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetLamp(
    h_phone: u32,
    dw_button_lamp_i_d: u32,
    dw_lamp_mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetRing(
    h_phone: u32,
    dw_ring_mode: u32,
    dw_volume: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetStatusMessages(
    h_phone: u32,
    dw_phone_states: u32,
    dw_button_modes: u32,
    dw_button_states: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneSetVolume(
    h_phone: u32,
    dw_hook_switch_dev: u32,
    dw_volume: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn phoneShutdown(
    h_phone_app: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiGetLocationInfo(
    lpsz_country_code: *[8]u8,
    lpsz_city_code: *[8]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiGetLocationInfoA(
    lpsz_country_code: *[8]u8,
    lpsz_city_code: *[8]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiGetLocationInfoW(
    lpsz_country_code_w: *[8]u16,
    lpsz_city_code_w: *[8]u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiRequestDrop(
    hwnd: ?HWND,
    w_request_i_d: WPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiRequestMakeCall(
    lpsz_dest_address: ?[*:0]const u8,
    lpsz_app_name: ?[*:0]const u8,
    lpsz_called_party: ?[*:0]const u8,
    lpsz_comment: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiRequestMakeCallA(
    lpsz_dest_address: ?[*:0]const u8,
    lpsz_app_name: ?[*:0]const u8,
    lpsz_called_party: ?[*:0]const u8,
    lpsz_comment: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiRequestMakeCallW(
    lpsz_dest_address: ?[*:0]const u16,
    lpsz_app_name: ?[*:0]const u16,
    lpsz_called_party: ?[*:0]const u16,
    lpsz_comment: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiRequestMediaCall(
    hwnd: ?HWND,
    w_request_i_d: WPARAM,
    lpsz_device_class: ?[*:0]const u8,
    lp_device_i_d: ?[*:0]const u8,
    dw_size: u32,
    dw_secure: u32,
    lpsz_dest_address: ?[*:0]const u8,
    lpsz_app_name: ?[*:0]const u8,
    lpsz_called_party: ?[*:0]const u8,
    lpsz_comment: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiRequestMediaCallA(
    hwnd: ?HWND,
    w_request_i_d: WPARAM,
    lpsz_device_class: ?[*:0]const u8,
    lp_device_i_d: ?[*:0]const u8,
    dw_size: u32,
    dw_secure: u32,
    lpsz_dest_address: ?[*:0]const u8,
    lpsz_app_name: ?[*:0]const u8,
    lpsz_called_party: ?[*:0]const u8,
    lpsz_comment: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "tapi32" fn tapiRequestMediaCallW(
    hwnd: ?HWND,
    w_request_i_d: WPARAM,
    lpsz_device_class: ?[*:0]const u16,
    lp_device_i_d: ?[*:0]const u16,
    dw_size: u32,
    dw_secure: u32,
    lpsz_dest_address: ?[*:0]const u16,
    lpsz_app_name: ?[*:0]const u16,
    lpsz_called_party: ?[*:0]const u16,
    lpsz_comment: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "mapi32" fn OpenTnefStream(
    lpv_support: ?*anyopaque,
    lp_stream: ?*IStream,
    lpsz_stream_name: ?*i8,
    ul_flags: u32,
    lp_message: ?*IMessage,
    w_key_val: u16,
    lpp_t_n_e_f: ?*?*ITnef,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mapi32" fn OpenTnefStreamEx(
    lpv_support: ?*anyopaque,
    lp_stream: ?*IStream,
    lpsz_stream_name: ?*i8,
    ul_flags: u32,
    lp_message: ?*IMessage,
    w_key_val: u16,
    lp_adress_book: ?*IAddrBook,
    lpp_t_n_e_f: ?*?*ITnef,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mapi32" fn GetTnefStreamCodepage(
    lp_stream: ?*IStream,
    lpul_codepage: ?*u32,
    lpul_sub_codepage: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (10)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const lineCreateAgent = thismodule.lineCreateAgentA;
        pub const lineCreateAgentSession = thismodule.lineCreateAgentSessionA;
        pub const lineGetAgentActivityList = thismodule.lineGetAgentActivityListA;
        pub const lineGetAgentCaps = thismodule.lineGetAgentCapsA;
        pub const lineGetAgentGroupList = thismodule.lineGetAgentGroupListA;
        pub const lineGetAgentStatus = thismodule.lineGetAgentStatusA;
        pub const lineGetGroupList = thismodule.lineGetGroupListA;
        pub const lineGetQueueList = thismodule.lineGetQueueListA;
        pub const lineInitializeEx = thismodule.lineInitializeExA;
        pub const phoneInitializeEx = thismodule.phoneInitializeExA;
    },
    .wide => struct {
        pub const lineCreateAgent = thismodule.lineCreateAgentW;
        pub const lineCreateAgentSession = thismodule.lineCreateAgentSessionW;
        pub const lineGetAgentActivityList = thismodule.lineGetAgentActivityListW;
        pub const lineGetAgentCaps = thismodule.lineGetAgentCapsW;
        pub const lineGetAgentGroupList = thismodule.lineGetAgentGroupListW;
        pub const lineGetAgentStatus = thismodule.lineGetAgentStatusW;
        pub const lineGetGroupList = thismodule.lineGetGroupListW;
        pub const lineGetQueueList = thismodule.lineGetQueueListW;
        pub const lineInitializeEx = thismodule.lineInitializeExW;
        pub const phoneInitializeEx = thismodule.phoneInitializeExW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const lineCreateAgent = *opaque {};
        pub const lineCreateAgentSession = *opaque {};
        pub const lineGetAgentActivityList = *opaque {};
        pub const lineGetAgentCaps = *opaque {};
        pub const lineGetAgentGroupList = *opaque {};
        pub const lineGetAgentStatus = *opaque {};
        pub const lineGetGroupList = *opaque {};
        pub const lineGetQueueList = *opaque {};
        pub const lineInitializeEx = *opaque {};
        pub const phoneInitializeEx = *opaque {};
    } else struct {
        pub const lineCreateAgent = @compileError("'lineCreateAgent' requires that UNICODE be set to true or false in the root module");
        pub const lineCreateAgentSession = @compileError("'lineCreateAgentSession' requires that UNICODE be set to true or false in the root module");
        pub const lineGetAgentActivityList = @compileError("'lineGetAgentActivityList' requires that UNICODE be set to true or false in the root module");
        pub const lineGetAgentCaps = @compileError("'lineGetAgentCaps' requires that UNICODE be set to true or false in the root module");
        pub const lineGetAgentGroupList = @compileError("'lineGetAgentGroupList' requires that UNICODE be set to true or false in the root module");
        pub const lineGetAgentStatus = @compileError("'lineGetAgentStatus' requires that UNICODE be set to true or false in the root module");
        pub const lineGetGroupList = @compileError("'lineGetGroupList' requires that UNICODE be set to true or false in the root module");
        pub const lineGetQueueList = @compileError("'lineGetQueueList' requires that UNICODE be set to true or false in the root module");
        pub const lineInitializeEx = @compileError("'lineInitializeEx' requires that UNICODE be set to true or false in the root module");
        pub const phoneInitializeEx = @compileError("'phoneInitializeEx' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (25)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const ALLOCATOR_PROPERTIES = @import("../media/direct_show.zig").ALLOCATOR_PROPERTIES;
const AM_MEDIA_TYPE = @import("../media/direct_show.zig").AM_MEDIA_TYPE;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const CHAR = @import("../foundation.zig").CHAR;
const CY = @import("../system/com.zig").CY;
const HANDLE = @import("../foundation.zig").HANDLE;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IAddrBook = @import("../system/address_book.zig").IAddrBook;
const IDispatch = @import("../system/com.zig").IDispatch;
const IEnumUnknown = @import("../system/com.zig").IEnumUnknown;
const IMAPITable = @import("../system/address_book.zig").IMAPITable;
const IMessage = @import("../system/address_book.zig").IMessage;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SPropTagArray = @import("../system/address_book.zig").SPropTagArray;
const SPropValue = @import("../system/address_book.zig").SPropValue;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "LINECALLBACK")) {
        _ = LINECALLBACK;
    }
    if (@hasDecl(@This(), "PHONECALLBACK")) {
        _ = PHONECALLBACK;
    }
    if (@hasDecl(@This(), "ASYNC_COMPLETION")) {
        _ = ASYNC_COMPLETION;
    }
    if (@hasDecl(@This(), "LINEEVENT")) {
        _ = LINEEVENT;
    }
    if (@hasDecl(@This(), "PHONEEVENT")) {
        _ = PHONEEVENT;
    }
    if (@hasDecl(@This(), "TUISPIDLLCALLBACK")) {
        _ = TUISPIDLLCALLBACK;
    }
    if (@hasDecl(@This(), "LPOPENTNEFSTREAM")) {
        _ = LPOPENTNEFSTREAM;
    }
    if (@hasDecl(@This(), "LPOPENTNEFSTREAMEX")) {
        _ = LPOPENTNEFSTREAMEX;
    }
    if (@hasDecl(@This(), "LPGETTNEFSTREAMCODEPAGE")) {
        _ = LPGETTNEFSTREAMCODEPAGE;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
