//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (67)
//--------------------------------------------------------------------------------
pub const DRMHANDLE_INVALID = @as(u32, 0);
pub const DRMENVHANDLE_INVALID = @as(u32, 0);
pub const DRMQUERYHANDLE_INVALID = @as(u32, 0);
pub const DRMHSESSION_INVALID = @as(u32, 0);
pub const DRMPUBHANDLE_INVALID = @as(u32, 0);
pub const DRM_AL_NONSILENT = @as(u32, 1);
pub const DRM_AL_NOPERSIST = @as(u32, 2);
pub const DRM_AL_CANCEL = @as(u32, 4);
pub const DRM_AL_FETCHNOADVISORY = @as(u32, 8);
pub const DRM_AL_NOUI = @as(u32, 16);
pub const DRM_ACTIVATE_MACHINE = @as(u32, 1);
pub const DRM_ACTIVATE_GROUPIDENTITY = @as(u32, 2);
pub const DRM_ACTIVATE_TEMPORARY = @as(u32, 4);
pub const DRM_ACTIVATE_CANCEL = @as(u32, 8);
pub const DRM_ACTIVATE_SILENT = @as(u32, 16);
pub const DRM_ACTIVATE_SHARED_GROUPIDENTITY = @as(u32, 32);
pub const DRM_ACTIVATE_DELAYED = @as(u32, 64);
pub const DRM_EL_MACHINE = @as(u32, 1);
pub const DRM_EL_GROUPIDENTITY = @as(u32, 2);
pub const DRM_EL_GROUPIDENTITY_NAME = @as(u32, 4);
pub const DRM_EL_GROUPIDENTITY_LID = @as(u32, 8);
pub const DRM_EL_SPECIFIED_GROUPIDENTITY = @as(u32, 16);
pub const DRM_EL_EUL = @as(u32, 32);
pub const DRM_EL_EUL_LID = @as(u32, 64);
pub const DRM_EL_CLIENTLICENSOR = @as(u32, 128);
pub const DRM_EL_CLIENTLICENSOR_LID = @as(u32, 256);
pub const DRM_EL_SPECIFIED_CLIENTLICENSOR = @as(u32, 512);
pub const DRM_EL_REVOCATIONLIST = @as(u32, 1024);
pub const DRM_EL_REVOCATIONLIST_LID = @as(u32, 2048);
pub const DRM_EL_EXPIRED = @as(u32, 4096);
pub const DRM_EL_ISSUERNAME = @as(u32, 8192);
pub const DRM_EL_ISSUANCELICENSE_TEMPLATE = @as(u32, 16384);
pub const DRM_EL_ISSUANCELICENSE_TEMPLATE_LID = @as(u32, 32768);
pub const DRM_ADD_LICENSE_NOPERSIST = @as(u32, 0);
pub const DRM_ADD_LICENSE_PERSIST = @as(u32, 1);
pub const DRM_SERVICE_TYPE_ACTIVATION = @as(u32, 1);
pub const DRM_SERVICE_TYPE_CERTIFICATION = @as(u32, 2);
pub const DRM_SERVICE_TYPE_PUBLISHING = @as(u32, 4);
pub const DRM_SERVICE_TYPE_CLIENTLICENSOR = @as(u32, 8);
pub const DRM_SERVICE_TYPE_SILENT = @as(u32, 16);
pub const DRM_SERVICE_LOCATION_INTERNET = @as(u32, 1);
pub const DRM_SERVICE_LOCATION_ENTERPRISE = @as(u32, 2);
pub const DRM_DEFAULTGROUPIDTYPE_WINDOWSAUTH = "WindowsAuthProvider";
pub const DRM_DEFAULTGROUPIDTYPE_PASSPORT = "PassportAuthProvider";
pub const DRM_SIGN_ONLINE = @as(u32, 1);
pub const DRM_SIGN_OFFLINE = @as(u32, 2);
pub const DRM_SIGN_CANCEL = @as(u32, 4);
pub const DRM_SERVER_ISSUANCELICENSE = @as(u32, 8);
pub const DRM_AUTO_GENERATE_KEY = @as(u32, 16);
pub const DRM_OWNER_LICENSE_NOPERSIST = @as(u32, 32);
pub const DRM_REUSE_KEY = @as(u32, 64);
pub const DRM_LOCKBOXTYPE_NONE = @as(u32, 0);
pub const DRM_LOCKBOXTYPE_WHITEBOX = @as(u32, 1);
pub const DRM_LOCKBOXTYPE_BLACKBOX = @as(u32, 2);
pub const DRM_LOCKBOXTYPE_DEFAULT = @as(u32, 2);
pub const DRM_AILT_NONSILENT = @as(u32, 1);
pub const DRM_AILT_OBTAIN_ALL = @as(u32, 2);
pub const DRM_AILT_CANCEL = @as(u32, 4);
pub const MSDRM_CLIENT_ZONE = @as(u32, 52992);
pub const MSDRM_POLICY_ZONE = @as(u32, 37632);
pub const DRMIDVERSION = @as(u32, 0);
pub const DRMBOUNDLICENSEPARAMSVERSION = @as(u32, 1);
pub const DRMBINDINGFLAGS_IGNORE_VALIDITY_INTERVALS = @as(u32, 1);
pub const DRMLICENSEACQDATAVERSION = @as(u32, 0);
pub const DRMACTSERVINFOVERSION = @as(u32, 0);
pub const DRMCLIENTSTRUCTVERSION = @as(u32, 1);
pub const DRMCALLBACKVERSION = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (15)
//--------------------------------------------------------------------------------
pub const DRMID = extern struct {
    uVersion: u32,
    wszIDType: ?PWSTR,
    wszID: ?PWSTR,
};

pub const DRMTIMETYPE = enum(i32) {
    UTC = 0,
    LOCAL = 1,
};
pub const DRMTIMETYPE_SYSTEMUTC = DRMTIMETYPE.UTC;
pub const DRMTIMETYPE_SYSTEMLOCAL = DRMTIMETYPE.LOCAL;

pub const DRMENCODINGTYPE = enum(i32) {
    BASE64 = 0,
    STRING = 1,
    LONG = 2,
    TIME = 3,
    UINT = 4,
    RAW = 5,
};
pub const DRMENCODINGTYPE_BASE64 = DRMENCODINGTYPE.BASE64;
pub const DRMENCODINGTYPE_STRING = DRMENCODINGTYPE.STRING;
pub const DRMENCODINGTYPE_LONG = DRMENCODINGTYPE.LONG;
pub const DRMENCODINGTYPE_TIME = DRMENCODINGTYPE.TIME;
pub const DRMENCODINGTYPE_UINT = DRMENCODINGTYPE.UINT;
pub const DRMENCODINGTYPE_RAW = DRMENCODINGTYPE.RAW;

pub const DRMATTESTTYPE = enum(i32) {
    FULLENVIRONMENT = 0,
    HASHONLY = 1,
};
pub const DRMATTESTTYPE_FULLENVIRONMENT = DRMATTESTTYPE.FULLENVIRONMENT;
pub const DRMATTESTTYPE_HASHONLY = DRMATTESTTYPE.HASHONLY;

pub const DRMSPECTYPE = enum(i32) {
    UNKNOWN = 0,
    FILENAME = 1,
};
pub const DRMSPECTYPE_UNKNOWN = DRMSPECTYPE.UNKNOWN;
pub const DRMSPECTYPE_FILENAME = DRMSPECTYPE.FILENAME;

pub const DRMSECURITYPROVIDERTYPE = enum(i32) {
    P = 0,
};
pub const DRMSECURITYPROVIDERTYPE_SOFTWARESECREP = DRMSECURITYPROVIDERTYPE.P;

pub const DRMGLOBALOPTIONS = enum(i32) {
    WINHTTP = 0,
    SERVERSECURITYPROCESSOR = 1,
};
pub const DRMGLOBALOPTIONS_USE_WINHTTP = DRMGLOBALOPTIONS.WINHTTP;
pub const DRMGLOBALOPTIONS_USE_SERVERSECURITYPROCESSOR = DRMGLOBALOPTIONS.SERVERSECURITYPROCESSOR;

pub const DRMBOUNDLICENSEPARAMS = extern struct {
    uVersion: u32,
    hEnablingPrincipal: u32,
    hSecureStore: u32,
    wszRightsRequested: ?PWSTR,
    wszRightsGroup: ?PWSTR,
    idResource: DRMID,
    cAuthenticatorCount: u32,
    rghAuthenticators: ?*u32,
    wszDefaultEnablingPrincipalCredentials: ?PWSTR,
    dwFlags: u32,
};

pub const DRM_LICENSE_ACQ_DATA = extern struct {
    uVersion: u32,
    wszURL: ?PWSTR,
    wszLocalFilename: ?PWSTR,
    pbPostData: ?*u8,
    dwPostDataSize: u32,
    wszFriendlyName: ?PWSTR,
};

pub const DRM_ACTSERV_INFO = extern struct {
    uVersion: u32,
    wszPubKey: ?PWSTR,
    wszURL: ?PWSTR,
};

pub const DRM_CLIENT_VERSION_INFO = extern struct {
    uStructVersion: u32,
    dwVersion: [4]u32,
    wszHierarchy: [256]u16,
    wszProductId: [256]u16,
    wszProductDescription: [256]u16,
};

pub const DRM_STATUS_MSG = enum(i32) {
    ACTIVATE_MACHINE = 0,
    ACTIVATE_GROUPIDENTITY = 1,
    ACQUIRE_LICENSE = 2,
    ACQUIRE_ADVISORY = 3,
    SIGN_ISSUANCE_LICENSE = 4,
    ACQUIRE_CLIENTLICENSOR = 5,
    ACQUIRE_ISSUANCE_LICENSE_TEMPLATE = 6,
};
pub const DRM_MSG_ACTIVATE_MACHINE = DRM_STATUS_MSG.ACTIVATE_MACHINE;
pub const DRM_MSG_ACTIVATE_GROUPIDENTITY = DRM_STATUS_MSG.ACTIVATE_GROUPIDENTITY;
pub const DRM_MSG_ACQUIRE_LICENSE = DRM_STATUS_MSG.ACQUIRE_LICENSE;
pub const DRM_MSG_ACQUIRE_ADVISORY = DRM_STATUS_MSG.ACQUIRE_ADVISORY;
pub const DRM_MSG_SIGN_ISSUANCE_LICENSE = DRM_STATUS_MSG.SIGN_ISSUANCE_LICENSE;
pub const DRM_MSG_ACQUIRE_CLIENTLICENSOR = DRM_STATUS_MSG.ACQUIRE_CLIENTLICENSOR;
pub const DRM_MSG_ACQUIRE_ISSUANCE_LICENSE_TEMPLATE = DRM_STATUS_MSG.ACQUIRE_ISSUANCE_LICENSE_TEMPLATE;

pub const DRM_USAGEPOLICY_TYPE = enum(i32) {
    BYNAME = 0,
    BYPUBLICKEY = 1,
    BYDIGEST = 2,
    OSEXCLUSION = 3,
};
pub const DRM_USAGEPOLICY_TYPE_BYNAME = DRM_USAGEPOLICY_TYPE.BYNAME;
pub const DRM_USAGEPOLICY_TYPE_BYPUBLICKEY = DRM_USAGEPOLICY_TYPE.BYPUBLICKEY;
pub const DRM_USAGEPOLICY_TYPE_BYDIGEST = DRM_USAGEPOLICY_TYPE.BYDIGEST;
pub const DRM_USAGEPOLICY_TYPE_OSEXCLUSION = DRM_USAGEPOLICY_TYPE.OSEXCLUSION;

pub const DRM_DISTRIBUTION_POINT_INFO = enum(i32) {
    LICENSE_ACQUISITION = 0,
    PUBLISHING = 1,
    REFERRAL_INFO = 2,
};
pub const DRM_DISTRIBUTION_POINT_LICENSE_ACQUISITION = DRM_DISTRIBUTION_POINT_INFO.LICENSE_ACQUISITION;
pub const DRM_DISTRIBUTION_POINT_PUBLISHING = DRM_DISTRIBUTION_POINT_INFO.PUBLISHING;
pub const DRM_DISTRIBUTION_POINT_REFERRAL_INFO = DRM_DISTRIBUTION_POINT_INFO.REFERRAL_INFO;

pub const DRMCALLBACK = *const fn (
    param0: DRM_STATUS_MSG,
    param1: HRESULT,
    param2: ?*anyopaque,
    param3: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Functions (84)
//--------------------------------------------------------------------------------
pub extern "msdrm" fn DRMSetGlobalOptions(
    e_global_options: DRMGLOBALOPTIONS,
    pvdata: ?*anyopaque,
    dwlen: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetClientVersion(
    p_d_r_m_client_version_info: ?*DRM_CLIENT_VERSION_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMInitEnvironment(
    e_security_provider_type: DRMSECURITYPROVIDERTYPE,
    e_specification: DRMSPECTYPE,
    wsz_security_provider: ?PWSTR,
    wsz_manifest_credentials: ?PWSTR,
    wsz_machine_credentials: ?PWSTR,
    ph_env: ?*u32,
    ph_default_library: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMLoadLibrary(
    h_env: u32,
    e_specification: DRMSPECTYPE,
    wsz_library_provider: ?PWSTR,
    wsz_credentials: ?PWSTR,
    ph_library: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCreateEnablingPrincipal(
    h_env: u32,
    h_library: u32,
    wsz_object: ?PWSTR,
    pid_principal: ?*DRMID,
    wsz_credentials: ?PWSTR,
    ph_enabling_principal: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCloseHandle(
    handle: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCloseEnvironmentHandle(
    h_env: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMDuplicateHandle(
    h_to_copy: u32,
    ph_copy: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMDuplicateEnvironmentHandle(
    h_to_copy: u32,
    ph_copy: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMRegisterRevocationList(
    h_env: u32,
    wsz_revocation_list: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCheckSecurity(
    h_env: u32,
    c_level: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMRegisterContent(
    f_register: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMEncrypt(
    h_crypto_provider: u32,
    i_position: u32,
    c_num_in_bytes: u32,
    pb_in_data: ?*u8,
    pc_num_out_bytes: ?*u32,
    pb_out_data: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMDecrypt(
    h_crypto_provider: u32,
    i_position: u32,
    c_num_in_bytes: u32,
    pb_in_data: ?*u8,
    pc_num_out_bytes: ?*u32,
    pb_out_data: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCreateBoundLicense(
    h_env: u32,
    p_params: ?*DRMBOUNDLICENSEPARAMS,
    wsz_license_chain: ?PWSTR,
    ph_bound_license: ?*u32,
    ph_error_log: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCreateEnablingBitsDecryptor(
    h_bound_license: u32,
    wsz_right: ?PWSTR,
    h_aux_lib: u32,
    wsz_aux_plug: ?PWSTR,
    ph_decryptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCreateEnablingBitsEncryptor(
    h_bound_license: u32,
    wsz_right: ?PWSTR,
    h_aux_lib: u32,
    wsz_aux_plug: ?PWSTR,
    ph_encryptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMAttest(
    h_enabling_principal: u32,
    wsz_data: ?PWSTR,
    e_type: DRMATTESTTYPE,
    pc_attested_blob: ?*u32,
    wsz_attested_blob: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetTime(
    h_env: u32,
    e_timer_id_type: DRMTIMETYPE,
    po_time_object: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetInfo(
    handle: u32,
    wsz_attribute: ?PWSTR,
    pe_encoding: ?*DRMENCODINGTYPE,
    pc_buffer: ?*u32,
    pb_buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetEnvironmentInfo(
    handle: u32,
    wsz_attribute: ?PWSTR,
    pe_encoding: ?*DRMENCODINGTYPE,
    pc_buffer: ?*u32,
    pb_buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetProcAddress(
    h_library: u32,
    wsz_proc_name: ?PWSTR,
    ppfn_proc_address: ?*?FARPROC,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetBoundLicenseObjectCount(
    h_query_root: u32,
    wsz_sub_object_type: ?PWSTR,
    pc_sub_objects: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetBoundLicenseObject(
    h_query_root: u32,
    wsz_sub_object_type: ?PWSTR,
    i_which: u32,
    ph_sub_object: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetBoundLicenseAttributeCount(
    h_query_root: u32,
    wsz_attribute: ?PWSTR,
    pc_attributes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetBoundLicenseAttribute(
    h_query_root: u32,
    wsz_attribute: ?PWSTR,
    i_which: u32,
    pe_encoding: ?*DRMENCODINGTYPE,
    pc_buffer: ?*u32,
    pb_buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCreateClientSession(
    pfn_callback: ?DRMCALLBACK,
    u_callback_version: u32,
    wsz_group_i_d_provider_type: ?PWSTR,
    wsz_group_i_d: ?PWSTR,
    ph_client: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMIsActivated(
    h_client: u32,
    u_flags: u32,
    p_act_serv_info: ?*DRM_ACTSERV_INFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMActivate(
    h_client: u32,
    u_flags: u32,
    u_lang_i_d: u32,
    p_act_serv_info: ?*DRM_ACTSERV_INFO,
    pv_context: ?*anyopaque,
    h_parent_wnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetServiceLocation(
    h_client: u32,
    u_service_type: u32,
    u_service_location: u32,
    wsz_issuance_license: ?PWSTR,
    pu_service_u_r_l_length: ?*u32,
    wsz_service_u_r_l: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCreateLicenseStorageSession(
    h_env: u32,
    h_default_library: u32,
    h_client: u32,
    u_flags: u32,
    wsz_issuance_license: ?PWSTR,
    ph_license_storage: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMAddLicense(
    h_license_storage: u32,
    u_flags: u32,
    wsz_license: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMAcquireAdvisories(
    h_license_storage: u32,
    wsz_license: ?PWSTR,
    wsz_u_r_l: ?PWSTR,
    pv_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMEnumerateLicense(
    h_session: u32,
    u_flags: u32,
    u_index: u32,
    pf_shared_flag: ?*BOOL,
    pu_certificate_data_len: ?*u32,
    wsz_certificate_data: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMAcquireLicense(
    h_session: u32,
    u_flags: u32,
    wsz_group_identity_credential: ?PWSTR,
    wsz_requested_rights: ?PWSTR,
    wsz_custom_data: ?PWSTR,
    wsz_u_r_l: ?PWSTR,
    pv_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMDeleteLicense(
    h_session: u32,
    wsz_license_id: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCloseSession(
    h_session: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMDuplicateSession(
    h_session_in: u32,
    ph_session_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetSecurityProvider(
    u_flags: u32,
    pu_type_len: ?*u32,
    wsz_type: ?[*:0]u16,
    pu_path_len: ?*u32,
    wsz_path: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMEncode(
    wsz_alg_i_d: ?PWSTR,
    u_data_len: u32,
    pb_decoded_data: ?*u8,
    pu_encoded_string_len: ?*u32,
    wsz_encoded_string: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMDecode(
    wsz_alg_i_d: ?PWSTR,
    wsz_encoded_string: ?PWSTR,
    pu_decoded_data_len: ?*u32,
    pb_decoded_data: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMConstructCertificateChain(
    c_certificates: u32,
    rgwsz_certificates: [*]?PWSTR,
    pc_chain: ?*u32,
    wsz_chain: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMParseUnboundLicense(
    wsz_certificate: ?PWSTR,
    ph_query_root: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCloseQueryHandle(
    h_query: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetUnboundLicenseObjectCount(
    h_query_root: u32,
    wsz_sub_object_type: ?PWSTR,
    pc_sub_objects: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetUnboundLicenseObject(
    h_query_root: u32,
    wsz_sub_object_type: ?PWSTR,
    i_index: u32,
    ph_sub_query: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetUnboundLicenseAttributeCount(
    h_query_root: u32,
    wsz_attribute_type: ?PWSTR,
    pc_attributes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetUnboundLicenseAttribute(
    h_query_root: u32,
    wsz_attribute_type: ?PWSTR,
    i_which: u32,
    pe_encoding: ?*DRMENCODINGTYPE,
    pc_buffer: ?*u32,
    pb_buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetCertificateChainCount(
    wsz_chain: ?PWSTR,
    pc_cert_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMDeconstructCertificateChain(
    wsz_chain: ?PWSTR,
    i_which: u32,
    pc_cert: ?*u32,
    wsz_cert: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMVerify(
    wsz_data: ?PWSTR,
    pc_attested_data: ?*u32,
    wsz_attested_data: ?[*:0]u16,
    pe_type: ?*DRMATTESTTYPE,
    pc_principal: ?*u32,
    wsz_principal: ?[*:0]u16,
    pc_manifest: ?*u32,
    wsz_manifest: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCreateUser(
    wsz_user_name: ?PWSTR,
    wsz_user_id: ?PWSTR,
    wsz_user_id_type: ?PWSTR,
    ph_user: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCreateRight(
    wsz_right_name: ?PWSTR,
    pst_from: ?*SYSTEMTIME,
    pst_until: ?*SYSTEMTIME,
    c_extended_info: u32,
    pwsz_extended_info_name: ?[*]?PWSTR,
    pwsz_extended_info_value: ?[*]?PWSTR,
    ph_right: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMCreateIssuanceLicense(
    pst_time_from: ?*SYSTEMTIME,
    pst_time_until: ?*SYSTEMTIME,
    wsz_referral_info_name: ?PWSTR,
    wsz_referral_info_u_r_l: ?PWSTR,
    h_owner: u32,
    wsz_issuance_license: ?PWSTR,
    h_bound_license: u32,
    ph_issuance_license: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMAddRightWithUser(
    h_issuance_license: u32,
    h_right: u32,
    h_user: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMClearAllRights(
    h_issuance_license: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMSetMetaData(
    h_issuance_license: u32,
    wsz_content_id: ?PWSTR,
    wsz_content_id_type: ?PWSTR,
    wsz_s_k_u_id: ?PWSTR,
    wsz_s_k_u_id_type: ?PWSTR,
    wsz_content_type: ?PWSTR,
    wsz_content_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMSetUsagePolicy(
    h_issuance_license: u32,
    e_usage_policy_type: DRM_USAGEPOLICY_TYPE,
    f_delete: BOOL,
    f_exclusion: BOOL,
    wsz_name: ?PWSTR,
    wsz_min_version: ?PWSTR,
    wsz_max_version: ?PWSTR,
    wsz_public_key: ?PWSTR,
    wsz_digest_algorithm: ?PWSTR,
    pb_digest: ?*u8,
    cb_digest: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMSetRevocationPoint(
    h_issuance_license: u32,
    f_delete: BOOL,
    wsz_id: ?PWSTR,
    wsz_id_type: ?PWSTR,
    wsz_u_r_l: ?PWSTR,
    pst_frequency: ?*SYSTEMTIME,
    wsz_name: ?PWSTR,
    wsz_public_key: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMSetApplicationSpecificData(
    h_issuance_license: u32,
    f_delete: BOOL,
    wsz_name: ?PWSTR,
    wsz_value: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMSetNameAndDescription(
    h_issuance_license: u32,
    f_delete: BOOL,
    lcid: u32,
    wsz_name: ?PWSTR,
    wsz_description: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMSetIntervalTime(
    h_issuance_license: u32,
    c_days: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetIssuanceLicenseTemplate(
    h_issuance_license: u32,
    pu_issuance_license_template_length: ?*u32,
    wsz_issuance_license_template: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetSignedIssuanceLicense(
    h_env: u32,
    h_issuance_license: u32,
    u_flags: u32,
    pb_sym_key: ?*u8,
    cb_sym_key: u32,
    wsz_sym_key_type: ?PWSTR,
    wsz_client_licensor_certificate: ?PWSTR,
    pfn_callback: ?DRMCALLBACK,
    wsz_u_r_l: ?PWSTR,
    pv_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "msdrm" fn DRMGetSignedIssuanceLicenseEx(
    h_env: u32,
    h_issuance_license: u32,
    u_flags: u32,
    // TODO: what to do with BytesParamIndex 4?
    pb_sym_key: ?*u8,
    cb_sym_key: u32,
    wsz_sym_key_type: ?PWSTR,
    pv_reserved: ?*anyopaque,
    h_enabling_principal: u32,
    h_bound_license_c_l_c: u32,
    pfn_callback: ?DRMCALLBACK,
    pv_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMClosePubHandle(
    h_pub: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMDuplicatePubHandle(
    h_pub_in: u32,
    ph_pub_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetUserInfo(
    h_user: u32,
    pu_user_name_length: ?*u32,
    wsz_user_name: ?[*:0]u16,
    pu_user_id_length: ?*u32,
    wsz_user_id: ?[*:0]u16,
    pu_user_id_type_length: ?*u32,
    wsz_user_id_type: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetRightInfo(
    h_right: u32,
    pu_right_name_length: ?*u32,
    wsz_right_name: ?[*:0]u16,
    pst_from: ?*SYSTEMTIME,
    pst_until: ?*SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetRightExtendedInfo(
    h_right: u32,
    u_index: u32,
    pu_extended_info_name_length: ?*u32,
    wsz_extended_info_name: ?[*:0]u16,
    pu_extended_info_value_length: ?*u32,
    wsz_extended_info_value: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetUsers(
    h_issuance_license: u32,
    u_index: u32,
    ph_user: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetUserRights(
    h_issuance_license: u32,
    h_user: u32,
    u_index: u32,
    ph_right: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetMetaData(
    h_issuance_license: u32,
    pu_content_id_length: ?*u32,
    wsz_content_id: ?[*:0]u16,
    pu_content_id_type_length: ?*u32,
    wsz_content_id_type: ?[*:0]u16,
    pu_s_k_u_id_length: ?*u32,
    wsz_s_k_u_id: ?[*:0]u16,
    pu_s_k_u_id_type_length: ?*u32,
    wsz_s_k_u_id_type: ?[*:0]u16,
    pu_content_type_length: ?*u32,
    wsz_content_type: ?[*:0]u16,
    pu_content_name_length: ?*u32,
    wsz_content_name: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetApplicationSpecificData(
    h_issuance_license: u32,
    u_index: u32,
    pu_name_length: ?*u32,
    wsz_name: ?[*:0]u16,
    pu_value_length: ?*u32,
    wsz_value: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetIssuanceLicenseInfo(
    h_issuance_license: u32,
    pst_time_from: ?*SYSTEMTIME,
    pst_time_until: ?*SYSTEMTIME,
    u_flags: u32,
    pu_distribution_point_name_length: ?*u32,
    wsz_distribution_point_name: ?[*:0]u16,
    pu_distribution_point_u_r_l_length: ?*u32,
    wsz_distribution_point_u_r_l: ?[*:0]u16,
    ph_owner: ?*u32,
    pf_official: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetRevocationPoint(
    h_issuance_license: u32,
    pu_id_length: ?*u32,
    wsz_id: ?[*:0]u16,
    pu_id_type_length: ?*u32,
    wsz_id_type: ?[*:0]u16,
    pu_u_r_l_length: ?*u32,
    wsz_r_l: ?[*:0]u16,
    pst_frequency: ?*SYSTEMTIME,
    pu_name_length: ?*u32,
    wsz_name: ?[*:0]u16,
    pu_public_key_length: ?*u32,
    wsz_public_key: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetUsagePolicy(
    h_issuance_license: u32,
    u_index: u32,
    pe_usage_policy_type: ?*DRM_USAGEPOLICY_TYPE,
    pf_exclusion: ?*BOOL,
    pu_name_length: ?*u32,
    wsz_name: ?[*:0]u16,
    pu_min_version_length: ?*u32,
    wsz_min_version: ?[*:0]u16,
    pu_max_version_length: ?*u32,
    wsz_max_version: ?[*:0]u16,
    pu_public_key_length: ?*u32,
    wsz_public_key: ?[*:0]u16,
    pu_digest_algorithm_length: ?*u32,
    wsz_digest_algorithm: ?[*:0]u16,
    pcb_digest: ?*u32,
    pb_digest: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetNameAndDescription(
    h_issuance_license: u32,
    u_index: u32,
    pulcid: ?*u32,
    pu_name_length: ?*u32,
    wsz_name: ?[*:0]u16,
    pu_description_length: ?*u32,
    wsz_description: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetOwnerLicense(
    h_issuance_license: u32,
    pu_owner_license_length: ?*u32,
    wsz_owner_license: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMGetIntervalTime(
    h_issuance_license: u32,
    pc_days: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "msdrm" fn DRMRepair() callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "msdrm" fn DRMRegisterProtectedWindow(
    h_env: u32,
    hwnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "msdrm" fn DRMIsWindowProtected(
    hwnd: ?HWND,
    pf_protected: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "msdrm" fn DRMAcquireIssuanceLicenseTemplate(
    h_client: u32,
    u_flags: u32,
    pv_reserved: ?*anyopaque,
    c_templates: u32,
    pwsz_template_ids: ?[*]?PWSTR,
    wsz_url: ?PWSTR,
    pv_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const FARPROC = @import("../foundation.zig").FARPROC;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const PWSTR = @import("../foundation.zig").PWSTR;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "DRMCALLBACK")) {
        _ = DRMCALLBACK;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
