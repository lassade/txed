//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (552)
//--------------------------------------------------------------------------------
pub const E_XML_NOTWF = @as(i32, -1072897501);
pub const E_XML_NODTD = @as(i32, -1072897500);
pub const E_XML_INVALID = @as(i32, -1072897499);
pub const E_XML_BUFFERTOOSMALL = @as(i32, -1072897498);
pub const XHR_PROP_ONDATA_ALWAYS = @as(u32, 0);
pub const XHR_PROP_ONDATA_NEVER = @as(u64, 18446744073709551615);
pub const DISPID_XOBJ_MIN = @as(u32, 65536);
pub const DISPID_XOBJ_MAX = @as(u32, 131071);
pub const DISPID_XOBJ_BASE = @as(u32, 65536);
pub const DISPID_XMLELEMENTCOLLECTION = @as(u32, 65536);
pub const DISPID_XMLELEMENTCOLLECTION_LENGTH = @as(u32, 65537);
pub const DISPID_XMLELEMENTCOLLECTION_NEWENUM = @as(i32, -4);
pub const DISPID_XMLELEMENTCOLLECTION_ITEM = @as(u32, 65539);
pub const DISPID_XMLDOCUMENT = @as(u32, 65636);
pub const DISPID_XMLDOCUMENT_ROOT = @as(u32, 65637);
pub const DISPID_XMLDOCUMENT_FILESIZE = @as(u32, 65638);
pub const DISPID_XMLDOCUMENT_FILEMODIFIEDDATE = @as(u32, 65639);
pub const DISPID_XMLDOCUMENT_FILEUPDATEDDATE = @as(u32, 65640);
pub const DISPID_XMLDOCUMENT_URL = @as(u32, 65641);
pub const DISPID_XMLDOCUMENT_MIMETYPE = @as(u32, 65642);
pub const DISPID_XMLDOCUMENT_READYSTATE = @as(u32, 65643);
pub const DISPID_XMLDOCUMENT_CREATEELEMENT = @as(u32, 65644);
pub const DISPID_XMLDOCUMENT_CHARSET = @as(u32, 65645);
pub const DISPID_XMLDOCUMENT_VERSION = @as(u32, 65646);
pub const DISPID_XMLDOCUMENT_DOCTYPE = @as(u32, 65647);
pub const DISPID_XMLDOCUMENT_DTDURL = @as(u32, 65648);
pub const DISPID_XMLDOCUMENT_ASYNC = @as(u32, 65649);
pub const DISPID_XMLDOCUMENT_CASEINSENSITIVE = @as(u32, 65650);
pub const DISPID_XMLDOCUMENT_BASEURL = @as(u32, 65651);
pub const DISPID_XMLDOCUMENT_XML = @as(u32, 65652);
pub const DISPID_XMLDOCUMENT_LASTERROR = @as(u32, 65653);
pub const DISPID_XMLDOCUMENT_TRIMWHITESPACE = @as(u32, 65654);
pub const DISPID_XMLDOCUMENT_COMMIT = @as(u32, 65655);
pub const DISPID_XMLELEMENT = @as(u32, 65736);
pub const DISPID_XMLELEMENT_TAGNAME = @as(u32, 65737);
pub const DISPID_XMLELEMENT_PARENT = @as(u32, 65738);
pub const DISPID_XMLELEMENT_SETATTRIBUTE = @as(u32, 65739);
pub const DISPID_XMLELEMENT_GETATTRIBUTE = @as(u32, 65740);
pub const DISPID_XMLELEMENT_REMOVEATTRIBUTE = @as(u32, 65741);
pub const DISPID_XMLELEMENT_CHILDREN = @as(u32, 65742);
pub const DISPID_XMLELEMENT_TYPE = @as(u32, 65743);
pub const DISPID_XMLELEMENT_TEXT = @as(u32, 65744);
pub const DISPID_XMLELEMENT_ADDCHILD = @as(u32, 65745);
pub const DISPID_XMLELEMENT_REMOVECHILD = @as(u32, 65746);
pub const DISPID_XMLELEMENT_ATTRIBUTES = @as(u32, 65747);
pub const DISPID_XMLNOTIFSINK = @as(u32, 65836);
pub const DISPID_XMLNOTIFSINK_CHILDADDED = @as(u32, 65837);
pub const DISPID_XMLATTRIBUTE = @as(u32, 65936);
pub const DISPID_XMLATTRIBUTE_NAME = @as(u32, 65937);
pub const DISPID_XMLATTRIBUTE_VALUE = @as(u32, 65938);
pub const DISPID_XMLERROR = @as(u32, 65936);
pub const DISPID_XMLERROR_REASON = @as(u32, 65937);
pub const DISPID_XMLERROR_LINE = @as(u32, 65938);
pub const DISPID_XMLERROR_POS = @as(u32, 65939);
pub const DISPID_NODE = @as(u32, 66036);
pub const DISPID_NODE_NAME = @as(u32, 66037);
pub const DISPID_NODE_PARENT = @as(u32, 66038);
pub const DISPID_NODE_TYPE = @as(u32, 66039);
pub const DISPID_NODE_VALUE = @as(u32, 66040);
pub const DISPID_NODE_SETATTRIBUTE = @as(u32, 66041);
pub const DISPID_NODE_GETATTRIBUTE = @as(u32, 66042);
pub const DISPID_NODE_REMOVEATTRIBUTE = @as(u32, 66043);
pub const DISPID_NODE_ATTRIBUTES = @as(u32, 66044);
pub const DISPID_NODE_ADD = @as(u32, 66045);
pub const DISPID_NODE_REMOVE = @as(u32, 66046);
pub const DISPID_NODE_CHILDREN = @as(u32, 66047);
pub const DISPID_NODELIST = @as(u32, 66136);
pub const DISPID_NODELIST_NEWENUM = @as(u32, 66137);
pub const DISPID_NODELIST_NEXT = @as(u32, 66138);
pub const DISPID_NODELIST_CURRENT = @as(u32, 66139);
pub const DISPID_NODELIST_MOVE = @as(u32, 66140);
pub const DISPID_NODELIST_MOVETONODE = @as(u32, 66141);
pub const DISPID_NODELIST_LENGTH = @as(u32, 66142);
pub const DISPID_NODELIST_ITEM = @as(u32, 66143);
pub const DISPID_DOM_BASE = @as(u32, 1);
pub const DISPID_DOM_COLLECTION_BASE = @as(u32, 1000000);
pub const DISPID_DOM_COLLECTION_MAX = @as(u32, 2999999);
pub const DISPID_DOM_NODE = @as(u32, 1);
pub const DISPID_DOM_NODE_NODENAME = @as(u32, 2);
pub const DISPID_DOM_NODE_NODEVALUE = @as(u32, 3);
pub const DISPID_DOM_NODE_NODETYPE = @as(u32, 4);
pub const DISPID_DOM_NODE_NODETYPEENUM = @as(u32, 5);
pub const DISPID_DOM_NODE_PARENTNODE = @as(u32, 6);
pub const DISPID_DOM_NODE_CHILDNODES = @as(u32, 7);
pub const DISPID_DOM_NODE_FIRSTCHILD = @as(u32, 8);
pub const DISPID_DOM_NODE_LASTCHILD = @as(u32, 9);
pub const DISPID_DOM_NODE_PREVIOUSSIBLING = @as(u32, 10);
pub const DISPID_DOM_NODE_NEXTSIBLING = @as(u32, 11);
pub const DISPID_DOM_NODE_ATTRIBUTES = @as(u32, 12);
pub const DISPID_DOM_NODE_INSERTBEFORE = @as(u32, 13);
pub const DISPID_DOM_NODE_REPLACECHILD = @as(u32, 14);
pub const DISPID_DOM_NODE_REMOVECHILD = @as(u32, 15);
pub const DISPID_DOM_NODE_APPENDCHILD = @as(u32, 16);
pub const DISPID_DOM_NODE_HASCHILDNODES = @as(u32, 17);
pub const DISPID_DOM_NODE_OWNERDOC = @as(u32, 18);
pub const DISPID_DOM_NODE_CLONENODE = @as(u32, 19);
pub const DISPID_XMLDOM_NODE = @as(u32, 20);
pub const DISPID_XMLDOM_NODE_STRINGTYPE = @as(u32, 21);
pub const DISPID_XMLDOM_NODE_SPECIFIED = @as(u32, 22);
pub const DISPID_XMLDOM_NODE_DEFINITION = @as(u32, 23);
pub const DISPID_XMLDOM_NODE_TEXT = @as(u32, 24);
pub const DISPID_XMLDOM_NODE_NODETYPEDVALUE = @as(u32, 25);
pub const DISPID_XMLDOM_NODE_DATATYPE = @as(u32, 26);
pub const DISPID_XMLDOM_NODE_XML = @as(u32, 27);
pub const DISPID_XMLDOM_NODE_TRANSFORMNODE = @as(u32, 28);
pub const DISPID_XMLDOM_NODE_SELECTNODES = @as(u32, 29);
pub const DISPID_XMLDOM_NODE_SELECTSINGLENODE = @as(u32, 30);
pub const DISPID_XMLDOM_NODE_PARSED = @as(u32, 31);
pub const DISPID_XMLDOM_NODE_NAMESPACE = @as(u32, 32);
pub const DISPID_XMLDOM_NODE_PREFIX = @as(u32, 33);
pub const DISPID_XMLDOM_NODE_BASENAME = @as(u32, 34);
pub const DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT = @as(u32, 35);
pub const DISPID_XMLDOM_NODE__TOP = @as(u32, 36);
pub const DISPID_DOM_DOCUMENT = @as(u32, 37);
pub const DISPID_DOM_DOCUMENT_DOCTYPE = @as(u32, 38);
pub const DISPID_DOM_DOCUMENT_IMPLEMENTATION = @as(u32, 39);
pub const DISPID_DOM_DOCUMENT_DOCUMENTELEMENT = @as(u32, 40);
pub const DISPID_DOM_DOCUMENT_CREATEELEMENT = @as(u32, 41);
pub const DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT = @as(u32, 42);
pub const DISPID_DOM_DOCUMENT_CREATETEXTNODE = @as(u32, 43);
pub const DISPID_DOM_DOCUMENT_CREATECOMMENT = @as(u32, 44);
pub const DISPID_DOM_DOCUMENT_CREATECDATASECTION = @as(u32, 45);
pub const DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION = @as(u32, 46);
pub const DISPID_DOM_DOCUMENT_CREATEATTRIBUTE = @as(u32, 47);
pub const DISPID_DOM_DOCUMENT_CREATEENTITY = @as(u32, 48);
pub const DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE = @as(u32, 49);
pub const DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME = @as(u32, 50);
pub const DISPID_DOM_DOCUMENT_TOP = @as(u32, 51);
pub const DISPID_XMLDOM_DOCUMENT = @as(u32, 52);
pub const DISPID_XMLDOM_DOCUMENT_DOCUMENTNODE = @as(u32, 53);
pub const DISPID_XMLDOM_DOCUMENT_CREATENODE = @as(u32, 54);
pub const DISPID_XMLDOM_DOCUMENT_CREATENODEEX = @as(u32, 55);
pub const DISPID_XMLDOM_DOCUMENT_NODEFROMID = @as(u32, 56);
pub const DISPID_XMLDOM_DOCUMENT_DOCUMENTNAMESPACES = @as(u32, 57);
pub const DISPID_XMLDOM_DOCUMENT_LOAD = @as(u32, 58);
pub const DISPID_XMLDOM_DOCUMENT_PARSEERROR = @as(u32, 59);
pub const DISPID_XMLDOM_DOCUMENT_URL = @as(u32, 60);
pub const DISPID_XMLDOM_DOCUMENT_ASYNC = @as(u32, 61);
pub const DISPID_XMLDOM_DOCUMENT_ABORT = @as(u32, 62);
pub const DISPID_XMLDOM_DOCUMENT_LOADXML = @as(u32, 63);
pub const DISPID_XMLDOM_DOCUMENT_SAVE = @as(u32, 64);
pub const DISPID_XMLDOM_DOCUMENT_VALIDATE = @as(u32, 65);
pub const DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE = @as(u32, 66);
pub const DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE = @as(u32, 67);
pub const DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE = @as(u32, 68);
pub const DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE = @as(u32, 69);
pub const DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE = @as(u32, 70);
pub const DISPID_XMLDOM_DOCUMENT__TOP = @as(u32, 71);
pub const DISPID_DOM_NODELIST = @as(u32, 72);
pub const DISPID_DOM_NODELIST_ITEM = @as(u32, 73);
pub const DISPID_DOM_NODELIST_LENGTH = @as(u32, 74);
pub const DISPID_XMLDOM_NODELIST = @as(u32, 75);
pub const DISPID_XMLDOM_NODELIST_NEXTNODE = @as(u32, 76);
pub const DISPID_XMLDOM_NODELIST_RESET = @as(u32, 77);
pub const DISPID_XMLDOM_NODELIST_NEWENUM = @as(u32, 78);
pub const DISPID_XMLDOM_NODELIST__TOP = @as(u32, 79);
pub const DISPID_DOM_NAMEDNODEMAP = @as(u32, 80);
pub const DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM = @as(u32, 83);
pub const DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM = @as(u32, 84);
pub const DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM = @as(u32, 85);
pub const DISPID_XMLDOM_NAMEDNODEMAP = @as(u32, 86);
pub const DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM = @as(u32, 87);
pub const DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM = @as(u32, 88);
pub const DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE = @as(u32, 89);
pub const DISPID_XMLDOM_NAMEDNODEMAP_RESET = @as(u32, 90);
pub const DISPID_XMLDOM_NAMEDNODEMAP_NEWENUM = @as(u32, 91);
pub const DISPID_XMLDOM_NAMEDNODEMAP__TOP = @as(u32, 92);
pub const DISPID_DOM_W3CWRAPPERS = @as(u32, 93);
pub const DISPID_DOM_DOCUMENTFRAGMENT = @as(u32, 94);
pub const DISPID_DOM_DOCUMENTFRAGMENT__TOP = @as(u32, 95);
pub const DISPID_DOM_ELEMENT = @as(u32, 96);
pub const DISPID_DOM_ELEMENT_GETTAGNAME = @as(u32, 97);
pub const DISPID_DOM_ELEMENT_GETATTRIBUTES = @as(u32, 98);
pub const DISPID_DOM_ELEMENT_GETATTRIBUTE = @as(u32, 99);
pub const DISPID_DOM_ELEMENT_SETATTRIBUTE = @as(u32, 100);
pub const DISPID_DOM_ELEMENT_REMOVEATTRIBUTE = @as(u32, 101);
pub const DISPID_DOM_ELEMENT_GETATTRIBUTENODE = @as(u32, 102);
pub const DISPID_DOM_ELEMENT_SETATTRIBUTENODE = @as(u32, 103);
pub const DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE = @as(u32, 104);
pub const DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME = @as(u32, 105);
pub const DISPID_DOM_ELEMENT_NORMALIZE = @as(u32, 106);
pub const DISPID_DOM_ELEMENT__TOP = @as(u32, 107);
pub const DISPID_DOM_DATA = @as(u32, 108);
pub const DISPID_DOM_DATA_DATA = @as(u32, 109);
pub const DISPID_DOM_DATA_LENGTH = @as(u32, 110);
pub const DISPID_DOM_DATA_SUBSTRING = @as(u32, 111);
pub const DISPID_DOM_DATA_APPEND = @as(u32, 112);
pub const DISPID_DOM_DATA_INSERT = @as(u32, 113);
pub const DISPID_DOM_DATA_DELETE = @as(u32, 114);
pub const DISPID_DOM_DATA_REPLACE = @as(u32, 115);
pub const DISPID_DOM_DATA__TOP = @as(u32, 116);
pub const DISPID_DOM_ATTRIBUTE = @as(u32, 117);
pub const DISPID_DOM_ATTRIBUTE_GETNAME = @as(u32, 118);
pub const DISPID_DOM_ATTRIBUTE_SPECIFIED = @as(u32, 119);
pub const DISPID_DOM_ATTRIBUTE_VALUE = @as(u32, 120);
pub const DISPID_DOM_ATTRIBUTE__TOP = @as(u32, 121);
pub const DISPID_DOM_TEXT = @as(u32, 122);
pub const DISPID_DOM_TEXT_SPLITTEXT = @as(u32, 123);
pub const DISPID_DOM_TEXT_JOINTEXT = @as(u32, 124);
pub const DISPID_DOM_TEXT__TOP = @as(u32, 125);
pub const DISPID_DOM_PI = @as(u32, 126);
pub const DISPID_DOM_PI_TARGET = @as(u32, 127);
pub const DISPID_DOM_PI_DATA = @as(u32, 128);
pub const DISPID_DOM_PI__TOP = @as(u32, 129);
pub const DISPID_DOM_DOCUMENTTYPE = @as(u32, 130);
pub const DISPID_DOM_DOCUMENTTYPE_NAME = @as(u32, 131);
pub const DISPID_DOM_DOCUMENTTYPE_ENTITIES = @as(u32, 132);
pub const DISPID_DOM_DOCUMENTTYPE_NOTATIONS = @as(u32, 133);
pub const DISPID_DOM_DOCUMENTTYPE__TOP = @as(u32, 134);
pub const DISPID_DOM_NOTATION = @as(u32, 135);
pub const DISPID_DOM_NOTATION_PUBLICID = @as(u32, 136);
pub const DISPID_DOM_NOTATION_SYSTEMID = @as(u32, 137);
pub const DISPID_DOM_NOTATION__TOP = @as(u32, 138);
pub const DISPID_DOM_ENTITY = @as(u32, 139);
pub const DISPID_DOM_ENTITY_PUBLICID = @as(u32, 140);
pub const DISPID_DOM_ENTITY_SYSTEMID = @as(u32, 141);
pub const DISPID_DOM_ENTITY_NOTATIONNAME = @as(u32, 142);
pub const DISPID_DOM_ENTITY__TOP = @as(u32, 143);
pub const DISPID_DOM_W3CWRAPPERS_TOP = @as(u32, 143);
pub const DISPID_DOM_IMPLEMENTATION = @as(u32, 144);
pub const DISPID_DOM_IMPLEMENTATION_HASFEATURE = @as(u32, 145);
pub const DISPID_DOM_IMPLEMENTATION__TOP = @as(u32, 146);
pub const DISPID_DOM__TOP = @as(u32, 176);
pub const DISPID_DOM_ERROR = @as(u32, 177);
pub const DISPID_DOM_ERROR_ERRORCODE = @as(u32, 178);
pub const DISPID_DOM_ERROR_URL = @as(u32, 179);
pub const DISPID_DOM_ERROR_REASON = @as(u32, 180);
pub const DISPID_DOM_ERROR_SRCTEXT = @as(u32, 181);
pub const DISPID_DOM_ERROR_LINE = @as(u32, 182);
pub const DISPID_DOM_ERROR_LINEPOS = @as(u32, 183);
pub const DISPID_DOM_ERROR_FILEPOS = @as(u32, 184);
pub const DISPID_DOM_ERROR__TOP = @as(u32, 185);
pub const DISPID_DOM_ERROR2 = @as(u32, 186);
pub const DISPID_DOM_ERROR2_ALLERRORS = @as(u32, 187);
pub const DISPID_DOM_ERROR2_ERRORPARAMETERS = @as(u32, 188);
pub const DISPID_DOM_ERROR2_ERRORPARAMETERSCOUNT = @as(u32, 189);
pub const DISPID_DOM_ERROR2_ERRORXPATH = @as(u32, 190);
pub const DISPID_DOM_ERROR2__TOP = @as(u32, 191);
pub const DISPID_DOM_ERRORCOLLECTION = @as(u32, 192);
pub const DISPID_DOM_ERRORCOLLECTION_LENGTH = @as(u32, 193);
pub const DISPID_DOM_ERRORCOLLECTION_NEXT = @as(u32, 194);
pub const DISPID_DOM_ERRORCOLLECTION_RESET = @as(u32, 195);
pub const DISPID_DOM_ERRORCOLLECTION__TOP = @as(u32, 196);
pub const DISPID_XTLRUNTIME = @as(u32, 186);
pub const DISPID_XTLRUNTIME_UNIQUEID = @as(u32, 187);
pub const DISPID_XTLRUNTIME_DEPTH = @as(u32, 188);
pub const DISPID_XTLRUNTIME_CHILDNUMBER = @as(u32, 189);
pub const DISPID_XTLRUNTIME_ANCESTORCHILDNUMBER = @as(u32, 190);
pub const DISPID_XTLRUNTIME_ABSOLUTECHILDNUMBER = @as(u32, 191);
pub const DISPID_XTLRUNTIME_FORMATINDEX = @as(u32, 192);
pub const DISPID_XTLRUNTIME_FORMATNUMBER = @as(u32, 193);
pub const DISPID_XTLRUNTIME_FORMATDATE = @as(u32, 194);
pub const DISPID_XTLRUNTIME_FORMATTIME = @as(u32, 195);
pub const DISPID_XTLRUNTIME__TOP = @as(u32, 196);
pub const DISPID_XMLDOMEVENT = @as(u32, 197);
pub const DISPID_XMLDOMEVENT_ONREADYSTATECHANGE = @as(i32, -609);
pub const DISPID_XMLDOMEVENT_ONDATAAVAILABLE = @as(u32, 198);
pub const DISPID_XMLDOMEVENT__TOP = @as(u32, 199);
pub const DISPID_XMLDOM_DOCUMENT2 = @as(u32, 200);
pub const DISPID_XMLDOM_DOCUMENT2_NAMESPACES = @as(u32, 201);
pub const DISPID_XMLDOM_DOCUMENT2_SCHEMAS = @as(u32, 202);
pub const DISPID_XMLDOM_DOCUMENT2_VALIDATE = @as(u32, 203);
pub const DISPID_XMLDOM_DOCUMENT2_SETPROPERTY = @as(u32, 204);
pub const DISPID_XMLDOM_DOCUMENT2_GETPROPERTY = @as(u32, 205);
pub const DISPID_XMLDOM_DOCUMENT2__TOP = @as(u32, 206);
pub const DISPID_XMLDOM_DOCUMENT3 = @as(u32, 207);
pub const DISPID_XMLDOM_DOCUMENT3_VALIDATENODE = @as(u32, 208);
pub const DISPID_XMLDOM_DOCUMENT3_IMPORTNODE = @as(u32, 209);
pub const DISPID_XMLDOM_DOCUMENT3__TOP = @as(u32, 210);
pub const DISPID_XMLDOM_SCHEMACOLLECTION = @as(u32, 2);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_ADD = @as(u32, 3);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_GET = @as(u32, 4);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_REMOVE = @as(u32, 5);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_LENGTH = @as(u32, 6);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_NAMESPACEURI = @as(u32, 7);
pub const DISPID_XMLDOM_SCHEMACOLLECTION_ADDCOLLECTION = @as(u32, 8);
pub const DISPID_XMLDOM_SCHEMACOLLECTION__TOP = @as(u32, 9);
pub const DISPID_XMLDOM_SELECTION = @as(u32, 80);
pub const DISPID_XMLDOM_SELECTION_EXPR = @as(u32, 81);
pub const DISPID_XMLDOM_SELECTION_CONTEXT = @as(u32, 82);
pub const DISPID_XMLDOM_SELECTION_PEEKNODE = @as(u32, 83);
pub const DISPID_XMLDOM_SELECTION_MATCHES = @as(u32, 84);
pub const DISPID_XMLDOM_SELECTION_REMOVENEXT = @as(u32, 85);
pub const DISPID_XMLDOM_SELECTION_REMOVEALL = @as(u32, 86);
pub const DISPID_XMLDOM_SELECTION_CLONE = @as(u32, 87);
pub const DISPID_XMLDOM_SELECTION_GETPROPERTY = @as(u32, 88);
pub const DISPID_XMLDOM_SELECTION_SETPROPERTY = @as(u32, 89);
pub const DISPID_XMLDOM_SELECTION__TOP = @as(u32, 90);
pub const DISPID_XMLDOM_TEMPLATE = @as(u32, 1);
pub const DISPID_XMLDOM_TEMPLATE_STYLESHEET = @as(u32, 2);
pub const DISPID_XMLDOM_TEMPLATE_CREATEPROCESSOR = @as(u32, 3);
pub const DISPID_XMLDOM_TEMPLATE__TOP = @as(u32, 4);
pub const DISPID_XMLDOM_PROCESSOR = @as(u32, 1);
pub const DISPID_XMLDOM_PROCESSOR_INPUT = @as(u32, 2);
pub const DISPID_XMLDOM_PROCESSOR_XSLTEMPLATE = @as(u32, 3);
pub const DISPID_XMLDOM_PROCESSOR_SETSTARTMODE = @as(u32, 4);
pub const DISPID_XMLDOM_PROCESSOR_STARTMODE = @as(u32, 5);
pub const DISPID_XMLDOM_PROCESSOR_STARTMODEURI = @as(u32, 6);
pub const DISPID_XMLDOM_PROCESSOR_OUTPUT = @as(u32, 7);
pub const DISPID_XMLDOM_PROCESSOR_TRANSFORM = @as(u32, 8);
pub const DISPID_XMLDOM_PROCESSOR_RESET = @as(u32, 9);
pub const DISPID_XMLDOM_PROCESSOR_READYSTATE = @as(u32, 10);
pub const DISPID_XMLDOM_PROCESSOR_ADDPARAMETER = @as(u32, 11);
pub const DISPID_XMLDOM_PROCESSOR_ADDOBJECT = @as(u32, 12);
pub const DISPID_XMLDOM_PROCESSOR_STYLESHEET = @as(u32, 13);
pub const DISPID_XMLDOM_PROCESSOR__TOP = @as(u32, 14);
pub const DISPID_XMLDSO = @as(u32, 65536);
pub const DISPID_XMLDSO_DOCUMENT = @as(u32, 65537);
pub const DISPID_XMLDSO_JAVADSOCOMPATIBLE = @as(u32, 65538);
pub const DISPID_SAX_XMLREADER__MIN = @as(u32, 1281);
pub const DISPID_SAX_XMLREADER__MAX = @as(u32, 65536);
pub const DISPID_SAX_XMLREADER__BASE = @as(u32, 1281);
pub const DISPID_SAX_XMLREADER = @as(u32, 1281);
pub const DISPID_SAX_XMLREADER_GETFEATURE = @as(u32, 1282);
pub const DISPID_SAX_XMLREADER_PUTFEATURE = @as(u32, 1283);
pub const DISPID_SAX_XMLREADER_GETPROPERTY = @as(u32, 1284);
pub const DISPID_SAX_XMLREADER_PUTPROPERTY = @as(u32, 1285);
pub const DISPID_SAX_XMLREADER_ENTITYRESOLVER = @as(u32, 1286);
pub const DISPID_SAX_XMLREADER_CONTENTHANDLER = @as(u32, 1287);
pub const DISPID_SAX_XMLREADER_DTDHANDLER = @as(u32, 1288);
pub const DISPID_SAX_XMLREADER_ERRORHANDLER = @as(u32, 1289);
pub const DISPID_SAX_XMLREADER_BASEURL = @as(u32, 1290);
pub const DISPID_SAX_XMLREADER_SECUREBASEURL = @as(u32, 1291);
pub const DISPID_SAX_XMLREADER_PARSE = @as(u32, 1292);
pub const DISPID_SAX_XMLREADER_PARSEURL = @as(u32, 1293);
pub const DISPID_SAX_XMLREADER_PARENT = @as(u32, 1294);
pub const DISPID_SAX_XMLREADER__TOP = @as(u32, 1295);
pub const DISPID_SAX_XMLFILTER__BASE = @as(u32, 1296);
pub const DISPID_SAX_XMLFILTER = @as(u32, 1296);
pub const DISPID_SAX_XMLFILTER_GETFEATURE = @as(u32, 1297);
pub const DISPID_SAX_XMLFILTER_PUTFEATURE = @as(u32, 1298);
pub const DISPID_SAX_XMLFILTER_GETPROPERTY = @as(u32, 1299);
pub const DISPID_SAX_XMLFILTER_PUTPROPERTY = @as(u32, 1300);
pub const DISPID_SAX_XMLFILTER_ENTITYRESOLVER = @as(u32, 1301);
pub const DISPID_SAX_XMLFILTER_CONTENTHANDLER = @as(u32, 1302);
pub const DISPID_SAX_XMLFILTER_DTDHANDLER = @as(u32, 1303);
pub const DISPID_SAX_XMLFILTER_ERRORHANDLER = @as(u32, 1304);
pub const DISPID_SAX_XMLFILTER_BASEURL = @as(u32, 1305);
pub const DISPID_SAX_XMLFILTER_SECUREBASEURL = @as(u32, 1306);
pub const DISPID_SAX_XMLFILTER_PARSE = @as(u32, 1307);
pub const DISPID_SAX_XMLFILTER_PARSEURL = @as(u32, 1308);
pub const DISPID_SAX_XMLFILTER_PARENT = @as(u32, 1309);
pub const DISPID_SAX_XMLFILTER__TOP = @as(u32, 1311);
pub const DISPID_SAX_LOCATOR__BASE = @as(u32, 1312);
pub const DISPID_SAX_LOCATOR = @as(u32, 1312);
pub const DISPID_SAX_LOCATOR_COLUMNNUMBER = @as(u32, 1313);
pub const DISPID_SAX_LOCATOR_LINENUMBER = @as(u32, 1314);
pub const DISPID_SAX_LOCATOR_PUBLICID = @as(u32, 1315);
pub const DISPID_SAX_LOCATOR_SYSTEMID = @as(u32, 1316);
pub const DISPID_SAX_LOCATOR__TOP = @as(u32, 1317);
pub const DISPID_SAX_ENTITYRESOLVER__BASE = @as(u32, 1318);
pub const DISPID_SAX_ENTITYRESOLVER = @as(u32, 1318);
pub const DISPID_SAX_ENTITYRESOLVER_RESOLVEENTITY = @as(u32, 1319);
pub const DISPID_SAX_ENTITYRESOLVER__TOP = @as(u32, 1320);
pub const DISPID_SAX_CONTENTHANDLER__BASE = @as(u32, 1321);
pub const DISPID_SAX_CONTENTHANDLER = @as(u32, 1321);
pub const DISPID_SAX_CONTENTHANDLER_DOCUMENTLOCATOR = @as(u32, 1322);
pub const DISPID_SAX_CONTENTHANDLER_STARTDOCUMENT = @as(u32, 1323);
pub const DISPID_SAX_CONTENTHANDLER_ENDDOCUMENT = @as(u32, 1324);
pub const DISPID_SAX_CONTENTHANDLER_STARTPREFIXMAPPING = @as(u32, 1325);
pub const DISPID_SAX_CONTENTHANDLER_ENDPREFIXMAPPING = @as(u32, 1326);
pub const DISPID_SAX_CONTENTHANDLER_STARTELEMENT = @as(u32, 1327);
pub const DISPID_SAX_CONTENTHANDLER_ENDELEMENT = @as(u32, 1328);
pub const DISPID_SAX_CONTENTHANDLER_CHARACTERS = @as(u32, 1329);
pub const DISPID_SAX_CONTENTHANDLER_IGNORABLEWHITESPACE = @as(u32, 1330);
pub const DISPID_SAX_CONTENTHANDLER_PROCESSINGINSTRUCTION = @as(u32, 1331);
pub const DISPID_SAX_CONTENTHANDLER_SKIPPEDENTITY = @as(u32, 1332);
pub const DISPID_SAX_CONTENTHANDLER__TOP = @as(u32, 1333);
pub const DISPID_SAX_DTDHANDLER__BASE = @as(u32, 1334);
pub const DISPID_SAX_DTDHANDLER = @as(u32, 1334);
pub const DISPID_SAX_DTDHANDLER_NOTATIONDECL = @as(u32, 1335);
pub const DISPID_SAX_DTDHANDLER_UNPARSEDENTITYDECL = @as(u32, 1336);
pub const DISPID_SAX_DTDHANDLER__TOP = @as(u32, 1337);
pub const DISPID_SAX_ERRORHANDLER__BASE = @as(u32, 1338);
pub const DISPID_SAX_ERRORHANDLER = @as(u32, 1338);
pub const DISPID_SAX_ERRORHANDLER_ERROR = @as(u32, 1339);
pub const DISPID_SAX_ERRORHANDLER_FATALERROR = @as(u32, 1340);
pub const DISPID_SAX_ERRORHANDLER_IGNORABLEWARNING = @as(u32, 1341);
pub const DISPID_SAX_ERRORHANDLER__TOP = @as(u32, 1342);
pub const DISPID_SAX_ATTRIBUTES__BASE = @as(u32, 1343);
pub const DISPID_SAX_ATTRIBUTES = @as(u32, 1343);
pub const DISPID_SAX_ATTRIBUTES_LENGTH = @as(u32, 1344);
pub const DISPID_SAX_ATTRIBUTES_GETURI = @as(u32, 1345);
pub const DISPID_SAX_ATTRIBUTES_GETLOCALNAME = @as(u32, 1346);
pub const DISPID_SAX_ATTRIBUTES_GETQNAME = @as(u32, 1347);
pub const DISPID_SAX_ATTRIBUTES_GETINDEXFROMNAME = @as(u32, 1348);
pub const DISPID_SAX_ATTRIBUTES_GETINDEXFROMQNAME = @as(u32, 1349);
pub const DISPID_SAX_ATTRIBUTES_GETTYPE = @as(u32, 1350);
pub const DISPID_SAX_ATTRIBUTES_GETTYPEFROMNAME = @as(u32, 1351);
pub const DISPID_SAX_ATTRIBUTES_GETTYPEFROMQNAME = @as(u32, 1352);
pub const DISPID_SAX_ATTRIBUTES_GETVALUE = @as(u32, 1353);
pub const DISPID_SAX_ATTRIBUTES_GETVALUEFROMNAME = @as(u32, 1354);
pub const DISPID_SAX_ATTRIBUTES_GETVALUEFROMQNAME = @as(u32, 1355);
pub const DISPID_SAX_ATTRIBUTES__TOP = @as(u32, 1356);
pub const DISPID_SAX_LEXICALHANDLER__BASE = @as(u32, 1357);
pub const DISPID_SAX_LEXICALHANDLER = @as(u32, 1357);
pub const DISPID_SAX_LEXICALHANDLER_STARTDTD = @as(u32, 1358);
pub const DISPID_SAX_LEXICALHANDLER_ENDDTD = @as(u32, 1359);
pub const DISPID_SAX_LEXICALHANDLER_STARTENTITY = @as(u32, 1360);
pub const DISPID_SAX_LEXICALHANDLER_ENDENTITY = @as(u32, 1361);
pub const DISPID_SAX_LEXICALHANDLER_STARTCDATA = @as(u32, 1362);
pub const DISPID_SAX_LEXICALHANDLER_ENDCDATA = @as(u32, 1363);
pub const DISPID_SAX_LEXICALHANDLER_COMMENT = @as(u32, 1364);
pub const DISPID_SAX_LEXICALHANDLER__TOP = @as(u32, 1365);
pub const DISPID_SAX_DECLHANDLER__BASE = @as(u32, 1366);
pub const DISPID_SAX_DECLHANDLER = @as(u32, 1366);
pub const DISPID_SAX_DECLHANDLER_ELEMENTDECL = @as(u32, 1367);
pub const DISPID_SAX_DECLHANDLER_ATTRIBUTEDECL = @as(u32, 1368);
pub const DISPID_SAX_DECLHANDLER_INTERNALENTITYDECL = @as(u32, 1369);
pub const DISPID_SAX_DECLHANDLER_EXTERNALENTITYDECL = @as(u32, 1370);
pub const DISPID_SAX_DECLHANDLER__TOP = @as(u32, 1371);
pub const DISPID_MX_ATTRIBUTES__BASE = @as(u32, 1372);
pub const DISPID_MX_ATTRIBUTES = @as(u32, 1372);
pub const DISPID_MX_ATTRIBUTES_ADDATTRIBUTE = @as(u32, 1373);
pub const DISPID_MX_ATTRIBUTES_CLEAR = @as(u32, 1374);
pub const DISPID_MX_ATTRIBUTES_REMOVEATTRIBUTE = @as(u32, 1375);
pub const DISPID_MX_ATTRIBUTES_SETATTRIBUTE = @as(u32, 1376);
pub const DISPID_MX_ATTRIBUTES_SETATTRIBUTES = @as(u32, 1377);
pub const DISPID_MX_ATTRIBUTES_SETLOCALNAME = @as(u32, 1378);
pub const DISPID_MX_ATTRIBUTES_SETQNAME = @as(u32, 1379);
pub const DISPID_MX_ATTRIBUTES_SETTYPE = @as(u32, 1380);
pub const DISPID_MX_ATTRIBUTES_SETURI = @as(u32, 1381);
pub const DISPID_MX_ATTRIBUTES_SETVALUE = @as(u32, 1382);
pub const DISPID_MX_ATTRIBUTES_ADDATTRIBUTEFROMINDEX = @as(u32, 1383);
pub const DISPID_MX_ATTRIBUTES__TOP = @as(u32, 1383);
pub const DISPID_MX_WRITER__BASE = @as(u32, 1384);
pub const DISPID_MX_WRITER = @as(u32, 1384);
pub const DISPID_MX_WRITER_OUTPUT = @as(u32, 1385);
pub const DISPID_MX_WRITER_DESTINATION = @as(u32, 1386);
pub const DISPID_MX_WRITER_ENCODING = @as(u32, 1387);
pub const DISPID_MX_WRITER_BYTEORDERMARK = @as(u32, 1388);
pub const DISPID_MX_WRITER_INDENT = @as(u32, 1389);
pub const DISPID_MX_WRITER_STANDALONE = @as(u32, 1390);
pub const DISPID_MX_WRITER_OMITXMLDECLARATION = @as(u32, 1391);
pub const DISPID_MX_WRITER_VERSION = @as(u32, 1392);
pub const DISPID_MX_WRITER_DISABLEOUTPUTESCAPING = @as(u32, 1393);
pub const DISPID_MX_WRITER_FLUSH = @as(u32, 1394);
pub const DISPID_MX_WRITER_RESET = @as(u32, 1395);
pub const DISPID_MX_WRITER__TOP = @as(u32, 1396);
pub const DISPID_MX_READER_CONTROL__BASE = @as(u32, 1397);
pub const DISPID_MX_READER_CONTROL = @as(u32, 1397);
pub const DISPID_MX_READER_CONTROL_ABORT = @as(u32, 1398);
pub const DISPID_MX_READER_CONTROL_RESUME = @as(u32, 1399);
pub const DISPID_MX_READER_CONTROL_SUSPEND = @as(u32, 1400);
pub const DISPID_MX_READER_CONTROL__TOP = @as(u32, 1401);
pub const DISPID_MX_SCHEMADECLHANDLER__BASE = @as(u32, 1402);
pub const DISPID_MX_SCHEMADECLHANDLER = @as(u32, 1402);
pub const DISPID_MX_SCHEMADECLHANDLER_SCHEMAELEMENTDECL = @as(u32, 1403);
pub const DISPID_MX_SCHEMADECLHANDLER__TOP = @as(u32, 1404);
pub const DISPID_MX_NSMGR__BASE = @as(u32, 1405);
pub const DISPID_MX_NSMGR = @as(u32, 1405);
pub const DISPID_MX_NSMGR_ALLOWOVERRIDE = @as(u32, 1406);
pub const DISPID_MX_NSMGR_RESET = @as(u32, 1407);
pub const DISPID_MX_NSMGR_PUSHCONTEXT = @as(u32, 1408);
pub const DISPID_MX_NSMGR_PUSHNODECONTEXT = @as(u32, 1409);
pub const DISPID_MX_NSMGR_POPCONTEXT = @as(u32, 1410);
pub const DISPID_MX_NSMGR_DECLAREPREFIX = @as(u32, 1411);
pub const DISPID_MX_NSMGR_GETDECLAREDPREFIXES = @as(u32, 1412);
pub const DISPID_MX_NSMGR_GETPREFIXES = @as(u32, 1413);
pub const DISPID_MX_NSMGR_GETURI = @as(u32, 1414);
pub const DISPID_MX_NSMGR_GETURIFROMNODE = @as(u32, 1415);
pub const DISPID_MX_NSMGR_LENGTH = @as(u32, 1416);
pub const DISPID_MX_NSMGR__TOP = @as(u32, 1417);
pub const DISPID_MXXML_FILTER__BASE = @as(u32, 1418);
pub const DISPID_MXXML_FILTER = @as(u32, 1418);
pub const DISPID_MXXML_FILTER_CONTENTHANDLER = @as(u32, 1419);
pub const DISPID_MXXML_FILTER_DTDHANDLER = @as(u32, 1420);
pub const DISPID_MXXML_FILTER_ENTITYRESOLVER = @as(u32, 1421);
pub const DISPID_MXXML_FILTER_ERRORHANDLER = @as(u32, 1422);
pub const DISPID_MXXML_FILTER_GETFEATURE = @as(u32, 1423);
pub const DISPID_MXXML_FILTER_GETPROPERTY = @as(u32, 1424);
pub const DISPID_MXXML_FILTER_PUTFEATURE = @as(u32, 1425);
pub const DISPID_MXXML_FILTER_PUTPROPERTY = @as(u32, 1426);
pub const DISPID_MXXML_FILTER__TOP = @as(u32, 1427);
pub const DISPID_SOM = @as(u32, 1418);
pub const DISPID_SOM_VALIDATE = @as(u32, 1419);
pub const DISPID_SOM_VALIDATEONLOAD = @as(u32, 1420);
pub const DISPID_SOM_GETSCHEMA = @as(u32, 1421);
pub const DISPID_SOM_GETDECLARATION = @as(u32, 1422);
pub const DISPID_SOM_ITEMBYNAME = @as(u32, 1423);
pub const DISPID_SOM_ITEMBYQNAME = @as(u32, 1424);
pub const DISPID_SOM_ANYATTRIBUTE = @as(u32, 1425);
pub const DISPID_SOM_ATTRIBUTEGROUPS = @as(u32, 1426);
pub const DISPID_SOM_ATTRIBUTES = @as(u32, 1427);
pub const DISPID_SOM_BASETYPES = @as(u32, 1428);
pub const DISPID_SOM_CONTENTMODEL = @as(u32, 1429);
pub const DISPID_SOM_CONTENTTYPE = @as(u32, 1430);
pub const DISPID_SOM_DEFAULTVALUE = @as(u32, 1431);
pub const DISPID_SOM_DERIVEDBY = @as(u32, 1432);
pub const DISPID_SOM_DISALLOWED = @as(u32, 1433);
pub const DISPID_SOM_ELEMENTS = @as(u32, 1434);
pub const DISPID_SOM_ENUMERATION = @as(u32, 1435);
pub const DISPID_SOM_FIELDS = @as(u32, 1436);
pub const DISPID_SOM_FINAL = @as(u32, 1437);
pub const DISPID_SOM_FIXEDVALUE = @as(u32, 1438);
pub const DISPID_SOM_FRACTIONDIGITS = @as(u32, 1439);
pub const DISPID_SOM_ID = @as(u32, 1440);
pub const DISPID_SOM_IDCONSTRAINTS = @as(u32, 1441);
pub const DISPID_SOM_ISABSTRACT = @as(u32, 1442);
pub const DISPID_SOM_ISNILLABLE = @as(u32, 1443);
pub const DISPID_SOM_ISREFERENCE = @as(u32, 1444);
pub const DISPID_SOM_ISVALID = @as(u32, 1445);
pub const DISPID_SOM_ITEMTYPE = @as(u32, 1446);
pub const DISPID_SOM_LENGTH = @as(u32, 1447);
pub const DISPID_SOM_MAXEXCLUSIVE = @as(u32, 1448);
pub const DISPID_SOM_MAXINCLUSIVE = @as(u32, 1449);
pub const DISPID_SOM_MAXLENGTH = @as(u32, 1450);
pub const DISPID_SOM_MAXOCCURS = @as(u32, 1451);
pub const DISPID_SOM_MINEXCLUSIVE = @as(u32, 1452);
pub const DISPID_SOM_MININCLUSIVE = @as(u32, 1453);
pub const DISPID_SOM_MINLENGTH = @as(u32, 1454);
pub const DISPID_SOM_MINOCCURS = @as(u32, 1455);
pub const DISPID_SOM_MODELGROUPS = @as(u32, 1456);
pub const DISPID_SOM_NAME = @as(u32, 1457);
pub const DISPID_SOM_NAMESPACES = @as(u32, 1458);
pub const DISPID_SOM_NAMESPACEURI = @as(u32, 1459);
pub const DISPID_SOM_NOTATIONS = @as(u32, 1460);
pub const DISPID_SOM_PARTICLES = @as(u32, 1461);
pub const DISPID_SOM_PATTERNS = @as(u32, 1462);
pub const DISPID_SOM_PROCESSCONTENTS = @as(u32, 1463);
pub const DISPID_SOM_PROHIBITED = @as(u32, 1464);
pub const DISPID_SOM_PUBLICIDENTIFIER = @as(u32, 1465);
pub const DISPID_SOM_REFERENCEDKEY = @as(u32, 1466);
pub const DISPID_SOM_SCHEMA = @as(u32, 1467);
pub const DISPID_SOM_SCHEMALOCATIONS = @as(u32, 1468);
pub const DISPID_SOM_SCOPE = @as(u32, 1469);
pub const DISPID_SOM_SELECTOR = @as(u32, 1470);
pub const DISPID_SOM_SUBSTITUTIONGROUP = @as(u32, 1471);
pub const DISPID_SOM_EXCLUSIONS = @as(u32, 1472);
pub const DISPID_SOM_SYSTEMIDENTIFIER = @as(u32, 1473);
pub const DISPID_SOM_TARGETNAMESPACE = @as(u32, 1474);
pub const DISPID_SOM_TOTALDIGITS = @as(u32, 1475);
pub const DISPID_SOM_TYPE = @as(u32, 1476);
pub const DISPID_SOM_TYPES = @as(u32, 1477);
pub const DISPID_SOM_UNHANDLEDATTRS = @as(u32, 1478);
pub const DISPID_SOM_USE = @as(u32, 1479);
pub const DISPID_SOM_VARIETY = @as(u32, 1480);
pub const DISPID_SOM_VERSION = @as(u32, 1481);
pub const DISPID_SOM_WHITESPACE = @as(u32, 1482);
pub const DISPID_SOM_WRITEANNOTATION = @as(u32, 1483);
pub const DISPID_SOM_TOP = @as(u32, 1484);
pub const DISPID_XMLDSIG = @as(u32, 1);
pub const DISPID_XMLDSIG_CREATEKEYFROMCSP = @as(u32, 1);
pub const DISPID_XMLDSIG_CREATEKEYFROMHMACSECRET = @as(u32, 2);
pub const DISPID_XMLDSIG_CREATEKEYFROMNODE = @as(u32, 3);
pub const DISPID_XMLDSIG_CREATESAXPROXY = @as(u32, 4);
pub const DISPID_XMLDSIG_GETVERIFYINGCERTIFICATE = @as(u32, 5);
pub const DISPID_XMLDSIG_SETREFERENCEDATA = @as(u32, 6);
pub const DISPID_XMLDSIG_SIGN = @as(u32, 7);
pub const DISPID_XMLDSIG_SIGNATURE = @as(u32, 8);
pub const DISPID_XMLDSIG_STORE = @as(u32, 9);
pub const DISPID_XMLDSIG_VERIFY = @as(u32, 10);

//--------------------------------------------------------------------------------
// Section: Types (127)
//--------------------------------------------------------------------------------
const CLSID_DOMDocument_Value = Guid.initString("2933bf90-7b36-11d2-b20e-00c04f983e60");
pub const CLSID_DOMDocument = &CLSID_DOMDocument_Value;

const CLSID_DOMFreeThreadedDocument_Value = Guid.initString("2933bf91-7b36-11d2-b20e-00c04f983e60");
pub const CLSID_DOMFreeThreadedDocument = &CLSID_DOMFreeThreadedDocument_Value;

const CLSID_XMLHTTPRequest_Value = Guid.initString("ed8c108e-4349-11d2-91a4-00c04f7969e8");
pub const CLSID_XMLHTTPRequest = &CLSID_XMLHTTPRequest_Value;

const CLSID_XMLDSOControl_Value = Guid.initString("550dda30-0541-11d2-9ca9-0060b0ec3d39");
pub const CLSID_XMLDSOControl = &CLSID_XMLDSOControl_Value;

const CLSID_XMLDocument_Value = Guid.initString("cfc399af-d876-11d0-9c10-00c04fc99c8e");
pub const CLSID_XMLDocument = &CLSID_XMLDocument_Value;

pub const XML_ERROR = extern struct {
    _nLine: u32,
    _pchBuf: ?BSTR,
    _cchBuf: u32,
    _ich: u32,
    _pszFound: ?BSTR,
    _pszExpected: ?BSTR,
    _reserved1: u32,
    _reserved2: u32,
};

pub const DOMNodeType = enum(i32) {
    INVALID = 0,
    ELEMENT = 1,
    ATTRIBUTE = 2,
    TEXT = 3,
    CDATA_SECTION = 4,
    ENTITY_REFERENCE = 5,
    ENTITY = 6,
    PROCESSING_INSTRUCTION = 7,
    COMMENT = 8,
    DOCUMENT = 9,
    DOCUMENT_TYPE = 10,
    DOCUMENT_FRAGMENT = 11,
    NOTATION = 12,
};
pub const NODE_INVALID = DOMNodeType.INVALID;
pub const NODE_ELEMENT = DOMNodeType.ELEMENT;
pub const NODE_ATTRIBUTE = DOMNodeType.ATTRIBUTE;
pub const NODE_TEXT = DOMNodeType.TEXT;
pub const NODE_CDATA_SECTION = DOMNodeType.CDATA_SECTION;
pub const NODE_ENTITY_REFERENCE = DOMNodeType.ENTITY_REFERENCE;
pub const NODE_ENTITY = DOMNodeType.ENTITY;
pub const NODE_PROCESSING_INSTRUCTION = DOMNodeType.PROCESSING_INSTRUCTION;
pub const NODE_COMMENT = DOMNodeType.COMMENT;
pub const NODE_DOCUMENT = DOMNodeType.DOCUMENT;
pub const NODE_DOCUMENT_TYPE = DOMNodeType.DOCUMENT_TYPE;
pub const NODE_DOCUMENT_FRAGMENT = DOMNodeType.DOCUMENT_FRAGMENT;
pub const NODE_NOTATION = DOMNodeType.NOTATION;

pub const XMLEMEM_TYPE = enum(i32) {
    ELEMENT = 0,
    TEXT = 1,
    COMMENT = 2,
    DOCUMENT = 3,
    DTD = 4,
    PI = 5,
    OTHER = 6,
};
pub const XMLELEMTYPE_ELEMENT = XMLEMEM_TYPE.ELEMENT;
pub const XMLELEMTYPE_TEXT = XMLEMEM_TYPE.TEXT;
pub const XMLELEMTYPE_COMMENT = XMLEMEM_TYPE.COMMENT;
pub const XMLELEMTYPE_DOCUMENT = XMLEMEM_TYPE.DOCUMENT;
pub const XMLELEMTYPE_DTD = XMLEMEM_TYPE.DTD;
pub const XMLELEMTYPE_PI = XMLEMEM_TYPE.PI;
pub const XMLELEMTYPE_OTHER = XMLEMEM_TYPE.OTHER;

const IID_IXMLDOMImplementation_Value = Guid.initString("2933bf8f-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMImplementation = &IID_IXMLDOMImplementation_Value;
pub const IXMLDOMImplementation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        hasFeature: *const fn (
            self: *const IXMLDOMImplementation,
            feature: ?BSTR,
            version: ?BSTR,
            has_feature: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn hasFeature(self: *const T, feature_: ?BSTR, version_: ?BSTR, has_feature_: ?*i16) HRESULT {
                return @as(*const IXMLDOMImplementation.VTable, @ptrCast(self.vtable)).hasFeature(@as(*const IXMLDOMImplementation, @ptrCast(self)), feature_, version_, has_feature_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMNode_Value = Guid.initString("2933bf80-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMNode = &IID_IXMLDOMNode_Value;
pub const IXMLDOMNode = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nodeValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            type: ?*DOMNodeType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parentNode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            parent: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_childNodes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            child_list: ?*?*IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_firstChild: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            first_child: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lastChild: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            last_child: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_previousSibling: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            previous_sibling: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nextSibling: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            next_sibling: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            attribute_map: ?*?*IXMLDOMNamedNodeMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        insertBefore: *const fn (
            self: *const IXMLDOMNode,
            new_child: ?*IXMLDOMNode,
            ref_child: VARIANT,
            out_new_child: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        replaceChild: *const fn (
            self: *const IXMLDOMNode,
            new_child: ?*IXMLDOMNode,
            old_child: ?*IXMLDOMNode,
            out_old_child: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeChild: *const fn (
            self: *const IXMLDOMNode,
            child_node: ?*IXMLDOMNode,
            old_child: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        appendChild: *const fn (
            self: *const IXMLDOMNode,
            new_child: ?*IXMLDOMNode,
            out_new_child: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        hasChildNodes: *const fn (
            self: *const IXMLDOMNode,
            has_child: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerDocument: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            x_m_l_d_o_m_document: ?*?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        cloneNode: *const fn (
            self: *const IXMLDOMNode,
            deep: i16,
            clone_root: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeTypeString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            node_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_specified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            is_specified: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_definition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            definition_node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_nodeTypedValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            typed_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_nodeTypedValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            typed_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dataType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            data_type_name: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_dataType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            data_type_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_xml: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            xml_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        transformNode: *const fn (
            self: *const IXMLDOMNode,
            stylesheet: ?*IXMLDOMNode,
            xml_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        selectNodes: *const fn (
            self: *const IXMLDOMNode,
            query_string: ?BSTR,
            result_list: ?*?*IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        selectSingleNode: *const fn (
            self: *const IXMLDOMNode,
            query_string: ?BSTR,
            result_node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parsed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            is_parsed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaceURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            namespace_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_prefix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            prefix_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNode,
            name_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        transformNodeToObject: *const fn (
            self: *const IXMLDOMNode,
            stylesheet: ?*IXMLDOMNode,
            output_object: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNodeName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_nodeName(@as(*const IXMLDOMNode, @ptrCast(self)), name_);
            }
            pub inline fn getNodeValue(self: *const T, value_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_nodeValue(@as(*const IXMLDOMNode, @ptrCast(self)), value_);
            }
            pub inline fn putNodeValue(self: *const T, value_: VARIANT) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).put_nodeValue(@as(*const IXMLDOMNode, @ptrCast(self)), value_);
            }
            pub inline fn getNodeType(self: *const T, type_: ?*DOMNodeType) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_nodeType(@as(*const IXMLDOMNode, @ptrCast(self)), type_);
            }
            pub inline fn getParentNode(self: *const T, parent_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_parentNode(@as(*const IXMLDOMNode, @ptrCast(self)), parent_);
            }
            pub inline fn getChildNodes(self: *const T, child_list_: ?*?*IXMLDOMNodeList) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_childNodes(@as(*const IXMLDOMNode, @ptrCast(self)), child_list_);
            }
            pub inline fn getFirstChild(self: *const T, first_child_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_firstChild(@as(*const IXMLDOMNode, @ptrCast(self)), first_child_);
            }
            pub inline fn getLastChild(self: *const T, last_child_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_lastChild(@as(*const IXMLDOMNode, @ptrCast(self)), last_child_);
            }
            pub inline fn getPreviousSibling(self: *const T, previous_sibling_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_previousSibling(@as(*const IXMLDOMNode, @ptrCast(self)), previous_sibling_);
            }
            pub inline fn getNextSibling(self: *const T, next_sibling_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_nextSibling(@as(*const IXMLDOMNode, @ptrCast(self)), next_sibling_);
            }
            pub inline fn getAttributes(self: *const T, attribute_map_: ?*?*IXMLDOMNamedNodeMap) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_attributes(@as(*const IXMLDOMNode, @ptrCast(self)), attribute_map_);
            }
            pub inline fn insertBefore(self: *const T, new_child_: ?*IXMLDOMNode, ref_child_: VARIANT, out_new_child_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).insertBefore(@as(*const IXMLDOMNode, @ptrCast(self)), new_child_, ref_child_, out_new_child_);
            }
            pub inline fn replaceChild(self: *const T, new_child_: ?*IXMLDOMNode, old_child_: ?*IXMLDOMNode, out_old_child_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).replaceChild(@as(*const IXMLDOMNode, @ptrCast(self)), new_child_, old_child_, out_old_child_);
            }
            pub inline fn removeChild(self: *const T, child_node_: ?*IXMLDOMNode, old_child_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).removeChild(@as(*const IXMLDOMNode, @ptrCast(self)), child_node_, old_child_);
            }
            pub inline fn appendChild(self: *const T, new_child_: ?*IXMLDOMNode, out_new_child_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).appendChild(@as(*const IXMLDOMNode, @ptrCast(self)), new_child_, out_new_child_);
            }
            pub inline fn hasChildNodes(self: *const T, has_child_: ?*i16) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).hasChildNodes(@as(*const IXMLDOMNode, @ptrCast(self)), has_child_);
            }
            pub inline fn getOwnerDocument(self: *const T, x_m_l_d_o_m_document_: ?*?*IXMLDOMDocument) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_ownerDocument(@as(*const IXMLDOMNode, @ptrCast(self)), x_m_l_d_o_m_document_);
            }
            pub inline fn cloneNode(self: *const T, deep_: i16, clone_root_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).cloneNode(@as(*const IXMLDOMNode, @ptrCast(self)), deep_, clone_root_);
            }
            pub inline fn getNodeTypeString(self: *const T, node_type_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_nodeTypeString(@as(*const IXMLDOMNode, @ptrCast(self)), node_type_);
            }
            pub inline fn getText(self: *const T, text_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_text(@as(*const IXMLDOMNode, @ptrCast(self)), text_);
            }
            pub inline fn putText(self: *const T, text_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).put_text(@as(*const IXMLDOMNode, @ptrCast(self)), text_);
            }
            pub inline fn getSpecified(self: *const T, is_specified_: ?*i16) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_specified(@as(*const IXMLDOMNode, @ptrCast(self)), is_specified_);
            }
            pub inline fn getDefinition(self: *const T, definition_node_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_definition(@as(*const IXMLDOMNode, @ptrCast(self)), definition_node_);
            }
            pub inline fn getNodeTypedValue(self: *const T, typed_value_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_nodeTypedValue(@as(*const IXMLDOMNode, @ptrCast(self)), typed_value_);
            }
            pub inline fn putNodeTypedValue(self: *const T, typed_value_: VARIANT) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).put_nodeTypedValue(@as(*const IXMLDOMNode, @ptrCast(self)), typed_value_);
            }
            pub inline fn getDataType(self: *const T, data_type_name_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_dataType(@as(*const IXMLDOMNode, @ptrCast(self)), data_type_name_);
            }
            pub inline fn putDataType(self: *const T, data_type_name_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).put_dataType(@as(*const IXMLDOMNode, @ptrCast(self)), data_type_name_);
            }
            pub inline fn getXml(self: *const T, xml_string_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_xml(@as(*const IXMLDOMNode, @ptrCast(self)), xml_string_);
            }
            pub inline fn transformNode(self: *const T, stylesheet_: ?*IXMLDOMNode, xml_string_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).transformNode(@as(*const IXMLDOMNode, @ptrCast(self)), stylesheet_, xml_string_);
            }
            pub inline fn selectNodes(self: *const T, query_string_: ?BSTR, result_list_: ?*?*IXMLDOMNodeList) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).selectNodes(@as(*const IXMLDOMNode, @ptrCast(self)), query_string_, result_list_);
            }
            pub inline fn selectSingleNode(self: *const T, query_string_: ?BSTR, result_node_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).selectSingleNode(@as(*const IXMLDOMNode, @ptrCast(self)), query_string_, result_node_);
            }
            pub inline fn getParsed(self: *const T, is_parsed_: ?*i16) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_parsed(@as(*const IXMLDOMNode, @ptrCast(self)), is_parsed_);
            }
            pub inline fn getNamespaceURI(self: *const T, namespace_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_namespaceURI(@as(*const IXMLDOMNode, @ptrCast(self)), namespace_u_r_i_);
            }
            pub inline fn getPrefix(self: *const T, prefix_string_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_prefix(@as(*const IXMLDOMNode, @ptrCast(self)), prefix_string_);
            }
            pub inline fn getBaseName(self: *const T, name_string_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).get_baseName(@as(*const IXMLDOMNode, @ptrCast(self)), name_string_);
            }
            pub inline fn transformNodeToObject(self: *const T, stylesheet_: ?*IXMLDOMNode, output_object_: VARIANT) HRESULT {
                return @as(*const IXMLDOMNode.VTable, @ptrCast(self.vtable)).transformNodeToObject(@as(*const IXMLDOMNode, @ptrCast(self)), stylesheet_, output_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMDocumentFragment_Value = Guid.initString("3efaa413-272f-11d2-836f-0000f87a7782");
pub const IID_IXMLDOMDocumentFragment = &IID_IXMLDOMDocumentFragment_Value;
pub const IXMLDOMDocumentFragment = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMDocument_Value = Guid.initString("2933bf81-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMDocument = &IID_IXMLDOMDocument_Value;
pub const IXMLDOMDocument = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_doctype: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            document_type: ?*?*IXMLDOMDocumentType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_implementation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            impl: ?*?*IXMLDOMImplementation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_documentElement: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            d_o_m_element: ?*?*IXMLDOMElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_documentElement: *const fn (
            self: *const IXMLDOMDocument,
            d_o_m_element: ?*IXMLDOMElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createElement: *const fn (
            self: *const IXMLDOMDocument,
            tag_name: ?BSTR,
            element: ?*?*IXMLDOMElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createDocumentFragment: *const fn (
            self: *const IXMLDOMDocument,
            doc_frag: ?*?*IXMLDOMDocumentFragment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createTextNode: *const fn (
            self: *const IXMLDOMDocument,
            data: ?BSTR,
            text: ?*?*IXMLDOMText,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createComment: *const fn (
            self: *const IXMLDOMDocument,
            data: ?BSTR,
            comment: ?*?*IXMLDOMComment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createCDATASection: *const fn (
            self: *const IXMLDOMDocument,
            data: ?BSTR,
            cdata: ?*?*IXMLDOMCDATASection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createProcessingInstruction: *const fn (
            self: *const IXMLDOMDocument,
            target: ?BSTR,
            data: ?BSTR,
            pi: ?*?*IXMLDOMProcessingInstruction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createAttribute: *const fn (
            self: *const IXMLDOMDocument,
            name: ?BSTR,
            attribute: ?*?*IXMLDOMAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createEntityReference: *const fn (
            self: *const IXMLDOMDocument,
            name: ?BSTR,
            entity_ref: ?*?*IXMLDOMEntityReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getElementsByTagName: *const fn (
            self: *const IXMLDOMDocument,
            tag_name: ?BSTR,
            result_list: ?*?*IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createNode: *const fn (
            self: *const IXMLDOMDocument,
            type: VARIANT,
            name: ?BSTR,
            namespace_u_r_i: ?BSTR,
            node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        nodeFromID: *const fn (
            self: *const IXMLDOMDocument,
            id_string: ?BSTR,
            node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        load: *const fn (
            self: *const IXMLDOMDocument,
            xml_source: VARIANT,
            is_successful: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parseError: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            error_obj: ?*?*IXMLDOMParseError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_url: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            url_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_async: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            is_async: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_async: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            is_async: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        abort: *const fn (
            self: *const IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        loadXML: *const fn (
            self: *const IXMLDOMDocument,
            bstr_x_m_l: ?BSTR,
            is_successful: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        save: *const fn (
            self: *const IXMLDOMDocument,
            destination: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_validateOnParse: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            is_validating: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_validateOnParse: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            is_validating: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_resolveExternals: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            is_resolving: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_resolveExternals: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            is_resolving: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_preserveWhiteSpace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            is_preserving: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_preserveWhiteSpace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            is_preserving: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            readystatechange_sink: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ondataavailable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            ondataavailable_sink: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ontransformnode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument,
            ontransformnode_sink: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
            pub inline fn getDoctype(self: *const T, document_type_: ?*?*IXMLDOMDocumentType) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_doctype(@as(*const IXMLDOMDocument, @ptrCast(self)), document_type_);
            }
            pub inline fn getImplementation(self: *const T, impl_: ?*?*IXMLDOMImplementation) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_implementation(@as(*const IXMLDOMDocument, @ptrCast(self)), impl_);
            }
            pub inline fn getDocumentElement(self: *const T, d_o_m_element_: ?*?*IXMLDOMElement) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_documentElement(@as(*const IXMLDOMDocument, @ptrCast(self)), d_o_m_element_);
            }
            pub inline fn putrefDocumentElement(self: *const T, d_o_m_element_: ?*IXMLDOMElement) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).putref_documentElement(@as(*const IXMLDOMDocument, @ptrCast(self)), d_o_m_element_);
            }
            pub inline fn createElement(self: *const T, tag_name_: ?BSTR, element_: ?*?*IXMLDOMElement) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).createElement(@as(*const IXMLDOMDocument, @ptrCast(self)), tag_name_, element_);
            }
            pub inline fn createDocumentFragment(self: *const T, doc_frag_: ?*?*IXMLDOMDocumentFragment) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).createDocumentFragment(@as(*const IXMLDOMDocument, @ptrCast(self)), doc_frag_);
            }
            pub inline fn createTextNode(self: *const T, data_: ?BSTR, text_: ?*?*IXMLDOMText) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).createTextNode(@as(*const IXMLDOMDocument, @ptrCast(self)), data_, text_);
            }
            pub inline fn createComment(self: *const T, data_: ?BSTR, comment_: ?*?*IXMLDOMComment) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).createComment(@as(*const IXMLDOMDocument, @ptrCast(self)), data_, comment_);
            }
            pub inline fn createCDATASection(self: *const T, data_: ?BSTR, cdata_: ?*?*IXMLDOMCDATASection) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).createCDATASection(@as(*const IXMLDOMDocument, @ptrCast(self)), data_, cdata_);
            }
            pub inline fn createProcessingInstruction(self: *const T, target_: ?BSTR, data_: ?BSTR, pi_: ?*?*IXMLDOMProcessingInstruction) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).createProcessingInstruction(@as(*const IXMLDOMDocument, @ptrCast(self)), target_, data_, pi_);
            }
            pub inline fn createAttribute(self: *const T, name_: ?BSTR, attribute_: ?*?*IXMLDOMAttribute) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).createAttribute(@as(*const IXMLDOMDocument, @ptrCast(self)), name_, attribute_);
            }
            pub inline fn createEntityReference(self: *const T, name_: ?BSTR, entity_ref_: ?*?*IXMLDOMEntityReference) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).createEntityReference(@as(*const IXMLDOMDocument, @ptrCast(self)), name_, entity_ref_);
            }
            pub inline fn getElementsByTagName(self: *const T, tag_name_: ?BSTR, result_list_: ?*?*IXMLDOMNodeList) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).getElementsByTagName(@as(*const IXMLDOMDocument, @ptrCast(self)), tag_name_, result_list_);
            }
            pub inline fn createNode(self: *const T, type_: VARIANT, name_: ?BSTR, namespace_u_r_i_: ?BSTR, node_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).createNode(@as(*const IXMLDOMDocument, @ptrCast(self)), type_, name_, namespace_u_r_i_, node_);
            }
            pub inline fn nodeFromID(self: *const T, id_string_: ?BSTR, node_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).nodeFromID(@as(*const IXMLDOMDocument, @ptrCast(self)), id_string_, node_);
            }
            pub inline fn load(self: *const T, xml_source_: VARIANT, is_successful_: ?*i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).load(@as(*const IXMLDOMDocument, @ptrCast(self)), xml_source_, is_successful_);
            }
            pub inline fn getReadyState(self: *const T, value_: ?*i32) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_readyState(@as(*const IXMLDOMDocument, @ptrCast(self)), value_);
            }
            pub inline fn getParseError(self: *const T, error_obj_: ?*?*IXMLDOMParseError) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_parseError(@as(*const IXMLDOMDocument, @ptrCast(self)), error_obj_);
            }
            pub inline fn getUrl(self: *const T, url_string_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_url(@as(*const IXMLDOMDocument, @ptrCast(self)), url_string_);
            }
            pub inline fn getAsync(self: *const T, is_async_: ?*i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_async(@as(*const IXMLDOMDocument, @ptrCast(self)), is_async_);
            }
            pub inline fn putAsync(self: *const T, is_async_: i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).put_async(@as(*const IXMLDOMDocument, @ptrCast(self)), is_async_);
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).abort(@as(*const IXMLDOMDocument, @ptrCast(self)));
            }
            pub inline fn loadXML(self: *const T, bstr_x_m_l_: ?BSTR, is_successful_: ?*i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).loadXML(@as(*const IXMLDOMDocument, @ptrCast(self)), bstr_x_m_l_, is_successful_);
            }
            pub inline fn save(self: *const T, destination_: VARIANT) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).save(@as(*const IXMLDOMDocument, @ptrCast(self)), destination_);
            }
            pub inline fn getValidateOnParse(self: *const T, is_validating_: ?*i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_validateOnParse(@as(*const IXMLDOMDocument, @ptrCast(self)), is_validating_);
            }
            pub inline fn putValidateOnParse(self: *const T, is_validating_: i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).put_validateOnParse(@as(*const IXMLDOMDocument, @ptrCast(self)), is_validating_);
            }
            pub inline fn getResolveExternals(self: *const T, is_resolving_: ?*i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_resolveExternals(@as(*const IXMLDOMDocument, @ptrCast(self)), is_resolving_);
            }
            pub inline fn putResolveExternals(self: *const T, is_resolving_: i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).put_resolveExternals(@as(*const IXMLDOMDocument, @ptrCast(self)), is_resolving_);
            }
            pub inline fn getPreserveWhiteSpace(self: *const T, is_preserving_: ?*i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).get_preserveWhiteSpace(@as(*const IXMLDOMDocument, @ptrCast(self)), is_preserving_);
            }
            pub inline fn putPreserveWhiteSpace(self: *const T, is_preserving_: i16) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).put_preserveWhiteSpace(@as(*const IXMLDOMDocument, @ptrCast(self)), is_preserving_);
            }
            pub inline fn putOnreadystatechange(self: *const T, readystatechange_sink_: VARIANT) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).put_onreadystatechange(@as(*const IXMLDOMDocument, @ptrCast(self)), readystatechange_sink_);
            }
            pub inline fn putOndataavailable(self: *const T, ondataavailable_sink_: VARIANT) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).put_ondataavailable(@as(*const IXMLDOMDocument, @ptrCast(self)), ondataavailable_sink_);
            }
            pub inline fn putOntransformnode(self: *const T, ontransformnode_sink_: VARIANT) HRESULT {
                return @as(*const IXMLDOMDocument.VTable, @ptrCast(self.vtable)).put_ontransformnode(@as(*const IXMLDOMDocument, @ptrCast(self)), ontransformnode_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMNodeList_Value = Guid.initString("2933bf82-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMNodeList = &IID_IXMLDOMNodeList_Value;
pub const IXMLDOMNodeList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNodeList,
            index: i32,
            list_item: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNodeList,
            list_length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        nextNode: *const fn (
            self: *const IXMLDOMNodeList,
            next_item: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn (
            self: *const IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNodeList,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, list_item_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNodeList.VTable, @ptrCast(self.vtable)).get_item(@as(*const IXMLDOMNodeList, @ptrCast(self)), index_, list_item_);
            }
            pub inline fn getLength(self: *const T, list_length_: ?*i32) HRESULT {
                return @as(*const IXMLDOMNodeList.VTable, @ptrCast(self.vtable)).get_length(@as(*const IXMLDOMNodeList, @ptrCast(self)), list_length_);
            }
            pub inline fn nextNode(self: *const T, next_item_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNodeList.VTable, @ptrCast(self.vtable)).nextNode(@as(*const IXMLDOMNodeList, @ptrCast(self)), next_item_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IXMLDOMNodeList.VTable, @ptrCast(self.vtable)).reset(@as(*const IXMLDOMNodeList, @ptrCast(self)));
            }
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IXMLDOMNodeList.VTable, @ptrCast(self.vtable)).get__newEnum(@as(*const IXMLDOMNodeList, @ptrCast(self)), pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMNamedNodeMap_Value = Guid.initString("2933bf83-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMNamedNodeMap = &IID_IXMLDOMNamedNodeMap_Value;
pub const IXMLDOMNamedNodeMap = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getNamedItem: *const fn (
            self: *const IXMLDOMNamedNodeMap,
            name: ?BSTR,
            named_item: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setNamedItem: *const fn (
            self: *const IXMLDOMNamedNodeMap,
            new_item: ?*IXMLDOMNode,
            name_item: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeNamedItem: *const fn (
            self: *const IXMLDOMNamedNodeMap,
            name: ?BSTR,
            named_item: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNamedNodeMap,
            index: i32,
            list_item: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNamedNodeMap,
            list_length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getQualifiedItem: *const fn (
            self: *const IXMLDOMNamedNodeMap,
            base_name: ?BSTR,
            namespace_u_r_i: ?BSTR,
            qualified_item: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeQualifiedItem: *const fn (
            self: *const IXMLDOMNamedNodeMap,
            base_name: ?BSTR,
            namespace_u_r_i: ?BSTR,
            qualified_item: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        nextNode: *const fn (
            self: *const IXMLDOMNamedNodeMap,
            next_item: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn (
            self: *const IXMLDOMNamedNodeMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNamedNodeMap,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNamedItem(self: *const T, name_: ?BSTR, named_item_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).getNamedItem(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)), name_, named_item_);
            }
            pub inline fn setNamedItem(self: *const T, new_item_: ?*IXMLDOMNode, name_item_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).setNamedItem(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)), new_item_, name_item_);
            }
            pub inline fn removeNamedItem(self: *const T, name_: ?BSTR, named_item_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).removeNamedItem(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)), name_, named_item_);
            }
            pub inline fn getItem(self: *const T, index_: i32, list_item_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).get_item(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)), index_, list_item_);
            }
            pub inline fn getLength(self: *const T, list_length_: ?*i32) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).get_length(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)), list_length_);
            }
            pub inline fn getQualifiedItem(self: *const T, base_name_: ?BSTR, namespace_u_r_i_: ?BSTR, qualified_item_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).getQualifiedItem(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)), base_name_, namespace_u_r_i_, qualified_item_);
            }
            pub inline fn removeQualifiedItem(self: *const T, base_name_: ?BSTR, namespace_u_r_i_: ?BSTR, qualified_item_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).removeQualifiedItem(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)), base_name_, namespace_u_r_i_, qualified_item_);
            }
            pub inline fn nextNode(self: *const T, next_item_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).nextNode(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)), next_item_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).reset(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)));
            }
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IXMLDOMNamedNodeMap.VTable, @ptrCast(self.vtable)).get__newEnum(@as(*const IXMLDOMNamedNodeMap, @ptrCast(self)), pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMCharacterData_Value = Guid.initString("2933bf84-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMCharacterData = &IID_IXMLDOMCharacterData_Value;
pub const IXMLDOMCharacterData = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMCharacterData,
            data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMCharacterData,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMCharacterData,
            data_length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        substringData: *const fn (
            self: *const IXMLDOMCharacterData,
            offset: i32,
            count: i32,
            data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        appendData: *const fn (
            self: *const IXMLDOMCharacterData,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        insertData: *const fn (
            self: *const IXMLDOMCharacterData,
            offset: i32,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        deleteData: *const fn (
            self: *const IXMLDOMCharacterData,
            offset: i32,
            count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        replaceData: *const fn (
            self: *const IXMLDOMCharacterData,
            offset: i32,
            count: i32,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
            pub inline fn getData(self: *const T, data_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMCharacterData.VTable, @ptrCast(self.vtable)).get_data(@as(*const IXMLDOMCharacterData, @ptrCast(self)), data_);
            }
            pub inline fn putData(self: *const T, data_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMCharacterData.VTable, @ptrCast(self.vtable)).put_data(@as(*const IXMLDOMCharacterData, @ptrCast(self)), data_);
            }
            pub inline fn getLength(self: *const T, data_length_: ?*i32) HRESULT {
                return @as(*const IXMLDOMCharacterData.VTable, @ptrCast(self.vtable)).get_length(@as(*const IXMLDOMCharacterData, @ptrCast(self)), data_length_);
            }
            pub inline fn substringData(self: *const T, offset_: i32, count_: i32, data_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMCharacterData.VTable, @ptrCast(self.vtable)).substringData(@as(*const IXMLDOMCharacterData, @ptrCast(self)), offset_, count_, data_);
            }
            pub inline fn appendData(self: *const T, data_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMCharacterData.VTable, @ptrCast(self.vtable)).appendData(@as(*const IXMLDOMCharacterData, @ptrCast(self)), data_);
            }
            pub inline fn insertData(self: *const T, offset_: i32, data_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMCharacterData.VTable, @ptrCast(self.vtable)).insertData(@as(*const IXMLDOMCharacterData, @ptrCast(self)), offset_, data_);
            }
            pub inline fn deleteData(self: *const T, offset_: i32, count_: i32) HRESULT {
                return @as(*const IXMLDOMCharacterData.VTable, @ptrCast(self.vtable)).deleteData(@as(*const IXMLDOMCharacterData, @ptrCast(self)), offset_, count_);
            }
            pub inline fn replaceData(self: *const T, offset_: i32, count_: i32, data_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMCharacterData.VTable, @ptrCast(self.vtable)).replaceData(@as(*const IXMLDOMCharacterData, @ptrCast(self)), offset_, count_, data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMAttribute_Value = Guid.initString("2933bf85-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMAttribute = &IID_IXMLDOMAttribute_Value;
pub const IXMLDOMAttribute = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMAttribute,
            attribute_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMAttribute,
            attribute_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMAttribute,
            attribute_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
            pub inline fn getName(self: *const T, attribute_name_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMAttribute.VTable, @ptrCast(self.vtable)).get_name(@as(*const IXMLDOMAttribute, @ptrCast(self)), attribute_name_);
            }
            pub inline fn getValue(self: *const T, attribute_value_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMAttribute.VTable, @ptrCast(self.vtable)).get_value(@as(*const IXMLDOMAttribute, @ptrCast(self)), attribute_value_);
            }
            pub inline fn putValue(self: *const T, attribute_value_: VARIANT) HRESULT {
                return @as(*const IXMLDOMAttribute.VTable, @ptrCast(self.vtable)).put_value(@as(*const IXMLDOMAttribute, @ptrCast(self)), attribute_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMElement_Value = Guid.initString("2933bf86-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMElement = &IID_IXMLDOMElement_Value;
pub const IXMLDOMElement = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMElement,
            tag_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttribute: *const fn (
            self: *const IXMLDOMElement,
            name: ?BSTR,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttribute: *const fn (
            self: *const IXMLDOMElement,
            name: ?BSTR,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttribute: *const fn (
            self: *const IXMLDOMElement,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttributeNode: *const fn (
            self: *const IXMLDOMElement,
            name: ?BSTR,
            attribute_node: ?*?*IXMLDOMAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttributeNode: *const fn (
            self: *const IXMLDOMElement,
            d_o_m_attribute: ?*IXMLDOMAttribute,
            attribute_node: ?*?*IXMLDOMAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttributeNode: *const fn (
            self: *const IXMLDOMElement,
            d_o_m_attribute: ?*IXMLDOMAttribute,
            attribute_node: ?*?*IXMLDOMAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getElementsByTagName: *const fn (
            self: *const IXMLDOMElement,
            tag_name: ?BSTR,
            result_list: ?*?*IXMLDOMNodeList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        normalize: *const fn (
            self: *const IXMLDOMElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
            pub inline fn getTagName(self: *const T, tag_name_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMElement.VTable, @ptrCast(self.vtable)).get_tagName(@as(*const IXMLDOMElement, @ptrCast(self)), tag_name_);
            }
            pub inline fn getAttribute(self: *const T, name_: ?BSTR, value_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMElement.VTable, @ptrCast(self.vtable)).getAttribute(@as(*const IXMLDOMElement, @ptrCast(self)), name_, value_);
            }
            pub inline fn setAttribute(self: *const T, name_: ?BSTR, value_: VARIANT) HRESULT {
                return @as(*const IXMLDOMElement.VTable, @ptrCast(self.vtable)).setAttribute(@as(*const IXMLDOMElement, @ptrCast(self)), name_, value_);
            }
            pub inline fn removeAttribute(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMElement.VTable, @ptrCast(self.vtable)).removeAttribute(@as(*const IXMLDOMElement, @ptrCast(self)), name_);
            }
            pub inline fn getAttributeNode(self: *const T, name_: ?BSTR, attribute_node_: ?*?*IXMLDOMAttribute) HRESULT {
                return @as(*const IXMLDOMElement.VTable, @ptrCast(self.vtable)).getAttributeNode(@as(*const IXMLDOMElement, @ptrCast(self)), name_, attribute_node_);
            }
            pub inline fn setAttributeNode(self: *const T, d_o_m_attribute_: ?*IXMLDOMAttribute, attribute_node_: ?*?*IXMLDOMAttribute) HRESULT {
                return @as(*const IXMLDOMElement.VTable, @ptrCast(self.vtable)).setAttributeNode(@as(*const IXMLDOMElement, @ptrCast(self)), d_o_m_attribute_, attribute_node_);
            }
            pub inline fn removeAttributeNode(self: *const T, d_o_m_attribute_: ?*IXMLDOMAttribute, attribute_node_: ?*?*IXMLDOMAttribute) HRESULT {
                return @as(*const IXMLDOMElement.VTable, @ptrCast(self.vtable)).removeAttributeNode(@as(*const IXMLDOMElement, @ptrCast(self)), d_o_m_attribute_, attribute_node_);
            }
            pub inline fn getElementsByTagName(self: *const T, tag_name_: ?BSTR, result_list_: ?*?*IXMLDOMNodeList) HRESULT {
                return @as(*const IXMLDOMElement.VTable, @ptrCast(self.vtable)).getElementsByTagName(@as(*const IXMLDOMElement, @ptrCast(self)), tag_name_, result_list_);
            }
            pub inline fn normalize(self: *const T) HRESULT {
                return @as(*const IXMLDOMElement.VTable, @ptrCast(self.vtable)).normalize(@as(*const IXMLDOMElement, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMText_Value = Guid.initString("2933bf87-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMText = &IID_IXMLDOMText_Value;
pub const IXMLDOMText = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMCharacterData.VTable,
        splitText: *const fn (
            self: *const IXMLDOMText,
            offset: i32,
            right_hand_text_node: ?*?*IXMLDOMText,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMCharacterData.MethodMixin(T);
            pub inline fn splitText(self: *const T, offset_: i32, right_hand_text_node_: ?*?*IXMLDOMText) HRESULT {
                return @as(*const IXMLDOMText.VTable, @ptrCast(self.vtable)).splitText(@as(*const IXMLDOMText, @ptrCast(self)), offset_, right_hand_text_node_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMComment_Value = Guid.initString("2933bf88-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMComment = &IID_IXMLDOMComment_Value;
pub const IXMLDOMComment = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMCharacterData.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMCharacterData.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMProcessingInstruction_Value = Guid.initString("2933bf89-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMProcessingInstruction = &IID_IXMLDOMProcessingInstruction_Value;
pub const IXMLDOMProcessingInstruction = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_target: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMProcessingInstruction,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMProcessingInstruction,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMProcessingInstruction,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
            pub inline fn getTarget(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMProcessingInstruction.VTable, @ptrCast(self.vtable)).get_target(@as(*const IXMLDOMProcessingInstruction, @ptrCast(self)), name_);
            }
            pub inline fn getData(self: *const T, value_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMProcessingInstruction.VTable, @ptrCast(self.vtable)).get_data(@as(*const IXMLDOMProcessingInstruction, @ptrCast(self)), value_);
            }
            pub inline fn putData(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMProcessingInstruction.VTable, @ptrCast(self.vtable)).put_data(@as(*const IXMLDOMProcessingInstruction, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMCDATASection_Value = Guid.initString("2933bf8a-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMCDATASection = &IID_IXMLDOMCDATASection_Value;
pub const IXMLDOMCDATASection = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMText.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMText.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMDocumentType_Value = Guid.initString("2933bf8b-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMDocumentType = &IID_IXMLDOMDocumentType_Value;
pub const IXMLDOMDocumentType = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocumentType,
            root_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_entities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocumentType,
            entity_map: ?*?*IXMLDOMNamedNodeMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_notations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocumentType,
            notation_map: ?*?*IXMLDOMNamedNodeMap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
            pub inline fn getName(self: *const T, root_name_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMDocumentType.VTable, @ptrCast(self.vtable)).get_name(@as(*const IXMLDOMDocumentType, @ptrCast(self)), root_name_);
            }
            pub inline fn getEntities(self: *const T, entity_map_: ?*?*IXMLDOMNamedNodeMap) HRESULT {
                return @as(*const IXMLDOMDocumentType.VTable, @ptrCast(self.vtable)).get_entities(@as(*const IXMLDOMDocumentType, @ptrCast(self)), entity_map_);
            }
            pub inline fn getNotations(self: *const T, notation_map_: ?*?*IXMLDOMNamedNodeMap) HRESULT {
                return @as(*const IXMLDOMDocumentType.VTable, @ptrCast(self.vtable)).get_notations(@as(*const IXMLDOMDocumentType, @ptrCast(self)), notation_map_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMNotation_Value = Guid.initString("2933bf8c-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMNotation = &IID_IXMLDOMNotation_Value;
pub const IXMLDOMNotation = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_publicId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNotation,
            public_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMNotation,
            system_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
            pub inline fn getPublicId(self: *const T, public_i_d_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMNotation.VTable, @ptrCast(self.vtable)).get_publicId(@as(*const IXMLDOMNotation, @ptrCast(self)), public_i_d_);
            }
            pub inline fn getSystemId(self: *const T, system_i_d_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMNotation.VTable, @ptrCast(self.vtable)).get_systemId(@as(*const IXMLDOMNotation, @ptrCast(self)), system_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMEntity_Value = Guid.initString("2933bf8d-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMEntity = &IID_IXMLDOMEntity_Value;
pub const IXMLDOMEntity = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_publicId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMEntity,
            public_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMEntity,
            system_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_notationName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMEntity,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
            pub inline fn getPublicId(self: *const T, public_i_d_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMEntity.VTable, @ptrCast(self.vtable)).get_publicId(@as(*const IXMLDOMEntity, @ptrCast(self)), public_i_d_);
            }
            pub inline fn getSystemId(self: *const T, system_i_d_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMEntity.VTable, @ptrCast(self.vtable)).get_systemId(@as(*const IXMLDOMEntity, @ptrCast(self)), system_i_d_);
            }
            pub inline fn getNotationName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMEntity.VTable, @ptrCast(self.vtable)).get_notationName(@as(*const IXMLDOMEntity, @ptrCast(self)), name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMEntityReference_Value = Guid.initString("2933bf8e-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMEntityReference = &IID_IXMLDOMEntityReference_Value;
pub const IXMLDOMEntityReference = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMParseError_Value = Guid.initString("3efaa426-272f-11d2-836f-0000f87a7782");
pub const IID_IXMLDOMParseError = &IID_IXMLDOMParseError_Value;
pub const IXMLDOMParseError = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError,
            error_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_url: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError,
            url_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_reason: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError,
            reason_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_srcText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError,
            source_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_line: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError,
            line_number: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_linepos: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError,
            line_position: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_filepos: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError,
            file_position: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getErrorCode(self: *const T, error_code_: ?*i32) HRESULT {
                return @as(*const IXMLDOMParseError.VTable, @ptrCast(self.vtable)).get_errorCode(@as(*const IXMLDOMParseError, @ptrCast(self)), error_code_);
            }
            pub inline fn getUrl(self: *const T, url_string_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMParseError.VTable, @ptrCast(self.vtable)).get_url(@as(*const IXMLDOMParseError, @ptrCast(self)), url_string_);
            }
            pub inline fn getReason(self: *const T, reason_string_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMParseError.VTable, @ptrCast(self.vtable)).get_reason(@as(*const IXMLDOMParseError, @ptrCast(self)), reason_string_);
            }
            pub inline fn getSrcText(self: *const T, source_string_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMParseError.VTable, @ptrCast(self.vtable)).get_srcText(@as(*const IXMLDOMParseError, @ptrCast(self)), source_string_);
            }
            pub inline fn getLine(self: *const T, line_number_: ?*i32) HRESULT {
                return @as(*const IXMLDOMParseError.VTable, @ptrCast(self.vtable)).get_line(@as(*const IXMLDOMParseError, @ptrCast(self)), line_number_);
            }
            pub inline fn getLinepos(self: *const T, line_position_: ?*i32) HRESULT {
                return @as(*const IXMLDOMParseError.VTable, @ptrCast(self.vtable)).get_linepos(@as(*const IXMLDOMParseError, @ptrCast(self)), line_position_);
            }
            pub inline fn getFilepos(self: *const T, file_position_: ?*i32) HRESULT {
                return @as(*const IXMLDOMParseError.VTable, @ptrCast(self.vtable)).get_filepos(@as(*const IXMLDOMParseError, @ptrCast(self)), file_position_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXTLRuntime_Value = Guid.initString("3efaa425-272f-11d2-836f-0000f87a7782");
pub const IID_IXTLRuntime = &IID_IXTLRuntime_Value;
pub const IXTLRuntime = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNode.VTable,
        uniqueID: *const fn (
            self: *const IXTLRuntime,
            p_node: ?*IXMLDOMNode,
            p_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        depth: *const fn (
            self: *const IXTLRuntime,
            p_node: ?*IXMLDOMNode,
            p_depth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        childNumber: *const fn (
            self: *const IXTLRuntime,
            p_node: ?*IXMLDOMNode,
            p_number: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ancestorChildNumber: *const fn (
            self: *const IXTLRuntime,
            bstr_node_name: ?BSTR,
            p_node: ?*IXMLDOMNode,
            p_number: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        absoluteChildNumber: *const fn (
            self: *const IXTLRuntime,
            p_node: ?*IXMLDOMNode,
            p_number: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        formatIndex: *const fn (
            self: *const IXTLRuntime,
            l_index: i32,
            bstr_format: ?BSTR,
            pbstr_formatted_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        formatNumber: *const fn (
            self: *const IXTLRuntime,
            dbl_number: f64,
            bstr_format: ?BSTR,
            pbstr_formatted_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        formatDate: *const fn (
            self: *const IXTLRuntime,
            var_date: VARIANT,
            bstr_format: ?BSTR,
            var_dest_locale: VARIANT,
            pbstr_formatted_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        formatTime: *const fn (
            self: *const IXTLRuntime,
            var_time: VARIANT,
            bstr_format: ?BSTR,
            var_dest_locale: VARIANT,
            pbstr_formatted_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNode.MethodMixin(T);
            pub inline fn uniqueID(self: *const T, p_node_: ?*IXMLDOMNode, p_i_d_: ?*i32) HRESULT {
                return @as(*const IXTLRuntime.VTable, @ptrCast(self.vtable)).uniqueID(@as(*const IXTLRuntime, @ptrCast(self)), p_node_, p_i_d_);
            }
            pub inline fn depth(self: *const T, p_node_: ?*IXMLDOMNode, p_depth_: ?*i32) HRESULT {
                return @as(*const IXTLRuntime.VTable, @ptrCast(self.vtable)).depth(@as(*const IXTLRuntime, @ptrCast(self)), p_node_, p_depth_);
            }
            pub inline fn childNumber(self: *const T, p_node_: ?*IXMLDOMNode, p_number_: ?*i32) HRESULT {
                return @as(*const IXTLRuntime.VTable, @ptrCast(self.vtable)).childNumber(@as(*const IXTLRuntime, @ptrCast(self)), p_node_, p_number_);
            }
            pub inline fn ancestorChildNumber(self: *const T, bstr_node_name_: ?BSTR, p_node_: ?*IXMLDOMNode, p_number_: ?*i32) HRESULT {
                return @as(*const IXTLRuntime.VTable, @ptrCast(self.vtable)).ancestorChildNumber(@as(*const IXTLRuntime, @ptrCast(self)), bstr_node_name_, p_node_, p_number_);
            }
            pub inline fn absoluteChildNumber(self: *const T, p_node_: ?*IXMLDOMNode, p_number_: ?*i32) HRESULT {
                return @as(*const IXTLRuntime.VTable, @ptrCast(self.vtable)).absoluteChildNumber(@as(*const IXTLRuntime, @ptrCast(self)), p_node_, p_number_);
            }
            pub inline fn formatIndex(self: *const T, l_index_: i32, bstr_format_: ?BSTR, pbstr_formatted_string_: ?*?BSTR) HRESULT {
                return @as(*const IXTLRuntime.VTable, @ptrCast(self.vtable)).formatIndex(@as(*const IXTLRuntime, @ptrCast(self)), l_index_, bstr_format_, pbstr_formatted_string_);
            }
            pub inline fn formatNumber(self: *const T, dbl_number_: f64, bstr_format_: ?BSTR, pbstr_formatted_string_: ?*?BSTR) HRESULT {
                return @as(*const IXTLRuntime.VTable, @ptrCast(self.vtable)).formatNumber(@as(*const IXTLRuntime, @ptrCast(self)), dbl_number_, bstr_format_, pbstr_formatted_string_);
            }
            pub inline fn formatDate(self: *const T, var_date_: VARIANT, bstr_format_: ?BSTR, var_dest_locale_: VARIANT, pbstr_formatted_string_: ?*?BSTR) HRESULT {
                return @as(*const IXTLRuntime.VTable, @ptrCast(self.vtable)).formatDate(@as(*const IXTLRuntime, @ptrCast(self)), var_date_, bstr_format_, var_dest_locale_, pbstr_formatted_string_);
            }
            pub inline fn formatTime(self: *const T, var_time_: VARIANT, bstr_format_: ?BSTR, var_dest_locale_: VARIANT, pbstr_formatted_string_: ?*?BSTR) HRESULT {
                return @as(*const IXTLRuntime.VTable, @ptrCast(self.vtable)).formatTime(@as(*const IXTLRuntime, @ptrCast(self)), var_time_, bstr_format_, var_dest_locale_, pbstr_formatted_string_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_XMLDOMDocumentEvents_Value = Guid.initString("3efaa427-272f-11d2-836f-0000f87a7782");
pub const IID_XMLDOMDocumentEvents = &IID_XMLDOMDocumentEvents_Value;
pub const XMLDOMDocumentEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLHttpRequest_Value = Guid.initString("ed8c108d-4349-11d2-91a4-00c04f7969e8");
pub const IID_IXMLHttpRequest = &IID_IXMLHttpRequest_Value;
pub const IXMLHttpRequest = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        open: *const fn (
            self: *const IXMLHttpRequest,
            bstr_method: ?BSTR,
            bstr_url: ?BSTR,
            var_async: VARIANT,
            bstr_user: VARIANT,
            bstr_password: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setRequestHeader: *const fn (
            self: *const IXMLHttpRequest,
            bstr_header: ?BSTR,
            bstr_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getResponseHeader: *const fn (
            self: *const IXMLHttpRequest,
            bstr_header: ?BSTR,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAllResponseHeaders: *const fn (
            self: *const IXMLHttpRequest,
            pbstr_headers: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        send: *const fn (
            self: *const IXMLHttpRequest,
            var_body: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        abort: *const fn (
            self: *const IXMLHttpRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHttpRequest,
            pl_status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_statusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHttpRequest,
            pbstr_status: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseXML: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHttpRequest,
            pp_body: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHttpRequest,
            pbstr_body: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseBody: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHttpRequest,
            pvar_body: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseStream: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHttpRequest,
            pvar_body: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHttpRequest,
            pl_state: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHttpRequest,
            p_ready_state_sink: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn open(self: *const T, bstr_method_: ?BSTR, bstr_url_: ?BSTR, var_async_: VARIANT, bstr_user_: VARIANT, bstr_password_: VARIANT) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).open(@as(*const IXMLHttpRequest, @ptrCast(self)), bstr_method_, bstr_url_, var_async_, bstr_user_, bstr_password_);
            }
            pub inline fn setRequestHeader(self: *const T, bstr_header_: ?BSTR, bstr_value_: ?BSTR) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).setRequestHeader(@as(*const IXMLHttpRequest, @ptrCast(self)), bstr_header_, bstr_value_);
            }
            pub inline fn getResponseHeader(self: *const T, bstr_header_: ?BSTR, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).getResponseHeader(@as(*const IXMLHttpRequest, @ptrCast(self)), bstr_header_, pbstr_value_);
            }
            pub inline fn getAllResponseHeaders(self: *const T, pbstr_headers_: ?*?BSTR) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).getAllResponseHeaders(@as(*const IXMLHttpRequest, @ptrCast(self)), pbstr_headers_);
            }
            pub inline fn send(self: *const T, var_body_: VARIANT) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).send(@as(*const IXMLHttpRequest, @ptrCast(self)), var_body_);
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).abort(@as(*const IXMLHttpRequest, @ptrCast(self)));
            }
            pub inline fn getStatus(self: *const T, pl_status_: ?*i32) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).get_status(@as(*const IXMLHttpRequest, @ptrCast(self)), pl_status_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_: ?*?BSTR) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).get_statusText(@as(*const IXMLHttpRequest, @ptrCast(self)), pbstr_status_);
            }
            pub inline fn getResponseXML(self: *const T, pp_body_: ?*?*IDispatch) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).get_responseXML(@as(*const IXMLHttpRequest, @ptrCast(self)), pp_body_);
            }
            pub inline fn getResponseText(self: *const T, pbstr_body_: ?*?BSTR) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).get_responseText(@as(*const IXMLHttpRequest, @ptrCast(self)), pbstr_body_);
            }
            pub inline fn getResponseBody(self: *const T, pvar_body_: ?*VARIANT) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).get_responseBody(@as(*const IXMLHttpRequest, @ptrCast(self)), pvar_body_);
            }
            pub inline fn getResponseStream(self: *const T, pvar_body_: ?*VARIANT) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).get_responseStream(@as(*const IXMLHttpRequest, @ptrCast(self)), pvar_body_);
            }
            pub inline fn getReadyState(self: *const T, pl_state_: ?*i32) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).get_readyState(@as(*const IXMLHttpRequest, @ptrCast(self)), pl_state_);
            }
            pub inline fn putOnreadystatechange(self: *const T, p_ready_state_sink_: ?*IDispatch) HRESULT {
                return @as(*const IXMLHttpRequest.VTable, @ptrCast(self.vtable)).put_onreadystatechange(@as(*const IXMLHttpRequest, @ptrCast(self)), p_ready_state_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDSOControl_Value = Guid.initString("310afa62-0575-11d2-9ca9-0060b0ec3d39");
pub const IID_IXMLDSOControl = &IID_IXMLDSOControl_Value;
pub const IXMLDSOControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XMLDocument: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDSOControl,
            pp_doc: ?*?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XMLDocument: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDSOControl,
            pp_doc: ?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JavaDSOCompatible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDSOControl,
            f_java_d_s_o_compatible: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JavaDSOCompatible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDSOControl,
            f_java_d_s_o_compatible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDSOControl,
            state: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getXMLDocument(self: *const T, pp_doc_: ?*?*IXMLDOMDocument) HRESULT {
                return @as(*const IXMLDSOControl.VTable, @ptrCast(self.vtable)).get_XMLDocument(@as(*const IXMLDSOControl, @ptrCast(self)), pp_doc_);
            }
            pub inline fn putXMLDocument(self: *const T, pp_doc_: ?*IXMLDOMDocument) HRESULT {
                return @as(*const IXMLDSOControl.VTable, @ptrCast(self.vtable)).put_XMLDocument(@as(*const IXMLDSOControl, @ptrCast(self)), pp_doc_);
            }
            pub inline fn getJavaDSOCompatible(self: *const T, f_java_d_s_o_compatible_: ?*BOOL) HRESULT {
                return @as(*const IXMLDSOControl.VTable, @ptrCast(self.vtable)).get_JavaDSOCompatible(@as(*const IXMLDSOControl, @ptrCast(self)), f_java_d_s_o_compatible_);
            }
            pub inline fn putJavaDSOCompatible(self: *const T, f_java_d_s_o_compatible_: BOOL) HRESULT {
                return @as(*const IXMLDSOControl.VTable, @ptrCast(self.vtable)).put_JavaDSOCompatible(@as(*const IXMLDSOControl, @ptrCast(self)), f_java_d_s_o_compatible_);
            }
            pub inline fn getReadyState(self: *const T, state_: ?*i32) HRESULT {
                return @as(*const IXMLDSOControl.VTable, @ptrCast(self.vtable)).get_readyState(@as(*const IXMLDSOControl, @ptrCast(self)), state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLElementCollection_Value = Guid.initString("65725580-9b5d-11d0-9bfe-00c04fc99c8e");
pub const IID_IXMLElementCollection = &IID_IXMLElementCollection_Value;
pub const IXMLElementCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElementCollection,
            v: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElementCollection,
            p: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElementCollection,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        item: *const fn (
            self: *const IXMLElementCollection,
            var1: VARIANT,
            var2: VARIANT,
            pp_disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putLength(self: *const T, v_: i32) HRESULT {
                return @as(*const IXMLElementCollection.VTable, @ptrCast(self.vtable)).put_length(@as(*const IXMLElementCollection, @ptrCast(self)), v_);
            }
            pub inline fn getLength(self: *const T, p_: ?*i32) HRESULT {
                return @as(*const IXMLElementCollection.VTable, @ptrCast(self.vtable)).get_length(@as(*const IXMLElementCollection, @ptrCast(self)), p_);
            }
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IXMLElementCollection.VTable, @ptrCast(self.vtable)).get__newEnum(@as(*const IXMLElementCollection, @ptrCast(self)), pp_unk_);
            }
            pub inline fn item(self: *const T, var1_: VARIANT, var2_: VARIANT, pp_disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IXMLElementCollection.VTable, @ptrCast(self.vtable)).item(@as(*const IXMLElementCollection, @ptrCast(self)), var1_, var2_, pp_disp_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDocument_Value = Guid.initString("f52e2b61-18a1-11d1-b105-00805f49916b");
pub const IID_IXMLDocument = &IID_IXMLDocument_Value;
pub const IXMLDocument = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_root: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileModifiedDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileUpdatedDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mimeType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_charset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_doctype: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dtdURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createElement: *const fn (
            self: *const IXMLDocument,
            v_type: VARIANT,
            var1: VARIANT,
            pp_elem: ?*?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getRoot(self: *const T, p_: ?*?*IXMLElement) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_root(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn getFileSize(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_fileSize(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn getFileModifiedDate(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_fileModifiedDate(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn getFileUpdatedDate(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_fileUpdatedDate(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn getURL(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_URL(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn putURL(self: *const T, p_: ?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).put_URL(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn getMimeType(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_mimeType(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn getReadyState(self: *const T, pl_: ?*i32) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_readyState(@as(*const IXMLDocument, @ptrCast(self)), pl_);
            }
            pub inline fn getCharset(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_charset(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn putCharset(self: *const T, p_: ?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).put_charset(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn getVersion(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_version(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn getDoctype(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_doctype(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn getDtdURL(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).get_dtdURL(@as(*const IXMLDocument, @ptrCast(self)), p_);
            }
            pub inline fn createElement(self: *const T, v_type_: VARIANT, var1_: VARIANT, pp_elem_: ?*?*IXMLElement) HRESULT {
                return @as(*const IXMLDocument.VTable, @ptrCast(self.vtable)).createElement(@as(*const IXMLDocument, @ptrCast(self)), v_type_, var1_, pp_elem_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDocument2_Value = Guid.initString("2b8de2fe-8d2d-11d1-b2fc-00c04fd915a9");
pub const IID_IXMLDocument2 = &IID_IXMLDocument2_Value;
pub const IXMLDocument2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_root: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?*IXMLElement2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileModifiedDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fileUpdatedDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mimeType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_charset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_charset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_doctype: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dtdURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createElement: *const fn (
            self: *const IXMLDocument2,
            v_type: VARIANT,
            var1: VARIANT,
            pp_elem: ?*?*IXMLElement2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_async: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            pf: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_async: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDocument2,
            f: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getRoot(self: *const T, p_: ?*?*IXMLElement2) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_root(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn getFileSize(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_fileSize(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn getFileModifiedDate(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_fileModifiedDate(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn getFileUpdatedDate(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_fileUpdatedDate(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn getURL(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_URL(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn putURL(self: *const T, p_: ?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).put_URL(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn getMimeType(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_mimeType(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn getReadyState(self: *const T, pl_: ?*i32) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_readyState(@as(*const IXMLDocument2, @ptrCast(self)), pl_);
            }
            pub inline fn getCharset(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_charset(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn putCharset(self: *const T, p_: ?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).put_charset(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn getVersion(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_version(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn getDoctype(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_doctype(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn getDtdURL(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_dtdURL(@as(*const IXMLDocument2, @ptrCast(self)), p_);
            }
            pub inline fn createElement(self: *const T, v_type_: VARIANT, var1_: VARIANT, pp_elem_: ?*?*IXMLElement2) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).createElement(@as(*const IXMLDocument2, @ptrCast(self)), v_type_, var1_, pp_elem_);
            }
            pub inline fn getAsync(self: *const T, pf_: ?*i16) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).get_async(@as(*const IXMLDocument2, @ptrCast(self)), pf_);
            }
            pub inline fn putAsync(self: *const T, f_: i16) HRESULT {
                return @as(*const IXMLDocument2.VTable, @ptrCast(self.vtable)).put_async(@as(*const IXMLDocument2, @ptrCast(self)), f_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLElement_Value = Guid.initString("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e");
pub const IID_IXMLElement = &IID_IXMLElement_Value;
pub const IXMLElement = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tagName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement,
            pp_parent: ?*?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttribute: *const fn (
            self: *const IXMLElement,
            str_property_name: ?BSTR,
            property_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttribute: *const fn (
            self: *const IXMLElement,
            str_property_name: ?BSTR,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttribute: *const fn (
            self: *const IXMLElement,
            str_property_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_children: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement,
            pp: ?*?*IXMLElementCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement,
            pl_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addChild: *const fn (
            self: *const IXMLElement,
            p_child_elem: ?*IXMLElement,
            l_index: i32,
            l_reserved: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeChild: *const fn (
            self: *const IXMLElement,
            p_child_elem: ?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTagName(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).get_tagName(@as(*const IXMLElement, @ptrCast(self)), p_);
            }
            pub inline fn putTagName(self: *const T, p_: ?BSTR) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).put_tagName(@as(*const IXMLElement, @ptrCast(self)), p_);
            }
            pub inline fn getParent(self: *const T, pp_parent_: ?*?*IXMLElement) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).get_parent(@as(*const IXMLElement, @ptrCast(self)), pp_parent_);
            }
            pub inline fn setAttribute(self: *const T, str_property_name_: ?BSTR, property_value_: VARIANT) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).setAttribute(@as(*const IXMLElement, @ptrCast(self)), str_property_name_, property_value_);
            }
            pub inline fn getAttribute(self: *const T, str_property_name_: ?BSTR, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).getAttribute(@as(*const IXMLElement, @ptrCast(self)), str_property_name_, property_value_);
            }
            pub inline fn removeAttribute(self: *const T, str_property_name_: ?BSTR) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).removeAttribute(@as(*const IXMLElement, @ptrCast(self)), str_property_name_);
            }
            pub inline fn getChildren(self: *const T, pp_: ?*?*IXMLElementCollection) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).get_children(@as(*const IXMLElement, @ptrCast(self)), pp_);
            }
            pub inline fn getType(self: *const T, pl_type_: ?*i32) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).get_type(@as(*const IXMLElement, @ptrCast(self)), pl_type_);
            }
            pub inline fn getText(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).get_text(@as(*const IXMLElement, @ptrCast(self)), p_);
            }
            pub inline fn putText(self: *const T, p_: ?BSTR) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).put_text(@as(*const IXMLElement, @ptrCast(self)), p_);
            }
            pub inline fn addChild(self: *const T, p_child_elem_: ?*IXMLElement, l_index_: i32, l_reserved_: i32) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).addChild(@as(*const IXMLElement, @ptrCast(self)), p_child_elem_, l_index_, l_reserved_);
            }
            pub inline fn removeChild(self: *const T, p_child_elem_: ?*IXMLElement) HRESULT {
                return @as(*const IXMLElement.VTable, @ptrCast(self.vtable)).removeChild(@as(*const IXMLElement, @ptrCast(self)), p_child_elem_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLElement2_Value = Guid.initString("2b8de2ff-8d2d-11d1-b2fc-00c04fd915a9");
pub const IID_IXMLElement2 = &IID_IXMLElement2_Value;
pub const IXMLElement2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_tagName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_tagName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement2,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement2,
            pp_parent: ?*?*IXMLElement2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttribute: *const fn (
            self: *const IXMLElement2,
            str_property_name: ?BSTR,
            property_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttribute: *const fn (
            self: *const IXMLElement2,
            str_property_name: ?BSTR,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttribute: *const fn (
            self: *const IXMLElement2,
            str_property_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_children: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement2,
            pp: ?*?*IXMLElementCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement2,
            pl_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement2,
            p: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement2,
            p: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addChild: *const fn (
            self: *const IXMLElement2,
            p_child_elem: ?*IXMLElement2,
            l_index: i32,
            l_reserved: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeChild: *const fn (
            self: *const IXMLElement2,
            p_child_elem: ?*IXMLElement2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLElement2,
            pp: ?*?*IXMLElementCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTagName(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).get_tagName(@as(*const IXMLElement2, @ptrCast(self)), p_);
            }
            pub inline fn putTagName(self: *const T, p_: ?BSTR) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).put_tagName(@as(*const IXMLElement2, @ptrCast(self)), p_);
            }
            pub inline fn getParent(self: *const T, pp_parent_: ?*?*IXMLElement2) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).get_parent(@as(*const IXMLElement2, @ptrCast(self)), pp_parent_);
            }
            pub inline fn setAttribute(self: *const T, str_property_name_: ?BSTR, property_value_: VARIANT) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).setAttribute(@as(*const IXMLElement2, @ptrCast(self)), str_property_name_, property_value_);
            }
            pub inline fn getAttribute(self: *const T, str_property_name_: ?BSTR, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).getAttribute(@as(*const IXMLElement2, @ptrCast(self)), str_property_name_, property_value_);
            }
            pub inline fn removeAttribute(self: *const T, str_property_name_: ?BSTR) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).removeAttribute(@as(*const IXMLElement2, @ptrCast(self)), str_property_name_);
            }
            pub inline fn getChildren(self: *const T, pp_: ?*?*IXMLElementCollection) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).get_children(@as(*const IXMLElement2, @ptrCast(self)), pp_);
            }
            pub inline fn getType(self: *const T, pl_type_: ?*i32) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).get_type(@as(*const IXMLElement2, @ptrCast(self)), pl_type_);
            }
            pub inline fn getText(self: *const T, p_: ?*?BSTR) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).get_text(@as(*const IXMLElement2, @ptrCast(self)), p_);
            }
            pub inline fn putText(self: *const T, p_: ?BSTR) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).put_text(@as(*const IXMLElement2, @ptrCast(self)), p_);
            }
            pub inline fn addChild(self: *const T, p_child_elem_: ?*IXMLElement2, l_index_: i32, l_reserved_: i32) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).addChild(@as(*const IXMLElement2, @ptrCast(self)), p_child_elem_, l_index_, l_reserved_);
            }
            pub inline fn removeChild(self: *const T, p_child_elem_: ?*IXMLElement2) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).removeChild(@as(*const IXMLElement2, @ptrCast(self)), p_child_elem_);
            }
            pub inline fn getAttributes(self: *const T, pp_: ?*?*IXMLElementCollection) HRESULT {
                return @as(*const IXMLElement2.VTable, @ptrCast(self.vtable)).get_attributes(@as(*const IXMLElement2, @ptrCast(self)), pp_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLAttribute_Value = Guid.initString("d4d4a0fc-3b73-11d1-b2b4-00c04fb92596");
pub const IID_IXMLAttribute = &IID_IXMLAttribute_Value;
pub const IXMLAttribute = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLAttribute,
            n: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLAttribute,
            v: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, n_: ?*?BSTR) HRESULT {
                return @as(*const IXMLAttribute.VTable, @ptrCast(self.vtable)).get_name(@as(*const IXMLAttribute, @ptrCast(self)), n_);
            }
            pub inline fn getValue(self: *const T, v_: ?*?BSTR) HRESULT {
                return @as(*const IXMLAttribute.VTable, @ptrCast(self.vtable)).get_value(@as(*const IXMLAttribute, @ptrCast(self)), v_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLError_Value = Guid.initString("948c5ad3-c58d-11d0-9c0b-00c04fc99c8e");
pub const IID_IXMLError = &IID_IXMLError_Value;
pub const IXMLError = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetErrorInfo: *const fn (
            self: *const IXMLError,
            p_error_return: ?*XML_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getErrorInfo(self: *const T, p_error_return_: ?*XML_ERROR) HRESULT {
                return @as(*const IXMLError.VTable, @ptrCast(self.vtable)).GetErrorInfo(@as(*const IXMLError, @ptrCast(self)), p_error_return_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_DOMDocument60_Value = Guid.initString("88d96a05-f192-11d4-a65f-0040963251e5");
pub const CLSID_DOMDocument60 = &CLSID_DOMDocument60_Value;

const CLSID_FreeThreadedDOMDocument60_Value = Guid.initString("88d96a06-f192-11d4-a65f-0040963251e5");
pub const CLSID_FreeThreadedDOMDocument60 = &CLSID_FreeThreadedDOMDocument60_Value;

const CLSID_XMLSchemaCache60_Value = Guid.initString("88d96a07-f192-11d4-a65f-0040963251e5");
pub const CLSID_XMLSchemaCache60 = &CLSID_XMLSchemaCache60_Value;

const CLSID_XSLTemplate60_Value = Guid.initString("88d96a08-f192-11d4-a65f-0040963251e5");
pub const CLSID_XSLTemplate60 = &CLSID_XSLTemplate60_Value;

const CLSID_XMLHTTP60_Value = Guid.initString("88d96a0a-f192-11d4-a65f-0040963251e5");
pub const CLSID_XMLHTTP60 = &CLSID_XMLHTTP60_Value;

const CLSID_FreeThreadedXMLHTTP60_Value = Guid.initString("88d96a09-f192-11d4-a65f-0040963251e5");
pub const CLSID_FreeThreadedXMLHTTP60 = &CLSID_FreeThreadedXMLHTTP60_Value;

const CLSID_ServerXMLHTTP60_Value = Guid.initString("88d96a0b-f192-11d4-a65f-0040963251e5");
pub const CLSID_ServerXMLHTTP60 = &CLSID_ServerXMLHTTP60_Value;

const CLSID_SAXXMLReader60_Value = Guid.initString("88d96a0c-f192-11d4-a65f-0040963251e5");
pub const CLSID_SAXXMLReader60 = &CLSID_SAXXMLReader60_Value;

const CLSID_MXXMLWriter60_Value = Guid.initString("88d96a0f-f192-11d4-a65f-0040963251e5");
pub const CLSID_MXXMLWriter60 = &CLSID_MXXMLWriter60_Value;

const CLSID_MXHTMLWriter60_Value = Guid.initString("88d96a10-f192-11d4-a65f-0040963251e5");
pub const CLSID_MXHTMLWriter60 = &CLSID_MXHTMLWriter60_Value;

const CLSID_SAXAttributes60_Value = Guid.initString("88d96a0e-f192-11d4-a65f-0040963251e5");
pub const CLSID_SAXAttributes60 = &CLSID_SAXAttributes60_Value;

const CLSID_MXNamespaceManager60_Value = Guid.initString("88d96a11-f192-11d4-a65f-0040963251e5");
pub const CLSID_MXNamespaceManager60 = &CLSID_MXNamespaceManager60_Value;

const IID_IXMLDOMDocument2_Value = Guid.initString("2933bf95-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMDocument2 = &IID_IXMLDOMDocument2_Value;
pub const IXMLDOMDocument2 = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMDocument.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaces: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument2,
            namespace_collection: ?*?*IXMLDOMSchemaCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_schemas: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMDocument2,
            other_collection: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_schemas: *const fn (
            self: *const IXMLDOMDocument2,
            other_collection: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        validate: *const fn (
            self: *const IXMLDOMDocument2,
            error_obj: ?*?*IXMLDOMParseError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProperty: *const fn (
            self: *const IXMLDOMDocument2,
            name: ?BSTR,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn (
            self: *const IXMLDOMDocument2,
            name: ?BSTR,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMDocument.MethodMixin(T);
            pub inline fn getNamespaces(self: *const T, namespace_collection_: ?*?*IXMLDOMSchemaCollection) HRESULT {
                return @as(*const IXMLDOMDocument2.VTable, @ptrCast(self.vtable)).get_namespaces(@as(*const IXMLDOMDocument2, @ptrCast(self)), namespace_collection_);
            }
            pub inline fn getSchemas(self: *const T, other_collection_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMDocument2.VTable, @ptrCast(self.vtable)).get_schemas(@as(*const IXMLDOMDocument2, @ptrCast(self)), other_collection_);
            }
            pub inline fn putrefSchemas(self: *const T, other_collection_: VARIANT) HRESULT {
                return @as(*const IXMLDOMDocument2.VTable, @ptrCast(self.vtable)).putref_schemas(@as(*const IXMLDOMDocument2, @ptrCast(self)), other_collection_);
            }
            pub inline fn validate(self: *const T, error_obj_: ?*?*IXMLDOMParseError) HRESULT {
                return @as(*const IXMLDOMDocument2.VTable, @ptrCast(self.vtable)).validate(@as(*const IXMLDOMDocument2, @ptrCast(self)), error_obj_);
            }
            pub inline fn setProperty(self: *const T, name_: ?BSTR, value_: VARIANT) HRESULT {
                return @as(*const IXMLDOMDocument2.VTable, @ptrCast(self.vtable)).setProperty(@as(*const IXMLDOMDocument2, @ptrCast(self)), name_, value_);
            }
            pub inline fn getProperty(self: *const T, name_: ?BSTR, value_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMDocument2.VTable, @ptrCast(self.vtable)).getProperty(@as(*const IXMLDOMDocument2, @ptrCast(self)), name_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMDocument3_Value = Guid.initString("2933bf96-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXMLDOMDocument3 = &IID_IXMLDOMDocument3_Value;
pub const IXMLDOMDocument3 = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMDocument2.VTable,
        validateNode: *const fn (
            self: *const IXMLDOMDocument3,
            node: ?*IXMLDOMNode,
            error_obj: ?*?*IXMLDOMParseError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        importNode: *const fn (
            self: *const IXMLDOMDocument3,
            node: ?*IXMLDOMNode,
            deep: i16,
            clone: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMDocument2.MethodMixin(T);
            pub inline fn validateNode(self: *const T, node_: ?*IXMLDOMNode, error_obj_: ?*?*IXMLDOMParseError) HRESULT {
                return @as(*const IXMLDOMDocument3.VTable, @ptrCast(self.vtable)).validateNode(@as(*const IXMLDOMDocument3, @ptrCast(self)), node_, error_obj_);
            }
            pub inline fn importNode(self: *const T, node_: ?*IXMLDOMNode, deep_: i16, clone_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMDocument3.VTable, @ptrCast(self.vtable)).importNode(@as(*const IXMLDOMDocument3, @ptrCast(self)), node_, deep_, clone_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMSchemaCollection_Value = Guid.initString("373984c8-b845-449b-91e7-45ac83036ade");
pub const IID_IXMLDOMSchemaCollection = &IID_IXMLDOMSchemaCollection_Value;
pub const IXMLDOMSchemaCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        add: *const fn (
            self: *const IXMLDOMSchemaCollection,
            namespace_u_r_i: ?BSTR,
            @"var": VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get: *const fn (
            self: *const IXMLDOMSchemaCollection,
            namespace_u_r_i: ?BSTR,
            schema_node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        remove: *const fn (
            self: *const IXMLDOMSchemaCollection,
            namespace_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMSchemaCollection,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaceURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMSchemaCollection,
            index: i32,
            length: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addCollection: *const fn (
            self: *const IXMLDOMSchemaCollection,
            other_collection: ?*IXMLDOMSchemaCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMSchemaCollection,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn add(self: *const T, namespace_u_r_i_: ?BSTR, var_: VARIANT) HRESULT {
                return @as(*const IXMLDOMSchemaCollection.VTable, @ptrCast(self.vtable)).add(@as(*const IXMLDOMSchemaCollection, @ptrCast(self)), namespace_u_r_i_, var_);
            }
            pub inline fn get(self: *const T, namespace_u_r_i_: ?BSTR, schema_node_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMSchemaCollection.VTable, @ptrCast(self.vtable)).get(@as(*const IXMLDOMSchemaCollection, @ptrCast(self)), namespace_u_r_i_, schema_node_);
            }
            pub inline fn remove(self: *const T, namespace_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMSchemaCollection.VTable, @ptrCast(self.vtable)).remove(@as(*const IXMLDOMSchemaCollection, @ptrCast(self)), namespace_u_r_i_);
            }
            pub inline fn getLength(self: *const T, length_: ?*i32) HRESULT {
                return @as(*const IXMLDOMSchemaCollection.VTable, @ptrCast(self.vtable)).get_length(@as(*const IXMLDOMSchemaCollection, @ptrCast(self)), length_);
            }
            pub inline fn getNamespaceURI(self: *const T, index_: i32, length_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMSchemaCollection.VTable, @ptrCast(self.vtable)).get_namespaceURI(@as(*const IXMLDOMSchemaCollection, @ptrCast(self)), index_, length_);
            }
            pub inline fn addCollection(self: *const T, other_collection_: ?*IXMLDOMSchemaCollection) HRESULT {
                return @as(*const IXMLDOMSchemaCollection.VTable, @ptrCast(self.vtable)).addCollection(@as(*const IXMLDOMSchemaCollection, @ptrCast(self)), other_collection_);
            }
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IXMLDOMSchemaCollection.VTable, @ptrCast(self.vtable)).get__newEnum(@as(*const IXMLDOMSchemaCollection, @ptrCast(self)), pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMSelection_Value = Guid.initString("aa634fc7-5888-44a7-a257-3a47150d3a0e");
pub const IID_IXMLDOMSelection = &IID_IXMLDOMSelection_Value;
pub const IXMLDOMSelection = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMNodeList.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_expr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMSelection,
            expression: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_expr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMSelection,
            expression: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_context: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMSelection,
            pp_node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_context: *const fn (
            self: *const IXMLDOMSelection,
            p_node: ?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        peekNode: *const fn (
            self: *const IXMLDOMSelection,
            pp_node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        matches: *const fn (
            self: *const IXMLDOMSelection,
            p_node: ?*IXMLDOMNode,
            pp_node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeNext: *const fn (
            self: *const IXMLDOMSelection,
            pp_node: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAll: *const fn (
            self: *const IXMLDOMSelection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        clone: *const fn (
            self: *const IXMLDOMSelection,
            pp_node: ?*?*IXMLDOMSelection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn (
            self: *const IXMLDOMSelection,
            name: ?BSTR,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProperty: *const fn (
            self: *const IXMLDOMSelection,
            name: ?BSTR,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMNodeList.MethodMixin(T);
            pub inline fn getExpr(self: *const T, expression_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).get_expr(@as(*const IXMLDOMSelection, @ptrCast(self)), expression_);
            }
            pub inline fn putExpr(self: *const T, expression_: ?BSTR) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).put_expr(@as(*const IXMLDOMSelection, @ptrCast(self)), expression_);
            }
            pub inline fn getContext(self: *const T, pp_node_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).get_context(@as(*const IXMLDOMSelection, @ptrCast(self)), pp_node_);
            }
            pub inline fn putrefContext(self: *const T, p_node_: ?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).putref_context(@as(*const IXMLDOMSelection, @ptrCast(self)), p_node_);
            }
            pub inline fn peekNode(self: *const T, pp_node_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).peekNode(@as(*const IXMLDOMSelection, @ptrCast(self)), pp_node_);
            }
            pub inline fn matches(self: *const T, p_node_: ?*IXMLDOMNode, pp_node_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).matches(@as(*const IXMLDOMSelection, @ptrCast(self)), p_node_, pp_node_);
            }
            pub inline fn removeNext(self: *const T, pp_node_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).removeNext(@as(*const IXMLDOMSelection, @ptrCast(self)), pp_node_);
            }
            pub inline fn removeAll(self: *const T) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).removeAll(@as(*const IXMLDOMSelection, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_node_: ?*?*IXMLDOMSelection) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).clone(@as(*const IXMLDOMSelection, @ptrCast(self)), pp_node_);
            }
            pub inline fn getProperty(self: *const T, name_: ?BSTR, value_: ?*VARIANT) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).getProperty(@as(*const IXMLDOMSelection, @ptrCast(self)), name_, value_);
            }
            pub inline fn setProperty(self: *const T, name_: ?BSTR, value_: VARIANT) HRESULT {
                return @as(*const IXMLDOMSelection.VTable, @ptrCast(self.vtable)).setProperty(@as(*const IXMLDOMSelection, @ptrCast(self)), name_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMParseError2_Value = Guid.initString("3efaa428-272f-11d2-836f-0000f87a7782");
pub const IID_IXMLDOMParseError2 = &IID_IXMLDOMParseError2_Value;
pub const IXMLDOMParseError2 = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMParseError.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorXPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError2,
            xpathexpr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_allErrors: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError2,
            all_errors: ?*?*IXMLDOMParseErrorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        errorParameters: *const fn (
            self: *const IXMLDOMParseError2,
            index: i32,
            param1: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorParametersCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseError2,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMParseError.MethodMixin(T);
            pub inline fn getErrorXPath(self: *const T, xpathexpr_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMParseError2.VTable, @ptrCast(self.vtable)).get_errorXPath(@as(*const IXMLDOMParseError2, @ptrCast(self)), xpathexpr_);
            }
            pub inline fn getAllErrors(self: *const T, all_errors_: ?*?*IXMLDOMParseErrorCollection) HRESULT {
                return @as(*const IXMLDOMParseError2.VTable, @ptrCast(self.vtable)).get_allErrors(@as(*const IXMLDOMParseError2, @ptrCast(self)), all_errors_);
            }
            pub inline fn errorParameters(self: *const T, index_: i32, param1_: ?*?BSTR) HRESULT {
                return @as(*const IXMLDOMParseError2.VTable, @ptrCast(self.vtable)).errorParameters(@as(*const IXMLDOMParseError2, @ptrCast(self)), index_, param1_);
            }
            pub inline fn getErrorParametersCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IXMLDOMParseError2.VTable, @ptrCast(self.vtable)).get_errorParametersCount(@as(*const IXMLDOMParseError2, @ptrCast(self)), count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLDOMParseErrorCollection_Value = Guid.initString("3efaa429-272f-11d2-836f-0000f87a7782");
pub const IID_IXMLDOMParseErrorCollection = &IID_IXMLDOMParseErrorCollection_Value;
pub const IXMLDOMParseErrorCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseErrorCollection,
            index: i32,
            @"error": ?*?*IXMLDOMParseError2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseErrorCollection,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_next: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseErrorCollection,
            @"error": ?*?*IXMLDOMParseError2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn (
            self: *const IXMLDOMParseErrorCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMParseErrorCollection,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, error_: ?*?*IXMLDOMParseError2) HRESULT {
                return @as(*const IXMLDOMParseErrorCollection.VTable, @ptrCast(self.vtable)).get_item(@as(*const IXMLDOMParseErrorCollection, @ptrCast(self)), index_, error_);
            }
            pub inline fn getLength(self: *const T, length_: ?*i32) HRESULT {
                return @as(*const IXMLDOMParseErrorCollection.VTable, @ptrCast(self.vtable)).get_length(@as(*const IXMLDOMParseErrorCollection, @ptrCast(self)), length_);
            }
            pub inline fn getNext(self: *const T, error_: ?*?*IXMLDOMParseError2) HRESULT {
                return @as(*const IXMLDOMParseErrorCollection.VTable, @ptrCast(self.vtable)).get_next(@as(*const IXMLDOMParseErrorCollection, @ptrCast(self)), error_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IXMLDOMParseErrorCollection.VTable, @ptrCast(self.vtable)).reset(@as(*const IXMLDOMParseErrorCollection, @ptrCast(self)));
            }
            pub inline fn getNewEnum(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IXMLDOMParseErrorCollection.VTable, @ptrCast(self.vtable)).get__newEnum(@as(*const IXMLDOMParseErrorCollection, @ptrCast(self)), ppunk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXSLProcessor_Value = Guid.initString("2933bf92-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXSLProcessor = &IID_IXSLProcessor_Value;
pub const IXSLProcessor = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_input: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLProcessor,
            @"var": VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_input: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLProcessor,
            p_var: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ownerTemplate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLProcessor,
            pp_template: ?*?*IXSLTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setStartMode: *const fn (
            self: *const IXSLProcessor,
            mode: ?BSTR,
            namespace_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_startMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLProcessor,
            mode: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_startModeURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLProcessor,
            namespace_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_output: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLProcessor,
            output: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_output: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLProcessor,
            p_output: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        transform: *const fn (
            self: *const IXSLProcessor,
            p_done: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn (
            self: *const IXSLProcessor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLProcessor,
            p_ready_state: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addParameter: *const fn (
            self: *const IXSLProcessor,
            base_name: ?BSTR,
            parameter: VARIANT,
            namespace_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addObject: *const fn (
            self: *const IXSLProcessor,
            obj: ?*IDispatch,
            namespace_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stylesheet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLProcessor,
            stylesheet: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putInput(self: *const T, var_: VARIANT) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).put_input(@as(*const IXSLProcessor, @ptrCast(self)), var_);
            }
            pub inline fn getInput(self: *const T, p_var_: ?*VARIANT) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).get_input(@as(*const IXSLProcessor, @ptrCast(self)), p_var_);
            }
            pub inline fn getOwnerTemplate(self: *const T, pp_template_: ?*?*IXSLTemplate) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).get_ownerTemplate(@as(*const IXSLProcessor, @ptrCast(self)), pp_template_);
            }
            pub inline fn setStartMode(self: *const T, mode_: ?BSTR, namespace_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).setStartMode(@as(*const IXSLProcessor, @ptrCast(self)), mode_, namespace_u_r_i_);
            }
            pub inline fn getStartMode(self: *const T, mode_: ?*?BSTR) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).get_startMode(@as(*const IXSLProcessor, @ptrCast(self)), mode_);
            }
            pub inline fn getStartModeURI(self: *const T, namespace_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).get_startModeURI(@as(*const IXSLProcessor, @ptrCast(self)), namespace_u_r_i_);
            }
            pub inline fn putOutput(self: *const T, output_: VARIANT) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).put_output(@as(*const IXSLProcessor, @ptrCast(self)), output_);
            }
            pub inline fn getOutput(self: *const T, p_output_: ?*VARIANT) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).get_output(@as(*const IXSLProcessor, @ptrCast(self)), p_output_);
            }
            pub inline fn transform(self: *const T, p_done_: ?*i16) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).transform(@as(*const IXSLProcessor, @ptrCast(self)), p_done_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).reset(@as(*const IXSLProcessor, @ptrCast(self)));
            }
            pub inline fn getReadyState(self: *const T, p_ready_state_: ?*i32) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).get_readyState(@as(*const IXSLProcessor, @ptrCast(self)), p_ready_state_);
            }
            pub inline fn addParameter(self: *const T, base_name_: ?BSTR, parameter_: VARIANT, namespace_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).addParameter(@as(*const IXSLProcessor, @ptrCast(self)), base_name_, parameter_, namespace_u_r_i_);
            }
            pub inline fn addObject(self: *const T, obj_: ?*IDispatch, namespace_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).addObject(@as(*const IXSLProcessor, @ptrCast(self)), obj_, namespace_u_r_i_);
            }
            pub inline fn getStylesheet(self: *const T, stylesheet_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXSLProcessor.VTable, @ptrCast(self.vtable)).get_stylesheet(@as(*const IXSLProcessor, @ptrCast(self)), stylesheet_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXSLTemplate_Value = Guid.initString("2933bf93-7b36-11d2-b20e-00c04f983e60");
pub const IID_IXSLTemplate = &IID_IXSLTemplate_Value;
pub const IXSLTemplate = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_stylesheet: *const fn (
            self: *const IXSLTemplate,
            stylesheet: ?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stylesheet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXSLTemplate,
            stylesheet: ?*?*IXMLDOMNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createProcessor: *const fn (
            self: *const IXSLTemplate,
            pp_processor: ?*?*IXSLProcessor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putrefStylesheet(self: *const T, stylesheet_: ?*IXMLDOMNode) HRESULT {
                return @as(*const IXSLTemplate.VTable, @ptrCast(self.vtable)).putref_stylesheet(@as(*const IXSLTemplate, @ptrCast(self)), stylesheet_);
            }
            pub inline fn getStylesheet(self: *const T, stylesheet_: ?*?*IXMLDOMNode) HRESULT {
                return @as(*const IXSLTemplate.VTable, @ptrCast(self.vtable)).get_stylesheet(@as(*const IXSLTemplate, @ptrCast(self)), stylesheet_);
            }
            pub inline fn createProcessor(self: *const T, pp_processor_: ?*?*IXSLProcessor) HRESULT {
                return @as(*const IXSLTemplate.VTable, @ptrCast(self.vtable)).createProcessor(@as(*const IXSLTemplate, @ptrCast(self)), pp_processor_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXMLHTTPRequest_Value = Guid.initString("ed8c108d-4349-11d2-91a4-00c04f7969e8");
pub const IID_IXMLHTTPRequest = &IID_IXMLHTTPRequest_Value;
pub const IXMLHTTPRequest = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        open: *const fn (
            self: *const IXMLHTTPRequest,
            bstr_method: ?BSTR,
            bstr_url: ?BSTR,
            var_async: VARIANT,
            bstr_user: VARIANT,
            bstr_password: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setRequestHeader: *const fn (
            self: *const IXMLHTTPRequest,
            bstr_header: ?BSTR,
            bstr_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getResponseHeader: *const fn (
            self: *const IXMLHTTPRequest,
            bstr_header: ?BSTR,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAllResponseHeaders: *const fn (
            self: *const IXMLHTTPRequest,
            pbstr_headers: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        send: *const fn (
            self: *const IXMLHTTPRequest,
            var_body: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        abort: *const fn (
            self: *const IXMLHTTPRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHTTPRequest,
            pl_status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_statusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHTTPRequest,
            pbstr_status: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseXML: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHTTPRequest,
            pp_body: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHTTPRequest,
            pbstr_body: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseBody: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHTTPRequest,
            pvar_body: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_responseStream: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHTTPRequest,
            pvar_body: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_readyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHTTPRequest,
            pl_state: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_onreadystatechange: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLHTTPRequest,
            p_ready_state_sink: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn open(self: *const T, bstr_method_: ?BSTR, bstr_url_: ?BSTR, var_async_: VARIANT, bstr_user_: VARIANT, bstr_password_: VARIANT) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).open(@as(*const IXMLHTTPRequest, @ptrCast(self)), bstr_method_, bstr_url_, var_async_, bstr_user_, bstr_password_);
            }
            pub inline fn setRequestHeader(self: *const T, bstr_header_: ?BSTR, bstr_value_: ?BSTR) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).setRequestHeader(@as(*const IXMLHTTPRequest, @ptrCast(self)), bstr_header_, bstr_value_);
            }
            pub inline fn getResponseHeader(self: *const T, bstr_header_: ?BSTR, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).getResponseHeader(@as(*const IXMLHTTPRequest, @ptrCast(self)), bstr_header_, pbstr_value_);
            }
            pub inline fn getAllResponseHeaders(self: *const T, pbstr_headers_: ?*?BSTR) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).getAllResponseHeaders(@as(*const IXMLHTTPRequest, @ptrCast(self)), pbstr_headers_);
            }
            pub inline fn send(self: *const T, var_body_: VARIANT) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).send(@as(*const IXMLHTTPRequest, @ptrCast(self)), var_body_);
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).abort(@as(*const IXMLHTTPRequest, @ptrCast(self)));
            }
            pub inline fn getStatus(self: *const T, pl_status_: ?*i32) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).get_status(@as(*const IXMLHTTPRequest, @ptrCast(self)), pl_status_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_: ?*?BSTR) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).get_statusText(@as(*const IXMLHTTPRequest, @ptrCast(self)), pbstr_status_);
            }
            pub inline fn getResponseXML(self: *const T, pp_body_: ?*?*IDispatch) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).get_responseXML(@as(*const IXMLHTTPRequest, @ptrCast(self)), pp_body_);
            }
            pub inline fn getResponseText(self: *const T, pbstr_body_: ?*?BSTR) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).get_responseText(@as(*const IXMLHTTPRequest, @ptrCast(self)), pbstr_body_);
            }
            pub inline fn getResponseBody(self: *const T, pvar_body_: ?*VARIANT) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).get_responseBody(@as(*const IXMLHTTPRequest, @ptrCast(self)), pvar_body_);
            }
            pub inline fn getResponseStream(self: *const T, pvar_body_: ?*VARIANT) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).get_responseStream(@as(*const IXMLHTTPRequest, @ptrCast(self)), pvar_body_);
            }
            pub inline fn getReadyState(self: *const T, pl_state_: ?*i32) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).get_readyState(@as(*const IXMLHTTPRequest, @ptrCast(self)), pl_state_);
            }
            pub inline fn putOnreadystatechange(self: *const T, p_ready_state_sink_: ?*IDispatch) HRESULT {
                return @as(*const IXMLHTTPRequest.VTable, @ptrCast(self.vtable)).put_onreadystatechange(@as(*const IXMLHTTPRequest, @ptrCast(self)), p_ready_state_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SERVERXMLHTTP_OPTION = enum(i32) {
    URL = -1,
    URL_CODEPAGE = 0,
    ESCAPE_PERCENT_IN_URL = 1,
    IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2,
    SELECT_CLIENT_SSL_CERT = 3,
};
pub const SXH_OPTION_URL = SERVERXMLHTTP_OPTION.URL;
pub const SXH_OPTION_URL_CODEPAGE = SERVERXMLHTTP_OPTION.URL_CODEPAGE;
pub const SXH_OPTION_ESCAPE_PERCENT_IN_URL = SERVERXMLHTTP_OPTION.ESCAPE_PERCENT_IN_URL;
pub const SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = SERVERXMLHTTP_OPTION.IGNORE_SERVER_SSL_CERT_ERROR_FLAGS;
pub const SXH_OPTION_SELECT_CLIENT_SSL_CERT = SERVERXMLHTTP_OPTION.SELECT_CLIENT_SSL_CERT;

pub const SXH_SERVER_CERT_OPTION = enum(i32) {
    UNKNOWN_CA = 256,
    WRONG_USAGE = 512,
    CERT_CN_INVALID = 4096,
    CERT_DATE_INVALID = 8192,
    ALL_SERVER_ERRORS = 13056,
};
pub const SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = SXH_SERVER_CERT_OPTION.UNKNOWN_CA;
pub const SXH_SERVER_CERT_IGNORE_WRONG_USAGE = SXH_SERVER_CERT_OPTION.WRONG_USAGE;
pub const SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = SXH_SERVER_CERT_OPTION.CERT_CN_INVALID;
pub const SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = SXH_SERVER_CERT_OPTION.CERT_DATE_INVALID;
pub const SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = SXH_SERVER_CERT_OPTION.ALL_SERVER_ERRORS;

pub const SXH_PROXY_SETTING = enum(i32) {
    DEFAULT = 0,
    // PRECONFIG = 0, this enum value conflicts with DEFAULT
    DIRECT = 1,
    PROXY = 2,
};
pub const SXH_PROXY_SET_DEFAULT = SXH_PROXY_SETTING.DEFAULT;
pub const SXH_PROXY_SET_PRECONFIG = SXH_PROXY_SETTING.DEFAULT;
pub const SXH_PROXY_SET_DIRECT = SXH_PROXY_SETTING.DIRECT;
pub const SXH_PROXY_SET_PROXY = SXH_PROXY_SETTING.PROXY;

const IID_IServerXMLHTTPRequest_Value = Guid.initString("2e9196bf-13ba-4dd4-91ca-6c571f281495");
pub const IID_IServerXMLHTTPRequest = &IID_IServerXMLHTTPRequest_Value;
pub const IServerXMLHTTPRequest = extern struct {
    pub const VTable = extern struct {
        base: IXMLHTTPRequest.VTable,
        setTimeouts: *const fn (
            self: *const IServerXMLHTTPRequest,
            resolve_timeout: i32,
            connect_timeout: i32,
            send_timeout: i32,
            receive_timeout: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        waitForResponse: *const fn (
            self: *const IServerXMLHTTPRequest,
            timeout_in_seconds: VARIANT,
            is_successful: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getOption: *const fn (
            self: *const IServerXMLHTTPRequest,
            option: SERVERXMLHTTP_OPTION,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setOption: *const fn (
            self: *const IServerXMLHTTPRequest,
            option: SERVERXMLHTTP_OPTION,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLHTTPRequest.MethodMixin(T);
            pub inline fn setTimeouts(self: *const T, resolve_timeout_: i32, connect_timeout_: i32, send_timeout_: i32, receive_timeout_: i32) HRESULT {
                return @as(*const IServerXMLHTTPRequest.VTable, @ptrCast(self.vtable)).setTimeouts(@as(*const IServerXMLHTTPRequest, @ptrCast(self)), resolve_timeout_, connect_timeout_, send_timeout_, receive_timeout_);
            }
            pub inline fn waitForResponse(self: *const T, timeout_in_seconds_: VARIANT, is_successful_: ?*i16) HRESULT {
                return @as(*const IServerXMLHTTPRequest.VTable, @ptrCast(self.vtable)).waitForResponse(@as(*const IServerXMLHTTPRequest, @ptrCast(self)), timeout_in_seconds_, is_successful_);
            }
            pub inline fn getOption(self: *const T, option_: SERVERXMLHTTP_OPTION, value_: ?*VARIANT) HRESULT {
                return @as(*const IServerXMLHTTPRequest.VTable, @ptrCast(self.vtable)).getOption(@as(*const IServerXMLHTTPRequest, @ptrCast(self)), option_, value_);
            }
            pub inline fn setOption(self: *const T, option_: SERVERXMLHTTP_OPTION, value_: VARIANT) HRESULT {
                return @as(*const IServerXMLHTTPRequest.VTable, @ptrCast(self.vtable)).setOption(@as(*const IServerXMLHTTPRequest, @ptrCast(self)), option_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IServerXMLHTTPRequest2_Value = Guid.initString("2e01311b-c322-4b0a-bd77-b90cfdc8dce7");
pub const IID_IServerXMLHTTPRequest2 = &IID_IServerXMLHTTPRequest2_Value;
pub const IServerXMLHTTPRequest2 = extern struct {
    pub const VTable = extern struct {
        base: IServerXMLHTTPRequest.VTable,
        setProxy: *const fn (
            self: *const IServerXMLHTTPRequest2,
            proxy_setting: SXH_PROXY_SETTING,
            var_proxy_server: VARIANT,
            var_bypass_list: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProxyCredentials: *const fn (
            self: *const IServerXMLHTTPRequest2,
            bstr_user_name: ?BSTR,
            bstr_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IServerXMLHTTPRequest.MethodMixin(T);
            pub inline fn setProxy(self: *const T, proxy_setting_: SXH_PROXY_SETTING, var_proxy_server_: VARIANT, var_bypass_list_: VARIANT) HRESULT {
                return @as(*const IServerXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).setProxy(@as(*const IServerXMLHTTPRequest2, @ptrCast(self)), proxy_setting_, var_proxy_server_, var_bypass_list_);
            }
            pub inline fn setProxyCredentials(self: *const T, bstr_user_name_: ?BSTR, bstr_password_: ?BSTR) HRESULT {
                return @as(*const IServerXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).setProxyCredentials(@as(*const IServerXMLHTTPRequest2, @ptrCast(self)), bstr_user_name_, bstr_password_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXXMLReader_Value = Guid.initString("a4f96ed0-f829-476e-81c0-cdc7bd2a0802");
pub const IID_ISAXXMLReader = &IID_ISAXXMLReader_Value;
pub const ISAXXMLReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        getFeature: *const fn (
            self: *const ISAXXMLReader,
            pwch_name: ?[*:0]const u16,
            pvf_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putFeature: *const fn (
            self: *const ISAXXMLReader,
            pwch_name: ?[*:0]const u16,
            vf_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn (
            self: *const ISAXXMLReader,
            pwch_name: ?[*:0]const u16,
            pvar_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putProperty: *const fn (
            self: *const ISAXXMLReader,
            pwch_name: ?[*:0]const u16,
            var_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getEntityResolver: *const fn (
            self: *const ISAXXMLReader,
            pp_resolver: ?*?*ISAXEntityResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putEntityResolver: *const fn (
            self: *const ISAXXMLReader,
            p_resolver: ?*ISAXEntityResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getContentHandler: *const fn (
            self: *const ISAXXMLReader,
            pp_handler: ?*?*ISAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putContentHandler: *const fn (
            self: *const ISAXXMLReader,
            p_handler: ?*ISAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDTDHandler: *const fn (
            self: *const ISAXXMLReader,
            pp_handler: ?*?*ISAXDTDHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putDTDHandler: *const fn (
            self: *const ISAXXMLReader,
            p_handler: ?*ISAXDTDHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorHandler: *const fn (
            self: *const ISAXXMLReader,
            pp_handler: ?*?*ISAXErrorHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putErrorHandler: *const fn (
            self: *const ISAXXMLReader,
            p_handler: ?*ISAXErrorHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getBaseURL: *const fn (
            self: *const ISAXXMLReader,
            ppwch_base_url: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putBaseURL: *const fn (
            self: *const ISAXXMLReader,
            pwch_base_url: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getSecureBaseURL: *const fn (
            self: *const ISAXXMLReader,
            ppwch_secure_base_url: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putSecureBaseURL: *const fn (
            self: *const ISAXXMLReader,
            pwch_secure_base_url: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        parse: *const fn (
            self: *const ISAXXMLReader,
            var_input: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        parseURL: *const fn (
            self: *const ISAXXMLReader,
            pwch_url: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFeature(self: *const T, pwch_name_: ?[*:0]const u16, pvf_value_: ?*i16) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).getFeature(@as(*const ISAXXMLReader, @ptrCast(self)), pwch_name_, pvf_value_);
            }
            pub inline fn putFeature(self: *const T, pwch_name_: ?[*:0]const u16, vf_value_: i16) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).putFeature(@as(*const ISAXXMLReader, @ptrCast(self)), pwch_name_, vf_value_);
            }
            pub inline fn getProperty(self: *const T, pwch_name_: ?[*:0]const u16, pvar_value_: ?*VARIANT) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).getProperty(@as(*const ISAXXMLReader, @ptrCast(self)), pwch_name_, pvar_value_);
            }
            pub inline fn putProperty(self: *const T, pwch_name_: ?[*:0]const u16, var_value_: VARIANT) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).putProperty(@as(*const ISAXXMLReader, @ptrCast(self)), pwch_name_, var_value_);
            }
            pub inline fn getEntityResolver(self: *const T, pp_resolver_: ?*?*ISAXEntityResolver) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).getEntityResolver(@as(*const ISAXXMLReader, @ptrCast(self)), pp_resolver_);
            }
            pub inline fn putEntityResolver(self: *const T, p_resolver_: ?*ISAXEntityResolver) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).putEntityResolver(@as(*const ISAXXMLReader, @ptrCast(self)), p_resolver_);
            }
            pub inline fn getContentHandler(self: *const T, pp_handler_: ?*?*ISAXContentHandler) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).getContentHandler(@as(*const ISAXXMLReader, @ptrCast(self)), pp_handler_);
            }
            pub inline fn putContentHandler(self: *const T, p_handler_: ?*ISAXContentHandler) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).putContentHandler(@as(*const ISAXXMLReader, @ptrCast(self)), p_handler_);
            }
            pub inline fn getDTDHandler(self: *const T, pp_handler_: ?*?*ISAXDTDHandler) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).getDTDHandler(@as(*const ISAXXMLReader, @ptrCast(self)), pp_handler_);
            }
            pub inline fn putDTDHandler(self: *const T, p_handler_: ?*ISAXDTDHandler) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).putDTDHandler(@as(*const ISAXXMLReader, @ptrCast(self)), p_handler_);
            }
            pub inline fn getErrorHandler(self: *const T, pp_handler_: ?*?*ISAXErrorHandler) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).getErrorHandler(@as(*const ISAXXMLReader, @ptrCast(self)), pp_handler_);
            }
            pub inline fn putErrorHandler(self: *const T, p_handler_: ?*ISAXErrorHandler) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).putErrorHandler(@as(*const ISAXXMLReader, @ptrCast(self)), p_handler_);
            }
            pub inline fn getBaseURL(self: *const T, ppwch_base_url_: ?*const ?*u16) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).getBaseURL(@as(*const ISAXXMLReader, @ptrCast(self)), ppwch_base_url_);
            }
            pub inline fn putBaseURL(self: *const T, pwch_base_url_: ?[*:0]const u16) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).putBaseURL(@as(*const ISAXXMLReader, @ptrCast(self)), pwch_base_url_);
            }
            pub inline fn getSecureBaseURL(self: *const T, ppwch_secure_base_url_: ?*const ?*u16) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).getSecureBaseURL(@as(*const ISAXXMLReader, @ptrCast(self)), ppwch_secure_base_url_);
            }
            pub inline fn putSecureBaseURL(self: *const T, pwch_secure_base_url_: ?[*:0]const u16) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).putSecureBaseURL(@as(*const ISAXXMLReader, @ptrCast(self)), pwch_secure_base_url_);
            }
            pub inline fn parse(self: *const T, var_input_: VARIANT) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).parse(@as(*const ISAXXMLReader, @ptrCast(self)), var_input_);
            }
            pub inline fn parseURL(self: *const T, pwch_url_: ?[*:0]const u16) HRESULT {
                return @as(*const ISAXXMLReader.VTable, @ptrCast(self.vtable)).parseURL(@as(*const ISAXXMLReader, @ptrCast(self)), pwch_url_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXXMLFilter_Value = Guid.initString("70409222-ca09-4475-acb8-40312fe8d145");
pub const IID_ISAXXMLFilter = &IID_ISAXXMLFilter_Value;
pub const ISAXXMLFilter = extern struct {
    pub const VTable = extern struct {
        base: ISAXXMLReader.VTable,
        getParent: *const fn (
            self: *const ISAXXMLFilter,
            pp_reader: ?*?*ISAXXMLReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putParent: *const fn (
            self: *const ISAXXMLFilter,
            p_reader: ?*ISAXXMLReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISAXXMLReader.MethodMixin(T);
            pub inline fn getParent(self: *const T, pp_reader_: ?*?*ISAXXMLReader) HRESULT {
                return @as(*const ISAXXMLFilter.VTable, @ptrCast(self.vtable)).getParent(@as(*const ISAXXMLFilter, @ptrCast(self)), pp_reader_);
            }
            pub inline fn putParent(self: *const T, p_reader_: ?*ISAXXMLReader) HRESULT {
                return @as(*const ISAXXMLFilter.VTable, @ptrCast(self.vtable)).putParent(@as(*const ISAXXMLFilter, @ptrCast(self)), p_reader_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXLocator_Value = Guid.initString("9b7e472a-0de4-4640-bff3-84d38a051c31");
pub const IID_ISAXLocator = &IID_ISAXLocator_Value;
pub const ISAXLocator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        getColumnNumber: *const fn (
            self: *const ISAXLocator,
            pn_column: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getLineNumber: *const fn (
            self: *const ISAXLocator,
            pn_line: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getPublicId: *const fn (
            self: *const ISAXLocator,
            ppwch_public_id: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getSystemId: *const fn (
            self: *const ISAXLocator,
            ppwch_system_id: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getColumnNumber(self: *const T, pn_column_: ?*i32) HRESULT {
                return @as(*const ISAXLocator.VTable, @ptrCast(self.vtable)).getColumnNumber(@as(*const ISAXLocator, @ptrCast(self)), pn_column_);
            }
            pub inline fn getLineNumber(self: *const T, pn_line_: ?*i32) HRESULT {
                return @as(*const ISAXLocator.VTable, @ptrCast(self.vtable)).getLineNumber(@as(*const ISAXLocator, @ptrCast(self)), pn_line_);
            }
            pub inline fn getPublicId(self: *const T, ppwch_public_id_: ?*const ?*u16) HRESULT {
                return @as(*const ISAXLocator.VTable, @ptrCast(self.vtable)).getPublicId(@as(*const ISAXLocator, @ptrCast(self)), ppwch_public_id_);
            }
            pub inline fn getSystemId(self: *const T, ppwch_system_id_: ?*const ?*u16) HRESULT {
                return @as(*const ISAXLocator.VTable, @ptrCast(self.vtable)).getSystemId(@as(*const ISAXLocator, @ptrCast(self)), ppwch_system_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXEntityResolver_Value = Guid.initString("99bca7bd-e8c4-4d5f-a0cf-6d907901ff07");
pub const IID_ISAXEntityResolver = &IID_ISAXEntityResolver_Value;
pub const ISAXEntityResolver = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        resolveEntity: *const fn (
            self: *const ISAXEntityResolver,
            pwch_public_id: ?[*:0]const u16,
            pwch_system_id: ?[*:0]const u16,
            pvar_input: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn resolveEntity(self: *const T, pwch_public_id_: ?[*:0]const u16, pwch_system_id_: ?[*:0]const u16, pvar_input_: ?*VARIANT) HRESULT {
                return @as(*const ISAXEntityResolver.VTable, @ptrCast(self.vtable)).resolveEntity(@as(*const ISAXEntityResolver, @ptrCast(self)), pwch_public_id_, pwch_system_id_, pvar_input_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXContentHandler_Value = Guid.initString("1545cdfa-9e4e-4497-a8a4-2bf7d0112c44");
pub const IID_ISAXContentHandler = &IID_ISAXContentHandler_Value;
pub const ISAXContentHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        putDocumentLocator: *const fn (
            self: *const ISAXContentHandler,
            p_locator: ?*ISAXLocator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startDocument: *const fn (
            self: *const ISAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endDocument: *const fn (
            self: *const ISAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startPrefixMapping: *const fn (
            self: *const ISAXContentHandler,
            pwch_prefix: ?[*:0]const u16,
            cch_prefix: i32,
            pwch_uri: ?[*:0]const u16,
            cch_uri: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endPrefixMapping: *const fn (
            self: *const ISAXContentHandler,
            pwch_prefix: ?[*:0]const u16,
            cch_prefix: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startElement: *const fn (
            self: *const ISAXContentHandler,
            pwch_namespace_uri: ?[*:0]const u16,
            cch_namespace_uri: i32,
            pwch_local_name: ?[*:0]const u16,
            cch_local_name: i32,
            pwch_q_name: ?[*:0]const u16,
            cch_q_name: i32,
            p_attributes: ?*ISAXAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endElement: *const fn (
            self: *const ISAXContentHandler,
            pwch_namespace_uri: ?[*:0]const u16,
            cch_namespace_uri: i32,
            pwch_local_name: ?[*:0]const u16,
            cch_local_name: i32,
            pwch_q_name: ?[*:0]const u16,
            cch_q_name: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        characters: *const fn (
            self: *const ISAXContentHandler,
            pwch_chars: ?[*:0]const u16,
            cch_chars: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ignorableWhitespace: *const fn (
            self: *const ISAXContentHandler,
            pwch_chars: ?[*:0]const u16,
            cch_chars: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        processingInstruction: *const fn (
            self: *const ISAXContentHandler,
            pwch_target: ?[*:0]const u16,
            cch_target: i32,
            pwch_data: ?[*:0]const u16,
            cch_data: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        skippedEntity: *const fn (
            self: *const ISAXContentHandler,
            pwch_name: ?[*:0]const u16,
            cch_name: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn putDocumentLocator(self: *const T, p_locator_: ?*ISAXLocator) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).putDocumentLocator(@as(*const ISAXContentHandler, @ptrCast(self)), p_locator_);
            }
            pub inline fn startDocument(self: *const T) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).startDocument(@as(*const ISAXContentHandler, @ptrCast(self)));
            }
            pub inline fn endDocument(self: *const T) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).endDocument(@as(*const ISAXContentHandler, @ptrCast(self)));
            }
            pub inline fn startPrefixMapping(self: *const T, pwch_prefix_: ?[*:0]const u16, cch_prefix_: i32, pwch_uri_: ?[*:0]const u16, cch_uri_: i32) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).startPrefixMapping(@as(*const ISAXContentHandler, @ptrCast(self)), pwch_prefix_, cch_prefix_, pwch_uri_, cch_uri_);
            }
            pub inline fn endPrefixMapping(self: *const T, pwch_prefix_: ?[*:0]const u16, cch_prefix_: i32) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).endPrefixMapping(@as(*const ISAXContentHandler, @ptrCast(self)), pwch_prefix_, cch_prefix_);
            }
            pub inline fn startElement(self: *const T, pwch_namespace_uri_: ?[*:0]const u16, cch_namespace_uri_: i32, pwch_local_name_: ?[*:0]const u16, cch_local_name_: i32, pwch_q_name_: ?[*:0]const u16, cch_q_name_: i32, p_attributes_: ?*ISAXAttributes) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).startElement(@as(*const ISAXContentHandler, @ptrCast(self)), pwch_namespace_uri_, cch_namespace_uri_, pwch_local_name_, cch_local_name_, pwch_q_name_, cch_q_name_, p_attributes_);
            }
            pub inline fn endElement(self: *const T, pwch_namespace_uri_: ?[*:0]const u16, cch_namespace_uri_: i32, pwch_local_name_: ?[*:0]const u16, cch_local_name_: i32, pwch_q_name_: ?[*:0]const u16, cch_q_name_: i32) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).endElement(@as(*const ISAXContentHandler, @ptrCast(self)), pwch_namespace_uri_, cch_namespace_uri_, pwch_local_name_, cch_local_name_, pwch_q_name_, cch_q_name_);
            }
            pub inline fn characters(self: *const T, pwch_chars_: ?[*:0]const u16, cch_chars_: i32) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).characters(@as(*const ISAXContentHandler, @ptrCast(self)), pwch_chars_, cch_chars_);
            }
            pub inline fn ignorableWhitespace(self: *const T, pwch_chars_: ?[*:0]const u16, cch_chars_: i32) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).ignorableWhitespace(@as(*const ISAXContentHandler, @ptrCast(self)), pwch_chars_, cch_chars_);
            }
            pub inline fn processingInstruction(self: *const T, pwch_target_: ?[*:0]const u16, cch_target_: i32, pwch_data_: ?[*:0]const u16, cch_data_: i32) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).processingInstruction(@as(*const ISAXContentHandler, @ptrCast(self)), pwch_target_, cch_target_, pwch_data_, cch_data_);
            }
            pub inline fn skippedEntity(self: *const T, pwch_name_: ?[*:0]const u16, cch_name_: i32) HRESULT {
                return @as(*const ISAXContentHandler.VTable, @ptrCast(self.vtable)).skippedEntity(@as(*const ISAXContentHandler, @ptrCast(self)), pwch_name_, cch_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXDTDHandler_Value = Guid.initString("e15c1baf-afb3-4d60-8c36-19a8c45defed");
pub const IID_ISAXDTDHandler = &IID_ISAXDTDHandler_Value;
pub const ISAXDTDHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        notationDecl: *const fn (
            self: *const ISAXDTDHandler,
            pwch_name: ?[*:0]const u16,
            cch_name: i32,
            pwch_public_id: ?[*:0]const u16,
            cch_public_id: i32,
            pwch_system_id: ?[*:0]const u16,
            cch_system_id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        unparsedEntityDecl: *const fn (
            self: *const ISAXDTDHandler,
            pwch_name: ?[*:0]const u16,
            cch_name: i32,
            pwch_public_id: ?[*:0]const u16,
            cch_public_id: i32,
            pwch_system_id: ?[*:0]const u16,
            cch_system_id: i32,
            pwch_notation_name: ?[*:0]const u16,
            cch_notation_name: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn notationDecl(self: *const T, pwch_name_: ?[*:0]const u16, cch_name_: i32, pwch_public_id_: ?[*:0]const u16, cch_public_id_: i32, pwch_system_id_: ?[*:0]const u16, cch_system_id_: i32) HRESULT {
                return @as(*const ISAXDTDHandler.VTable, @ptrCast(self.vtable)).notationDecl(@as(*const ISAXDTDHandler, @ptrCast(self)), pwch_name_, cch_name_, pwch_public_id_, cch_public_id_, pwch_system_id_, cch_system_id_);
            }
            pub inline fn unparsedEntityDecl(self: *const T, pwch_name_: ?[*:0]const u16, cch_name_: i32, pwch_public_id_: ?[*:0]const u16, cch_public_id_: i32, pwch_system_id_: ?[*:0]const u16, cch_system_id_: i32, pwch_notation_name_: ?[*:0]const u16, cch_notation_name_: i32) HRESULT {
                return @as(*const ISAXDTDHandler.VTable, @ptrCast(self.vtable)).unparsedEntityDecl(@as(*const ISAXDTDHandler, @ptrCast(self)), pwch_name_, cch_name_, pwch_public_id_, cch_public_id_, pwch_system_id_, cch_system_id_, pwch_notation_name_, cch_notation_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXErrorHandler_Value = Guid.initString("a60511c4-ccf5-479e-98a3-dc8dc545b7d0");
pub const IID_ISAXErrorHandler = &IID_ISAXErrorHandler_Value;
pub const ISAXErrorHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        @"error": *const fn (
            self: *const ISAXErrorHandler,
            p_locator: ?*ISAXLocator,
            pwch_error_message: ?[*:0]const u16,
            hr_error_code: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        fatalError: *const fn (
            self: *const ISAXErrorHandler,
            p_locator: ?*ISAXLocator,
            pwch_error_message: ?[*:0]const u16,
            hr_error_code: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ignorableWarning: *const fn (
            self: *const ISAXErrorHandler,
            p_locator: ?*ISAXLocator,
            pwch_error_message: ?[*:0]const u16,
            hr_error_code: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn @"error"(self: *const T, p_locator_: ?*ISAXLocator, pwch_error_message_: ?[*:0]const u16, hr_error_code_: HRESULT) HRESULT {
                return @as(*const ISAXErrorHandler.VTable, @ptrCast(self.vtable)).@"error"(@as(*const ISAXErrorHandler, @ptrCast(self)), p_locator_, pwch_error_message_, hr_error_code_);
            }
            pub inline fn fatalError(self: *const T, p_locator_: ?*ISAXLocator, pwch_error_message_: ?[*:0]const u16, hr_error_code_: HRESULT) HRESULT {
                return @as(*const ISAXErrorHandler.VTable, @ptrCast(self.vtable)).fatalError(@as(*const ISAXErrorHandler, @ptrCast(self)), p_locator_, pwch_error_message_, hr_error_code_);
            }
            pub inline fn ignorableWarning(self: *const T, p_locator_: ?*ISAXLocator, pwch_error_message_: ?[*:0]const u16, hr_error_code_: HRESULT) HRESULT {
                return @as(*const ISAXErrorHandler.VTable, @ptrCast(self.vtable)).ignorableWarning(@as(*const ISAXErrorHandler, @ptrCast(self)), p_locator_, pwch_error_message_, hr_error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXLexicalHandler_Value = Guid.initString("7f85d5f5-47a8-4497-bda5-84ba04819ea6");
pub const IID_ISAXLexicalHandler = &IID_ISAXLexicalHandler_Value;
pub const ISAXLexicalHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        startDTD: *const fn (
            self: *const ISAXLexicalHandler,
            pwch_name: ?[*:0]const u16,
            cch_name: i32,
            pwch_public_id: ?[*:0]const u16,
            cch_public_id: i32,
            pwch_system_id: ?[*:0]const u16,
            cch_system_id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endDTD: *const fn (
            self: *const ISAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startEntity: *const fn (
            self: *const ISAXLexicalHandler,
            pwch_name: ?[*:0]const u16,
            cch_name: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endEntity: *const fn (
            self: *const ISAXLexicalHandler,
            pwch_name: ?[*:0]const u16,
            cch_name: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startCDATA: *const fn (
            self: *const ISAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endCDATA: *const fn (
            self: *const ISAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        comment: *const fn (
            self: *const ISAXLexicalHandler,
            pwch_chars: ?[*:0]const u16,
            cch_chars: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startDTD(self: *const T, pwch_name_: ?[*:0]const u16, cch_name_: i32, pwch_public_id_: ?[*:0]const u16, cch_public_id_: i32, pwch_system_id_: ?[*:0]const u16, cch_system_id_: i32) HRESULT {
                return @as(*const ISAXLexicalHandler.VTable, @ptrCast(self.vtable)).startDTD(@as(*const ISAXLexicalHandler, @ptrCast(self)), pwch_name_, cch_name_, pwch_public_id_, cch_public_id_, pwch_system_id_, cch_system_id_);
            }
            pub inline fn endDTD(self: *const T) HRESULT {
                return @as(*const ISAXLexicalHandler.VTable, @ptrCast(self.vtable)).endDTD(@as(*const ISAXLexicalHandler, @ptrCast(self)));
            }
            pub inline fn startEntity(self: *const T, pwch_name_: ?[*:0]const u16, cch_name_: i32) HRESULT {
                return @as(*const ISAXLexicalHandler.VTable, @ptrCast(self.vtable)).startEntity(@as(*const ISAXLexicalHandler, @ptrCast(self)), pwch_name_, cch_name_);
            }
            pub inline fn endEntity(self: *const T, pwch_name_: ?[*:0]const u16, cch_name_: i32) HRESULT {
                return @as(*const ISAXLexicalHandler.VTable, @ptrCast(self.vtable)).endEntity(@as(*const ISAXLexicalHandler, @ptrCast(self)), pwch_name_, cch_name_);
            }
            pub inline fn startCDATA(self: *const T) HRESULT {
                return @as(*const ISAXLexicalHandler.VTable, @ptrCast(self.vtable)).startCDATA(@as(*const ISAXLexicalHandler, @ptrCast(self)));
            }
            pub inline fn endCDATA(self: *const T) HRESULT {
                return @as(*const ISAXLexicalHandler.VTable, @ptrCast(self.vtable)).endCDATA(@as(*const ISAXLexicalHandler, @ptrCast(self)));
            }
            pub inline fn comment(self: *const T, pwch_chars_: ?[*:0]const u16, cch_chars_: i32) HRESULT {
                return @as(*const ISAXLexicalHandler.VTable, @ptrCast(self.vtable)).comment(@as(*const ISAXLexicalHandler, @ptrCast(self)), pwch_chars_, cch_chars_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXDeclHandler_Value = Guid.initString("862629ac-771a-47b2-8337-4e6843c1be90");
pub const IID_ISAXDeclHandler = &IID_ISAXDeclHandler_Value;
pub const ISAXDeclHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        elementDecl: *const fn (
            self: *const ISAXDeclHandler,
            pwch_name: ?[*:0]const u16,
            cch_name: i32,
            pwch_model: ?[*:0]const u16,
            cch_model: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        attributeDecl: *const fn (
            self: *const ISAXDeclHandler,
            pwch_element_name: ?[*:0]const u16,
            cch_element_name: i32,
            pwch_attribute_name: ?[*:0]const u16,
            cch_attribute_name: i32,
            pwch_type: ?[*:0]const u16,
            cch_type: i32,
            pwch_value_default: ?[*:0]const u16,
            cch_value_default: i32,
            pwch_value: ?[*:0]const u16,
            cch_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        internalEntityDecl: *const fn (
            self: *const ISAXDeclHandler,
            pwch_name: ?[*:0]const u16,
            cch_name: i32,
            pwch_value: ?[*:0]const u16,
            cch_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        externalEntityDecl: *const fn (
            self: *const ISAXDeclHandler,
            pwch_name: ?[*:0]const u16,
            cch_name: i32,
            pwch_public_id: ?[*:0]const u16,
            cch_public_id: i32,
            pwch_system_id: ?[*:0]const u16,
            cch_system_id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn elementDecl(self: *const T, pwch_name_: ?[*:0]const u16, cch_name_: i32, pwch_model_: ?[*:0]const u16, cch_model_: i32) HRESULT {
                return @as(*const ISAXDeclHandler.VTable, @ptrCast(self.vtable)).elementDecl(@as(*const ISAXDeclHandler, @ptrCast(self)), pwch_name_, cch_name_, pwch_model_, cch_model_);
            }
            pub inline fn attributeDecl(self: *const T, pwch_element_name_: ?[*:0]const u16, cch_element_name_: i32, pwch_attribute_name_: ?[*:0]const u16, cch_attribute_name_: i32, pwch_type_: ?[*:0]const u16, cch_type_: i32, pwch_value_default_: ?[*:0]const u16, cch_value_default_: i32, pwch_value_: ?[*:0]const u16, cch_value_: i32) HRESULT {
                return @as(*const ISAXDeclHandler.VTable, @ptrCast(self.vtable)).attributeDecl(@as(*const ISAXDeclHandler, @ptrCast(self)), pwch_element_name_, cch_element_name_, pwch_attribute_name_, cch_attribute_name_, pwch_type_, cch_type_, pwch_value_default_, cch_value_default_, pwch_value_, cch_value_);
            }
            pub inline fn internalEntityDecl(self: *const T, pwch_name_: ?[*:0]const u16, cch_name_: i32, pwch_value_: ?[*:0]const u16, cch_value_: i32) HRESULT {
                return @as(*const ISAXDeclHandler.VTable, @ptrCast(self.vtable)).internalEntityDecl(@as(*const ISAXDeclHandler, @ptrCast(self)), pwch_name_, cch_name_, pwch_value_, cch_value_);
            }
            pub inline fn externalEntityDecl(self: *const T, pwch_name_: ?[*:0]const u16, cch_name_: i32, pwch_public_id_: ?[*:0]const u16, cch_public_id_: i32, pwch_system_id_: ?[*:0]const u16, cch_system_id_: i32) HRESULT {
                return @as(*const ISAXDeclHandler.VTable, @ptrCast(self.vtable)).externalEntityDecl(@as(*const ISAXDeclHandler, @ptrCast(self)), pwch_name_, cch_name_, pwch_public_id_, cch_public_id_, pwch_system_id_, cch_system_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISAXAttributes_Value = Guid.initString("f078abe1-45d2-4832-91ea-4466ce2f25c9");
pub const IID_ISAXAttributes = &IID_ISAXAttributes_Value;
pub const ISAXAttributes = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        getLength: *const fn (
            self: *const ISAXAttributes,
            pn_length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURI: *const fn (
            self: *const ISAXAttributes,
            n_index: i32,
            ppwch_uri: ?*const ?*u16,
            pcch_uri: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getLocalName: *const fn (
            self: *const ISAXAttributes,
            n_index: i32,
            ppwch_local_name: ?*const ?*u16,
            pcch_local_name: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getQName: *const fn (
            self: *const ISAXAttributes,
            n_index: i32,
            ppwch_q_name: ?*const ?*u16,
            pcch_q_name: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getName: *const fn (
            self: *const ISAXAttributes,
            n_index: i32,
            ppwch_uri: ?*const ?*u16,
            pcch_uri: ?*i32,
            ppwch_local_name: ?*const ?*u16,
            pcch_local_name: ?*i32,
            ppwch_q_name: ?*const ?*u16,
            pcch_q_name: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getIndexFromName: *const fn (
            self: *const ISAXAttributes,
            pwch_uri: ?[*:0]const u16,
            cch_uri: i32,
            pwch_local_name: ?[*:0]const u16,
            cch_local_name: i32,
            pn_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getIndexFromQName: *const fn (
            self: *const ISAXAttributes,
            pwch_q_name: ?[*:0]const u16,
            cch_q_name: i32,
            pn_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getType: *const fn (
            self: *const ISAXAttributes,
            n_index: i32,
            ppwch_type: ?*const ?*u16,
            pcch_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getTypeFromName: *const fn (
            self: *const ISAXAttributes,
            pwch_uri: ?[*:0]const u16,
            cch_uri: i32,
            pwch_local_name: ?[*:0]const u16,
            cch_local_name: i32,
            ppwch_type: ?*const ?*u16,
            pcch_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getTypeFromQName: *const fn (
            self: *const ISAXAttributes,
            pwch_q_name: ?[*:0]const u16,
            cch_q_name: i32,
            ppwch_type: ?*const ?*u16,
            pcch_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValue: *const fn (
            self: *const ISAXAttributes,
            n_index: i32,
            ppwch_value: ?*const ?*u16,
            pcch_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValueFromName: *const fn (
            self: *const ISAXAttributes,
            pwch_uri: ?[*:0]const u16,
            cch_uri: i32,
            pwch_local_name: ?[*:0]const u16,
            cch_local_name: i32,
            ppwch_value: ?*const ?*u16,
            pcch_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValueFromQName: *const fn (
            self: *const ISAXAttributes,
            pwch_q_name: ?[*:0]const u16,
            cch_q_name: i32,
            ppwch_value: ?*const ?*u16,
            pcch_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLength(self: *const T, pn_length_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getLength(@as(*const ISAXAttributes, @ptrCast(self)), pn_length_);
            }
            pub inline fn getURI(self: *const T, n_index_: i32, ppwch_uri_: ?*const ?*u16, pcch_uri_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getURI(@as(*const ISAXAttributes, @ptrCast(self)), n_index_, ppwch_uri_, pcch_uri_);
            }
            pub inline fn getLocalName(self: *const T, n_index_: i32, ppwch_local_name_: ?*const ?*u16, pcch_local_name_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getLocalName(@as(*const ISAXAttributes, @ptrCast(self)), n_index_, ppwch_local_name_, pcch_local_name_);
            }
            pub inline fn getQName(self: *const T, n_index_: i32, ppwch_q_name_: ?*const ?*u16, pcch_q_name_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getQName(@as(*const ISAXAttributes, @ptrCast(self)), n_index_, ppwch_q_name_, pcch_q_name_);
            }
            pub inline fn getName(self: *const T, n_index_: i32, ppwch_uri_: ?*const ?*u16, pcch_uri_: ?*i32, ppwch_local_name_: ?*const ?*u16, pcch_local_name_: ?*i32, ppwch_q_name_: ?*const ?*u16, pcch_q_name_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getName(@as(*const ISAXAttributes, @ptrCast(self)), n_index_, ppwch_uri_, pcch_uri_, ppwch_local_name_, pcch_local_name_, ppwch_q_name_, pcch_q_name_);
            }
            pub inline fn getIndexFromName(self: *const T, pwch_uri_: ?[*:0]const u16, cch_uri_: i32, pwch_local_name_: ?[*:0]const u16, cch_local_name_: i32, pn_index_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getIndexFromName(@as(*const ISAXAttributes, @ptrCast(self)), pwch_uri_, cch_uri_, pwch_local_name_, cch_local_name_, pn_index_);
            }
            pub inline fn getIndexFromQName(self: *const T, pwch_q_name_: ?[*:0]const u16, cch_q_name_: i32, pn_index_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getIndexFromQName(@as(*const ISAXAttributes, @ptrCast(self)), pwch_q_name_, cch_q_name_, pn_index_);
            }
            pub inline fn getType(self: *const T, n_index_: i32, ppwch_type_: ?*const ?*u16, pcch_type_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getType(@as(*const ISAXAttributes, @ptrCast(self)), n_index_, ppwch_type_, pcch_type_);
            }
            pub inline fn getTypeFromName(self: *const T, pwch_uri_: ?[*:0]const u16, cch_uri_: i32, pwch_local_name_: ?[*:0]const u16, cch_local_name_: i32, ppwch_type_: ?*const ?*u16, pcch_type_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getTypeFromName(@as(*const ISAXAttributes, @ptrCast(self)), pwch_uri_, cch_uri_, pwch_local_name_, cch_local_name_, ppwch_type_, pcch_type_);
            }
            pub inline fn getTypeFromQName(self: *const T, pwch_q_name_: ?[*:0]const u16, cch_q_name_: i32, ppwch_type_: ?*const ?*u16, pcch_type_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getTypeFromQName(@as(*const ISAXAttributes, @ptrCast(self)), pwch_q_name_, cch_q_name_, ppwch_type_, pcch_type_);
            }
            pub inline fn getValue(self: *const T, n_index_: i32, ppwch_value_: ?*const ?*u16, pcch_value_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getValue(@as(*const ISAXAttributes, @ptrCast(self)), n_index_, ppwch_value_, pcch_value_);
            }
            pub inline fn getValueFromName(self: *const T, pwch_uri_: ?[*:0]const u16, cch_uri_: i32, pwch_local_name_: ?[*:0]const u16, cch_local_name_: i32, ppwch_value_: ?*const ?*u16, pcch_value_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getValueFromName(@as(*const ISAXAttributes, @ptrCast(self)), pwch_uri_, cch_uri_, pwch_local_name_, cch_local_name_, ppwch_value_, pcch_value_);
            }
            pub inline fn getValueFromQName(self: *const T, pwch_q_name_: ?[*:0]const u16, cch_q_name_: i32, ppwch_value_: ?*const ?*u16, pcch_value_: ?*i32) HRESULT {
                return @as(*const ISAXAttributes.VTable, @ptrCast(self.vtable)).getValueFromQName(@as(*const ISAXAttributes, @ptrCast(self)), pwch_q_name_, cch_q_name_, ppwch_value_, pcch_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXXMLReader_Value = Guid.initString("8c033caa-6cd6-4f73-b728-4531af74945f");
pub const IID_IVBSAXXMLReader = &IID_IVBSAXXMLReader_Value;
pub const IVBSAXXMLReader = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getFeature: *const fn (
            self: *const IVBSAXXMLReader,
            str_name: ?BSTR,
            f_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putFeature: *const fn (
            self: *const IVBSAXXMLReader,
            str_name: ?BSTR,
            f_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn (
            self: *const IVBSAXXMLReader,
            str_name: ?BSTR,
            var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putProperty: *const fn (
            self: *const IVBSAXXMLReader,
            str_name: ?BSTR,
            var_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_entityResolver: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXXMLReader,
            o_resolver: ?*?*IVBSAXEntityResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_entityResolver: *const fn (
            self: *const IVBSAXXMLReader,
            o_resolver: ?*IVBSAXEntityResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentHandler: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXXMLReader,
            o_handler: ?*?*IVBSAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_contentHandler: *const fn (
            self: *const IVBSAXXMLReader,
            o_handler: ?*IVBSAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dtdHandler: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXXMLReader,
            o_handler: ?*?*IVBSAXDTDHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_dtdHandler: *const fn (
            self: *const IVBSAXXMLReader,
            o_handler: ?*IVBSAXDTDHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorHandler: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXXMLReader,
            o_handler: ?*?*IVBSAXErrorHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_errorHandler: *const fn (
            self: *const IVBSAXXMLReader,
            o_handler: ?*IVBSAXErrorHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXXMLReader,
            str_base_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baseURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXXMLReader,
            str_base_u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_secureBaseURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXXMLReader,
            str_secure_base_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_secureBaseURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXXMLReader,
            str_secure_base_u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        parse: *const fn (
            self: *const IVBSAXXMLReader,
            var_input: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        parseURL: *const fn (
            self: *const IVBSAXXMLReader,
            str_u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFeature(self: *const T, str_name_: ?BSTR, f_value_: ?*i16) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).getFeature(@as(*const IVBSAXXMLReader, @ptrCast(self)), str_name_, f_value_);
            }
            pub inline fn putFeature(self: *const T, str_name_: ?BSTR, f_value_: i16) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).putFeature(@as(*const IVBSAXXMLReader, @ptrCast(self)), str_name_, f_value_);
            }
            pub inline fn getProperty(self: *const T, str_name_: ?BSTR, var_value_: ?*VARIANT) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).getProperty(@as(*const IVBSAXXMLReader, @ptrCast(self)), str_name_, var_value_);
            }
            pub inline fn putProperty(self: *const T, str_name_: ?BSTR, var_value_: VARIANT) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).putProperty(@as(*const IVBSAXXMLReader, @ptrCast(self)), str_name_, var_value_);
            }
            pub inline fn getEntityResolver(self: *const T, o_resolver_: ?*?*IVBSAXEntityResolver) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).get_entityResolver(@as(*const IVBSAXXMLReader, @ptrCast(self)), o_resolver_);
            }
            pub inline fn putrefEntityResolver(self: *const T, o_resolver_: ?*IVBSAXEntityResolver) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).putref_entityResolver(@as(*const IVBSAXXMLReader, @ptrCast(self)), o_resolver_);
            }
            pub inline fn getContentHandler(self: *const T, o_handler_: ?*?*IVBSAXContentHandler) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).get_contentHandler(@as(*const IVBSAXXMLReader, @ptrCast(self)), o_handler_);
            }
            pub inline fn putrefContentHandler(self: *const T, o_handler_: ?*IVBSAXContentHandler) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).putref_contentHandler(@as(*const IVBSAXXMLReader, @ptrCast(self)), o_handler_);
            }
            pub inline fn getDtdHandler(self: *const T, o_handler_: ?*?*IVBSAXDTDHandler) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).get_dtdHandler(@as(*const IVBSAXXMLReader, @ptrCast(self)), o_handler_);
            }
            pub inline fn putrefDtdHandler(self: *const T, o_handler_: ?*IVBSAXDTDHandler) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).putref_dtdHandler(@as(*const IVBSAXXMLReader, @ptrCast(self)), o_handler_);
            }
            pub inline fn getErrorHandler(self: *const T, o_handler_: ?*?*IVBSAXErrorHandler) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).get_errorHandler(@as(*const IVBSAXXMLReader, @ptrCast(self)), o_handler_);
            }
            pub inline fn putrefErrorHandler(self: *const T, o_handler_: ?*IVBSAXErrorHandler) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).putref_errorHandler(@as(*const IVBSAXXMLReader, @ptrCast(self)), o_handler_);
            }
            pub inline fn getBaseURL(self: *const T, str_base_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).get_baseURL(@as(*const IVBSAXXMLReader, @ptrCast(self)), str_base_u_r_l_);
            }
            pub inline fn putBaseURL(self: *const T, str_base_u_r_l_: ?BSTR) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).put_baseURL(@as(*const IVBSAXXMLReader, @ptrCast(self)), str_base_u_r_l_);
            }
            pub inline fn getSecureBaseURL(self: *const T, str_secure_base_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).get_secureBaseURL(@as(*const IVBSAXXMLReader, @ptrCast(self)), str_secure_base_u_r_l_);
            }
            pub inline fn putSecureBaseURL(self: *const T, str_secure_base_u_r_l_: ?BSTR) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).put_secureBaseURL(@as(*const IVBSAXXMLReader, @ptrCast(self)), str_secure_base_u_r_l_);
            }
            pub inline fn parse(self: *const T, var_input_: VARIANT) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).parse(@as(*const IVBSAXXMLReader, @ptrCast(self)), var_input_);
            }
            pub inline fn parseURL(self: *const T, str_u_r_l_: ?BSTR) HRESULT {
                return @as(*const IVBSAXXMLReader.VTable, @ptrCast(self.vtable)).parseURL(@as(*const IVBSAXXMLReader, @ptrCast(self)), str_u_r_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXXMLFilter_Value = Guid.initString("1299eb1b-5b88-433e-82de-82ca75ad4e04");
pub const IID_IVBSAXXMLFilter = &IID_IVBSAXXMLFilter_Value;
pub const IVBSAXXMLFilter = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXXMLFilter,
            o_reader: ?*?*IVBSAXXMLReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_parent: *const fn (
            self: *const IVBSAXXMLFilter,
            o_reader: ?*IVBSAXXMLReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getParent(self: *const T, o_reader_: ?*?*IVBSAXXMLReader) HRESULT {
                return @as(*const IVBSAXXMLFilter.VTable, @ptrCast(self.vtable)).get_parent(@as(*const IVBSAXXMLFilter, @ptrCast(self)), o_reader_);
            }
            pub inline fn putrefParent(self: *const T, o_reader_: ?*IVBSAXXMLReader) HRESULT {
                return @as(*const IVBSAXXMLFilter.VTable, @ptrCast(self.vtable)).putref_parent(@as(*const IVBSAXXMLFilter, @ptrCast(self)), o_reader_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXLocator_Value = Guid.initString("796e7ac5-5aa2-4eff-acad-3faaf01a3288");
pub const IID_IVBSAXLocator = &IID_IVBSAXLocator_Value;
pub const IVBSAXLocator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_columnNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXLocator,
            n_column: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lineNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXLocator,
            n_line: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_publicId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXLocator,
            str_public_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXLocator,
            str_system_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getColumnNumber(self: *const T, n_column_: ?*i32) HRESULT {
                return @as(*const IVBSAXLocator.VTable, @ptrCast(self.vtable)).get_columnNumber(@as(*const IVBSAXLocator, @ptrCast(self)), n_column_);
            }
            pub inline fn getLineNumber(self: *const T, n_line_: ?*i32) HRESULT {
                return @as(*const IVBSAXLocator.VTable, @ptrCast(self.vtable)).get_lineNumber(@as(*const IVBSAXLocator, @ptrCast(self)), n_line_);
            }
            pub inline fn getPublicId(self: *const T, str_public_id_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXLocator.VTable, @ptrCast(self.vtable)).get_publicId(@as(*const IVBSAXLocator, @ptrCast(self)), str_public_id_);
            }
            pub inline fn getSystemId(self: *const T, str_system_id_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXLocator.VTable, @ptrCast(self.vtable)).get_systemId(@as(*const IVBSAXLocator, @ptrCast(self)), str_system_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXEntityResolver_Value = Guid.initString("0c05d096-f45b-4aca-ad1a-aa0bc25518dc");
pub const IID_IVBSAXEntityResolver = &IID_IVBSAXEntityResolver_Value;
pub const IVBSAXEntityResolver = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        resolveEntity: *const fn (
            self: *const IVBSAXEntityResolver,
            str_public_id: ?*?BSTR,
            str_system_id: ?*?BSTR,
            var_input: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn resolveEntity(self: *const T, str_public_id_: ?*?BSTR, str_system_id_: ?*?BSTR, var_input_: ?*VARIANT) HRESULT {
                return @as(*const IVBSAXEntityResolver.VTable, @ptrCast(self.vtable)).resolveEntity(@as(*const IVBSAXEntityResolver, @ptrCast(self)), str_public_id_, str_system_id_, var_input_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXContentHandler_Value = Guid.initString("2ed7290a-4dd5-4b46-bb26-4e4155e77faa");
pub const IID_IVBSAXContentHandler = &IID_IVBSAXContentHandler_Value;
pub const IVBSAXContentHandler = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        putref_documentLocator: *const fn (
            self: *const IVBSAXContentHandler,
            o_locator: ?*IVBSAXLocator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startDocument: *const fn (
            self: *const IVBSAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endDocument: *const fn (
            self: *const IVBSAXContentHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startPrefixMapping: *const fn (
            self: *const IVBSAXContentHandler,
            str_prefix: ?*?BSTR,
            str_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endPrefixMapping: *const fn (
            self: *const IVBSAXContentHandler,
            str_prefix: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startElement: *const fn (
            self: *const IVBSAXContentHandler,
            str_namespace_u_r_i: ?*?BSTR,
            str_local_name: ?*?BSTR,
            str_q_name: ?*?BSTR,
            o_attributes: ?*IVBSAXAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endElement: *const fn (
            self: *const IVBSAXContentHandler,
            str_namespace_u_r_i: ?*?BSTR,
            str_local_name: ?*?BSTR,
            str_q_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        characters: *const fn (
            self: *const IVBSAXContentHandler,
            str_chars: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ignorableWhitespace: *const fn (
            self: *const IVBSAXContentHandler,
            str_chars: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        processingInstruction: *const fn (
            self: *const IVBSAXContentHandler,
            str_target: ?*?BSTR,
            str_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        skippedEntity: *const fn (
            self: *const IVBSAXContentHandler,
            str_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putrefDocumentLocator(self: *const T, o_locator_: ?*IVBSAXLocator) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).putref_documentLocator(@as(*const IVBSAXContentHandler, @ptrCast(self)), o_locator_);
            }
            pub inline fn startDocument(self: *const T) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).startDocument(@as(*const IVBSAXContentHandler, @ptrCast(self)));
            }
            pub inline fn endDocument(self: *const T) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).endDocument(@as(*const IVBSAXContentHandler, @ptrCast(self)));
            }
            pub inline fn startPrefixMapping(self: *const T, str_prefix_: ?*?BSTR, str_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).startPrefixMapping(@as(*const IVBSAXContentHandler, @ptrCast(self)), str_prefix_, str_u_r_i_);
            }
            pub inline fn endPrefixMapping(self: *const T, str_prefix_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).endPrefixMapping(@as(*const IVBSAXContentHandler, @ptrCast(self)), str_prefix_);
            }
            pub inline fn startElement(self: *const T, str_namespace_u_r_i_: ?*?BSTR, str_local_name_: ?*?BSTR, str_q_name_: ?*?BSTR, o_attributes_: ?*IVBSAXAttributes) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).startElement(@as(*const IVBSAXContentHandler, @ptrCast(self)), str_namespace_u_r_i_, str_local_name_, str_q_name_, o_attributes_);
            }
            pub inline fn endElement(self: *const T, str_namespace_u_r_i_: ?*?BSTR, str_local_name_: ?*?BSTR, str_q_name_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).endElement(@as(*const IVBSAXContentHandler, @ptrCast(self)), str_namespace_u_r_i_, str_local_name_, str_q_name_);
            }
            pub inline fn characters(self: *const T, str_chars_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).characters(@as(*const IVBSAXContentHandler, @ptrCast(self)), str_chars_);
            }
            pub inline fn ignorableWhitespace(self: *const T, str_chars_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).ignorableWhitespace(@as(*const IVBSAXContentHandler, @ptrCast(self)), str_chars_);
            }
            pub inline fn processingInstruction(self: *const T, str_target_: ?*?BSTR, str_data_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).processingInstruction(@as(*const IVBSAXContentHandler, @ptrCast(self)), str_target_, str_data_);
            }
            pub inline fn skippedEntity(self: *const T, str_name_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXContentHandler.VTable, @ptrCast(self.vtable)).skippedEntity(@as(*const IVBSAXContentHandler, @ptrCast(self)), str_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXDTDHandler_Value = Guid.initString("24fb3297-302d-4620-ba39-3a732d850558");
pub const IID_IVBSAXDTDHandler = &IID_IVBSAXDTDHandler_Value;
pub const IVBSAXDTDHandler = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        notationDecl: *const fn (
            self: *const IVBSAXDTDHandler,
            str_name: ?*?BSTR,
            str_public_id: ?*?BSTR,
            str_system_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        unparsedEntityDecl: *const fn (
            self: *const IVBSAXDTDHandler,
            str_name: ?*?BSTR,
            str_public_id: ?*?BSTR,
            str_system_id: ?*?BSTR,
            str_notation_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn notationDecl(self: *const T, str_name_: ?*?BSTR, str_public_id_: ?*?BSTR, str_system_id_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXDTDHandler.VTable, @ptrCast(self.vtable)).notationDecl(@as(*const IVBSAXDTDHandler, @ptrCast(self)), str_name_, str_public_id_, str_system_id_);
            }
            pub inline fn unparsedEntityDecl(self: *const T, str_name_: ?*?BSTR, str_public_id_: ?*?BSTR, str_system_id_: ?*?BSTR, str_notation_name_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXDTDHandler.VTable, @ptrCast(self.vtable)).unparsedEntityDecl(@as(*const IVBSAXDTDHandler, @ptrCast(self)), str_name_, str_public_id_, str_system_id_, str_notation_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXErrorHandler_Value = Guid.initString("d963d3fe-173c-4862-9095-b92f66995f52");
pub const IID_IVBSAXErrorHandler = &IID_IVBSAXErrorHandler_Value;
pub const IVBSAXErrorHandler = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        @"error": *const fn (
            self: *const IVBSAXErrorHandler,
            o_locator: ?*IVBSAXLocator,
            str_error_message: ?*?BSTR,
            n_error_code: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        fatalError: *const fn (
            self: *const IVBSAXErrorHandler,
            o_locator: ?*IVBSAXLocator,
            str_error_message: ?*?BSTR,
            n_error_code: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ignorableWarning: *const fn (
            self: *const IVBSAXErrorHandler,
            o_locator: ?*IVBSAXLocator,
            str_error_message: ?*?BSTR,
            n_error_code: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn @"error"(self: *const T, o_locator_: ?*IVBSAXLocator, str_error_message_: ?*?BSTR, n_error_code_: i32) HRESULT {
                return @as(*const IVBSAXErrorHandler.VTable, @ptrCast(self.vtable)).@"error"(@as(*const IVBSAXErrorHandler, @ptrCast(self)), o_locator_, str_error_message_, n_error_code_);
            }
            pub inline fn fatalError(self: *const T, o_locator_: ?*IVBSAXLocator, str_error_message_: ?*?BSTR, n_error_code_: i32) HRESULT {
                return @as(*const IVBSAXErrorHandler.VTable, @ptrCast(self.vtable)).fatalError(@as(*const IVBSAXErrorHandler, @ptrCast(self)), o_locator_, str_error_message_, n_error_code_);
            }
            pub inline fn ignorableWarning(self: *const T, o_locator_: ?*IVBSAXLocator, str_error_message_: ?*?BSTR, n_error_code_: i32) HRESULT {
                return @as(*const IVBSAXErrorHandler.VTable, @ptrCast(self.vtable)).ignorableWarning(@as(*const IVBSAXErrorHandler, @ptrCast(self)), o_locator_, str_error_message_, n_error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXLexicalHandler_Value = Guid.initString("032aac35-8c0e-4d9d-979f-e3b702935576");
pub const IID_IVBSAXLexicalHandler = &IID_IVBSAXLexicalHandler_Value;
pub const IVBSAXLexicalHandler = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        startDTD: *const fn (
            self: *const IVBSAXLexicalHandler,
            str_name: ?*?BSTR,
            str_public_id: ?*?BSTR,
            str_system_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endDTD: *const fn (
            self: *const IVBSAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startEntity: *const fn (
            self: *const IVBSAXLexicalHandler,
            str_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endEntity: *const fn (
            self: *const IVBSAXLexicalHandler,
            str_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startCDATA: *const fn (
            self: *const IVBSAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        endCDATA: *const fn (
            self: *const IVBSAXLexicalHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        comment: *const fn (
            self: *const IVBSAXLexicalHandler,
            str_chars: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn startDTD(self: *const T, str_name_: ?*?BSTR, str_public_id_: ?*?BSTR, str_system_id_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXLexicalHandler.VTable, @ptrCast(self.vtable)).startDTD(@as(*const IVBSAXLexicalHandler, @ptrCast(self)), str_name_, str_public_id_, str_system_id_);
            }
            pub inline fn endDTD(self: *const T) HRESULT {
                return @as(*const IVBSAXLexicalHandler.VTable, @ptrCast(self.vtable)).endDTD(@as(*const IVBSAXLexicalHandler, @ptrCast(self)));
            }
            pub inline fn startEntity(self: *const T, str_name_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXLexicalHandler.VTable, @ptrCast(self.vtable)).startEntity(@as(*const IVBSAXLexicalHandler, @ptrCast(self)), str_name_);
            }
            pub inline fn endEntity(self: *const T, str_name_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXLexicalHandler.VTable, @ptrCast(self.vtable)).endEntity(@as(*const IVBSAXLexicalHandler, @ptrCast(self)), str_name_);
            }
            pub inline fn startCDATA(self: *const T) HRESULT {
                return @as(*const IVBSAXLexicalHandler.VTable, @ptrCast(self.vtable)).startCDATA(@as(*const IVBSAXLexicalHandler, @ptrCast(self)));
            }
            pub inline fn endCDATA(self: *const T) HRESULT {
                return @as(*const IVBSAXLexicalHandler.VTable, @ptrCast(self.vtable)).endCDATA(@as(*const IVBSAXLexicalHandler, @ptrCast(self)));
            }
            pub inline fn comment(self: *const T, str_chars_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXLexicalHandler.VTable, @ptrCast(self.vtable)).comment(@as(*const IVBSAXLexicalHandler, @ptrCast(self)), str_chars_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXDeclHandler_Value = Guid.initString("e8917260-7579-4be1-b5dd-7afbfa6f077b");
pub const IID_IVBSAXDeclHandler = &IID_IVBSAXDeclHandler_Value;
pub const IVBSAXDeclHandler = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        elementDecl: *const fn (
            self: *const IVBSAXDeclHandler,
            str_name: ?*?BSTR,
            str_model: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        attributeDecl: *const fn (
            self: *const IVBSAXDeclHandler,
            str_element_name: ?*?BSTR,
            str_attribute_name: ?*?BSTR,
            str_type: ?*?BSTR,
            str_value_default: ?*?BSTR,
            str_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        internalEntityDecl: *const fn (
            self: *const IVBSAXDeclHandler,
            str_name: ?*?BSTR,
            str_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        externalEntityDecl: *const fn (
            self: *const IVBSAXDeclHandler,
            str_name: ?*?BSTR,
            str_public_id: ?*?BSTR,
            str_system_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn elementDecl(self: *const T, str_name_: ?*?BSTR, str_model_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXDeclHandler.VTable, @ptrCast(self.vtable)).elementDecl(@as(*const IVBSAXDeclHandler, @ptrCast(self)), str_name_, str_model_);
            }
            pub inline fn attributeDecl(self: *const T, str_element_name_: ?*?BSTR, str_attribute_name_: ?*?BSTR, str_type_: ?*?BSTR, str_value_default_: ?*?BSTR, str_value_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXDeclHandler.VTable, @ptrCast(self.vtable)).attributeDecl(@as(*const IVBSAXDeclHandler, @ptrCast(self)), str_element_name_, str_attribute_name_, str_type_, str_value_default_, str_value_);
            }
            pub inline fn internalEntityDecl(self: *const T, str_name_: ?*?BSTR, str_value_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXDeclHandler.VTable, @ptrCast(self.vtable)).internalEntityDecl(@as(*const IVBSAXDeclHandler, @ptrCast(self)), str_name_, str_value_);
            }
            pub inline fn externalEntityDecl(self: *const T, str_name_: ?*?BSTR, str_public_id_: ?*?BSTR, str_system_id_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXDeclHandler.VTable, @ptrCast(self.vtable)).externalEntityDecl(@as(*const IVBSAXDeclHandler, @ptrCast(self)), str_name_, str_public_id_, str_system_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBSAXAttributes_Value = Guid.initString("10dc0586-132b-4cac-8bb3-db00ac8b7ee0");
pub const IID_IVBSAXAttributes = &IID_IVBSAXAttributes_Value;
pub const IVBSAXAttributes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBSAXAttributes,
            n_length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURI: *const fn (
            self: *const IVBSAXAttributes,
            n_index: i32,
            str_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getLocalName: *const fn (
            self: *const IVBSAXAttributes,
            n_index: i32,
            str_local_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getQName: *const fn (
            self: *const IVBSAXAttributes,
            n_index: i32,
            str_q_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getIndexFromName: *const fn (
            self: *const IVBSAXAttributes,
            str_u_r_i: ?BSTR,
            str_local_name: ?BSTR,
            n_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getIndexFromQName: *const fn (
            self: *const IVBSAXAttributes,
            str_q_name: ?BSTR,
            n_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getType: *const fn (
            self: *const IVBSAXAttributes,
            n_index: i32,
            str_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getTypeFromName: *const fn (
            self: *const IVBSAXAttributes,
            str_u_r_i: ?BSTR,
            str_local_name: ?BSTR,
            str_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getTypeFromQName: *const fn (
            self: *const IVBSAXAttributes,
            str_q_name: ?BSTR,
            str_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValue: *const fn (
            self: *const IVBSAXAttributes,
            n_index: i32,
            str_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValueFromName: *const fn (
            self: *const IVBSAXAttributes,
            str_u_r_i: ?BSTR,
            str_local_name: ?BSTR,
            str_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getValueFromQName: *const fn (
            self: *const IVBSAXAttributes,
            str_q_name: ?BSTR,
            str_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getLength(self: *const T, n_length_: ?*i32) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).get_length(@as(*const IVBSAXAttributes, @ptrCast(self)), n_length_);
            }
            pub inline fn getURI(self: *const T, n_index_: i32, str_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getURI(@as(*const IVBSAXAttributes, @ptrCast(self)), n_index_, str_u_r_i_);
            }
            pub inline fn getLocalName(self: *const T, n_index_: i32, str_local_name_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getLocalName(@as(*const IVBSAXAttributes, @ptrCast(self)), n_index_, str_local_name_);
            }
            pub inline fn getQName(self: *const T, n_index_: i32, str_q_name_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getQName(@as(*const IVBSAXAttributes, @ptrCast(self)), n_index_, str_q_name_);
            }
            pub inline fn getIndexFromName(self: *const T, str_u_r_i_: ?BSTR, str_local_name_: ?BSTR, n_index_: ?*i32) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getIndexFromName(@as(*const IVBSAXAttributes, @ptrCast(self)), str_u_r_i_, str_local_name_, n_index_);
            }
            pub inline fn getIndexFromQName(self: *const T, str_q_name_: ?BSTR, n_index_: ?*i32) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getIndexFromQName(@as(*const IVBSAXAttributes, @ptrCast(self)), str_q_name_, n_index_);
            }
            pub inline fn getType(self: *const T, n_index_: i32, str_type_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getType(@as(*const IVBSAXAttributes, @ptrCast(self)), n_index_, str_type_);
            }
            pub inline fn getTypeFromName(self: *const T, str_u_r_i_: ?BSTR, str_local_name_: ?BSTR, str_type_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getTypeFromName(@as(*const IVBSAXAttributes, @ptrCast(self)), str_u_r_i_, str_local_name_, str_type_);
            }
            pub inline fn getTypeFromQName(self: *const T, str_q_name_: ?BSTR, str_type_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getTypeFromQName(@as(*const IVBSAXAttributes, @ptrCast(self)), str_q_name_, str_type_);
            }
            pub inline fn getValue(self: *const T, n_index_: i32, str_value_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getValue(@as(*const IVBSAXAttributes, @ptrCast(self)), n_index_, str_value_);
            }
            pub inline fn getValueFromName(self: *const T, str_u_r_i_: ?BSTR, str_local_name_: ?BSTR, str_value_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getValueFromName(@as(*const IVBSAXAttributes, @ptrCast(self)), str_u_r_i_, str_local_name_, str_value_);
            }
            pub inline fn getValueFromQName(self: *const T, str_q_name_: ?BSTR, str_value_: ?*?BSTR) HRESULT {
                return @as(*const IVBSAXAttributes.VTable, @ptrCast(self.vtable)).getValueFromQName(@as(*const IVBSAXAttributes, @ptrCast(self)), str_q_name_, str_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMXWriter_Value = Guid.initString("4d7ff4ba-1565-4ea8-94e1-6e724a46f98d");
pub const IID_IMXWriter = &IID_IMXWriter_Value;
pub const IMXWriter = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_output: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            var_destination: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_output: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            var_destination: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_encoding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            str_encoding: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_encoding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            str_encoding: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_byteOrderMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_write_byte_order_mark: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_byteOrderMark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_write_byte_order_mark: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_indent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_indent_mode: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_indent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_indent_mode: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_standalone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_standalone: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_omitXMLDeclaration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_omitXMLDeclaration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            str_version: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            str_version: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_disableOutputEscaping: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disableOutputEscaping: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXWriter,
            f_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        flush: *const fn (
            self: *const IMXWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putOutput(self: *const T, var_destination_: VARIANT) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).put_output(@as(*const IMXWriter, @ptrCast(self)), var_destination_);
            }
            pub inline fn getOutput(self: *const T, var_destination_: ?*VARIANT) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).get_output(@as(*const IMXWriter, @ptrCast(self)), var_destination_);
            }
            pub inline fn putEncoding(self: *const T, str_encoding_: ?BSTR) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).put_encoding(@as(*const IMXWriter, @ptrCast(self)), str_encoding_);
            }
            pub inline fn getEncoding(self: *const T, str_encoding_: ?*?BSTR) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).get_encoding(@as(*const IMXWriter, @ptrCast(self)), str_encoding_);
            }
            pub inline fn putByteOrderMark(self: *const T, f_write_byte_order_mark_: i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).put_byteOrderMark(@as(*const IMXWriter, @ptrCast(self)), f_write_byte_order_mark_);
            }
            pub inline fn getByteOrderMark(self: *const T, f_write_byte_order_mark_: ?*i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).get_byteOrderMark(@as(*const IMXWriter, @ptrCast(self)), f_write_byte_order_mark_);
            }
            pub inline fn putIndent(self: *const T, f_indent_mode_: i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).put_indent(@as(*const IMXWriter, @ptrCast(self)), f_indent_mode_);
            }
            pub inline fn getIndent(self: *const T, f_indent_mode_: ?*i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).get_indent(@as(*const IMXWriter, @ptrCast(self)), f_indent_mode_);
            }
            pub inline fn putStandalone(self: *const T, f_value_: i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).put_standalone(@as(*const IMXWriter, @ptrCast(self)), f_value_);
            }
            pub inline fn getStandalone(self: *const T, f_value_: ?*i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).get_standalone(@as(*const IMXWriter, @ptrCast(self)), f_value_);
            }
            pub inline fn putOmitXMLDeclaration(self: *const T, f_value_: i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).put_omitXMLDeclaration(@as(*const IMXWriter, @ptrCast(self)), f_value_);
            }
            pub inline fn getOmitXMLDeclaration(self: *const T, f_value_: ?*i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).get_omitXMLDeclaration(@as(*const IMXWriter, @ptrCast(self)), f_value_);
            }
            pub inline fn putVersion(self: *const T, str_version_: ?BSTR) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).put_version(@as(*const IMXWriter, @ptrCast(self)), str_version_);
            }
            pub inline fn getVersion(self: *const T, str_version_: ?*?BSTR) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).get_version(@as(*const IMXWriter, @ptrCast(self)), str_version_);
            }
            pub inline fn putDisableOutputEscaping(self: *const T, f_value_: i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).put_disableOutputEscaping(@as(*const IMXWriter, @ptrCast(self)), f_value_);
            }
            pub inline fn getDisableOutputEscaping(self: *const T, f_value_: ?*i16) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).get_disableOutputEscaping(@as(*const IMXWriter, @ptrCast(self)), f_value_);
            }
            pub inline fn flush(self: *const T) HRESULT {
                return @as(*const IMXWriter.VTable, @ptrCast(self.vtable)).flush(@as(*const IMXWriter, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMXAttributes_Value = Guid.initString("f10d27cc-3ec0-415c-8ed8-77ab1c5e7262");
pub const IID_IMXAttributes = &IID_IMXAttributes_Value;
pub const IMXAttributes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        addAttribute: *const fn (
            self: *const IMXAttributes,
            str_u_r_i: ?BSTR,
            str_local_name: ?BSTR,
            str_q_name: ?BSTR,
            str_type: ?BSTR,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addAttributeFromIndex: *const fn (
            self: *const IMXAttributes,
            var_atts: VARIANT,
            n_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        clear: *const fn (
            self: *const IMXAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeAttribute: *const fn (
            self: *const IMXAttributes,
            n_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttribute: *const fn (
            self: *const IMXAttributes,
            n_index: i32,
            str_u_r_i: ?BSTR,
            str_local_name: ?BSTR,
            str_q_name: ?BSTR,
            str_type: ?BSTR,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAttributes: *const fn (
            self: *const IMXAttributes,
            var_atts: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setLocalName: *const fn (
            self: *const IMXAttributes,
            n_index: i32,
            str_local_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setQName: *const fn (
            self: *const IMXAttributes,
            n_index: i32,
            str_q_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setType: *const fn (
            self: *const IMXAttributes,
            n_index: i32,
            str_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setURI: *const fn (
            self: *const IMXAttributes,
            n_index: i32,
            str_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setValue: *const fn (
            self: *const IMXAttributes,
            n_index: i32,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn addAttribute(self: *const T, str_u_r_i_: ?BSTR, str_local_name_: ?BSTR, str_q_name_: ?BSTR, str_type_: ?BSTR, str_value_: ?BSTR) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).addAttribute(@as(*const IMXAttributes, @ptrCast(self)), str_u_r_i_, str_local_name_, str_q_name_, str_type_, str_value_);
            }
            pub inline fn addAttributeFromIndex(self: *const T, var_atts_: VARIANT, n_index_: i32) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).addAttributeFromIndex(@as(*const IMXAttributes, @ptrCast(self)), var_atts_, n_index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).clear(@as(*const IMXAttributes, @ptrCast(self)));
            }
            pub inline fn removeAttribute(self: *const T, n_index_: i32) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).removeAttribute(@as(*const IMXAttributes, @ptrCast(self)), n_index_);
            }
            pub inline fn setAttribute(self: *const T, n_index_: i32, str_u_r_i_: ?BSTR, str_local_name_: ?BSTR, str_q_name_: ?BSTR, str_type_: ?BSTR, str_value_: ?BSTR) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).setAttribute(@as(*const IMXAttributes, @ptrCast(self)), n_index_, str_u_r_i_, str_local_name_, str_q_name_, str_type_, str_value_);
            }
            pub inline fn setAttributes(self: *const T, var_atts_: VARIANT) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).setAttributes(@as(*const IMXAttributes, @ptrCast(self)), var_atts_);
            }
            pub inline fn setLocalName(self: *const T, n_index_: i32, str_local_name_: ?BSTR) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).setLocalName(@as(*const IMXAttributes, @ptrCast(self)), n_index_, str_local_name_);
            }
            pub inline fn setQName(self: *const T, n_index_: i32, str_q_name_: ?BSTR) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).setQName(@as(*const IMXAttributes, @ptrCast(self)), n_index_, str_q_name_);
            }
            pub inline fn setType(self: *const T, n_index_: i32, str_type_: ?BSTR) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).setType(@as(*const IMXAttributes, @ptrCast(self)), n_index_, str_type_);
            }
            pub inline fn setURI(self: *const T, n_index_: i32, str_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).setURI(@as(*const IMXAttributes, @ptrCast(self)), n_index_, str_u_r_i_);
            }
            pub inline fn setValue(self: *const T, n_index_: i32, str_value_: ?BSTR) HRESULT {
                return @as(*const IMXAttributes.VTable, @ptrCast(self.vtable)).setValue(@as(*const IMXAttributes, @ptrCast(self)), n_index_, str_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMXReaderControl_Value = Guid.initString("808f4e35-8d5a-4fbe-8466-33a41279ed30");
pub const IID_IMXReaderControl = &IID_IMXReaderControl_Value;
pub const IMXReaderControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        abort: *const fn (
            self: *const IMXReaderControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        @"resume": *const fn (
            self: *const IMXReaderControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        @"suspend": *const fn (
            self: *const IMXReaderControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const IMXReaderControl.VTable, @ptrCast(self.vtable)).abort(@as(*const IMXReaderControl, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IMXReaderControl.VTable, @ptrCast(self.vtable)).@"resume"(@as(*const IMXReaderControl, @ptrCast(self)));
            }
            pub inline fn @"suspend"(self: *const T) HRESULT {
                return @as(*const IMXReaderControl.VTable, @ptrCast(self.vtable)).@"suspend"(@as(*const IMXReaderControl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMXSchemaDeclHandler_Value = Guid.initString("fa4bb38c-faf9-4cca-9302-d1dd0fe520db");
pub const IID_IMXSchemaDeclHandler = &IID_IMXSchemaDeclHandler_Value;
pub const IMXSchemaDeclHandler = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        schemaElementDecl: *const fn (
            self: *const IMXSchemaDeclHandler,
            o_schema_element: ?*ISchemaElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn schemaElementDecl(self: *const T, o_schema_element_: ?*ISchemaElement) HRESULT {
                return @as(*const IMXSchemaDeclHandler.VTable, @ptrCast(self.vtable)).schemaElementDecl(@as(*const IMXSchemaDeclHandler, @ptrCast(self)), o_schema_element_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMXNamespacePrefixes_Value = Guid.initString("c90352f4-643c-4fbc-bb23-e996eb2d51fd");
pub const IID_IMXNamespacePrefixes = &IID_IMXNamespacePrefixes_Value;
pub const IMXNamespacePrefixes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXNamespacePrefixes,
            index: i32,
            prefix: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXNamespacePrefixes,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXNamespacePrefixes,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, prefix_: ?*?BSTR) HRESULT {
                return @as(*const IMXNamespacePrefixes.VTable, @ptrCast(self.vtable)).get_item(@as(*const IMXNamespacePrefixes, @ptrCast(self)), index_, prefix_);
            }
            pub inline fn getLength(self: *const T, length_: ?*i32) HRESULT {
                return @as(*const IMXNamespacePrefixes.VTable, @ptrCast(self.vtable)).get_length(@as(*const IMXNamespacePrefixes, @ptrCast(self)), length_);
            }
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IMXNamespacePrefixes.VTable, @ptrCast(self.vtable)).get__newEnum(@as(*const IMXNamespacePrefixes, @ptrCast(self)), pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVBMXNamespaceManager_Value = Guid.initString("c90352f5-643c-4fbc-bb23-e996eb2d51fd");
pub const IID_IVBMXNamespaceManager = &IID_IVBMXNamespaceManager_Value;
pub const IVBMXNamespaceManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_allowOverride: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBMXNamespaceManager,
            f_override: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_allowOverride: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IVBMXNamespaceManager,
            f_override: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn (
            self: *const IVBMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pushContext: *const fn (
            self: *const IVBMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pushNodeContext: *const fn (
            self: *const IVBMXNamespaceManager,
            context_node: ?*IXMLDOMNode,
            f_deep: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        popContext: *const fn (
            self: *const IVBMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        declarePrefix: *const fn (
            self: *const IVBMXNamespaceManager,
            prefix: ?BSTR,
            namespace_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDeclaredPrefixes: *const fn (
            self: *const IVBMXNamespaceManager,
            prefixes: ?*?*IMXNamespacePrefixes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getPrefixes: *const fn (
            self: *const IVBMXNamespaceManager,
            namespace_u_r_i: ?BSTR,
            prefixes: ?*?*IMXNamespacePrefixes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURI: *const fn (
            self: *const IVBMXNamespaceManager,
            prefix: ?BSTR,
            uri: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURIFromNode: *const fn (
            self: *const IVBMXNamespaceManager,
            str_prefix: ?BSTR,
            context_node: ?*IXMLDOMNode,
            uri: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putAllowOverride(self: *const T, f_override_: i16) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).put_allowOverride(@as(*const IVBMXNamespaceManager, @ptrCast(self)), f_override_);
            }
            pub inline fn getAllowOverride(self: *const T, f_override_: ?*i16) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).get_allowOverride(@as(*const IVBMXNamespaceManager, @ptrCast(self)), f_override_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).reset(@as(*const IVBMXNamespaceManager, @ptrCast(self)));
            }
            pub inline fn pushContext(self: *const T) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).pushContext(@as(*const IVBMXNamespaceManager, @ptrCast(self)));
            }
            pub inline fn pushNodeContext(self: *const T, context_node_: ?*IXMLDOMNode, f_deep_: i16) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).pushNodeContext(@as(*const IVBMXNamespaceManager, @ptrCast(self)), context_node_, f_deep_);
            }
            pub inline fn popContext(self: *const T) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).popContext(@as(*const IVBMXNamespaceManager, @ptrCast(self)));
            }
            pub inline fn declarePrefix(self: *const T, prefix_: ?BSTR, namespace_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).declarePrefix(@as(*const IVBMXNamespaceManager, @ptrCast(self)), prefix_, namespace_u_r_i_);
            }
            pub inline fn getDeclaredPrefixes(self: *const T, prefixes_: ?*?*IMXNamespacePrefixes) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).getDeclaredPrefixes(@as(*const IVBMXNamespaceManager, @ptrCast(self)), prefixes_);
            }
            pub inline fn getPrefixes(self: *const T, namespace_u_r_i_: ?BSTR, prefixes_: ?*?*IMXNamespacePrefixes) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).getPrefixes(@as(*const IVBMXNamespaceManager, @ptrCast(self)), namespace_u_r_i_, prefixes_);
            }
            pub inline fn getURI(self: *const T, prefix_: ?BSTR, uri_: ?*VARIANT) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).getURI(@as(*const IVBMXNamespaceManager, @ptrCast(self)), prefix_, uri_);
            }
            pub inline fn getURIFromNode(self: *const T, str_prefix_: ?BSTR, context_node_: ?*IXMLDOMNode, uri_: ?*VARIANT) HRESULT {
                return @as(*const IVBMXNamespaceManager.VTable, @ptrCast(self.vtable)).getURIFromNode(@as(*const IVBMXNamespaceManager, @ptrCast(self)), str_prefix_, context_node_, uri_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMXNamespaceManager_Value = Guid.initString("c90352f6-643c-4fbc-bb23-e996eb2d51fd");
pub const IID_IMXNamespaceManager = &IID_IMXNamespaceManager_Value;
pub const IMXNamespaceManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        putAllowOverride: *const fn (
            self: *const IMXNamespaceManager,
            f_override: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAllowOverride: *const fn (
            self: *const IMXNamespaceManager,
            f_override: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        reset: *const fn (
            self: *const IMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pushContext: *const fn (
            self: *const IMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pushNodeContext: *const fn (
            self: *const IMXNamespaceManager,
            context_node: ?*IXMLDOMNode,
            f_deep: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        popContext: *const fn (
            self: *const IMXNamespaceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        declarePrefix: *const fn (
            self: *const IMXNamespaceManager,
            prefix: ?[*:0]const u16,
            namespace_u_r_i: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDeclaredPrefix: *const fn (
            self: *const IMXNamespaceManager,
            n_index: i32,
            pwch_prefix: [*:0]u16,
            pcch_prefix: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getPrefix: *const fn (
            self: *const IMXNamespaceManager,
            pwsz_namespace_u_r_i: ?[*:0]const u16,
            n_index: i32,
            pwch_prefix: [*:0]u16,
            pcch_prefix: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getURI: *const fn (
            self: *const IMXNamespaceManager,
            pwch_prefix: ?[*:0]const u16,
            p_context_node: ?*IXMLDOMNode,
            pwch_uri: [*:0]u16,
            pcch_uri: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn putAllowOverride(self: *const T, f_override_: i16) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).putAllowOverride(@as(*const IMXNamespaceManager, @ptrCast(self)), f_override_);
            }
            pub inline fn getAllowOverride(self: *const T, f_override_: ?*i16) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).getAllowOverride(@as(*const IMXNamespaceManager, @ptrCast(self)), f_override_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).reset(@as(*const IMXNamespaceManager, @ptrCast(self)));
            }
            pub inline fn pushContext(self: *const T) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).pushContext(@as(*const IMXNamespaceManager, @ptrCast(self)));
            }
            pub inline fn pushNodeContext(self: *const T, context_node_: ?*IXMLDOMNode, f_deep_: i16) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).pushNodeContext(@as(*const IMXNamespaceManager, @ptrCast(self)), context_node_, f_deep_);
            }
            pub inline fn popContext(self: *const T) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).popContext(@as(*const IMXNamespaceManager, @ptrCast(self)));
            }
            pub inline fn declarePrefix(self: *const T, prefix_: ?[*:0]const u16, namespace_u_r_i_: ?[*:0]const u16) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).declarePrefix(@as(*const IMXNamespaceManager, @ptrCast(self)), prefix_, namespace_u_r_i_);
            }
            pub inline fn getDeclaredPrefix(self: *const T, n_index_: i32, pwch_prefix_: [*:0]u16, pcch_prefix_: ?*i32) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).getDeclaredPrefix(@as(*const IMXNamespaceManager, @ptrCast(self)), n_index_, pwch_prefix_, pcch_prefix_);
            }
            pub inline fn getPrefix(self: *const T, pwsz_namespace_u_r_i_: ?[*:0]const u16, n_index_: i32, pwch_prefix_: [*:0]u16, pcch_prefix_: ?*i32) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).getPrefix(@as(*const IMXNamespaceManager, @ptrCast(self)), pwsz_namespace_u_r_i_, n_index_, pwch_prefix_, pcch_prefix_);
            }
            pub inline fn getURI(self: *const T, pwch_prefix_: ?[*:0]const u16, p_context_node_: ?*IXMLDOMNode, pwch_uri_: [*:0]u16, pcch_uri_: ?*i32) HRESULT {
                return @as(*const IMXNamespaceManager.VTable, @ptrCast(self.vtable)).getURI(@as(*const IMXNamespaceManager, @ptrCast(self)), pwch_prefix_, p_context_node_, pwch_uri_, pcch_uri_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMXXMLFilter_Value = Guid.initString("c90352f7-643c-4fbc-bb23-e996eb2d51fd");
pub const IID_IMXXMLFilter = &IID_IMXXMLFilter_Value;
pub const IMXXMLFilter = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getFeature: *const fn (
            self: *const IMXXMLFilter,
            str_name: ?BSTR,
            f_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putFeature: *const fn (
            self: *const IMXXMLFilter,
            str_name: ?BSTR,
            f_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProperty: *const fn (
            self: *const IMXXMLFilter,
            str_name: ?BSTR,
            var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putProperty: *const fn (
            self: *const IMXXMLFilter,
            str_name: ?BSTR,
            var_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_entityResolver: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXXMLFilter,
            o_resolver: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_entityResolver: *const fn (
            self: *const IMXXMLFilter,
            o_resolver: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentHandler: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXXMLFilter,
            o_handler: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_contentHandler: *const fn (
            self: *const IMXXMLFilter,
            o_handler: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dtdHandler: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXXMLFilter,
            o_handler: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_dtdHandler: *const fn (
            self: *const IMXXMLFilter,
            o_handler: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorHandler: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMXXMLFilter,
            o_handler: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_errorHandler: *const fn (
            self: *const IMXXMLFilter,
            o_handler: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFeature(self: *const T, str_name_: ?BSTR, f_value_: ?*i16) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).getFeature(@as(*const IMXXMLFilter, @ptrCast(self)), str_name_, f_value_);
            }
            pub inline fn putFeature(self: *const T, str_name_: ?BSTR, f_value_: i16) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).putFeature(@as(*const IMXXMLFilter, @ptrCast(self)), str_name_, f_value_);
            }
            pub inline fn getProperty(self: *const T, str_name_: ?BSTR, var_value_: ?*VARIANT) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).getProperty(@as(*const IMXXMLFilter, @ptrCast(self)), str_name_, var_value_);
            }
            pub inline fn putProperty(self: *const T, str_name_: ?BSTR, var_value_: VARIANT) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).putProperty(@as(*const IMXXMLFilter, @ptrCast(self)), str_name_, var_value_);
            }
            pub inline fn getEntityResolver(self: *const T, o_resolver_: ?*?*IUnknown) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).get_entityResolver(@as(*const IMXXMLFilter, @ptrCast(self)), o_resolver_);
            }
            pub inline fn putrefEntityResolver(self: *const T, o_resolver_: ?*IUnknown) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).putref_entityResolver(@as(*const IMXXMLFilter, @ptrCast(self)), o_resolver_);
            }
            pub inline fn getContentHandler(self: *const T, o_handler_: ?*?*IUnknown) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).get_contentHandler(@as(*const IMXXMLFilter, @ptrCast(self)), o_handler_);
            }
            pub inline fn putrefContentHandler(self: *const T, o_handler_: ?*IUnknown) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).putref_contentHandler(@as(*const IMXXMLFilter, @ptrCast(self)), o_handler_);
            }
            pub inline fn getDtdHandler(self: *const T, o_handler_: ?*?*IUnknown) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).get_dtdHandler(@as(*const IMXXMLFilter, @ptrCast(self)), o_handler_);
            }
            pub inline fn putrefDtdHandler(self: *const T, o_handler_: ?*IUnknown) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).putref_dtdHandler(@as(*const IMXXMLFilter, @ptrCast(self)), o_handler_);
            }
            pub inline fn getErrorHandler(self: *const T, o_handler_: ?*?*IUnknown) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).get_errorHandler(@as(*const IMXXMLFilter, @ptrCast(self)), o_handler_);
            }
            pub inline fn putrefErrorHandler(self: *const T, o_handler_: ?*IUnknown) HRESULT {
                return @as(*const IMXXMLFilter.VTable, @ptrCast(self.vtable)).putref_errorHandler(@as(*const IMXXMLFilter, @ptrCast(self)), o_handler_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SOMITEMTYPE = enum(i32) {
    SCHEMA = 4096,
    ATTRIBUTE = 4097,
    ATTRIBUTEGROUP = 4098,
    NOTATION = 4099,
    ANNOTATION = 4100,
    IDENTITYCONSTRAINT = 4352,
    KEY = 4353,
    KEYREF = 4354,
    UNIQUE = 4355,
    ANYTYPE = 8192,
    DATATYPE = 8448,
    DATATYPE_ANYTYPE = 8449,
    DATATYPE_ANYURI = 8450,
    DATATYPE_BASE64BINARY = 8451,
    DATATYPE_BOOLEAN = 8452,
    DATATYPE_BYTE = 8453,
    DATATYPE_DATE = 8454,
    DATATYPE_DATETIME = 8455,
    DATATYPE_DAY = 8456,
    DATATYPE_DECIMAL = 8457,
    DATATYPE_DOUBLE = 8458,
    DATATYPE_DURATION = 8459,
    DATATYPE_ENTITIES = 8460,
    DATATYPE_ENTITY = 8461,
    DATATYPE_FLOAT = 8462,
    DATATYPE_HEXBINARY = 8463,
    DATATYPE_ID = 8464,
    DATATYPE_IDREF = 8465,
    DATATYPE_IDREFS = 8466,
    DATATYPE_INT = 8467,
    DATATYPE_INTEGER = 8468,
    DATATYPE_LANGUAGE = 8469,
    DATATYPE_LONG = 8470,
    DATATYPE_MONTH = 8471,
    DATATYPE_MONTHDAY = 8472,
    DATATYPE_NAME = 8473,
    DATATYPE_NCNAME = 8474,
    DATATYPE_NEGATIVEINTEGER = 8475,
    DATATYPE_NMTOKEN = 8476,
    DATATYPE_NMTOKENS = 8477,
    DATATYPE_NONNEGATIVEINTEGER = 8478,
    DATATYPE_NONPOSITIVEINTEGER = 8479,
    DATATYPE_NORMALIZEDSTRING = 8480,
    DATATYPE_NOTATION = 8481,
    DATATYPE_POSITIVEINTEGER = 8482,
    DATATYPE_QNAME = 8483,
    DATATYPE_SHORT = 8484,
    DATATYPE_STRING = 8485,
    DATATYPE_TIME = 8486,
    DATATYPE_TOKEN = 8487,
    DATATYPE_UNSIGNEDBYTE = 8488,
    DATATYPE_UNSIGNEDINT = 8489,
    DATATYPE_UNSIGNEDLONG = 8490,
    DATATYPE_UNSIGNEDSHORT = 8491,
    DATATYPE_YEAR = 8492,
    DATATYPE_YEARMONTH = 8493,
    DATATYPE_ANYSIMPLETYPE = 8703,
    SIMPLETYPE = 8704,
    COMPLEXTYPE = 9216,
    PARTICLE = 16384,
    ANY = 16385,
    ANYATTRIBUTE = 16386,
    ELEMENT = 16387,
    GROUP = 16640,
    ALL = 16641,
    CHOICE = 16642,
    SEQUENCE = 16643,
    EMPTYPARTICLE = 16644,
    NULL = 2048,
    NULL_TYPE = 10240,
    NULL_ANY = 18433,
    NULL_ANYATTRIBUTE = 18434,
    NULL_ELEMENT = 18435,
};
pub const SOMITEM_SCHEMA = SOMITEMTYPE.SCHEMA;
pub const SOMITEM_ATTRIBUTE = SOMITEMTYPE.ATTRIBUTE;
pub const SOMITEM_ATTRIBUTEGROUP = SOMITEMTYPE.ATTRIBUTEGROUP;
pub const SOMITEM_NOTATION = SOMITEMTYPE.NOTATION;
pub const SOMITEM_ANNOTATION = SOMITEMTYPE.ANNOTATION;
pub const SOMITEM_IDENTITYCONSTRAINT = SOMITEMTYPE.IDENTITYCONSTRAINT;
pub const SOMITEM_KEY = SOMITEMTYPE.KEY;
pub const SOMITEM_KEYREF = SOMITEMTYPE.KEYREF;
pub const SOMITEM_UNIQUE = SOMITEMTYPE.UNIQUE;
pub const SOMITEM_ANYTYPE = SOMITEMTYPE.ANYTYPE;
pub const SOMITEM_DATATYPE = SOMITEMTYPE.DATATYPE;
pub const SOMITEM_DATATYPE_ANYTYPE = SOMITEMTYPE.DATATYPE_ANYTYPE;
pub const SOMITEM_DATATYPE_ANYURI = SOMITEMTYPE.DATATYPE_ANYURI;
pub const SOMITEM_DATATYPE_BASE64BINARY = SOMITEMTYPE.DATATYPE_BASE64BINARY;
pub const SOMITEM_DATATYPE_BOOLEAN = SOMITEMTYPE.DATATYPE_BOOLEAN;
pub const SOMITEM_DATATYPE_BYTE = SOMITEMTYPE.DATATYPE_BYTE;
pub const SOMITEM_DATATYPE_DATE = SOMITEMTYPE.DATATYPE_DATE;
pub const SOMITEM_DATATYPE_DATETIME = SOMITEMTYPE.DATATYPE_DATETIME;
pub const SOMITEM_DATATYPE_DAY = SOMITEMTYPE.DATATYPE_DAY;
pub const SOMITEM_DATATYPE_DECIMAL = SOMITEMTYPE.DATATYPE_DECIMAL;
pub const SOMITEM_DATATYPE_DOUBLE = SOMITEMTYPE.DATATYPE_DOUBLE;
pub const SOMITEM_DATATYPE_DURATION = SOMITEMTYPE.DATATYPE_DURATION;
pub const SOMITEM_DATATYPE_ENTITIES = SOMITEMTYPE.DATATYPE_ENTITIES;
pub const SOMITEM_DATATYPE_ENTITY = SOMITEMTYPE.DATATYPE_ENTITY;
pub const SOMITEM_DATATYPE_FLOAT = SOMITEMTYPE.DATATYPE_FLOAT;
pub const SOMITEM_DATATYPE_HEXBINARY = SOMITEMTYPE.DATATYPE_HEXBINARY;
pub const SOMITEM_DATATYPE_ID = SOMITEMTYPE.DATATYPE_ID;
pub const SOMITEM_DATATYPE_IDREF = SOMITEMTYPE.DATATYPE_IDREF;
pub const SOMITEM_DATATYPE_IDREFS = SOMITEMTYPE.DATATYPE_IDREFS;
pub const SOMITEM_DATATYPE_INT = SOMITEMTYPE.DATATYPE_INT;
pub const SOMITEM_DATATYPE_INTEGER = SOMITEMTYPE.DATATYPE_INTEGER;
pub const SOMITEM_DATATYPE_LANGUAGE = SOMITEMTYPE.DATATYPE_LANGUAGE;
pub const SOMITEM_DATATYPE_LONG = SOMITEMTYPE.DATATYPE_LONG;
pub const SOMITEM_DATATYPE_MONTH = SOMITEMTYPE.DATATYPE_MONTH;
pub const SOMITEM_DATATYPE_MONTHDAY = SOMITEMTYPE.DATATYPE_MONTHDAY;
pub const SOMITEM_DATATYPE_NAME = SOMITEMTYPE.DATATYPE_NAME;
pub const SOMITEM_DATATYPE_NCNAME = SOMITEMTYPE.DATATYPE_NCNAME;
pub const SOMITEM_DATATYPE_NEGATIVEINTEGER = SOMITEMTYPE.DATATYPE_NEGATIVEINTEGER;
pub const SOMITEM_DATATYPE_NMTOKEN = SOMITEMTYPE.DATATYPE_NMTOKEN;
pub const SOMITEM_DATATYPE_NMTOKENS = SOMITEMTYPE.DATATYPE_NMTOKENS;
pub const SOMITEM_DATATYPE_NONNEGATIVEINTEGER = SOMITEMTYPE.DATATYPE_NONNEGATIVEINTEGER;
pub const SOMITEM_DATATYPE_NONPOSITIVEINTEGER = SOMITEMTYPE.DATATYPE_NONPOSITIVEINTEGER;
pub const SOMITEM_DATATYPE_NORMALIZEDSTRING = SOMITEMTYPE.DATATYPE_NORMALIZEDSTRING;
pub const SOMITEM_DATATYPE_NOTATION = SOMITEMTYPE.DATATYPE_NOTATION;
pub const SOMITEM_DATATYPE_POSITIVEINTEGER = SOMITEMTYPE.DATATYPE_POSITIVEINTEGER;
pub const SOMITEM_DATATYPE_QNAME = SOMITEMTYPE.DATATYPE_QNAME;
pub const SOMITEM_DATATYPE_SHORT = SOMITEMTYPE.DATATYPE_SHORT;
pub const SOMITEM_DATATYPE_STRING = SOMITEMTYPE.DATATYPE_STRING;
pub const SOMITEM_DATATYPE_TIME = SOMITEMTYPE.DATATYPE_TIME;
pub const SOMITEM_DATATYPE_TOKEN = SOMITEMTYPE.DATATYPE_TOKEN;
pub const SOMITEM_DATATYPE_UNSIGNEDBYTE = SOMITEMTYPE.DATATYPE_UNSIGNEDBYTE;
pub const SOMITEM_DATATYPE_UNSIGNEDINT = SOMITEMTYPE.DATATYPE_UNSIGNEDINT;
pub const SOMITEM_DATATYPE_UNSIGNEDLONG = SOMITEMTYPE.DATATYPE_UNSIGNEDLONG;
pub const SOMITEM_DATATYPE_UNSIGNEDSHORT = SOMITEMTYPE.DATATYPE_UNSIGNEDSHORT;
pub const SOMITEM_DATATYPE_YEAR = SOMITEMTYPE.DATATYPE_YEAR;
pub const SOMITEM_DATATYPE_YEARMONTH = SOMITEMTYPE.DATATYPE_YEARMONTH;
pub const SOMITEM_DATATYPE_ANYSIMPLETYPE = SOMITEMTYPE.DATATYPE_ANYSIMPLETYPE;
pub const SOMITEM_SIMPLETYPE = SOMITEMTYPE.SIMPLETYPE;
pub const SOMITEM_COMPLEXTYPE = SOMITEMTYPE.COMPLEXTYPE;
pub const SOMITEM_PARTICLE = SOMITEMTYPE.PARTICLE;
pub const SOMITEM_ANY = SOMITEMTYPE.ANY;
pub const SOMITEM_ANYATTRIBUTE = SOMITEMTYPE.ANYATTRIBUTE;
pub const SOMITEM_ELEMENT = SOMITEMTYPE.ELEMENT;
pub const SOMITEM_GROUP = SOMITEMTYPE.GROUP;
pub const SOMITEM_ALL = SOMITEMTYPE.ALL;
pub const SOMITEM_CHOICE = SOMITEMTYPE.CHOICE;
pub const SOMITEM_SEQUENCE = SOMITEMTYPE.SEQUENCE;
pub const SOMITEM_EMPTYPARTICLE = SOMITEMTYPE.EMPTYPARTICLE;
pub const SOMITEM_NULL = SOMITEMTYPE.NULL;
pub const SOMITEM_NULL_TYPE = SOMITEMTYPE.NULL_TYPE;
pub const SOMITEM_NULL_ANY = SOMITEMTYPE.NULL_ANY;
pub const SOMITEM_NULL_ANYATTRIBUTE = SOMITEMTYPE.NULL_ANYATTRIBUTE;
pub const SOMITEM_NULL_ELEMENT = SOMITEMTYPE.NULL_ELEMENT;

pub const SCHEMAUSE = enum(i32) {
    OPTIONAL = 0,
    PROHIBITED = 1,
    REQUIRED = 2,
};
pub const SCHEMAUSE_OPTIONAL = SCHEMAUSE.OPTIONAL;
pub const SCHEMAUSE_PROHIBITED = SCHEMAUSE.PROHIBITED;
pub const SCHEMAUSE_REQUIRED = SCHEMAUSE.REQUIRED;

pub const SCHEMADERIVATIONMETHOD = enum(i32) {
    EMPTY = 0,
    SUBSTITUTION = 1,
    EXTENSION = 2,
    RESTRICTION = 4,
    LIST = 8,
    UNION = 16,
    ALL = 255,
    NONE = 256,
};
pub const SCHEMADERIVATIONMETHOD_EMPTY = SCHEMADERIVATIONMETHOD.EMPTY;
pub const SCHEMADERIVATIONMETHOD_SUBSTITUTION = SCHEMADERIVATIONMETHOD.SUBSTITUTION;
pub const SCHEMADERIVATIONMETHOD_EXTENSION = SCHEMADERIVATIONMETHOD.EXTENSION;
pub const SCHEMADERIVATIONMETHOD_RESTRICTION = SCHEMADERIVATIONMETHOD.RESTRICTION;
pub const SCHEMADERIVATIONMETHOD_LIST = SCHEMADERIVATIONMETHOD.LIST;
pub const SCHEMADERIVATIONMETHOD_UNION = SCHEMADERIVATIONMETHOD.UNION;
pub const SCHEMADERIVATIONMETHOD_ALL = SCHEMADERIVATIONMETHOD.ALL;
pub const SCHEMADERIVATIONMETHOD_NONE = SCHEMADERIVATIONMETHOD.NONE;

pub const SCHEMACONTENTTYPE = enum(i32) {
    EMPTY = 0,
    TEXTONLY = 1,
    ELEMENTONLY = 2,
    MIXED = 3,
};
pub const SCHEMACONTENTTYPE_EMPTY = SCHEMACONTENTTYPE.EMPTY;
pub const SCHEMACONTENTTYPE_TEXTONLY = SCHEMACONTENTTYPE.TEXTONLY;
pub const SCHEMACONTENTTYPE_ELEMENTONLY = SCHEMACONTENTTYPE.ELEMENTONLY;
pub const SCHEMACONTENTTYPE_MIXED = SCHEMACONTENTTYPE.MIXED;

pub const SCHEMAPROCESSCONTENTS = enum(i32) {
    NONE = 0,
    SKIP = 1,
    LAX = 2,
    STRICT = 3,
};
pub const SCHEMAPROCESSCONTENTS_NONE = SCHEMAPROCESSCONTENTS.NONE;
pub const SCHEMAPROCESSCONTENTS_SKIP = SCHEMAPROCESSCONTENTS.SKIP;
pub const SCHEMAPROCESSCONTENTS_LAX = SCHEMAPROCESSCONTENTS.LAX;
pub const SCHEMAPROCESSCONTENTS_STRICT = SCHEMAPROCESSCONTENTS.STRICT;

pub const SCHEMAWHITESPACE = enum(i32) {
    NONE = -1,
    PRESERVE = 0,
    REPLACE = 1,
    COLLAPSE = 2,
};
pub const SCHEMAWHITESPACE_NONE = SCHEMAWHITESPACE.NONE;
pub const SCHEMAWHITESPACE_PRESERVE = SCHEMAWHITESPACE.PRESERVE;
pub const SCHEMAWHITESPACE_REPLACE = SCHEMAWHITESPACE.REPLACE;
pub const SCHEMAWHITESPACE_COLLAPSE = SCHEMAWHITESPACE.COLLAPSE;

pub const SCHEMATYPEVARIETY = enum(i32) {
    NONE = -1,
    ATOMIC = 0,
    LIST = 1,
    UNION = 2,
};
pub const SCHEMATYPEVARIETY_NONE = SCHEMATYPEVARIETY.NONE;
pub const SCHEMATYPEVARIETY_ATOMIC = SCHEMATYPEVARIETY.ATOMIC;
pub const SCHEMATYPEVARIETY_LIST = SCHEMATYPEVARIETY.LIST;
pub const SCHEMATYPEVARIETY_UNION = SCHEMATYPEVARIETY.UNION;

const IID_IXMLDOMSchemaCollection2_Value = Guid.initString("50ea08b0-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_IXMLDOMSchemaCollection2 = &IID_IXMLDOMSchemaCollection2_Value;
pub const IXMLDOMSchemaCollection2 = extern struct {
    pub const VTable = extern struct {
        base: IXMLDOMSchemaCollection.VTable,
        validate: *const fn (
            self: *const IXMLDOMSchemaCollection2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_validateOnLoad: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMSchemaCollection2,
            validate_on_load: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_validateOnLoad: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IXMLDOMSchemaCollection2,
            validate_on_load: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getSchema: *const fn (
            self: *const IXMLDOMSchemaCollection2,
            namespace_u_r_i: ?BSTR,
            schema: ?*?*ISchema,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDeclaration: *const fn (
            self: *const IXMLDOMSchemaCollection2,
            node: ?*IXMLDOMNode,
            item: ?*?*ISchemaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLDOMSchemaCollection.MethodMixin(T);
            pub inline fn validate(self: *const T) HRESULT {
                return @as(*const IXMLDOMSchemaCollection2.VTable, @ptrCast(self.vtable)).validate(@as(*const IXMLDOMSchemaCollection2, @ptrCast(self)));
            }
            pub inline fn putValidateOnLoad(self: *const T, validate_on_load_: i16) HRESULT {
                return @as(*const IXMLDOMSchemaCollection2.VTable, @ptrCast(self.vtable)).put_validateOnLoad(@as(*const IXMLDOMSchemaCollection2, @ptrCast(self)), validate_on_load_);
            }
            pub inline fn getValidateOnLoad(self: *const T, validate_on_load_: ?*i16) HRESULT {
                return @as(*const IXMLDOMSchemaCollection2.VTable, @ptrCast(self.vtable)).get_validateOnLoad(@as(*const IXMLDOMSchemaCollection2, @ptrCast(self)), validate_on_load_);
            }
            pub inline fn getSchema(self: *const T, namespace_u_r_i_: ?BSTR, schema_: ?*?*ISchema) HRESULT {
                return @as(*const IXMLDOMSchemaCollection2.VTable, @ptrCast(self.vtable)).getSchema(@as(*const IXMLDOMSchemaCollection2, @ptrCast(self)), namespace_u_r_i_, schema_);
            }
            pub inline fn getDeclaration(self: *const T, node_: ?*IXMLDOMNode, item_: ?*?*ISchemaItem) HRESULT {
                return @as(*const IXMLDOMSchemaCollection2.VTable, @ptrCast(self.vtable)).getDeclaration(@as(*const IXMLDOMSchemaCollection2, @ptrCast(self)), node_, item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaStringCollection_Value = Guid.initString("50ea08b1-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaStringCollection = &IID_ISchemaStringCollection_Value;
pub const ISchemaStringCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaStringCollection,
            index: i32,
            bstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaStringCollection,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaStringCollection,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, bstr_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaStringCollection.VTable, @ptrCast(self.vtable)).get_item(@as(*const ISchemaStringCollection, @ptrCast(self)), index_, bstr_);
            }
            pub inline fn getLength(self: *const T, length_: ?*i32) HRESULT {
                return @as(*const ISchemaStringCollection.VTable, @ptrCast(self.vtable)).get_length(@as(*const ISchemaStringCollection, @ptrCast(self)), length_);
            }
            pub inline fn getNewEnum(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const ISchemaStringCollection.VTable, @ptrCast(self.vtable)).get__newEnum(@as(*const ISchemaStringCollection, @ptrCast(self)), ppunk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaItemCollection_Value = Guid.initString("50ea08b2-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaItemCollection = &IID_ISchemaItemCollection_Value;
pub const ISchemaItemCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaItemCollection,
            index: i32,
            item: ?*?*ISchemaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        itemByName: *const fn (
            self: *const ISchemaItemCollection,
            name: ?BSTR,
            item: ?*?*ISchemaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        itemByQName: *const fn (
            self: *const ISchemaItemCollection,
            name: ?BSTR,
            namespace_u_r_i: ?BSTR,
            item: ?*?*ISchemaItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaItemCollection,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__newEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaItemCollection,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, item_: ?*?*ISchemaItem) HRESULT {
                return @as(*const ISchemaItemCollection.VTable, @ptrCast(self.vtable)).get_item(@as(*const ISchemaItemCollection, @ptrCast(self)), index_, item_);
            }
            pub inline fn itemByName(self: *const T, name_: ?BSTR, item_: ?*?*ISchemaItem) HRESULT {
                return @as(*const ISchemaItemCollection.VTable, @ptrCast(self.vtable)).itemByName(@as(*const ISchemaItemCollection, @ptrCast(self)), name_, item_);
            }
            pub inline fn itemByQName(self: *const T, name_: ?BSTR, namespace_u_r_i_: ?BSTR, item_: ?*?*ISchemaItem) HRESULT {
                return @as(*const ISchemaItemCollection.VTable, @ptrCast(self.vtable)).itemByQName(@as(*const ISchemaItemCollection, @ptrCast(self)), name_, namespace_u_r_i_, item_);
            }
            pub inline fn getLength(self: *const T, length_: ?*i32) HRESULT {
                return @as(*const ISchemaItemCollection.VTable, @ptrCast(self.vtable)).get_length(@as(*const ISchemaItemCollection, @ptrCast(self)), length_);
            }
            pub inline fn getNewEnum(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const ISchemaItemCollection.VTable, @ptrCast(self.vtable)).get__newEnum(@as(*const ISchemaItemCollection, @ptrCast(self)), ppunk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaItem_Value = Guid.initString("50ea08b3-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaItem = &IID_ISchemaItem_Value;
pub const ISchemaItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaItem,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaceURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaItem,
            namespace_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_schema: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaItem,
            schema: ?*?*ISchema,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaItem,
            id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_itemType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaItem,
            item_type: ?*SOMITEMTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_unhandledAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaItem,
            attributes: ?*?*IVBSAXAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        writeAnnotation: *const fn (
            self: *const ISchemaItem,
            annotation_sink: ?*IUnknown,
            is_written: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaItem.VTable, @ptrCast(self.vtable)).get_name(@as(*const ISchemaItem, @ptrCast(self)), name_);
            }
            pub inline fn getNamespaceURI(self: *const T, namespace_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaItem.VTable, @ptrCast(self.vtable)).get_namespaceURI(@as(*const ISchemaItem, @ptrCast(self)), namespace_u_r_i_);
            }
            pub inline fn getSchema(self: *const T, schema_: ?*?*ISchema) HRESULT {
                return @as(*const ISchemaItem.VTable, @ptrCast(self.vtable)).get_schema(@as(*const ISchemaItem, @ptrCast(self)), schema_);
            }
            pub inline fn getId(self: *const T, id_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaItem.VTable, @ptrCast(self.vtable)).get_id(@as(*const ISchemaItem, @ptrCast(self)), id_);
            }
            pub inline fn getItemType(self: *const T, item_type_: ?*SOMITEMTYPE) HRESULT {
                return @as(*const ISchemaItem.VTable, @ptrCast(self.vtable)).get_itemType(@as(*const ISchemaItem, @ptrCast(self)), item_type_);
            }
            pub inline fn getUnhandledAttributes(self: *const T, attributes_: ?*?*IVBSAXAttributes) HRESULT {
                return @as(*const ISchemaItem.VTable, @ptrCast(self.vtable)).get_unhandledAttributes(@as(*const ISchemaItem, @ptrCast(self)), attributes_);
            }
            pub inline fn writeAnnotation(self: *const T, annotation_sink_: ?*IUnknown, is_written_: ?*i16) HRESULT {
                return @as(*const ISchemaItem.VTable, @ptrCast(self.vtable)).writeAnnotation(@as(*const ISchemaItem, @ptrCast(self)), annotation_sink_, is_written_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchema_Value = Guid.initString("50ea08b4-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchema = &IID_ISchema_Value;
pub const ISchema = extern struct {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_targetNamespace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchema,
            target_namespace: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchema,
            version: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_types: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchema,
            types: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_elements: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchema,
            elements: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchema,
            attributes: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributeGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchema,
            attribute_groups: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_modelGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchema,
            model_groups: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_notations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchema,
            notations: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_schemaLocations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchema,
            schema_locations: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaItem.MethodMixin(T);
            pub inline fn getTargetNamespace(self: *const T, target_namespace_: ?*?BSTR) HRESULT {
                return @as(*const ISchema.VTable, @ptrCast(self.vtable)).get_targetNamespace(@as(*const ISchema, @ptrCast(self)), target_namespace_);
            }
            pub inline fn getVersion(self: *const T, version_: ?*?BSTR) HRESULT {
                return @as(*const ISchema.VTable, @ptrCast(self.vtable)).get_version(@as(*const ISchema, @ptrCast(self)), version_);
            }
            pub inline fn getTypes(self: *const T, types_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchema.VTable, @ptrCast(self.vtable)).get_types(@as(*const ISchema, @ptrCast(self)), types_);
            }
            pub inline fn getElements(self: *const T, elements_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchema.VTable, @ptrCast(self.vtable)).get_elements(@as(*const ISchema, @ptrCast(self)), elements_);
            }
            pub inline fn getAttributes(self: *const T, attributes_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchema.VTable, @ptrCast(self.vtable)).get_attributes(@as(*const ISchema, @ptrCast(self)), attributes_);
            }
            pub inline fn getAttributeGroups(self: *const T, attribute_groups_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchema.VTable, @ptrCast(self.vtable)).get_attributeGroups(@as(*const ISchema, @ptrCast(self)), attribute_groups_);
            }
            pub inline fn getModelGroups(self: *const T, model_groups_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchema.VTable, @ptrCast(self.vtable)).get_modelGroups(@as(*const ISchema, @ptrCast(self)), model_groups_);
            }
            pub inline fn getNotations(self: *const T, notations_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchema.VTable, @ptrCast(self.vtable)).get_notations(@as(*const ISchema, @ptrCast(self)), notations_);
            }
            pub inline fn getSchemaLocations(self: *const T, schema_locations_: ?*?*ISchemaStringCollection) HRESULT {
                return @as(*const ISchema.VTable, @ptrCast(self.vtable)).get_schemaLocations(@as(*const ISchema, @ptrCast(self)), schema_locations_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaParticle_Value = Guid.initString("50ea08b5-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaParticle = &IID_ISchemaParticle_Value;
pub const ISchemaParticle = extern struct {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minOccurs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaParticle,
            min_occurs: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxOccurs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaParticle,
            max_occurs: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaItem.MethodMixin(T);
            pub inline fn getMinOccurs(self: *const T, min_occurs_: ?*VARIANT) HRESULT {
                return @as(*const ISchemaParticle.VTable, @ptrCast(self.vtable)).get_minOccurs(@as(*const ISchemaParticle, @ptrCast(self)), min_occurs_);
            }
            pub inline fn getMaxOccurs(self: *const T, max_occurs_: ?*VARIANT) HRESULT {
                return @as(*const ISchemaParticle.VTable, @ptrCast(self.vtable)).get_maxOccurs(@as(*const ISchemaParticle, @ptrCast(self)), max_occurs_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaAttribute_Value = Guid.initString("50ea08b6-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaAttribute = &IID_ISchemaAttribute_Value;
pub const ISchemaAttribute = extern struct {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAttribute,
            type: ?*?*ISchemaType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAttribute,
            scope: ?*?*ISchemaComplexType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAttribute,
            default_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fixedValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAttribute,
            fixed_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_use: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAttribute,
            use: ?*SCHEMAUSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isReference: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAttribute,
            reference: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaItem.MethodMixin(T);
            pub inline fn getType(self: *const T, type_: ?*?*ISchemaType) HRESULT {
                return @as(*const ISchemaAttribute.VTable, @ptrCast(self.vtable)).get_type(@as(*const ISchemaAttribute, @ptrCast(self)), type_);
            }
            pub inline fn getScope(self: *const T, scope_: ?*?*ISchemaComplexType) HRESULT {
                return @as(*const ISchemaAttribute.VTable, @ptrCast(self.vtable)).get_scope(@as(*const ISchemaAttribute, @ptrCast(self)), scope_);
            }
            pub inline fn getDefaultValue(self: *const T, default_value_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaAttribute.VTable, @ptrCast(self.vtable)).get_defaultValue(@as(*const ISchemaAttribute, @ptrCast(self)), default_value_);
            }
            pub inline fn getFixedValue(self: *const T, fixed_value_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaAttribute.VTable, @ptrCast(self.vtable)).get_fixedValue(@as(*const ISchemaAttribute, @ptrCast(self)), fixed_value_);
            }
            pub inline fn getUse(self: *const T, use_: ?*SCHEMAUSE) HRESULT {
                return @as(*const ISchemaAttribute.VTable, @ptrCast(self.vtable)).get_use(@as(*const ISchemaAttribute, @ptrCast(self)), use_);
            }
            pub inline fn getIsReference(self: *const T, reference_: ?*i16) HRESULT {
                return @as(*const ISchemaAttribute.VTable, @ptrCast(self.vtable)).get_isReference(@as(*const ISchemaAttribute, @ptrCast(self)), reference_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaElement_Value = Guid.initString("50ea08b7-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaElement = &IID_ISchemaElement_Value;
pub const ISchemaElement = extern struct {
    pub const VTable = extern struct {
        base: ISchemaParticle.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            type: ?*?*ISchemaType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            scope: ?*?*ISchemaComplexType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            default_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fixedValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            fixed_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isNillable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            nillable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_identityConstraints: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            constraints: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_substitutionGroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            element: ?*?*ISchemaElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_substitutionGroupExclusions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            exclusions: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_disallowedSubstitutions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            disallowed: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isAbstract: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            abstract: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isReference: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaElement,
            reference: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaParticle.MethodMixin(T);
            pub inline fn getType(self: *const T, type_: ?*?*ISchemaType) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_type(@as(*const ISchemaElement, @ptrCast(self)), type_);
            }
            pub inline fn getScope(self: *const T, scope_: ?*?*ISchemaComplexType) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_scope(@as(*const ISchemaElement, @ptrCast(self)), scope_);
            }
            pub inline fn getDefaultValue(self: *const T, default_value_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_defaultValue(@as(*const ISchemaElement, @ptrCast(self)), default_value_);
            }
            pub inline fn getFixedValue(self: *const T, fixed_value_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_fixedValue(@as(*const ISchemaElement, @ptrCast(self)), fixed_value_);
            }
            pub inline fn getIsNillable(self: *const T, nillable_: ?*i16) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_isNillable(@as(*const ISchemaElement, @ptrCast(self)), nillable_);
            }
            pub inline fn getIdentityConstraints(self: *const T, constraints_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_identityConstraints(@as(*const ISchemaElement, @ptrCast(self)), constraints_);
            }
            pub inline fn getSubstitutionGroup(self: *const T, element_: ?*?*ISchemaElement) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_substitutionGroup(@as(*const ISchemaElement, @ptrCast(self)), element_);
            }
            pub inline fn getSubstitutionGroupExclusions(self: *const T, exclusions_: ?*SCHEMADERIVATIONMETHOD) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_substitutionGroupExclusions(@as(*const ISchemaElement, @ptrCast(self)), exclusions_);
            }
            pub inline fn getDisallowedSubstitutions(self: *const T, disallowed_: ?*SCHEMADERIVATIONMETHOD) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_disallowedSubstitutions(@as(*const ISchemaElement, @ptrCast(self)), disallowed_);
            }
            pub inline fn getIsAbstract(self: *const T, abstract_: ?*i16) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_isAbstract(@as(*const ISchemaElement, @ptrCast(self)), abstract_);
            }
            pub inline fn getIsReference(self: *const T, reference_: ?*i16) HRESULT {
                return @as(*const ISchemaElement.VTable, @ptrCast(self.vtable)).get_isReference(@as(*const ISchemaElement, @ptrCast(self)), reference_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaType_Value = Guid.initString("50ea08b8-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaType = &IID_ISchemaType_Value;
pub const ISchemaType = extern struct {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            base_types: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_final: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            final: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_variety: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            variety: ?*SCHEMATYPEVARIETY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_derivedBy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            derived_by: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        isValid: *const fn (
            self: *const ISchemaType,
            data: ?BSTR,
            valid: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minExclusive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            min_exclusive: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minInclusive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            min_inclusive: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxExclusive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            max_exclusive: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxInclusive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            max_inclusive: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_totalDigits: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            total_digits: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fractionDigits: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            fraction_digits: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            length: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_minLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            min_length: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            max_length: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enumeration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            enumeration: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_whitespace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            whitespace: ?*SCHEMAWHITESPACE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_patterns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaType,
            patterns: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaItem.MethodMixin(T);
            pub inline fn getBaseTypes(self: *const T, base_types_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_baseTypes(@as(*const ISchemaType, @ptrCast(self)), base_types_);
            }
            pub inline fn getFinal(self: *const T, final_: ?*SCHEMADERIVATIONMETHOD) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_final(@as(*const ISchemaType, @ptrCast(self)), final_);
            }
            pub inline fn getVariety(self: *const T, variety_: ?*SCHEMATYPEVARIETY) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_variety(@as(*const ISchemaType, @ptrCast(self)), variety_);
            }
            pub inline fn getDerivedBy(self: *const T, derived_by_: ?*SCHEMADERIVATIONMETHOD) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_derivedBy(@as(*const ISchemaType, @ptrCast(self)), derived_by_);
            }
            pub inline fn isValid(self: *const T, data_: ?BSTR, valid_: ?*i16) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).isValid(@as(*const ISchemaType, @ptrCast(self)), data_, valid_);
            }
            pub inline fn getMinExclusive(self: *const T, min_exclusive_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_minExclusive(@as(*const ISchemaType, @ptrCast(self)), min_exclusive_);
            }
            pub inline fn getMinInclusive(self: *const T, min_inclusive_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_minInclusive(@as(*const ISchemaType, @ptrCast(self)), min_inclusive_);
            }
            pub inline fn getMaxExclusive(self: *const T, max_exclusive_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_maxExclusive(@as(*const ISchemaType, @ptrCast(self)), max_exclusive_);
            }
            pub inline fn getMaxInclusive(self: *const T, max_inclusive_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_maxInclusive(@as(*const ISchemaType, @ptrCast(self)), max_inclusive_);
            }
            pub inline fn getTotalDigits(self: *const T, total_digits_: ?*VARIANT) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_totalDigits(@as(*const ISchemaType, @ptrCast(self)), total_digits_);
            }
            pub inline fn getFractionDigits(self: *const T, fraction_digits_: ?*VARIANT) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_fractionDigits(@as(*const ISchemaType, @ptrCast(self)), fraction_digits_);
            }
            pub inline fn getLength(self: *const T, length_: ?*VARIANT) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_length(@as(*const ISchemaType, @ptrCast(self)), length_);
            }
            pub inline fn getMinLength(self: *const T, min_length_: ?*VARIANT) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_minLength(@as(*const ISchemaType, @ptrCast(self)), min_length_);
            }
            pub inline fn getMaxLength(self: *const T, max_length_: ?*VARIANT) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_maxLength(@as(*const ISchemaType, @ptrCast(self)), max_length_);
            }
            pub inline fn getEnumeration(self: *const T, enumeration_: ?*?*ISchemaStringCollection) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_enumeration(@as(*const ISchemaType, @ptrCast(self)), enumeration_);
            }
            pub inline fn getWhitespace(self: *const T, whitespace_: ?*SCHEMAWHITESPACE) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_whitespace(@as(*const ISchemaType, @ptrCast(self)), whitespace_);
            }
            pub inline fn getPatterns(self: *const T, patterns_: ?*?*ISchemaStringCollection) HRESULT {
                return @as(*const ISchemaType.VTable, @ptrCast(self.vtable)).get_patterns(@as(*const ISchemaType, @ptrCast(self)), patterns_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaComplexType_Value = Guid.initString("50ea08b9-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaComplexType = &IID_ISchemaComplexType_Value;
pub const ISchemaComplexType = extern struct {
    pub const VTable = extern struct {
        base: ISchemaType.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isAbstract: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaComplexType,
            abstract: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_anyAttribute: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaComplexType,
            any_attribute: ?*?*ISchemaAny,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaComplexType,
            attributes: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaComplexType,
            content_type: ?*SCHEMACONTENTTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_contentModel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaComplexType,
            content_model: ?*?*ISchemaModelGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_prohibitedSubstitutions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaComplexType,
            prohibited: ?*SCHEMADERIVATIONMETHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaType.MethodMixin(T);
            pub inline fn getIsAbstract(self: *const T, abstract_: ?*i16) HRESULT {
                return @as(*const ISchemaComplexType.VTable, @ptrCast(self.vtable)).get_isAbstract(@as(*const ISchemaComplexType, @ptrCast(self)), abstract_);
            }
            pub inline fn getAnyAttribute(self: *const T, any_attribute_: ?*?*ISchemaAny) HRESULT {
                return @as(*const ISchemaComplexType.VTable, @ptrCast(self.vtable)).get_anyAttribute(@as(*const ISchemaComplexType, @ptrCast(self)), any_attribute_);
            }
            pub inline fn getAttributes(self: *const T, attributes_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchemaComplexType.VTable, @ptrCast(self.vtable)).get_attributes(@as(*const ISchemaComplexType, @ptrCast(self)), attributes_);
            }
            pub inline fn getContentType(self: *const T, content_type_: ?*SCHEMACONTENTTYPE) HRESULT {
                return @as(*const ISchemaComplexType.VTable, @ptrCast(self.vtable)).get_contentType(@as(*const ISchemaComplexType, @ptrCast(self)), content_type_);
            }
            pub inline fn getContentModel(self: *const T, content_model_: ?*?*ISchemaModelGroup) HRESULT {
                return @as(*const ISchemaComplexType.VTable, @ptrCast(self.vtable)).get_contentModel(@as(*const ISchemaComplexType, @ptrCast(self)), content_model_);
            }
            pub inline fn getProhibitedSubstitutions(self: *const T, prohibited_: ?*SCHEMADERIVATIONMETHOD) HRESULT {
                return @as(*const ISchemaComplexType.VTable, @ptrCast(self.vtable)).get_prohibitedSubstitutions(@as(*const ISchemaComplexType, @ptrCast(self)), prohibited_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaAttributeGroup_Value = Guid.initString("50ea08ba-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaAttributeGroup = &IID_ISchemaAttributeGroup_Value;
pub const ISchemaAttributeGroup = extern struct {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_anyAttribute: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAttributeGroup,
            any_attribute: ?*?*ISchemaAny,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAttributeGroup,
            attributes: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaItem.MethodMixin(T);
            pub inline fn getAnyAttribute(self: *const T, any_attribute_: ?*?*ISchemaAny) HRESULT {
                return @as(*const ISchemaAttributeGroup.VTable, @ptrCast(self.vtable)).get_anyAttribute(@as(*const ISchemaAttributeGroup, @ptrCast(self)), any_attribute_);
            }
            pub inline fn getAttributes(self: *const T, attributes_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchemaAttributeGroup.VTable, @ptrCast(self.vtable)).get_attributes(@as(*const ISchemaAttributeGroup, @ptrCast(self)), attributes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaModelGroup_Value = Guid.initString("50ea08bb-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaModelGroup = &IID_ISchemaModelGroup_Value;
pub const ISchemaModelGroup = extern struct {
    pub const VTable = extern struct {
        base: ISchemaParticle.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_particles: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaModelGroup,
            particles: ?*?*ISchemaItemCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaParticle.MethodMixin(T);
            pub inline fn getParticles(self: *const T, particles_: ?*?*ISchemaItemCollection) HRESULT {
                return @as(*const ISchemaModelGroup.VTable, @ptrCast(self.vtable)).get_particles(@as(*const ISchemaModelGroup, @ptrCast(self)), particles_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaAny_Value = Guid.initString("50ea08bc-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaAny = &IID_ISchemaAny_Value;
pub const ISchemaAny = extern struct {
    pub const VTable = extern struct {
        base: ISchemaParticle.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_namespaces: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAny,
            namespaces: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_processContents: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaAny,
            process_contents: ?*SCHEMAPROCESSCONTENTS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaParticle.MethodMixin(T);
            pub inline fn getNamespaces(self: *const T, namespaces_: ?*?*ISchemaStringCollection) HRESULT {
                return @as(*const ISchemaAny.VTable, @ptrCast(self.vtable)).get_namespaces(@as(*const ISchemaAny, @ptrCast(self)), namespaces_);
            }
            pub inline fn getProcessContents(self: *const T, process_contents_: ?*SCHEMAPROCESSCONTENTS) HRESULT {
                return @as(*const ISchemaAny.VTable, @ptrCast(self.vtable)).get_processContents(@as(*const ISchemaAny, @ptrCast(self)), process_contents_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaIdentityConstraint_Value = Guid.initString("50ea08bd-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaIdentityConstraint = &IID_ISchemaIdentityConstraint_Value;
pub const ISchemaIdentityConstraint = extern struct {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_selector: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaIdentityConstraint,
            selector: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fields: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaIdentityConstraint,
            fields: ?*?*ISchemaStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_referencedKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaIdentityConstraint,
            key: ?*?*ISchemaIdentityConstraint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaItem.MethodMixin(T);
            pub inline fn getSelector(self: *const T, selector_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaIdentityConstraint.VTable, @ptrCast(self.vtable)).get_selector(@as(*const ISchemaIdentityConstraint, @ptrCast(self)), selector_);
            }
            pub inline fn getFields(self: *const T, fields_: ?*?*ISchemaStringCollection) HRESULT {
                return @as(*const ISchemaIdentityConstraint.VTable, @ptrCast(self.vtable)).get_fields(@as(*const ISchemaIdentityConstraint, @ptrCast(self)), fields_);
            }
            pub inline fn getReferencedKey(self: *const T, key_: ?*?*ISchemaIdentityConstraint) HRESULT {
                return @as(*const ISchemaIdentityConstraint.VTable, @ptrCast(self.vtable)).get_referencedKey(@as(*const ISchemaIdentityConstraint, @ptrCast(self)), key_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISchemaNotation_Value = Guid.initString("50ea08be-dd1b-4664-9a50-c2f40f4bd79a");
pub const IID_ISchemaNotation = &IID_ISchemaNotation_Value;
pub const ISchemaNotation = extern struct {
    pub const VTable = extern struct {
        base: ISchemaItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_systemIdentifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaNotation,
            uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_publicIdentifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISchemaNotation,
            uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISchemaItem.MethodMixin(T);
            pub inline fn getSystemIdentifier(self: *const T, uri_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaNotation.VTable, @ptrCast(self.vtable)).get_systemIdentifier(@as(*const ISchemaNotation, @ptrCast(self)), uri_);
            }
            pub inline fn getPublicIdentifier(self: *const T, uri_: ?*?BSTR) HRESULT {
                return @as(*const ISchemaNotation.VTable, @ptrCast(self.vtable)).get_publicIdentifier(@as(*const ISchemaNotation, @ptrCast(self)), uri_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const __msxml6_ReferenceRemainingTypes__ = extern struct {
    __tagDomNodeType__: DOMNodeType,
    __domNodeType__: DOMNodeType,
    __serverXmlHttpOptionEnum__: SERVERXMLHTTP_OPTION,
    __serverXmlHttpOption__: SERVERXMLHTTP_OPTION,
    __serverCertOptionEnum__: SXH_SERVER_CERT_OPTION,
    __serverCertOption__: SXH_SERVER_CERT_OPTION,
    __proxySettingEnum__: SXH_PROXY_SETTING,
    __proxySetting__: SXH_PROXY_SETTING,
    __somItemTypeEnum__: SOMITEMTYPE,
    __somItemType__: SOMITEMTYPE,
    __schemaUseEnum__: SCHEMAUSE,
    __schemaUse__: SCHEMAUSE,
    __schemaDerivationMethodEnum__: SCHEMADERIVATIONMETHOD,
    __schemaDerivationMethod__: SCHEMADERIVATIONMETHOD,
    __schemaContentTypeEnum__: SCHEMACONTENTTYPE,
    __schemaContentType__: SCHEMACONTENTTYPE,
    __schemaProcessContentsEnum__: SCHEMAPROCESSCONTENTS,
    __schemaProcessContents__: SCHEMAPROCESSCONTENTS,
    __schemaWhitespaceEnum__: SCHEMAWHITESPACE,
    __schemaWhitespace__: SCHEMAWHITESPACE,
    __schemaTypeVarietyEnum__: SCHEMATYPEVARIETY,
    __schemaTypeVariety__: SCHEMATYPEVARIETY,
};

pub const XHR_COOKIE_STATE = enum(i32) {
    UNKNOWN = 0,
    ACCEPT = 1,
    PROMPT = 2,
    LEASH = 3,
    DOWNGRADE = 4,
    REJECT = 5,
};
pub const XHR_COOKIE_STATE_UNKNOWN = XHR_COOKIE_STATE.UNKNOWN;
pub const XHR_COOKIE_STATE_ACCEPT = XHR_COOKIE_STATE.ACCEPT;
pub const XHR_COOKIE_STATE_PROMPT = XHR_COOKIE_STATE.PROMPT;
pub const XHR_COOKIE_STATE_LEASH = XHR_COOKIE_STATE.LEASH;
pub const XHR_COOKIE_STATE_DOWNGRADE = XHR_COOKIE_STATE.DOWNGRADE;
pub const XHR_COOKIE_STATE_REJECT = XHR_COOKIE_STATE.REJECT;

pub const XHR_COOKIE_FLAG = enum(i32) {
    IS_SECURE = 1,
    IS_SESSION = 2,
    THIRD_PARTY = 16,
    PROMPT_REQUIRED = 32,
    EVALUATE_P3P = 64,
    APPLY_P3P = 128,
    P3P_ENABLED = 256,
    IS_RESTRICTED = 512,
    IE6 = 1024,
    IS_LEGACY = 2048,
    NON_SCRIPT = 4096,
    HTTPONLY = 8192,
};
pub const XHR_COOKIE_IS_SECURE = XHR_COOKIE_FLAG.IS_SECURE;
pub const XHR_COOKIE_IS_SESSION = XHR_COOKIE_FLAG.IS_SESSION;
pub const XHR_COOKIE_THIRD_PARTY = XHR_COOKIE_FLAG.THIRD_PARTY;
pub const XHR_COOKIE_PROMPT_REQUIRED = XHR_COOKIE_FLAG.PROMPT_REQUIRED;
pub const XHR_COOKIE_EVALUATE_P3P = XHR_COOKIE_FLAG.EVALUATE_P3P;
pub const XHR_COOKIE_APPLY_P3P = XHR_COOKIE_FLAG.APPLY_P3P;
pub const XHR_COOKIE_P3P_ENABLED = XHR_COOKIE_FLAG.P3P_ENABLED;
pub const XHR_COOKIE_IS_RESTRICTED = XHR_COOKIE_FLAG.IS_RESTRICTED;
pub const XHR_COOKIE_IE6 = XHR_COOKIE_FLAG.IE6;
pub const XHR_COOKIE_IS_LEGACY = XHR_COOKIE_FLAG.IS_LEGACY;
pub const XHR_COOKIE_NON_SCRIPT = XHR_COOKIE_FLAG.NON_SCRIPT;
pub const XHR_COOKIE_HTTPONLY = XHR_COOKIE_FLAG.HTTPONLY;

pub const XHR_CRED_PROMPT = enum(i32) {
    ALL = 0,
    NONE = 1,
    PROXY = 2,
};
pub const XHR_CRED_PROMPT_ALL = XHR_CRED_PROMPT.ALL;
pub const XHR_CRED_PROMPT_NONE = XHR_CRED_PROMPT.NONE;
pub const XHR_CRED_PROMPT_PROXY = XHR_CRED_PROMPT.PROXY;

pub const XHR_AUTH = enum(i32) {
    ALL = 0,
    NONE = 1,
    PROXY = 2,
};
pub const XHR_AUTH_ALL = XHR_AUTH.ALL;
pub const XHR_AUTH_NONE = XHR_AUTH.NONE;
pub const XHR_AUTH_PROXY = XHR_AUTH.PROXY;

pub const XHR_PROPERTY = enum(i32) {
    NO_CRED_PROMPT = 0,
    NO_AUTH = 1,
    TIMEOUT = 2,
    NO_DEFAULT_HEADERS = 3,
    REPORT_REDIRECT_STATUS = 4,
    NO_CACHE = 5,
    EXTENDED_ERROR = 6,
    QUERY_STRING_UTF8 = 7,
    IGNORE_CERT_ERRORS = 8,
    ONDATA_THRESHOLD = 9,
    SET_ENTERPRISEID = 10,
    MAX_CONNECTIONS = 11,
};
pub const XHR_PROP_NO_CRED_PROMPT = XHR_PROPERTY.NO_CRED_PROMPT;
pub const XHR_PROP_NO_AUTH = XHR_PROPERTY.NO_AUTH;
pub const XHR_PROP_TIMEOUT = XHR_PROPERTY.TIMEOUT;
pub const XHR_PROP_NO_DEFAULT_HEADERS = XHR_PROPERTY.NO_DEFAULT_HEADERS;
pub const XHR_PROP_REPORT_REDIRECT_STATUS = XHR_PROPERTY.REPORT_REDIRECT_STATUS;
pub const XHR_PROP_NO_CACHE = XHR_PROPERTY.NO_CACHE;
pub const XHR_PROP_EXTENDED_ERROR = XHR_PROPERTY.EXTENDED_ERROR;
pub const XHR_PROP_QUERY_STRING_UTF8 = XHR_PROPERTY.QUERY_STRING_UTF8;
pub const XHR_PROP_IGNORE_CERT_ERRORS = XHR_PROPERTY.IGNORE_CERT_ERRORS;
pub const XHR_PROP_ONDATA_THRESHOLD = XHR_PROPERTY.ONDATA_THRESHOLD;
pub const XHR_PROP_SET_ENTERPRISEID = XHR_PROPERTY.SET_ENTERPRISEID;
pub const XHR_PROP_MAX_CONNECTIONS = XHR_PROPERTY.MAX_CONNECTIONS;

pub const XHR_CERT_IGNORE_FLAG = enum(u32) {
    REVOCATION_FAILED = 128,
    UNKNOWN_CA = 256,
    CERT_CN_INVALID = 4096,
    CERT_DATE_INVALID = 8192,
    ALL_SERVER_ERRORS = 12672,
};
pub const XHR_CERT_IGNORE_REVOCATION_FAILED = XHR_CERT_IGNORE_FLAG.REVOCATION_FAILED;
pub const XHR_CERT_IGNORE_UNKNOWN_CA = XHR_CERT_IGNORE_FLAG.UNKNOWN_CA;
pub const XHR_CERT_IGNORE_CERT_CN_INVALID = XHR_CERT_IGNORE_FLAG.CERT_CN_INVALID;
pub const XHR_CERT_IGNORE_CERT_DATE_INVALID = XHR_CERT_IGNORE_FLAG.CERT_DATE_INVALID;
pub const XHR_CERT_IGNORE_ALL_SERVER_ERRORS = XHR_CERT_IGNORE_FLAG.ALL_SERVER_ERRORS;

pub const XHR_CERT_ERROR_FLAG = enum(u32) {
    REVOCATION_FAILED = 8388608,
    UNKNOWN_CA = 16777216,
    CERT_CN_INVALID = 33554432,
    CERT_DATE_INVALID = 67108864,
    ALL_SERVER_ERRORS = 125829120,
};
pub const XHR_CERT_ERROR_REVOCATION_FAILED = XHR_CERT_ERROR_FLAG.REVOCATION_FAILED;
pub const XHR_CERT_ERROR_UNKNOWN_CA = XHR_CERT_ERROR_FLAG.UNKNOWN_CA;
pub const XHR_CERT_ERROR_CERT_CN_INVALID = XHR_CERT_ERROR_FLAG.CERT_CN_INVALID;
pub const XHR_CERT_ERROR_CERT_DATE_INVALID = XHR_CERT_ERROR_FLAG.CERT_DATE_INVALID;
pub const XHR_CERT_ERROR_ALL_SERVER_ERRORS = XHR_CERT_ERROR_FLAG.ALL_SERVER_ERRORS;

pub const XHR_COOKIE = extern struct {
    pwszUrl: ?PWSTR,
    pwszName: ?PWSTR,
    pwszValue: ?PWSTR,
    pwszP3PPolicy: ?PWSTR,
    ftExpires: FILETIME,
    dwFlags: u32,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXMLHTTPRequest2Callback_Value = Guid.initString("a44a9299-e321-40de-8866-341b41669162");
pub const IID_IXMLHTTPRequest2Callback = &IID_IXMLHTTPRequest2Callback_Value;
pub const IXMLHTTPRequest2Callback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnRedirect: *const fn (
            self: *const IXMLHTTPRequest2Callback,
            p_x_h_r: ?*IXMLHTTPRequest2,
            pwsz_redirect_url: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnHeadersAvailable: *const fn (
            self: *const IXMLHTTPRequest2Callback,
            p_x_h_r: ?*IXMLHTTPRequest2,
            dw_status: u32,
            pwsz_status: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDataAvailable: *const fn (
            self: *const IXMLHTTPRequest2Callback,
            p_x_h_r: ?*IXMLHTTPRequest2,
            p_response_stream: ?*ISequentialStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResponseReceived: *const fn (
            self: *const IXMLHTTPRequest2Callback,
            p_x_h_r: ?*IXMLHTTPRequest2,
            p_response_stream: ?*ISequentialStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnError: *const fn (
            self: *const IXMLHTTPRequest2Callback,
            p_x_h_r: ?*IXMLHTTPRequest2,
            hr_error: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onRedirect(self: *const T, p_x_h_r_: ?*IXMLHTTPRequest2, pwsz_redirect_url_: ?[*:0]const u16) HRESULT {
                return @as(*const IXMLHTTPRequest2Callback.VTable, @ptrCast(self.vtable)).OnRedirect(@as(*const IXMLHTTPRequest2Callback, @ptrCast(self)), p_x_h_r_, pwsz_redirect_url_);
            }
            pub inline fn onHeadersAvailable(self: *const T, p_x_h_r_: ?*IXMLHTTPRequest2, dw_status_: u32, pwsz_status_: ?[*:0]const u16) HRESULT {
                return @as(*const IXMLHTTPRequest2Callback.VTable, @ptrCast(self.vtable)).OnHeadersAvailable(@as(*const IXMLHTTPRequest2Callback, @ptrCast(self)), p_x_h_r_, dw_status_, pwsz_status_);
            }
            pub inline fn onDataAvailable(self: *const T, p_x_h_r_: ?*IXMLHTTPRequest2, p_response_stream_: ?*ISequentialStream) HRESULT {
                return @as(*const IXMLHTTPRequest2Callback.VTable, @ptrCast(self.vtable)).OnDataAvailable(@as(*const IXMLHTTPRequest2Callback, @ptrCast(self)), p_x_h_r_, p_response_stream_);
            }
            pub inline fn onResponseReceived(self: *const T, p_x_h_r_: ?*IXMLHTTPRequest2, p_response_stream_: ?*ISequentialStream) HRESULT {
                return @as(*const IXMLHTTPRequest2Callback.VTable, @ptrCast(self.vtable)).OnResponseReceived(@as(*const IXMLHTTPRequest2Callback, @ptrCast(self)), p_x_h_r_, p_response_stream_);
            }
            pub inline fn onError(self: *const T, p_x_h_r_: ?*IXMLHTTPRequest2, hr_error_: HRESULT) HRESULT {
                return @as(*const IXMLHTTPRequest2Callback.VTable, @ptrCast(self.vtable)).OnError(@as(*const IXMLHTTPRequest2Callback, @ptrCast(self)), p_x_h_r_, hr_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXMLHTTPRequest2_Value = Guid.initString("e5d37dc0-552a-4d52-9cc0-a14d546fbd04");
pub const IID_IXMLHTTPRequest2 = &IID_IXMLHTTPRequest2_Value;
pub const IXMLHTTPRequest2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn (
            self: *const IXMLHTTPRequest2,
            pwsz_method: ?[*:0]const u16,
            pwsz_url: ?[*:0]const u16,
            p_status_callback: ?*IXMLHTTPRequest2Callback,
            pwsz_user_name: ?[*:0]const u16,
            pwsz_password: ?[*:0]const u16,
            pwsz_proxy_user_name: ?[*:0]const u16,
            pwsz_proxy_password: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Send: *const fn (
            self: *const IXMLHTTPRequest2,
            p_body: ?*ISequentialStream,
            cb_body: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const IXMLHTTPRequest2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCookie: *const fn (
            self: *const IXMLHTTPRequest2,
            p_cookie: ?*const XHR_COOKIE,
            pdw_cookie_state: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCustomResponseStream: *const fn (
            self: *const IXMLHTTPRequest2,
            p_sequential_stream: ?*ISequentialStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IXMLHTTPRequest2,
            e_property: XHR_PROPERTY,
            ull_value: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRequestHeader: *const fn (
            self: *const IXMLHTTPRequest2,
            pwsz_header: ?[*:0]const u16,
            pwsz_value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllResponseHeaders: *const fn (
            self: *const IXMLHTTPRequest2,
            ppwsz_headers: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCookie: *const fn (
            self: *const IXMLHTTPRequest2,
            pwsz_url: ?[*:0]const u16,
            pwsz_name: ?[*:0]const u16,
            dw_flags: u32,
            pc_cookies: ?*u32,
            pp_cookies: [*]?*XHR_COOKIE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResponseHeader: *const fn (
            self: *const IXMLHTTPRequest2,
            pwsz_header: ?[*:0]const u16,
            ppwsz_value: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn open(self: *const T, pwsz_method_: ?[*:0]const u16, pwsz_url_: ?[*:0]const u16, p_status_callback_: ?*IXMLHTTPRequest2Callback, pwsz_user_name_: ?[*:0]const u16, pwsz_password_: ?[*:0]const u16, pwsz_proxy_user_name_: ?[*:0]const u16, pwsz_proxy_password_: ?[*:0]const u16) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).Open(@as(*const IXMLHTTPRequest2, @ptrCast(self)), pwsz_method_, pwsz_url_, p_status_callback_, pwsz_user_name_, pwsz_password_, pwsz_proxy_user_name_, pwsz_proxy_password_);
            }
            pub inline fn send(self: *const T, p_body_: ?*ISequentialStream, cb_body_: u64) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).Send(@as(*const IXMLHTTPRequest2, @ptrCast(self)), p_body_, cb_body_);
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).Abort(@as(*const IXMLHTTPRequest2, @ptrCast(self)));
            }
            pub inline fn setCookie(self: *const T, p_cookie_: ?*const XHR_COOKIE, pdw_cookie_state_: ?*u32) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).SetCookie(@as(*const IXMLHTTPRequest2, @ptrCast(self)), p_cookie_, pdw_cookie_state_);
            }
            pub inline fn setCustomResponseStream(self: *const T, p_sequential_stream_: ?*ISequentialStream) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).SetCustomResponseStream(@as(*const IXMLHTTPRequest2, @ptrCast(self)), p_sequential_stream_);
            }
            pub inline fn setProperty(self: *const T, e_property_: XHR_PROPERTY, ull_value_: u64) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IXMLHTTPRequest2, @ptrCast(self)), e_property_, ull_value_);
            }
            pub inline fn setRequestHeader(self: *const T, pwsz_header_: ?[*:0]const u16, pwsz_value_: ?[*:0]const u16) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).SetRequestHeader(@as(*const IXMLHTTPRequest2, @ptrCast(self)), pwsz_header_, pwsz_value_);
            }
            pub inline fn getAllResponseHeaders(self: *const T, ppwsz_headers_: ?*?*u16) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).GetAllResponseHeaders(@as(*const IXMLHTTPRequest2, @ptrCast(self)), ppwsz_headers_);
            }
            pub inline fn getCookie(self: *const T, pwsz_url_: ?[*:0]const u16, pwsz_name_: ?[*:0]const u16, dw_flags_: u32, pc_cookies_: ?*u32, pp_cookies_: [*]?*XHR_COOKIE) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).GetCookie(@as(*const IXMLHTTPRequest2, @ptrCast(self)), pwsz_url_, pwsz_name_, dw_flags_, pc_cookies_, pp_cookies_);
            }
            pub inline fn getResponseHeader(self: *const T, pwsz_header_: ?[*:0]const u16, ppwsz_value_: ?*?*u16) HRESULT {
                return @as(*const IXMLHTTPRequest2.VTable, @ptrCast(self.vtable)).GetResponseHeader(@as(*const IXMLHTTPRequest2, @ptrCast(self)), pwsz_header_, ppwsz_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const XHR_CERT = extern struct {
    cbCert: u32,
    pbCert: ?*u8,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IXMLHTTPRequest3Callback_Value = Guid.initString("b9e57830-8c6c-4a6f-9c13-47772bb047bb");
pub const IID_IXMLHTTPRequest3Callback = &IID_IXMLHTTPRequest3Callback_Value;
pub const IXMLHTTPRequest3Callback = extern struct {
    pub const VTable = extern struct {
        base: IXMLHTTPRequest2Callback.VTable,
        OnServerCertificateReceived: *const fn (
            self: *const IXMLHTTPRequest3Callback,
            p_x_h_r: ?*IXMLHTTPRequest3,
            dw_certificate_errors: u32,
            c_server_certificate_chain: u32,
            rg_server_certificate_chain: [*]const XHR_CERT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnClientCertificateRequested: *const fn (
            self: *const IXMLHTTPRequest3Callback,
            p_x_h_r: ?*IXMLHTTPRequest3,
            c_issuer_list: u32,
            rgpwsz_issuer_list: [*]const ?*const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLHTTPRequest2Callback.MethodMixin(T);
            pub inline fn onServerCertificateReceived(self: *const T, p_x_h_r_: ?*IXMLHTTPRequest3, dw_certificate_errors_: u32, c_server_certificate_chain_: u32, rg_server_certificate_chain_: [*]const XHR_CERT) HRESULT {
                return @as(*const IXMLHTTPRequest3Callback.VTable, @ptrCast(self.vtable)).OnServerCertificateReceived(@as(*const IXMLHTTPRequest3Callback, @ptrCast(self)), p_x_h_r_, dw_certificate_errors_, c_server_certificate_chain_, rg_server_certificate_chain_);
            }
            pub inline fn onClientCertificateRequested(self: *const T, p_x_h_r_: ?*IXMLHTTPRequest3, c_issuer_list_: u32, rgpwsz_issuer_list_: [*]const ?*const u16) HRESULT {
                return @as(*const IXMLHTTPRequest3Callback.VTable, @ptrCast(self.vtable)).OnClientCertificateRequested(@as(*const IXMLHTTPRequest3Callback, @ptrCast(self)), p_x_h_r_, c_issuer_list_, rgpwsz_issuer_list_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IXMLHTTPRequest3_Value = Guid.initString("a1c9feee-0617-4f23-9d58-8961ea43567c");
pub const IID_IXMLHTTPRequest3 = &IID_IXMLHTTPRequest3_Value;
pub const IXMLHTTPRequest3 = extern struct {
    pub const VTable = extern struct {
        base: IXMLHTTPRequest2.VTable,
        SetClientCertificate: *const fn (
            self: *const IXMLHTTPRequest3,
            cb_client_certificate_hash: u32,
            pb_client_certificate_hash: [*:0]const u8,
            pwsz_pin: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXMLHTTPRequest2.MethodMixin(T);
            pub inline fn setClientCertificate(self: *const T, cb_client_certificate_hash_: u32, pb_client_certificate_hash_: [*:0]const u8, pwsz_pin_: ?[*:0]const u16) HRESULT {
                return @as(*const IXMLHTTPRequest3.VTable, @ptrCast(self.vtable)).SetClientCertificate(@as(*const IXMLHTTPRequest3, @ptrCast(self)), cb_client_certificate_hash_, pb_client_certificate_hash_, pwsz_pin_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const FILETIME = @import("../../foundation.zig").FILETIME;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IDispatch = @import("../../system/com.zig").IDispatch;
const ISequentialStream = @import("../../system/com.zig").ISequentialStream;
const IUnknown = @import("../../system/com.zig").IUnknown;
const PWSTR = @import("../../foundation.zig").PWSTR;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
