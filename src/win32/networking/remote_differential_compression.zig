//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (24)
//--------------------------------------------------------------------------------
pub const RDCE_TABLE_FULL = @as(u32, 2147745793);
pub const RDCE_TABLE_CORRUPT = @as(u32, 2147745794);
pub const MSRDC_SIGNATURE_HASHSIZE = @as(u32, 16);
pub const SimilarityFileIdMinSize = @as(u32, 4);
pub const SimilarityFileIdMaxSize = @as(u32, 32);
pub const MSRDC_VERSION = @as(u32, 65536);
pub const MSRDC_MINIMUM_COMPATIBLE_APP_VERSION = @as(u32, 65536);
pub const MSRDC_MINIMUM_DEPTH = @as(u32, 1);
pub const MSRDC_MAXIMUM_DEPTH = @as(u32, 8);
pub const MSRDC_MINIMUM_COMPAREBUFFER = @as(u32, 100000);
pub const MSRDC_MAXIMUM_COMPAREBUFFER = @as(u32, 1073741824);
pub const MSRDC_DEFAULT_COMPAREBUFFER = @as(u32, 3200000);
pub const MSRDC_MINIMUM_INPUTBUFFERSIZE = @as(u32, 1024);
pub const MSRDC_MINIMUM_HORIZONSIZE = @as(u32, 128);
pub const MSRDC_MAXIMUM_HORIZONSIZE = @as(u32, 16384);
pub const MSRDC_MINIMUM_HASHWINDOWSIZE = @as(u32, 2);
pub const MSRDC_MAXIMUM_HASHWINDOWSIZE = @as(u32, 96);
pub const MSRDC_DEFAULT_HASHWINDOWSIZE_1 = @as(u32, 48);
pub const MSRDC_DEFAULT_HORIZONSIZE_1 = @as(u32, 1024);
pub const MSRDC_DEFAULT_HASHWINDOWSIZE_N = @as(u32, 2);
pub const MSRDC_DEFAULT_HORIZONSIZE_N = @as(u32, 128);
pub const MSRDC_MAXIMUM_TRAITVALUE = @as(u32, 63);
pub const MSRDC_MINIMUM_MATCHESREQUIRED = @as(u32, 1);
pub const MSRDC_MAXIMUM_MATCHESREQUIRED = @as(u32, 16);

//--------------------------------------------------------------------------------
// Section: Types (48)
//--------------------------------------------------------------------------------
const CLSID_RdcLibrary_Value = Guid.initString("96236a85-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcLibrary = &CLSID_RdcLibrary_Value;

const CLSID_RdcGeneratorParameters_Value = Guid.initString("96236a86-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcGeneratorParameters = &CLSID_RdcGeneratorParameters_Value;

const CLSID_RdcGeneratorFilterMaxParameters_Value = Guid.initString("96236a87-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcGeneratorFilterMaxParameters = &CLSID_RdcGeneratorFilterMaxParameters_Value;

const CLSID_RdcGenerator_Value = Guid.initString("96236a88-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcGenerator = &CLSID_RdcGenerator_Value;

const CLSID_RdcFileReader_Value = Guid.initString("96236a89-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcFileReader = &CLSID_RdcFileReader_Value;

const CLSID_RdcSignatureReader_Value = Guid.initString("96236a8a-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcSignatureReader = &CLSID_RdcSignatureReader_Value;

const CLSID_RdcComparator_Value = Guid.initString("96236a8b-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcComparator = &CLSID_RdcComparator_Value;

const CLSID_SimilarityReportProgress_Value = Guid.initString("96236a8d-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityReportProgress = &CLSID_SimilarityReportProgress_Value;

const CLSID_SimilarityTableDumpState_Value = Guid.initString("96236a8e-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityTableDumpState = &CLSID_SimilarityTableDumpState_Value;

const CLSID_SimilarityTraitsTable_Value = Guid.initString("96236a8f-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityTraitsTable = &CLSID_SimilarityTraitsTable_Value;

const CLSID_SimilarityFileIdTable_Value = Guid.initString("96236a90-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityFileIdTable = &CLSID_SimilarityFileIdTable_Value;

const CLSID_Similarity_Value = Guid.initString("96236a91-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_Similarity = &CLSID_Similarity_Value;

const CLSID_RdcSimilarityGenerator_Value = Guid.initString("96236a92-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_RdcSimilarityGenerator = &CLSID_RdcSimilarityGenerator_Value;

const CLSID_FindSimilarResults_Value = Guid.initString("96236a93-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_FindSimilarResults = &CLSID_FindSimilarResults_Value;

const CLSID_SimilarityTraitsMapping_Value = Guid.initString("96236a94-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityTraitsMapping = &CLSID_SimilarityTraitsMapping_Value;

const CLSID_SimilarityTraitsMappedView_Value = Guid.initString("96236a95-9dbc-11da-9e3f-0011114ae311");
pub const CLSID_SimilarityTraitsMappedView = &CLSID_SimilarityTraitsMappedView_Value;

pub const RDC_ErrorCode = enum(i32) {
    NoError = 0,
    HeaderVersionNewer = 1,
    HeaderVersionOlder = 2,
    HeaderMissingOrCorrupt = 3,
    HeaderWrongType = 4,
    DataMissingOrCorrupt = 5,
    DataTooManyRecords = 6,
    FileChecksumMismatch = 7,
    ApplicationError = 8,
    Aborted = 9,
    Win32Error = 10,
};
pub const RDC_NoError = RDC_ErrorCode.NoError;
pub const RDC_HeaderVersionNewer = RDC_ErrorCode.HeaderVersionNewer;
pub const RDC_HeaderVersionOlder = RDC_ErrorCode.HeaderVersionOlder;
pub const RDC_HeaderMissingOrCorrupt = RDC_ErrorCode.HeaderMissingOrCorrupt;
pub const RDC_HeaderWrongType = RDC_ErrorCode.HeaderWrongType;
pub const RDC_DataMissingOrCorrupt = RDC_ErrorCode.DataMissingOrCorrupt;
pub const RDC_DataTooManyRecords = RDC_ErrorCode.DataTooManyRecords;
pub const RDC_FileChecksumMismatch = RDC_ErrorCode.FileChecksumMismatch;
pub const RDC_ApplicationError = RDC_ErrorCode.ApplicationError;
pub const RDC_Aborted = RDC_ErrorCode.Aborted;
pub const RDC_Win32Error = RDC_ErrorCode.Win32Error;

pub const GeneratorParametersType = enum(i32) {
    Unused = 0,
    FilterMax = 1,
};
pub const RDCGENTYPE_Unused = GeneratorParametersType.Unused;
pub const RDCGENTYPE_FilterMax = GeneratorParametersType.FilterMax;

pub const RdcNeedType = enum(i32) {
    SOURCE = 0,
    TARGET = 1,
    SEED = 2,
    SEED_MAX = 255,
};
pub const RDCNEED_SOURCE = RdcNeedType.SOURCE;
pub const RDCNEED_TARGET = RdcNeedType.TARGET;
pub const RDCNEED_SEED = RdcNeedType.SEED;
pub const RDCNEED_SEED_MAX = RdcNeedType.SEED_MAX;

pub const RdcNeed = extern struct {
    m_BlockType: RdcNeedType,
    m_FileOffset: u64,
    m_BlockLength: u64,
};

pub const RdcBufferPointer = extern struct {
    m_Size: u32,
    m_Used: u32,
    m_Data: ?*u8,
};

pub const RdcNeedPointer = extern struct {
    m_Size: u32,
    m_Used: u32,
    m_Data: ?*RdcNeed,
};

pub const RdcSignature = extern struct {
    m_Signature: [16]u8,
    m_BlockLength: u16,
};

pub const RdcSignaturePointer = extern struct {
    m_Size: u32,
    m_Used: u32,
    m_Data: ?*RdcSignature,
};

pub const RdcCreatedTables = enum(i32) {
    InvalidOrUnknown = 0,
    Existing = 1,
    New = 2,
};
pub const RDCTABLE_InvalidOrUnknown = RdcCreatedTables.InvalidOrUnknown;
pub const RDCTABLE_Existing = RdcCreatedTables.Existing;
pub const RDCTABLE_New = RdcCreatedTables.New;

pub const RdcMappingAccessMode = enum(i32) {
    Undefined = 0,
    ReadOnly = 1,
    ReadWrite = 2,
};
pub const RDCMAPPING_Undefined = RdcMappingAccessMode.Undefined;
pub const RDCMAPPING_ReadOnly = RdcMappingAccessMode.ReadOnly;
pub const RDCMAPPING_ReadWrite = RdcMappingAccessMode.ReadWrite;

pub const SimilarityMappedViewInfo = extern struct {
    m_Data: ?*u8,
    m_Length: u32,
};

pub const SimilarityData = extern struct {
    m_Data: [16]u8,
};

pub const FindSimilarFileIndexResults = extern struct {
    m_FileIndex: u32,
    m_MatchCount: u32,
};

pub const SimilarityDumpData = extern struct {
    m_FileIndex: u32,
    m_Data: SimilarityData,
};

pub const SimilarityFileId = extern struct {
    m_FileId: [32]u8,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcGeneratorParameters_Value = Guid.initString("96236a71-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcGeneratorParameters = &IID_IRdcGeneratorParameters_Value;
pub const IRdcGeneratorParameters = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGeneratorParametersType: *const fn (
            self: *const IRdcGeneratorParameters,
            parameters_type: ?*GeneratorParametersType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParametersVersion: *const fn (
            self: *const IRdcGeneratorParameters,
            current_version: ?*u32,
            minimum_compatible_app_version: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerializeSize: *const fn (
            self: *const IRdcGeneratorParameters,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: *const fn (
            self: *const IRdcGeneratorParameters,
            size: u32,
            parameters_blob: ?*u8,
            bytes_written: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getGeneratorParametersType(self: *const T, parameters_type_: ?*GeneratorParametersType) HRESULT {
                return @as(*const IRdcGeneratorParameters.VTable, @ptrCast(self.vtable)).GetGeneratorParametersType(@as(*const IRdcGeneratorParameters, @ptrCast(self)), parameters_type_);
            }
            pub inline fn getParametersVersion(self: *const T, current_version_: ?*u32, minimum_compatible_app_version_: ?*u32) HRESULT {
                return @as(*const IRdcGeneratorParameters.VTable, @ptrCast(self.vtable)).GetParametersVersion(@as(*const IRdcGeneratorParameters, @ptrCast(self)), current_version_, minimum_compatible_app_version_);
            }
            pub inline fn getSerializeSize(self: *const T, size_: ?*u32) HRESULT {
                return @as(*const IRdcGeneratorParameters.VTable, @ptrCast(self.vtable)).GetSerializeSize(@as(*const IRdcGeneratorParameters, @ptrCast(self)), size_);
            }
            pub inline fn serialize(self: *const T, size_: u32, parameters_blob_: ?*u8, bytes_written_: ?*u32) HRESULT {
                return @as(*const IRdcGeneratorParameters.VTable, @ptrCast(self.vtable)).Serialize(@as(*const IRdcGeneratorParameters, @ptrCast(self)), size_, parameters_blob_, bytes_written_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcGeneratorFilterMaxParameters_Value = Guid.initString("96236a72-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcGeneratorFilterMaxParameters = &IID_IRdcGeneratorFilterMaxParameters_Value;
pub const IRdcGeneratorFilterMaxParameters = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHorizonSize: *const fn (
            self: *const IRdcGeneratorFilterMaxParameters,
            horizon_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHorizonSize: *const fn (
            self: *const IRdcGeneratorFilterMaxParameters,
            horizon_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHashWindowSize: *const fn (
            self: *const IRdcGeneratorFilterMaxParameters,
            hash_window_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHashWindowSize: *const fn (
            self: *const IRdcGeneratorFilterMaxParameters,
            hash_window_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getHorizonSize(self: *const T, horizon_size_: ?*u32) HRESULT {
                return @as(*const IRdcGeneratorFilterMaxParameters.VTable, @ptrCast(self.vtable)).GetHorizonSize(@as(*const IRdcGeneratorFilterMaxParameters, @ptrCast(self)), horizon_size_);
            }
            pub inline fn setHorizonSize(self: *const T, horizon_size_: u32) HRESULT {
                return @as(*const IRdcGeneratorFilterMaxParameters.VTable, @ptrCast(self.vtable)).SetHorizonSize(@as(*const IRdcGeneratorFilterMaxParameters, @ptrCast(self)), horizon_size_);
            }
            pub inline fn getHashWindowSize(self: *const T, hash_window_size_: ?*u32) HRESULT {
                return @as(*const IRdcGeneratorFilterMaxParameters.VTable, @ptrCast(self.vtable)).GetHashWindowSize(@as(*const IRdcGeneratorFilterMaxParameters, @ptrCast(self)), hash_window_size_);
            }
            pub inline fn setHashWindowSize(self: *const T, hash_window_size_: u32) HRESULT {
                return @as(*const IRdcGeneratorFilterMaxParameters.VTable, @ptrCast(self.vtable)).SetHashWindowSize(@as(*const IRdcGeneratorFilterMaxParameters, @ptrCast(self)), hash_window_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcGenerator_Value = Guid.initString("96236a73-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcGenerator = &IID_IRdcGenerator_Value;
pub const IRdcGenerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGeneratorParameters: *const fn (
            self: *const IRdcGenerator,
            level: u32,
            i_generator_parameters: ?*?*IRdcGeneratorParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Process: *const fn (
            self: *const IRdcGenerator,
            end_of_input: BOOL,
            end_of_output: ?*BOOL,
            input_buffer: ?*RdcBufferPointer,
            depth: u32,
            output_buffers: [*]?*RdcBufferPointer,
            rdc__error_code: ?*RDC_ErrorCode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getGeneratorParameters(self: *const T, level_: u32, i_generator_parameters_: ?*?*IRdcGeneratorParameters) HRESULT {
                return @as(*const IRdcGenerator.VTable, @ptrCast(self.vtable)).GetGeneratorParameters(@as(*const IRdcGenerator, @ptrCast(self)), level_, i_generator_parameters_);
            }
            pub inline fn process(self: *const T, end_of_input_: BOOL, end_of_output_: ?*BOOL, input_buffer_: ?*RdcBufferPointer, depth_: u32, output_buffers_: [*]?*RdcBufferPointer, rdc__error_code_: ?*RDC_ErrorCode) HRESULT {
                return @as(*const IRdcGenerator.VTable, @ptrCast(self.vtable)).Process(@as(*const IRdcGenerator, @ptrCast(self)), end_of_input_, end_of_output_, input_buffer_, depth_, output_buffers_, rdc__error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcFileReader_Value = Guid.initString("96236a74-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcFileReader = &IID_IRdcFileReader_Value;
pub const IRdcFileReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFileSize: *const fn (
            self: *const IRdcFileReader,
            file_size: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: *const fn (
            self: *const IRdcFileReader,
            offset_file_start: u64,
            bytes_to_read: u32,
            bytes_actually_read: ?*u32,
            buffer: ?*u8,
            eof: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilePosition: *const fn (
            self: *const IRdcFileReader,
            offset_from_start: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFileSize(self: *const T, file_size_: ?*u64) HRESULT {
                return @as(*const IRdcFileReader.VTable, @ptrCast(self.vtable)).GetFileSize(@as(*const IRdcFileReader, @ptrCast(self)), file_size_);
            }
            pub inline fn read(self: *const T, offset_file_start_: u64, bytes_to_read_: u32, bytes_actually_read_: ?*u32, buffer_: ?*u8, eof_: ?*BOOL) HRESULT {
                return @as(*const IRdcFileReader.VTable, @ptrCast(self.vtable)).Read(@as(*const IRdcFileReader, @ptrCast(self)), offset_file_start_, bytes_to_read_, bytes_actually_read_, buffer_, eof_);
            }
            pub inline fn getFilePosition(self: *const T, offset_from_start_: ?*u64) HRESULT {
                return @as(*const IRdcFileReader.VTable, @ptrCast(self.vtable)).GetFilePosition(@as(*const IRdcFileReader, @ptrCast(self)), offset_from_start_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcFileWriter_Value = Guid.initString("96236a75-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcFileWriter = &IID_IRdcFileWriter_Value;
pub const IRdcFileWriter = extern struct {
    pub const VTable = extern struct {
        base: IRdcFileReader.VTable,
        Write: *const fn (
            self: *const IRdcFileWriter,
            offset_file_start: u64,
            bytes_to_write: u32,
            buffer: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Truncate: *const fn (
            self: *const IRdcFileWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteOnClose: *const fn (
            self: *const IRdcFileWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRdcFileReader.MethodMixin(T);
            pub inline fn write(self: *const T, offset_file_start_: u64, bytes_to_write_: u32, buffer_: ?*u8) HRESULT {
                return @as(*const IRdcFileWriter.VTable, @ptrCast(self.vtable)).Write(@as(*const IRdcFileWriter, @ptrCast(self)), offset_file_start_, bytes_to_write_, buffer_);
            }
            pub inline fn truncate(self: *const T) HRESULT {
                return @as(*const IRdcFileWriter.VTable, @ptrCast(self.vtable)).Truncate(@as(*const IRdcFileWriter, @ptrCast(self)));
            }
            pub inline fn deleteOnClose(self: *const T) HRESULT {
                return @as(*const IRdcFileWriter.VTable, @ptrCast(self.vtable)).DeleteOnClose(@as(*const IRdcFileWriter, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcSignatureReader_Value = Guid.initString("96236a76-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcSignatureReader = &IID_IRdcSignatureReader_Value;
pub const IRdcSignatureReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadHeader: *const fn (
            self: *const IRdcSignatureReader,
            rdc__error_code: ?*RDC_ErrorCode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadSignatures: *const fn (
            self: *const IRdcSignatureReader,
            rdc_signature_pointer: ?*RdcSignaturePointer,
            end_of_output: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn readHeader(self: *const T, rdc__error_code_: ?*RDC_ErrorCode) HRESULT {
                return @as(*const IRdcSignatureReader.VTable, @ptrCast(self.vtable)).ReadHeader(@as(*const IRdcSignatureReader, @ptrCast(self)), rdc__error_code_);
            }
            pub inline fn readSignatures(self: *const T, rdc_signature_pointer_: ?*RdcSignaturePointer, end_of_output_: ?*BOOL) HRESULT {
                return @as(*const IRdcSignatureReader.VTable, @ptrCast(self.vtable)).ReadSignatures(@as(*const IRdcSignatureReader, @ptrCast(self)), rdc_signature_pointer_, end_of_output_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcComparator_Value = Guid.initString("96236a77-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcComparator = &IID_IRdcComparator_Value;
pub const IRdcComparator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Process: *const fn (
            self: *const IRdcComparator,
            end_of_input: BOOL,
            end_of_output: ?*BOOL,
            input_buffer: ?*RdcBufferPointer,
            output_buffer: ?*RdcNeedPointer,
            rdc__error_code: ?*RDC_ErrorCode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn process(self: *const T, end_of_input_: BOOL, end_of_output_: ?*BOOL, input_buffer_: ?*RdcBufferPointer, output_buffer_: ?*RdcNeedPointer, rdc__error_code_: ?*RDC_ErrorCode) HRESULT {
                return @as(*const IRdcComparator.VTable, @ptrCast(self.vtable)).Process(@as(*const IRdcComparator, @ptrCast(self)), end_of_input_, end_of_output_, input_buffer_, output_buffer_, rdc__error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcLibrary_Value = Guid.initString("96236a78-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcLibrary = &IID_IRdcLibrary_Value;
pub const IRdcLibrary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComputeDefaultRecursionDepth: *const fn (
            self: *const IRdcLibrary,
            file_size: u64,
            depth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGeneratorParameters: *const fn (
            self: *const IRdcLibrary,
            parameters_type: GeneratorParametersType,
            level: u32,
            i_generator_parameters: ?*?*IRdcGeneratorParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenGeneratorParameters: *const fn (
            self: *const IRdcLibrary,
            size: u32,
            parameters_blob: ?*const u8,
            i_generator_parameters: ?*?*IRdcGeneratorParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGenerator: *const fn (
            self: *const IRdcLibrary,
            depth: u32,
            i_generator_parameters_array: [*]?*IRdcGeneratorParameters,
            i_generator: ?*?*IRdcGenerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateComparator: *const fn (
            self: *const IRdcLibrary,
            i_seed_signatures_file: ?*IRdcFileReader,
            comparator_buffer_size: u32,
            i_comparator: ?*?*IRdcComparator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSignatureReader: *const fn (
            self: *const IRdcLibrary,
            i_file_reader: ?*IRdcFileReader,
            i_signature_reader: ?*?*IRdcSignatureReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRDCVersion: *const fn (
            self: *const IRdcLibrary,
            current_version: ?*u32,
            minimum_compatible_app_version: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn computeDefaultRecursionDepth(self: *const T, file_size_: u64, depth_: ?*u32) HRESULT {
                return @as(*const IRdcLibrary.VTable, @ptrCast(self.vtable)).ComputeDefaultRecursionDepth(@as(*const IRdcLibrary, @ptrCast(self)), file_size_, depth_);
            }
            pub inline fn createGeneratorParameters(self: *const T, parameters_type_: GeneratorParametersType, level_: u32, i_generator_parameters_: ?*?*IRdcGeneratorParameters) HRESULT {
                return @as(*const IRdcLibrary.VTable, @ptrCast(self.vtable)).CreateGeneratorParameters(@as(*const IRdcLibrary, @ptrCast(self)), parameters_type_, level_, i_generator_parameters_);
            }
            pub inline fn openGeneratorParameters(self: *const T, size_: u32, parameters_blob_: ?*const u8, i_generator_parameters_: ?*?*IRdcGeneratorParameters) HRESULT {
                return @as(*const IRdcLibrary.VTable, @ptrCast(self.vtable)).OpenGeneratorParameters(@as(*const IRdcLibrary, @ptrCast(self)), size_, parameters_blob_, i_generator_parameters_);
            }
            pub inline fn createGenerator(self: *const T, depth_: u32, i_generator_parameters_array_: [*]?*IRdcGeneratorParameters, i_generator_: ?*?*IRdcGenerator) HRESULT {
                return @as(*const IRdcLibrary.VTable, @ptrCast(self.vtable)).CreateGenerator(@as(*const IRdcLibrary, @ptrCast(self)), depth_, i_generator_parameters_array_, i_generator_);
            }
            pub inline fn createComparator(self: *const T, i_seed_signatures_file_: ?*IRdcFileReader, comparator_buffer_size_: u32, i_comparator_: ?*?*IRdcComparator) HRESULT {
                return @as(*const IRdcLibrary.VTable, @ptrCast(self.vtable)).CreateComparator(@as(*const IRdcLibrary, @ptrCast(self)), i_seed_signatures_file_, comparator_buffer_size_, i_comparator_);
            }
            pub inline fn createSignatureReader(self: *const T, i_file_reader_: ?*IRdcFileReader, i_signature_reader_: ?*?*IRdcSignatureReader) HRESULT {
                return @as(*const IRdcLibrary.VTable, @ptrCast(self.vtable)).CreateSignatureReader(@as(*const IRdcLibrary, @ptrCast(self)), i_file_reader_, i_signature_reader_);
            }
            pub inline fn getRDCVersion(self: *const T, current_version_: ?*u32, minimum_compatible_app_version_: ?*u32) HRESULT {
                return @as(*const IRdcLibrary.VTable, @ptrCast(self.vtable)).GetRDCVersion(@as(*const IRdcLibrary, @ptrCast(self)), current_version_, minimum_compatible_app_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityReportProgress_Value = Guid.initString("96236a7a-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityReportProgress = &IID_ISimilarityReportProgress_Value;
pub const ISimilarityReportProgress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReportProgress: *const fn (
            self: *const ISimilarityReportProgress,
            percent_completed: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reportProgress(self: *const T, percent_completed_: u32) HRESULT {
                return @as(*const ISimilarityReportProgress.VTable, @ptrCast(self.vtable)).ReportProgress(@as(*const ISimilarityReportProgress, @ptrCast(self)), percent_completed_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityTableDumpState_Value = Guid.initString("96236a7b-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityTableDumpState = &IID_ISimilarityTableDumpState_Value;
pub const ISimilarityTableDumpState = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNextData: *const fn (
            self: *const ISimilarityTableDumpState,
            results_size: u32,
            results_used: ?*u32,
            eof: ?*BOOL,
            results: ?*SimilarityDumpData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNextData(self: *const T, results_size_: u32, results_used_: ?*u32, eof_: ?*BOOL, results_: ?*SimilarityDumpData) HRESULT {
                return @as(*const ISimilarityTableDumpState.VTable, @ptrCast(self.vtable)).GetNextData(@as(*const ISimilarityTableDumpState, @ptrCast(self)), results_size_, results_used_, eof_, results_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityTraitsMappedView_Value = Guid.initString("96236a7c-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityTraitsMappedView = &IID_ISimilarityTraitsMappedView_Value;
pub const ISimilarityTraitsMappedView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Flush: *const fn (
            self: *const ISimilarityTraitsMappedView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unmap: *const fn (
            self: *const ISimilarityTraitsMappedView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Get: *const fn (
            self: *const ISimilarityTraitsMappedView,
            index: u64,
            dirty: BOOL,
            num_elements: u32,
            view_info: ?*SimilarityMappedViewInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetView: *const fn (
            self: *const ISimilarityTraitsMappedView,
            mapped_page_begin: ?*const ?*u8,
            mapped_page_end: ?*const ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn flush(self: *const T) HRESULT {
                return @as(*const ISimilarityTraitsMappedView.VTable, @ptrCast(self.vtable)).Flush(@as(*const ISimilarityTraitsMappedView, @ptrCast(self)));
            }
            pub inline fn unmap(self: *const T) HRESULT {
                return @as(*const ISimilarityTraitsMappedView.VTable, @ptrCast(self.vtable)).Unmap(@as(*const ISimilarityTraitsMappedView, @ptrCast(self)));
            }
            pub inline fn get(self: *const T, index_: u64, dirty_: BOOL, num_elements_: u32, view_info_: ?*SimilarityMappedViewInfo) HRESULT {
                return @as(*const ISimilarityTraitsMappedView.VTable, @ptrCast(self.vtable)).Get(@as(*const ISimilarityTraitsMappedView, @ptrCast(self)), index_, dirty_, num_elements_, view_info_);
            }
            pub inline fn getView(self: *const T, mapped_page_begin_: ?*const ?*u8, mapped_page_end_: ?*const ?*u8) void {
                return @as(*const ISimilarityTraitsMappedView.VTable, @ptrCast(self.vtable)).GetView(@as(*const ISimilarityTraitsMappedView, @ptrCast(self)), mapped_page_begin_, mapped_page_end_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityTraitsMapping_Value = Guid.initString("96236a7d-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityTraitsMapping = &IID_ISimilarityTraitsMapping_Value;
pub const ISimilarityTraitsMapping = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CloseMapping: *const fn (
            self: *const ISimilarityTraitsMapping,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetFileSize: *const fn (
            self: *const ISimilarityTraitsMapping,
            file_size: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSize: *const fn (
            self: *const ISimilarityTraitsMapping,
            file_size: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenMapping: *const fn (
            self: *const ISimilarityTraitsMapping,
            access_mode: RdcMappingAccessMode,
            begin: u64,
            end: u64,
            actual_end: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResizeMapping: *const fn (
            self: *const ISimilarityTraitsMapping,
            access_mode: RdcMappingAccessMode,
            begin: u64,
            end: u64,
            actual_end: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageSize: *const fn (
            self: *const ISimilarityTraitsMapping,
            page_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateView: *const fn (
            self: *const ISimilarityTraitsMapping,
            minimum_mapped_pages: u32,
            access_mode: RdcMappingAccessMode,
            mapped_view: ?*?*ISimilarityTraitsMappedView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn closeMapping(self: *const T) void {
                return @as(*const ISimilarityTraitsMapping.VTable, @ptrCast(self.vtable)).CloseMapping(@as(*const ISimilarityTraitsMapping, @ptrCast(self)));
            }
            pub inline fn setFileSize(self: *const T, file_size_: u64) HRESULT {
                return @as(*const ISimilarityTraitsMapping.VTable, @ptrCast(self.vtable)).SetFileSize(@as(*const ISimilarityTraitsMapping, @ptrCast(self)), file_size_);
            }
            pub inline fn getFileSize(self: *const T, file_size_: ?*u64) HRESULT {
                return @as(*const ISimilarityTraitsMapping.VTable, @ptrCast(self.vtable)).GetFileSize(@as(*const ISimilarityTraitsMapping, @ptrCast(self)), file_size_);
            }
            pub inline fn openMapping(self: *const T, access_mode_: RdcMappingAccessMode, begin_: u64, end_: u64, actual_end_: ?*u64) HRESULT {
                return @as(*const ISimilarityTraitsMapping.VTable, @ptrCast(self.vtable)).OpenMapping(@as(*const ISimilarityTraitsMapping, @ptrCast(self)), access_mode_, begin_, end_, actual_end_);
            }
            pub inline fn resizeMapping(self: *const T, access_mode_: RdcMappingAccessMode, begin_: u64, end_: u64, actual_end_: ?*u64) HRESULT {
                return @as(*const ISimilarityTraitsMapping.VTable, @ptrCast(self.vtable)).ResizeMapping(@as(*const ISimilarityTraitsMapping, @ptrCast(self)), access_mode_, begin_, end_, actual_end_);
            }
            pub inline fn getPageSize(self: *const T, page_size_: ?*u32) void {
                return @as(*const ISimilarityTraitsMapping.VTable, @ptrCast(self.vtable)).GetPageSize(@as(*const ISimilarityTraitsMapping, @ptrCast(self)), page_size_);
            }
            pub inline fn createView(self: *const T, minimum_mapped_pages_: u32, access_mode_: RdcMappingAccessMode, mapped_view_: ?*?*ISimilarityTraitsMappedView) HRESULT {
                return @as(*const ISimilarityTraitsMapping.VTable, @ptrCast(self.vtable)).CreateView(@as(*const ISimilarityTraitsMapping, @ptrCast(self)), minimum_mapped_pages_, access_mode_, mapped_view_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityTraitsTable_Value = Guid.initString("96236a7e-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityTraitsTable = &IID_ISimilarityTraitsTable_Value;
pub const ISimilarityTraitsTable = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTable: *const fn (
            self: *const ISimilarityTraitsTable,
            path: ?PWSTR,
            truncate: BOOL,
            security_descriptor: ?*u8,
            is_new: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTableIndirect: *const fn (
            self: *const ISimilarityTraitsTable,
            mapping: ?*ISimilarityTraitsMapping,
            truncate: BOOL,
            is_new: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseTable: *const fn (
            self: *const ISimilarityTraitsTable,
            is_valid: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const ISimilarityTraitsTable,
            data: ?*SimilarityData,
            file_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindSimilarFileIndex: *const fn (
            self: *const ISimilarityTraitsTable,
            similarity_data: ?*SimilarityData,
            number_of_matches_required: u16,
            find_similar_file_index_results: ?*FindSimilarFileIndexResults,
            results_size: u32,
            results_used: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginDump: *const fn (
            self: *const ISimilarityTraitsTable,
            similarity_table_dump_state: ?*?*ISimilarityTableDumpState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastIndex: *const fn (
            self: *const ISimilarityTraitsTable,
            file_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createTable(self: *const T, path_: ?PWSTR, truncate_: BOOL, security_descriptor_: ?*u8, is_new_: ?*RdcCreatedTables) HRESULT {
                return @as(*const ISimilarityTraitsTable.VTable, @ptrCast(self.vtable)).CreateTable(@as(*const ISimilarityTraitsTable, @ptrCast(self)), path_, truncate_, security_descriptor_, is_new_);
            }
            pub inline fn createTableIndirect(self: *const T, mapping_: ?*ISimilarityTraitsMapping, truncate_: BOOL, is_new_: ?*RdcCreatedTables) HRESULT {
                return @as(*const ISimilarityTraitsTable.VTable, @ptrCast(self.vtable)).CreateTableIndirect(@as(*const ISimilarityTraitsTable, @ptrCast(self)), mapping_, truncate_, is_new_);
            }
            pub inline fn closeTable(self: *const T, is_valid_: BOOL) HRESULT {
                return @as(*const ISimilarityTraitsTable.VTable, @ptrCast(self.vtable)).CloseTable(@as(*const ISimilarityTraitsTable, @ptrCast(self)), is_valid_);
            }
            pub inline fn append(self: *const T, data_: ?*SimilarityData, file_index_: u32) HRESULT {
                return @as(*const ISimilarityTraitsTable.VTable, @ptrCast(self.vtable)).Append(@as(*const ISimilarityTraitsTable, @ptrCast(self)), data_, file_index_);
            }
            pub inline fn findSimilarFileIndex(self: *const T, similarity_data_: ?*SimilarityData, number_of_matches_required_: u16, find_similar_file_index_results_: ?*FindSimilarFileIndexResults, results_size_: u32, results_used_: ?*u32) HRESULT {
                return @as(*const ISimilarityTraitsTable.VTable, @ptrCast(self.vtable)).FindSimilarFileIndex(@as(*const ISimilarityTraitsTable, @ptrCast(self)), similarity_data_, number_of_matches_required_, find_similar_file_index_results_, results_size_, results_used_);
            }
            pub inline fn beginDump(self: *const T, similarity_table_dump_state_: ?*?*ISimilarityTableDumpState) HRESULT {
                return @as(*const ISimilarityTraitsTable.VTable, @ptrCast(self.vtable)).BeginDump(@as(*const ISimilarityTraitsTable, @ptrCast(self)), similarity_table_dump_state_);
            }
            pub inline fn getLastIndex(self: *const T, file_index_: ?*u32) HRESULT {
                return @as(*const ISimilarityTraitsTable.VTable, @ptrCast(self.vtable)).GetLastIndex(@as(*const ISimilarityTraitsTable, @ptrCast(self)), file_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarityFileIdTable_Value = Guid.initString("96236a7f-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarityFileIdTable = &IID_ISimilarityFileIdTable_Value;
pub const ISimilarityFileIdTable = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTable: *const fn (
            self: *const ISimilarityFileIdTable,
            path: ?PWSTR,
            truncate: BOOL,
            security_descriptor: ?*u8,
            record_size: u32,
            is_new: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTableIndirect: *const fn (
            self: *const ISimilarityFileIdTable,
            file_id_file: ?*IRdcFileWriter,
            truncate: BOOL,
            record_size: u32,
            is_new: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseTable: *const fn (
            self: *const ISimilarityFileIdTable,
            is_valid: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const ISimilarityFileIdTable,
            similarity_file_id: ?*SimilarityFileId,
            similarity_file_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lookup: *const fn (
            self: *const ISimilarityFileIdTable,
            similarity_file_index: u32,
            similarity_file_id: ?*SimilarityFileId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invalidate: *const fn (
            self: *const ISimilarityFileIdTable,
            similarity_file_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecordCount: *const fn (
            self: *const ISimilarityFileIdTable,
            record_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createTable(self: *const T, path_: ?PWSTR, truncate_: BOOL, security_descriptor_: ?*u8, record_size_: u32, is_new_: ?*RdcCreatedTables) HRESULT {
                return @as(*const ISimilarityFileIdTable.VTable, @ptrCast(self.vtable)).CreateTable(@as(*const ISimilarityFileIdTable, @ptrCast(self)), path_, truncate_, security_descriptor_, record_size_, is_new_);
            }
            pub inline fn createTableIndirect(self: *const T, file_id_file_: ?*IRdcFileWriter, truncate_: BOOL, record_size_: u32, is_new_: ?*RdcCreatedTables) HRESULT {
                return @as(*const ISimilarityFileIdTable.VTable, @ptrCast(self.vtable)).CreateTableIndirect(@as(*const ISimilarityFileIdTable, @ptrCast(self)), file_id_file_, truncate_, record_size_, is_new_);
            }
            pub inline fn closeTable(self: *const T, is_valid_: BOOL) HRESULT {
                return @as(*const ISimilarityFileIdTable.VTable, @ptrCast(self.vtable)).CloseTable(@as(*const ISimilarityFileIdTable, @ptrCast(self)), is_valid_);
            }
            pub inline fn append(self: *const T, similarity_file_id_: ?*SimilarityFileId, similarity_file_index_: ?*u32) HRESULT {
                return @as(*const ISimilarityFileIdTable.VTable, @ptrCast(self.vtable)).Append(@as(*const ISimilarityFileIdTable, @ptrCast(self)), similarity_file_id_, similarity_file_index_);
            }
            pub inline fn lookup(self: *const T, similarity_file_index_: u32, similarity_file_id_: ?*SimilarityFileId) HRESULT {
                return @as(*const ISimilarityFileIdTable.VTable, @ptrCast(self.vtable)).Lookup(@as(*const ISimilarityFileIdTable, @ptrCast(self)), similarity_file_index_, similarity_file_id_);
            }
            pub inline fn invalidate(self: *const T, similarity_file_index_: u32) HRESULT {
                return @as(*const ISimilarityFileIdTable.VTable, @ptrCast(self.vtable)).Invalidate(@as(*const ISimilarityFileIdTable, @ptrCast(self)), similarity_file_index_);
            }
            pub inline fn getRecordCount(self: *const T, record_count_: ?*u32) HRESULT {
                return @as(*const ISimilarityFileIdTable.VTable, @ptrCast(self.vtable)).GetRecordCount(@as(*const ISimilarityFileIdTable, @ptrCast(self)), record_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRdcSimilarityGenerator_Value = Guid.initString("96236a80-9dbc-11da-9e3f-0011114ae311");
pub const IID_IRdcSimilarityGenerator = &IID_IRdcSimilarityGenerator_Value;
pub const IRdcSimilarityGenerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableSimilarity: *const fn (
            self: *const IRdcSimilarityGenerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Results: *const fn (
            self: *const IRdcSimilarityGenerator,
            similarity_data: ?*SimilarityData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enableSimilarity(self: *const T) HRESULT {
                return @as(*const IRdcSimilarityGenerator.VTable, @ptrCast(self.vtable)).EnableSimilarity(@as(*const IRdcSimilarityGenerator, @ptrCast(self)));
            }
            pub inline fn results(self: *const T, similarity_data_: ?*SimilarityData) HRESULT {
                return @as(*const IRdcSimilarityGenerator.VTable, @ptrCast(self.vtable)).Results(@as(*const IRdcSimilarityGenerator, @ptrCast(self)), similarity_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFindSimilarResults_Value = Guid.initString("96236a81-9dbc-11da-9e3f-0011114ae311");
pub const IID_IFindSimilarResults = &IID_IFindSimilarResults_Value;
pub const IFindSimilarResults = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSize: *const fn (
            self: *const IFindSimilarResults,
            size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextFileId: *const fn (
            self: *const IFindSimilarResults,
            num_traits_matched: ?*u32,
            similarity_file_id: ?*SimilarityFileId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSize(self: *const T, size_: ?*u32) HRESULT {
                return @as(*const IFindSimilarResults.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IFindSimilarResults, @ptrCast(self)), size_);
            }
            pub inline fn getNextFileId(self: *const T, num_traits_matched_: ?*u32, similarity_file_id_: ?*SimilarityFileId) HRESULT {
                return @as(*const IFindSimilarResults.VTable, @ptrCast(self.vtable)).GetNextFileId(@as(*const IFindSimilarResults, @ptrCast(self)), num_traits_matched_, similarity_file_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISimilarity_Value = Guid.initString("96236a83-9dbc-11da-9e3f-0011114ae311");
pub const IID_ISimilarity = &IID_ISimilarity_Value;
pub const ISimilarity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTable: *const fn (
            self: *const ISimilarity,
            path: ?PWSTR,
            truncate: BOOL,
            security_descriptor: ?*u8,
            record_size: u32,
            is_new: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTableIndirect: *const fn (
            self: *const ISimilarity,
            mapping: ?*ISimilarityTraitsMapping,
            file_id_file: ?*IRdcFileWriter,
            truncate: BOOL,
            record_size: u32,
            is_new: ?*RdcCreatedTables,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseTable: *const fn (
            self: *const ISimilarity,
            is_valid: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const ISimilarity,
            similarity_file_id: ?*SimilarityFileId,
            similarity_data: ?*SimilarityData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindSimilarFileId: *const fn (
            self: *const ISimilarity,
            similarity_data: ?*SimilarityData,
            number_of_matches_required: u16,
            results_size: u32,
            find_similar_results: ?*?*IFindSimilarResults,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyAndSwap: *const fn (
            self: *const ISimilarity,
            new_similarity_tables: ?*ISimilarity,
            report_progress: ?*ISimilarityReportProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecordCount: *const fn (
            self: *const ISimilarity,
            record_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createTable(self: *const T, path_: ?PWSTR, truncate_: BOOL, security_descriptor_: ?*u8, record_size_: u32, is_new_: ?*RdcCreatedTables) HRESULT {
                return @as(*const ISimilarity.VTable, @ptrCast(self.vtable)).CreateTable(@as(*const ISimilarity, @ptrCast(self)), path_, truncate_, security_descriptor_, record_size_, is_new_);
            }
            pub inline fn createTableIndirect(self: *const T, mapping_: ?*ISimilarityTraitsMapping, file_id_file_: ?*IRdcFileWriter, truncate_: BOOL, record_size_: u32, is_new_: ?*RdcCreatedTables) HRESULT {
                return @as(*const ISimilarity.VTable, @ptrCast(self.vtable)).CreateTableIndirect(@as(*const ISimilarity, @ptrCast(self)), mapping_, file_id_file_, truncate_, record_size_, is_new_);
            }
            pub inline fn closeTable(self: *const T, is_valid_: BOOL) HRESULT {
                return @as(*const ISimilarity.VTable, @ptrCast(self.vtable)).CloseTable(@as(*const ISimilarity, @ptrCast(self)), is_valid_);
            }
            pub inline fn append(self: *const T, similarity_file_id_: ?*SimilarityFileId, similarity_data_: ?*SimilarityData) HRESULT {
                return @as(*const ISimilarity.VTable, @ptrCast(self.vtable)).Append(@as(*const ISimilarity, @ptrCast(self)), similarity_file_id_, similarity_data_);
            }
            pub inline fn findSimilarFileId(self: *const T, similarity_data_: ?*SimilarityData, number_of_matches_required_: u16, results_size_: u32, find_similar_results_: ?*?*IFindSimilarResults) HRESULT {
                return @as(*const ISimilarity.VTable, @ptrCast(self.vtable)).FindSimilarFileId(@as(*const ISimilarity, @ptrCast(self)), similarity_data_, number_of_matches_required_, results_size_, find_similar_results_);
            }
            pub inline fn copyAndSwap(self: *const T, new_similarity_tables_: ?*ISimilarity, report_progress_: ?*ISimilarityReportProgress) HRESULT {
                return @as(*const ISimilarity.VTable, @ptrCast(self.vtable)).CopyAndSwap(@as(*const ISimilarity, @ptrCast(self)), new_similarity_tables_, report_progress_);
            }
            pub inline fn getRecordCount(self: *const T, record_count_: ?*u32) HRESULT {
                return @as(*const ISimilarity.VTable, @ptrCast(self.vtable)).GetRecordCount(@as(*const ISimilarity, @ptrCast(self)), record_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
