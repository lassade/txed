//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (702)
//--------------------------------------------------------------------------------
pub const WM_ADSPROP_NOTIFY_PAGEINIT = @as(u32, 2125);
pub const WM_ADSPROP_NOTIFY_PAGEHWND = @as(u32, 2126);
pub const WM_ADSPROP_NOTIFY_CHANGE = @as(u32, 2127);
pub const WM_ADSPROP_NOTIFY_APPLY = @as(u32, 2128);
pub const WM_ADSPROP_NOTIFY_SETFOCUS = @as(u32, 2129);
pub const WM_ADSPROP_NOTIFY_FOREGROUND = @as(u32, 2130);
pub const WM_ADSPROP_NOTIFY_EXIT = @as(u32, 2131);
pub const WM_ADSPROP_NOTIFY_ERROR = @as(u32, 2134);
pub const CLSID_CommonQuery = Guid.initString("83bc5ec0-6f2a-11d0-a1c4-00aa00c16e65");
pub const QUERYFORM_CHANGESFORMLIST = @as(u64, 1);
pub const QUERYFORM_CHANGESOPTFORMLIST = @as(u64, 2);
pub const CQFF_NOGLOBALPAGES = @as(u32, 1);
pub const CQFF_ISOPTIONAL = @as(u32, 2);
pub const CQPM_INITIALIZE = @as(u32, 1);
pub const CQPM_RELEASE = @as(u32, 2);
pub const CQPM_ENABLE = @as(u32, 3);
pub const CQPM_GETPARAMETERS = @as(u32, 5);
pub const CQPM_CLEARFORM = @as(u32, 6);
pub const CQPM_PERSIST = @as(u32, 7);
pub const CQPM_HELP = @as(u32, 8);
pub const CQPM_SETDEFAULTPARAMETERS = @as(u32, 9);
pub const CQPM_HANDLERSPECIFIC = @as(u32, 268435456);
pub const OQWF_OKCANCEL = @as(u32, 1);
pub const OQWF_DEFAULTFORM = @as(u32, 2);
pub const OQWF_SINGLESELECT = @as(u32, 4);
pub const OQWF_LOADQUERY = @as(u32, 8);
pub const OQWF_REMOVESCOPES = @as(u32, 16);
pub const OQWF_REMOVEFORMS = @as(u32, 32);
pub const OQWF_ISSUEONOPEN = @as(u32, 64);
pub const OQWF_SHOWOPTIONAL = @as(u32, 128);
pub const OQWF_SAVEQUERYONOK = @as(u32, 512);
pub const OQWF_HIDEMENUS = @as(u32, 1024);
pub const OQWF_HIDESEARCHUI = @as(u32, 2048);
pub const OQWF_PARAMISPROPERTYBAG = @as(u32, 2147483648);
pub const CLSID_DsAdminCreateObj = Guid.initString("e301a009-f901-11d2-82b9-00c04f68928b");
pub const DSA_NEWOBJ_CTX_PRECOMMIT = @as(u32, 1);
pub const DSA_NEWOBJ_CTX_COMMIT = @as(u32, 2);
pub const DSA_NEWOBJ_CTX_POSTCOMMIT = @as(u32, 3);
pub const DSA_NEWOBJ_CTX_CLEANUP = @as(u32, 4);
pub const DSA_NOTIFY_DEL = @as(u32, 1);
pub const DSA_NOTIFY_REN = @as(u32, 2);
pub const DSA_NOTIFY_MOV = @as(u32, 4);
pub const DSA_NOTIFY_PROP = @as(u32, 8);
pub const DSA_NOTIFY_FLAG_ADDITIONAL_DATA = @as(u32, 2);
pub const DSA_NOTIFY_FLAG_FORCE_ADDITIONAL_DATA = @as(u32, 1);
pub const CLSID_MicrosoftDS = Guid.initString("fe1290f0-cfbd-11cf-a330-00aa00c16e65");
pub const CLSID_DsPropertyPages = Guid.initString("0d45d530-764b-11d0-a1ca-00aa00c16e65");
pub const CLSID_DsDomainTreeBrowser = Guid.initString("1698790a-e2b4-11d0-b0b1-00c04fd8dca6");
pub const CLSID_DsDisplaySpecifier = Guid.initString("1ab4a8c0-6a0b-11d2-ad49-00c04fa31a86");
pub const CLSID_DsFolderProperties = Guid.initString("9e51e0d0-6e0f-11d2-9601-00c04fa31a86");
pub const DSOBJECT_ISCONTAINER = @as(u32, 1);
pub const DSOBJECT_READONLYPAGES = @as(u32, 2147483648);
pub const DSPROVIDER_UNUSED_0 = @as(u32, 1);
pub const DSPROVIDER_UNUSED_1 = @as(u32, 2);
pub const DSPROVIDER_UNUSED_2 = @as(u32, 4);
pub const DSPROVIDER_UNUSED_3 = @as(u32, 8);
pub const DSPROVIDER_ADVANCED = @as(u32, 16);
pub const DSPROVIDER_AD_LDS = @as(u32, 32);
pub const CFSTR_DSOBJECTNAMES = "DsObjectNames";
pub const CFSTR_DS_DISPLAY_SPEC_OPTIONS = "DsDisplaySpecOptions";
pub const CFSTR_DSDISPLAYSPECOPTIONS = "DsDisplaySpecOptions";
pub const DS_PROP_SHELL_PREFIX = "shell";
pub const DS_PROP_ADMIN_PREFIX = "admin";
pub const DSDSOF_HASUSERANDSERVERINFO = @as(u32, 1);
pub const DSDSOF_SIMPLEAUTHENTICATE = @as(u32, 2);
pub const DSDSOF_DONTSIGNSEAL = @as(u32, 4);
pub const DSDSOF_DSAVAILABLE = @as(u32, 1073741824);
pub const CFSTR_DSPROPERTYPAGEINFO = "DsPropPageInfo";
pub const DSPROP_ATTRCHANGED_MSG = "DsPropAttrChanged";
pub const DBDTF_RETURNFQDN = @as(u32, 1);
pub const DBDTF_RETURNMIXEDDOMAINS = @as(u32, 2);
pub const DBDTF_RETURNEXTERNAL = @as(u32, 4);
pub const DBDTF_RETURNINBOUND = @as(u32, 8);
pub const DBDTF_RETURNINOUTBOUND = @as(u32, 16);
pub const DSSSF_SIMPLEAUTHENTICATE = @as(u32, 1);
pub const DSSSF_DONTSIGNSEAL = @as(u32, 2);
pub const DSSSF_DSAVAILABLE = @as(u32, 2147483648);
pub const DSGIF_ISNORMAL = @as(u32, 0);
pub const DSGIF_ISOPEN = @as(u32, 1);
pub const DSGIF_ISDISABLED = @as(u32, 2);
pub const DSGIF_ISMASK = @as(u32, 15);
pub const DSGIF_GETDEFAULTICON = @as(u32, 16);
pub const DSGIF_DEFAULTISCONTAINER = @as(u32, 32);
pub const DSICCF_IGNORETREATASLEAF = @as(u32, 1);
pub const DSECAF_NOTLISTED = @as(u32, 1);
pub const DSCCIF_HASWIZARDDIALOG = @as(u32, 1);
pub const DSCCIF_HASWIZARDPRIMARYPAGE = @as(u32, 2);
pub const DSBI_NOBUTTONS = @as(u32, 1);
pub const DSBI_NOLINES = @as(u32, 2);
pub const DSBI_NOLINESATROOT = @as(u32, 4);
pub const DSBI_CHECKBOXES = @as(u32, 256);
pub const DSBI_NOROOT = @as(u32, 65536);
pub const DSBI_INCLUDEHIDDEN = @as(u32, 131072);
pub const DSBI_EXPANDONOPEN = @as(u32, 262144);
pub const DSBI_ENTIREDIRECTORY = @as(u32, 589824);
pub const DSBI_RETURN_FORMAT = @as(u32, 1048576);
pub const DSBI_HASCREDENTIALS = @as(u32, 2097152);
pub const DSBI_IGNORETREATASLEAF = @as(u32, 4194304);
pub const DSBI_SIMPLEAUTHENTICATE = @as(u32, 8388608);
pub const DSBI_RETURNOBJECTCLASS = @as(u32, 16777216);
pub const DSBI_DONTSIGNSEAL = @as(u32, 33554432);
pub const DSB_MAX_DISPLAYNAME_CHARS = @as(u32, 64);
pub const DSBF_STATE = @as(u32, 1);
pub const DSBF_ICONLOCATION = @as(u32, 2);
pub const DSBF_DISPLAYNAME = @as(u32, 4);
pub const DSBS_CHECKED = @as(u32, 1);
pub const DSBS_HIDDEN = @as(u32, 2);
pub const DSBS_ROOT = @as(u32, 4);
pub const DSBM_QUERYINSERTW = @as(u32, 100);
pub const DSBM_QUERYINSERTA = @as(u32, 101);
pub const DSBM_QUERYINSERT = @as(u32, 100);
pub const DSBM_CHANGEIMAGESTATE = @as(u32, 102);
pub const DSBM_HELP = @as(u32, 103);
pub const DSBM_CONTEXTMENU = @as(u32, 104);
pub const DSBID_BANNER = @as(u32, 256);
pub const DSBID_CONTAINERLIST = @as(u32, 257);
pub const DS_FORCE_REDISCOVERY = @as(u32, 1);
pub const DS_DIRECTORY_SERVICE_REQUIRED = @as(u32, 16);
pub const DS_DIRECTORY_SERVICE_PREFERRED = @as(u32, 32);
pub const DS_GC_SERVER_REQUIRED = @as(u32, 64);
pub const DS_PDC_REQUIRED = @as(u32, 128);
pub const DS_BACKGROUND_ONLY = @as(u32, 256);
pub const DS_IP_REQUIRED = @as(u32, 512);
pub const DS_KDC_REQUIRED = @as(u32, 1024);
pub const DS_TIMESERV_REQUIRED = @as(u32, 2048);
pub const DS_WRITABLE_REQUIRED = @as(u32, 4096);
pub const DS_GOOD_TIMESERV_PREFERRED = @as(u32, 8192);
pub const DS_AVOID_SELF = @as(u32, 16384);
pub const DS_ONLY_LDAP_NEEDED = @as(u32, 32768);
pub const DS_IS_FLAT_NAME = @as(u32, 65536);
pub const DS_IS_DNS_NAME = @as(u32, 131072);
pub const DS_TRY_NEXTCLOSEST_SITE = @as(u32, 262144);
pub const DS_DIRECTORY_SERVICE_6_REQUIRED = @as(u32, 524288);
pub const DS_WEB_SERVICE_REQUIRED = @as(u32, 1048576);
pub const DS_DIRECTORY_SERVICE_8_REQUIRED = @as(u32, 2097152);
pub const DS_DIRECTORY_SERVICE_9_REQUIRED = @as(u32, 4194304);
pub const DS_DIRECTORY_SERVICE_10_REQUIRED = @as(u32, 8388608);
pub const DS_KEY_LIST_SUPPORT_REQUIRED = @as(u32, 16777216);
pub const DS_RETURN_DNS_NAME = @as(u32, 1073741824);
pub const DS_RETURN_FLAT_NAME = @as(u32, 2147483648);
pub const DS_PDC_FLAG = @as(u32, 1);
pub const DS_GC_FLAG = @as(u32, 4);
pub const DS_LDAP_FLAG = @as(u32, 8);
pub const DS_DS_FLAG = @as(u32, 16);
pub const DS_KDC_FLAG = @as(u32, 32);
pub const DS_TIMESERV_FLAG = @as(u32, 64);
pub const DS_CLOSEST_FLAG = @as(u32, 128);
pub const DS_WRITABLE_FLAG = @as(u32, 256);
pub const DS_GOOD_TIMESERV_FLAG = @as(u32, 512);
pub const DS_NDNC_FLAG = @as(u32, 1024);
pub const DS_SELECT_SECRET_DOMAIN_6_FLAG = @as(u32, 2048);
pub const DS_FULL_SECRET_DOMAIN_6_FLAG = @as(u32, 4096);
pub const DS_WS_FLAG = @as(u32, 8192);
pub const DS_DS_8_FLAG = @as(u32, 16384);
pub const DS_DS_9_FLAG = @as(u32, 32768);
pub const DS_DS_10_FLAG = @as(u32, 65536);
pub const DS_KEY_LIST_FLAG = @as(u32, 131072);
pub const DS_PING_FLAGS = @as(u32, 1048575);
pub const DS_DNS_CONTROLLER_FLAG = @as(u32, 536870912);
pub const DS_DNS_DOMAIN_FLAG = @as(u32, 1073741824);
pub const DS_DNS_FOREST_FLAG = @as(u32, 2147483648);
pub const DS_DOMAIN_IN_FOREST = @as(u32, 1);
pub const DS_DOMAIN_DIRECT_OUTBOUND = @as(u32, 2);
pub const DS_DOMAIN_TREE_ROOT = @as(u32, 4);
pub const DS_DOMAIN_PRIMARY = @as(u32, 8);
pub const DS_DOMAIN_NATIVE_MODE = @as(u32, 16);
pub const DS_DOMAIN_DIRECT_INBOUND = @as(u32, 32);
pub const DS_GFTI_UPDATE_TDO = @as(u32, 1);
pub const DS_GFTI_VALID_FLAGS = @as(u32, 1);
pub const DS_ONLY_DO_SITE_NAME = @as(u32, 1);
pub const DS_NOTIFY_AFTER_SITE_RECORDS = @as(u32, 2);
pub const CLSID_DsQuery = Guid.initString("8a23e65e-31c2-11d0-891c-00a024ab2dbb");
pub const CLSID_DsFindObjects = Guid.initString("83ee3fe1-57d9-11d0-b932-00a024ab2dbb");
pub const CLSID_DsFindPeople = Guid.initString("83ee3fe2-57d9-11d0-b932-00a024ab2dbb");
pub const CLSID_DsFindPrinter = Guid.initString("b577f070-7ee2-11d0-913f-00aa00c16e65");
pub const CLSID_DsFindComputer = Guid.initString("16006700-87ad-11d0-9140-00aa00c16e65");
pub const CLSID_DsFindVolume = Guid.initString("c1b3cbf1-886a-11d0-9140-00aa00c16e65");
pub const CLSID_DsFindContainer = Guid.initString("c1b3cbf2-886a-11d0-9140-00aa00c16e65");
pub const CLSID_DsFindAdvanced = Guid.initString("83ee3fe3-57d9-11d0-b932-00a024ab2dbb");
pub const CLSID_DsFindDomainController = Guid.initString("538c7b7e-d25e-11d0-9742-00a0c906af45");
pub const CLSID_DsFindWriteableDomainController = Guid.initString("7cbef079-aa84-444b-bc70-68e41283eabc");
pub const CLSID_DsFindFrsMembers = Guid.initString("94ce4b18-b3d3-11d1-b9b4-00c04fd8d5b0");
pub const DSQPF_NOSAVE = @as(u32, 1);
pub const DSQPF_SAVELOCATION = @as(u32, 2);
pub const DSQPF_SHOWHIDDENOBJECTS = @as(u32, 4);
pub const DSQPF_ENABLEADMINFEATURES = @as(u32, 8);
pub const DSQPF_ENABLEADVANCEDFEATURES = @as(u32, 16);
pub const DSQPF_HASCREDENTIALS = @as(u32, 32);
pub const DSQPF_NOCHOOSECOLUMNS = @as(u32, 64);
pub const CFSTR_DSQUERYPARAMS = "DsQueryParameters";
pub const CFSTR_DSQUERYSCOPE = "DsQueryScope";
pub const DSQPM_GETCLASSLIST = @as(u32, 268435456);
pub const DSQPM_HELPTOPICS = @as(u32, 268435457);
pub const DSROLE_PRIMARY_DS_RUNNING = @as(u32, 1);
pub const DSROLE_PRIMARY_DS_MIXED_MODE = @as(u32, 2);
pub const DSROLE_UPGRADE_IN_PROGRESS = @as(u32, 4);
pub const DSROLE_PRIMARY_DS_READONLY = @as(u32, 8);
pub const DSROLE_PRIMARY_DOMAIN_GUID_PRESENT = @as(u32, 16777216);
pub const ADS_ATTR_CLEAR = @as(u32, 1);
pub const ADS_ATTR_UPDATE = @as(u32, 2);
pub const ADS_ATTR_APPEND = @as(u32, 3);
pub const ADS_ATTR_DELETE = @as(u32, 4);
pub const ADS_EXT_MINEXTDISPID = @as(u32, 1);
pub const ADS_EXT_MAXEXTDISPID = @as(u32, 16777215);
pub const ADS_EXT_INITCREDENTIALS = @as(u32, 1);
pub const ADS_EXT_INITIALIZE_COMPLETE = @as(u32, 2);
pub const DS_BEHAVIOR_WIN2000 = @as(u32, 0);
pub const DS_BEHAVIOR_WIN2003_WITH_MIXED_DOMAINS = @as(u32, 1);
pub const DS_BEHAVIOR_WIN2003 = @as(u32, 2);
pub const DS_BEHAVIOR_WIN2008 = @as(u32, 3);
pub const DS_BEHAVIOR_WIN2008R2 = @as(u32, 4);
pub const DS_BEHAVIOR_WIN2012 = @as(u32, 5);
pub const DS_BEHAVIOR_WIN2012R2 = @as(u32, 6);
pub const DS_BEHAVIOR_WIN2016 = @as(u32, 7);
pub const DS_BEHAVIOR_LONGHORN = @as(u32, 3);
pub const DS_BEHAVIOR_WIN7 = @as(u32, 4);
pub const DS_BEHAVIOR_WIN8 = @as(u32, 5);
pub const DS_BEHAVIOR_WINBLUE = @as(u32, 6);
pub const DS_BEHAVIOR_WINTHRESHOLD = @as(u32, 7);
pub const DS_SYNCED_EVENT_NAME = "NTDSInitialSyncsCompleted";
pub const DS_SYNCED_EVENT_NAME_W = "NTDSInitialSyncsCompleted";
pub const ACTRL_DS_OPEN = @as(u32, 0);
pub const ACTRL_DS_CREATE_CHILD = @as(u32, 1);
pub const ACTRL_DS_DELETE_CHILD = @as(u32, 2);
pub const ACTRL_DS_LIST = @as(u32, 4);
pub const ACTRL_DS_SELF = @as(u32, 8);
pub const ACTRL_DS_READ_PROP = @as(u32, 16);
pub const ACTRL_DS_WRITE_PROP = @as(u32, 32);
pub const ACTRL_DS_DELETE_TREE = @as(u32, 64);
pub const ACTRL_DS_LIST_OBJECT = @as(u32, 128);
pub const ACTRL_DS_CONTROL_ACCESS = @as(u32, 256);
pub const NTDSAPI_BIND_ALLOW_DELEGATION = @as(u32, 1);
pub const NTDSAPI_BIND_FIND_BINDING = @as(u32, 2);
pub const NTDSAPI_BIND_FORCE_KERBEROS = @as(u32, 4);
pub const DS_REPSYNC_ASYNCHRONOUS_OPERATION = @as(u32, 1);
pub const DS_REPSYNC_WRITEABLE = @as(u32, 2);
pub const DS_REPSYNC_PERIODIC = @as(u32, 4);
pub const DS_REPSYNC_INTERSITE_MESSAGING = @as(u32, 8);
pub const DS_REPSYNC_FULL = @as(u32, 32);
pub const DS_REPSYNC_URGENT = @as(u32, 64);
pub const DS_REPSYNC_NO_DISCARD = @as(u32, 128);
pub const DS_REPSYNC_FORCE = @as(u32, 256);
pub const DS_REPSYNC_ADD_REFERENCE = @as(u32, 512);
pub const DS_REPSYNC_NEVER_COMPLETED = @as(u32, 1024);
pub const DS_REPSYNC_TWO_WAY = @as(u32, 2048);
pub const DS_REPSYNC_NEVER_NOTIFY = @as(u32, 4096);
pub const DS_REPSYNC_INITIAL = @as(u32, 8192);
pub const DS_REPSYNC_USE_COMPRESSION = @as(u32, 16384);
pub const DS_REPSYNC_ABANDONED = @as(u32, 32768);
pub const DS_REPSYNC_SELECT_SECRETS = @as(u32, 32768);
pub const DS_REPSYNC_INITIAL_IN_PROGRESS = @as(u32, 65536);
pub const DS_REPSYNC_PARTIAL_ATTRIBUTE_SET = @as(u32, 131072);
pub const DS_REPSYNC_REQUEUE = @as(u32, 262144);
pub const DS_REPSYNC_NOTIFICATION = @as(u32, 524288);
pub const DS_REPSYNC_ASYNCHRONOUS_REPLICA = @as(u32, 1048576);
pub const DS_REPSYNC_CRITICAL = @as(u32, 2097152);
pub const DS_REPSYNC_FULL_IN_PROGRESS = @as(u32, 4194304);
pub const DS_REPSYNC_PREEMPTED = @as(u32, 8388608);
pub const DS_REPSYNC_NONGC_RO_REPLICA = @as(u32, 16777216);
pub const DS_REPADD_ASYNCHRONOUS_OPERATION = @as(u32, 1);
pub const DS_REPADD_WRITEABLE = @as(u32, 2);
pub const DS_REPADD_INITIAL = @as(u32, 4);
pub const DS_REPADD_PERIODIC = @as(u32, 8);
pub const DS_REPADD_INTERSITE_MESSAGING = @as(u32, 16);
pub const DS_REPADD_ASYNCHRONOUS_REPLICA = @as(u32, 32);
pub const DS_REPADD_DISABLE_NOTIFICATION = @as(u32, 64);
pub const DS_REPADD_DISABLE_PERIODIC = @as(u32, 128);
pub const DS_REPADD_USE_COMPRESSION = @as(u32, 256);
pub const DS_REPADD_NEVER_NOTIFY = @as(u32, 512);
pub const DS_REPADD_TWO_WAY = @as(u32, 1024);
pub const DS_REPADD_CRITICAL = @as(u32, 2048);
pub const DS_REPADD_SELECT_SECRETS = @as(u32, 4096);
pub const DS_REPADD_NONGC_RO_REPLICA = @as(u32, 16777216);
pub const DS_REPDEL_ASYNCHRONOUS_OPERATION = @as(u32, 1);
pub const DS_REPDEL_WRITEABLE = @as(u32, 2);
pub const DS_REPDEL_INTERSITE_MESSAGING = @as(u32, 4);
pub const DS_REPDEL_IGNORE_ERRORS = @as(u32, 8);
pub const DS_REPDEL_LOCAL_ONLY = @as(u32, 16);
pub const DS_REPDEL_NO_SOURCE = @as(u32, 32);
pub const DS_REPDEL_REF_OK = @as(u32, 64);
pub const DS_REPMOD_ASYNCHRONOUS_OPERATION = @as(u32, 1);
pub const DS_REPMOD_WRITEABLE = @as(u32, 2);
pub const DS_REPMOD_UPDATE_FLAGS = @as(u32, 1);
pub const DS_REPMOD_UPDATE_INSTANCE = @as(u32, 2);
pub const DS_REPMOD_UPDATE_ADDRESS = @as(u32, 2);
pub const DS_REPMOD_UPDATE_SCHEDULE = @as(u32, 4);
pub const DS_REPMOD_UPDATE_RESULT = @as(u32, 8);
pub const DS_REPMOD_UPDATE_TRANSPORT = @as(u32, 16);
pub const DS_REPUPD_ASYNCHRONOUS_OPERATION = @as(u32, 1);
pub const DS_REPUPD_WRITEABLE = @as(u32, 2);
pub const DS_REPUPD_ADD_REFERENCE = @as(u32, 4);
pub const DS_REPUPD_DELETE_REFERENCE = @as(u32, 8);
pub const DS_REPUPD_REFERENCE_GCSPN = @as(u32, 16);
pub const DS_INSTANCETYPE_IS_NC_HEAD = @as(u32, 1);
pub const DS_INSTANCETYPE_NC_IS_WRITEABLE = @as(u32, 4);
pub const DS_INSTANCETYPE_NC_COMING = @as(u32, 16);
pub const DS_INSTANCETYPE_NC_GOING = @as(u32, 32);
pub const NTDSDSA_OPT_IS_GC = @as(u32, 1);
pub const NTDSDSA_OPT_DISABLE_INBOUND_REPL = @as(u32, 2);
pub const NTDSDSA_OPT_DISABLE_OUTBOUND_REPL = @as(u32, 4);
pub const NTDSDSA_OPT_DISABLE_NTDSCONN_XLATE = @as(u32, 8);
pub const NTDSDSA_OPT_DISABLE_SPN_REGISTRATION = @as(u32, 16);
pub const NTDSDSA_OPT_GENERATE_OWN_TOPO = @as(u32, 32);
pub const NTDSDSA_OPT_BLOCK_RPC = @as(u32, 64);
pub const NTDSCONN_OPT_IS_GENERATED = @as(u32, 1);
pub const NTDSCONN_OPT_TWOWAY_SYNC = @as(u32, 2);
pub const NTDSCONN_OPT_OVERRIDE_NOTIFY_DEFAULT = @as(u32, 4);
pub const NTDSCONN_OPT_USE_NOTIFY = @as(u32, 8);
pub const NTDSCONN_OPT_DISABLE_INTERSITE_COMPRESSION = @as(u32, 16);
pub const NTDSCONN_OPT_USER_OWNED_SCHEDULE = @as(u32, 32);
pub const NTDSCONN_OPT_RODC_TOPOLOGY = @as(u32, 64);
pub const NTDSCONN_KCC_NO_REASON = @as(u32, 0);
pub const NTDSCONN_KCC_GC_TOPOLOGY = @as(u32, 1);
pub const NTDSCONN_KCC_RING_TOPOLOGY = @as(u32, 2);
pub const NTDSCONN_KCC_MINIMIZE_HOPS_TOPOLOGY = @as(u32, 4);
pub const NTDSCONN_KCC_STALE_SERVERS_TOPOLOGY = @as(u32, 8);
pub const NTDSCONN_KCC_OSCILLATING_CONNECTION_TOPOLOGY = @as(u32, 16);
pub const NTDSCONN_KCC_INTERSITE_GC_TOPOLOGY = @as(u32, 32);
pub const NTDSCONN_KCC_INTERSITE_TOPOLOGY = @as(u32, 64);
pub const NTDSCONN_KCC_SERVER_FAILOVER_TOPOLOGY = @as(u32, 128);
pub const NTDSCONN_KCC_SITE_FAILOVER_TOPOLOGY = @as(u32, 256);
pub const NTDSCONN_KCC_REDUNDANT_SERVER_TOPOLOGY = @as(u32, 512);
pub const FRSCONN_PRIORITY_MASK = @as(u32, 1879048192);
pub const FRSCONN_MAX_PRIORITY = @as(u32, 8);
pub const NTDSCONN_OPT_IGNORE_SCHEDULE_MASK = @as(u32, 2147483648);
pub const NTDSSETTINGS_OPT_IS_AUTO_TOPOLOGY_DISABLED = @as(u32, 1);
pub const NTDSSETTINGS_OPT_IS_TOPL_CLEANUP_DISABLED = @as(u32, 2);
pub const NTDSSETTINGS_OPT_IS_TOPL_MIN_HOPS_DISABLED = @as(u32, 4);
pub const NTDSSETTINGS_OPT_IS_TOPL_DETECT_STALE_DISABLED = @as(u32, 8);
pub const NTDSSETTINGS_OPT_IS_INTER_SITE_AUTO_TOPOLOGY_DISABLED = @as(u32, 16);
pub const NTDSSETTINGS_OPT_IS_GROUP_CACHING_ENABLED = @as(u32, 32);
pub const NTDSSETTINGS_OPT_FORCE_KCC_WHISTLER_BEHAVIOR = @as(u32, 64);
pub const NTDSSETTINGS_OPT_FORCE_KCC_W2K_ELECTION = @as(u32, 128);
pub const NTDSSETTINGS_OPT_IS_RAND_BH_SELECTION_DISABLED = @as(u32, 256);
pub const NTDSSETTINGS_OPT_IS_SCHEDULE_HASHING_ENABLED = @as(u32, 512);
pub const NTDSSETTINGS_OPT_IS_REDUNDANT_SERVER_TOPOLOGY_ENABLED = @as(u32, 1024);
pub const NTDSSETTINGS_OPT_W2K3_IGNORE_SCHEDULES = @as(u32, 2048);
pub const NTDSSETTINGS_OPT_W2K3_BRIDGES_REQUIRED = @as(u32, 4096);
pub const NTDSSETTINGS_DEFAULT_SERVER_REDUNDANCY = @as(u32, 2);
pub const NTDSTRANSPORT_OPT_IGNORE_SCHEDULES = @as(u32, 1);
pub const NTDSTRANSPORT_OPT_BRIDGES_REQUIRED = @as(u32, 2);
pub const NTDSSITECONN_OPT_USE_NOTIFY = @as(u32, 1);
pub const NTDSSITECONN_OPT_TWOWAY_SYNC = @as(u32, 2);
pub const NTDSSITECONN_OPT_DISABLE_COMPRESSION = @as(u32, 4);
pub const NTDSSITELINK_OPT_USE_NOTIFY = @as(u32, 1);
pub const NTDSSITELINK_OPT_TWOWAY_SYNC = @as(u32, 2);
pub const NTDSSITELINK_OPT_DISABLE_COMPRESSION = @as(u32, 4);
pub const GUID_USERS_CONTAINER_A = "a9d1ca15768811d1aded00c04fd8d5cd";
pub const GUID_COMPUTRS_CONTAINER_A = "aa312825768811d1aded00c04fd8d5cd";
pub const GUID_SYSTEMS_CONTAINER_A = "ab1d30f3768811d1aded00c04fd8d5cd";
pub const GUID_DOMAIN_CONTROLLERS_CONTAINER_A = "a361b2ffffd211d1aa4b00c04fd7d83a";
pub const GUID_INFRASTRUCTURE_CONTAINER_A = "2fbac1870ade11d297c400c04fd8d5cd";
pub const GUID_DELETED_OBJECTS_CONTAINER_A = "18e2ea80684f11d2b9aa00c04f79f805";
pub const GUID_LOSTANDFOUND_CONTAINER_A = "ab8153b7768811d1aded00c04fd8d5cd";
pub const GUID_FOREIGNSECURITYPRINCIPALS_CONTAINER_A = "22b70c67d56e4efb91e9300fca3dc1aa";
pub const GUID_PROGRAM_DATA_CONTAINER_A = "09460c08ae1e4a4ea0f64aee7daa1e5a";
pub const GUID_MICROSOFT_PROGRAM_DATA_CONTAINER_A = "f4be92a4c777485e878e9421d53087db";
pub const GUID_NTDS_QUOTAS_CONTAINER_A = "6227f0af1fc2410d8e3bb10615bb5b0f";
pub const GUID_USERS_CONTAINER_W = "a9d1ca15768811d1aded00c04fd8d5cd";
pub const GUID_COMPUTRS_CONTAINER_W = "aa312825768811d1aded00c04fd8d5cd";
pub const GUID_SYSTEMS_CONTAINER_W = "ab1d30f3768811d1aded00c04fd8d5cd";
pub const GUID_DOMAIN_CONTROLLERS_CONTAINER_W = "a361b2ffffd211d1aa4b00c04fd7d83a";
pub const GUID_INFRASTRUCTURE_CONTAINER_W = "2fbac1870ade11d297c400c04fd8d5cd";
pub const GUID_DELETED_OBJECTS_CONTAINER_W = "18e2ea80684f11d2b9aa00c04f79f805";
pub const GUID_LOSTANDFOUND_CONTAINER_W = "ab8153b7768811d1aded00c04fd8d5cd";
pub const GUID_FOREIGNSECURITYPRINCIPALS_CONTAINER_W = "22b70c67d56e4efb91e9300fca3dc1aa";
pub const GUID_PROGRAM_DATA_CONTAINER_W = "09460c08ae1e4a4ea0f64aee7daa1e5a";
pub const GUID_MICROSOFT_PROGRAM_DATA_CONTAINER_W = "f4be92a4c777485e878e9421d53087db";
pub const GUID_NTDS_QUOTAS_CONTAINER_W = "6227f0af1fc2410d8e3bb10615bb5b0f";
pub const GUID_MANAGED_SERVICE_ACCOUNTS_CONTAINER_W = "1EB93889E40C45DF9F0C64D23BBB6237";
pub const GUID_KEYS_CONTAINER_W = "683A24E2E8164BD3AF86AC3C2CF3F981";
pub const DS_REPSYNCALL_NO_OPTIONS = @as(u32, 0);
pub const DS_REPSYNCALL_ABORT_IF_SERVER_UNAVAILABLE = @as(u32, 1);
pub const DS_REPSYNCALL_SYNC_ADJACENT_SERVERS_ONLY = @as(u32, 2);
pub const DS_REPSYNCALL_ID_SERVERS_BY_DN = @as(u32, 4);
pub const DS_REPSYNCALL_DO_NOT_SYNC = @as(u32, 8);
pub const DS_REPSYNCALL_SKIP_INITIAL_CHECK = @as(u32, 16);
pub const DS_REPSYNCALL_PUSH_CHANGES_OUTWARD = @as(u32, 32);
pub const DS_REPSYNCALL_CROSS_SITE_BOUNDARIES = @as(u32, 64);
pub const DS_LIST_DSA_OBJECT_FOR_SERVER = @as(u32, 0);
pub const DS_LIST_DNS_HOST_NAME_FOR_SERVER = @as(u32, 1);
pub const DS_LIST_ACCOUNT_OBJECT_FOR_SERVER = @as(u32, 2);
pub const DS_ROLE_SCHEMA_OWNER = @as(u32, 0);
pub const DS_ROLE_DOMAIN_OWNER = @as(u32, 1);
pub const DS_ROLE_PDC_OWNER = @as(u32, 2);
pub const DS_ROLE_RID_OWNER = @as(u32, 3);
pub const DS_ROLE_INFRASTRUCTURE_OWNER = @as(u32, 4);
pub const DS_SCHEMA_GUID_NOT_FOUND = @as(u32, 0);
pub const DS_SCHEMA_GUID_ATTR = @as(u32, 1);
pub const DS_SCHEMA_GUID_ATTR_SET = @as(u32, 2);
pub const DS_SCHEMA_GUID_CLASS = @as(u32, 3);
pub const DS_SCHEMA_GUID_CONTROL_RIGHT = @as(u32, 4);
pub const DS_KCC_FLAG_ASYNC_OP = @as(u32, 1);
pub const DS_KCC_FLAG_DAMPED = @as(u32, 2);
pub const DS_EXIST_ADVISORY_MODE = @as(u32, 1);
pub const DS_REPL_INFO_FLAG_IMPROVE_LINKED_ATTRS = @as(u32, 1);
pub const DS_REPL_NBR_WRITEABLE = @as(u32, 16);
pub const DS_REPL_NBR_SYNC_ON_STARTUP = @as(u32, 32);
pub const DS_REPL_NBR_DO_SCHEDULED_SYNCS = @as(u32, 64);
pub const DS_REPL_NBR_USE_ASYNC_INTERSITE_TRANSPORT = @as(u32, 128);
pub const DS_REPL_NBR_TWO_WAY_SYNC = @as(u32, 512);
pub const DS_REPL_NBR_NONGC_RO_REPLICA = @as(u32, 1024);
pub const DS_REPL_NBR_RETURN_OBJECT_PARENTS = @as(u32, 2048);
pub const DS_REPL_NBR_SELECT_SECRETS = @as(u32, 4096);
pub const DS_REPL_NBR_FULL_SYNC_IN_PROGRESS = @as(u32, 65536);
pub const DS_REPL_NBR_FULL_SYNC_NEXT_PACKET = @as(u32, 131072);
pub const DS_REPL_NBR_GCSPN = @as(u32, 1048576);
pub const DS_REPL_NBR_NEVER_SYNCED = @as(u32, 2097152);
pub const DS_REPL_NBR_PREEMPTED = @as(u32, 16777216);
pub const DS_REPL_NBR_IGNORE_CHANGE_NOTIFICATIONS = @as(u32, 67108864);
pub const DS_REPL_NBR_DISABLE_SCHEDULED_SYNC = @as(u32, 134217728);
pub const DS_REPL_NBR_COMPRESS_CHANGES = @as(u32, 268435456);
pub const DS_REPL_NBR_NO_CHANGE_NOTIFICATIONS = @as(u32, 536870912);
pub const DS_REPL_NBR_PARTIAL_ATTRIBUTE_SET = @as(u32, 1073741824);
pub const ADAM_SCP_SITE_NAME_STRING = "site:";
pub const ADAM_SCP_SITE_NAME_STRING_W = "site:";
pub const ADAM_SCP_PARTITION_STRING = "partition:";
pub const ADAM_SCP_PARTITION_STRING_W = "partition:";
pub const ADAM_SCP_INSTANCE_NAME_STRING = "instance:";
pub const ADAM_SCP_INSTANCE_NAME_STRING_W = "instance:";
pub const ADAM_SCP_FSMO_STRING = "fsmo:";
pub const ADAM_SCP_FSMO_STRING_W = "fsmo:";
pub const ADAM_SCP_FSMO_NAMING_STRING = "naming";
pub const ADAM_SCP_FSMO_NAMING_STRING_W = "naming";
pub const ADAM_SCP_FSMO_SCHEMA_STRING = "schema";
pub const ADAM_SCP_FSMO_SCHEMA_STRING_W = "schema";
pub const ADAM_REPL_AUTHENTICATION_MODE_NEGOTIATE_PASS_THROUGH = @as(u32, 0);
pub const ADAM_REPL_AUTHENTICATION_MODE_NEGOTIATE = @as(u32, 1);
pub const ADAM_REPL_AUTHENTICATION_MODE_MUTUAL_AUTH_REQUIRED = @as(u32, 2);
pub const FLAG_FOREST_OPTIONAL_FEATURE = @as(u32, 1);
pub const FLAG_DOMAIN_OPTIONAL_FEATURE = @as(u32, 2);
pub const FLAG_DISABLABLE_OPTIONAL_FEATURE = @as(u32, 4);
pub const FLAG_SERVER_OPTIONAL_FEATURE = @as(u32, 8);
pub const GUID_RECYCLE_BIN_OPTIONAL_FEATURE_A = "d8dc6d76d0ac5e44f3b9a7f9b6744f2a";
pub const GUID_RECYCLE_BIN_OPTIONAL_FEATURE_W = "d8dc6d76d0ac5e44f3b9a7f9b6744f2a";
pub const GUID_PRIVILEGED_ACCESS_MANAGEMENT_OPTIONAL_FEATURE_A = "73e843ece8cc4046b4ab07ffe4ab5bcd";
pub const GUID_PRIVILEGED_ACCESS_MANAGEMENT_OPTIONAL_FEATURE_W = "73e843ece8cc4046b4ab07ffe4ab5bcd";
pub const CFSTR_DSOP_DS_SELECTION_LIST = "CFSTR_DSOP_DS_SELECTION_LIST";
pub const DSOP_SCOPE_TYPE_TARGET_COMPUTER = @as(u32, 1);
pub const DSOP_SCOPE_TYPE_UPLEVEL_JOINED_DOMAIN = @as(u32, 2);
pub const DSOP_SCOPE_TYPE_DOWNLEVEL_JOINED_DOMAIN = @as(u32, 4);
pub const DSOP_SCOPE_TYPE_ENTERPRISE_DOMAIN = @as(u32, 8);
pub const DSOP_SCOPE_TYPE_GLOBAL_CATALOG = @as(u32, 16);
pub const DSOP_SCOPE_TYPE_EXTERNAL_UPLEVEL_DOMAIN = @as(u32, 32);
pub const DSOP_SCOPE_TYPE_EXTERNAL_DOWNLEVEL_DOMAIN = @as(u32, 64);
pub const DSOP_SCOPE_TYPE_WORKGROUP = @as(u32, 128);
pub const DSOP_SCOPE_TYPE_USER_ENTERED_UPLEVEL_SCOPE = @as(u32, 256);
pub const DSOP_SCOPE_TYPE_USER_ENTERED_DOWNLEVEL_SCOPE = @as(u32, 512);
pub const DSOP_SCOPE_FLAG_STARTING_SCOPE = @as(u32, 1);
pub const DSOP_SCOPE_FLAG_WANT_PROVIDER_WINNT = @as(u32, 2);
pub const DSOP_SCOPE_FLAG_WANT_PROVIDER_LDAP = @as(u32, 4);
pub const DSOP_SCOPE_FLAG_WANT_PROVIDER_GC = @as(u32, 8);
pub const DSOP_SCOPE_FLAG_WANT_SID_PATH = @as(u32, 16);
pub const DSOP_SCOPE_FLAG_WANT_DOWNLEVEL_BUILTIN_PATH = @as(u32, 32);
pub const DSOP_SCOPE_FLAG_DEFAULT_FILTER_USERS = @as(u32, 64);
pub const DSOP_SCOPE_FLAG_DEFAULT_FILTER_GROUPS = @as(u32, 128);
pub const DSOP_SCOPE_FLAG_DEFAULT_FILTER_COMPUTERS = @as(u32, 256);
pub const DSOP_SCOPE_FLAG_DEFAULT_FILTER_CONTACTS = @as(u32, 512);
pub const DSOP_SCOPE_FLAG_DEFAULT_FILTER_SERVICE_ACCOUNTS = @as(u32, 1024);
pub const DSOP_SCOPE_FLAG_DEFAULT_FILTER_PASSWORDSETTINGS_OBJECTS = @as(u32, 2048);
pub const DSOP_FILTER_INCLUDE_ADVANCED_VIEW = @as(u32, 1);
pub const DSOP_FILTER_USERS = @as(u32, 2);
pub const DSOP_FILTER_BUILTIN_GROUPS = @as(u32, 4);
pub const DSOP_FILTER_WELL_KNOWN_PRINCIPALS = @as(u32, 8);
pub const DSOP_FILTER_UNIVERSAL_GROUPS_DL = @as(u32, 16);
pub const DSOP_FILTER_UNIVERSAL_GROUPS_SE = @as(u32, 32);
pub const DSOP_FILTER_GLOBAL_GROUPS_DL = @as(u32, 64);
pub const DSOP_FILTER_GLOBAL_GROUPS_SE = @as(u32, 128);
pub const DSOP_FILTER_DOMAIN_LOCAL_GROUPS_DL = @as(u32, 256);
pub const DSOP_FILTER_DOMAIN_LOCAL_GROUPS_SE = @as(u32, 512);
pub const DSOP_FILTER_CONTACTS = @as(u32, 1024);
pub const DSOP_FILTER_COMPUTERS = @as(u32, 2048);
pub const DSOP_FILTER_SERVICE_ACCOUNTS = @as(u32, 4096);
pub const DSOP_FILTER_PASSWORDSETTINGS_OBJECTS = @as(u32, 8192);
pub const DSOP_DOWNLEVEL_FILTER_USERS = @as(u32, 2147483649);
pub const DSOP_DOWNLEVEL_FILTER_LOCAL_GROUPS = @as(u32, 2147483650);
pub const DSOP_DOWNLEVEL_FILTER_GLOBAL_GROUPS = @as(u32, 2147483652);
pub const DSOP_DOWNLEVEL_FILTER_COMPUTERS = @as(u32, 2147483656);
pub const DSOP_DOWNLEVEL_FILTER_WORLD = @as(u32, 2147483664);
pub const DSOP_DOWNLEVEL_FILTER_AUTHENTICATED_USER = @as(u32, 2147483680);
pub const DSOP_DOWNLEVEL_FILTER_ANONYMOUS = @as(u32, 2147483712);
pub const DSOP_DOWNLEVEL_FILTER_BATCH = @as(u32, 2147483776);
pub const DSOP_DOWNLEVEL_FILTER_CREATOR_OWNER = @as(u32, 2147483904);
pub const DSOP_DOWNLEVEL_FILTER_CREATOR_GROUP = @as(u32, 2147484160);
pub const DSOP_DOWNLEVEL_FILTER_DIALUP = @as(u32, 2147484672);
pub const DSOP_DOWNLEVEL_FILTER_INTERACTIVE = @as(u32, 2147485696);
pub const DSOP_DOWNLEVEL_FILTER_NETWORK = @as(u32, 2147487744);
pub const DSOP_DOWNLEVEL_FILTER_SERVICE = @as(u32, 2147491840);
pub const DSOP_DOWNLEVEL_FILTER_SYSTEM = @as(u32, 2147500032);
pub const DSOP_DOWNLEVEL_FILTER_EXCLUDE_BUILTIN_GROUPS = @as(u32, 2147516416);
pub const DSOP_DOWNLEVEL_FILTER_TERMINAL_SERVER = @as(u32, 2147549184);
pub const DSOP_DOWNLEVEL_FILTER_ALL_WELLKNOWN_SIDS = @as(u32, 2147614720);
pub const DSOP_DOWNLEVEL_FILTER_LOCAL_SERVICE = @as(u32, 2147745792);
pub const DSOP_DOWNLEVEL_FILTER_NETWORK_SERVICE = @as(u32, 2148007936);
pub const DSOP_DOWNLEVEL_FILTER_REMOTE_LOGON = @as(u32, 2148532224);
pub const DSOP_DOWNLEVEL_FILTER_INTERNET_USER = @as(u32, 2149580800);
pub const DSOP_DOWNLEVEL_FILTER_OWNER_RIGHTS = @as(u32, 2151677952);
pub const DSOP_DOWNLEVEL_FILTER_SERVICES = @as(u32, 2155872256);
pub const DSOP_DOWNLEVEL_FILTER_LOCAL_LOGON = @as(u32, 2164260864);
pub const DSOP_DOWNLEVEL_FILTER_THIS_ORG_CERT = @as(u32, 2181038080);
pub const DSOP_DOWNLEVEL_FILTER_IIS_APP_POOL = @as(u32, 2214592512);
pub const DSOP_DOWNLEVEL_FILTER_ALL_APP_PACKAGES = @as(u32, 2281701376);
pub const DSOP_DOWNLEVEL_FILTER_LOCAL_ACCOUNTS = @as(u32, 2415919104);
pub const DSOP_FLAG_MULTISELECT = @as(u32, 1);
pub const DSOP_FLAG_SKIP_TARGET_COMPUTER_DC_CHECK = @as(u32, 2);
pub const SCHEDULE_INTERVAL = @as(u32, 0);
pub const SCHEDULE_BANDWIDTH = @as(u32, 1);
pub const SCHEDULE_PRIORITY = @as(u32, 2);
pub const FACILITY_NTDSB = @as(u32, 2048);
pub const FACILITY_BACKUP = @as(u32, 2047);
pub const FACILITY_SYSTEM = @as(u32, 0);
pub const STATUS_SEVERITY_SUCCESS = @as(u32, 0);
pub const STATUS_SEVERITY_INFORMATIONAL = @as(u32, 1);
pub const STATUS_SEVERITY_WARNING = @as(u32, 2);
pub const STATUS_SEVERITY_ERROR = @as(u32, 3);
pub const hrNone = @import("../zig.zig").typedConst(HRESULT, @as(i32, 0));
pub const hrNyi = @import("../zig.zig").typedConst(HRESULT, @as(i32, -1073741823));
pub const hrInvalidParam = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589631));
pub const hrError = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589630));
pub const hrInvalidHandle = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589629));
pub const hrRestoreInProgress = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589628));
pub const hrAlreadyOpen = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589627));
pub const hrInvalidRecips = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589626));
pub const hrCouldNotConnect = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589625));
pub const hrRestoreMapExists = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589624));
pub const hrIncrementalBackupDisabled = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589623));
pub const hrLogFileNotFound = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589622));
pub const hrCircularLogging = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589621));
pub const hrNoFullRestore = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589620));
pub const hrCommunicationError = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589619));
pub const hrFullBackupNotTaken = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589618));
pub const hrMissingExpiryToken = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589617));
pub const hrUnknownExpiryTokenFormat = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589616));
pub const hrContentsExpired = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939589615));
pub const hrFileClose = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523994));
pub const hrOutOfThreads = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523993));
pub const hrTooManyIO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523991));
pub const hrBFNotSynchronous = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013265720));
pub const hrBFPageNotFound = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013265719));
pub const hrBFInUse = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523894));
pub const hrPMRecDeleted = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523794));
pub const hrRemainingVersions = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013265599));
pub const hrFLDKeyTooBig = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013265520));
pub const hrFLDTooManySegments = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523695));
pub const hrFLDNullKey = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013265518));
pub const hrLogFileCorrupt = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523595));
pub const hrNoBackupDirectory = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523593));
pub const hrBackupDirectoryNotEmpty = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523592));
pub const hrBackupInProgress = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523591));
pub const hrMissingPreviousLogFile = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523587));
pub const hrLogWriteFail = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523586));
pub const hrBadLogVersion = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523582));
pub const hrInvalidLogSequence = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523581));
pub const hrLoggingDisabled = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523580));
pub const hrLogBufferTooSmall = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523579));
pub const hrLogSequenceEnd = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523577));
pub const hrNoBackup = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523576));
pub const hrInvalidBackupSequence = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523575));
pub const hrBackupNotAllowedYet = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523573));
pub const hrDeleteBackupFileFail = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523572));
pub const hrMakeBackupDirectoryFail = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523571));
pub const hrInvalidBackup = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523570));
pub const hrRecoveredWithErrors = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523569));
pub const hrMissingLogFile = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523568));
pub const hrLogDiskFull = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523567));
pub const hrBadLogSignature = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523566));
pub const hrBadDbSignature = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523565));
pub const hrBadCheckpointSignature = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523564));
pub const hrCheckpointCorrupt = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523563));
pub const hrDatabaseInconsistent = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523546));
pub const hrConsistentTimeMismatch = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523545));
pub const hrPatchFileMismatch = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523544));
pub const hrRestoreLogTooLow = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523543));
pub const hrRestoreLogTooHigh = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523542));
pub const hrGivenLogFileHasBadSignature = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523541));
pub const hrGivenLogFileIsNotContiguous = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523540));
pub const hrMissingRestoreLogFiles = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523539));
pub const hrExistingLogFileHasBadSignature = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013265362));
pub const hrExistingLogFileIsNotContiguous = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013265361));
pub const hrMissingFullBackup = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523536));
pub const hrBadBackupDatabaseSize = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523535));
pub const hrTermInProgress = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523096));
pub const hrFeatureNotAvailable = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523095));
pub const hrInvalidName = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523094));
pub const hrInvalidParameter = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523093));
pub const hrColumnNull = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264916));
pub const hrBufferTruncated = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264914));
pub const hrDatabaseAttached = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264913));
pub const hrInvalidDatabaseId = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523086));
pub const hrOutOfMemory = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523085));
pub const hrOutOfDatabaseSpace = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523084));
pub const hrOutOfCursors = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523083));
pub const hrOutOfBuffers = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523082));
pub const hrTooManyIndexes = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523081));
pub const hrTooManyKeys = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523080));
pub const hrRecordDeleted = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523079));
pub const hrReadVerifyFailure = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523078));
pub const hrOutOfFileHandles = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523076));
pub const hrDiskIO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523074));
pub const hrInvalidPath = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523073));
pub const hrRecordTooBig = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523070));
pub const hrTooManyOpenDatabases = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523069));
pub const hrInvalidDatabase = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523068));
pub const hrNotInitialized = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523067));
pub const hrAlreadyInitialized = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523066));
pub const hrFileAccessDenied = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523064));
pub const hrBufferTooSmall = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523058));
pub const hrSeekNotEqual = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264881));
pub const hrTooManyColumns = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523056));
pub const hrContainerNotEmpty = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523053));
pub const hrInvalidFilename = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523052));
pub const hrInvalidBookmark = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523051));
pub const hrColumnInUse = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523050));
pub const hrInvalidBufferSize = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523049));
pub const hrColumnNotUpdatable = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523048));
pub const hrIndexInUse = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523045));
pub const hrNullKeyDisallowed = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523043));
pub const hrNotInTransaction = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523042));
pub const hrNoIdleActivity = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264862));
pub const hrTooManyActiveUsers = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523037));
pub const hrInvalidCountry = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523035));
pub const hrInvalidLanguageId = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523034));
pub const hrInvalidCodePage = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523033));
pub const hrNoWriteLock = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264853));
pub const hrColumnSetNull = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264852));
pub const hrVersionStoreOutOfMemory = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523027));
pub const hrCurrencyStackOutOfMemory = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939523026));
pub const hrOutOfSessions = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522995));
pub const hrWriteConflict = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522994));
pub const hrTransTooDeep = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522993));
pub const hrInvalidSesid = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522992));
pub const hrSessionWriteConflict = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522989));
pub const hrInTransaction = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522988));
pub const hrDatabaseDuplicate = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522895));
pub const hrDatabaseInUse = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522894));
pub const hrDatabaseNotFound = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522893));
pub const hrDatabaseInvalidName = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522892));
pub const hrDatabaseInvalidPages = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522891));
pub const hrDatabaseCorrupted = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522890));
pub const hrDatabaseLocked = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522889));
pub const hrTableEmpty = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264619));
pub const hrTableLocked = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522794));
pub const hrTableDuplicate = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522793));
pub const hrTableInUse = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522792));
pub const hrObjectNotFound = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522791));
pub const hrCannotRename = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522790));
pub const hrDensityInvalid = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522789));
pub const hrTableNotEmpty = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522788));
pub const hrInvalidTableId = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522786));
pub const hrTooManyOpenTables = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522785));
pub const hrIllegalOperation = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522784));
pub const hrObjectDuplicate = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522782));
pub const hrInvalidObject = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522780));
pub const hrIndexCantBuild = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522695));
pub const hrIndexHasPrimary = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522694));
pub const hrIndexDuplicate = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522693));
pub const hrIndexNotFound = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522692));
pub const hrIndexMustStay = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522691));
pub const hrIndexInvalidDef = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522690));
pub const hrIndexHasClustered = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522688));
pub const hrCreateIndexFailed = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264511));
pub const hrTooManyOpenIndexes = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522686));
pub const hrColumnLong = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522595));
pub const hrColumnDoesNotFit = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522593));
pub const hrNullInvalid = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522592));
pub const hrColumnIndexed = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522591));
pub const hrColumnTooBig = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522590));
pub const hrColumnNotFound = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522589));
pub const hrColumnDuplicate = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522588));
pub const hrColumn2ndSysMaint = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522586));
pub const hrInvalidColumnType = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522585));
pub const hrColumnMaxTruncated = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264408));
pub const hrColumnCannotIndex = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522583));
pub const hrTaggedNotNULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522582));
pub const hrNoCurrentIndex = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522581));
pub const hrKeyIsMade = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522580));
pub const hrBadColumnId = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522579));
pub const hrBadItagSequence = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522578));
pub const hrCannotBeTagged = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522575));
pub const hrRecordNotFound = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522495));
pub const hrNoCurrentRecord = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522493));
pub const hrRecordClusteredChanged = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522492));
pub const hrKeyDuplicate = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522491));
pub const hrAlreadyPrepared = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522489));
pub const hrKeyNotMade = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522488));
pub const hrUpdateNotPrepared = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522487));
pub const hrwrnDataHasChanged = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264310));
pub const hrerrDataHasChanged = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522485));
pub const hrKeyChanged = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264302));
pub const hrTooManySorts = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522395));
pub const hrInvalidOnSort = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522394));
pub const hrTempFileOpenError = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522293));
pub const hrTooManyAttachedDatabases = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522291));
pub const hrDiskFull = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522288));
pub const hrPermissionDenied = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522287));
pub const hrFileNotFound = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522285));
pub const hrFileOpenReadOnly = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2013264107));
pub const hrAfterInitialization = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522246));
pub const hrLogCorrupted = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522244));
pub const hrInvalidOperation = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522190));
pub const hrAccessDenied = @import("../zig.zig").typedConst(HRESULT, @as(i32, -939522189));
pub const CLSID_DsObjectPicker = Guid.initString("17d6ccd8-3b7b-11d2-b9e0-00c04fd8dbf7");

//--------------------------------------------------------------------------------
// Section: Types (264)
//--------------------------------------------------------------------------------
pub const CQFORM = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    clsid: Guid,
    hIcon: ?HICON,
    pszTitle: ?[*:0]const u16,
};

pub const LPCQADDFORMSPROC = *const fn (
    l_param: LPARAM,
    p_form: ?*CQFORM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPCQADDPAGESPROC = *const fn (
    l_param: LPARAM,
    clsid_form: ?*const Guid,
    p_page: ?*CQPAGE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const LPCQPAGEPROC = *const fn (
    p_page: ?*CQPAGE,
    hwnd: ?HWND,
    u_msg: u32,
    w_param: WPARAM,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CQPAGE = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    pPageProc: ?LPCQPAGEPROC,
    hInstance: ?HINSTANCE,
    idPageName: i32,
    idPageTemplate: i32,
    pDlgProc: ?DLGPROC,
    lParam: LPARAM,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IQueryForm_Value = Guid.initString("8cfcee30-39bd-11d0-b8d1-00a024ab2dbb");
pub const IID_IQueryForm = &IID_IQueryForm_Value;
pub const IQueryForm = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IQueryForm,
            hk_form: ?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddForms: *const fn (
            self: *const IQueryForm,
            p_add_forms_proc: ?LPCQADDFORMSPROC,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPages: *const fn (
            self: *const IQueryForm,
            p_add_pages_proc: ?LPCQADDPAGESPROC,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, hk_form_: ?HKEY) HRESULT {
                return @as(*const IQueryForm.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IQueryForm, @ptrCast(self)), hk_form_);
            }
            pub inline fn addForms(self: *const T, p_add_forms_proc_: ?LPCQADDFORMSPROC, l_param_: LPARAM) HRESULT {
                return @as(*const IQueryForm.VTable, @ptrCast(self.vtable)).AddForms(@as(*const IQueryForm, @ptrCast(self)), p_add_forms_proc_, l_param_);
            }
            pub inline fn addPages(self: *const T, p_add_pages_proc_: ?LPCQADDPAGESPROC, l_param_: LPARAM) HRESULT {
                return @as(*const IQueryForm.VTable, @ptrCast(self.vtable)).AddPages(@as(*const IQueryForm, @ptrCast(self)), p_add_pages_proc_, l_param_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPersistQuery_Value = Guid.initString("1a3114b8-a62e-11d0-a6c5-00a0c906af45");
pub const IID_IPersistQuery = &IID_IPersistQuery_Value;
pub const IPersistQuery = extern struct {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        WriteString: *const fn (
            self: *const IPersistQuery,
            p_section: ?[*:0]const u16,
            p_value_name: ?[*:0]const u16,
            p_value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadString: *const fn (
            self: *const IPersistQuery,
            p_section: ?[*:0]const u16,
            p_value_name: ?[*:0]const u16,
            p_buffer: ?PWSTR,
            cch_buffer: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteInt: *const fn (
            self: *const IPersistQuery,
            p_section: ?[*:0]const u16,
            p_value_name: ?[*:0]const u16,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadInt: *const fn (
            self: *const IPersistQuery,
            p_section: ?[*:0]const u16,
            p_value_name: ?[*:0]const u16,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteStruct: *const fn (
            self: *const IPersistQuery,
            p_section: ?[*:0]const u16,
            p_value_name: ?[*:0]const u16,
            p_struct: ?*anyopaque,
            cb_struct: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadStruct: *const fn (
            self: *const IPersistQuery,
            p_section: ?[*:0]const u16,
            p_value_name: ?[*:0]const u16,
            p_struct: ?*anyopaque,
            cb_struct: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IPersistQuery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPersist.MethodMixin(T);
            pub inline fn writeString(self: *const T, p_section_: ?[*:0]const u16, p_value_name_: ?[*:0]const u16, p_value_: ?[*:0]const u16) HRESULT {
                return @as(*const IPersistQuery.VTable, @ptrCast(self.vtable)).WriteString(@as(*const IPersistQuery, @ptrCast(self)), p_section_, p_value_name_, p_value_);
            }
            pub inline fn readString(self: *const T, p_section_: ?[*:0]const u16, p_value_name_: ?[*:0]const u16, p_buffer_: ?PWSTR, cch_buffer_: i32) HRESULT {
                return @as(*const IPersistQuery.VTable, @ptrCast(self.vtable)).ReadString(@as(*const IPersistQuery, @ptrCast(self)), p_section_, p_value_name_, p_buffer_, cch_buffer_);
            }
            pub inline fn writeInt(self: *const T, p_section_: ?[*:0]const u16, p_value_name_: ?[*:0]const u16, value_: i32) HRESULT {
                return @as(*const IPersistQuery.VTable, @ptrCast(self.vtable)).WriteInt(@as(*const IPersistQuery, @ptrCast(self)), p_section_, p_value_name_, value_);
            }
            pub inline fn readInt(self: *const T, p_section_: ?[*:0]const u16, p_value_name_: ?[*:0]const u16, p_value_: ?*i32) HRESULT {
                return @as(*const IPersistQuery.VTable, @ptrCast(self.vtable)).ReadInt(@as(*const IPersistQuery, @ptrCast(self)), p_section_, p_value_name_, p_value_);
            }
            pub inline fn writeStruct(self: *const T, p_section_: ?[*:0]const u16, p_value_name_: ?[*:0]const u16, p_struct_: ?*anyopaque, cb_struct_: u32) HRESULT {
                return @as(*const IPersistQuery.VTable, @ptrCast(self.vtable)).WriteStruct(@as(*const IPersistQuery, @ptrCast(self)), p_section_, p_value_name_, p_struct_, cb_struct_);
            }
            pub inline fn readStruct(self: *const T, p_section_: ?[*:0]const u16, p_value_name_: ?[*:0]const u16, p_struct_: ?*anyopaque, cb_struct_: u32) HRESULT {
                return @as(*const IPersistQuery.VTable, @ptrCast(self.vtable)).ReadStruct(@as(*const IPersistQuery, @ptrCast(self)), p_section_, p_value_name_, p_struct_, cb_struct_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IPersistQuery.VTable, @ptrCast(self.vtable)).Clear(@as(*const IPersistQuery, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OPENQUERYWINDOW = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    clsidHandler: Guid,
    pHandlerParameters: ?*anyopaque,
    clsidDefaultForm: Guid,
    pPersistQuery: ?*IPersistQuery,
    Anonymous: extern union {
        pFormParameters: ?*anyopaque,
        ppbFormParameters: ?*IPropertyBag,
    },
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICommonQuery_Value = Guid.initString("ab50dec0-6f1d-11d0-a1c4-00aa00c16e65");
pub const IID_ICommonQuery = &IID_ICommonQuery_Value;
pub const ICommonQuery = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OpenQueryWindow: *const fn (
            self: *const ICommonQuery,
            hwnd_parent: ?HWND,
            p_query_wnd: ?*OPENQUERYWINDOW,
            pp_data_object: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn openQueryWindow(self: *const T, hwnd_parent_: ?HWND, p_query_wnd_: ?*OPENQUERYWINDOW, pp_data_object_: ?*?*IDataObject) HRESULT {
                return @as(*const ICommonQuery.VTable, @ptrCast(self.vtable)).OpenQueryWindow(@as(*const ICommonQuery, @ptrCast(self)), hwnd_parent_, p_query_wnd_, pp_data_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_PropertyEntry_Value = Guid.initString("72d3edc2-a4c4-11d0-8533-00c04fd8d503");
pub const CLSID_PropertyEntry = &CLSID_PropertyEntry_Value;

const CLSID_PropertyValue_Value = Guid.initString("7b9e38b0-a97c-11d0-8534-00c04fd8d503");
pub const CLSID_PropertyValue = &CLSID_PropertyValue_Value;

const CLSID_AccessControlEntry_Value = Guid.initString("b75ac000-9bdd-11d0-852c-00c04fd8d503");
pub const CLSID_AccessControlEntry = &CLSID_AccessControlEntry_Value;

const CLSID_AccessControlList_Value = Guid.initString("b85ea052-9bdd-11d0-852c-00c04fd8d503");
pub const CLSID_AccessControlList = &CLSID_AccessControlList_Value;

const CLSID_SecurityDescriptor_Value = Guid.initString("b958f73c-9bdd-11d0-852c-00c04fd8d503");
pub const CLSID_SecurityDescriptor = &CLSID_SecurityDescriptor_Value;

const CLSID_LargeInteger_Value = Guid.initString("927971f5-0939-11d1-8be1-00c04fd8d503");
pub const CLSID_LargeInteger = &CLSID_LargeInteger_Value;

const CLSID_NameTranslate_Value = Guid.initString("274fae1f-3626-11d1-a3a4-00c04fb950dc");
pub const CLSID_NameTranslate = &CLSID_NameTranslate_Value;

const CLSID_CaseIgnoreList_Value = Guid.initString("15f88a55-4680-11d1-a3b4-00c04fb950dc");
pub const CLSID_CaseIgnoreList = &CLSID_CaseIgnoreList_Value;

const CLSID_FaxNumber_Value = Guid.initString("a5062215-4681-11d1-a3b4-00c04fb950dc");
pub const CLSID_FaxNumber = &CLSID_FaxNumber_Value;

const CLSID_NetAddress_Value = Guid.initString("b0b71247-4080-11d1-a3ac-00c04fb950dc");
pub const CLSID_NetAddress = &CLSID_NetAddress_Value;

const CLSID_OctetList_Value = Guid.initString("1241400f-4680-11d1-a3b4-00c04fb950dc");
pub const CLSID_OctetList = &CLSID_OctetList_Value;

const CLSID_Email_Value = Guid.initString("8f92a857-478e-11d1-a3b4-00c04fb950dc");
pub const CLSID_Email = &CLSID_Email_Value;

const CLSID_Path_Value = Guid.initString("b2538919-4080-11d1-a3ac-00c04fb950dc");
pub const CLSID_Path = &CLSID_Path_Value;

const CLSID_ReplicaPointer_Value = Guid.initString("f5d1badf-4080-11d1-a3ac-00c04fb950dc");
pub const CLSID_ReplicaPointer = &CLSID_ReplicaPointer_Value;

const CLSID_Timestamp_Value = Guid.initString("b2bed2eb-4080-11d1-a3ac-00c04fb950dc");
pub const CLSID_Timestamp = &CLSID_Timestamp_Value;

const CLSID_PostalAddress_Value = Guid.initString("0a75afcd-4680-11d1-a3b4-00c04fb950dc");
pub const CLSID_PostalAddress = &CLSID_PostalAddress_Value;

const CLSID_BackLink_Value = Guid.initString("fcbf906f-4080-11d1-a3ac-00c04fb950dc");
pub const CLSID_BackLink = &CLSID_BackLink_Value;

const CLSID_TypedName_Value = Guid.initString("b33143cb-4080-11d1-a3ac-00c04fb950dc");
pub const CLSID_TypedName = &CLSID_TypedName_Value;

const CLSID_Hold_Value = Guid.initString("b3ad3e13-4080-11d1-a3ac-00c04fb950dc");
pub const CLSID_Hold = &CLSID_Hold_Value;

const CLSID_Pathname_Value = Guid.initString("080d0d78-f421-11d0-a36e-00c04fb950dc");
pub const CLSID_Pathname = &CLSID_Pathname_Value;

const CLSID_ADSystemInfo_Value = Guid.initString("50b6327f-afd1-11d2-9cb9-0000f87a369e");
pub const CLSID_ADSystemInfo = &CLSID_ADSystemInfo_Value;

const CLSID_WinNTSystemInfo_Value = Guid.initString("66182ec4-afd1-11d2-9cb9-0000f87a369e");
pub const CLSID_WinNTSystemInfo = &CLSID_WinNTSystemInfo_Value;

const CLSID_DNWithBinary_Value = Guid.initString("7e99c0a3-f935-11d2-ba96-00c04fb6d0d1");
pub const CLSID_DNWithBinary = &CLSID_DNWithBinary_Value;

const CLSID_DNWithString_Value = Guid.initString("334857cc-f934-11d2-ba96-00c04fb6d0d1");
pub const CLSID_DNWithString = &CLSID_DNWithString_Value;

const CLSID_ADsSecurityUtility_Value = Guid.initString("f270c64a-ffb8-4ae4-85fe-3a75e5347966");
pub const CLSID_ADsSecurityUtility = &CLSID_ADsSecurityUtility_Value;

pub const ADSTYPEENUM = enum(i32) {
    INVALID = 0,
    DN_STRING = 1,
    CASE_EXACT_STRING = 2,
    CASE_IGNORE_STRING = 3,
    PRINTABLE_STRING = 4,
    NUMERIC_STRING = 5,
    BOOLEAN = 6,
    INTEGER = 7,
    OCTET_STRING = 8,
    UTC_TIME = 9,
    LARGE_INTEGER = 10,
    PROV_SPECIFIC = 11,
    OBJECT_CLASS = 12,
    CASEIGNORE_LIST = 13,
    OCTET_LIST = 14,
    PATH = 15,
    POSTALADDRESS = 16,
    TIMESTAMP = 17,
    BACKLINK = 18,
    TYPEDNAME = 19,
    HOLD = 20,
    NETADDRESS = 21,
    REPLICAPOINTER = 22,
    FAXNUMBER = 23,
    EMAIL = 24,
    NT_SECURITY_DESCRIPTOR = 25,
    UNKNOWN = 26,
    DN_WITH_BINARY = 27,
    DN_WITH_STRING = 28,
};
pub const ADSTYPE_INVALID = ADSTYPEENUM.INVALID;
pub const ADSTYPE_DN_STRING = ADSTYPEENUM.DN_STRING;
pub const ADSTYPE_CASE_EXACT_STRING = ADSTYPEENUM.CASE_EXACT_STRING;
pub const ADSTYPE_CASE_IGNORE_STRING = ADSTYPEENUM.CASE_IGNORE_STRING;
pub const ADSTYPE_PRINTABLE_STRING = ADSTYPEENUM.PRINTABLE_STRING;
pub const ADSTYPE_NUMERIC_STRING = ADSTYPEENUM.NUMERIC_STRING;
pub const ADSTYPE_BOOLEAN = ADSTYPEENUM.BOOLEAN;
pub const ADSTYPE_INTEGER = ADSTYPEENUM.INTEGER;
pub const ADSTYPE_OCTET_STRING = ADSTYPEENUM.OCTET_STRING;
pub const ADSTYPE_UTC_TIME = ADSTYPEENUM.UTC_TIME;
pub const ADSTYPE_LARGE_INTEGER = ADSTYPEENUM.LARGE_INTEGER;
pub const ADSTYPE_PROV_SPECIFIC = ADSTYPEENUM.PROV_SPECIFIC;
pub const ADSTYPE_OBJECT_CLASS = ADSTYPEENUM.OBJECT_CLASS;
pub const ADSTYPE_CASEIGNORE_LIST = ADSTYPEENUM.CASEIGNORE_LIST;
pub const ADSTYPE_OCTET_LIST = ADSTYPEENUM.OCTET_LIST;
pub const ADSTYPE_PATH = ADSTYPEENUM.PATH;
pub const ADSTYPE_POSTALADDRESS = ADSTYPEENUM.POSTALADDRESS;
pub const ADSTYPE_TIMESTAMP = ADSTYPEENUM.TIMESTAMP;
pub const ADSTYPE_BACKLINK = ADSTYPEENUM.BACKLINK;
pub const ADSTYPE_TYPEDNAME = ADSTYPEENUM.TYPEDNAME;
pub const ADSTYPE_HOLD = ADSTYPEENUM.HOLD;
pub const ADSTYPE_NETADDRESS = ADSTYPEENUM.NETADDRESS;
pub const ADSTYPE_REPLICAPOINTER = ADSTYPEENUM.REPLICAPOINTER;
pub const ADSTYPE_FAXNUMBER = ADSTYPEENUM.FAXNUMBER;
pub const ADSTYPE_EMAIL = ADSTYPEENUM.EMAIL;
pub const ADSTYPE_NT_SECURITY_DESCRIPTOR = ADSTYPEENUM.NT_SECURITY_DESCRIPTOR;
pub const ADSTYPE_UNKNOWN = ADSTYPEENUM.UNKNOWN;
pub const ADSTYPE_DN_WITH_BINARY = ADSTYPEENUM.DN_WITH_BINARY;
pub const ADSTYPE_DN_WITH_STRING = ADSTYPEENUM.DN_WITH_STRING;

pub const ADS_OCTET_STRING = extern struct {
    dwLength: u32,
    lpValue: ?*u8,
};

pub const ADS_NT_SECURITY_DESCRIPTOR = extern struct {
    dwLength: u32,
    lpValue: ?*u8,
};

pub const ADS_PROV_SPECIFIC = extern struct {
    dwLength: u32,
    lpValue: ?*u8,
};

pub const ADS_CASEIGNORE_LIST = extern struct {
    Next: ?*ADS_CASEIGNORE_LIST,
    String: ?PWSTR,
};

pub const ADS_OCTET_LIST = extern struct {
    Next: ?*ADS_OCTET_LIST,
    Length: u32,
    Data: ?*u8,
};

pub const ADS_PATH = extern struct {
    Type: u32,
    VolumeName: ?PWSTR,
    Path: ?PWSTR,
};

pub const ADS_POSTALADDRESS = extern struct {
    PostalAddress: [6]?PWSTR,
};

pub const ADS_TIMESTAMP = extern struct {
    WholeSeconds: u32,
    EventID: u32,
};

pub const ADS_BACKLINK = extern struct {
    RemoteID: u32,
    ObjectName: ?PWSTR,
};

pub const ADS_TYPEDNAME = extern struct {
    ObjectName: ?PWSTR,
    Level: u32,
    Interval: u32,
};

pub const ADS_HOLD = extern struct {
    ObjectName: ?PWSTR,
    Amount: u32,
};

pub const ADS_NETADDRESS = extern struct {
    AddressType: u32,
    AddressLength: u32,
    Address: ?*u8,
};

pub const ADS_REPLICAPOINTER = extern struct {
    ServerName: ?PWSTR,
    ReplicaType: u32,
    ReplicaNumber: u32,
    Count: u32,
    ReplicaAddressHints: ?*ADS_NETADDRESS,
};

pub const ADS_FAXNUMBER = extern struct {
    TelephoneNumber: ?PWSTR,
    NumberOfBits: u32,
    Parameters: ?*u8,
};

pub const ADS_EMAIL = extern struct {
    Address: ?PWSTR,
    Type: u32,
};

pub const ADS_DN_WITH_BINARY = extern struct {
    dwLength: u32,
    lpBinaryValue: ?*u8,
    pszDNString: ?PWSTR,
};

pub const ADS_DN_WITH_STRING = extern struct {
    pszStringValue: ?PWSTR,
    pszDNString: ?PWSTR,
};

pub const ADSVALUE = extern struct {
    dwType: ADSTYPEENUM,
    Anonymous: extern union {
        DNString: ?*u16,
        CaseExactString: ?*u16,
        CaseIgnoreString: ?*u16,
        PrintableString: ?*u16,
        NumericString: ?*u16,
        Boolean: u32,
        Integer: u32,
        OctetString: ADS_OCTET_STRING,
        UTCTime: SYSTEMTIME,
        LargeInteger: LARGE_INTEGER,
        ClassName: ?*u16,
        ProviderSpecific: ADS_PROV_SPECIFIC,
        pCaseIgnoreList: ?*ADS_CASEIGNORE_LIST,
        pOctetList: ?*ADS_OCTET_LIST,
        pPath: ?*ADS_PATH,
        pPostalAddress: ?*ADS_POSTALADDRESS,
        Timestamp: ADS_TIMESTAMP,
        BackLink: ADS_BACKLINK,
        pTypedName: ?*ADS_TYPEDNAME,
        Hold: ADS_HOLD,
        pNetAddress: ?*ADS_NETADDRESS,
        pReplicaPointer: ?*ADS_REPLICAPOINTER,
        pFaxNumber: ?*ADS_FAXNUMBER,
        Email: ADS_EMAIL,
        SecurityDescriptor: ADS_NT_SECURITY_DESCRIPTOR,
        pDNWithBinary: ?*ADS_DN_WITH_BINARY,
        pDNWithString: ?*ADS_DN_WITH_STRING,
    },
};

pub const ADS_ATTR_INFO = extern struct {
    pszAttrName: ?PWSTR,
    dwControlCode: u32,
    dwADsType: ADSTYPEENUM,
    pADsValues: ?*ADSVALUE,
    dwNumValues: u32,
};

pub const ADS_AUTHENTICATION_ENUM = enum(u32) {
    SECURE_AUTHENTICATION = 1,
    USE_ENCRYPTION = 2,
    // USE_SSL = 2, this enum value conflicts with USE_ENCRYPTION
    READONLY_SERVER = 4,
    PROMPT_CREDENTIALS = 8,
    NO_AUTHENTICATION = 16,
    FAST_BIND = 32,
    USE_SIGNING = 64,
    USE_SEALING = 128,
    USE_DELEGATION = 256,
    SERVER_BIND = 512,
    NO_REFERRAL_CHASING = 1024,
    AUTH_RESERVED = 2147483648,
};
pub const ADS_SECURE_AUTHENTICATION = ADS_AUTHENTICATION_ENUM.SECURE_AUTHENTICATION;
pub const ADS_USE_ENCRYPTION = ADS_AUTHENTICATION_ENUM.USE_ENCRYPTION;
pub const ADS_USE_SSL = ADS_AUTHENTICATION_ENUM.USE_ENCRYPTION;
pub const ADS_READONLY_SERVER = ADS_AUTHENTICATION_ENUM.READONLY_SERVER;
pub const ADS_PROMPT_CREDENTIALS = ADS_AUTHENTICATION_ENUM.PROMPT_CREDENTIALS;
pub const ADS_NO_AUTHENTICATION = ADS_AUTHENTICATION_ENUM.NO_AUTHENTICATION;
pub const ADS_FAST_BIND = ADS_AUTHENTICATION_ENUM.FAST_BIND;
pub const ADS_USE_SIGNING = ADS_AUTHENTICATION_ENUM.USE_SIGNING;
pub const ADS_USE_SEALING = ADS_AUTHENTICATION_ENUM.USE_SEALING;
pub const ADS_USE_DELEGATION = ADS_AUTHENTICATION_ENUM.USE_DELEGATION;
pub const ADS_SERVER_BIND = ADS_AUTHENTICATION_ENUM.SERVER_BIND;
pub const ADS_NO_REFERRAL_CHASING = ADS_AUTHENTICATION_ENUM.NO_REFERRAL_CHASING;
pub const ADS_AUTH_RESERVED = ADS_AUTHENTICATION_ENUM.AUTH_RESERVED;

pub const ADS_OBJECT_INFO = extern struct {
    pszRDN: ?PWSTR,
    pszObjectDN: ?PWSTR,
    pszParentDN: ?PWSTR,
    pszSchemaDN: ?PWSTR,
    pszClassName: ?PWSTR,
};

pub const ADS_STATUSENUM = enum(i32) {
    S_OK = 0,
    INVALID_SEARCHPREF = 1,
    INVALID_SEARCHPREFVALUE = 2,
};
pub const ADS_STATUS_S_OK = ADS_STATUSENUM.S_OK;
pub const ADS_STATUS_INVALID_SEARCHPREF = ADS_STATUSENUM.INVALID_SEARCHPREF;
pub const ADS_STATUS_INVALID_SEARCHPREFVALUE = ADS_STATUSENUM.INVALID_SEARCHPREFVALUE;

pub const ADS_DEREFENUM = enum(i32) {
    NEVER = 0,
    SEARCHING = 1,
    FINDING = 2,
    ALWAYS = 3,
};
pub const ADS_DEREF_NEVER = ADS_DEREFENUM.NEVER;
pub const ADS_DEREF_SEARCHING = ADS_DEREFENUM.SEARCHING;
pub const ADS_DEREF_FINDING = ADS_DEREFENUM.FINDING;
pub const ADS_DEREF_ALWAYS = ADS_DEREFENUM.ALWAYS;

pub const ADS_SCOPEENUM = enum(i32) {
    BASE = 0,
    ONELEVEL = 1,
    SUBTREE = 2,
};
pub const ADS_SCOPE_BASE = ADS_SCOPEENUM.BASE;
pub const ADS_SCOPE_ONELEVEL = ADS_SCOPEENUM.ONELEVEL;
pub const ADS_SCOPE_SUBTREE = ADS_SCOPEENUM.SUBTREE;

pub const ADS_PREFERENCES_ENUM = enum(i32) {
    ASYNCHRONOUS = 0,
    DEREF_ALIASES = 1,
    SIZE_LIMIT = 2,
    TIME_LIMIT = 3,
    ATTRIBTYPES_ONLY = 4,
    SEARCH_SCOPE = 5,
    TIMEOUT = 6,
    PAGESIZE = 7,
    PAGED_TIME_LIMIT = 8,
    CHASE_REFERRALS = 9,
    SORT_ON = 10,
    CACHE_RESULTS = 11,
    ADSIFLAG = 12,
};
pub const ADSIPROP_ASYNCHRONOUS = ADS_PREFERENCES_ENUM.ASYNCHRONOUS;
pub const ADSIPROP_DEREF_ALIASES = ADS_PREFERENCES_ENUM.DEREF_ALIASES;
pub const ADSIPROP_SIZE_LIMIT = ADS_PREFERENCES_ENUM.SIZE_LIMIT;
pub const ADSIPROP_TIME_LIMIT = ADS_PREFERENCES_ENUM.TIME_LIMIT;
pub const ADSIPROP_ATTRIBTYPES_ONLY = ADS_PREFERENCES_ENUM.ATTRIBTYPES_ONLY;
pub const ADSIPROP_SEARCH_SCOPE = ADS_PREFERENCES_ENUM.SEARCH_SCOPE;
pub const ADSIPROP_TIMEOUT = ADS_PREFERENCES_ENUM.TIMEOUT;
pub const ADSIPROP_PAGESIZE = ADS_PREFERENCES_ENUM.PAGESIZE;
pub const ADSIPROP_PAGED_TIME_LIMIT = ADS_PREFERENCES_ENUM.PAGED_TIME_LIMIT;
pub const ADSIPROP_CHASE_REFERRALS = ADS_PREFERENCES_ENUM.CHASE_REFERRALS;
pub const ADSIPROP_SORT_ON = ADS_PREFERENCES_ENUM.SORT_ON;
pub const ADSIPROP_CACHE_RESULTS = ADS_PREFERENCES_ENUM.CACHE_RESULTS;
pub const ADSIPROP_ADSIFLAG = ADS_PREFERENCES_ENUM.ADSIFLAG;

pub const ADSI_DIALECT_ENUM = enum(i32) {
    LDAP = 0,
    SQL = 1,
};
pub const ADSI_DIALECT_LDAP = ADSI_DIALECT_ENUM.LDAP;
pub const ADSI_DIALECT_SQL = ADSI_DIALECT_ENUM.SQL;

pub const ADS_CHASE_REFERRALS_ENUM = enum(i32) {
    NEVER = 0,
    SUBORDINATE = 32,
    EXTERNAL = 64,
    ALWAYS = 96,
};
pub const ADS_CHASE_REFERRALS_NEVER = ADS_CHASE_REFERRALS_ENUM.NEVER;
pub const ADS_CHASE_REFERRALS_SUBORDINATE = ADS_CHASE_REFERRALS_ENUM.SUBORDINATE;
pub const ADS_CHASE_REFERRALS_EXTERNAL = ADS_CHASE_REFERRALS_ENUM.EXTERNAL;
pub const ADS_CHASE_REFERRALS_ALWAYS = ADS_CHASE_REFERRALS_ENUM.ALWAYS;

pub const ADS_SEARCHPREF_ENUM = enum(i32) {
    ASYNCHRONOUS = 0,
    DEREF_ALIASES = 1,
    SIZE_LIMIT = 2,
    TIME_LIMIT = 3,
    ATTRIBTYPES_ONLY = 4,
    SEARCH_SCOPE = 5,
    TIMEOUT = 6,
    PAGESIZE = 7,
    PAGED_TIME_LIMIT = 8,
    CHASE_REFERRALS = 9,
    SORT_ON = 10,
    CACHE_RESULTS = 11,
    DIRSYNC = 12,
    TOMBSTONE = 13,
    VLV = 14,
    ATTRIBUTE_QUERY = 15,
    SECURITY_MASK = 16,
    DIRSYNC_FLAG = 17,
    EXTENDED_DN = 18,
};
pub const ADS_SEARCHPREF_ASYNCHRONOUS = ADS_SEARCHPREF_ENUM.ASYNCHRONOUS;
pub const ADS_SEARCHPREF_DEREF_ALIASES = ADS_SEARCHPREF_ENUM.DEREF_ALIASES;
pub const ADS_SEARCHPREF_SIZE_LIMIT = ADS_SEARCHPREF_ENUM.SIZE_LIMIT;
pub const ADS_SEARCHPREF_TIME_LIMIT = ADS_SEARCHPREF_ENUM.TIME_LIMIT;
pub const ADS_SEARCHPREF_ATTRIBTYPES_ONLY = ADS_SEARCHPREF_ENUM.ATTRIBTYPES_ONLY;
pub const ADS_SEARCHPREF_SEARCH_SCOPE = ADS_SEARCHPREF_ENUM.SEARCH_SCOPE;
pub const ADS_SEARCHPREF_TIMEOUT = ADS_SEARCHPREF_ENUM.TIMEOUT;
pub const ADS_SEARCHPREF_PAGESIZE = ADS_SEARCHPREF_ENUM.PAGESIZE;
pub const ADS_SEARCHPREF_PAGED_TIME_LIMIT = ADS_SEARCHPREF_ENUM.PAGED_TIME_LIMIT;
pub const ADS_SEARCHPREF_CHASE_REFERRALS = ADS_SEARCHPREF_ENUM.CHASE_REFERRALS;
pub const ADS_SEARCHPREF_SORT_ON = ADS_SEARCHPREF_ENUM.SORT_ON;
pub const ADS_SEARCHPREF_CACHE_RESULTS = ADS_SEARCHPREF_ENUM.CACHE_RESULTS;
pub const ADS_SEARCHPREF_DIRSYNC = ADS_SEARCHPREF_ENUM.DIRSYNC;
pub const ADS_SEARCHPREF_TOMBSTONE = ADS_SEARCHPREF_ENUM.TOMBSTONE;
pub const ADS_SEARCHPREF_VLV = ADS_SEARCHPREF_ENUM.VLV;
pub const ADS_SEARCHPREF_ATTRIBUTE_QUERY = ADS_SEARCHPREF_ENUM.ATTRIBUTE_QUERY;
pub const ADS_SEARCHPREF_SECURITY_MASK = ADS_SEARCHPREF_ENUM.SECURITY_MASK;
pub const ADS_SEARCHPREF_DIRSYNC_FLAG = ADS_SEARCHPREF_ENUM.DIRSYNC_FLAG;
pub const ADS_SEARCHPREF_EXTENDED_DN = ADS_SEARCHPREF_ENUM.EXTENDED_DN;

pub const ADS_PASSWORD_ENCODING_ENUM = enum(i32) {
    REQUIRE_SSL = 0,
    CLEAR = 1,
};
pub const ADS_PASSWORD_ENCODE_REQUIRE_SSL = ADS_PASSWORD_ENCODING_ENUM.REQUIRE_SSL;
pub const ADS_PASSWORD_ENCODE_CLEAR = ADS_PASSWORD_ENCODING_ENUM.CLEAR;

pub const ads_searchpref_info = extern struct {
    dwSearchPref: ADS_SEARCHPREF_ENUM,
    vValue: ADSVALUE,
    dwStatus: ADS_STATUSENUM,
};

pub const ads_search_column = extern struct {
    pszAttrName: ?PWSTR,
    dwADsType: ADSTYPEENUM,
    pADsValues: ?*ADSVALUE,
    dwNumValues: u32,
    hReserved: ?HANDLE,
};

pub const ADS_ATTR_DEF = extern struct {
    pszAttrName: ?PWSTR,
    dwADsType: ADSTYPEENUM,
    dwMinRange: u32,
    dwMaxRange: u32,
    fMultiValued: BOOL,
};

pub const ADS_CLASS_DEF = extern struct {
    pszClassName: ?PWSTR,
    dwMandatoryAttrs: u32,
    ppszMandatoryAttrs: ?*?PWSTR,
    optionalAttrs: u32,
    ppszOptionalAttrs: ?*?*?PWSTR,
    dwNamingAttrs: u32,
    ppszNamingAttrs: ?*?*?PWSTR,
    dwSuperClasses: u32,
    ppszSuperClasses: ?*?*?PWSTR,
    fIsContainer: BOOL,
};

pub const ADS_SORTKEY = extern struct {
    pszAttrType: ?PWSTR,
    pszReserved: ?PWSTR,
    fReverseorder: BOOLEAN,
};

pub const ADS_VLV = extern struct {
    dwBeforeCount: u32,
    dwAfterCount: u32,
    dwOffset: u32,
    dwContentCount: u32,
    pszTarget: ?PWSTR,
    dwContextIDLength: u32,
    lpContextID: ?*u8,
};

pub const ADS_PROPERTY_OPERATION_ENUM = enum(i32) {
    CLEAR = 1,
    UPDATE = 2,
    APPEND = 3,
    DELETE = 4,
};
pub const ADS_PROPERTY_CLEAR = ADS_PROPERTY_OPERATION_ENUM.CLEAR;
pub const ADS_PROPERTY_UPDATE = ADS_PROPERTY_OPERATION_ENUM.UPDATE;
pub const ADS_PROPERTY_APPEND = ADS_PROPERTY_OPERATION_ENUM.APPEND;
pub const ADS_PROPERTY_DELETE = ADS_PROPERTY_OPERATION_ENUM.DELETE;

pub const ADS_SYSTEMFLAG_ENUM = enum(i32) {
    DISALLOW_DELETE = -2147483648,
    CONFIG_ALLOW_RENAME = 1073741824,
    CONFIG_ALLOW_MOVE = 536870912,
    CONFIG_ALLOW_LIMITED_MOVE = 268435456,
    DOMAIN_DISALLOW_RENAME = 134217728,
    DOMAIN_DISALLOW_MOVE = 67108864,
    CR_NTDS_NC = 1,
    CR_NTDS_DOMAIN = 2,
    // ATTR_NOT_REPLICATED = 1, this enum value conflicts with CR_NTDS_NC
    ATTR_IS_CONSTRUCTED = 4,
};
pub const ADS_SYSTEMFLAG_DISALLOW_DELETE = ADS_SYSTEMFLAG_ENUM.DISALLOW_DELETE;
pub const ADS_SYSTEMFLAG_CONFIG_ALLOW_RENAME = ADS_SYSTEMFLAG_ENUM.CONFIG_ALLOW_RENAME;
pub const ADS_SYSTEMFLAG_CONFIG_ALLOW_MOVE = ADS_SYSTEMFLAG_ENUM.CONFIG_ALLOW_MOVE;
pub const ADS_SYSTEMFLAG_CONFIG_ALLOW_LIMITED_MOVE = ADS_SYSTEMFLAG_ENUM.CONFIG_ALLOW_LIMITED_MOVE;
pub const ADS_SYSTEMFLAG_DOMAIN_DISALLOW_RENAME = ADS_SYSTEMFLAG_ENUM.DOMAIN_DISALLOW_RENAME;
pub const ADS_SYSTEMFLAG_DOMAIN_DISALLOW_MOVE = ADS_SYSTEMFLAG_ENUM.DOMAIN_DISALLOW_MOVE;
pub const ADS_SYSTEMFLAG_CR_NTDS_NC = ADS_SYSTEMFLAG_ENUM.CR_NTDS_NC;
pub const ADS_SYSTEMFLAG_CR_NTDS_DOMAIN = ADS_SYSTEMFLAG_ENUM.CR_NTDS_DOMAIN;
pub const ADS_SYSTEMFLAG_ATTR_NOT_REPLICATED = ADS_SYSTEMFLAG_ENUM.CR_NTDS_NC;
pub const ADS_SYSTEMFLAG_ATTR_IS_CONSTRUCTED = ADS_SYSTEMFLAG_ENUM.ATTR_IS_CONSTRUCTED;

pub const ADS_GROUP_TYPE_ENUM = enum(i32) {
    GLOBAL_GROUP = 2,
    DOMAIN_LOCAL_GROUP = 4,
    // LOCAL_GROUP = 4, this enum value conflicts with DOMAIN_LOCAL_GROUP
    UNIVERSAL_GROUP = 8,
    SECURITY_ENABLED = -2147483648,
};
pub const ADS_GROUP_TYPE_GLOBAL_GROUP = ADS_GROUP_TYPE_ENUM.GLOBAL_GROUP;
pub const ADS_GROUP_TYPE_DOMAIN_LOCAL_GROUP = ADS_GROUP_TYPE_ENUM.DOMAIN_LOCAL_GROUP;
pub const ADS_GROUP_TYPE_LOCAL_GROUP = ADS_GROUP_TYPE_ENUM.DOMAIN_LOCAL_GROUP;
pub const ADS_GROUP_TYPE_UNIVERSAL_GROUP = ADS_GROUP_TYPE_ENUM.UNIVERSAL_GROUP;
pub const ADS_GROUP_TYPE_SECURITY_ENABLED = ADS_GROUP_TYPE_ENUM.SECURITY_ENABLED;

pub const ADS_USER_FLAG_ENUM = enum(i32) {
    SCRIPT = 1,
    ACCOUNTDISABLE = 2,
    HOMEDIR_REQUIRED = 8,
    LOCKOUT = 16,
    PASSWD_NOTREQD = 32,
    PASSWD_CANT_CHANGE = 64,
    ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128,
    TEMP_DUPLICATE_ACCOUNT = 256,
    NORMAL_ACCOUNT = 512,
    INTERDOMAIN_TRUST_ACCOUNT = 2048,
    WORKSTATION_TRUST_ACCOUNT = 4096,
    SERVER_TRUST_ACCOUNT = 8192,
    DONT_EXPIRE_PASSWD = 65536,
    MNS_LOGON_ACCOUNT = 131072,
    SMARTCARD_REQUIRED = 262144,
    TRUSTED_FOR_DELEGATION = 524288,
    NOT_DELEGATED = 1048576,
    USE_DES_KEY_ONLY = 2097152,
    DONT_REQUIRE_PREAUTH = 4194304,
    PASSWORD_EXPIRED = 8388608,
    TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216,
};
pub const ADS_UF_SCRIPT = ADS_USER_FLAG_ENUM.SCRIPT;
pub const ADS_UF_ACCOUNTDISABLE = ADS_USER_FLAG_ENUM.ACCOUNTDISABLE;
pub const ADS_UF_HOMEDIR_REQUIRED = ADS_USER_FLAG_ENUM.HOMEDIR_REQUIRED;
pub const ADS_UF_LOCKOUT = ADS_USER_FLAG_ENUM.LOCKOUT;
pub const ADS_UF_PASSWD_NOTREQD = ADS_USER_FLAG_ENUM.PASSWD_NOTREQD;
pub const ADS_UF_PASSWD_CANT_CHANGE = ADS_USER_FLAG_ENUM.PASSWD_CANT_CHANGE;
pub const ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = ADS_USER_FLAG_ENUM.ENCRYPTED_TEXT_PASSWORD_ALLOWED;
pub const ADS_UF_TEMP_DUPLICATE_ACCOUNT = ADS_USER_FLAG_ENUM.TEMP_DUPLICATE_ACCOUNT;
pub const ADS_UF_NORMAL_ACCOUNT = ADS_USER_FLAG_ENUM.NORMAL_ACCOUNT;
pub const ADS_UF_INTERDOMAIN_TRUST_ACCOUNT = ADS_USER_FLAG_ENUM.INTERDOMAIN_TRUST_ACCOUNT;
pub const ADS_UF_WORKSTATION_TRUST_ACCOUNT = ADS_USER_FLAG_ENUM.WORKSTATION_TRUST_ACCOUNT;
pub const ADS_UF_SERVER_TRUST_ACCOUNT = ADS_USER_FLAG_ENUM.SERVER_TRUST_ACCOUNT;
pub const ADS_UF_DONT_EXPIRE_PASSWD = ADS_USER_FLAG_ENUM.DONT_EXPIRE_PASSWD;
pub const ADS_UF_MNS_LOGON_ACCOUNT = ADS_USER_FLAG_ENUM.MNS_LOGON_ACCOUNT;
pub const ADS_UF_SMARTCARD_REQUIRED = ADS_USER_FLAG_ENUM.SMARTCARD_REQUIRED;
pub const ADS_UF_TRUSTED_FOR_DELEGATION = ADS_USER_FLAG_ENUM.TRUSTED_FOR_DELEGATION;
pub const ADS_UF_NOT_DELEGATED = ADS_USER_FLAG_ENUM.NOT_DELEGATED;
pub const ADS_UF_USE_DES_KEY_ONLY = ADS_USER_FLAG_ENUM.USE_DES_KEY_ONLY;
pub const ADS_UF_DONT_REQUIRE_PREAUTH = ADS_USER_FLAG_ENUM.DONT_REQUIRE_PREAUTH;
pub const ADS_UF_PASSWORD_EXPIRED = ADS_USER_FLAG_ENUM.PASSWORD_EXPIRED;
pub const ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = ADS_USER_FLAG_ENUM.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION;

pub const ADS_RIGHTS_ENUM = enum(i32) {
    DELETE = 65536,
    READ_CONTROL = 131072,
    WRITE_DAC = 262144,
    WRITE_OWNER = 524288,
    SYNCHRONIZE = 1048576,
    ACCESS_SYSTEM_SECURITY = 16777216,
    GENERIC_READ = -2147483648,
    GENERIC_WRITE = 1073741824,
    GENERIC_EXECUTE = 536870912,
    GENERIC_ALL = 268435456,
    DS_CREATE_CHILD = 1,
    DS_DELETE_CHILD = 2,
    ACTRL_DS_LIST = 4,
    DS_SELF = 8,
    DS_READ_PROP = 16,
    DS_WRITE_PROP = 32,
    DS_DELETE_TREE = 64,
    DS_LIST_OBJECT = 128,
    DS_CONTROL_ACCESS = 256,
};
pub const ADS_RIGHT_DELETE = ADS_RIGHTS_ENUM.DELETE;
pub const ADS_RIGHT_READ_CONTROL = ADS_RIGHTS_ENUM.READ_CONTROL;
pub const ADS_RIGHT_WRITE_DAC = ADS_RIGHTS_ENUM.WRITE_DAC;
pub const ADS_RIGHT_WRITE_OWNER = ADS_RIGHTS_ENUM.WRITE_OWNER;
pub const ADS_RIGHT_SYNCHRONIZE = ADS_RIGHTS_ENUM.SYNCHRONIZE;
pub const ADS_RIGHT_ACCESS_SYSTEM_SECURITY = ADS_RIGHTS_ENUM.ACCESS_SYSTEM_SECURITY;
pub const ADS_RIGHT_GENERIC_READ = ADS_RIGHTS_ENUM.GENERIC_READ;
pub const ADS_RIGHT_GENERIC_WRITE = ADS_RIGHTS_ENUM.GENERIC_WRITE;
pub const ADS_RIGHT_GENERIC_EXECUTE = ADS_RIGHTS_ENUM.GENERIC_EXECUTE;
pub const ADS_RIGHT_GENERIC_ALL = ADS_RIGHTS_ENUM.GENERIC_ALL;
pub const ADS_RIGHT_DS_CREATE_CHILD = ADS_RIGHTS_ENUM.DS_CREATE_CHILD;
pub const ADS_RIGHT_DS_DELETE_CHILD = ADS_RIGHTS_ENUM.DS_DELETE_CHILD;
pub const ADS_RIGHT_ACTRL_DS_LIST = ADS_RIGHTS_ENUM.ACTRL_DS_LIST;
pub const ADS_RIGHT_DS_SELF = ADS_RIGHTS_ENUM.DS_SELF;
pub const ADS_RIGHT_DS_READ_PROP = ADS_RIGHTS_ENUM.DS_READ_PROP;
pub const ADS_RIGHT_DS_WRITE_PROP = ADS_RIGHTS_ENUM.DS_WRITE_PROP;
pub const ADS_RIGHT_DS_DELETE_TREE = ADS_RIGHTS_ENUM.DS_DELETE_TREE;
pub const ADS_RIGHT_DS_LIST_OBJECT = ADS_RIGHTS_ENUM.DS_LIST_OBJECT;
pub const ADS_RIGHT_DS_CONTROL_ACCESS = ADS_RIGHTS_ENUM.DS_CONTROL_ACCESS;

pub const ADS_ACETYPE_ENUM = enum(i32) {
    ACCESS_ALLOWED = 0,
    ACCESS_DENIED = 1,
    SYSTEM_AUDIT = 2,
    ACCESS_ALLOWED_OBJECT = 5,
    ACCESS_DENIED_OBJECT = 6,
    SYSTEM_AUDIT_OBJECT = 7,
    SYSTEM_ALARM_OBJECT = 8,
    ACCESS_ALLOWED_CALLBACK = 9,
    ACCESS_DENIED_CALLBACK = 10,
    ACCESS_ALLOWED_CALLBACK_OBJECT = 11,
    ACCESS_DENIED_CALLBACK_OBJECT = 12,
    SYSTEM_AUDIT_CALLBACK = 13,
    SYSTEM_ALARM_CALLBACK = 14,
    SYSTEM_AUDIT_CALLBACK_OBJECT = 15,
    SYSTEM_ALARM_CALLBACK_OBJECT = 16,
};
pub const ADS_ACETYPE_ACCESS_ALLOWED = ADS_ACETYPE_ENUM.ACCESS_ALLOWED;
pub const ADS_ACETYPE_ACCESS_DENIED = ADS_ACETYPE_ENUM.ACCESS_DENIED;
pub const ADS_ACETYPE_SYSTEM_AUDIT = ADS_ACETYPE_ENUM.SYSTEM_AUDIT;
pub const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = ADS_ACETYPE_ENUM.ACCESS_ALLOWED_OBJECT;
pub const ADS_ACETYPE_ACCESS_DENIED_OBJECT = ADS_ACETYPE_ENUM.ACCESS_DENIED_OBJECT;
pub const ADS_ACETYPE_SYSTEM_AUDIT_OBJECT = ADS_ACETYPE_ENUM.SYSTEM_AUDIT_OBJECT;
pub const ADS_ACETYPE_SYSTEM_ALARM_OBJECT = ADS_ACETYPE_ENUM.SYSTEM_ALARM_OBJECT;
pub const ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK = ADS_ACETYPE_ENUM.ACCESS_ALLOWED_CALLBACK;
pub const ADS_ACETYPE_ACCESS_DENIED_CALLBACK = ADS_ACETYPE_ENUM.ACCESS_DENIED_CALLBACK;
pub const ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK_OBJECT = ADS_ACETYPE_ENUM.ACCESS_ALLOWED_CALLBACK_OBJECT;
pub const ADS_ACETYPE_ACCESS_DENIED_CALLBACK_OBJECT = ADS_ACETYPE_ENUM.ACCESS_DENIED_CALLBACK_OBJECT;
pub const ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK = ADS_ACETYPE_ENUM.SYSTEM_AUDIT_CALLBACK;
pub const ADS_ACETYPE_SYSTEM_ALARM_CALLBACK = ADS_ACETYPE_ENUM.SYSTEM_ALARM_CALLBACK;
pub const ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK_OBJECT = ADS_ACETYPE_ENUM.SYSTEM_AUDIT_CALLBACK_OBJECT;
pub const ADS_ACETYPE_SYSTEM_ALARM_CALLBACK_OBJECT = ADS_ACETYPE_ENUM.SYSTEM_ALARM_CALLBACK_OBJECT;

pub const ADS_ACEFLAG_ENUM = enum(i32) {
    INHERIT_ACE = 2,
    NO_PROPAGATE_INHERIT_ACE = 4,
    INHERIT_ONLY_ACE = 8,
    INHERITED_ACE = 16,
    VALID_INHERIT_FLAGS = 31,
    SUCCESSFUL_ACCESS = 64,
    FAILED_ACCESS = 128,
};
pub const ADS_ACEFLAG_INHERIT_ACE = ADS_ACEFLAG_ENUM.INHERIT_ACE;
pub const ADS_ACEFLAG_NO_PROPAGATE_INHERIT_ACE = ADS_ACEFLAG_ENUM.NO_PROPAGATE_INHERIT_ACE;
pub const ADS_ACEFLAG_INHERIT_ONLY_ACE = ADS_ACEFLAG_ENUM.INHERIT_ONLY_ACE;
pub const ADS_ACEFLAG_INHERITED_ACE = ADS_ACEFLAG_ENUM.INHERITED_ACE;
pub const ADS_ACEFLAG_VALID_INHERIT_FLAGS = ADS_ACEFLAG_ENUM.VALID_INHERIT_FLAGS;
pub const ADS_ACEFLAG_SUCCESSFUL_ACCESS = ADS_ACEFLAG_ENUM.SUCCESSFUL_ACCESS;
pub const ADS_ACEFLAG_FAILED_ACCESS = ADS_ACEFLAG_ENUM.FAILED_ACCESS;

pub const ADS_FLAGTYPE_ENUM = enum(i32) {
    OBJECT_TYPE_PRESENT = 1,
    INHERITED_OBJECT_TYPE_PRESENT = 2,
};
pub const ADS_FLAG_OBJECT_TYPE_PRESENT = ADS_FLAGTYPE_ENUM.OBJECT_TYPE_PRESENT;
pub const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = ADS_FLAGTYPE_ENUM.INHERITED_OBJECT_TYPE_PRESENT;

pub const ADS_SD_CONTROL_ENUM = enum(i32) {
    OWNER_DEFAULTED = 1,
    GROUP_DEFAULTED = 2,
    DACL_PRESENT = 4,
    DACL_DEFAULTED = 8,
    SACL_PRESENT = 16,
    SACL_DEFAULTED = 32,
    DACL_AUTO_INHERIT_REQ = 256,
    SACL_AUTO_INHERIT_REQ = 512,
    DACL_AUTO_INHERITED = 1024,
    SACL_AUTO_INHERITED = 2048,
    DACL_PROTECTED = 4096,
    SACL_PROTECTED = 8192,
    SELF_RELATIVE = 32768,
};
pub const ADS_SD_CONTROL_SE_OWNER_DEFAULTED = ADS_SD_CONTROL_ENUM.OWNER_DEFAULTED;
pub const ADS_SD_CONTROL_SE_GROUP_DEFAULTED = ADS_SD_CONTROL_ENUM.GROUP_DEFAULTED;
pub const ADS_SD_CONTROL_SE_DACL_PRESENT = ADS_SD_CONTROL_ENUM.DACL_PRESENT;
pub const ADS_SD_CONTROL_SE_DACL_DEFAULTED = ADS_SD_CONTROL_ENUM.DACL_DEFAULTED;
pub const ADS_SD_CONTROL_SE_SACL_PRESENT = ADS_SD_CONTROL_ENUM.SACL_PRESENT;
pub const ADS_SD_CONTROL_SE_SACL_DEFAULTED = ADS_SD_CONTROL_ENUM.SACL_DEFAULTED;
pub const ADS_SD_CONTROL_SE_DACL_AUTO_INHERIT_REQ = ADS_SD_CONTROL_ENUM.DACL_AUTO_INHERIT_REQ;
pub const ADS_SD_CONTROL_SE_SACL_AUTO_INHERIT_REQ = ADS_SD_CONTROL_ENUM.SACL_AUTO_INHERIT_REQ;
pub const ADS_SD_CONTROL_SE_DACL_AUTO_INHERITED = ADS_SD_CONTROL_ENUM.DACL_AUTO_INHERITED;
pub const ADS_SD_CONTROL_SE_SACL_AUTO_INHERITED = ADS_SD_CONTROL_ENUM.SACL_AUTO_INHERITED;
pub const ADS_SD_CONTROL_SE_DACL_PROTECTED = ADS_SD_CONTROL_ENUM.DACL_PROTECTED;
pub const ADS_SD_CONTROL_SE_SACL_PROTECTED = ADS_SD_CONTROL_ENUM.SACL_PROTECTED;
pub const ADS_SD_CONTROL_SE_SELF_RELATIVE = ADS_SD_CONTROL_ENUM.SELF_RELATIVE;

pub const ADS_SD_REVISION_ENUM = enum(i32) {
    S = 4,
};
pub const ADS_SD_REVISION_DS = ADS_SD_REVISION_ENUM.S;

pub const ADS_NAME_TYPE_ENUM = enum(i32) {
    @"1779" = 1,
    CANONICAL = 2,
    NT4 = 3,
    DISPLAY = 4,
    DOMAIN_SIMPLE = 5,
    ENTERPRISE_SIMPLE = 6,
    GUID = 7,
    UNKNOWN = 8,
    USER_PRINCIPAL_NAME = 9,
    CANONICAL_EX = 10,
    SERVICE_PRINCIPAL_NAME = 11,
    SID_OR_SID_HISTORY_NAME = 12,
};
pub const ADS_NAME_TYPE_1779 = ADS_NAME_TYPE_ENUM.@"1779";
pub const ADS_NAME_TYPE_CANONICAL = ADS_NAME_TYPE_ENUM.CANONICAL;
pub const ADS_NAME_TYPE_NT4 = ADS_NAME_TYPE_ENUM.NT4;
pub const ADS_NAME_TYPE_DISPLAY = ADS_NAME_TYPE_ENUM.DISPLAY;
pub const ADS_NAME_TYPE_DOMAIN_SIMPLE = ADS_NAME_TYPE_ENUM.DOMAIN_SIMPLE;
pub const ADS_NAME_TYPE_ENTERPRISE_SIMPLE = ADS_NAME_TYPE_ENUM.ENTERPRISE_SIMPLE;
pub const ADS_NAME_TYPE_GUID = ADS_NAME_TYPE_ENUM.GUID;
pub const ADS_NAME_TYPE_UNKNOWN = ADS_NAME_TYPE_ENUM.UNKNOWN;
pub const ADS_NAME_TYPE_USER_PRINCIPAL_NAME = ADS_NAME_TYPE_ENUM.USER_PRINCIPAL_NAME;
pub const ADS_NAME_TYPE_CANONICAL_EX = ADS_NAME_TYPE_ENUM.CANONICAL_EX;
pub const ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME = ADS_NAME_TYPE_ENUM.SERVICE_PRINCIPAL_NAME;
pub const ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = ADS_NAME_TYPE_ENUM.SID_OR_SID_HISTORY_NAME;

pub const ADS_NAME_INITTYPE_ENUM = enum(i32) {
    DOMAIN = 1,
    SERVER = 2,
    GC = 3,
};
pub const ADS_NAME_INITTYPE_DOMAIN = ADS_NAME_INITTYPE_ENUM.DOMAIN;
pub const ADS_NAME_INITTYPE_SERVER = ADS_NAME_INITTYPE_ENUM.SERVER;
pub const ADS_NAME_INITTYPE_GC = ADS_NAME_INITTYPE_ENUM.GC;

pub const ADS_OPTION_ENUM = enum(i32) {
    SERVERNAME = 0,
    REFERRALS = 1,
    PAGE_SIZE = 2,
    SECURITY_MASK = 3,
    MUTUAL_AUTH_STATUS = 4,
    QUOTA = 5,
    PASSWORD_PORTNUMBER = 6,
    PASSWORD_METHOD = 7,
    ACCUMULATIVE_MODIFICATION = 8,
    SKIP_SID_LOOKUP = 9,
};
pub const ADS_OPTION_SERVERNAME = ADS_OPTION_ENUM.SERVERNAME;
pub const ADS_OPTION_REFERRALS = ADS_OPTION_ENUM.REFERRALS;
pub const ADS_OPTION_PAGE_SIZE = ADS_OPTION_ENUM.PAGE_SIZE;
pub const ADS_OPTION_SECURITY_MASK = ADS_OPTION_ENUM.SECURITY_MASK;
pub const ADS_OPTION_MUTUAL_AUTH_STATUS = ADS_OPTION_ENUM.MUTUAL_AUTH_STATUS;
pub const ADS_OPTION_QUOTA = ADS_OPTION_ENUM.QUOTA;
pub const ADS_OPTION_PASSWORD_PORTNUMBER = ADS_OPTION_ENUM.PASSWORD_PORTNUMBER;
pub const ADS_OPTION_PASSWORD_METHOD = ADS_OPTION_ENUM.PASSWORD_METHOD;
pub const ADS_OPTION_ACCUMULATIVE_MODIFICATION = ADS_OPTION_ENUM.ACCUMULATIVE_MODIFICATION;
pub const ADS_OPTION_SKIP_SID_LOOKUP = ADS_OPTION_ENUM.SKIP_SID_LOOKUP;

pub const ADS_SECURITY_INFO_ENUM = enum(i32) {
    OWNER = 1,
    GROUP = 2,
    DACL = 4,
    SACL = 8,
};
pub const ADS_SECURITY_INFO_OWNER = ADS_SECURITY_INFO_ENUM.OWNER;
pub const ADS_SECURITY_INFO_GROUP = ADS_SECURITY_INFO_ENUM.GROUP;
pub const ADS_SECURITY_INFO_DACL = ADS_SECURITY_INFO_ENUM.DACL;
pub const ADS_SECURITY_INFO_SACL = ADS_SECURITY_INFO_ENUM.SACL;

pub const ADS_SETTYPE_ENUM = enum(i32) {
    FULL = 1,
    PROVIDER = 2,
    SERVER = 3,
    DN = 4,
};
pub const ADS_SETTYPE_FULL = ADS_SETTYPE_ENUM.FULL;
pub const ADS_SETTYPE_PROVIDER = ADS_SETTYPE_ENUM.PROVIDER;
pub const ADS_SETTYPE_SERVER = ADS_SETTYPE_ENUM.SERVER;
pub const ADS_SETTYPE_DN = ADS_SETTYPE_ENUM.DN;

pub const ADS_FORMAT_ENUM = enum(i32) {
    WINDOWS = 1,
    WINDOWS_NO_SERVER = 2,
    WINDOWS_DN = 3,
    WINDOWS_PARENT = 4,
    X500 = 5,
    X500_NO_SERVER = 6,
    X500_DN = 7,
    X500_PARENT = 8,
    SERVER = 9,
    PROVIDER = 10,
    LEAF = 11,
};
pub const ADS_FORMAT_WINDOWS = ADS_FORMAT_ENUM.WINDOWS;
pub const ADS_FORMAT_WINDOWS_NO_SERVER = ADS_FORMAT_ENUM.WINDOWS_NO_SERVER;
pub const ADS_FORMAT_WINDOWS_DN = ADS_FORMAT_ENUM.WINDOWS_DN;
pub const ADS_FORMAT_WINDOWS_PARENT = ADS_FORMAT_ENUM.WINDOWS_PARENT;
pub const ADS_FORMAT_X500 = ADS_FORMAT_ENUM.X500;
pub const ADS_FORMAT_X500_NO_SERVER = ADS_FORMAT_ENUM.X500_NO_SERVER;
pub const ADS_FORMAT_X500_DN = ADS_FORMAT_ENUM.X500_DN;
pub const ADS_FORMAT_X500_PARENT = ADS_FORMAT_ENUM.X500_PARENT;
pub const ADS_FORMAT_SERVER = ADS_FORMAT_ENUM.SERVER;
pub const ADS_FORMAT_PROVIDER = ADS_FORMAT_ENUM.PROVIDER;
pub const ADS_FORMAT_LEAF = ADS_FORMAT_ENUM.LEAF;

pub const ADS_DISPLAY_ENUM = enum(i32) {
    FULL = 1,
    VALUE_ONLY = 2,
};
pub const ADS_DISPLAY_FULL = ADS_DISPLAY_ENUM.FULL;
pub const ADS_DISPLAY_VALUE_ONLY = ADS_DISPLAY_ENUM.VALUE_ONLY;

pub const ADS_ESCAPE_MODE_ENUM = enum(i32) {
    DEFAULT = 1,
    ON = 2,
    OFF = 3,
    OFF_EX = 4,
};
pub const ADS_ESCAPEDMODE_DEFAULT = ADS_ESCAPE_MODE_ENUM.DEFAULT;
pub const ADS_ESCAPEDMODE_ON = ADS_ESCAPE_MODE_ENUM.ON;
pub const ADS_ESCAPEDMODE_OFF = ADS_ESCAPE_MODE_ENUM.OFF;
pub const ADS_ESCAPEDMODE_OFF_EX = ADS_ESCAPE_MODE_ENUM.OFF_EX;

pub const ADS_PATHTYPE_ENUM = enum(i32) {
    FILE = 1,
    FILESHARE = 2,
    REGISTRY = 3,
};
pub const ADS_PATH_FILE = ADS_PATHTYPE_ENUM.FILE;
pub const ADS_PATH_FILESHARE = ADS_PATHTYPE_ENUM.FILESHARE;
pub const ADS_PATH_REGISTRY = ADS_PATHTYPE_ENUM.REGISTRY;

pub const ADS_SD_FORMAT_ENUM = enum(i32) {
    IID = 1,
    RAW = 2,
    HEXSTRING = 3,
};
pub const ADS_SD_FORMAT_IID = ADS_SD_FORMAT_ENUM.IID;
pub const ADS_SD_FORMAT_RAW = ADS_SD_FORMAT_ENUM.RAW;
pub const ADS_SD_FORMAT_HEXSTRING = ADS_SD_FORMAT_ENUM.HEXSTRING;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADs_Value = Guid.initString("fd8256d0-fd15-11ce-abc4-02608c9e7553");
pub const IID_IADs = &IID_IADs_Value;
pub const IADs = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADs,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Class: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADs,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GUID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADs,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ADsPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADs,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADs,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Schema: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADs,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfo: *const fn (
            self: *const IADs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInfo: *const fn (
            self: *const IADs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Get: *const fn (
            self: *const IADs,
            bstr_name: ?BSTR,
            pv_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Put: *const fn (
            self: *const IADs,
            bstr_name: ?BSTR,
            v_prop: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEx: *const fn (
            self: *const IADs,
            bstr_name: ?BSTR,
            pv_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutEx: *const fn (
            self: *const IADs,
            ln_control_code: i32,
            bstr_name: ?BSTR,
            v_prop: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfoEx: *const fn (
            self: *const IADs,
            v_properties: VARIANT,
            ln_reserved: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IADs, @ptrCast(self)), retval_);
            }
            pub inline fn getClass(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).get_Class(@as(*const IADs, @ptrCast(self)), retval_);
            }
            pub inline fn getGUID(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).get_GUID(@as(*const IADs, @ptrCast(self)), retval_);
            }
            pub inline fn getADsPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).get_ADsPath(@as(*const IADs, @ptrCast(self)), retval_);
            }
            pub inline fn getParent(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const IADs, @ptrCast(self)), retval_);
            }
            pub inline fn getSchema(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).get_Schema(@as(*const IADs, @ptrCast(self)), retval_);
            }
            pub inline fn getInfo(self: *const T) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).GetInfo(@as(*const IADs, @ptrCast(self)));
            }
            pub inline fn setInfo(self: *const T) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).SetInfo(@as(*const IADs, @ptrCast(self)));
            }
            pub inline fn get(self: *const T, bstr_name_: ?BSTR, pv_prop_: ?*VARIANT) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).Get(@as(*const IADs, @ptrCast(self)), bstr_name_, pv_prop_);
            }
            pub inline fn put(self: *const T, bstr_name_: ?BSTR, v_prop_: VARIANT) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).Put(@as(*const IADs, @ptrCast(self)), bstr_name_, v_prop_);
            }
            pub inline fn getEx(self: *const T, bstr_name_: ?BSTR, pv_prop_: ?*VARIANT) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).GetEx(@as(*const IADs, @ptrCast(self)), bstr_name_, pv_prop_);
            }
            pub inline fn putEx(self: *const T, ln_control_code_: i32, bstr_name_: ?BSTR, v_prop_: VARIANT) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).PutEx(@as(*const IADs, @ptrCast(self)), ln_control_code_, bstr_name_, v_prop_);
            }
            pub inline fn getInfoEx(self: *const T, v_properties_: VARIANT, ln_reserved_: i32) HRESULT {
                return @as(*const IADs.VTable, @ptrCast(self.vtable)).GetInfoEx(@as(*const IADs, @ptrCast(self)), v_properties_, ln_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsContainer_Value = Guid.initString("001677d0-fd16-11ce-abc4-02608c9e7553");
pub const IID_IADsContainer = &IID_IADsContainer_Value;
pub const IADsContainer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsContainer,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsContainer,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Filter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsContainer,
            p_var: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Filter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsContainer,
            @"var": VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hints: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsContainer,
            pv_filter: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Hints: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsContainer,
            v_hints: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn (
            self: *const IADsContainer,
            class_name: ?BSTR,
            relative_name: ?BSTR,
            pp_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IADsContainer,
            class_name: ?BSTR,
            relative_name: ?BSTR,
            pp_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IADsContainer,
            bstr_class_name: ?BSTR,
            bstr_relative_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyHere: *const fn (
            self: *const IADsContainer,
            source_name: ?BSTR,
            new_name: ?BSTR,
            pp_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveHere: *const fn (
            self: *const IADsContainer,
            source_name: ?BSTR,
            new_name: ?BSTR,
            pp_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IADsContainer, @ptrCast(self)), retval_);
            }
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IADsContainer, @ptrCast(self)), retval_);
            }
            pub inline fn getFilter(self: *const T, p_var_: ?*VARIANT) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).get_Filter(@as(*const IADsContainer, @ptrCast(self)), p_var_);
            }
            pub inline fn putFilter(self: *const T, var_: VARIANT) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).put_Filter(@as(*const IADsContainer, @ptrCast(self)), var_);
            }
            pub inline fn getHints(self: *const T, pv_filter_: ?*VARIANT) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).get_Hints(@as(*const IADsContainer, @ptrCast(self)), pv_filter_);
            }
            pub inline fn putHints(self: *const T, v_hints_: VARIANT) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).put_Hints(@as(*const IADsContainer, @ptrCast(self)), v_hints_);
            }
            pub inline fn getObject(self: *const T, class_name_: ?BSTR, relative_name_: ?BSTR, pp_object_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).GetObject(@as(*const IADsContainer, @ptrCast(self)), class_name_, relative_name_, pp_object_);
            }
            pub inline fn create(self: *const T, class_name_: ?BSTR, relative_name_: ?BSTR, pp_object_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).Create(@as(*const IADsContainer, @ptrCast(self)), class_name_, relative_name_, pp_object_);
            }
            pub inline fn delete(self: *const T, bstr_class_name_: ?BSTR, bstr_relative_name_: ?BSTR) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).Delete(@as(*const IADsContainer, @ptrCast(self)), bstr_class_name_, bstr_relative_name_);
            }
            pub inline fn copyHere(self: *const T, source_name_: ?BSTR, new_name_: ?BSTR, pp_object_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).CopyHere(@as(*const IADsContainer, @ptrCast(self)), source_name_, new_name_, pp_object_);
            }
            pub inline fn moveHere(self: *const T, source_name_: ?BSTR, new_name_: ?BSTR, pp_object_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsContainer.VTable, @ptrCast(self.vtable)).MoveHere(@as(*const IADsContainer, @ptrCast(self)), source_name_, new_name_, pp_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsCollection_Value = Guid.initString("72b945e0-253b-11cf-a988-00aa006bc149");
pub const IID_IADsCollection = &IID_IADsCollection_Value;
pub const IADsCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsCollection,
            pp_enumerator: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IADsCollection,
            bstr_name: ?BSTR,
            v_item: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IADsCollection,
            bstr_item_to_be_removed: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn (
            self: *const IADsCollection,
            bstr_name: ?BSTR,
            pv_item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_enumerator_: ?*?*IUnknown) HRESULT {
                return @as(*const IADsCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IADsCollection, @ptrCast(self)), pp_enumerator_);
            }
            pub inline fn add(self: *const T, bstr_name_: ?BSTR, v_item_: VARIANT) HRESULT {
                return @as(*const IADsCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IADsCollection, @ptrCast(self)), bstr_name_, v_item_);
            }
            pub inline fn remove(self: *const T, bstr_item_to_be_removed_: ?BSTR) HRESULT {
                return @as(*const IADsCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IADsCollection, @ptrCast(self)), bstr_item_to_be_removed_);
            }
            pub inline fn getObject(self: *const T, bstr_name_: ?BSTR, pv_item_: ?*VARIANT) HRESULT {
                return @as(*const IADsCollection.VTable, @ptrCast(self.vtable)).GetObject(@as(*const IADsCollection, @ptrCast(self)), bstr_name_, pv_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsMembers_Value = Guid.initString("451a0030-72ec-11cf-b03b-00aa006e0975");
pub const IID_IADsMembers = &IID_IADsMembers_Value;
pub const IADsMembers = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsMembers,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsMembers,
            pp_enumerator: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Filter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsMembers,
            pv_filter: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Filter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsMembers,
            pv_filter: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IADsMembers.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IADsMembers, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enumerator_: ?*?*IUnknown) HRESULT {
                return @as(*const IADsMembers.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IADsMembers, @ptrCast(self)), pp_enumerator_);
            }
            pub inline fn getFilter(self: *const T, pv_filter_: ?*VARIANT) HRESULT {
                return @as(*const IADsMembers.VTable, @ptrCast(self.vtable)).get_Filter(@as(*const IADsMembers, @ptrCast(self)), pv_filter_);
            }
            pub inline fn putFilter(self: *const T, pv_filter_: VARIANT) HRESULT {
                return @as(*const IADsMembers.VTable, @ptrCast(self.vtable)).put_Filter(@as(*const IADsMembers, @ptrCast(self)), pv_filter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPropertyList_Value = Guid.initString("c6f602b6-8f69-11d0-8528-00c04fd8d503");
pub const IID_IADsPropertyList = &IID_IADsPropertyList_Value;
pub const IADsPropertyList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyList,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const IADsPropertyList,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IADsPropertyList,
            c_elements: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IADsPropertyList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IADsPropertyList,
            var_index: VARIANT,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyItem: *const fn (
            self: *const IADsPropertyList,
            bstr_name: ?BSTR,
            ln_a_ds_type: i32,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutPropertyItem: *const fn (
            self: *const IADsPropertyList,
            var_data: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetPropertyItem: *const fn (
            self: *const IADsPropertyList,
            var_entry: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PurgePropertyList: *const fn (
            self: *const IADsPropertyList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPropertyCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IADsPropertyList.VTable, @ptrCast(self.vtable)).get_PropertyCount(@as(*const IADsPropertyList, @ptrCast(self)), pl_count_);
            }
            pub inline fn next(self: *const T, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const IADsPropertyList.VTable, @ptrCast(self.vtable)).Next(@as(*const IADsPropertyList, @ptrCast(self)), p_variant_);
            }
            pub inline fn skip(self: *const T, c_elements_: i32) HRESULT {
                return @as(*const IADsPropertyList.VTable, @ptrCast(self.vtable)).Skip(@as(*const IADsPropertyList, @ptrCast(self)), c_elements_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IADsPropertyList.VTable, @ptrCast(self.vtable)).Reset(@as(*const IADsPropertyList, @ptrCast(self)));
            }
            pub inline fn item(self: *const T, var_index_: VARIANT, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const IADsPropertyList.VTable, @ptrCast(self.vtable)).Item(@as(*const IADsPropertyList, @ptrCast(self)), var_index_, p_variant_);
            }
            pub inline fn getPropertyItem(self: *const T, bstr_name_: ?BSTR, ln_a_ds_type_: i32, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const IADsPropertyList.VTable, @ptrCast(self.vtable)).GetPropertyItem(@as(*const IADsPropertyList, @ptrCast(self)), bstr_name_, ln_a_ds_type_, p_variant_);
            }
            pub inline fn putPropertyItem(self: *const T, var_data_: VARIANT) HRESULT {
                return @as(*const IADsPropertyList.VTable, @ptrCast(self.vtable)).PutPropertyItem(@as(*const IADsPropertyList, @ptrCast(self)), var_data_);
            }
            pub inline fn resetPropertyItem(self: *const T, var_entry_: VARIANT) HRESULT {
                return @as(*const IADsPropertyList.VTable, @ptrCast(self.vtable)).ResetPropertyItem(@as(*const IADsPropertyList, @ptrCast(self)), var_entry_);
            }
            pub inline fn purgePropertyList(self: *const T) HRESULT {
                return @as(*const IADsPropertyList.VTable, @ptrCast(self.vtable)).PurgePropertyList(@as(*const IADsPropertyList, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPropertyEntry_Value = Guid.initString("05792c8e-941f-11d0-8529-00c04fd8d503");
pub const IID_IADsPropertyEntry = &IID_IADsPropertyEntry_Value;
pub const IADsPropertyEntry = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Clear: *const fn (
            self: *const IADsPropertyEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyEntry,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyEntry,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ADsType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyEntry,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ADsType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyEntry,
            ln_a_ds_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ControlCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyEntry,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ControlCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyEntry,
            ln_control_code: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Values: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyEntry,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Values: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyEntry,
            v_values: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IADsPropertyEntry.VTable, @ptrCast(self.vtable)).Clear(@as(*const IADsPropertyEntry, @ptrCast(self)));
            }
            pub inline fn getName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPropertyEntry.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IADsPropertyEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IADsPropertyEntry.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IADsPropertyEntry, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getADsType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPropertyEntry.VTable, @ptrCast(self.vtable)).get_ADsType(@as(*const IADsPropertyEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putADsType(self: *const T, ln_a_ds_type_: i32) HRESULT {
                return @as(*const IADsPropertyEntry.VTable, @ptrCast(self.vtable)).put_ADsType(@as(*const IADsPropertyEntry, @ptrCast(self)), ln_a_ds_type_);
            }
            pub inline fn getControlCode(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPropertyEntry.VTable, @ptrCast(self.vtable)).get_ControlCode(@as(*const IADsPropertyEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putControlCode(self: *const T, ln_control_code_: i32) HRESULT {
                return @as(*const IADsPropertyEntry.VTable, @ptrCast(self.vtable)).put_ControlCode(@as(*const IADsPropertyEntry, @ptrCast(self)), ln_control_code_);
            }
            pub inline fn getValues(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsPropertyEntry.VTable, @ptrCast(self.vtable)).get_Values(@as(*const IADsPropertyEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putValues(self: *const T, v_values_: VARIANT) HRESULT {
                return @as(*const IADsPropertyEntry.VTable, @ptrCast(self.vtable)).put_Values(@as(*const IADsPropertyEntry, @ptrCast(self)), v_values_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPropertyValue_Value = Guid.initString("79fa9ad0-a97c-11d0-8534-00c04fd8d503");
pub const IID_IADsPropertyValue = &IID_IADsPropertyValue_Value;
pub const IADsPropertyValue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Clear: *const fn (
            self: *const IADsPropertyValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ADsType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ADsType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            ln_a_ds_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DNString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DNString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            bstr_d_n_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CaseExactString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CaseExactString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            bstr_case_exact_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CaseIgnoreString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CaseIgnoreString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            bstr_case_ignore_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrintableString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrintableString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            bstr_printable_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumericString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NumericString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            bstr_numeric_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Boolean: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Boolean: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            ln_boolean: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Integer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Integer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            ln_integer: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OctetString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OctetString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            v_octet_string: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecurityDescriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecurityDescriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            p_security_descriptor: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LargeInteger: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LargeInteger: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            p_large_integer: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UTCTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UTCTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPropertyValue,
            da_u_t_c_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).Clear(@as(*const IADsPropertyValue, @ptrCast(self)));
            }
            pub inline fn getADsType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_ADsType(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putADsType(self: *const T, ln_a_ds_type_: i32) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_ADsType(@as(*const IADsPropertyValue, @ptrCast(self)), ln_a_ds_type_);
            }
            pub inline fn getDNString(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_DNString(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putDNString(self: *const T, bstr_d_n_string_: ?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_DNString(@as(*const IADsPropertyValue, @ptrCast(self)), bstr_d_n_string_);
            }
            pub inline fn getCaseExactString(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_CaseExactString(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putCaseExactString(self: *const T, bstr_case_exact_string_: ?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_CaseExactString(@as(*const IADsPropertyValue, @ptrCast(self)), bstr_case_exact_string_);
            }
            pub inline fn getCaseIgnoreString(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_CaseIgnoreString(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putCaseIgnoreString(self: *const T, bstr_case_ignore_string_: ?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_CaseIgnoreString(@as(*const IADsPropertyValue, @ptrCast(self)), bstr_case_ignore_string_);
            }
            pub inline fn getPrintableString(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_PrintableString(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putPrintableString(self: *const T, bstr_printable_string_: ?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_PrintableString(@as(*const IADsPropertyValue, @ptrCast(self)), bstr_printable_string_);
            }
            pub inline fn getNumericString(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_NumericString(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putNumericString(self: *const T, bstr_numeric_string_: ?BSTR) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_NumericString(@as(*const IADsPropertyValue, @ptrCast(self)), bstr_numeric_string_);
            }
            pub inline fn getBoolean(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_Boolean(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putBoolean(self: *const T, ln_boolean_: i32) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_Boolean(@as(*const IADsPropertyValue, @ptrCast(self)), ln_boolean_);
            }
            pub inline fn getInteger(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_Integer(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putInteger(self: *const T, ln_integer_: i32) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_Integer(@as(*const IADsPropertyValue, @ptrCast(self)), ln_integer_);
            }
            pub inline fn getOctetString(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_OctetString(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putOctetString(self: *const T, v_octet_string_: VARIANT) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_OctetString(@as(*const IADsPropertyValue, @ptrCast(self)), v_octet_string_);
            }
            pub inline fn getSecurityDescriptor(self: *const T, retval_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_SecurityDescriptor(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putSecurityDescriptor(self: *const T, p_security_descriptor_: ?*IDispatch) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_SecurityDescriptor(@as(*const IADsPropertyValue, @ptrCast(self)), p_security_descriptor_);
            }
            pub inline fn getLargeInteger(self: *const T, retval_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_LargeInteger(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putLargeInteger(self: *const T, p_large_integer_: ?*IDispatch) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_LargeInteger(@as(*const IADsPropertyValue, @ptrCast(self)), p_large_integer_);
            }
            pub inline fn getUTCTime(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).get_UTCTime(@as(*const IADsPropertyValue, @ptrCast(self)), retval_);
            }
            pub inline fn putUTCTime(self: *const T, da_u_t_c_time_: f64) HRESULT {
                return @as(*const IADsPropertyValue.VTable, @ptrCast(self.vtable)).put_UTCTime(@as(*const IADsPropertyValue, @ptrCast(self)), da_u_t_c_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPropertyValue2_Value = Guid.initString("306e831c-5bc7-11d1-a3b8-00c04fb950dc");
pub const IID_IADsPropertyValue2 = &IID_IADsPropertyValue2_Value;
pub const IADsPropertyValue2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetObjectProperty: *const fn (
            self: *const IADsPropertyValue2,
            ln_a_ds_type: ?*i32,
            pv_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutObjectProperty: *const fn (
            self: *const IADsPropertyValue2,
            ln_a_ds_type: i32,
            v_prop: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getObjectProperty(self: *const T, ln_a_ds_type_: ?*i32, pv_prop_: ?*VARIANT) HRESULT {
                return @as(*const IADsPropertyValue2.VTable, @ptrCast(self.vtable)).GetObjectProperty(@as(*const IADsPropertyValue2, @ptrCast(self)), ln_a_ds_type_, pv_prop_);
            }
            pub inline fn putObjectProperty(self: *const T, ln_a_ds_type_: i32, v_prop_: VARIANT) HRESULT {
                return @as(*const IADsPropertyValue2.VTable, @ptrCast(self.vtable)).PutObjectProperty(@as(*const IADsPropertyValue2, @ptrCast(self)), ln_a_ds_type_, v_prop_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrivateDispatch_Value = Guid.initString("86ab4bbe-65f6-11d1-8c13-00c04fd8d503");
pub const IID_IPrivateDispatch = &IID_IPrivateDispatch_Value;
pub const IPrivateDispatch = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ADSIInitializeDispatchManager: *const fn (
            self: *const IPrivateDispatch,
            dw_extension_id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ADSIGetTypeInfoCount: *const fn (
            self: *const IPrivateDispatch,
            pctinfo: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ADSIGetTypeInfo: *const fn (
            self: *const IPrivateDispatch,
            itinfo: u32,
            lcid: u32,
            pptinfo: ?*?*ITypeInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ADSIGetIDsOfNames: *const fn (
            self: *const IPrivateDispatch,
            riid: ?*const Guid,
            rgsz_names: ?*?*u16,
            c_names: u32,
            lcid: u32,
            rgdispid: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ADSIInvoke: *const fn (
            self: *const IPrivateDispatch,
            dispid_member: i32,
            riid: ?*const Guid,
            lcid: u32,
            w_flags: u16,
            pdispparams: ?*DISPPARAMS,
            pvar_result: ?*VARIANT,
            pexcepinfo: ?*EXCEPINFO,
            pu_arg_err: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn adsiInitializeDispatchManager(self: *const T, dw_extension_id_: i32) HRESULT {
                return @as(*const IPrivateDispatch.VTable, @ptrCast(self.vtable)).ADSIInitializeDispatchManager(@as(*const IPrivateDispatch, @ptrCast(self)), dw_extension_id_);
            }
            pub inline fn adsiGetTypeInfoCount(self: *const T, pctinfo_: ?*u32) HRESULT {
                return @as(*const IPrivateDispatch.VTable, @ptrCast(self.vtable)).ADSIGetTypeInfoCount(@as(*const IPrivateDispatch, @ptrCast(self)), pctinfo_);
            }
            pub inline fn adsiGetTypeInfo(self: *const T, itinfo_: u32, lcid_: u32, pptinfo_: ?*?*ITypeInfo) HRESULT {
                return @as(*const IPrivateDispatch.VTable, @ptrCast(self.vtable)).ADSIGetTypeInfo(@as(*const IPrivateDispatch, @ptrCast(self)), itinfo_, lcid_, pptinfo_);
            }
            pub inline fn adsiGetIDsOfNames(self: *const T, riid_: ?*const Guid, rgsz_names_: ?*?*u16, c_names_: u32, lcid_: u32, rgdispid_: ?*i32) HRESULT {
                return @as(*const IPrivateDispatch.VTable, @ptrCast(self.vtable)).ADSIGetIDsOfNames(@as(*const IPrivateDispatch, @ptrCast(self)), riid_, rgsz_names_, c_names_, lcid_, rgdispid_);
            }
            pub inline fn adsiInvoke(self: *const T, dispid_member_: i32, riid_: ?*const Guid, lcid_: u32, w_flags_: u16, pdispparams_: ?*DISPPARAMS, pvar_result_: ?*VARIANT, pexcepinfo_: ?*EXCEPINFO, pu_arg_err_: ?*u32) HRESULT {
                return @as(*const IPrivateDispatch.VTable, @ptrCast(self.vtable)).ADSIInvoke(@as(*const IPrivateDispatch, @ptrCast(self)), dispid_member_, riid_, lcid_, w_flags_, pdispparams_, pvar_result_, pexcepinfo_, pu_arg_err_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrivateUnknown_Value = Guid.initString("89126bab-6ead-11d1-8c18-00c04fd8d503");
pub const IID_IPrivateUnknown = &IID_IPrivateUnknown_Value;
pub const IPrivateUnknown = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ADSIInitializeObject: *const fn (
            self: *const IPrivateUnknown,
            lpsz_user_name: ?BSTR,
            lpsz_password: ?BSTR,
            ln_reserved: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ADSIReleaseObject: *const fn (
            self: *const IPrivateUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn adsiInitializeObject(self: *const T, lpsz_user_name_: ?BSTR, lpsz_password_: ?BSTR, ln_reserved_: i32) HRESULT {
                return @as(*const IPrivateUnknown.VTable, @ptrCast(self.vtable)).ADSIInitializeObject(@as(*const IPrivateUnknown, @ptrCast(self)), lpsz_user_name_, lpsz_password_, ln_reserved_);
            }
            pub inline fn adsiReleaseObject(self: *const T) HRESULT {
                return @as(*const IPrivateUnknown.VTable, @ptrCast(self.vtable)).ADSIReleaseObject(@as(*const IPrivateUnknown, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsExtension_Value = Guid.initString("3d35553c-d2b0-11d1-b17b-0000f87593a0");
pub const IID_IADsExtension = &IID_IADsExtension_Value;
pub const IADsExtension = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Operate: *const fn (
            self: *const IADsExtension,
            dw_code: u32,
            var_data1: VARIANT,
            var_data2: VARIANT,
            var_data3: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrivateGetIDsOfNames: *const fn (
            self: *const IADsExtension,
            riid: ?*const Guid,
            rgsz_names: ?*?*u16,
            c_names: u32,
            lcid: u32,
            rg_dispid: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrivateInvoke: *const fn (
            self: *const IADsExtension,
            dispid_member: i32,
            riid: ?*const Guid,
            lcid: u32,
            w_flags: u16,
            pdispparams: ?*DISPPARAMS,
            pvar_result: ?*VARIANT,
            pexcepinfo: ?*EXCEPINFO,
            pu_arg_err: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn operate(self: *const T, dw_code_: u32, var_data1_: VARIANT, var_data2_: VARIANT, var_data3_: VARIANT) HRESULT {
                return @as(*const IADsExtension.VTable, @ptrCast(self.vtable)).Operate(@as(*const IADsExtension, @ptrCast(self)), dw_code_, var_data1_, var_data2_, var_data3_);
            }
            pub inline fn privateGetIDsOfNames(self: *const T, riid_: ?*const Guid, rgsz_names_: ?*?*u16, c_names_: u32, lcid_: u32, rg_dispid_: ?*i32) HRESULT {
                return @as(*const IADsExtension.VTable, @ptrCast(self.vtable)).PrivateGetIDsOfNames(@as(*const IADsExtension, @ptrCast(self)), riid_, rgsz_names_, c_names_, lcid_, rg_dispid_);
            }
            pub inline fn privateInvoke(self: *const T, dispid_member_: i32, riid_: ?*const Guid, lcid_: u32, w_flags_: u16, pdispparams_: ?*DISPPARAMS, pvar_result_: ?*VARIANT, pexcepinfo_: ?*EXCEPINFO, pu_arg_err_: ?*u32) HRESULT {
                return @as(*const IADsExtension.VTable, @ptrCast(self.vtable)).PrivateInvoke(@as(*const IADsExtension, @ptrCast(self)), dispid_member_, riid_, lcid_, w_flags_, pdispparams_, pvar_result_, pexcepinfo_, pu_arg_err_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsDeleteOps_Value = Guid.initString("b2bd0902-8878-11d1-8c21-00c04fd8d503");
pub const IID_IADsDeleteOps = &IID_IADsDeleteOps_Value;
pub const IADsDeleteOps = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        DeleteObject: *const fn (
            self: *const IADsDeleteOps,
            ln_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn deleteObject(self: *const T, ln_flags_: i32) HRESULT {
                return @as(*const IADsDeleteOps.VTable, @ptrCast(self.vtable)).DeleteObject(@as(*const IADsDeleteOps, @ptrCast(self)), ln_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsNamespaces_Value = Guid.initString("28b96ba0-b330-11cf-a9ad-00aa006bc149");
pub const IID_IADsNamespaces = &IID_IADsNamespaces_Value;
pub const IADsNamespaces = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultContainer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsNamespaces,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultContainer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsNamespaces,
            bstr_default_container: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getDefaultContainer(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsNamespaces.VTable, @ptrCast(self.vtable)).get_DefaultContainer(@as(*const IADsNamespaces, @ptrCast(self)), retval_);
            }
            pub inline fn putDefaultContainer(self: *const T, bstr_default_container_: ?BSTR) HRESULT {
                return @as(*const IADsNamespaces.VTable, @ptrCast(self.vtable)).put_DefaultContainer(@as(*const IADsNamespaces, @ptrCast(self)), bstr_default_container_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsClass_Value = Guid.initString("c8f93dd0-4ae0-11cf-9e73-00aa004a5691");
pub const IID_IADsClass = &IID_IADsClass_Value;
pub const IADsClass = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrimaryInterface: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            bstr_c_l_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            bstr_o_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Abstract: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Abstract: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            f_abstract: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Auxiliary: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Auxiliary: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            f_auxiliary: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MandatoryProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MandatoryProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            v_mandatory_properties: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OptionalProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OptionalProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            v_optional_properties: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NamingProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NamingProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            v_naming_properties: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DerivedFrom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DerivedFrom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            v_derived_from: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuxDerivedFrom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuxDerivedFrom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            v_aux_derived_from: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PossibleSuperiors: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PossibleSuperiors: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            v_possible_superiors: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Containment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Containment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            v_containment: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Container: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Container: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            f_container: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HelpFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HelpFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            bstr_help_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HelpFileContext: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HelpFileContext: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsClass,
            ln_help_file_context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Qualifiers: *const fn (
            self: *const IADsClass,
            pp_qualifiers: ?*?*IADsCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getPrimaryInterface(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_PrimaryInterface(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn getCLSID(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_CLSID(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putCLSID(self: *const T, bstr_c_l_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_CLSID(@as(*const IADsClass, @ptrCast(self)), bstr_c_l_s_i_d_);
            }
            pub inline fn getOID(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_OID(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putOID(self: *const T, bstr_o_i_d_: ?BSTR) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_OID(@as(*const IADsClass, @ptrCast(self)), bstr_o_i_d_);
            }
            pub inline fn getAbstract(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_Abstract(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putAbstract(self: *const T, f_abstract_: i16) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_Abstract(@as(*const IADsClass, @ptrCast(self)), f_abstract_);
            }
            pub inline fn getAuxiliary(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_Auxiliary(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putAuxiliary(self: *const T, f_auxiliary_: i16) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_Auxiliary(@as(*const IADsClass, @ptrCast(self)), f_auxiliary_);
            }
            pub inline fn getMandatoryProperties(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_MandatoryProperties(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putMandatoryProperties(self: *const T, v_mandatory_properties_: VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_MandatoryProperties(@as(*const IADsClass, @ptrCast(self)), v_mandatory_properties_);
            }
            pub inline fn getOptionalProperties(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_OptionalProperties(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putOptionalProperties(self: *const T, v_optional_properties_: VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_OptionalProperties(@as(*const IADsClass, @ptrCast(self)), v_optional_properties_);
            }
            pub inline fn getNamingProperties(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_NamingProperties(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putNamingProperties(self: *const T, v_naming_properties_: VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_NamingProperties(@as(*const IADsClass, @ptrCast(self)), v_naming_properties_);
            }
            pub inline fn getDerivedFrom(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_DerivedFrom(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putDerivedFrom(self: *const T, v_derived_from_: VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_DerivedFrom(@as(*const IADsClass, @ptrCast(self)), v_derived_from_);
            }
            pub inline fn getAuxDerivedFrom(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_AuxDerivedFrom(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putAuxDerivedFrom(self: *const T, v_aux_derived_from_: VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_AuxDerivedFrom(@as(*const IADsClass, @ptrCast(self)), v_aux_derived_from_);
            }
            pub inline fn getPossibleSuperiors(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_PossibleSuperiors(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putPossibleSuperiors(self: *const T, v_possible_superiors_: VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_PossibleSuperiors(@as(*const IADsClass, @ptrCast(self)), v_possible_superiors_);
            }
            pub inline fn getContainment(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_Containment(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putContainment(self: *const T, v_containment_: VARIANT) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_Containment(@as(*const IADsClass, @ptrCast(self)), v_containment_);
            }
            pub inline fn getContainer(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_Container(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putContainer(self: *const T, f_container_: i16) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_Container(@as(*const IADsClass, @ptrCast(self)), f_container_);
            }
            pub inline fn getHelpFileName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_HelpFileName(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putHelpFileName(self: *const T, bstr_help_file_name_: ?BSTR) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_HelpFileName(@as(*const IADsClass, @ptrCast(self)), bstr_help_file_name_);
            }
            pub inline fn getHelpFileContext(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).get_HelpFileContext(@as(*const IADsClass, @ptrCast(self)), retval_);
            }
            pub inline fn putHelpFileContext(self: *const T, ln_help_file_context_: i32) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).put_HelpFileContext(@as(*const IADsClass, @ptrCast(self)), ln_help_file_context_);
            }
            pub inline fn qualifiers(self: *const T, pp_qualifiers_: ?*?*IADsCollection) HRESULT {
                return @as(*const IADsClass.VTable, @ptrCast(self.vtable)).Qualifiers(@as(*const IADsClass, @ptrCast(self)), pp_qualifiers_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsProperty_Value = Guid.initString("c8f93dd3-4ae0-11cf-9e73-00aa004a5691");
pub const IID_IADsProperty = &IID_IADsProperty_Value;
pub const IADsProperty = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            bstr_o_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Syntax: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Syntax: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            bstr_syntax: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxRange: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxRange: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            ln_max_range: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinRange: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinRange: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            ln_min_range: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MultiValued: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MultiValued: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsProperty,
            f_multi_valued: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Qualifiers: *const fn (
            self: *const IADsProperty,
            pp_qualifiers: ?*?*IADsCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getOID(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).get_OID(@as(*const IADsProperty, @ptrCast(self)), retval_);
            }
            pub inline fn putOID(self: *const T, bstr_o_i_d_: ?BSTR) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).put_OID(@as(*const IADsProperty, @ptrCast(self)), bstr_o_i_d_);
            }
            pub inline fn getSyntax(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).get_Syntax(@as(*const IADsProperty, @ptrCast(self)), retval_);
            }
            pub inline fn putSyntax(self: *const T, bstr_syntax_: ?BSTR) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).put_Syntax(@as(*const IADsProperty, @ptrCast(self)), bstr_syntax_);
            }
            pub inline fn getMaxRange(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).get_MaxRange(@as(*const IADsProperty, @ptrCast(self)), retval_);
            }
            pub inline fn putMaxRange(self: *const T, ln_max_range_: i32) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).put_MaxRange(@as(*const IADsProperty, @ptrCast(self)), ln_max_range_);
            }
            pub inline fn getMinRange(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).get_MinRange(@as(*const IADsProperty, @ptrCast(self)), retval_);
            }
            pub inline fn putMinRange(self: *const T, ln_min_range_: i32) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).put_MinRange(@as(*const IADsProperty, @ptrCast(self)), ln_min_range_);
            }
            pub inline fn getMultiValued(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).get_MultiValued(@as(*const IADsProperty, @ptrCast(self)), retval_);
            }
            pub inline fn putMultiValued(self: *const T, f_multi_valued_: i16) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).put_MultiValued(@as(*const IADsProperty, @ptrCast(self)), f_multi_valued_);
            }
            pub inline fn qualifiers(self: *const T, pp_qualifiers_: ?*?*IADsCollection) HRESULT {
                return @as(*const IADsProperty.VTable, @ptrCast(self.vtable)).Qualifiers(@as(*const IADsProperty, @ptrCast(self)), pp_qualifiers_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsSyntax_Value = Guid.initString("c8f93dd2-4ae0-11cf-9e73-00aa004a5691");
pub const IID_IADsSyntax = &IID_IADsSyntax_Value;
pub const IADsSyntax = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OleAutoDataType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSyntax,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OleAutoDataType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSyntax,
            ln_ole_auto_data_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getOleAutoDataType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsSyntax.VTable, @ptrCast(self.vtable)).get_OleAutoDataType(@as(*const IADsSyntax, @ptrCast(self)), retval_);
            }
            pub inline fn putOleAutoDataType(self: *const T, ln_ole_auto_data_type_: i32) HRESULT {
                return @as(*const IADsSyntax.VTable, @ptrCast(self.vtable)).put_OleAutoDataType(@as(*const IADsSyntax, @ptrCast(self)), ln_ole_auto_data_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsLocality_Value = Guid.initString("a05e03a2-effe-11cf-8abc-00c04fd8d503");
pub const IID_IADsLocality = &IID_IADsLocality_Value;
pub const IADsLocality = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLocality,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLocality,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalityName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLocality,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalityName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLocality,
            bstr_locality_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PostalAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLocality,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PostalAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLocality,
            bstr_postal_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SeeAlso: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLocality,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SeeAlso: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLocality,
            v_see_also: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsLocality.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsLocality, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsLocality.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsLocality, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getLocalityName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsLocality.VTable, @ptrCast(self.vtable)).get_LocalityName(@as(*const IADsLocality, @ptrCast(self)), retval_);
            }
            pub inline fn putLocalityName(self: *const T, bstr_locality_name_: ?BSTR) HRESULT {
                return @as(*const IADsLocality.VTable, @ptrCast(self.vtable)).put_LocalityName(@as(*const IADsLocality, @ptrCast(self)), bstr_locality_name_);
            }
            pub inline fn getPostalAddress(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsLocality.VTable, @ptrCast(self.vtable)).get_PostalAddress(@as(*const IADsLocality, @ptrCast(self)), retval_);
            }
            pub inline fn putPostalAddress(self: *const T, bstr_postal_address_: ?BSTR) HRESULT {
                return @as(*const IADsLocality.VTable, @ptrCast(self.vtable)).put_PostalAddress(@as(*const IADsLocality, @ptrCast(self)), bstr_postal_address_);
            }
            pub inline fn getSeeAlso(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsLocality.VTable, @ptrCast(self.vtable)).get_SeeAlso(@as(*const IADsLocality, @ptrCast(self)), retval_);
            }
            pub inline fn putSeeAlso(self: *const T, v_see_also_: VARIANT) HRESULT {
                return @as(*const IADsLocality.VTable, @ptrCast(self.vtable)).put_SeeAlso(@as(*const IADsLocality, @ptrCast(self)), v_see_also_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsO_Value = Guid.initString("a1cd2dc6-effe-11cf-8abc-00c04fd8d503");
pub const IID_IADsO = &IID_IADsO_Value;
pub const IADsO = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalityName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalityName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            bstr_locality_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PostalAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PostalAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            bstr_postal_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TelephoneNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TelephoneNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            bstr_telephone_number: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            bstr_fax_number: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SeeAlso: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SeeAlso: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsO,
            v_see_also: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsO, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsO, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getLocalityName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).get_LocalityName(@as(*const IADsO, @ptrCast(self)), retval_);
            }
            pub inline fn putLocalityName(self: *const T, bstr_locality_name_: ?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).put_LocalityName(@as(*const IADsO, @ptrCast(self)), bstr_locality_name_);
            }
            pub inline fn getPostalAddress(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).get_PostalAddress(@as(*const IADsO, @ptrCast(self)), retval_);
            }
            pub inline fn putPostalAddress(self: *const T, bstr_postal_address_: ?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).put_PostalAddress(@as(*const IADsO, @ptrCast(self)), bstr_postal_address_);
            }
            pub inline fn getTelephoneNumber(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).get_TelephoneNumber(@as(*const IADsO, @ptrCast(self)), retval_);
            }
            pub inline fn putTelephoneNumber(self: *const T, bstr_telephone_number_: ?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).put_TelephoneNumber(@as(*const IADsO, @ptrCast(self)), bstr_telephone_number_);
            }
            pub inline fn getFaxNumber(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).get_FaxNumber(@as(*const IADsO, @ptrCast(self)), retval_);
            }
            pub inline fn putFaxNumber(self: *const T, bstr_fax_number_: ?BSTR) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).put_FaxNumber(@as(*const IADsO, @ptrCast(self)), bstr_fax_number_);
            }
            pub inline fn getSeeAlso(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).get_SeeAlso(@as(*const IADsO, @ptrCast(self)), retval_);
            }
            pub inline fn putSeeAlso(self: *const T, v_see_also_: VARIANT) HRESULT {
                return @as(*const IADsO.VTable, @ptrCast(self.vtable)).put_SeeAlso(@as(*const IADsO, @ptrCast(self)), v_see_also_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsOU_Value = Guid.initString("a2f733b8-effe-11cf-8abc-00c04fd8d503");
pub const IID_IADsOU = &IID_IADsOU_Value;
pub const IADsOU = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalityName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalityName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            bstr_locality_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PostalAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PostalAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            bstr_postal_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TelephoneNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TelephoneNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            bstr_telephone_number: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            bstr_fax_number: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SeeAlso: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SeeAlso: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            v_see_also: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BusinessCategory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BusinessCategory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOU,
            bstr_business_category: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsOU, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsOU, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getLocalityName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).get_LocalityName(@as(*const IADsOU, @ptrCast(self)), retval_);
            }
            pub inline fn putLocalityName(self: *const T, bstr_locality_name_: ?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).put_LocalityName(@as(*const IADsOU, @ptrCast(self)), bstr_locality_name_);
            }
            pub inline fn getPostalAddress(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).get_PostalAddress(@as(*const IADsOU, @ptrCast(self)), retval_);
            }
            pub inline fn putPostalAddress(self: *const T, bstr_postal_address_: ?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).put_PostalAddress(@as(*const IADsOU, @ptrCast(self)), bstr_postal_address_);
            }
            pub inline fn getTelephoneNumber(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).get_TelephoneNumber(@as(*const IADsOU, @ptrCast(self)), retval_);
            }
            pub inline fn putTelephoneNumber(self: *const T, bstr_telephone_number_: ?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).put_TelephoneNumber(@as(*const IADsOU, @ptrCast(self)), bstr_telephone_number_);
            }
            pub inline fn getFaxNumber(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).get_FaxNumber(@as(*const IADsOU, @ptrCast(self)), retval_);
            }
            pub inline fn putFaxNumber(self: *const T, bstr_fax_number_: ?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).put_FaxNumber(@as(*const IADsOU, @ptrCast(self)), bstr_fax_number_);
            }
            pub inline fn getSeeAlso(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).get_SeeAlso(@as(*const IADsOU, @ptrCast(self)), retval_);
            }
            pub inline fn putSeeAlso(self: *const T, v_see_also_: VARIANT) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).put_SeeAlso(@as(*const IADsOU, @ptrCast(self)), v_see_also_);
            }
            pub inline fn getBusinessCategory(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).get_BusinessCategory(@as(*const IADsOU, @ptrCast(self)), retval_);
            }
            pub inline fn putBusinessCategory(self: *const T, bstr_business_category_: ?BSTR) HRESULT {
                return @as(*const IADsOU.VTable, @ptrCast(self.vtable)).put_BusinessCategory(@as(*const IADsOU, @ptrCast(self)), bstr_business_category_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsDomain_Value = Guid.initString("00e4c220-fd16-11ce-abc4-02608c9e7553");
pub const IID_IADsDomain = &IID_IADsDomain_Value;
pub const IADsDomain = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsWorkgroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinPasswordLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinPasswordLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            ln_min_password_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinPasswordAge: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MinPasswordAge: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            ln_min_password_age: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxPasswordAge: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxPasswordAge: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            ln_max_password_age: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxBadPasswordsAllowed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxBadPasswordsAllowed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            ln_max_bad_passwords_allowed: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PasswordHistoryLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PasswordHistoryLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            ln_password_history_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PasswordAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PasswordAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            ln_password_attributes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoUnlockInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoUnlockInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            ln_auto_unlock_interval: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LockoutObservationInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LockoutObservationInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDomain,
            ln_lockout_observation_interval: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getIsWorkgroup(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).get_IsWorkgroup(@as(*const IADsDomain, @ptrCast(self)), retval_);
            }
            pub inline fn getMinPasswordLength(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).get_MinPasswordLength(@as(*const IADsDomain, @ptrCast(self)), retval_);
            }
            pub inline fn putMinPasswordLength(self: *const T, ln_min_password_length_: i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).put_MinPasswordLength(@as(*const IADsDomain, @ptrCast(self)), ln_min_password_length_);
            }
            pub inline fn getMinPasswordAge(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).get_MinPasswordAge(@as(*const IADsDomain, @ptrCast(self)), retval_);
            }
            pub inline fn putMinPasswordAge(self: *const T, ln_min_password_age_: i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).put_MinPasswordAge(@as(*const IADsDomain, @ptrCast(self)), ln_min_password_age_);
            }
            pub inline fn getMaxPasswordAge(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).get_MaxPasswordAge(@as(*const IADsDomain, @ptrCast(self)), retval_);
            }
            pub inline fn putMaxPasswordAge(self: *const T, ln_max_password_age_: i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).put_MaxPasswordAge(@as(*const IADsDomain, @ptrCast(self)), ln_max_password_age_);
            }
            pub inline fn getMaxBadPasswordsAllowed(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).get_MaxBadPasswordsAllowed(@as(*const IADsDomain, @ptrCast(self)), retval_);
            }
            pub inline fn putMaxBadPasswordsAllowed(self: *const T, ln_max_bad_passwords_allowed_: i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).put_MaxBadPasswordsAllowed(@as(*const IADsDomain, @ptrCast(self)), ln_max_bad_passwords_allowed_);
            }
            pub inline fn getPasswordHistoryLength(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).get_PasswordHistoryLength(@as(*const IADsDomain, @ptrCast(self)), retval_);
            }
            pub inline fn putPasswordHistoryLength(self: *const T, ln_password_history_length_: i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).put_PasswordHistoryLength(@as(*const IADsDomain, @ptrCast(self)), ln_password_history_length_);
            }
            pub inline fn getPasswordAttributes(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).get_PasswordAttributes(@as(*const IADsDomain, @ptrCast(self)), retval_);
            }
            pub inline fn putPasswordAttributes(self: *const T, ln_password_attributes_: i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).put_PasswordAttributes(@as(*const IADsDomain, @ptrCast(self)), ln_password_attributes_);
            }
            pub inline fn getAutoUnlockInterval(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).get_AutoUnlockInterval(@as(*const IADsDomain, @ptrCast(self)), retval_);
            }
            pub inline fn putAutoUnlockInterval(self: *const T, ln_auto_unlock_interval_: i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).put_AutoUnlockInterval(@as(*const IADsDomain, @ptrCast(self)), ln_auto_unlock_interval_);
            }
            pub inline fn getLockoutObservationInterval(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).get_LockoutObservationInterval(@as(*const IADsDomain, @ptrCast(self)), retval_);
            }
            pub inline fn putLockoutObservationInterval(self: *const T, ln_lockout_observation_interval_: i32) HRESULT {
                return @as(*const IADsDomain.VTable, @ptrCast(self.vtable)).put_LockoutObservationInterval(@as(*const IADsDomain, @ptrCast(self)), ln_lockout_observation_interval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsComputer_Value = Guid.initString("efe3cc70-1d9f-11cf-b1f3-02608c9e7553");
pub const IID_IADsComputer = &IID_IADsComputer_Value;
pub const IADsComputer = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ComputerID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Site: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Location: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Location: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_location: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrimaryUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrimaryUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_primary_user: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Owner: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Owner: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_owner: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Division: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Division: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_division: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Department: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Department: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_department: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Role: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Role: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_role: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OperatingSystem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OperatingSystem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_operating_system: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OperatingSystemVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OperatingSystemVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_operating_system_version: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Model: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Model: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_model: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Processor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Processor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_processor: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessorCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProcessorCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_processor_count: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MemorySize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MemorySize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_memory_size: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StorageCapacity: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StorageCapacity: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            bstr_storage_capacity: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsComputer,
            v_net_addresses: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getComputerID(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_ComputerID(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn getSite(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_Site(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsComputer, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getLocation(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_Location(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putLocation(self: *const T, bstr_location_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_Location(@as(*const IADsComputer, @ptrCast(self)), bstr_location_);
            }
            pub inline fn getPrimaryUser(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_PrimaryUser(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putPrimaryUser(self: *const T, bstr_primary_user_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_PrimaryUser(@as(*const IADsComputer, @ptrCast(self)), bstr_primary_user_);
            }
            pub inline fn getOwner(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_Owner(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putOwner(self: *const T, bstr_owner_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_Owner(@as(*const IADsComputer, @ptrCast(self)), bstr_owner_);
            }
            pub inline fn getDivision(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_Division(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putDivision(self: *const T, bstr_division_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_Division(@as(*const IADsComputer, @ptrCast(self)), bstr_division_);
            }
            pub inline fn getDepartment(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_Department(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putDepartment(self: *const T, bstr_department_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_Department(@as(*const IADsComputer, @ptrCast(self)), bstr_department_);
            }
            pub inline fn getRole(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_Role(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putRole(self: *const T, bstr_role_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_Role(@as(*const IADsComputer, @ptrCast(self)), bstr_role_);
            }
            pub inline fn getOperatingSystem(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_OperatingSystem(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putOperatingSystem(self: *const T, bstr_operating_system_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_OperatingSystem(@as(*const IADsComputer, @ptrCast(self)), bstr_operating_system_);
            }
            pub inline fn getOperatingSystemVersion(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_OperatingSystemVersion(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putOperatingSystemVersion(self: *const T, bstr_operating_system_version_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_OperatingSystemVersion(@as(*const IADsComputer, @ptrCast(self)), bstr_operating_system_version_);
            }
            pub inline fn getModel(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_Model(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putModel(self: *const T, bstr_model_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_Model(@as(*const IADsComputer, @ptrCast(self)), bstr_model_);
            }
            pub inline fn getProcessor(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_Processor(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putProcessor(self: *const T, bstr_processor_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_Processor(@as(*const IADsComputer, @ptrCast(self)), bstr_processor_);
            }
            pub inline fn getProcessorCount(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_ProcessorCount(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putProcessorCount(self: *const T, bstr_processor_count_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_ProcessorCount(@as(*const IADsComputer, @ptrCast(self)), bstr_processor_count_);
            }
            pub inline fn getMemorySize(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_MemorySize(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putMemorySize(self: *const T, bstr_memory_size_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_MemorySize(@as(*const IADsComputer, @ptrCast(self)), bstr_memory_size_);
            }
            pub inline fn getStorageCapacity(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_StorageCapacity(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putStorageCapacity(self: *const T, bstr_storage_capacity_: ?BSTR) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_StorageCapacity(@as(*const IADsComputer, @ptrCast(self)), bstr_storage_capacity_);
            }
            pub inline fn getNetAddresses(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).get_NetAddresses(@as(*const IADsComputer, @ptrCast(self)), retval_);
            }
            pub inline fn putNetAddresses(self: *const T, v_net_addresses_: VARIANT) HRESULT {
                return @as(*const IADsComputer.VTable, @ptrCast(self.vtable)).put_NetAddresses(@as(*const IADsComputer, @ptrCast(self)), v_net_addresses_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsComputerOperations_Value = Guid.initString("ef497680-1d9f-11cf-b1f3-02608c9e7553");
pub const IID_IADsComputerOperations = &IID_IADsComputerOperations_Value;
pub const IADsComputerOperations = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        Status: *const fn (
            self: *const IADsComputerOperations,
            pp_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const IADsComputerOperations,
            b_reboot: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn status(self: *const T, pp_object_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsComputerOperations.VTable, @ptrCast(self.vtable)).Status(@as(*const IADsComputerOperations, @ptrCast(self)), pp_object_);
            }
            pub inline fn shutdown(self: *const T, b_reboot_: i16) HRESULT {
                return @as(*const IADsComputerOperations.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const IADsComputerOperations, @ptrCast(self)), b_reboot_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsGroup_Value = Guid.initString("27636b00-410f-11cf-b1ff-02608c9e7553");
pub const IID_IADsGroup = &IID_IADsGroup_Value;
pub const IADsGroup = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsGroup,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsGroup,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Members: *const fn (
            self: *const IADsGroup,
            pp_members: ?*?*IADsMembers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMember: *const fn (
            self: *const IADsGroup,
            bstr_member: ?BSTR,
            b_member: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IADsGroup,
            bstr_new_item: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IADsGroup,
            bstr_item_to_be_removed: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsGroup.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsGroup, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsGroup.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsGroup, @ptrCast(self)), bstr_description_);
            }
            pub inline fn members(self: *const T, pp_members_: ?*?*IADsMembers) HRESULT {
                return @as(*const IADsGroup.VTable, @ptrCast(self.vtable)).Members(@as(*const IADsGroup, @ptrCast(self)), pp_members_);
            }
            pub inline fn isMember(self: *const T, bstr_member_: ?BSTR, b_member_: ?*i16) HRESULT {
                return @as(*const IADsGroup.VTable, @ptrCast(self.vtable)).IsMember(@as(*const IADsGroup, @ptrCast(self)), bstr_member_, b_member_);
            }
            pub inline fn add(self: *const T, bstr_new_item_: ?BSTR) HRESULT {
                return @as(*const IADsGroup.VTable, @ptrCast(self.vtable)).Add(@as(*const IADsGroup, @ptrCast(self)), bstr_new_item_);
            }
            pub inline fn remove(self: *const T, bstr_item_to_be_removed_: ?BSTR) HRESULT {
                return @as(*const IADsGroup.VTable, @ptrCast(self.vtable)).Remove(@as(*const IADsGroup, @ptrCast(self)), bstr_item_to_be_removed_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsUser_Value = Guid.initString("3e37e320-17e2-11cf-abc4-02608c9e7553");
pub const IID_IADsUser = &IID_IADsUser_Value;
pub const IADsUser = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BadLoginAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BadLoginCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastLogin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastLogoff: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastFailedLogin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PasswordLastChanged: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Division: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Division: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_division: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Department: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Department: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_department: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EmployeeID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EmployeeID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_employee_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FullName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FullName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_full_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FirstName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FirstName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_first_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LastName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_last_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OtherName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OtherName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_other_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NamePrefix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NamePrefix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_name_prefix: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NameSuffix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NameSuffix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_name_suffix: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Title: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Title: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_title: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Manager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Manager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_manager: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TelephoneHome: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TelephoneHome: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_telephone_home: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TelephoneMobile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TelephoneMobile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_telephone_mobile: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TelephoneNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TelephoneNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_telephone_number: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TelephonePager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TelephonePager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_telephone_pager: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FaxNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_fax_number: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OfficeLocations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OfficeLocations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_office_locations: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PostalAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PostalAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_postal_addresses: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PostalCodes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PostalCodes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_postal_codes: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SeeAlso: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SeeAlso: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_see_also: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccountDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AccountDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            f_account_disabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccountExpirationDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AccountExpirationDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            da_account_expiration_date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GraceLoginsAllowed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GraceLoginsAllowed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            ln_grace_logins_allowed: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GraceLoginsRemaining: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GraceLoginsRemaining: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            ln_grace_logins_remaining: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsAccountLocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsAccountLocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            f_is_account_locked: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoginHours: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LoginHours: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_login_hours: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoginWorkstations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LoginWorkstations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_login_workstations: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxLogins: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxLogins: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            ln_max_logins: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxStorage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxStorage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            ln_max_storage: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PasswordExpirationDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PasswordExpirationDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            da_password_expiration_date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PasswordMinimumLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PasswordMinimumLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            ln_password_minimum_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PasswordRequired: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PasswordRequired: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            f_password_required: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequireUniquePassword: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequireUniquePassword: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            f_require_unique_password: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EmailAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EmailAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_email_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HomeDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HomeDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_home_directory: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Languages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Languages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_languages: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_profile: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoginScript: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LoginScript: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_login_script: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Picture: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Picture: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            v_picture: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HomePage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HomePage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsUser,
            bstr_home_page: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Groups: *const fn (
            self: *const IADsUser,
            pp_groups: ?*?*IADsMembers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPassword: *const fn (
            self: *const IADsUser,
            new_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangePassword: *const fn (
            self: *const IADsUser,
            bstr_old_password: ?BSTR,
            bstr_new_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getBadLoginAddress(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_BadLoginAddress(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn getBadLoginCount(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_BadLoginCount(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn getLastLogin(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_LastLogin(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn getLastLogoff(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_LastLogoff(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn getLastFailedLogin(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_LastFailedLogin(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn getPasswordLastChanged(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_PasswordLastChanged(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsUser, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getDivision(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_Division(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putDivision(self: *const T, bstr_division_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_Division(@as(*const IADsUser, @ptrCast(self)), bstr_division_);
            }
            pub inline fn getDepartment(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_Department(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putDepartment(self: *const T, bstr_department_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_Department(@as(*const IADsUser, @ptrCast(self)), bstr_department_);
            }
            pub inline fn getEmployeeID(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_EmployeeID(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putEmployeeID(self: *const T, bstr_employee_i_d_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_EmployeeID(@as(*const IADsUser, @ptrCast(self)), bstr_employee_i_d_);
            }
            pub inline fn getFullName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_FullName(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putFullName(self: *const T, bstr_full_name_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_FullName(@as(*const IADsUser, @ptrCast(self)), bstr_full_name_);
            }
            pub inline fn getFirstName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_FirstName(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putFirstName(self: *const T, bstr_first_name_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_FirstName(@as(*const IADsUser, @ptrCast(self)), bstr_first_name_);
            }
            pub inline fn getLastName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_LastName(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putLastName(self: *const T, bstr_last_name_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_LastName(@as(*const IADsUser, @ptrCast(self)), bstr_last_name_);
            }
            pub inline fn getOtherName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_OtherName(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putOtherName(self: *const T, bstr_other_name_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_OtherName(@as(*const IADsUser, @ptrCast(self)), bstr_other_name_);
            }
            pub inline fn getNamePrefix(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_NamePrefix(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putNamePrefix(self: *const T, bstr_name_prefix_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_NamePrefix(@as(*const IADsUser, @ptrCast(self)), bstr_name_prefix_);
            }
            pub inline fn getNameSuffix(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_NameSuffix(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putNameSuffix(self: *const T, bstr_name_suffix_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_NameSuffix(@as(*const IADsUser, @ptrCast(self)), bstr_name_suffix_);
            }
            pub inline fn getTitle(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_Title(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putTitle(self: *const T, bstr_title_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_Title(@as(*const IADsUser, @ptrCast(self)), bstr_title_);
            }
            pub inline fn getManager(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_Manager(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putManager(self: *const T, bstr_manager_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_Manager(@as(*const IADsUser, @ptrCast(self)), bstr_manager_);
            }
            pub inline fn getTelephoneHome(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_TelephoneHome(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putTelephoneHome(self: *const T, v_telephone_home_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_TelephoneHome(@as(*const IADsUser, @ptrCast(self)), v_telephone_home_);
            }
            pub inline fn getTelephoneMobile(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_TelephoneMobile(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putTelephoneMobile(self: *const T, v_telephone_mobile_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_TelephoneMobile(@as(*const IADsUser, @ptrCast(self)), v_telephone_mobile_);
            }
            pub inline fn getTelephoneNumber(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_TelephoneNumber(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putTelephoneNumber(self: *const T, v_telephone_number_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_TelephoneNumber(@as(*const IADsUser, @ptrCast(self)), v_telephone_number_);
            }
            pub inline fn getTelephonePager(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_TelephonePager(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putTelephonePager(self: *const T, v_telephone_pager_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_TelephonePager(@as(*const IADsUser, @ptrCast(self)), v_telephone_pager_);
            }
            pub inline fn getFaxNumber(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_FaxNumber(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putFaxNumber(self: *const T, v_fax_number_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_FaxNumber(@as(*const IADsUser, @ptrCast(self)), v_fax_number_);
            }
            pub inline fn getOfficeLocations(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_OfficeLocations(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putOfficeLocations(self: *const T, v_office_locations_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_OfficeLocations(@as(*const IADsUser, @ptrCast(self)), v_office_locations_);
            }
            pub inline fn getPostalAddresses(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_PostalAddresses(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putPostalAddresses(self: *const T, v_postal_addresses_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_PostalAddresses(@as(*const IADsUser, @ptrCast(self)), v_postal_addresses_);
            }
            pub inline fn getPostalCodes(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_PostalCodes(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putPostalCodes(self: *const T, v_postal_codes_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_PostalCodes(@as(*const IADsUser, @ptrCast(self)), v_postal_codes_);
            }
            pub inline fn getSeeAlso(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_SeeAlso(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putSeeAlso(self: *const T, v_see_also_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_SeeAlso(@as(*const IADsUser, @ptrCast(self)), v_see_also_);
            }
            pub inline fn getAccountDisabled(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_AccountDisabled(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putAccountDisabled(self: *const T, f_account_disabled_: i16) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_AccountDisabled(@as(*const IADsUser, @ptrCast(self)), f_account_disabled_);
            }
            pub inline fn getAccountExpirationDate(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_AccountExpirationDate(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putAccountExpirationDate(self: *const T, da_account_expiration_date_: f64) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_AccountExpirationDate(@as(*const IADsUser, @ptrCast(self)), da_account_expiration_date_);
            }
            pub inline fn getGraceLoginsAllowed(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_GraceLoginsAllowed(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putGraceLoginsAllowed(self: *const T, ln_grace_logins_allowed_: i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_GraceLoginsAllowed(@as(*const IADsUser, @ptrCast(self)), ln_grace_logins_allowed_);
            }
            pub inline fn getGraceLoginsRemaining(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_GraceLoginsRemaining(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putGraceLoginsRemaining(self: *const T, ln_grace_logins_remaining_: i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_GraceLoginsRemaining(@as(*const IADsUser, @ptrCast(self)), ln_grace_logins_remaining_);
            }
            pub inline fn getIsAccountLocked(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_IsAccountLocked(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putIsAccountLocked(self: *const T, f_is_account_locked_: i16) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_IsAccountLocked(@as(*const IADsUser, @ptrCast(self)), f_is_account_locked_);
            }
            pub inline fn getLoginHours(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_LoginHours(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putLoginHours(self: *const T, v_login_hours_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_LoginHours(@as(*const IADsUser, @ptrCast(self)), v_login_hours_);
            }
            pub inline fn getLoginWorkstations(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_LoginWorkstations(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putLoginWorkstations(self: *const T, v_login_workstations_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_LoginWorkstations(@as(*const IADsUser, @ptrCast(self)), v_login_workstations_);
            }
            pub inline fn getMaxLogins(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_MaxLogins(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putMaxLogins(self: *const T, ln_max_logins_: i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_MaxLogins(@as(*const IADsUser, @ptrCast(self)), ln_max_logins_);
            }
            pub inline fn getMaxStorage(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_MaxStorage(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putMaxStorage(self: *const T, ln_max_storage_: i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_MaxStorage(@as(*const IADsUser, @ptrCast(self)), ln_max_storage_);
            }
            pub inline fn getPasswordExpirationDate(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_PasswordExpirationDate(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putPasswordExpirationDate(self: *const T, da_password_expiration_date_: f64) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_PasswordExpirationDate(@as(*const IADsUser, @ptrCast(self)), da_password_expiration_date_);
            }
            pub inline fn getPasswordMinimumLength(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_PasswordMinimumLength(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putPasswordMinimumLength(self: *const T, ln_password_minimum_length_: i32) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_PasswordMinimumLength(@as(*const IADsUser, @ptrCast(self)), ln_password_minimum_length_);
            }
            pub inline fn getPasswordRequired(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_PasswordRequired(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putPasswordRequired(self: *const T, f_password_required_: i16) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_PasswordRequired(@as(*const IADsUser, @ptrCast(self)), f_password_required_);
            }
            pub inline fn getRequireUniquePassword(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_RequireUniquePassword(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putRequireUniquePassword(self: *const T, f_require_unique_password_: i16) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_RequireUniquePassword(@as(*const IADsUser, @ptrCast(self)), f_require_unique_password_);
            }
            pub inline fn getEmailAddress(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_EmailAddress(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putEmailAddress(self: *const T, bstr_email_address_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_EmailAddress(@as(*const IADsUser, @ptrCast(self)), bstr_email_address_);
            }
            pub inline fn getHomeDirectory(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_HomeDirectory(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putHomeDirectory(self: *const T, bstr_home_directory_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_HomeDirectory(@as(*const IADsUser, @ptrCast(self)), bstr_home_directory_);
            }
            pub inline fn getLanguages(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_Languages(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putLanguages(self: *const T, v_languages_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_Languages(@as(*const IADsUser, @ptrCast(self)), v_languages_);
            }
            pub inline fn getProfile(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_Profile(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putProfile(self: *const T, bstr_profile_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_Profile(@as(*const IADsUser, @ptrCast(self)), bstr_profile_);
            }
            pub inline fn getLoginScript(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_LoginScript(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putLoginScript(self: *const T, bstr_login_script_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_LoginScript(@as(*const IADsUser, @ptrCast(self)), bstr_login_script_);
            }
            pub inline fn getPicture(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_Picture(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putPicture(self: *const T, v_picture_: VARIANT) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_Picture(@as(*const IADsUser, @ptrCast(self)), v_picture_);
            }
            pub inline fn getHomePage(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).get_HomePage(@as(*const IADsUser, @ptrCast(self)), retval_);
            }
            pub inline fn putHomePage(self: *const T, bstr_home_page_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).put_HomePage(@as(*const IADsUser, @ptrCast(self)), bstr_home_page_);
            }
            pub inline fn groups(self: *const T, pp_groups_: ?*?*IADsMembers) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).Groups(@as(*const IADsUser, @ptrCast(self)), pp_groups_);
            }
            pub inline fn setPassword(self: *const T, new_password_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).SetPassword(@as(*const IADsUser, @ptrCast(self)), new_password_);
            }
            pub inline fn changePassword(self: *const T, bstr_old_password_: ?BSTR, bstr_new_password_: ?BSTR) HRESULT {
                return @as(*const IADsUser.VTable, @ptrCast(self.vtable)).ChangePassword(@as(*const IADsUser, @ptrCast(self)), bstr_old_password_, bstr_new_password_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPrintQueue_Value = Guid.initString("b15160d0-1226-11cf-a985-00aa006bc149");
pub const IID_IADsPrintQueue = &IID_IADsPrintQueue_Value;
pub const IADsPrintQueue = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrinterPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrinterPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            bstr_printer_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Model: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Model: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            bstr_model: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Datatype: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Datatype: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            bstr_datatype: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrintProcessor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrintProcessor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            bstr_print_processor: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Location: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Location: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            bstr_location: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            da_start_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UntilTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UntilTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            da_until_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultJobPriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultJobPriority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            ln_default_job_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            ln_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BannerPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BannerPage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            bstr_banner_page: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrintDevices: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrintDevices: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            v_print_devices: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueue,
            v_net_addresses: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getPrinterPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_PrinterPath(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putPrinterPath(self: *const T, bstr_printer_path_: ?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_PrinterPath(@as(*const IADsPrintQueue, @ptrCast(self)), bstr_printer_path_);
            }
            pub inline fn getModel(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_Model(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putModel(self: *const T, bstr_model_: ?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_Model(@as(*const IADsPrintQueue, @ptrCast(self)), bstr_model_);
            }
            pub inline fn getDatatype(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_Datatype(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putDatatype(self: *const T, bstr_datatype_: ?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_Datatype(@as(*const IADsPrintQueue, @ptrCast(self)), bstr_datatype_);
            }
            pub inline fn getPrintProcessor(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_PrintProcessor(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putPrintProcessor(self: *const T, bstr_print_processor_: ?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_PrintProcessor(@as(*const IADsPrintQueue, @ptrCast(self)), bstr_print_processor_);
            }
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsPrintQueue, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getLocation(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_Location(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putLocation(self: *const T, bstr_location_: ?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_Location(@as(*const IADsPrintQueue, @ptrCast(self)), bstr_location_);
            }
            pub inline fn getStartTime(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_StartTime(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putStartTime(self: *const T, da_start_time_: f64) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_StartTime(@as(*const IADsPrintQueue, @ptrCast(self)), da_start_time_);
            }
            pub inline fn getUntilTime(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_UntilTime(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putUntilTime(self: *const T, da_until_time_: f64) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_UntilTime(@as(*const IADsPrintQueue, @ptrCast(self)), da_until_time_);
            }
            pub inline fn getDefaultJobPriority(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_DefaultJobPriority(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putDefaultJobPriority(self: *const T, ln_default_job_priority_: i32) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_DefaultJobPriority(@as(*const IADsPrintQueue, @ptrCast(self)), ln_default_job_priority_);
            }
            pub inline fn getPriority(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putPriority(self: *const T, ln_priority_: i32) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_Priority(@as(*const IADsPrintQueue, @ptrCast(self)), ln_priority_);
            }
            pub inline fn getBannerPage(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_BannerPage(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putBannerPage(self: *const T, bstr_banner_page_: ?BSTR) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_BannerPage(@as(*const IADsPrintQueue, @ptrCast(self)), bstr_banner_page_);
            }
            pub inline fn getPrintDevices(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_PrintDevices(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putPrintDevices(self: *const T, v_print_devices_: VARIANT) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_PrintDevices(@as(*const IADsPrintQueue, @ptrCast(self)), v_print_devices_);
            }
            pub inline fn getNetAddresses(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).get_NetAddresses(@as(*const IADsPrintQueue, @ptrCast(self)), retval_);
            }
            pub inline fn putNetAddresses(self: *const T, v_net_addresses_: VARIANT) HRESULT {
                return @as(*const IADsPrintQueue.VTable, @ptrCast(self.vtable)).put_NetAddresses(@as(*const IADsPrintQueue, @ptrCast(self)), v_net_addresses_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPrintQueueOperations_Value = Guid.initString("124be5c0-156e-11cf-a986-00aa006bc149");
pub const IID_IADsPrintQueueOperations = &IID_IADsPrintQueueOperations_Value;
pub const IADsPrintQueueOperations = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintQueueOperations,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrintJobs: *const fn (
            self: *const IADsPrintQueueOperations,
            p_object: ?*?*IADsCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IADsPrintQueueOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IADsPrintQueueOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Purge: *const fn (
            self: *const IADsPrintQueueOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getStatus(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintQueueOperations.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IADsPrintQueueOperations, @ptrCast(self)), retval_);
            }
            pub inline fn printJobs(self: *const T, p_object_: ?*?*IADsCollection) HRESULT {
                return @as(*const IADsPrintQueueOperations.VTable, @ptrCast(self.vtable)).PrintJobs(@as(*const IADsPrintQueueOperations, @ptrCast(self)), p_object_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IADsPrintQueueOperations.VTable, @ptrCast(self.vtable)).Pause(@as(*const IADsPrintQueueOperations, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IADsPrintQueueOperations.VTable, @ptrCast(self.vtable)).Resume(@as(*const IADsPrintQueueOperations, @ptrCast(self)));
            }
            pub inline fn purge(self: *const T) HRESULT {
                return @as(*const IADsPrintQueueOperations.VTable, @ptrCast(self.vtable)).Purge(@as(*const IADsPrintQueueOperations, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPrintJob_Value = Guid.initString("32fb6780-1ed0-11cf-a988-00aa006bc149");
pub const IID_IADsPrintJob = &IID_IADsPrintJob_Value;
pub const IADsPrintJob = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HostPrintQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_User: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TimeSubmitted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalPages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            ln_priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            da_start_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UntilTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UntilTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            da_until_time: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Notify: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Notify: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            bstr_notify: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NotifyPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NotifyPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJob,
            bstr_notify_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getHostPrintQueue(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_HostPrintQueue(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn getUser(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_User(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn getUserPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_UserPath(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn getTimeSubmitted(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_TimeSubmitted(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn getTotalPages(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_TotalPages(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn getSize(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsPrintJob, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getPriority(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn putPriority(self: *const T, ln_priority_: i32) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).put_Priority(@as(*const IADsPrintJob, @ptrCast(self)), ln_priority_);
            }
            pub inline fn getStartTime(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_StartTime(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn putStartTime(self: *const T, da_start_time_: f64) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).put_StartTime(@as(*const IADsPrintJob, @ptrCast(self)), da_start_time_);
            }
            pub inline fn getUntilTime(self: *const T, retval_: ?*f64) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_UntilTime(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn putUntilTime(self: *const T, da_until_time_: f64) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).put_UntilTime(@as(*const IADsPrintJob, @ptrCast(self)), da_until_time_);
            }
            pub inline fn getNotify(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_Notify(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn putNotify(self: *const T, bstr_notify_: ?BSTR) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).put_Notify(@as(*const IADsPrintJob, @ptrCast(self)), bstr_notify_);
            }
            pub inline fn getNotifyPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).get_NotifyPath(@as(*const IADsPrintJob, @ptrCast(self)), retval_);
            }
            pub inline fn putNotifyPath(self: *const T, bstr_notify_path_: ?BSTR) HRESULT {
                return @as(*const IADsPrintJob.VTable, @ptrCast(self.vtable)).put_NotifyPath(@as(*const IADsPrintJob, @ptrCast(self)), bstr_notify_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPrintJobOperations_Value = Guid.initString("9a52db30-1ecf-11cf-a988-00aa006bc149");
pub const IID_IADsPrintJobOperations = &IID_IADsPrintJobOperations_Value;
pub const IADsPrintJobOperations = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJobOperations,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TimeElapsed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJobOperations,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PagesPrinted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJobOperations,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Position: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJobOperations,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Position: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPrintJobOperations,
            ln_position: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IADsPrintJobOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IADsPrintJobOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getStatus(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintJobOperations.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IADsPrintJobOperations, @ptrCast(self)), retval_);
            }
            pub inline fn getTimeElapsed(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintJobOperations.VTable, @ptrCast(self.vtable)).get_TimeElapsed(@as(*const IADsPrintJobOperations, @ptrCast(self)), retval_);
            }
            pub inline fn getPagesPrinted(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintJobOperations.VTable, @ptrCast(self.vtable)).get_PagesPrinted(@as(*const IADsPrintJobOperations, @ptrCast(self)), retval_);
            }
            pub inline fn getPosition(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPrintJobOperations.VTable, @ptrCast(self.vtable)).get_Position(@as(*const IADsPrintJobOperations, @ptrCast(self)), retval_);
            }
            pub inline fn putPosition(self: *const T, ln_position_: i32) HRESULT {
                return @as(*const IADsPrintJobOperations.VTable, @ptrCast(self.vtable)).put_Position(@as(*const IADsPrintJobOperations, @ptrCast(self)), ln_position_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IADsPrintJobOperations.VTable, @ptrCast(self.vtable)).Pause(@as(*const IADsPrintJobOperations, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IADsPrintJobOperations.VTable, @ptrCast(self.vtable)).Resume(@as(*const IADsPrintJobOperations, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsService_Value = Guid.initString("68af66e0-31ca-11cf-a98a-00aa006bc149");
pub const IID_IADsService = &IID_IADsService_Value;
pub const IADsService = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HostComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HostComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            bstr_host_computer: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            bstr_display_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            bstr_version: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            ln_service_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            ln_start_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            bstr_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartupParameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartupParameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            bstr_startup_parameters: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ErrorControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ErrorControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            ln_error_control: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoadOrderGroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LoadOrderGroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            bstr_load_order_group: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceAccountName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceAccountName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            bstr_service_account_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceAccountPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceAccountPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            bstr_service_account_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Dependencies: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Dependencies: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsService,
            v_dependencies: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getHostComputer(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_HostComputer(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putHostComputer(self: *const T, bstr_host_computer_: ?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_HostComputer(@as(*const IADsService, @ptrCast(self)), bstr_host_computer_);
            }
            pub inline fn getDisplayName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putDisplayName(self: *const T, bstr_display_name_: ?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_DisplayName(@as(*const IADsService, @ptrCast(self)), bstr_display_name_);
            }
            pub inline fn getVersion(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_Version(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putVersion(self: *const T, bstr_version_: ?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_Version(@as(*const IADsService, @ptrCast(self)), bstr_version_);
            }
            pub inline fn getServiceType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_ServiceType(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putServiceType(self: *const T, ln_service_type_: i32) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_ServiceType(@as(*const IADsService, @ptrCast(self)), ln_service_type_);
            }
            pub inline fn getStartType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_StartType(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putStartType(self: *const T, ln_start_type_: i32) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_StartType(@as(*const IADsService, @ptrCast(self)), ln_start_type_);
            }
            pub inline fn getPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putPath(self: *const T, bstr_path_: ?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_Path(@as(*const IADsService, @ptrCast(self)), bstr_path_);
            }
            pub inline fn getStartupParameters(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_StartupParameters(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putStartupParameters(self: *const T, bstr_startup_parameters_: ?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_StartupParameters(@as(*const IADsService, @ptrCast(self)), bstr_startup_parameters_);
            }
            pub inline fn getErrorControl(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_ErrorControl(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putErrorControl(self: *const T, ln_error_control_: i32) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_ErrorControl(@as(*const IADsService, @ptrCast(self)), ln_error_control_);
            }
            pub inline fn getLoadOrderGroup(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_LoadOrderGroup(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putLoadOrderGroup(self: *const T, bstr_load_order_group_: ?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_LoadOrderGroup(@as(*const IADsService, @ptrCast(self)), bstr_load_order_group_);
            }
            pub inline fn getServiceAccountName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_ServiceAccountName(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putServiceAccountName(self: *const T, bstr_service_account_name_: ?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_ServiceAccountName(@as(*const IADsService, @ptrCast(self)), bstr_service_account_name_);
            }
            pub inline fn getServiceAccountPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_ServiceAccountPath(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putServiceAccountPath(self: *const T, bstr_service_account_path_: ?BSTR) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_ServiceAccountPath(@as(*const IADsService, @ptrCast(self)), bstr_service_account_path_);
            }
            pub inline fn getDependencies(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).get_Dependencies(@as(*const IADsService, @ptrCast(self)), retval_);
            }
            pub inline fn putDependencies(self: *const T, v_dependencies_: VARIANT) HRESULT {
                return @as(*const IADsService.VTable, @ptrCast(self.vtable)).put_Dependencies(@as(*const IADsService, @ptrCast(self)), v_dependencies_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsServiceOperations_Value = Guid.initString("5d7b33f0-31ca-11cf-a98a-00aa006bc149");
pub const IID_IADsServiceOperations = &IID_IADsServiceOperations_Value;
pub const IADsServiceOperations = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsServiceOperations,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: *const fn (
            self: *const IADsServiceOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IADsServiceOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IADsServiceOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Continue: *const fn (
            self: *const IADsServiceOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPassword: *const fn (
            self: *const IADsServiceOperations,
            bstr_new_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getStatus(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsServiceOperations.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IADsServiceOperations, @ptrCast(self)), retval_);
            }
            pub inline fn start(self: *const T) HRESULT {
                return @as(*const IADsServiceOperations.VTable, @ptrCast(self.vtable)).Start(@as(*const IADsServiceOperations, @ptrCast(self)));
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IADsServiceOperations.VTable, @ptrCast(self.vtable)).Stop(@as(*const IADsServiceOperations, @ptrCast(self)));
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IADsServiceOperations.VTable, @ptrCast(self.vtable)).Pause(@as(*const IADsServiceOperations, @ptrCast(self)));
            }
            pub inline fn @"continue"(self: *const T) HRESULT {
                return @as(*const IADsServiceOperations.VTable, @ptrCast(self.vtable)).Continue(@as(*const IADsServiceOperations, @ptrCast(self)));
            }
            pub inline fn setPassword(self: *const T, bstr_new_password_: ?BSTR) HRESULT {
                return @as(*const IADsServiceOperations.VTable, @ptrCast(self.vtable)).SetPassword(@as(*const IADsServiceOperations, @ptrCast(self)), bstr_new_password_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsFileService_Value = Guid.initString("a89d1900-31ca-11cf-a98a-00aa006bc149");
pub const IID_IADsFileService = &IID_IADsFileService_Value;
pub const IADsFileService = extern struct {
    pub const VTable = extern struct {
        base: IADsService.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileService,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileService,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxUserCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileService,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxUserCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileService,
            ln_max_user_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADsService.MethodMixin(T);
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsFileService.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsFileService, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsFileService.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsFileService, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getMaxUserCount(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsFileService.VTable, @ptrCast(self.vtable)).get_MaxUserCount(@as(*const IADsFileService, @ptrCast(self)), retval_);
            }
            pub inline fn putMaxUserCount(self: *const T, ln_max_user_count_: i32) HRESULT {
                return @as(*const IADsFileService.VTable, @ptrCast(self.vtable)).put_MaxUserCount(@as(*const IADsFileService, @ptrCast(self)), ln_max_user_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsFileServiceOperations_Value = Guid.initString("a02ded10-31ca-11cf-a98a-00aa006bc149");
pub const IID_IADsFileServiceOperations = &IID_IADsFileServiceOperations_Value;
pub const IADsFileServiceOperations = extern struct {
    pub const VTable = extern struct {
        base: IADsServiceOperations.VTable,
        Sessions: *const fn (
            self: *const IADsFileServiceOperations,
            pp_sessions: ?*?*IADsCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resources: *const fn (
            self: *const IADsFileServiceOperations,
            pp_resources: ?*?*IADsCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADsServiceOperations.MethodMixin(T);
            pub inline fn sessions(self: *const T, pp_sessions_: ?*?*IADsCollection) HRESULT {
                return @as(*const IADsFileServiceOperations.VTable, @ptrCast(self.vtable)).Sessions(@as(*const IADsFileServiceOperations, @ptrCast(self)), pp_sessions_);
            }
            pub inline fn resources(self: *const T, pp_resources_: ?*?*IADsCollection) HRESULT {
                return @as(*const IADsFileServiceOperations.VTable, @ptrCast(self.vtable)).Resources(@as(*const IADsFileServiceOperations, @ptrCast(self)), pp_resources_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsFileShare_Value = Guid.initString("eb6dcaf0-4b83-11cf-a995-00aa006bc149");
pub const IID_IADsFileShare = &IID_IADsFileShare_Value;
pub const IADsFileShare = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentUserCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileShare,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileShare,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileShare,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HostComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileShare,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HostComputer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileShare,
            bstr_host_computer: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileShare,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileShare,
            bstr_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxUserCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileShare,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxUserCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFileShare,
            ln_max_user_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getCurrentUserCount(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsFileShare.VTable, @ptrCast(self.vtable)).get_CurrentUserCount(@as(*const IADsFileShare, @ptrCast(self)), retval_);
            }
            pub inline fn getDescription(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsFileShare.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IADsFileShare, @ptrCast(self)), retval_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IADsFileShare.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IADsFileShare, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getHostComputer(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsFileShare.VTable, @ptrCast(self.vtable)).get_HostComputer(@as(*const IADsFileShare, @ptrCast(self)), retval_);
            }
            pub inline fn putHostComputer(self: *const T, bstr_host_computer_: ?BSTR) HRESULT {
                return @as(*const IADsFileShare.VTable, @ptrCast(self.vtable)).put_HostComputer(@as(*const IADsFileShare, @ptrCast(self)), bstr_host_computer_);
            }
            pub inline fn getPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsFileShare.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IADsFileShare, @ptrCast(self)), retval_);
            }
            pub inline fn putPath(self: *const T, bstr_path_: ?BSTR) HRESULT {
                return @as(*const IADsFileShare.VTable, @ptrCast(self.vtable)).put_Path(@as(*const IADsFileShare, @ptrCast(self)), bstr_path_);
            }
            pub inline fn getMaxUserCount(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsFileShare.VTable, @ptrCast(self.vtable)).get_MaxUserCount(@as(*const IADsFileShare, @ptrCast(self)), retval_);
            }
            pub inline fn putMaxUserCount(self: *const T, ln_max_user_count_: i32) HRESULT {
                return @as(*const IADsFileShare.VTable, @ptrCast(self.vtable)).put_MaxUserCount(@as(*const IADsFileShare, @ptrCast(self)), ln_max_user_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsSession_Value = Guid.initString("398b7da0-4aab-11cf-ae2c-00aa006ebfb9");
pub const IID_IADsSession = &IID_IADsSession_Value;
pub const IADsSession = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_User: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSession,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSession,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Computer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSession,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ComputerPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSession,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSession,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IdleTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSession,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getUser(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsSession.VTable, @ptrCast(self.vtable)).get_User(@as(*const IADsSession, @ptrCast(self)), retval_);
            }
            pub inline fn getUserPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsSession.VTable, @ptrCast(self.vtable)).get_UserPath(@as(*const IADsSession, @ptrCast(self)), retval_);
            }
            pub inline fn getComputer(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsSession.VTable, @ptrCast(self.vtable)).get_Computer(@as(*const IADsSession, @ptrCast(self)), retval_);
            }
            pub inline fn getComputerPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsSession.VTable, @ptrCast(self.vtable)).get_ComputerPath(@as(*const IADsSession, @ptrCast(self)), retval_);
            }
            pub inline fn getConnectTime(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsSession.VTable, @ptrCast(self.vtable)).get_ConnectTime(@as(*const IADsSession, @ptrCast(self)), retval_);
            }
            pub inline fn getIdleTime(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsSession.VTable, @ptrCast(self.vtable)).get_IdleTime(@as(*const IADsSession, @ptrCast(self)), retval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsResource_Value = Guid.initString("34a05b20-4aab-11cf-ae2c-00aa006ebfb9");
pub const IID_IADsResource = &IID_IADsResource_Value;
pub const IADsResource = extern struct {
    pub const VTable = extern struct {
        base: IADs.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_User: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsResource,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsResource,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsResource,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LockCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsResource,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IADs.MethodMixin(T);
            pub inline fn getUser(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsResource.VTable, @ptrCast(self.vtable)).get_User(@as(*const IADsResource, @ptrCast(self)), retval_);
            }
            pub inline fn getUserPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsResource.VTable, @ptrCast(self.vtable)).get_UserPath(@as(*const IADsResource, @ptrCast(self)), retval_);
            }
            pub inline fn getPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsResource.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IADsResource, @ptrCast(self)), retval_);
            }
            pub inline fn getLockCount(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsResource.VTable, @ptrCast(self.vtable)).get_LockCount(@as(*const IADsResource, @ptrCast(self)), retval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsOpenDSObject_Value = Guid.initString("ddf2891e-0f9c-11d0-8ad4-00c04fd8d503");
pub const IID_IADsOpenDSObject = &IID_IADsOpenDSObject_Value;
pub const IADsOpenDSObject = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OpenDSObject: *const fn (
            self: *const IADsOpenDSObject,
            lpsz_d_n_name: ?BSTR,
            lpsz_user_name: ?BSTR,
            lpsz_password: ?BSTR,
            ln_reserved: i32,
            pp_ole_ds_obj: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn openDSObject(self: *const T, lpsz_d_n_name_: ?BSTR, lpsz_user_name_: ?BSTR, lpsz_password_: ?BSTR, ln_reserved_: i32, pp_ole_ds_obj_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsOpenDSObject.VTable, @ptrCast(self.vtable)).OpenDSObject(@as(*const IADsOpenDSObject, @ptrCast(self)), lpsz_d_n_name_, lpsz_user_name_, lpsz_password_, ln_reserved_, pp_ole_ds_obj_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDirectoryObject_Value = Guid.initString("e798de2c-22e4-11d0-84fe-00c04fd8d503");
pub const IID_IDirectoryObject = &IID_IDirectoryObject_Value;
pub const IDirectoryObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetObjectInformation: *const fn (
            self: *const IDirectoryObject,
            pp_obj_info: ?*?*ADS_OBJECT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectAttributes: *const fn (
            self: *const IDirectoryObject,
            p_attribute_names: ?*?PWSTR,
            dw_number_attributes: u32,
            pp_attribute_entries: ?*?*ADS_ATTR_INFO,
            pdw_num_attributes_returned: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectAttributes: *const fn (
            self: *const IDirectoryObject,
            p_attribute_entries: ?*ADS_ATTR_INFO,
            dw_num_attributes: u32,
            pdw_num_attributes_modified: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDSObject: *const fn (
            self: *const IDirectoryObject,
            psz_r_d_n_name: ?PWSTR,
            p_attribute_entries: ?*ADS_ATTR_INFO,
            dw_num_attributes: u32,
            pp_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDSObject: *const fn (
            self: *const IDirectoryObject,
            psz_r_d_n_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getObjectInformation(self: *const T, pp_obj_info_: ?*?*ADS_OBJECT_INFO) HRESULT {
                return @as(*const IDirectoryObject.VTable, @ptrCast(self.vtable)).GetObjectInformation(@as(*const IDirectoryObject, @ptrCast(self)), pp_obj_info_);
            }
            pub inline fn getObjectAttributes(self: *const T, p_attribute_names_: ?*?PWSTR, dw_number_attributes_: u32, pp_attribute_entries_: ?*?*ADS_ATTR_INFO, pdw_num_attributes_returned_: ?*u32) HRESULT {
                return @as(*const IDirectoryObject.VTable, @ptrCast(self.vtable)).GetObjectAttributes(@as(*const IDirectoryObject, @ptrCast(self)), p_attribute_names_, dw_number_attributes_, pp_attribute_entries_, pdw_num_attributes_returned_);
            }
            pub inline fn setObjectAttributes(self: *const T, p_attribute_entries_: ?*ADS_ATTR_INFO, dw_num_attributes_: u32, pdw_num_attributes_modified_: ?*u32) HRESULT {
                return @as(*const IDirectoryObject.VTable, @ptrCast(self.vtable)).SetObjectAttributes(@as(*const IDirectoryObject, @ptrCast(self)), p_attribute_entries_, dw_num_attributes_, pdw_num_attributes_modified_);
            }
            pub inline fn createDSObject(self: *const T, psz_r_d_n_name_: ?PWSTR, p_attribute_entries_: ?*ADS_ATTR_INFO, dw_num_attributes_: u32, pp_object_: ?*?*IDispatch) HRESULT {
                return @as(*const IDirectoryObject.VTable, @ptrCast(self.vtable)).CreateDSObject(@as(*const IDirectoryObject, @ptrCast(self)), psz_r_d_n_name_, p_attribute_entries_, dw_num_attributes_, pp_object_);
            }
            pub inline fn deleteDSObject(self: *const T, psz_r_d_n_name_: ?PWSTR) HRESULT {
                return @as(*const IDirectoryObject.VTable, @ptrCast(self.vtable)).DeleteDSObject(@as(*const IDirectoryObject, @ptrCast(self)), psz_r_d_n_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDirectorySearch_Value = Guid.initString("109ba8ec-92f0-11d0-a790-00c04fd8d5a8");
pub const IID_IDirectorySearch = &IID_IDirectorySearch_Value;
pub const IDirectorySearch = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSearchPreference: *const fn (
            self: *const IDirectorySearch,
            p_search_prefs: ?*ads_searchpref_info,
            dw_num_prefs: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecuteSearch: *const fn (
            self: *const IDirectorySearch,
            psz_search_filter: ?PWSTR,
            p_attribute_names: ?*?PWSTR,
            dw_number_attributes: u32,
            ph_search_result: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbandonSearch: *const fn (
            self: *const IDirectorySearch,
            ph_search_result: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstRow: *const fn (
            self: *const IDirectorySearch,
            h_search_result: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextRow: *const fn (
            self: *const IDirectorySearch,
            h_search_result: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviousRow: *const fn (
            self: *const IDirectorySearch,
            h_search_result: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextColumnName: *const fn (
            self: *const IDirectorySearch,
            h_search_handle: isize,
            ppsz_column_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumn: *const fn (
            self: *const IDirectorySearch,
            h_search_result: isize,
            sz_column_name: ?PWSTR,
            p_search_column: ?*ads_search_column,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeColumn: *const fn (
            self: *const IDirectorySearch,
            p_search_column: ?*ads_search_column,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseSearchHandle: *const fn (
            self: *const IDirectorySearch,
            h_search_result: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setSearchPreference(self: *const T, p_search_prefs_: ?*ads_searchpref_info, dw_num_prefs_: u32) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).SetSearchPreference(@as(*const IDirectorySearch, @ptrCast(self)), p_search_prefs_, dw_num_prefs_);
            }
            pub inline fn executeSearch(self: *const T, psz_search_filter_: ?PWSTR, p_attribute_names_: ?*?PWSTR, dw_number_attributes_: u32, ph_search_result_: ?*isize) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).ExecuteSearch(@as(*const IDirectorySearch, @ptrCast(self)), psz_search_filter_, p_attribute_names_, dw_number_attributes_, ph_search_result_);
            }
            pub inline fn abandonSearch(self: *const T, ph_search_result_: isize) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).AbandonSearch(@as(*const IDirectorySearch, @ptrCast(self)), ph_search_result_);
            }
            pub inline fn getFirstRow(self: *const T, h_search_result_: isize) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).GetFirstRow(@as(*const IDirectorySearch, @ptrCast(self)), h_search_result_);
            }
            pub inline fn getNextRow(self: *const T, h_search_result_: isize) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).GetNextRow(@as(*const IDirectorySearch, @ptrCast(self)), h_search_result_);
            }
            pub inline fn getPreviousRow(self: *const T, h_search_result_: isize) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).GetPreviousRow(@as(*const IDirectorySearch, @ptrCast(self)), h_search_result_);
            }
            pub inline fn getNextColumnName(self: *const T, h_search_handle_: isize, ppsz_column_name_: ?*?PWSTR) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).GetNextColumnName(@as(*const IDirectorySearch, @ptrCast(self)), h_search_handle_, ppsz_column_name_);
            }
            pub inline fn getColumn(self: *const T, h_search_result_: isize, sz_column_name_: ?PWSTR, p_search_column_: ?*ads_search_column) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).GetColumn(@as(*const IDirectorySearch, @ptrCast(self)), h_search_result_, sz_column_name_, p_search_column_);
            }
            pub inline fn freeColumn(self: *const T, p_search_column_: ?*ads_search_column) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).FreeColumn(@as(*const IDirectorySearch, @ptrCast(self)), p_search_column_);
            }
            pub inline fn closeSearchHandle(self: *const T, h_search_result_: isize) HRESULT {
                return @as(*const IDirectorySearch.VTable, @ptrCast(self.vtable)).CloseSearchHandle(@as(*const IDirectorySearch, @ptrCast(self)), h_search_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDirectorySchemaMgmt_Value = Guid.initString("75db3b9c-a4d8-11d0-a79c-00c04fd8d5a8");
pub const IID_IDirectorySchemaMgmt = &IID_IDirectorySchemaMgmt_Value;
pub const IDirectorySchemaMgmt = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumAttributes: *const fn (
            self: *const IDirectorySchemaMgmt,
            ppsz_attr_names: ?*?PWSTR,
            dw_num_attributes: u32,
            pp_attr_definition: ?*?*ADS_ATTR_DEF,
            pdw_num_attributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAttributeDefinition: *const fn (
            self: *const IDirectorySchemaMgmt,
            psz_attribute_name: ?PWSTR,
            p_attribute_definition: ?*ADS_ATTR_DEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteAttributeDefinition: *const fn (
            self: *const IDirectorySchemaMgmt,
            psz_attribute_name: ?PWSTR,
            p_attribute_definition: ?*ADS_ATTR_DEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAttributeDefinition: *const fn (
            self: *const IDirectorySchemaMgmt,
            psz_attribute_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumClasses: *const fn (
            self: *const IDirectorySchemaMgmt,
            ppsz_class_names: ?*?PWSTR,
            dw_num_classes: u32,
            pp_class_definition: ?*?*ADS_CLASS_DEF,
            pdw_num_classes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteClassDefinition: *const fn (
            self: *const IDirectorySchemaMgmt,
            psz_class_name: ?PWSTR,
            p_class_definition: ?*ADS_CLASS_DEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClassDefinition: *const fn (
            self: *const IDirectorySchemaMgmt,
            psz_class_name: ?PWSTR,
            p_class_definition: ?*ADS_CLASS_DEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteClassDefinition: *const fn (
            self: *const IDirectorySchemaMgmt,
            psz_class_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enumAttributes(self: *const T, ppsz_attr_names_: ?*?PWSTR, dw_num_attributes_: u32, pp_attr_definition_: ?*?*ADS_ATTR_DEF, pdw_num_attributes_: ?*u32) HRESULT {
                return @as(*const IDirectorySchemaMgmt.VTable, @ptrCast(self.vtable)).EnumAttributes(@as(*const IDirectorySchemaMgmt, @ptrCast(self)), ppsz_attr_names_, dw_num_attributes_, pp_attr_definition_, pdw_num_attributes_);
            }
            pub inline fn createAttributeDefinition(self: *const T, psz_attribute_name_: ?PWSTR, p_attribute_definition_: ?*ADS_ATTR_DEF) HRESULT {
                return @as(*const IDirectorySchemaMgmt.VTable, @ptrCast(self.vtable)).CreateAttributeDefinition(@as(*const IDirectorySchemaMgmt, @ptrCast(self)), psz_attribute_name_, p_attribute_definition_);
            }
            pub inline fn writeAttributeDefinition(self: *const T, psz_attribute_name_: ?PWSTR, p_attribute_definition_: ?*ADS_ATTR_DEF) HRESULT {
                return @as(*const IDirectorySchemaMgmt.VTable, @ptrCast(self.vtable)).WriteAttributeDefinition(@as(*const IDirectorySchemaMgmt, @ptrCast(self)), psz_attribute_name_, p_attribute_definition_);
            }
            pub inline fn deleteAttributeDefinition(self: *const T, psz_attribute_name_: ?PWSTR) HRESULT {
                return @as(*const IDirectorySchemaMgmt.VTable, @ptrCast(self.vtable)).DeleteAttributeDefinition(@as(*const IDirectorySchemaMgmt, @ptrCast(self)), psz_attribute_name_);
            }
            pub inline fn enumClasses(self: *const T, ppsz_class_names_: ?*?PWSTR, dw_num_classes_: u32, pp_class_definition_: ?*?*ADS_CLASS_DEF, pdw_num_classes_: ?*u32) HRESULT {
                return @as(*const IDirectorySchemaMgmt.VTable, @ptrCast(self.vtable)).EnumClasses(@as(*const IDirectorySchemaMgmt, @ptrCast(self)), ppsz_class_names_, dw_num_classes_, pp_class_definition_, pdw_num_classes_);
            }
            pub inline fn writeClassDefinition(self: *const T, psz_class_name_: ?PWSTR, p_class_definition_: ?*ADS_CLASS_DEF) HRESULT {
                return @as(*const IDirectorySchemaMgmt.VTable, @ptrCast(self.vtable)).WriteClassDefinition(@as(*const IDirectorySchemaMgmt, @ptrCast(self)), psz_class_name_, p_class_definition_);
            }
            pub inline fn createClassDefinition(self: *const T, psz_class_name_: ?PWSTR, p_class_definition_: ?*ADS_CLASS_DEF) HRESULT {
                return @as(*const IDirectorySchemaMgmt.VTable, @ptrCast(self.vtable)).CreateClassDefinition(@as(*const IDirectorySchemaMgmt, @ptrCast(self)), psz_class_name_, p_class_definition_);
            }
            pub inline fn deleteClassDefinition(self: *const T, psz_class_name_: ?PWSTR) HRESULT {
                return @as(*const IDirectorySchemaMgmt.VTable, @ptrCast(self.vtable)).DeleteClassDefinition(@as(*const IDirectorySchemaMgmt, @ptrCast(self)), psz_class_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IADsAggregatee_Value = Guid.initString("1346ce8c-9039-11d0-8528-00c04fd8d503");
pub const IID_IADsAggregatee = &IID_IADsAggregatee_Value;
pub const IADsAggregatee = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectAsAggregatee: *const fn (
            self: *const IADsAggregatee,
            p_outer_unknown: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisconnectAsAggregatee: *const fn (
            self: *const IADsAggregatee,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RelinquishInterface: *const fn (
            self: *const IADsAggregatee,
            riid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreInterface: *const fn (
            self: *const IADsAggregatee,
            riid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn connectAsAggregatee(self: *const T, p_outer_unknown_: ?*IUnknown) HRESULT {
                return @as(*const IADsAggregatee.VTable, @ptrCast(self.vtable)).ConnectAsAggregatee(@as(*const IADsAggregatee, @ptrCast(self)), p_outer_unknown_);
            }
            pub inline fn disconnectAsAggregatee(self: *const T) HRESULT {
                return @as(*const IADsAggregatee.VTable, @ptrCast(self.vtable)).DisconnectAsAggregatee(@as(*const IADsAggregatee, @ptrCast(self)));
            }
            pub inline fn relinquishInterface(self: *const T, riid_: ?*const Guid) HRESULT {
                return @as(*const IADsAggregatee.VTable, @ptrCast(self.vtable)).RelinquishInterface(@as(*const IADsAggregatee, @ptrCast(self)), riid_);
            }
            pub inline fn restoreInterface(self: *const T, riid_: ?*const Guid) HRESULT {
                return @as(*const IADsAggregatee.VTable, @ptrCast(self.vtable)).RestoreInterface(@as(*const IADsAggregatee, @ptrCast(self)), riid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IADsAggregator_Value = Guid.initString("52db5fb0-941f-11d0-8529-00c04fd8d503");
pub const IID_IADsAggregator = &IID_IADsAggregator_Value;
pub const IADsAggregator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectAsAggregator: *const fn (
            self: *const IADsAggregator,
            p_aggregatee: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisconnectAsAggregator: *const fn (
            self: *const IADsAggregator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn connectAsAggregator(self: *const T, p_aggregatee_: ?*IUnknown) HRESULT {
                return @as(*const IADsAggregator.VTable, @ptrCast(self.vtable)).ConnectAsAggregator(@as(*const IADsAggregator, @ptrCast(self)), p_aggregatee_);
            }
            pub inline fn disconnectAsAggregator(self: *const T) HRESULT {
                return @as(*const IADsAggregator.VTable, @ptrCast(self.vtable)).DisconnectAsAggregator(@as(*const IADsAggregator, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsAccessControlEntry_Value = Guid.initString("b4f3a14c-9bdd-11d0-852c-00c04fd8d503");
pub const IID_IADsAccessControlEntry = &IID_IADsAccessControlEntry_Value;
pub const IADsAccessControlEntry = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccessMask: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AccessMask: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            ln_access_mask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AceType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AceType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            ln_ace_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AceFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AceFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            ln_ace_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            ln_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ObjectType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            bstr_object_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InheritedObjectType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InheritedObjectType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            bstr_inherited_object_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Trustee: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Trustee: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlEntry,
            bstr_trustee: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAccessMask(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).get_AccessMask(@as(*const IADsAccessControlEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putAccessMask(self: *const T, ln_access_mask_: i32) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).put_AccessMask(@as(*const IADsAccessControlEntry, @ptrCast(self)), ln_access_mask_);
            }
            pub inline fn getAceType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).get_AceType(@as(*const IADsAccessControlEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putAceType(self: *const T, ln_ace_type_: i32) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).put_AceType(@as(*const IADsAccessControlEntry, @ptrCast(self)), ln_ace_type_);
            }
            pub inline fn getAceFlags(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).get_AceFlags(@as(*const IADsAccessControlEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putAceFlags(self: *const T, ln_ace_flags_: i32) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).put_AceFlags(@as(*const IADsAccessControlEntry, @ptrCast(self)), ln_ace_flags_);
            }
            pub inline fn getFlags(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).get_Flags(@as(*const IADsAccessControlEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putFlags(self: *const T, ln_flags_: i32) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).put_Flags(@as(*const IADsAccessControlEntry, @ptrCast(self)), ln_flags_);
            }
            pub inline fn getObjectType(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).get_ObjectType(@as(*const IADsAccessControlEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putObjectType(self: *const T, bstr_object_type_: ?BSTR) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).put_ObjectType(@as(*const IADsAccessControlEntry, @ptrCast(self)), bstr_object_type_);
            }
            pub inline fn getInheritedObjectType(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).get_InheritedObjectType(@as(*const IADsAccessControlEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putInheritedObjectType(self: *const T, bstr_inherited_object_type_: ?BSTR) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).put_InheritedObjectType(@as(*const IADsAccessControlEntry, @ptrCast(self)), bstr_inherited_object_type_);
            }
            pub inline fn getTrustee(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).get_Trustee(@as(*const IADsAccessControlEntry, @ptrCast(self)), retval_);
            }
            pub inline fn putTrustee(self: *const T, bstr_trustee_: ?BSTR) HRESULT {
                return @as(*const IADsAccessControlEntry.VTable, @ptrCast(self.vtable)).put_Trustee(@as(*const IADsAccessControlEntry, @ptrCast(self)), bstr_trustee_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsAccessControlList_Value = Guid.initString("b7ee91cc-9bdd-11d0-852c-00c04fd8d503");
pub const IID_IADsAccessControlList = &IID_IADsAccessControlList_Value;
pub const IADsAccessControlList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AclRevision: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlList,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AclRevision: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlList,
            ln_acl_revision: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AceCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlList,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AceCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlList,
            ln_ace_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAce: *const fn (
            self: *const IADsAccessControlList,
            p_access_control_entry: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAce: *const fn (
            self: *const IADsAccessControlList,
            p_access_control_entry: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyAccessList: *const fn (
            self: *const IADsAccessControlList,
            pp_access_control_list: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAccessControlList,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAclRevision(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsAccessControlList.VTable, @ptrCast(self.vtable)).get_AclRevision(@as(*const IADsAccessControlList, @ptrCast(self)), retval_);
            }
            pub inline fn putAclRevision(self: *const T, ln_acl_revision_: i32) HRESULT {
                return @as(*const IADsAccessControlList.VTable, @ptrCast(self.vtable)).put_AclRevision(@as(*const IADsAccessControlList, @ptrCast(self)), ln_acl_revision_);
            }
            pub inline fn getAceCount(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsAccessControlList.VTable, @ptrCast(self.vtable)).get_AceCount(@as(*const IADsAccessControlList, @ptrCast(self)), retval_);
            }
            pub inline fn putAceCount(self: *const T, ln_ace_count_: i32) HRESULT {
                return @as(*const IADsAccessControlList.VTable, @ptrCast(self.vtable)).put_AceCount(@as(*const IADsAccessControlList, @ptrCast(self)), ln_ace_count_);
            }
            pub inline fn addAce(self: *const T, p_access_control_entry_: ?*IDispatch) HRESULT {
                return @as(*const IADsAccessControlList.VTable, @ptrCast(self.vtable)).AddAce(@as(*const IADsAccessControlList, @ptrCast(self)), p_access_control_entry_);
            }
            pub inline fn removeAce(self: *const T, p_access_control_entry_: ?*IDispatch) HRESULT {
                return @as(*const IADsAccessControlList.VTable, @ptrCast(self.vtable)).RemoveAce(@as(*const IADsAccessControlList, @ptrCast(self)), p_access_control_entry_);
            }
            pub inline fn copyAccessList(self: *const T, pp_access_control_list_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsAccessControlList.VTable, @ptrCast(self.vtable)).CopyAccessList(@as(*const IADsAccessControlList, @ptrCast(self)), pp_access_control_list_);
            }
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const IADsAccessControlList.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IADsAccessControlList, @ptrCast(self)), retval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsSecurityDescriptor_Value = Guid.initString("b8c787ca-9bdd-11d0-852c-00c04fd8d503");
pub const IID_IADsSecurityDescriptor = &IID_IADsSecurityDescriptor_Value;
pub const IADsSecurityDescriptor = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Revision: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Revision: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            ln_revision: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Control: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Control: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            ln_control: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Owner: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Owner: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            bstr_owner: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OwnerDefaulted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OwnerDefaulted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            f_owner_defaulted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Group: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Group: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            bstr_group: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupDefaulted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupDefaulted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            f_group_defaulted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DiscretionaryAcl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DiscretionaryAcl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            p_discretionary_acl: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaclDefaulted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaclDefaulted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            f_dacl_defaulted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SystemAcl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SystemAcl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            p_system_acl: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SaclDefaulted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SaclDefaulted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityDescriptor,
            f_sacl_defaulted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopySecurityDescriptor: *const fn (
            self: *const IADsSecurityDescriptor,
            pp_security_descriptor: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getRevision(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_Revision(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putRevision(self: *const T, ln_revision_: i32) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_Revision(@as(*const IADsSecurityDescriptor, @ptrCast(self)), ln_revision_);
            }
            pub inline fn getControl(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_Control(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putControl(self: *const T, ln_control_: i32) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_Control(@as(*const IADsSecurityDescriptor, @ptrCast(self)), ln_control_);
            }
            pub inline fn getOwner(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_Owner(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putOwner(self: *const T, bstr_owner_: ?BSTR) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_Owner(@as(*const IADsSecurityDescriptor, @ptrCast(self)), bstr_owner_);
            }
            pub inline fn getOwnerDefaulted(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_OwnerDefaulted(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putOwnerDefaulted(self: *const T, f_owner_defaulted_: i16) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_OwnerDefaulted(@as(*const IADsSecurityDescriptor, @ptrCast(self)), f_owner_defaulted_);
            }
            pub inline fn getGroup(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_Group(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putGroup(self: *const T, bstr_group_: ?BSTR) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_Group(@as(*const IADsSecurityDescriptor, @ptrCast(self)), bstr_group_);
            }
            pub inline fn getGroupDefaulted(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_GroupDefaulted(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putGroupDefaulted(self: *const T, f_group_defaulted_: i16) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_GroupDefaulted(@as(*const IADsSecurityDescriptor, @ptrCast(self)), f_group_defaulted_);
            }
            pub inline fn getDiscretionaryAcl(self: *const T, retval_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_DiscretionaryAcl(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putDiscretionaryAcl(self: *const T, p_discretionary_acl_: ?*IDispatch) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_DiscretionaryAcl(@as(*const IADsSecurityDescriptor, @ptrCast(self)), p_discretionary_acl_);
            }
            pub inline fn getDaclDefaulted(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_DaclDefaulted(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putDaclDefaulted(self: *const T, f_dacl_defaulted_: i16) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_DaclDefaulted(@as(*const IADsSecurityDescriptor, @ptrCast(self)), f_dacl_defaulted_);
            }
            pub inline fn getSystemAcl(self: *const T, retval_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_SystemAcl(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putSystemAcl(self: *const T, p_system_acl_: ?*IDispatch) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_SystemAcl(@as(*const IADsSecurityDescriptor, @ptrCast(self)), p_system_acl_);
            }
            pub inline fn getSaclDefaulted(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).get_SaclDefaulted(@as(*const IADsSecurityDescriptor, @ptrCast(self)), retval_);
            }
            pub inline fn putSaclDefaulted(self: *const T, f_sacl_defaulted_: i16) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).put_SaclDefaulted(@as(*const IADsSecurityDescriptor, @ptrCast(self)), f_sacl_defaulted_);
            }
            pub inline fn copySecurityDescriptor(self: *const T, pp_security_descriptor_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsSecurityDescriptor.VTable, @ptrCast(self.vtable)).CopySecurityDescriptor(@as(*const IADsSecurityDescriptor, @ptrCast(self)), pp_security_descriptor_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsLargeInteger_Value = Guid.initString("9068270b-0939-11d1-8be1-00c04fd8d503");
pub const IID_IADsLargeInteger = &IID_IADsLargeInteger_Value;
pub const IADsLargeInteger = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HighPart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLargeInteger,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HighPart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLargeInteger,
            ln_high_part: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LowPart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLargeInteger,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LowPart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsLargeInteger,
            ln_low_part: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getHighPart(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsLargeInteger.VTable, @ptrCast(self.vtable)).get_HighPart(@as(*const IADsLargeInteger, @ptrCast(self)), retval_);
            }
            pub inline fn putHighPart(self: *const T, ln_high_part_: i32) HRESULT {
                return @as(*const IADsLargeInteger.VTable, @ptrCast(self.vtable)).put_HighPart(@as(*const IADsLargeInteger, @ptrCast(self)), ln_high_part_);
            }
            pub inline fn getLowPart(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsLargeInteger.VTable, @ptrCast(self.vtable)).get_LowPart(@as(*const IADsLargeInteger, @ptrCast(self)), retval_);
            }
            pub inline fn putLowPart(self: *const T, ln_low_part_: i32) HRESULT {
                return @as(*const IADsLargeInteger.VTable, @ptrCast(self.vtable)).put_LowPart(@as(*const IADsLargeInteger, @ptrCast(self)), ln_low_part_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsNameTranslate_Value = Guid.initString("b1b272a3-3625-11d1-a3a4-00c04fb950dc");
pub const IID_IADsNameTranslate = &IID_IADsNameTranslate_Value;
pub const IADsNameTranslate = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ChaseReferral: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsNameTranslate,
            ln_chase_referral: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Init: *const fn (
            self: *const IADsNameTranslate,
            ln_set_type: i32,
            bstr_a_ds_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitEx: *const fn (
            self: *const IADsNameTranslate,
            ln_set_type: i32,
            bstr_a_ds_path: ?BSTR,
            bstr_user_i_d: ?BSTR,
            bstr_domain: ?BSTR,
            bstr_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Set: *const fn (
            self: *const IADsNameTranslate,
            ln_set_type: i32,
            bstr_a_ds_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Get: *const fn (
            self: *const IADsNameTranslate,
            ln_format_type: i32,
            pbstr_a_ds_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEx: *const fn (
            self: *const IADsNameTranslate,
            ln_format_type: i32,
            pvar: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEx: *const fn (
            self: *const IADsNameTranslate,
            ln_format_type: i32,
            pvar: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putChaseReferral(self: *const T, ln_chase_referral_: i32) HRESULT {
                return @as(*const IADsNameTranslate.VTable, @ptrCast(self.vtable)).put_ChaseReferral(@as(*const IADsNameTranslate, @ptrCast(self)), ln_chase_referral_);
            }
            pub inline fn init(self: *const T, ln_set_type_: i32, bstr_a_ds_path_: ?BSTR) HRESULT {
                return @as(*const IADsNameTranslate.VTable, @ptrCast(self.vtable)).Init(@as(*const IADsNameTranslate, @ptrCast(self)), ln_set_type_, bstr_a_ds_path_);
            }
            pub inline fn initEx(self: *const T, ln_set_type_: i32, bstr_a_ds_path_: ?BSTR, bstr_user_i_d_: ?BSTR, bstr_domain_: ?BSTR, bstr_password_: ?BSTR) HRESULT {
                return @as(*const IADsNameTranslate.VTable, @ptrCast(self.vtable)).InitEx(@as(*const IADsNameTranslate, @ptrCast(self)), ln_set_type_, bstr_a_ds_path_, bstr_user_i_d_, bstr_domain_, bstr_password_);
            }
            pub inline fn set(self: *const T, ln_set_type_: i32, bstr_a_ds_path_: ?BSTR) HRESULT {
                return @as(*const IADsNameTranslate.VTable, @ptrCast(self.vtable)).Set(@as(*const IADsNameTranslate, @ptrCast(self)), ln_set_type_, bstr_a_ds_path_);
            }
            pub inline fn get(self: *const T, ln_format_type_: i32, pbstr_a_ds_path_: ?*?BSTR) HRESULT {
                return @as(*const IADsNameTranslate.VTable, @ptrCast(self.vtable)).Get(@as(*const IADsNameTranslate, @ptrCast(self)), ln_format_type_, pbstr_a_ds_path_);
            }
            pub inline fn setEx(self: *const T, ln_format_type_: i32, pvar_: VARIANT) HRESULT {
                return @as(*const IADsNameTranslate.VTable, @ptrCast(self.vtable)).SetEx(@as(*const IADsNameTranslate, @ptrCast(self)), ln_format_type_, pvar_);
            }
            pub inline fn getEx(self: *const T, ln_format_type_: i32, pvar_: ?*VARIANT) HRESULT {
                return @as(*const IADsNameTranslate.VTable, @ptrCast(self.vtable)).GetEx(@as(*const IADsNameTranslate, @ptrCast(self)), ln_format_type_, pvar_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsCaseIgnoreList_Value = Guid.initString("7b66b533-4680-11d1-a3b4-00c04fb950dc");
pub const IID_IADsCaseIgnoreList = &IID_IADsCaseIgnoreList_Value;
pub const IADsCaseIgnoreList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CaseIgnoreList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsCaseIgnoreList,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CaseIgnoreList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsCaseIgnoreList,
            v_case_ignore_list: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCaseIgnoreList(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsCaseIgnoreList.VTable, @ptrCast(self.vtable)).get_CaseIgnoreList(@as(*const IADsCaseIgnoreList, @ptrCast(self)), retval_);
            }
            pub inline fn putCaseIgnoreList(self: *const T, v_case_ignore_list_: VARIANT) HRESULT {
                return @as(*const IADsCaseIgnoreList.VTable, @ptrCast(self.vtable)).put_CaseIgnoreList(@as(*const IADsCaseIgnoreList, @ptrCast(self)), v_case_ignore_list_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsFaxNumber_Value = Guid.initString("a910dea9-4680-11d1-a3b4-00c04fb950dc");
pub const IID_IADsFaxNumber = &IID_IADsFaxNumber_Value;
pub const IADsFaxNumber = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TelephoneNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFaxNumber,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TelephoneNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFaxNumber,
            bstr_telephone_number: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFaxNumber,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsFaxNumber,
            v_parameters: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTelephoneNumber(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsFaxNumber.VTable, @ptrCast(self.vtable)).get_TelephoneNumber(@as(*const IADsFaxNumber, @ptrCast(self)), retval_);
            }
            pub inline fn putTelephoneNumber(self: *const T, bstr_telephone_number_: ?BSTR) HRESULT {
                return @as(*const IADsFaxNumber.VTable, @ptrCast(self.vtable)).put_TelephoneNumber(@as(*const IADsFaxNumber, @ptrCast(self)), bstr_telephone_number_);
            }
            pub inline fn getParameters(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsFaxNumber.VTable, @ptrCast(self.vtable)).get_Parameters(@as(*const IADsFaxNumber, @ptrCast(self)), retval_);
            }
            pub inline fn putParameters(self: *const T, v_parameters_: VARIANT) HRESULT {
                return @as(*const IADsFaxNumber.VTable, @ptrCast(self.vtable)).put_Parameters(@as(*const IADsFaxNumber, @ptrCast(self)), v_parameters_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsNetAddress_Value = Guid.initString("b21a50a9-4080-11d1-a3ac-00c04fb950dc");
pub const IID_IADsNetAddress = &IID_IADsNetAddress_Value;
pub const IADsNetAddress = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddressType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsNetAddress,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AddressType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsNetAddress,
            ln_address_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsNetAddress,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsNetAddress,
            v_address: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAddressType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsNetAddress.VTable, @ptrCast(self.vtable)).get_AddressType(@as(*const IADsNetAddress, @ptrCast(self)), retval_);
            }
            pub inline fn putAddressType(self: *const T, ln_address_type_: i32) HRESULT {
                return @as(*const IADsNetAddress.VTable, @ptrCast(self.vtable)).put_AddressType(@as(*const IADsNetAddress, @ptrCast(self)), ln_address_type_);
            }
            pub inline fn getAddress(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsNetAddress.VTable, @ptrCast(self.vtable)).get_Address(@as(*const IADsNetAddress, @ptrCast(self)), retval_);
            }
            pub inline fn putAddress(self: *const T, v_address_: VARIANT) HRESULT {
                return @as(*const IADsNetAddress.VTable, @ptrCast(self.vtable)).put_Address(@as(*const IADsNetAddress, @ptrCast(self)), v_address_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsOctetList_Value = Guid.initString("7b28b80f-4680-11d1-a3b4-00c04fb950dc");
pub const IID_IADsOctetList = &IID_IADsOctetList_Value;
pub const IADsOctetList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OctetList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOctetList,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OctetList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsOctetList,
            v_octet_list: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getOctetList(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsOctetList.VTable, @ptrCast(self.vtable)).get_OctetList(@as(*const IADsOctetList, @ptrCast(self)), retval_);
            }
            pub inline fn putOctetList(self: *const T, v_octet_list_: VARIANT) HRESULT {
                return @as(*const IADsOctetList.VTable, @ptrCast(self.vtable)).put_OctetList(@as(*const IADsOctetList, @ptrCast(self)), v_octet_list_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsEmail_Value = Guid.initString("97af011a-478e-11d1-a3b4-00c04fb950dc");
pub const IID_IADsEmail = &IID_IADsEmail_Value;
pub const IADsEmail = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsEmail,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsEmail,
            ln_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsEmail,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsEmail,
            bstr_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsEmail.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IADsEmail, @ptrCast(self)), retval_);
            }
            pub inline fn putType(self: *const T, ln_type_: i32) HRESULT {
                return @as(*const IADsEmail.VTable, @ptrCast(self.vtable)).put_Type(@as(*const IADsEmail, @ptrCast(self)), ln_type_);
            }
            pub inline fn getAddress(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsEmail.VTable, @ptrCast(self.vtable)).get_Address(@as(*const IADsEmail, @ptrCast(self)), retval_);
            }
            pub inline fn putAddress(self: *const T, bstr_address_: ?BSTR) HRESULT {
                return @as(*const IADsEmail.VTable, @ptrCast(self.vtable)).put_Address(@as(*const IADsEmail, @ptrCast(self)), bstr_address_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPath_Value = Guid.initString("b287fcd5-4080-11d1-a3ac-00c04fb950dc");
pub const IID_IADsPath = &IID_IADsPath_Value;
pub const IADsPath = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPath,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPath,
            ln_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VolumeName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPath,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_VolumeName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPath,
            bstr_volume_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPath,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPath,
            bstr_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPath.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IADsPath, @ptrCast(self)), retval_);
            }
            pub inline fn putType(self: *const T, ln_type_: i32) HRESULT {
                return @as(*const IADsPath.VTable, @ptrCast(self.vtable)).put_Type(@as(*const IADsPath, @ptrCast(self)), ln_type_);
            }
            pub inline fn getVolumeName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPath.VTable, @ptrCast(self.vtable)).get_VolumeName(@as(*const IADsPath, @ptrCast(self)), retval_);
            }
            pub inline fn putVolumeName(self: *const T, bstr_volume_name_: ?BSTR) HRESULT {
                return @as(*const IADsPath.VTable, @ptrCast(self.vtable)).put_VolumeName(@as(*const IADsPath, @ptrCast(self)), bstr_volume_name_);
            }
            pub inline fn getPath(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsPath.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IADsPath, @ptrCast(self)), retval_);
            }
            pub inline fn putPath(self: *const T, bstr_path_: ?BSTR) HRESULT {
                return @as(*const IADsPath.VTable, @ptrCast(self.vtable)).put_Path(@as(*const IADsPath, @ptrCast(self)), bstr_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsReplicaPointer_Value = Guid.initString("f60fb803-4080-11d1-a3ac-00c04fb950dc");
pub const IID_IADsReplicaPointer = &IID_IADsReplicaPointer_Value;
pub const IADsReplicaPointer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            bstr_server_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReplicaType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReplicaType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            ln_replica_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReplicaNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReplicaNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            ln_replica_number: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            ln_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReplicaAddressHints: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReplicaAddressHints: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsReplicaPointer,
            v_replica_address_hints: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getServerName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).get_ServerName(@as(*const IADsReplicaPointer, @ptrCast(self)), retval_);
            }
            pub inline fn putServerName(self: *const T, bstr_server_name_: ?BSTR) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).put_ServerName(@as(*const IADsReplicaPointer, @ptrCast(self)), bstr_server_name_);
            }
            pub inline fn getReplicaType(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).get_ReplicaType(@as(*const IADsReplicaPointer, @ptrCast(self)), retval_);
            }
            pub inline fn putReplicaType(self: *const T, ln_replica_type_: i32) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).put_ReplicaType(@as(*const IADsReplicaPointer, @ptrCast(self)), ln_replica_type_);
            }
            pub inline fn getReplicaNumber(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).get_ReplicaNumber(@as(*const IADsReplicaPointer, @ptrCast(self)), retval_);
            }
            pub inline fn putReplicaNumber(self: *const T, ln_replica_number_: i32) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).put_ReplicaNumber(@as(*const IADsReplicaPointer, @ptrCast(self)), ln_replica_number_);
            }
            pub inline fn getCount(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IADsReplicaPointer, @ptrCast(self)), retval_);
            }
            pub inline fn putCount(self: *const T, ln_count_: i32) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).put_Count(@as(*const IADsReplicaPointer, @ptrCast(self)), ln_count_);
            }
            pub inline fn getReplicaAddressHints(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).get_ReplicaAddressHints(@as(*const IADsReplicaPointer, @ptrCast(self)), retval_);
            }
            pub inline fn putReplicaAddressHints(self: *const T, v_replica_address_hints_: VARIANT) HRESULT {
                return @as(*const IADsReplicaPointer.VTable, @ptrCast(self.vtable)).put_ReplicaAddressHints(@as(*const IADsReplicaPointer, @ptrCast(self)), v_replica_address_hints_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsAcl_Value = Guid.initString("8452d3ab-0869-11d1-a377-00c04fb950dc");
pub const IID_IADsAcl = &IID_IADsAcl_Value;
pub const IADsAcl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProtectedAttrName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAcl,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProtectedAttrName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAcl,
            bstr_protected_attr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubjectName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAcl,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SubjectName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAcl,
            bstr_subject_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Privileges: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAcl,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Privileges: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsAcl,
            ln_privileges: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyAcl: *const fn (
            self: *const IADsAcl,
            pp_acl: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProtectedAttrName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsAcl.VTable, @ptrCast(self.vtable)).get_ProtectedAttrName(@as(*const IADsAcl, @ptrCast(self)), retval_);
            }
            pub inline fn putProtectedAttrName(self: *const T, bstr_protected_attr_name_: ?BSTR) HRESULT {
                return @as(*const IADsAcl.VTable, @ptrCast(self.vtable)).put_ProtectedAttrName(@as(*const IADsAcl, @ptrCast(self)), bstr_protected_attr_name_);
            }
            pub inline fn getSubjectName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsAcl.VTable, @ptrCast(self.vtable)).get_SubjectName(@as(*const IADsAcl, @ptrCast(self)), retval_);
            }
            pub inline fn putSubjectName(self: *const T, bstr_subject_name_: ?BSTR) HRESULT {
                return @as(*const IADsAcl.VTable, @ptrCast(self.vtable)).put_SubjectName(@as(*const IADsAcl, @ptrCast(self)), bstr_subject_name_);
            }
            pub inline fn getPrivileges(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsAcl.VTable, @ptrCast(self.vtable)).get_Privileges(@as(*const IADsAcl, @ptrCast(self)), retval_);
            }
            pub inline fn putPrivileges(self: *const T, ln_privileges_: i32) HRESULT {
                return @as(*const IADsAcl.VTable, @ptrCast(self.vtable)).put_Privileges(@as(*const IADsAcl, @ptrCast(self)), ln_privileges_);
            }
            pub inline fn copyAcl(self: *const T, pp_acl_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsAcl.VTable, @ptrCast(self.vtable)).CopyAcl(@as(*const IADsAcl, @ptrCast(self)), pp_acl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsTimestamp_Value = Guid.initString("b2f5a901-4080-11d1-a3ac-00c04fb950dc");
pub const IID_IADsTimestamp = &IID_IADsTimestamp_Value;
pub const IADsTimestamp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WholeSeconds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTimestamp,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WholeSeconds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTimestamp,
            ln_whole_seconds: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTimestamp,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTimestamp,
            ln_event_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getWholeSeconds(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsTimestamp.VTable, @ptrCast(self.vtable)).get_WholeSeconds(@as(*const IADsTimestamp, @ptrCast(self)), retval_);
            }
            pub inline fn putWholeSeconds(self: *const T, ln_whole_seconds_: i32) HRESULT {
                return @as(*const IADsTimestamp.VTable, @ptrCast(self.vtable)).put_WholeSeconds(@as(*const IADsTimestamp, @ptrCast(self)), ln_whole_seconds_);
            }
            pub inline fn getEventID(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsTimestamp.VTable, @ptrCast(self.vtable)).get_EventID(@as(*const IADsTimestamp, @ptrCast(self)), retval_);
            }
            pub inline fn putEventID(self: *const T, ln_event_i_d_: i32) HRESULT {
                return @as(*const IADsTimestamp.VTable, @ptrCast(self.vtable)).put_EventID(@as(*const IADsTimestamp, @ptrCast(self)), ln_event_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPostalAddress_Value = Guid.initString("7adecf29-4680-11d1-a3b4-00c04fb950dc");
pub const IID_IADsPostalAddress = &IID_IADsPostalAddress_Value;
pub const IADsPostalAddress = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PostalAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPostalAddress,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PostalAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPostalAddress,
            v_postal_address: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPostalAddress(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsPostalAddress.VTable, @ptrCast(self.vtable)).get_PostalAddress(@as(*const IADsPostalAddress, @ptrCast(self)), retval_);
            }
            pub inline fn putPostalAddress(self: *const T, v_postal_address_: VARIANT) HRESULT {
                return @as(*const IADsPostalAddress.VTable, @ptrCast(self.vtable)).put_PostalAddress(@as(*const IADsPostalAddress, @ptrCast(self)), v_postal_address_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsBackLink_Value = Guid.initString("fd1302bd-4080-11d1-a3ac-00c04fb950dc");
pub const IID_IADsBackLink = &IID_IADsBackLink_Value;
pub const IADsBackLink = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsBackLink,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsBackLink,
            ln_remote_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsBackLink,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ObjectName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsBackLink,
            bstr_object_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getRemoteID(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsBackLink.VTable, @ptrCast(self.vtable)).get_RemoteID(@as(*const IADsBackLink, @ptrCast(self)), retval_);
            }
            pub inline fn putRemoteID(self: *const T, ln_remote_i_d_: i32) HRESULT {
                return @as(*const IADsBackLink.VTable, @ptrCast(self.vtable)).put_RemoteID(@as(*const IADsBackLink, @ptrCast(self)), ln_remote_i_d_);
            }
            pub inline fn getObjectName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsBackLink.VTable, @ptrCast(self.vtable)).get_ObjectName(@as(*const IADsBackLink, @ptrCast(self)), retval_);
            }
            pub inline fn putObjectName(self: *const T, bstr_object_name_: ?BSTR) HRESULT {
                return @as(*const IADsBackLink.VTable, @ptrCast(self.vtable)).put_ObjectName(@as(*const IADsBackLink, @ptrCast(self)), bstr_object_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsTypedName_Value = Guid.initString("b371a349-4080-11d1-a3ac-00c04fb950dc");
pub const IID_IADsTypedName = &IID_IADsTypedName_Value;
pub const IADsTypedName = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTypedName,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ObjectName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTypedName,
            bstr_object_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Level: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTypedName,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Level: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTypedName,
            ln_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Interval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTypedName,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Interval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTypedName,
            ln_interval: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getObjectName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsTypedName.VTable, @ptrCast(self.vtable)).get_ObjectName(@as(*const IADsTypedName, @ptrCast(self)), retval_);
            }
            pub inline fn putObjectName(self: *const T, bstr_object_name_: ?BSTR) HRESULT {
                return @as(*const IADsTypedName.VTable, @ptrCast(self.vtable)).put_ObjectName(@as(*const IADsTypedName, @ptrCast(self)), bstr_object_name_);
            }
            pub inline fn getLevel(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsTypedName.VTable, @ptrCast(self.vtable)).get_Level(@as(*const IADsTypedName, @ptrCast(self)), retval_);
            }
            pub inline fn putLevel(self: *const T, ln_level_: i32) HRESULT {
                return @as(*const IADsTypedName.VTable, @ptrCast(self.vtable)).put_Level(@as(*const IADsTypedName, @ptrCast(self)), ln_level_);
            }
            pub inline fn getInterval(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsTypedName.VTable, @ptrCast(self.vtable)).get_Interval(@as(*const IADsTypedName, @ptrCast(self)), retval_);
            }
            pub inline fn putInterval(self: *const T, ln_interval_: i32) HRESULT {
                return @as(*const IADsTypedName.VTable, @ptrCast(self.vtable)).put_Interval(@as(*const IADsTypedName, @ptrCast(self)), ln_interval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsHold_Value = Guid.initString("b3eb3b37-4080-11d1-a3ac-00c04fb950dc");
pub const IID_IADsHold = &IID_IADsHold_Value;
pub const IADsHold = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsHold,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ObjectName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsHold,
            bstr_object_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Amount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsHold,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Amount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsHold,
            ln_amount: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getObjectName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsHold.VTable, @ptrCast(self.vtable)).get_ObjectName(@as(*const IADsHold, @ptrCast(self)), retval_);
            }
            pub inline fn putObjectName(self: *const T, bstr_object_name_: ?BSTR) HRESULT {
                return @as(*const IADsHold.VTable, @ptrCast(self.vtable)).put_ObjectName(@as(*const IADsHold, @ptrCast(self)), bstr_object_name_);
            }
            pub inline fn getAmount(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsHold.VTable, @ptrCast(self.vtable)).get_Amount(@as(*const IADsHold, @ptrCast(self)), retval_);
            }
            pub inline fn putAmount(self: *const T, ln_amount_: i32) HRESULT {
                return @as(*const IADsHold.VTable, @ptrCast(self.vtable)).put_Amount(@as(*const IADsHold, @ptrCast(self)), ln_amount_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsObjectOptions_Value = Guid.initString("46f14fda-232b-11d1-a808-00c04fd8d5a8");
pub const IID_IADsObjectOptions = &IID_IADsObjectOptions_Value;
pub const IADsObjectOptions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetOption: *const fn (
            self: *const IADsObjectOptions,
            ln_option: i32,
            pv_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOption: *const fn (
            self: *const IADsObjectOptions,
            ln_option: i32,
            v_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getOption(self: *const T, ln_option_: i32, pv_value_: ?*VARIANT) HRESULT {
                return @as(*const IADsObjectOptions.VTable, @ptrCast(self.vtable)).GetOption(@as(*const IADsObjectOptions, @ptrCast(self)), ln_option_, pv_value_);
            }
            pub inline fn setOption(self: *const T, ln_option_: i32, v_value_: VARIANT) HRESULT {
                return @as(*const IADsObjectOptions.VTable, @ptrCast(self.vtable)).SetOption(@as(*const IADsObjectOptions, @ptrCast(self)), ln_option_, v_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsPathname_Value = Guid.initString("d592aed4-f420-11d0-a36e-00c04fb950dc");
pub const IID_IADsPathname = &IID_IADsPathname_Value;
pub const IADsPathname = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Set: *const fn (
            self: *const IADsPathname,
            bstr_a_ds_path: ?BSTR,
            ln_set_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDisplayType: *const fn (
            self: *const IADsPathname,
            ln_display_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Retrieve: *const fn (
            self: *const IADsPathname,
            ln_format_type: i32,
            pbstr_a_ds_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumElements: *const fn (
            self: *const IADsPathname,
            pln_num_path_elements: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetElement: *const fn (
            self: *const IADsPathname,
            ln_element_index: i32,
            pbstr_element: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddLeafElement: *const fn (
            self: *const IADsPathname,
            bstr_leaf_element: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveLeafElement: *const fn (
            self: *const IADsPathname,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPath: *const fn (
            self: *const IADsPathname,
            pp_ads_path: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEscapedElement: *const fn (
            self: *const IADsPathname,
            ln_reserved: i32,
            bstr_in_str: ?BSTR,
            pbstr_out_str: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EscapedMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPathname,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EscapedMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsPathname,
            ln_escaped_mode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn set(self: *const T, bstr_a_ds_path_: ?BSTR, ln_set_type_: i32) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).Set(@as(*const IADsPathname, @ptrCast(self)), bstr_a_ds_path_, ln_set_type_);
            }
            pub inline fn setDisplayType(self: *const T, ln_display_type_: i32) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).SetDisplayType(@as(*const IADsPathname, @ptrCast(self)), ln_display_type_);
            }
            pub inline fn retrieve(self: *const T, ln_format_type_: i32, pbstr_a_ds_path_: ?*?BSTR) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).Retrieve(@as(*const IADsPathname, @ptrCast(self)), ln_format_type_, pbstr_a_ds_path_);
            }
            pub inline fn getNumElements(self: *const T, pln_num_path_elements_: ?*i32) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).GetNumElements(@as(*const IADsPathname, @ptrCast(self)), pln_num_path_elements_);
            }
            pub inline fn getElement(self: *const T, ln_element_index_: i32, pbstr_element_: ?*?BSTR) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).GetElement(@as(*const IADsPathname, @ptrCast(self)), ln_element_index_, pbstr_element_);
            }
            pub inline fn addLeafElement(self: *const T, bstr_leaf_element_: ?BSTR) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).AddLeafElement(@as(*const IADsPathname, @ptrCast(self)), bstr_leaf_element_);
            }
            pub inline fn removeLeafElement(self: *const T) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).RemoveLeafElement(@as(*const IADsPathname, @ptrCast(self)));
            }
            pub inline fn copyPath(self: *const T, pp_ads_path_: ?*?*IDispatch) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).CopyPath(@as(*const IADsPathname, @ptrCast(self)), pp_ads_path_);
            }
            pub inline fn getEscapedElement(self: *const T, ln_reserved_: i32, bstr_in_str_: ?BSTR, pbstr_out_str_: ?*?BSTR) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).GetEscapedElement(@as(*const IADsPathname, @ptrCast(self)), ln_reserved_, bstr_in_str_, pbstr_out_str_);
            }
            pub inline fn getEscapedMode(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).get_EscapedMode(@as(*const IADsPathname, @ptrCast(self)), retval_);
            }
            pub inline fn putEscapedMode(self: *const T, ln_escaped_mode_: i32) HRESULT {
                return @as(*const IADsPathname.VTable, @ptrCast(self.vtable)).put_EscapedMode(@as(*const IADsPathname, @ptrCast(self)), ln_escaped_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsADSystemInfo_Value = Guid.initString("5bb11929-afd1-11d2-9cb9-0000f87a369e");
pub const IID_IADsADSystemInfo = &IID_IADsADSystemInfo_Value;
pub const IADsADSystemInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsADSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ComputerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsADSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SiteName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsADSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DomainShortName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsADSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DomainDNSName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsADSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ForestDNSName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsADSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PDCRoleOwner: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsADSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SchemaRoleOwner: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsADSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsNativeMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsADSystemInfo,
            retval: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAnyDCName: *const fn (
            self: *const IADsADSystemInfo,
            psz_d_c_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDCSiteName: *const fn (
            self: *const IADsADSystemInfo,
            sz_server: ?BSTR,
            psz_site_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshSchemaCache: *const fn (
            self: *const IADsADSystemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrees: *const fn (
            self: *const IADsADSystemInfo,
            pv_trees: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getUserName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).get_UserName(@as(*const IADsADSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getComputerName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).get_ComputerName(@as(*const IADsADSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getSiteName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).get_SiteName(@as(*const IADsADSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getDomainShortName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).get_DomainShortName(@as(*const IADsADSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getDomainDNSName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).get_DomainDNSName(@as(*const IADsADSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getForestDNSName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).get_ForestDNSName(@as(*const IADsADSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getPDCRoleOwner(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).get_PDCRoleOwner(@as(*const IADsADSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getSchemaRoleOwner(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).get_SchemaRoleOwner(@as(*const IADsADSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getIsNativeMode(self: *const T, retval_: ?*i16) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).get_IsNativeMode(@as(*const IADsADSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getAnyDCName(self: *const T, psz_d_c_name_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).GetAnyDCName(@as(*const IADsADSystemInfo, @ptrCast(self)), psz_d_c_name_);
            }
            pub inline fn getDCSiteName(self: *const T, sz_server_: ?BSTR, psz_site_name_: ?*?BSTR) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).GetDCSiteName(@as(*const IADsADSystemInfo, @ptrCast(self)), sz_server_, psz_site_name_);
            }
            pub inline fn refreshSchemaCache(self: *const T) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).RefreshSchemaCache(@as(*const IADsADSystemInfo, @ptrCast(self)));
            }
            pub inline fn getTrees(self: *const T, pv_trees_: ?*VARIANT) HRESULT {
                return @as(*const IADsADSystemInfo.VTable, @ptrCast(self.vtable)).GetTrees(@as(*const IADsADSystemInfo, @ptrCast(self)), pv_trees_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsWinNTSystemInfo_Value = Guid.initString("6c6d65dc-afd1-11d2-9cb9-0000f87a369e");
pub const IID_IADsWinNTSystemInfo = &IID_IADsWinNTSystemInfo_Value;
pub const IADsWinNTSystemInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsWinNTSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ComputerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsWinNTSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DomainName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsWinNTSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PDC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsWinNTSystemInfo,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getUserName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsWinNTSystemInfo.VTable, @ptrCast(self.vtable)).get_UserName(@as(*const IADsWinNTSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getComputerName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsWinNTSystemInfo.VTable, @ptrCast(self.vtable)).get_ComputerName(@as(*const IADsWinNTSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getDomainName(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsWinNTSystemInfo.VTable, @ptrCast(self.vtable)).get_DomainName(@as(*const IADsWinNTSystemInfo, @ptrCast(self)), retval_);
            }
            pub inline fn getPDC(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsWinNTSystemInfo.VTable, @ptrCast(self.vtable)).get_PDC(@as(*const IADsWinNTSystemInfo, @ptrCast(self)), retval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsDNWithBinary_Value = Guid.initString("7e99c0a2-f935-11d2-ba96-00c04fb6d0d1");
pub const IID_IADsDNWithBinary = &IID_IADsDNWithBinary_Value;
pub const IADsDNWithBinary = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BinaryValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDNWithBinary,
            retval: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BinaryValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDNWithBinary,
            v_binary_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DNString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDNWithBinary,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DNString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDNWithBinary,
            bstr_d_n_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBinaryValue(self: *const T, retval_: ?*VARIANT) HRESULT {
                return @as(*const IADsDNWithBinary.VTable, @ptrCast(self.vtable)).get_BinaryValue(@as(*const IADsDNWithBinary, @ptrCast(self)), retval_);
            }
            pub inline fn putBinaryValue(self: *const T, v_binary_value_: VARIANT) HRESULT {
                return @as(*const IADsDNWithBinary.VTable, @ptrCast(self.vtable)).put_BinaryValue(@as(*const IADsDNWithBinary, @ptrCast(self)), v_binary_value_);
            }
            pub inline fn getDNString(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsDNWithBinary.VTable, @ptrCast(self.vtable)).get_DNString(@as(*const IADsDNWithBinary, @ptrCast(self)), retval_);
            }
            pub inline fn putDNString(self: *const T, bstr_d_n_string_: ?BSTR) HRESULT {
                return @as(*const IADsDNWithBinary.VTable, @ptrCast(self.vtable)).put_DNString(@as(*const IADsDNWithBinary, @ptrCast(self)), bstr_d_n_string_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsDNWithString_Value = Guid.initString("370df02e-f934-11d2-ba96-00c04fb6d0d1");
pub const IID_IADsDNWithString = &IID_IADsDNWithString_Value;
pub const IADsDNWithString = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StringValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDNWithString,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StringValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDNWithString,
            bstr_string_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DNString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDNWithString,
            retval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DNString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsDNWithString,
            bstr_d_n_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStringValue(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsDNWithString.VTable, @ptrCast(self.vtable)).get_StringValue(@as(*const IADsDNWithString, @ptrCast(self)), retval_);
            }
            pub inline fn putStringValue(self: *const T, bstr_string_value_: ?BSTR) HRESULT {
                return @as(*const IADsDNWithString.VTable, @ptrCast(self.vtable)).put_StringValue(@as(*const IADsDNWithString, @ptrCast(self)), bstr_string_value_);
            }
            pub inline fn getDNString(self: *const T, retval_: ?*?BSTR) HRESULT {
                return @as(*const IADsDNWithString.VTable, @ptrCast(self.vtable)).get_DNString(@as(*const IADsDNWithString, @ptrCast(self)), retval_);
            }
            pub inline fn putDNString(self: *const T, bstr_d_n_string_: ?BSTR) HRESULT {
                return @as(*const IADsDNWithString.VTable, @ptrCast(self.vtable)).put_DNString(@as(*const IADsDNWithString, @ptrCast(self)), bstr_d_n_string_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsSecurityUtility_Value = Guid.initString("a63251b2-5f21-474b-ab52-4a8efad10895");
pub const IID_IADsSecurityUtility = &IID_IADsSecurityUtility_Value;
pub const IADsSecurityUtility = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetSecurityDescriptor: *const fn (
            self: *const IADsSecurityUtility,
            var_path: VARIANT,
            l_path_format: i32,
            l_format: i32,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityDescriptor: *const fn (
            self: *const IADsSecurityUtility,
            var_path: VARIANT,
            l_path_format: i32,
            var_data: VARIANT,
            l_data_format: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertSecurityDescriptor: *const fn (
            self: *const IADsSecurityUtility,
            var_s_d: VARIANT,
            l_data_format: i32,
            l_out_format: i32,
            p_result: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecurityMask: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityUtility,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecurityMask: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsSecurityUtility,
            ln_security_mask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSecurityDescriptor(self: *const T, var_path_: VARIANT, l_path_format_: i32, l_format_: i32, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const IADsSecurityUtility.VTable, @ptrCast(self.vtable)).GetSecurityDescriptor(@as(*const IADsSecurityUtility, @ptrCast(self)), var_path_, l_path_format_, l_format_, p_variant_);
            }
            pub inline fn setSecurityDescriptor(self: *const T, var_path_: VARIANT, l_path_format_: i32, var_data_: VARIANT, l_data_format_: i32) HRESULT {
                return @as(*const IADsSecurityUtility.VTable, @ptrCast(self.vtable)).SetSecurityDescriptor(@as(*const IADsSecurityUtility, @ptrCast(self)), var_path_, l_path_format_, var_data_, l_data_format_);
            }
            pub inline fn convertSecurityDescriptor(self: *const T, var_s_d_: VARIANT, l_data_format_: i32, l_out_format_: i32, p_result_: ?*VARIANT) HRESULT {
                return @as(*const IADsSecurityUtility.VTable, @ptrCast(self.vtable)).ConvertSecurityDescriptor(@as(*const IADsSecurityUtility, @ptrCast(self)), var_s_d_, l_data_format_, l_out_format_, p_result_);
            }
            pub inline fn getSecurityMask(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const IADsSecurityUtility.VTable, @ptrCast(self.vtable)).get_SecurityMask(@as(*const IADsSecurityUtility, @ptrCast(self)), retval_);
            }
            pub inline fn putSecurityMask(self: *const T, ln_security_mask_: i32) HRESULT {
                return @as(*const IADsSecurityUtility.VTable, @ptrCast(self.vtable)).put_SecurityMask(@as(*const IADsSecurityUtility, @ptrCast(self)), ln_security_mask_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSOBJECT = extern struct {
    dwFlags: u32,
    dwProviderFlags: u32,
    offsetName: u32,
    offsetClass: u32,
};

pub const DSOBJECTNAMES = extern struct {
    clsidNamespace: Guid,
    cItems: u32,
    aObjects: [1]DSOBJECT,
};

pub const DSDISPLAYSPECOPTIONS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    offsetAttribPrefix: u32,
    offsetUserName: u32,
    offsetPassword: u32,
    offsetServer: u32,
    offsetServerConfigPath: u32,
};

pub const DSPROPERTYPAGEINFO = extern struct {
    offsetString: u32,
};

pub const DOMAINDESC = extern struct {
    pszName: ?PWSTR,
    pszPath: ?PWSTR,
    pszNCName: ?PWSTR,
    pszTrustParent: ?PWSTR,
    pszObjectClass: ?PWSTR,
    ulFlags: u32,
    fDownLevel: BOOL,
    pdChildList: ?*DOMAINDESC,
    pdNextSibling: ?*DOMAINDESC,
};

pub const DOMAIN_TREE = extern struct {
    dsSize: u32,
    dwCount: u32,
    aDomains: [1]DOMAINDESC,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDsBrowseDomainTree_Value = Guid.initString("7cabcf1e-78f5-11d2-960c-00c04fa31a86");
pub const IID_IDsBrowseDomainTree = &IID_IDsBrowseDomainTree_Value;
pub const IDsBrowseDomainTree = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BrowseTo: *const fn (
            self: *const IDsBrowseDomainTree,
            hwnd_parent: ?HWND,
            ppsz_target_path: ?*?PWSTR,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDomains: *const fn (
            self: *const IDsBrowseDomainTree,
            pp_domain_tree: ?*?*DOMAIN_TREE,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeDomains: *const fn (
            self: *const IDsBrowseDomainTree,
            pp_domain_tree: ?*?*DOMAIN_TREE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlushCachedDomains: *const fn (
            self: *const IDsBrowseDomainTree,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComputer: *const fn (
            self: *const IDsBrowseDomainTree,
            psz_computer_name: ?[*:0]const u16,
            psz_user_name: ?[*:0]const u16,
            psz_password: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn browseTo(self: *const T, hwnd_parent_: ?HWND, ppsz_target_path_: ?*?PWSTR, dw_flags_: u32) HRESULT {
                return @as(*const IDsBrowseDomainTree.VTable, @ptrCast(self.vtable)).BrowseTo(@as(*const IDsBrowseDomainTree, @ptrCast(self)), hwnd_parent_, ppsz_target_path_, dw_flags_);
            }
            pub inline fn getDomains(self: *const T, pp_domain_tree_: ?*?*DOMAIN_TREE, dw_flags_: u32) HRESULT {
                return @as(*const IDsBrowseDomainTree.VTable, @ptrCast(self.vtable)).GetDomains(@as(*const IDsBrowseDomainTree, @ptrCast(self)), pp_domain_tree_, dw_flags_);
            }
            pub inline fn freeDomains(self: *const T, pp_domain_tree_: ?*?*DOMAIN_TREE) HRESULT {
                return @as(*const IDsBrowseDomainTree.VTable, @ptrCast(self.vtable)).FreeDomains(@as(*const IDsBrowseDomainTree, @ptrCast(self)), pp_domain_tree_);
            }
            pub inline fn flushCachedDomains(self: *const T) HRESULT {
                return @as(*const IDsBrowseDomainTree.VTable, @ptrCast(self.vtable)).FlushCachedDomains(@as(*const IDsBrowseDomainTree, @ptrCast(self)));
            }
            pub inline fn setComputer(self: *const T, psz_computer_name_: ?[*:0]const u16, psz_user_name_: ?[*:0]const u16, psz_password_: ?[*:0]const u16) HRESULT {
                return @as(*const IDsBrowseDomainTree.VTable, @ptrCast(self.vtable)).SetComputer(@as(*const IDsBrowseDomainTree, @ptrCast(self)), psz_computer_name_, psz_user_name_, psz_password_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const LPDSENUMATTRIBUTES = *const fn (
    l_param: LPARAM,
    psz_attribute_name: ?[*:0]const u16,
    psz_display_name: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DSCLASSCREATIONINFO = extern struct {
    dwFlags: u32,
    clsidWizardDialog: Guid,
    clsidWizardPrimaryPage: Guid,
    cWizardExtensions: u32,
    aWizardExtensions: [1]Guid,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDsDisplaySpecifier_Value = Guid.initString("1ab4a8c0-6a0b-11d2-ad49-00c04fa31a86");
pub const IID_IDsDisplaySpecifier = &IID_IDsDisplaySpecifier_Value;
pub const IDsDisplaySpecifier = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetServer: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_server: ?[*:0]const u16,
            psz_user_name: ?[*:0]const u16,
            psz_password: ?[*:0]const u16,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguageID: *const fn (
            self: *const IDsDisplaySpecifier,
            langid: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplaySpecifier: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_object_class: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_object_class: ?[*:0]const u16,
            dw_flags: u32,
            psz_buffer: [*:0]u16,
            cch_buffer: i32,
            presid: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIcon: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_object_class: ?[*:0]const u16,
            dw_flags: u32,
            cx_icon: i32,
            cy_icon: i32,
        ) callconv(@import("std").os.windows.WINAPI) ?HICON,
        GetFriendlyClassName: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_object_class: ?[*:0]const u16,
            psz_buffer: [*:0]u16,
            cch_buffer: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyAttributeName: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_object_class: ?[*:0]const u16,
            psz_attribute_name: ?[*:0]const u16,
            psz_buffer: [*:0]u16,
            cch_buffer: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsClassContainer: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_object_class: ?[*:0]const u16,
            psz_a_ds_path: ?[*:0]const u16,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetClassCreationInfo: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_object_class: ?[*:0]const u16,
            ppdscci: ?*?*DSCLASSCREATIONINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumClassAttributes: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_object_class: ?[*:0]const u16,
            pcb_enum: ?LPDSENUMATTRIBUTES,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeADsType: *const fn (
            self: *const IDsDisplaySpecifier,
            psz_attribute_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) ADSTYPEENUM,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setServer(self: *const T, psz_server_: ?[*:0]const u16, psz_user_name_: ?[*:0]const u16, psz_password_: ?[*:0]const u16, dw_flags_: u32) HRESULT {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).SetServer(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_server_, psz_user_name_, psz_password_, dw_flags_);
            }
            pub inline fn setLanguageID(self: *const T, langid_: u16) HRESULT {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).SetLanguageID(@as(*const IDsDisplaySpecifier, @ptrCast(self)), langid_);
            }
            pub inline fn getDisplaySpecifier(self: *const T, psz_object_class_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).GetDisplaySpecifier(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_object_class_, riid_, ppv_);
            }
            pub inline fn getIconLocation(self: *const T, psz_object_class_: ?[*:0]const u16, dw_flags_: u32, psz_buffer_: [*:0]u16, cch_buffer_: i32, presid_: ?*i32) HRESULT {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).GetIconLocation(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_object_class_, dw_flags_, psz_buffer_, cch_buffer_, presid_);
            }
            pub inline fn getIcon(self: *const T, psz_object_class_: ?[*:0]const u16, dw_flags_: u32, cx_icon_: i32, cy_icon_: i32) ?HICON {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).GetIcon(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_object_class_, dw_flags_, cx_icon_, cy_icon_);
            }
            pub inline fn getFriendlyClassName(self: *const T, psz_object_class_: ?[*:0]const u16, psz_buffer_: [*:0]u16, cch_buffer_: i32) HRESULT {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).GetFriendlyClassName(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_object_class_, psz_buffer_, cch_buffer_);
            }
            pub inline fn getFriendlyAttributeName(self: *const T, psz_object_class_: ?[*:0]const u16, psz_attribute_name_: ?[*:0]const u16, psz_buffer_: [*:0]u16, cch_buffer_: u32) HRESULT {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).GetFriendlyAttributeName(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_object_class_, psz_attribute_name_, psz_buffer_, cch_buffer_);
            }
            pub inline fn isClassContainer(self: *const T, psz_object_class_: ?[*:0]const u16, psz_a_ds_path_: ?[*:0]const u16, dw_flags_: u32) BOOL {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).IsClassContainer(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_object_class_, psz_a_ds_path_, dw_flags_);
            }
            pub inline fn getClassCreationInfo(self: *const T, psz_object_class_: ?[*:0]const u16, ppdscci_: ?*?*DSCLASSCREATIONINFO) HRESULT {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).GetClassCreationInfo(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_object_class_, ppdscci_);
            }
            pub inline fn enumClassAttributes(self: *const T, psz_object_class_: ?[*:0]const u16, pcb_enum_: ?LPDSENUMATTRIBUTES, l_param_: LPARAM) HRESULT {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).EnumClassAttributes(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_object_class_, pcb_enum_, l_param_);
            }
            pub inline fn getAttributeADsType(self: *const T, psz_attribute_name_: ?[*:0]const u16) ADSTYPEENUM {
                return @as(*const IDsDisplaySpecifier.VTable, @ptrCast(self.vtable)).GetAttributeADsType(@as(*const IDsDisplaySpecifier, @ptrCast(self)), psz_attribute_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSBROWSEINFOW = extern struct {
    cbStruct: u32,
    hwndOwner: ?HWND,
    pszCaption: ?[*:0]const u16,
    pszTitle: ?[*:0]const u16,
    pszRoot: ?[*:0]const u16,
    pszPath: ?PWSTR,
    cchPath: u32,
    dwFlags: u32,
    pfnCallback: ?BFFCALLBACK,
    lParam: LPARAM,
    dwReturnFormat: u32,
    pUserName: ?[*:0]const u16,
    pPassword: ?[*:0]const u16,
    pszObjectClass: ?PWSTR,
    cchObjectClass: u32,
};

pub const DSBROWSEINFOA = extern struct {
    cbStruct: u32,
    hwndOwner: ?HWND,
    pszCaption: ?[*:0]const u8,
    pszTitle: ?[*:0]const u8,
    pszRoot: ?[*:0]const u16,
    pszPath: ?PWSTR,
    cchPath: u32,
    dwFlags: u32,
    pfnCallback: ?BFFCALLBACK,
    lParam: LPARAM,
    dwReturnFormat: u32,
    pUserName: ?[*:0]const u16,
    pPassword: ?[*:0]const u16,
    pszObjectClass: ?PWSTR,
    cchObjectClass: u32,
};

pub const DSBITEMW = extern struct {
    cbStruct: u32,
    pszADsPath: ?[*:0]const u16,
    pszClass: ?[*:0]const u16,
    dwMask: u32,
    dwState: u32,
    dwStateMask: u32,
    szDisplayName: [64]u16,
    szIconLocation: [260]u16,
    iIconResID: i32,
};

pub const DSBITEMA = extern struct {
    cbStruct: u32,
    pszADsPath: ?[*:0]const u16,
    pszClass: ?[*:0]const u16,
    dwMask: u32,
    dwState: u32,
    dwStateMask: u32,
    szDisplayName: [64]CHAR,
    szIconLocation: [260]CHAR,
    iIconResID: i32,
};

pub const DSOP_UPLEVEL_FILTER_FLAGS = extern struct {
    flBothModes: u32,
    flMixedModeOnly: u32,
    flNativeModeOnly: u32,
};

pub const DSOP_FILTER_FLAGS = extern struct {
    Uplevel: DSOP_UPLEVEL_FILTER_FLAGS,
    flDownlevel: u32,
};

pub const DSOP_SCOPE_INIT_INFO = extern struct {
    cbSize: u32,
    flType: u32,
    flScope: u32,
    FilterFlags: DSOP_FILTER_FLAGS,
    pwzDcName: ?[*:0]const u16,
    pwzADsPath: ?[*:0]const u16,
    hr: HRESULT,
};

pub const DSOP_INIT_INFO = extern struct {
    cbSize: u32,
    pwzTargetComputer: ?[*:0]const u16,
    cDsScopeInfos: u32,
    aDsScopeInfos: ?*DSOP_SCOPE_INIT_INFO,
    flOptions: u32,
    cAttributesToFetch: u32,
    apwzAttributeNames: ?*?PWSTR,
};

pub const DS_SELECTION = extern struct {
    pwzName: ?PWSTR,
    pwzADsPath: ?PWSTR,
    pwzClass: ?PWSTR,
    pwzUPN: ?PWSTR,
    pvarFetchedAttributes: ?*VARIANT,
    flScopeType: u32,
};

pub const DS_SELECTION_LIST = extern struct {
    cItems: u32,
    cFetchedAttributes: u32,
    aDsSelection: [1]DS_SELECTION,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDsObjectPicker_Value = Guid.initString("0c87e64e-3b7a-11d2-b9e0-00c04fd8dbf7");
pub const IID_IDsObjectPicker = &IID_IDsObjectPicker_Value;
pub const IDsObjectPicker = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IDsObjectPicker,
            p_init_info: ?*DSOP_INIT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeDialog: *const fn (
            self: *const IDsObjectPicker,
            hwnd_parent: ?HWND,
            ppdo_selections: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_init_info_: ?*DSOP_INIT_INFO) HRESULT {
                return @as(*const IDsObjectPicker.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDsObjectPicker, @ptrCast(self)), p_init_info_);
            }
            pub inline fn invokeDialog(self: *const T, hwnd_parent_: ?HWND, ppdo_selections_: ?*?*IDataObject) HRESULT {
                return @as(*const IDsObjectPicker.VTable, @ptrCast(self.vtable)).InvokeDialog(@as(*const IDsObjectPicker, @ptrCast(self)), hwnd_parent_, ppdo_selections_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IDsObjectPickerCredentials_Value = Guid.initString("e2d3ec9b-d041-445a-8f16-4748de8fb1cf");
pub const IID_IDsObjectPickerCredentials = &IID_IDsObjectPickerCredentials_Value;
pub const IDsObjectPickerCredentials = extern struct {
    pub const VTable = extern struct {
        base: IDsObjectPicker.VTable,
        SetCredentials: *const fn (
            self: *const IDsObjectPickerCredentials,
            sz_user_name: ?[*:0]const u16,
            sz_password: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDsObjectPicker.MethodMixin(T);
            pub inline fn setCredentials(self: *const T, sz_user_name_: ?[*:0]const u16, sz_password_: ?[*:0]const u16) HRESULT {
                return @as(*const IDsObjectPickerCredentials.VTable, @ptrCast(self.vtable)).SetCredentials(@as(*const IDsObjectPickerCredentials, @ptrCast(self)), sz_user_name_, sz_password_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSQUERYINITPARAMS = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    pDefaultScope: ?PWSTR,
    pDefaultSaveLocation: ?PWSTR,
    pUserName: ?PWSTR,
    pPassword: ?PWSTR,
    pServer: ?PWSTR,
};

pub const DSCOLUMN = extern struct {
    dwFlags: u32,
    fmt: i32,
    cx: i32,
    idsName: i32,
    offsetProperty: i32,
    dwReserved: u32,
};

pub const DSQUERYPARAMS = extern struct {
    cbStruct: u32,
    dwFlags: u32,
    hInstance: ?HINSTANCE,
    offsetQuery: i32,
    iColumns: i32,
    dwReserved: u32,
    aColumns: [1]DSCOLUMN,
};

pub const DSQUERYCLASSLIST = extern struct {
    cbStruct: u32,
    cClasses: i32,
    offsetClass: [1]u32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDsAdminCreateObj_Value = Guid.initString("53554a38-f902-11d2-82b9-00c04f68928b");
pub const IID_IDsAdminCreateObj = &IID_IDsAdminCreateObj_Value;
pub const IDsAdminCreateObj = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IDsAdminCreateObj,
            p_a_ds_container_obj: ?*IADsContainer,
            p_a_ds_copy_source: ?*IADs,
            lpsz_class_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateModal: *const fn (
            self: *const IDsAdminCreateObj,
            hwnd_parent: ?HWND,
            pp_a_ds_obj: ?*?*IADs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_a_ds_container_obj_: ?*IADsContainer, p_a_ds_copy_source_: ?*IADs, lpsz_class_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IDsAdminCreateObj.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDsAdminCreateObj, @ptrCast(self)), p_a_ds_container_obj_, p_a_ds_copy_source_, lpsz_class_name_);
            }
            pub inline fn createModal(self: *const T, hwnd_parent_: ?HWND, pp_a_ds_obj_: ?*?*IADs) HRESULT {
                return @as(*const IDsAdminCreateObj.VTable, @ptrCast(self.vtable)).CreateModal(@as(*const IDsAdminCreateObj, @ptrCast(self)), hwnd_parent_, pp_a_ds_obj_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDsAdminNewObj_Value = Guid.initString("f2573587-e6fc-11d2-82af-00c04f68928b");
pub const IID_IDsAdminNewObj = &IID_IDsAdminNewObj_Value;
pub const IDsAdminNewObj = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetButtons: *const fn (
            self: *const IDsAdminNewObj,
            n_curr_index: u32,
            b_valid: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageCounts: *const fn (
            self: *const IDsAdminNewObj,
            pn_total: ?*i32,
            pn_start_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setButtons(self: *const T, n_curr_index_: u32, b_valid_: BOOL) HRESULT {
                return @as(*const IDsAdminNewObj.VTable, @ptrCast(self.vtable)).SetButtons(@as(*const IDsAdminNewObj, @ptrCast(self)), n_curr_index_, b_valid_);
            }
            pub inline fn getPageCounts(self: *const T, pn_total_: ?*i32, pn_start_index_: ?*i32) HRESULT {
                return @as(*const IDsAdminNewObj.VTable, @ptrCast(self.vtable)).GetPageCounts(@as(*const IDsAdminNewObj, @ptrCast(self)), pn_total_, pn_start_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDsAdminNewObjPrimarySite_Value = Guid.initString("be2b487e-f904-11d2-82b9-00c04f68928b");
pub const IID_IDsAdminNewObjPrimarySite = &IID_IDsAdminNewObjPrimarySite_Value;
pub const IDsAdminNewObjPrimarySite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateNew: *const fn (
            self: *const IDsAdminNewObjPrimarySite,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IDsAdminNewObjPrimarySite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createNew(self: *const T, psz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IDsAdminNewObjPrimarySite.VTable, @ptrCast(self.vtable)).CreateNew(@as(*const IDsAdminNewObjPrimarySite, @ptrCast(self)), psz_name_);
            }
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IDsAdminNewObjPrimarySite.VTable, @ptrCast(self.vtable)).Commit(@as(*const IDsAdminNewObjPrimarySite, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSA_NEWOBJ_DISPINFO = extern struct {
    dwSize: u32,
    hObjClassIcon: ?HICON,
    lpszWizTitle: ?PWSTR,
    lpszContDisplayName: ?PWSTR,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDsAdminNewObjExt_Value = Guid.initString("6088eae2-e7bf-11d2-82af-00c04f68928b");
pub const IID_IDsAdminNewObjExt = &IID_IDsAdminNewObjExt_Value;
pub const IDsAdminNewObjExt = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IDsAdminNewObjExt,
            p_a_ds_container_obj: ?*IADsContainer,
            p_a_ds_copy_source: ?*IADs,
            lpsz_class_name: ?[*:0]const u16,
            p_ds_admin_new_obj: ?*IDsAdminNewObj,
            p_disp_info: ?*DSA_NEWOBJ_DISPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPages: *const fn (
            self: *const IDsAdminNewObjExt,
            lpfn_add_page: ?LPFNSVADDPROPSHEETPAGE,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObject: *const fn (
            self: *const IDsAdminNewObjExt,
            p_a_ds_obj: ?*IADs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteData: *const fn (
            self: *const IDsAdminNewObjExt,
            h_wnd: ?HWND,
            u_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnError: *const fn (
            self: *const IDsAdminNewObjExt,
            h_wnd: ?HWND,
            hr: HRESULT,
            u_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSummaryInfo: *const fn (
            self: *const IDsAdminNewObjExt,
            p_bstr_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_a_ds_container_obj_: ?*IADsContainer, p_a_ds_copy_source_: ?*IADs, lpsz_class_name_: ?[*:0]const u16, p_ds_admin_new_obj_: ?*IDsAdminNewObj, p_disp_info_: ?*DSA_NEWOBJ_DISPINFO) HRESULT {
                return @as(*const IDsAdminNewObjExt.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDsAdminNewObjExt, @ptrCast(self)), p_a_ds_container_obj_, p_a_ds_copy_source_, lpsz_class_name_, p_ds_admin_new_obj_, p_disp_info_);
            }
            pub inline fn addPages(self: *const T, lpfn_add_page_: ?LPFNSVADDPROPSHEETPAGE, l_param_: LPARAM) HRESULT {
                return @as(*const IDsAdminNewObjExt.VTable, @ptrCast(self.vtable)).AddPages(@as(*const IDsAdminNewObjExt, @ptrCast(self)), lpfn_add_page_, l_param_);
            }
            pub inline fn setObject(self: *const T, p_a_ds_obj_: ?*IADs) HRESULT {
                return @as(*const IDsAdminNewObjExt.VTable, @ptrCast(self.vtable)).SetObject(@as(*const IDsAdminNewObjExt, @ptrCast(self)), p_a_ds_obj_);
            }
            pub inline fn writeData(self: *const T, h_wnd_: ?HWND, u_context_: u32) HRESULT {
                return @as(*const IDsAdminNewObjExt.VTable, @ptrCast(self.vtable)).WriteData(@as(*const IDsAdminNewObjExt, @ptrCast(self)), h_wnd_, u_context_);
            }
            pub inline fn onError(self: *const T, h_wnd_: ?HWND, hr_: HRESULT, u_context_: u32) HRESULT {
                return @as(*const IDsAdminNewObjExt.VTable, @ptrCast(self.vtable)).OnError(@as(*const IDsAdminNewObjExt, @ptrCast(self)), h_wnd_, hr_, u_context_);
            }
            pub inline fn getSummaryInfo(self: *const T, p_bstr_text_: ?*?BSTR) HRESULT {
                return @as(*const IDsAdminNewObjExt.VTable, @ptrCast(self.vtable)).GetSummaryInfo(@as(*const IDsAdminNewObjExt, @ptrCast(self)), p_bstr_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDsAdminNotifyHandler_Value = Guid.initString("e4a2b8b3-5a18-11d2-97c1-00a0c9a06d2d");
pub const IID_IDsAdminNotifyHandler = &IID_IDsAdminNotifyHandler_Value;
pub const IDsAdminNotifyHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IDsAdminNotifyHandler,
            p_extra_info: ?*IDataObject,
            pu_event_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin: *const fn (
            self: *const IDsAdminNotifyHandler,
            u_event: u32,
            p_arg1: ?*IDataObject,
            p_arg2: ?*IDataObject,
            pu_flags: ?*u32,
            p_bstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn (
            self: *const IDsAdminNotifyHandler,
            n_item: u32,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn (
            self: *const IDsAdminNotifyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_extra_info_: ?*IDataObject, pu_event_flags_: ?*u32) HRESULT {
                return @as(*const IDsAdminNotifyHandler.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDsAdminNotifyHandler, @ptrCast(self)), p_extra_info_, pu_event_flags_);
            }
            pub inline fn begin(self: *const T, u_event_: u32, p_arg1_: ?*IDataObject, p_arg2_: ?*IDataObject, pu_flags_: ?*u32, p_bstr_: ?*?BSTR) HRESULT {
                return @as(*const IDsAdminNotifyHandler.VTable, @ptrCast(self.vtable)).Begin(@as(*const IDsAdminNotifyHandler, @ptrCast(self)), u_event_, p_arg1_, p_arg2_, pu_flags_, p_bstr_);
            }
            pub inline fn notify(self: *const T, n_item_: u32, u_flags_: u32) HRESULT {
                return @as(*const IDsAdminNotifyHandler.VTable, @ptrCast(self.vtable)).Notify(@as(*const IDsAdminNotifyHandler, @ptrCast(self)), n_item_, u_flags_);
            }
            pub inline fn end(self: *const T) HRESULT {
                return @as(*const IDsAdminNotifyHandler.VTable, @ptrCast(self.vtable)).End(@as(*const IDsAdminNotifyHandler, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const ADSPROPINITPARAMS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    hr: HRESULT,
    pDsObj: ?*IDirectoryObject,
    pwzCN: ?PWSTR,
    pWritableAttrs: ?*ADS_ATTR_INFO,
};

pub const ADSPROPERROR = extern struct {
    hwndPage: ?HWND,
    pszPageTitle: ?PWSTR,
    pszObjPath: ?PWSTR,
    pszObjClass: ?PWSTR,
    hr: HRESULT,
    pszError: ?PWSTR,
};

pub const SCHEDULE_HEADER = extern struct {
    Type: u32,
    Offset: u32,
};

pub const SCHEDULE = extern struct {
    Size: u32,
    Bandwidth: u32,
    NumberOfSchedules: u32,
    Schedules: [1]SCHEDULE_HEADER,
};

pub const DS_MANGLE_FOR = enum(i32) {
    UNKNOWN = 0,
    OBJECT_RDN_FOR_DELETION = 1,
    OBJECT_RDN_FOR_NAME_CONFLICT = 2,
};
pub const DS_MANGLE_UNKNOWN = DS_MANGLE_FOR.UNKNOWN;
pub const DS_MANGLE_OBJECT_RDN_FOR_DELETION = DS_MANGLE_FOR.OBJECT_RDN_FOR_DELETION;
pub const DS_MANGLE_OBJECT_RDN_FOR_NAME_CONFLICT = DS_MANGLE_FOR.OBJECT_RDN_FOR_NAME_CONFLICT;

pub const DS_NAME_FORMAT = enum(i32) {
    UNKNOWN_NAME = 0,
    FQDN_1779_NAME = 1,
    NT4_ACCOUNT_NAME = 2,
    DISPLAY_NAME = 3,
    UNIQUE_ID_NAME = 6,
    CANONICAL_NAME = 7,
    USER_PRINCIPAL_NAME = 8,
    CANONICAL_NAME_EX = 9,
    SERVICE_PRINCIPAL_NAME = 10,
    SID_OR_SID_HISTORY_NAME = 11,
    DNS_DOMAIN_NAME = 12,
};
pub const DS_UNKNOWN_NAME = DS_NAME_FORMAT.UNKNOWN_NAME;
pub const DS_FQDN_1779_NAME = DS_NAME_FORMAT.FQDN_1779_NAME;
pub const DS_NT4_ACCOUNT_NAME = DS_NAME_FORMAT.NT4_ACCOUNT_NAME;
pub const DS_DISPLAY_NAME = DS_NAME_FORMAT.DISPLAY_NAME;
pub const DS_UNIQUE_ID_NAME = DS_NAME_FORMAT.UNIQUE_ID_NAME;
pub const DS_CANONICAL_NAME = DS_NAME_FORMAT.CANONICAL_NAME;
pub const DS_USER_PRINCIPAL_NAME = DS_NAME_FORMAT.USER_PRINCIPAL_NAME;
pub const DS_CANONICAL_NAME_EX = DS_NAME_FORMAT.CANONICAL_NAME_EX;
pub const DS_SERVICE_PRINCIPAL_NAME = DS_NAME_FORMAT.SERVICE_PRINCIPAL_NAME;
pub const DS_SID_OR_SID_HISTORY_NAME = DS_NAME_FORMAT.SID_OR_SID_HISTORY_NAME;
pub const DS_DNS_DOMAIN_NAME = DS_NAME_FORMAT.DNS_DOMAIN_NAME;

pub const DS_NAME_FLAGS = enum(i32) {
    NO_FLAGS = 0,
    FLAG_SYNTACTICAL_ONLY = 1,
    FLAG_EVAL_AT_DC = 2,
    FLAG_GCVERIFY = 4,
    FLAG_TRUST_REFERRAL = 8,
};
pub const DS_NAME_NO_FLAGS = DS_NAME_FLAGS.NO_FLAGS;
pub const DS_NAME_FLAG_SYNTACTICAL_ONLY = DS_NAME_FLAGS.FLAG_SYNTACTICAL_ONLY;
pub const DS_NAME_FLAG_EVAL_AT_DC = DS_NAME_FLAGS.FLAG_EVAL_AT_DC;
pub const DS_NAME_FLAG_GCVERIFY = DS_NAME_FLAGS.FLAG_GCVERIFY;
pub const DS_NAME_FLAG_TRUST_REFERRAL = DS_NAME_FLAGS.FLAG_TRUST_REFERRAL;

pub const DS_NAME_ERROR = enum(i32) {
    NO_ERROR = 0,
    ERROR_RESOLVING = 1,
    ERROR_NOT_FOUND = 2,
    ERROR_NOT_UNIQUE = 3,
    ERROR_NO_MAPPING = 4,
    ERROR_DOMAIN_ONLY = 5,
    ERROR_NO_SYNTACTICAL_MAPPING = 6,
    ERROR_TRUST_REFERRAL = 7,
};
pub const DS_NAME_NO_ERROR = DS_NAME_ERROR.NO_ERROR;
pub const DS_NAME_ERROR_RESOLVING = DS_NAME_ERROR.ERROR_RESOLVING;
pub const DS_NAME_ERROR_NOT_FOUND = DS_NAME_ERROR.ERROR_NOT_FOUND;
pub const DS_NAME_ERROR_NOT_UNIQUE = DS_NAME_ERROR.ERROR_NOT_UNIQUE;
pub const DS_NAME_ERROR_NO_MAPPING = DS_NAME_ERROR.ERROR_NO_MAPPING;
pub const DS_NAME_ERROR_DOMAIN_ONLY = DS_NAME_ERROR.ERROR_DOMAIN_ONLY;
pub const DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = DS_NAME_ERROR.ERROR_NO_SYNTACTICAL_MAPPING;
pub const DS_NAME_ERROR_TRUST_REFERRAL = DS_NAME_ERROR.ERROR_TRUST_REFERRAL;

pub const DS_SPN_NAME_TYPE = enum(i32) {
    DNS_HOST = 0,
    DN_HOST = 1,
    NB_HOST = 2,
    DOMAIN = 3,
    NB_DOMAIN = 4,
    SERVICE = 5,
};
pub const DS_SPN_DNS_HOST = DS_SPN_NAME_TYPE.DNS_HOST;
pub const DS_SPN_DN_HOST = DS_SPN_NAME_TYPE.DN_HOST;
pub const DS_SPN_NB_HOST = DS_SPN_NAME_TYPE.NB_HOST;
pub const DS_SPN_DOMAIN = DS_SPN_NAME_TYPE.DOMAIN;
pub const DS_SPN_NB_DOMAIN = DS_SPN_NAME_TYPE.NB_DOMAIN;
pub const DS_SPN_SERVICE = DS_SPN_NAME_TYPE.SERVICE;

pub const DS_SPN_WRITE_OP = enum(i32) {
    ADD_SPN_OP = 0,
    REPLACE_SPN_OP = 1,
    DELETE_SPN_OP = 2,
};
pub const DS_SPN_ADD_SPN_OP = DS_SPN_WRITE_OP.ADD_SPN_OP;
pub const DS_SPN_REPLACE_SPN_OP = DS_SPN_WRITE_OP.REPLACE_SPN_OP;
pub const DS_SPN_DELETE_SPN_OP = DS_SPN_WRITE_OP.DELETE_SPN_OP;

pub const DS_NAME_RESULT_ITEMA = extern struct {
    status: u32,
    pDomain: ?PSTR,
    pName: ?PSTR,
};

pub const DS_NAME_RESULTA = extern struct {
    cItems: u32,
    rItems: ?*DS_NAME_RESULT_ITEMA,
};

pub const DS_NAME_RESULT_ITEMW = extern struct {
    status: u32,
    pDomain: ?PWSTR,
    pName: ?PWSTR,
};

pub const DS_NAME_RESULTW = extern struct {
    cItems: u32,
    rItems: ?*DS_NAME_RESULT_ITEMW,
};

pub const DS_REPSYNCALL_ERROR = enum(i32) {
    WIN32_ERROR_CONTACTING_SERVER = 0,
    WIN32_ERROR_REPLICATING = 1,
    SERVER_UNREACHABLE = 2,
};
pub const DS_REPSYNCALL_WIN32_ERROR_CONTACTING_SERVER = DS_REPSYNCALL_ERROR.WIN32_ERROR_CONTACTING_SERVER;
pub const DS_REPSYNCALL_WIN32_ERROR_REPLICATING = DS_REPSYNCALL_ERROR.WIN32_ERROR_REPLICATING;
pub const DS_REPSYNCALL_SERVER_UNREACHABLE = DS_REPSYNCALL_ERROR.SERVER_UNREACHABLE;

pub const DS_REPSYNCALL_EVENT = enum(i32) {
    ERROR = 0,
    SYNC_STARTED = 1,
    SYNC_COMPLETED = 2,
    FINISHED = 3,
};
pub const DS_REPSYNCALL_EVENT_ERROR = DS_REPSYNCALL_EVENT.ERROR;
pub const DS_REPSYNCALL_EVENT_SYNC_STARTED = DS_REPSYNCALL_EVENT.SYNC_STARTED;
pub const DS_REPSYNCALL_EVENT_SYNC_COMPLETED = DS_REPSYNCALL_EVENT.SYNC_COMPLETED;
pub const DS_REPSYNCALL_EVENT_FINISHED = DS_REPSYNCALL_EVENT.FINISHED;

pub const DS_REPSYNCALL_SYNCA = extern struct {
    pszSrcId: ?PSTR,
    pszDstId: ?PSTR,
    pszNC: ?PSTR,
    pguidSrc: ?*Guid,
    pguidDst: ?*Guid,
};

pub const DS_REPSYNCALL_SYNCW = extern struct {
    pszSrcId: ?PWSTR,
    pszDstId: ?PWSTR,
    pszNC: ?PWSTR,
    pguidSrc: ?*Guid,
    pguidDst: ?*Guid,
};

pub const DS_REPSYNCALL_ERRINFOA = extern struct {
    pszSvrId: ?PSTR,
    @"error": DS_REPSYNCALL_ERROR,
    dwWin32Err: u32,
    pszSrcId: ?PSTR,
};

pub const DS_REPSYNCALL_ERRINFOW = extern struct {
    pszSvrId: ?PWSTR,
    @"error": DS_REPSYNCALL_ERROR,
    dwWin32Err: u32,
    pszSrcId: ?PWSTR,
};

pub const DS_REPSYNCALL_UPDATEA = extern struct {
    event: DS_REPSYNCALL_EVENT,
    pErrInfo: ?*DS_REPSYNCALL_ERRINFOA,
    pSync: ?*DS_REPSYNCALL_SYNCA,
};

pub const DS_REPSYNCALL_UPDATEW = extern struct {
    event: DS_REPSYNCALL_EVENT,
    pErrInfo: ?*DS_REPSYNCALL_ERRINFOW,
    pSync: ?*DS_REPSYNCALL_SYNCW,
};

pub const DS_SITE_COST_INFO = extern struct {
    errorCode: u32,
    cost: u32,
};

pub const DS_SCHEMA_GUID_MAPA = extern struct {
    guid: Guid,
    guidType: u32,
    pName: ?PSTR,
};

pub const DS_SCHEMA_GUID_MAPW = extern struct {
    guid: Guid,
    guidType: u32,
    pName: ?PWSTR,
};

pub const DS_DOMAIN_CONTROLLER_INFO_1A = extern struct {
    NetbiosName: ?PSTR,
    DnsHostName: ?PSTR,
    SiteName: ?PSTR,
    ComputerObjectName: ?PSTR,
    ServerObjectName: ?PSTR,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
};

pub const DS_DOMAIN_CONTROLLER_INFO_1W = extern struct {
    NetbiosName: ?PWSTR,
    DnsHostName: ?PWSTR,
    SiteName: ?PWSTR,
    ComputerObjectName: ?PWSTR,
    ServerObjectName: ?PWSTR,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
};

pub const DS_DOMAIN_CONTROLLER_INFO_2A = extern struct {
    NetbiosName: ?PSTR,
    DnsHostName: ?PSTR,
    SiteName: ?PSTR,
    SiteObjectName: ?PSTR,
    ComputerObjectName: ?PSTR,
    ServerObjectName: ?PSTR,
    NtdsDsaObjectName: ?PSTR,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
    fIsGc: BOOL,
    SiteObjectGuid: Guid,
    ComputerObjectGuid: Guid,
    ServerObjectGuid: Guid,
    NtdsDsaObjectGuid: Guid,
};

pub const DS_DOMAIN_CONTROLLER_INFO_2W = extern struct {
    NetbiosName: ?PWSTR,
    DnsHostName: ?PWSTR,
    SiteName: ?PWSTR,
    SiteObjectName: ?PWSTR,
    ComputerObjectName: ?PWSTR,
    ServerObjectName: ?PWSTR,
    NtdsDsaObjectName: ?PWSTR,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
    fIsGc: BOOL,
    SiteObjectGuid: Guid,
    ComputerObjectGuid: Guid,
    ServerObjectGuid: Guid,
    NtdsDsaObjectGuid: Guid,
};

pub const DS_DOMAIN_CONTROLLER_INFO_3A = extern struct {
    NetbiosName: ?PSTR,
    DnsHostName: ?PSTR,
    SiteName: ?PSTR,
    SiteObjectName: ?PSTR,
    ComputerObjectName: ?PSTR,
    ServerObjectName: ?PSTR,
    NtdsDsaObjectName: ?PSTR,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
    fIsGc: BOOL,
    fIsRodc: BOOL,
    SiteObjectGuid: Guid,
    ComputerObjectGuid: Guid,
    ServerObjectGuid: Guid,
    NtdsDsaObjectGuid: Guid,
};

pub const DS_DOMAIN_CONTROLLER_INFO_3W = extern struct {
    NetbiosName: ?PWSTR,
    DnsHostName: ?PWSTR,
    SiteName: ?PWSTR,
    SiteObjectName: ?PWSTR,
    ComputerObjectName: ?PWSTR,
    ServerObjectName: ?PWSTR,
    NtdsDsaObjectName: ?PWSTR,
    fIsPdc: BOOL,
    fDsEnabled: BOOL,
    fIsGc: BOOL,
    fIsRodc: BOOL,
    SiteObjectGuid: Guid,
    ComputerObjectGuid: Guid,
    ServerObjectGuid: Guid,
    NtdsDsaObjectGuid: Guid,
};

pub const DS_KCC_TASKID = enum(i32) {
    Y = 0,
};
pub const DS_KCC_TASKID_UPDATE_TOPOLOGY = DS_KCC_TASKID.Y;

pub const DS_REPL_INFO_TYPE = enum(i32) {
    NEIGHBORS = 0,
    CURSORS_FOR_NC = 1,
    METADATA_FOR_OBJ = 2,
    KCC_DSA_CONNECT_FAILURES = 3,
    KCC_DSA_LINK_FAILURES = 4,
    PENDING_OPS = 5,
    METADATA_FOR_ATTR_VALUE = 6,
    CURSORS_2_FOR_NC = 7,
    CURSORS_3_FOR_NC = 8,
    METADATA_2_FOR_OBJ = 9,
    METADATA_2_FOR_ATTR_VALUE = 10,
    METADATA_EXT_FOR_ATTR_VALUE = 11,
    TYPE_MAX = 12,
};
pub const DS_REPL_INFO_NEIGHBORS = DS_REPL_INFO_TYPE.NEIGHBORS;
pub const DS_REPL_INFO_CURSORS_FOR_NC = DS_REPL_INFO_TYPE.CURSORS_FOR_NC;
pub const DS_REPL_INFO_METADATA_FOR_OBJ = DS_REPL_INFO_TYPE.METADATA_FOR_OBJ;
pub const DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES = DS_REPL_INFO_TYPE.KCC_DSA_CONNECT_FAILURES;
pub const DS_REPL_INFO_KCC_DSA_LINK_FAILURES = DS_REPL_INFO_TYPE.KCC_DSA_LINK_FAILURES;
pub const DS_REPL_INFO_PENDING_OPS = DS_REPL_INFO_TYPE.PENDING_OPS;
pub const DS_REPL_INFO_METADATA_FOR_ATTR_VALUE = DS_REPL_INFO_TYPE.METADATA_FOR_ATTR_VALUE;
pub const DS_REPL_INFO_CURSORS_2_FOR_NC = DS_REPL_INFO_TYPE.CURSORS_2_FOR_NC;
pub const DS_REPL_INFO_CURSORS_3_FOR_NC = DS_REPL_INFO_TYPE.CURSORS_3_FOR_NC;
pub const DS_REPL_INFO_METADATA_2_FOR_OBJ = DS_REPL_INFO_TYPE.METADATA_2_FOR_OBJ;
pub const DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE = DS_REPL_INFO_TYPE.METADATA_2_FOR_ATTR_VALUE;
pub const DS_REPL_INFO_METADATA_EXT_FOR_ATTR_VALUE = DS_REPL_INFO_TYPE.METADATA_EXT_FOR_ATTR_VALUE;
pub const DS_REPL_INFO_TYPE_MAX = DS_REPL_INFO_TYPE.TYPE_MAX;

pub const DS_REPL_NEIGHBORW = extern struct {
    pszNamingContext: ?PWSTR,
    pszSourceDsaDN: ?PWSTR,
    pszSourceDsaAddress: ?PWSTR,
    pszAsyncIntersiteTransportDN: ?PWSTR,
    dwReplicaFlags: u32,
    dwReserved: u32,
    uuidNamingContextObjGuid: Guid,
    uuidSourceDsaObjGuid: Guid,
    uuidSourceDsaInvocationID: Guid,
    uuidAsyncIntersiteTransportObjGuid: Guid,
    usnLastObjChangeSynced: i64,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
    ftimeLastSyncAttempt: FILETIME,
    dwLastSyncResult: u32,
    cNumConsecutiveSyncFailures: u32,
};

pub const DS_REPL_NEIGHBORW_BLOB = extern struct {
    oszNamingContext: u32,
    oszSourceDsaDN: u32,
    oszSourceDsaAddress: u32,
    oszAsyncIntersiteTransportDN: u32,
    dwReplicaFlags: u32,
    dwReserved: u32,
    uuidNamingContextObjGuid: Guid,
    uuidSourceDsaObjGuid: Guid,
    uuidSourceDsaInvocationID: Guid,
    uuidAsyncIntersiteTransportObjGuid: Guid,
    usnLastObjChangeSynced: i64,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
    ftimeLastSyncAttempt: FILETIME,
    dwLastSyncResult: u32,
    cNumConsecutiveSyncFailures: u32,
};

pub const DS_REPL_NEIGHBORSW = extern struct {
    cNumNeighbors: u32,
    dwReserved: u32,
    rgNeighbor: [1]DS_REPL_NEIGHBORW,
};

pub const DS_REPL_CURSOR = extern struct {
    uuidSourceDsaInvocationID: Guid,
    usnAttributeFilter: i64,
};

pub const DS_REPL_CURSOR_2 = extern struct {
    uuidSourceDsaInvocationID: Guid,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
};

pub const DS_REPL_CURSOR_3W = extern struct {
    uuidSourceDsaInvocationID: Guid,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
    pszSourceDsaDN: ?PWSTR,
};

pub const DS_REPL_CURSOR_BLOB = extern struct {
    uuidSourceDsaInvocationID: Guid,
    usnAttributeFilter: i64,
    ftimeLastSyncSuccess: FILETIME,
    oszSourceDsaDN: u32,
};

pub const DS_REPL_CURSORS = extern struct {
    cNumCursors: u32,
    dwReserved: u32,
    rgCursor: [1]DS_REPL_CURSOR,
};

pub const DS_REPL_CURSORS_2 = extern struct {
    cNumCursors: u32,
    dwEnumerationContext: u32,
    rgCursor: [1]DS_REPL_CURSOR_2,
};

pub const DS_REPL_CURSORS_3W = extern struct {
    cNumCursors: u32,
    dwEnumerationContext: u32,
    rgCursor: [1]DS_REPL_CURSOR_3W,
};

pub const DS_REPL_ATTR_META_DATA = extern struct {
    pszAttributeName: ?PWSTR,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
};

pub const DS_REPL_ATTR_META_DATA_2 = extern struct {
    pszAttributeName: ?PWSTR,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    pszLastOriginatingDsaDN: ?PWSTR,
};

pub const DS_REPL_ATTR_META_DATA_BLOB = extern struct {
    oszAttributeName: u32,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    oszLastOriginatingDsaDN: u32,
};

pub const DS_REPL_OBJ_META_DATA = extern struct {
    cNumEntries: u32,
    dwReserved: u32,
    rgMetaData: [1]DS_REPL_ATTR_META_DATA,
};

pub const DS_REPL_OBJ_META_DATA_2 = extern struct {
    cNumEntries: u32,
    dwReserved: u32,
    rgMetaData: [1]DS_REPL_ATTR_META_DATA_2,
};

pub const DS_REPL_KCC_DSA_FAILUREW = extern struct {
    pszDsaDN: ?PWSTR,
    uuidDsaObjGuid: Guid,
    ftimeFirstFailure: FILETIME,
    cNumFailures: u32,
    dwLastResult: u32,
};

pub const DS_REPL_KCC_DSA_FAILUREW_BLOB = extern struct {
    oszDsaDN: u32,
    uuidDsaObjGuid: Guid,
    ftimeFirstFailure: FILETIME,
    cNumFailures: u32,
    dwLastResult: u32,
};

pub const DS_REPL_KCC_DSA_FAILURESW = extern struct {
    cNumEntries: u32,
    dwReserved: u32,
    rgDsaFailure: [1]DS_REPL_KCC_DSA_FAILUREW,
};

pub const DS_REPL_OP_TYPE = enum(i32) {
    SYNC = 0,
    ADD = 1,
    DELETE = 2,
    MODIFY = 3,
    UPDATE_REFS = 4,
};
pub const DS_REPL_OP_TYPE_SYNC = DS_REPL_OP_TYPE.SYNC;
pub const DS_REPL_OP_TYPE_ADD = DS_REPL_OP_TYPE.ADD;
pub const DS_REPL_OP_TYPE_DELETE = DS_REPL_OP_TYPE.DELETE;
pub const DS_REPL_OP_TYPE_MODIFY = DS_REPL_OP_TYPE.MODIFY;
pub const DS_REPL_OP_TYPE_UPDATE_REFS = DS_REPL_OP_TYPE.UPDATE_REFS;

pub const DS_REPL_OPW = extern struct {
    ftimeEnqueued: FILETIME,
    ulSerialNumber: u32,
    ulPriority: u32,
    OpType: DS_REPL_OP_TYPE,
    ulOptions: u32,
    pszNamingContext: ?PWSTR,
    pszDsaDN: ?PWSTR,
    pszDsaAddress: ?PWSTR,
    uuidNamingContextObjGuid: Guid,
    uuidDsaObjGuid: Guid,
};

pub const DS_REPL_OPW_BLOB = extern struct {
    ftimeEnqueued: FILETIME,
    ulSerialNumber: u32,
    ulPriority: u32,
    OpType: DS_REPL_OP_TYPE,
    ulOptions: u32,
    oszNamingContext: u32,
    oszDsaDN: u32,
    oszDsaAddress: u32,
    uuidNamingContextObjGuid: Guid,
    uuidDsaObjGuid: Guid,
};

pub const DS_REPL_PENDING_OPSW = extern struct {
    ftimeCurrentOpStarted: FILETIME,
    cNumPendingOps: u32,
    rgPendingOp: [1]DS_REPL_OPW,
};

pub const DS_REPL_VALUE_META_DATA = extern struct {
    pszAttributeName: ?PWSTR,
    pszObjectDn: ?PWSTR,
    cbData: u32,
    pbData: ?*u8,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
};

pub const DS_REPL_VALUE_META_DATA_2 = extern struct {
    pszAttributeName: ?PWSTR,
    pszObjectDn: ?PWSTR,
    cbData: u32,
    pbData: ?*u8,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    pszLastOriginatingDsaDN: ?PWSTR,
};

pub const DS_REPL_VALUE_META_DATA_EXT = extern struct {
    pszAttributeName: ?PWSTR,
    pszObjectDn: ?PWSTR,
    cbData: u32,
    pbData: ?*u8,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    pszLastOriginatingDsaDN: ?PWSTR,
    dwUserIdentifier: u32,
    dwPriorLinkState: u32,
    dwCurrentLinkState: u32,
};

pub const DS_REPL_VALUE_META_DATA_BLOB = extern struct {
    oszAttributeName: u32,
    oszObjectDn: u32,
    cbData: u32,
    obData: u32,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    oszLastOriginatingDsaDN: u32,
};

pub const DS_REPL_VALUE_META_DATA_BLOB_EXT = extern struct {
    oszAttributeName: u32,
    oszObjectDn: u32,
    cbData: u32,
    obData: u32,
    ftimeDeleted: FILETIME,
    ftimeCreated: FILETIME,
    dwVersion: u32,
    ftimeLastOriginatingChange: FILETIME,
    uuidLastOriginatingDsaInvocationID: Guid,
    usnOriginatingChange: i64,
    usnLocalChange: i64,
    oszLastOriginatingDsaDN: u32,
    dwUserIdentifier: u32,
    dwPriorLinkState: u32,
    dwCurrentLinkState: u32,
};

pub const DS_REPL_ATTR_VALUE_META_DATA = extern struct {
    cNumEntries: u32,
    dwEnumerationContext: u32,
    rgMetaData: [1]DS_REPL_VALUE_META_DATA,
};

pub const DS_REPL_ATTR_VALUE_META_DATA_2 = extern struct {
    cNumEntries: u32,
    dwEnumerationContext: u32,
    rgMetaData: [1]DS_REPL_VALUE_META_DATA_2,
};

pub const DS_REPL_ATTR_VALUE_META_DATA_EXT = extern struct {
    cNumEntries: u32,
    dwEnumerationContext: u32,
    rgMetaData: [1]DS_REPL_VALUE_META_DATA_EXT,
};

pub const DS_REPL_QUEUE_STATISTICSW = extern struct {
    ftimeCurrentOpStarted: FILETIME,
    cNumPendingOps: u32,
    ftimeOldestSync: FILETIME,
    ftimeOldestAdd: FILETIME,
    ftimeOldestMod: FILETIME,
    ftimeOldestDel: FILETIME,
    ftimeOldestUpdRefs: FILETIME,
};

pub const DSROLE_MACHINE_ROLE = enum(i32) {
    StandaloneWorkstation = 0,
    MemberWorkstation = 1,
    StandaloneServer = 2,
    MemberServer = 3,
    BackupDomainController = 4,
    PrimaryDomainController = 5,
};
pub const DsRole_RoleStandaloneWorkstation = DSROLE_MACHINE_ROLE.StandaloneWorkstation;
pub const DsRole_RoleMemberWorkstation = DSROLE_MACHINE_ROLE.MemberWorkstation;
pub const DsRole_RoleStandaloneServer = DSROLE_MACHINE_ROLE.StandaloneServer;
pub const DsRole_RoleMemberServer = DSROLE_MACHINE_ROLE.MemberServer;
pub const DsRole_RoleBackupDomainController = DSROLE_MACHINE_ROLE.BackupDomainController;
pub const DsRole_RolePrimaryDomainController = DSROLE_MACHINE_ROLE.PrimaryDomainController;

pub const DSROLE_SERVER_STATE = enum(i32) {
    Unknown = 0,
    Primary = 1,
    Backup = 2,
};
pub const DsRoleServerUnknown = DSROLE_SERVER_STATE.Unknown;
pub const DsRoleServerPrimary = DSROLE_SERVER_STATE.Primary;
pub const DsRoleServerBackup = DSROLE_SERVER_STATE.Backup;

pub const DSROLE_PRIMARY_DOMAIN_INFO_LEVEL = enum(i32) {
    PrimaryDomainInfoBasic = 1,
    UpgradeStatus = 2,
    OperationState = 3,
};
pub const DsRolePrimaryDomainInfoBasic = DSROLE_PRIMARY_DOMAIN_INFO_LEVEL.PrimaryDomainInfoBasic;
pub const DsRoleUpgradeStatus = DSROLE_PRIMARY_DOMAIN_INFO_LEVEL.UpgradeStatus;
pub const DsRoleOperationState = DSROLE_PRIMARY_DOMAIN_INFO_LEVEL.OperationState;

pub const DSROLE_PRIMARY_DOMAIN_INFO_BASIC = extern struct {
    MachineRole: DSROLE_MACHINE_ROLE,
    Flags: u32,
    DomainNameFlat: ?PWSTR,
    DomainNameDns: ?PWSTR,
    DomainForestName: ?PWSTR,
    DomainGuid: Guid,
};

pub const DSROLE_UPGRADE_STATUS_INFO = extern struct {
    OperationState: u32,
    PreviousServerState: DSROLE_SERVER_STATE,
};

pub const DSROLE_OPERATION_STATE = enum(i32) {
    Idle = 0,
    Active = 1,
    NeedReboot = 2,
};
pub const DsRoleOperationIdle = DSROLE_OPERATION_STATE.Idle;
pub const DsRoleOperationActive = DSROLE_OPERATION_STATE.Active;
pub const DsRoleOperationNeedReboot = DSROLE_OPERATION_STATE.NeedReboot;

pub const DSROLE_OPERATION_STATE_INFO = extern struct {
    OperationState: DSROLE_OPERATION_STATE,
};

pub const DOMAIN_CONTROLLER_INFOA = extern struct {
    DomainControllerName: ?PSTR,
    DomainControllerAddress: ?PSTR,
    DomainControllerAddressType: u32,
    DomainGuid: Guid,
    DomainName: ?PSTR,
    DnsForestName: ?PSTR,
    Flags: u32,
    DcSiteName: ?PSTR,
    ClientSiteName: ?PSTR,
};

pub const DOMAIN_CONTROLLER_INFOW = extern struct {
    DomainControllerName: ?PWSTR,
    DomainControllerAddress: ?PWSTR,
    DomainControllerAddressType: u32,
    DomainGuid: Guid,
    DomainName: ?PWSTR,
    DnsForestName: ?PWSTR,
    Flags: u32,
    DcSiteName: ?PWSTR,
    ClientSiteName: ?PWSTR,
};

pub const DS_DOMAIN_TRUSTSW = extern struct {
    NetbiosDomainName: ?PWSTR,
    DnsDomainName: ?PWSTR,
    Flags: u32,
    ParentIndex: u32,
    TrustType: u32,
    TrustAttributes: u32,
    DomainSid: ?PSID,
    DomainGuid: Guid,
};

pub const DS_DOMAIN_TRUSTSA = extern struct {
    NetbiosDomainName: ?PSTR,
    DnsDomainName: ?PSTR,
    Flags: u32,
    ParentIndex: u32,
    TrustType: u32,
    TrustAttributes: u32,
    DomainSid: ?PSID,
    DomainGuid: Guid,
};

// TODO: this type has a FreeFunc 'DsGetDcCloseW', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const GetDcContextHandle = isize;

//--------------------------------------------------------------------------------
// Section: Functions (158)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsGetObject(
    lpsz_path_name: ?[*:0]const u16,
    riid: ?*const Guid,
    pp_object: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsBuildEnumerator(
    p_a_ds_container: ?*IADsContainer,
    pp_enum_variant: ?*?*IEnumVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsFreeEnumerator(
    p_enum_variant: ?*IEnumVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsEnumerateNext(
    p_enum_variant: ?*IEnumVARIANT,
    c_elements: u32,
    pvar: ?*VARIANT,
    pc_elements_fetched: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsBuildVarArrayStr(
    lpp_path_names: [*]?PWSTR,
    dw_path_names: u32,
    p_var: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsBuildVarArrayInt(
    lpdw_object_types: ?*u32,
    dw_object_types: u32,
    p_var: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsOpenObject(
    lpsz_path_name: ?[*:0]const u16,
    lpsz_user_name: ?[*:0]const u16,
    lpsz_password: ?[*:0]const u16,
    dw_reserved: ADS_AUTHENTICATION_ENUM,
    riid: ?*const Guid,
    pp_object: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsGetLastError(
    lp_error: ?*u32,
    lp_error_buf: [*:0]u16,
    dw_error_buf_len: u32,
    lp_name_buf: [*:0]u16,
    dw_name_buf_len: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsSetLastError(
    dw_err: u32,
    psz_error: ?[*:0]const u16,
    psz_provider: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn AllocADsMem(
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn FreeADsMem(
    p_mem: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ReallocADsMem(
    p_old_mem: ?*anyopaque,
    cb_old: u32,
    cb_new: u32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn AllocADsStr(
    p_str: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn FreeADsStr(
    p_str: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ReallocADsStr(
    pp_str: ?*?PWSTR,
    p_str: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn ADsEncodeBinaryData(
    pb_src_data: ?*u8,
    dw_src_len: u32,
    ppsz_dest_data: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "activeds" fn ADsDecodeBinaryData(
    sz_src_data: ?[*:0]const u16,
    ppb_dest_data: ?*?*u8,
    pdw_dest_len: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "activeds" fn PropVariantToAdsType(
    p_variant: ?*VARIANT,
    dw_num_variant: u32,
    pp_ads_values: ?*?*ADSVALUE,
    pdw_num_values: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "activeds" fn AdsTypeToPropVariant(
    p_ads_values: ?*ADSVALUE,
    dw_num_values: u32,
    p_variant: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "activeds" fn AdsFreeAdsValues(
    p_ads_values: ?*ADSVALUE,
    dw_num_values: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn BinarySDToSecurityDescriptor(
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
    p_varsec: ?*VARIANT,
    psz_server_name: ?[*:0]const u16,
    user_name: ?[*:0]const u16,
    pass_word: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "activeds" fn SecurityDescriptorToBinarySD(
    v_var_sec_des: VARIANT,
    pp_security_descriptor: ?*?PSECURITY_DESCRIPTOR,
    pdw_s_d_length: ?*u32,
    psz_server_name: ?[*:0]const u16,
    user_name: ?[*:0]const u16,
    pass_word: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsuiext" fn DsBrowseForContainerW(
    p_info: ?*DSBROWSEINFOW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsuiext" fn DsBrowseForContainerA(
    p_info: ?*DSBROWSEINFOA,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsuiext" fn DsGetIcon(
    dw_flags: u32,
    psz_object_class: ?[*:0]const u16,
    cx_image: i32,
    cy_image: i32,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsuiext" fn DsGetFriendlyClassName(
    psz_object_class: ?[*:0]const u16,
    psz_buffer: [*:0]u16,
    cch_buffer: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsprop" fn ADsPropCreateNotifyObj(
    p_app_thd_data_obj: ?*IDataObject,
    pwz_a_ds_obj_name: ?PWSTR,
    ph_notify_obj: ?*?HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsprop" fn ADsPropGetInitInfo(
    h_notify_obj: ?HWND,
    p_init_params: ?*ADSPROPINITPARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsprop" fn ADsPropSetHwndWithTitle(
    h_notify_obj: ?HWND,
    h_page: ?HWND,
    ptz_title: ?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsprop" fn ADsPropSetHwnd(
    h_notify_obj: ?HWND,
    h_page: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsprop" fn ADsPropCheckIfWritable(
    pwz_attr: ?[*:0]const u16,
    p_writable_attrs: ?*const ADS_ATTR_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsprop" fn ADsPropSendErrorMessage(
    h_notify_obj: ?HWND,
    p_error: ?*ADSPROPERROR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsprop" fn ADsPropShowErrorDialog(
    h_notify_obj: ?HWND,
    h_page: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsMakeSpnW(
    service_class: ?[*:0]const u16,
    service_name: ?[*:0]const u16,
    instance_name: ?[*:0]const u16,
    instance_port: u16,
    referrer: ?[*:0]const u16,
    pc_spn_length: ?*u32,
    psz_spn: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsMakeSpnA(
    service_class: ?[*:0]const u8,
    service_name: ?[*:0]const u8,
    instance_name: ?[*:0]const u8,
    instance_port: u16,
    referrer: ?[*:0]const u8,
    pc_spn_length: ?*u32,
    psz_spn: ?[*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsCrackSpnA(
    psz_spn: ?[*:0]const u8,
    pc_service_class: ?*u32,
    service_class: ?[*:0]u8,
    pc_service_name: ?*u32,
    service_name: ?[*:0]u8,
    pc_instance_name: ?*u32,
    instance_name: ?[*:0]u8,
    p_instance_port: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsCrackSpnW(
    psz_spn: ?[*:0]const u16,
    pc_service_class: ?*u32,
    service_class: ?[*:0]u16,
    pc_service_name: ?*u32,
    service_name: ?[*:0]u16,
    pc_instance_name: ?*u32,
    instance_name: ?[*:0]u16,
    p_instance_port: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsQuoteRdnValueW(
    c_unquoted_rdn_value_length: u32,
    ps_unquoted_rdn_value: [*:0]const u16,
    pc_quoted_rdn_value_length: ?*u32,
    ps_quoted_rdn_value: [*]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsQuoteRdnValueA(
    c_unquoted_rdn_value_length: u32,
    ps_unquoted_rdn_value: [*]const u8,
    pc_quoted_rdn_value_length: ?*u32,
    ps_quoted_rdn_value: [*]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsUnquoteRdnValueW(
    c_quoted_rdn_value_length: u32,
    ps_quoted_rdn_value: [*:0]const u16,
    pc_unquoted_rdn_value_length: ?*u32,
    ps_unquoted_rdn_value: [*]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsUnquoteRdnValueA(
    c_quoted_rdn_value_length: u32,
    ps_quoted_rdn_value: [*]const u8,
    pc_unquoted_rdn_value_length: ?*u32,
    ps_unquoted_rdn_value: [*]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsGetRdnW(
    pp_d_n: [*]?PWSTR,
    pc_d_n: ?*u32,
    pp_key: ?*?PWSTR,
    pc_key: ?*u32,
    pp_val: ?*?PWSTR,
    pc_val: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsCrackUnquotedMangledRdnW(
    psz_r_d_n: [*:0]const u16,
    cch_r_d_n: u32,
    p_guid: ?*Guid,
    pe_ds_mangle_for: ?*DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsCrackUnquotedMangledRdnA(
    psz_r_d_n: [*:0]const u8,
    cch_r_d_n: u32,
    p_guid: ?*Guid,
    pe_ds_mangle_for: ?*DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsIsMangledRdnValueW(
    psz_rdn: [*:0]const u16,
    c_rdn: u32,
    e_ds_mangle_for_desired: DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsIsMangledRdnValueA(
    psz_rdn: [*:0]const u8,
    c_rdn: u32,
    e_ds_mangle_for_desired: DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsIsMangledDnA(
    psz_dn: ?[*:0]const u8,
    e_ds_mangle_for: DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "dsparse" fn DsIsMangledDnW(
    psz_dn: ?[*:0]const u16,
    e_ds_mangle_for: DS_MANGLE_FOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "dsparse" fn DsCrackSpn2A(
    psz_spn: [*:0]const u8,
    c_spn: u32,
    pc_service_class: ?*u32,
    service_class: ?[*:0]u8,
    pc_service_name: ?*u32,
    service_name: ?[*:0]u8,
    pc_instance_name: ?*u32,
    instance_name: ?[*:0]u8,
    p_instance_port: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dsparse" fn DsCrackSpn2W(
    psz_spn: [*:0]const u16,
    c_spn: u32,
    pc_service_class: ?*u32,
    service_class: ?[*:0]u16,
    pc_service_name: ?*u32,
    service_name: ?[*:0]u16,
    pc_instance_name: ?*u32,
    instance_name: ?[*:0]u16,
    p_instance_port: ?*u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dsparse" fn DsCrackSpn3W(
    psz_spn: ?[*:0]const u16,
    c_spn: u32,
    pc_host_name: ?*u32,
    host_name: [*:0]u16,
    pc_instance_name: ?*u32,
    instance_name: [*:0]u16,
    p_port_number: ?*u16,
    pc_domain_name: ?*u32,
    domain_name: [*:0]u16,
    pc_realm_name: ?*u32,
    realm_name: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "dsparse" fn DsCrackSpn4W(
    psz_spn: ?[*:0]const u16,
    c_spn: u32,
    pc_host_name: ?*u32,
    host_name: [*:0]u16,
    pc_instance_name: ?*u32,
    instance_name: [*:0]u16,
    pc_port_name: ?*u32,
    port_name: [*:0]u16,
    pc_domain_name: ?*u32,
    domain_name: [*:0]u16,
    pc_realm_name: ?*u32,
    realm_name: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindW(
    domain_controller_name: ?[*:0]const u16,
    dns_domain_name: ?[*:0]const u16,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindA(
    domain_controller_name: ?[*:0]const u8,
    dns_domain_name: ?[*:0]const u8,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindWithCredW(
    domain_controller_name: ?[*:0]const u16,
    dns_domain_name: ?[*:0]const u16,
    auth_identity: ?*anyopaque,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindWithCredA(
    domain_controller_name: ?[*:0]const u8,
    dns_domain_name: ?[*:0]const u8,
    auth_identity: ?*anyopaque,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindWithSpnW(
    domain_controller_name: ?[*:0]const u16,
    dns_domain_name: ?[*:0]const u16,
    auth_identity: ?*anyopaque,
    service_principal_name: ?[*:0]const u16,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindWithSpnA(
    domain_controller_name: ?[*:0]const u8,
    dns_domain_name: ?[*:0]const u8,
    auth_identity: ?*anyopaque,
    service_principal_name: ?[*:0]const u8,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindWithSpnExW(
    domain_controller_name: ?[*:0]const u16,
    dns_domain_name: ?[*:0]const u16,
    auth_identity: ?*anyopaque,
    service_principal_name: ?[*:0]const u16,
    bind_flags: u32,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindWithSpnExA(
    domain_controller_name: ?[*:0]const u8,
    dns_domain_name: ?[*:0]const u8,
    auth_identity: ?*anyopaque,
    service_principal_name: ?[*:0]const u8,
    bind_flags: u32,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindByInstanceW(
    server_name: ?[*:0]const u16,
    annotation: ?[*:0]const u16,
    instance_guid: ?*Guid,
    dns_domain_name: ?[*:0]const u16,
    auth_identity: ?*anyopaque,
    service_principal_name: ?[*:0]const u16,
    bind_flags: u32,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindByInstanceA(
    server_name: ?[*:0]const u8,
    annotation: ?[*:0]const u8,
    instance_guid: ?*Guid,
    dns_domain_name: ?[*:0]const u8,
    auth_identity: ?*anyopaque,
    service_principal_name: ?[*:0]const u8,
    bind_flags: u32,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindToISTGW(
    site_name: ?[*:0]const u16,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindToISTGA(
    site_name: ?[*:0]const u8,
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsBindingSetTimeout(
    h_d_s: ?HANDLE,
    c_timeout_secs: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsUnBindW(
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsUnBindA(
    ph_d_s: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsMakePasswordCredentialsW(
    user: ?[*:0]const u16,
    domain: ?[*:0]const u16,
    password: ?[*:0]const u16,
    p_auth_identity: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsMakePasswordCredentialsA(
    user: ?[*:0]const u8,
    domain: ?[*:0]const u8,
    password: ?[*:0]const u8,
    p_auth_identity: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsFreePasswordCredentials(
    auth_identity: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsCrackNamesW(
    h_d_s: ?HANDLE,
    flags: DS_NAME_FLAGS,
    format_offered: DS_NAME_FORMAT,
    format_desired: DS_NAME_FORMAT,
    c_names: u32,
    rp_names: [*]const ?[*:0]const u16,
    pp_result: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsCrackNamesA(
    h_d_s: ?HANDLE,
    flags: DS_NAME_FLAGS,
    format_offered: DS_NAME_FORMAT,
    format_desired: DS_NAME_FORMAT,
    c_names: u32,
    rp_names: [*]const ?[*:0]const u8,
    pp_result: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsFreeNameResultW(
    p_result: ?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsFreeNameResultA(
    p_result: ?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsGetSpnA(
    service_type: DS_SPN_NAME_TYPE,
    service_class: ?[*:0]const u8,
    service_name: ?[*:0]const u8,
    instance_port: u16,
    c_instance_names: u16,
    p_instance_names: ?[*]?PSTR,
    p_instance_ports: ?[*:0]const u16,
    pc_spn: ?*u32,
    prpsz_spn: ?*?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsGetSpnW(
    service_type: DS_SPN_NAME_TYPE,
    service_class: ?[*:0]const u16,
    service_name: ?[*:0]const u16,
    instance_port: u16,
    c_instance_names: u16,
    p_instance_names: ?[*]?PWSTR,
    p_instance_ports: ?[*:0]const u16,
    pc_spn: ?*u32,
    prpsz_spn: ?*?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsFreeSpnArrayA(
    c_spn: u32,
    rpsz_spn: [*]?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsFreeSpnArrayW(
    c_spn: u32,
    rpsz_spn: [*]?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsWriteAccountSpnA(
    h_d_s: ?HANDLE,
    operation: DS_SPN_WRITE_OP,
    psz_account: ?[*:0]const u8,
    c_spn: u32,
    rpsz_spn: [*]?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsWriteAccountSpnW(
    h_d_s: ?HANDLE,
    operation: DS_SPN_WRITE_OP,
    psz_account: ?[*:0]const u16,
    c_spn: u32,
    rpsz_spn: [*]?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsClientMakeSpnForTargetServerW(
    service_class: ?[*:0]const u16,
    service_name: ?[*:0]const u16,
    pc_spn_length: ?*u32,
    psz_spn: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsClientMakeSpnForTargetServerA(
    service_class: ?[*:0]const u8,
    service_name: ?[*:0]const u8,
    pc_spn_length: ?*u32,
    psz_spn: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsServerRegisterSpnA(
    operation: DS_SPN_WRITE_OP,
    service_class: ?[*:0]const u8,
    user_object_d_n: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsServerRegisterSpnW(
    operation: DS_SPN_WRITE_OP,
    service_class: ?[*:0]const u16,
    user_object_d_n: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaSyncA(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u8,
    p_uuid_dsa_src: ?*const Guid,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaSyncW(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u16,
    p_uuid_dsa_src: ?*const Guid,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaAddA(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u8,
    source_dsa_dn: ?[*:0]const u8,
    transport_dn: ?[*:0]const u8,
    source_dsa_address: ?[*:0]const u8,
    p_schedule: ?*const SCHEDULE,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaAddW(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u16,
    source_dsa_dn: ?[*:0]const u16,
    transport_dn: ?[*:0]const u16,
    source_dsa_address: ?[*:0]const u16,
    p_schedule: ?*const SCHEDULE,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaDelA(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u8,
    dsa_src: ?[*:0]const u8,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaDelW(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u16,
    dsa_src: ?[*:0]const u16,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaModifyA(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u8,
    p_uuid_source_dsa: ?*const Guid,
    transport_dn: ?[*:0]const u8,
    source_dsa_address: ?[*:0]const u8,
    p_schedule: ?*const SCHEDULE,
    replica_flags: u32,
    modify_fields: u32,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaModifyW(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u16,
    p_uuid_source_dsa: ?*const Guid,
    transport_dn: ?[*:0]const u16,
    source_dsa_address: ?[*:0]const u16,
    p_schedule: ?*const SCHEDULE,
    replica_flags: u32,
    modify_fields: u32,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaUpdateRefsA(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u8,
    dsa_dest: ?[*:0]const u8,
    p_uuid_dsa_dest: ?*const Guid,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaUpdateRefsW(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u16,
    dsa_dest: ?[*:0]const u16,
    p_uuid_dsa_dest: ?*const Guid,
    options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaSyncAllA(
    h_d_s: ?HANDLE,
    psz_name_context: ?[*:0]const u8,
    ul_flags: u32,
    p_fn_call_back: isize,
    p_callback_data: ?*anyopaque,
    p_errors: ?*?*?*DS_REPSYNCALL_ERRINFOA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaSyncAllW(
    h_d_s: ?HANDLE,
    psz_name_context: ?[*:0]const u16,
    ul_flags: u32,
    p_fn_call_back: isize,
    p_callback_data: ?*anyopaque,
    p_errors: ?*?*?*DS_REPSYNCALL_ERRINFOW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsRemoveDsServerW(
    h_ds: ?HANDLE,
    server_d_n: ?PWSTR,
    domain_d_n: ?PWSTR,
    f_last_dc_in_domain: ?*BOOL,
    f_commit: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsRemoveDsServerA(
    h_ds: ?HANDLE,
    server_d_n: ?PSTR,
    domain_d_n: ?PSTR,
    f_last_dc_in_domain: ?*BOOL,
    f_commit: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsRemoveDsDomainW(
    h_ds: ?HANDLE,
    domain_d_n: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsRemoveDsDomainA(
    h_ds: ?HANDLE,
    domain_d_n: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListSitesA(
    h_ds: ?HANDLE,
    pp_sites: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListSitesW(
    h_ds: ?HANDLE,
    pp_sites: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListServersInSiteA(
    h_ds: ?HANDLE,
    site: ?[*:0]const u8,
    pp_servers: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListServersInSiteW(
    h_ds: ?HANDLE,
    site: ?[*:0]const u16,
    pp_servers: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListDomainsInSiteA(
    h_ds: ?HANDLE,
    site: ?[*:0]const u8,
    pp_domains: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListDomainsInSiteW(
    h_ds: ?HANDLE,
    site: ?[*:0]const u16,
    pp_domains: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListServersForDomainInSiteA(
    h_ds: ?HANDLE,
    domain: ?[*:0]const u8,
    site: ?[*:0]const u8,
    pp_servers: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListServersForDomainInSiteW(
    h_ds: ?HANDLE,
    domain: ?[*:0]const u16,
    site: ?[*:0]const u16,
    pp_servers: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListInfoForServerA(
    h_ds: ?HANDLE,
    server: ?[*:0]const u8,
    pp_info: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListInfoForServerW(
    h_ds: ?HANDLE,
    server: ?[*:0]const u16,
    pp_info: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListRolesA(
    h_ds: ?HANDLE,
    pp_roles: ?*?*DS_NAME_RESULTA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsListRolesW(
    h_ds: ?HANDLE,
    pp_roles: ?*?*DS_NAME_RESULTW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsQuerySitesByCostW(
    h_d_s: ?HANDLE,
    pwsz_from_site: ?PWSTR,
    rgwsz_to_sites: [*]?PWSTR,
    c_to_sites: u32,
    dw_flags: u32,
    prg_site_info: ?*?*DS_SITE_COST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsQuerySitesByCostA(
    h_d_s: ?HANDLE,
    psz_from_site: ?PSTR,
    rgsz_to_sites: [*]?PSTR,
    c_to_sites: u32,
    dw_flags: u32,
    prg_site_info: ?*?*DS_SITE_COST_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsQuerySitesFree(
    rg_site_info: ?*DS_SITE_COST_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsMapSchemaGuidsA(
    h_ds: ?HANDLE,
    c_guids: u32,
    r_guids: [*]Guid,
    pp_guid_map: ?*?*DS_SCHEMA_GUID_MAPA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsFreeSchemaGuidMapA(
    p_guid_map: ?*DS_SCHEMA_GUID_MAPA,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsMapSchemaGuidsW(
    h_ds: ?HANDLE,
    c_guids: u32,
    r_guids: [*]Guid,
    pp_guid_map: ?*?*DS_SCHEMA_GUID_MAPW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsFreeSchemaGuidMapW(
    p_guid_map: ?*DS_SCHEMA_GUID_MAPW,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsGetDomainControllerInfoA(
    h_ds: ?HANDLE,
    domain_name: ?[*:0]const u8,
    info_level: u32,
    pc_out: ?*u32,
    pp_info: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsGetDomainControllerInfoW(
    h_ds: ?HANDLE,
    domain_name: ?[*:0]const u16,
    info_level: u32,
    pc_out: ?*u32,
    pp_info: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsFreeDomainControllerInfoA(
    info_level: u32,
    c_info: u32,
    p_info: [*]u8,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsFreeDomainControllerInfoW(
    info_level: u32,
    c_info: u32,
    p_info: [*]u8,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaConsistencyCheck(
    h_d_s: ?HANDLE,
    task_i_d: DS_KCC_TASKID,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaVerifyObjectsW(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u16,
    p_uuid_dsa_src: ?*const Guid,
    ul_options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaVerifyObjectsA(
    h_d_s: ?HANDLE,
    name_context: ?[*:0]const u8,
    p_uuid_dsa_src: ?*const Guid,
    ul_options: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaGetInfoW(
    h_d_s: ?HANDLE,
    info_type: DS_REPL_INFO_TYPE,
    psz_object: ?[*:0]const u16,
    puuid_for_source_dsa_obj_guid: ?*Guid,
    pp_info: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaGetInfo2W(
    h_d_s: ?HANDLE,
    info_type: DS_REPL_INFO_TYPE,
    psz_object: ?[*:0]const u16,
    puuid_for_source_dsa_obj_guid: ?*Guid,
    psz_attribute_name: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
    dw_flags: u32,
    dw_enumeration_context: u32,
    pp_info: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsReplicaFreeInfo(
    info_type: DS_REPL_INFO_TYPE,
    p_info: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsAddSidHistoryW(
    h_d_s: ?HANDLE,
    flags: u32,
    src_domain: ?[*:0]const u16,
    src_principal: ?[*:0]const u16,
    src_domain_controller: ?[*:0]const u16,
    src_domain_creds: ?*anyopaque,
    dst_domain: ?[*:0]const u16,
    dst_principal: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsAddSidHistoryA(
    h_d_s: ?HANDLE,
    flags: u32,
    src_domain: ?[*:0]const u8,
    src_principal: ?[*:0]const u8,
    src_domain_controller: ?[*:0]const u8,
    src_domain_creds: ?*anyopaque,
    dst_domain: ?[*:0]const u8,
    dst_principal: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsInheritSecurityIdentityW(
    h_d_s: ?HANDLE,
    flags: u32,
    src_principal: ?[*:0]const u16,
    dst_principal: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "ntdsapi" fn DsInheritSecurityIdentityA(
    h_d_s: ?HANDLE,
    flags: u32,
    src_principal: ?[*:0]const u8,
    dst_principal: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsRoleGetPrimaryDomainInformation(
    lp_server: ?[*:0]const u16,
    info_level: DSROLE_PRIMARY_DOMAIN_INFO_LEVEL,
    buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsRoleFreeMemory(
    buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetDcNameA(
    computer_name: ?[*:0]const u8,
    domain_name: ?[*:0]const u8,
    domain_guid: ?*Guid,
    site_name: ?[*:0]const u8,
    flags: u32,
    domain_controller_info: ?*?*DOMAIN_CONTROLLER_INFOA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetDcNameW(
    computer_name: ?[*:0]const u16,
    domain_name: ?[*:0]const u16,
    domain_guid: ?*Guid,
    site_name: ?[*:0]const u16,
    flags: u32,
    domain_controller_info: ?*?*DOMAIN_CONTROLLER_INFOW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetSiteNameA(
    computer_name: ?[*:0]const u8,
    site_name: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetSiteNameW(
    computer_name: ?[*:0]const u16,
    site_name: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsValidateSubnetNameW(
    subnet_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsValidateSubnetNameA(
    subnet_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsAddressToSiteNamesW(
    computer_name: ?[*:0]const u16,
    entry_count: u32,
    socket_addresses: [*]SOCKET_ADDRESS,
    site_names: ?*?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsAddressToSiteNamesA(
    computer_name: ?[*:0]const u8,
    entry_count: u32,
    socket_addresses: [*]SOCKET_ADDRESS,
    site_names: ?*?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsAddressToSiteNamesExW(
    computer_name: ?[*:0]const u16,
    entry_count: u32,
    socket_addresses: [*]SOCKET_ADDRESS,
    site_names: ?*?*?PWSTR,
    subnet_names: ?*?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsAddressToSiteNamesExA(
    computer_name: ?[*:0]const u8,
    entry_count: u32,
    socket_addresses: [*]SOCKET_ADDRESS,
    site_names: ?*?*?PSTR,
    subnet_names: ?*?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsEnumerateDomainTrustsW(
    server_name: ?PWSTR,
    flags: u32,
    domains: ?*?*DS_DOMAIN_TRUSTSW,
    domain_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsEnumerateDomainTrustsA(
    server_name: ?PSTR,
    flags: u32,
    domains: ?*?*DS_DOMAIN_TRUSTSA,
    domain_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetForestTrustInformationW(
    server_name: ?[*:0]const u16,
    trusted_domain_name: ?[*:0]const u16,
    flags: u32,
    forest_trust_info: ?*?*LSA_FOREST_TRUST_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsMergeForestTrustInformationW(
    domain_name: ?[*:0]const u16,
    new_forest_trust_info: ?*LSA_FOREST_TRUST_INFORMATION,
    old_forest_trust_info: ?*LSA_FOREST_TRUST_INFORMATION,
    merged_forest_trust_info: ?*?*LSA_FOREST_TRUST_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetDcSiteCoverageW(
    server_name: ?[*:0]const u16,
    entry_count: ?*u32,
    site_names: ?*?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetDcSiteCoverageA(
    server_name: ?[*:0]const u8,
    entry_count: ?*u32,
    site_names: ?*?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsDeregisterDnsHostRecordsW(
    server_name: ?PWSTR,
    dns_domain_name: ?PWSTR,
    domain_guid: ?*Guid,
    dsa_guid: ?*Guid,
    dns_host_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsDeregisterDnsHostRecordsA(
    server_name: ?PSTR,
    dns_domain_name: ?PSTR,
    domain_guid: ?*Guid,
    dsa_guid: ?*Guid,
    dns_host_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetDcOpenW(
    dns_name: ?[*:0]const u16,
    option_flags: u32,
    site_name: ?[*:0]const u16,
    domain_guid: ?*Guid,
    dns_forest_name: ?[*:0]const u16,
    dc_flags: u32,
    ret_get_dc_context: ?*GetDcContextHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetDcOpenA(
    dns_name: ?[*:0]const u8,
    option_flags: u32,
    site_name: ?[*:0]const u8,
    domain_guid: ?*Guid,
    dns_forest_name: ?[*:0]const u8,
    dc_flags: u32,
    ret_get_dc_context: ?*GetDcContextHandle,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetDcNextW(
    get_dc_context_handle: ?HANDLE,
    sock_address_count: ?*u32,
    sock_addresses: ?*?*SOCKET_ADDRESS,
    dns_host_name: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetDcNextA(
    get_dc_context_handle: ?HANDLE,
    sock_address_count: ?*u32,
    sock_addresses: ?*?*SOCKET_ADDRESS,
    dns_host_name: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DsGetDcCloseW(
    get_dc_context_handle: GetDcContextHandle,
) callconv(@import("std").os.windows.WINAPI) void;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (69)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DSBROWSEINFO = thismodule.DSBROWSEINFOA;
        pub const DSBITEM = thismodule.DSBITEMA;
        pub const DS_NAME_RESULT_ITEM = thismodule.DS_NAME_RESULT_ITEMA;
        pub const DS_NAME_RESULT = thismodule.DS_NAME_RESULTA;
        pub const DS_REPSYNCALL_SYNC = thismodule.DS_REPSYNCALL_SYNCA;
        pub const DS_REPSYNCALL_ERRINFO = thismodule.DS_REPSYNCALL_ERRINFOA;
        pub const DS_REPSYNCALL_UPDATE = thismodule.DS_REPSYNCALL_UPDATEA;
        pub const DS_SCHEMA_GUID_MAP = thismodule.DS_SCHEMA_GUID_MAPA;
        pub const DS_DOMAIN_CONTROLLER_INFO_1 = thismodule.DS_DOMAIN_CONTROLLER_INFO_1A;
        pub const DS_DOMAIN_CONTROLLER_INFO_2 = thismodule.DS_DOMAIN_CONTROLLER_INFO_2A;
        pub const DS_DOMAIN_CONTROLLER_INFO_3 = thismodule.DS_DOMAIN_CONTROLLER_INFO_3A;
        pub const DOMAIN_CONTROLLER_INFO = thismodule.DOMAIN_CONTROLLER_INFOA;
        pub const DS_DOMAIN_TRUSTS = thismodule.DS_DOMAIN_TRUSTSA;
        pub const DsBrowseForContainer = thismodule.DsBrowseForContainerA;
        pub const DsMakeSpn = thismodule.DsMakeSpnA;
        pub const DsCrackSpn = thismodule.DsCrackSpnA;
        pub const DsQuoteRdnValue = thismodule.DsQuoteRdnValueA;
        pub const DsUnquoteRdnValue = thismodule.DsUnquoteRdnValueA;
        pub const DsCrackUnquotedMangledRdn = thismodule.DsCrackUnquotedMangledRdnA;
        pub const DsIsMangledRdnValue = thismodule.DsIsMangledRdnValueA;
        pub const DsIsMangledDn = thismodule.DsIsMangledDnA;
        pub const DsCrackSpn2 = thismodule.DsCrackSpn2A;
        pub const DsBind = thismodule.DsBindA;
        pub const DsBindWithCred = thismodule.DsBindWithCredA;
        pub const DsBindWithSpn = thismodule.DsBindWithSpnA;
        pub const DsBindWithSpnEx = thismodule.DsBindWithSpnExA;
        pub const DsBindByInstance = thismodule.DsBindByInstanceA;
        pub const DsBindToISTG = thismodule.DsBindToISTGA;
        pub const DsUnBind = thismodule.DsUnBindA;
        pub const DsMakePasswordCredentials = thismodule.DsMakePasswordCredentialsA;
        pub const DsCrackNames = thismodule.DsCrackNamesA;
        pub const DsFreeNameResult = thismodule.DsFreeNameResultA;
        pub const DsGetSpn = thismodule.DsGetSpnA;
        pub const DsFreeSpnArray = thismodule.DsFreeSpnArrayA;
        pub const DsWriteAccountSpn = thismodule.DsWriteAccountSpnA;
        pub const DsClientMakeSpnForTargetServer = thismodule.DsClientMakeSpnForTargetServerA;
        pub const DsServerRegisterSpn = thismodule.DsServerRegisterSpnA;
        pub const DsReplicaSync = thismodule.DsReplicaSyncA;
        pub const DsReplicaAdd = thismodule.DsReplicaAddA;
        pub const DsReplicaDel = thismodule.DsReplicaDelA;
        pub const DsReplicaModify = thismodule.DsReplicaModifyA;
        pub const DsReplicaUpdateRefs = thismodule.DsReplicaUpdateRefsA;
        pub const DsReplicaSyncAll = thismodule.DsReplicaSyncAllA;
        pub const DsRemoveDsServer = thismodule.DsRemoveDsServerA;
        pub const DsRemoveDsDomain = thismodule.DsRemoveDsDomainA;
        pub const DsListSites = thismodule.DsListSitesA;
        pub const DsListServersInSite = thismodule.DsListServersInSiteA;
        pub const DsListDomainsInSite = thismodule.DsListDomainsInSiteA;
        pub const DsListServersForDomainInSite = thismodule.DsListServersForDomainInSiteA;
        pub const DsListInfoForServer = thismodule.DsListInfoForServerA;
        pub const DsListRoles = thismodule.DsListRolesA;
        pub const DsQuerySitesByCost = thismodule.DsQuerySitesByCostA;
        pub const DsMapSchemaGuids = thismodule.DsMapSchemaGuidsA;
        pub const DsFreeSchemaGuidMap = thismodule.DsFreeSchemaGuidMapA;
        pub const DsGetDomainControllerInfo = thismodule.DsGetDomainControllerInfoA;
        pub const DsFreeDomainControllerInfo = thismodule.DsFreeDomainControllerInfoA;
        pub const DsReplicaVerifyObjects = thismodule.DsReplicaVerifyObjectsA;
        pub const DsAddSidHistory = thismodule.DsAddSidHistoryA;
        pub const DsInheritSecurityIdentity = thismodule.DsInheritSecurityIdentityA;
        pub const DsGetDcName = thismodule.DsGetDcNameA;
        pub const DsGetSiteName = thismodule.DsGetSiteNameA;
        pub const DsValidateSubnetName = thismodule.DsValidateSubnetNameA;
        pub const DsAddressToSiteNames = thismodule.DsAddressToSiteNamesA;
        pub const DsAddressToSiteNamesEx = thismodule.DsAddressToSiteNamesExA;
        pub const DsEnumerateDomainTrusts = thismodule.DsEnumerateDomainTrustsA;
        pub const DsGetDcSiteCoverage = thismodule.DsGetDcSiteCoverageA;
        pub const DsDeregisterDnsHostRecords = thismodule.DsDeregisterDnsHostRecordsA;
        pub const DsGetDcOpen = thismodule.DsGetDcOpenA;
        pub const DsGetDcNext = thismodule.DsGetDcNextA;
    },
    .wide => struct {
        pub const DSBROWSEINFO = thismodule.DSBROWSEINFOW;
        pub const DSBITEM = thismodule.DSBITEMW;
        pub const DS_NAME_RESULT_ITEM = thismodule.DS_NAME_RESULT_ITEMW;
        pub const DS_NAME_RESULT = thismodule.DS_NAME_RESULTW;
        pub const DS_REPSYNCALL_SYNC = thismodule.DS_REPSYNCALL_SYNCW;
        pub const DS_REPSYNCALL_ERRINFO = thismodule.DS_REPSYNCALL_ERRINFOW;
        pub const DS_REPSYNCALL_UPDATE = thismodule.DS_REPSYNCALL_UPDATEW;
        pub const DS_SCHEMA_GUID_MAP = thismodule.DS_SCHEMA_GUID_MAPW;
        pub const DS_DOMAIN_CONTROLLER_INFO_1 = thismodule.DS_DOMAIN_CONTROLLER_INFO_1W;
        pub const DS_DOMAIN_CONTROLLER_INFO_2 = thismodule.DS_DOMAIN_CONTROLLER_INFO_2W;
        pub const DS_DOMAIN_CONTROLLER_INFO_3 = thismodule.DS_DOMAIN_CONTROLLER_INFO_3W;
        pub const DOMAIN_CONTROLLER_INFO = thismodule.DOMAIN_CONTROLLER_INFOW;
        pub const DS_DOMAIN_TRUSTS = thismodule.DS_DOMAIN_TRUSTSW;
        pub const DsBrowseForContainer = thismodule.DsBrowseForContainerW;
        pub const DsMakeSpn = thismodule.DsMakeSpnW;
        pub const DsCrackSpn = thismodule.DsCrackSpnW;
        pub const DsQuoteRdnValue = thismodule.DsQuoteRdnValueW;
        pub const DsUnquoteRdnValue = thismodule.DsUnquoteRdnValueW;
        pub const DsCrackUnquotedMangledRdn = thismodule.DsCrackUnquotedMangledRdnW;
        pub const DsIsMangledRdnValue = thismodule.DsIsMangledRdnValueW;
        pub const DsIsMangledDn = thismodule.DsIsMangledDnW;
        pub const DsCrackSpn2 = thismodule.DsCrackSpn2W;
        pub const DsBind = thismodule.DsBindW;
        pub const DsBindWithCred = thismodule.DsBindWithCredW;
        pub const DsBindWithSpn = thismodule.DsBindWithSpnW;
        pub const DsBindWithSpnEx = thismodule.DsBindWithSpnExW;
        pub const DsBindByInstance = thismodule.DsBindByInstanceW;
        pub const DsBindToISTG = thismodule.DsBindToISTGW;
        pub const DsUnBind = thismodule.DsUnBindW;
        pub const DsMakePasswordCredentials = thismodule.DsMakePasswordCredentialsW;
        pub const DsCrackNames = thismodule.DsCrackNamesW;
        pub const DsFreeNameResult = thismodule.DsFreeNameResultW;
        pub const DsGetSpn = thismodule.DsGetSpnW;
        pub const DsFreeSpnArray = thismodule.DsFreeSpnArrayW;
        pub const DsWriteAccountSpn = thismodule.DsWriteAccountSpnW;
        pub const DsClientMakeSpnForTargetServer = thismodule.DsClientMakeSpnForTargetServerW;
        pub const DsServerRegisterSpn = thismodule.DsServerRegisterSpnW;
        pub const DsReplicaSync = thismodule.DsReplicaSyncW;
        pub const DsReplicaAdd = thismodule.DsReplicaAddW;
        pub const DsReplicaDel = thismodule.DsReplicaDelW;
        pub const DsReplicaModify = thismodule.DsReplicaModifyW;
        pub const DsReplicaUpdateRefs = thismodule.DsReplicaUpdateRefsW;
        pub const DsReplicaSyncAll = thismodule.DsReplicaSyncAllW;
        pub const DsRemoveDsServer = thismodule.DsRemoveDsServerW;
        pub const DsRemoveDsDomain = thismodule.DsRemoveDsDomainW;
        pub const DsListSites = thismodule.DsListSitesW;
        pub const DsListServersInSite = thismodule.DsListServersInSiteW;
        pub const DsListDomainsInSite = thismodule.DsListDomainsInSiteW;
        pub const DsListServersForDomainInSite = thismodule.DsListServersForDomainInSiteW;
        pub const DsListInfoForServer = thismodule.DsListInfoForServerW;
        pub const DsListRoles = thismodule.DsListRolesW;
        pub const DsQuerySitesByCost = thismodule.DsQuerySitesByCostW;
        pub const DsMapSchemaGuids = thismodule.DsMapSchemaGuidsW;
        pub const DsFreeSchemaGuidMap = thismodule.DsFreeSchemaGuidMapW;
        pub const DsGetDomainControllerInfo = thismodule.DsGetDomainControllerInfoW;
        pub const DsFreeDomainControllerInfo = thismodule.DsFreeDomainControllerInfoW;
        pub const DsReplicaVerifyObjects = thismodule.DsReplicaVerifyObjectsW;
        pub const DsAddSidHistory = thismodule.DsAddSidHistoryW;
        pub const DsInheritSecurityIdentity = thismodule.DsInheritSecurityIdentityW;
        pub const DsGetDcName = thismodule.DsGetDcNameW;
        pub const DsGetSiteName = thismodule.DsGetSiteNameW;
        pub const DsValidateSubnetName = thismodule.DsValidateSubnetNameW;
        pub const DsAddressToSiteNames = thismodule.DsAddressToSiteNamesW;
        pub const DsAddressToSiteNamesEx = thismodule.DsAddressToSiteNamesExW;
        pub const DsEnumerateDomainTrusts = thismodule.DsEnumerateDomainTrustsW;
        pub const DsGetDcSiteCoverage = thismodule.DsGetDcSiteCoverageW;
        pub const DsDeregisterDnsHostRecords = thismodule.DsDeregisterDnsHostRecordsW;
        pub const DsGetDcOpen = thismodule.DsGetDcOpenW;
        pub const DsGetDcNext = thismodule.DsGetDcNextW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const DSBROWSEINFO = *opaque {};
        pub const DSBITEM = *opaque {};
        pub const DS_NAME_RESULT_ITEM = *opaque {};
        pub const DS_NAME_RESULT = *opaque {};
        pub const DS_REPSYNCALL_SYNC = *opaque {};
        pub const DS_REPSYNCALL_ERRINFO = *opaque {};
        pub const DS_REPSYNCALL_UPDATE = *opaque {};
        pub const DS_SCHEMA_GUID_MAP = *opaque {};
        pub const DS_DOMAIN_CONTROLLER_INFO_1 = *opaque {};
        pub const DS_DOMAIN_CONTROLLER_INFO_2 = *opaque {};
        pub const DS_DOMAIN_CONTROLLER_INFO_3 = *opaque {};
        pub const DOMAIN_CONTROLLER_INFO = *opaque {};
        pub const DS_DOMAIN_TRUSTS = *opaque {};
        pub const DsBrowseForContainer = *opaque {};
        pub const DsMakeSpn = *opaque {};
        pub const DsCrackSpn = *opaque {};
        pub const DsQuoteRdnValue = *opaque {};
        pub const DsUnquoteRdnValue = *opaque {};
        pub const DsCrackUnquotedMangledRdn = *opaque {};
        pub const DsIsMangledRdnValue = *opaque {};
        pub const DsIsMangledDn = *opaque {};
        pub const DsCrackSpn2 = *opaque {};
        pub const DsBind = *opaque {};
        pub const DsBindWithCred = *opaque {};
        pub const DsBindWithSpn = *opaque {};
        pub const DsBindWithSpnEx = *opaque {};
        pub const DsBindByInstance = *opaque {};
        pub const DsBindToISTG = *opaque {};
        pub const DsUnBind = *opaque {};
        pub const DsMakePasswordCredentials = *opaque {};
        pub const DsCrackNames = *opaque {};
        pub const DsFreeNameResult = *opaque {};
        pub const DsGetSpn = *opaque {};
        pub const DsFreeSpnArray = *opaque {};
        pub const DsWriteAccountSpn = *opaque {};
        pub const DsClientMakeSpnForTargetServer = *opaque {};
        pub const DsServerRegisterSpn = *opaque {};
        pub const DsReplicaSync = *opaque {};
        pub const DsReplicaAdd = *opaque {};
        pub const DsReplicaDel = *opaque {};
        pub const DsReplicaModify = *opaque {};
        pub const DsReplicaUpdateRefs = *opaque {};
        pub const DsReplicaSyncAll = *opaque {};
        pub const DsRemoveDsServer = *opaque {};
        pub const DsRemoveDsDomain = *opaque {};
        pub const DsListSites = *opaque {};
        pub const DsListServersInSite = *opaque {};
        pub const DsListDomainsInSite = *opaque {};
        pub const DsListServersForDomainInSite = *opaque {};
        pub const DsListInfoForServer = *opaque {};
        pub const DsListRoles = *opaque {};
        pub const DsQuerySitesByCost = *opaque {};
        pub const DsMapSchemaGuids = *opaque {};
        pub const DsFreeSchemaGuidMap = *opaque {};
        pub const DsGetDomainControllerInfo = *opaque {};
        pub const DsFreeDomainControllerInfo = *opaque {};
        pub const DsReplicaVerifyObjects = *opaque {};
        pub const DsAddSidHistory = *opaque {};
        pub const DsInheritSecurityIdentity = *opaque {};
        pub const DsGetDcName = *opaque {};
        pub const DsGetSiteName = *opaque {};
        pub const DsValidateSubnetName = *opaque {};
        pub const DsAddressToSiteNames = *opaque {};
        pub const DsAddressToSiteNamesEx = *opaque {};
        pub const DsEnumerateDomainTrusts = *opaque {};
        pub const DsGetDcSiteCoverage = *opaque {};
        pub const DsDeregisterDnsHostRecords = *opaque {};
        pub const DsGetDcOpen = *opaque {};
        pub const DsGetDcNext = *opaque {};
    } else struct {
        pub const DSBROWSEINFO = @compileError("'DSBROWSEINFO' requires that UNICODE be set to true or false in the root module");
        pub const DSBITEM = @compileError("'DSBITEM' requires that UNICODE be set to true or false in the root module");
        pub const DS_NAME_RESULT_ITEM = @compileError("'DS_NAME_RESULT_ITEM' requires that UNICODE be set to true or false in the root module");
        pub const DS_NAME_RESULT = @compileError("'DS_NAME_RESULT' requires that UNICODE be set to true or false in the root module");
        pub const DS_REPSYNCALL_SYNC = @compileError("'DS_REPSYNCALL_SYNC' requires that UNICODE be set to true or false in the root module");
        pub const DS_REPSYNCALL_ERRINFO = @compileError("'DS_REPSYNCALL_ERRINFO' requires that UNICODE be set to true or false in the root module");
        pub const DS_REPSYNCALL_UPDATE = @compileError("'DS_REPSYNCALL_UPDATE' requires that UNICODE be set to true or false in the root module");
        pub const DS_SCHEMA_GUID_MAP = @compileError("'DS_SCHEMA_GUID_MAP' requires that UNICODE be set to true or false in the root module");
        pub const DS_DOMAIN_CONTROLLER_INFO_1 = @compileError("'DS_DOMAIN_CONTROLLER_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const DS_DOMAIN_CONTROLLER_INFO_2 = @compileError("'DS_DOMAIN_CONTROLLER_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const DS_DOMAIN_CONTROLLER_INFO_3 = @compileError("'DS_DOMAIN_CONTROLLER_INFO_3' requires that UNICODE be set to true or false in the root module");
        pub const DOMAIN_CONTROLLER_INFO = @compileError("'DOMAIN_CONTROLLER_INFO' requires that UNICODE be set to true or false in the root module");
        pub const DS_DOMAIN_TRUSTS = @compileError("'DS_DOMAIN_TRUSTS' requires that UNICODE be set to true or false in the root module");
        pub const DsBrowseForContainer = @compileError("'DsBrowseForContainer' requires that UNICODE be set to true or false in the root module");
        pub const DsMakeSpn = @compileError("'DsMakeSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsCrackSpn = @compileError("'DsCrackSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsQuoteRdnValue = @compileError("'DsQuoteRdnValue' requires that UNICODE be set to true or false in the root module");
        pub const DsUnquoteRdnValue = @compileError("'DsUnquoteRdnValue' requires that UNICODE be set to true or false in the root module");
        pub const DsCrackUnquotedMangledRdn = @compileError("'DsCrackUnquotedMangledRdn' requires that UNICODE be set to true or false in the root module");
        pub const DsIsMangledRdnValue = @compileError("'DsIsMangledRdnValue' requires that UNICODE be set to true or false in the root module");
        pub const DsIsMangledDn = @compileError("'DsIsMangledDn' requires that UNICODE be set to true or false in the root module");
        pub const DsCrackSpn2 = @compileError("'DsCrackSpn2' requires that UNICODE be set to true or false in the root module");
        pub const DsBind = @compileError("'DsBind' requires that UNICODE be set to true or false in the root module");
        pub const DsBindWithCred = @compileError("'DsBindWithCred' requires that UNICODE be set to true or false in the root module");
        pub const DsBindWithSpn = @compileError("'DsBindWithSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsBindWithSpnEx = @compileError("'DsBindWithSpnEx' requires that UNICODE be set to true or false in the root module");
        pub const DsBindByInstance = @compileError("'DsBindByInstance' requires that UNICODE be set to true or false in the root module");
        pub const DsBindToISTG = @compileError("'DsBindToISTG' requires that UNICODE be set to true or false in the root module");
        pub const DsUnBind = @compileError("'DsUnBind' requires that UNICODE be set to true or false in the root module");
        pub const DsMakePasswordCredentials = @compileError("'DsMakePasswordCredentials' requires that UNICODE be set to true or false in the root module");
        pub const DsCrackNames = @compileError("'DsCrackNames' requires that UNICODE be set to true or false in the root module");
        pub const DsFreeNameResult = @compileError("'DsFreeNameResult' requires that UNICODE be set to true or false in the root module");
        pub const DsGetSpn = @compileError("'DsGetSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsFreeSpnArray = @compileError("'DsFreeSpnArray' requires that UNICODE be set to true or false in the root module");
        pub const DsWriteAccountSpn = @compileError("'DsWriteAccountSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsClientMakeSpnForTargetServer = @compileError("'DsClientMakeSpnForTargetServer' requires that UNICODE be set to true or false in the root module");
        pub const DsServerRegisterSpn = @compileError("'DsServerRegisterSpn' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaSync = @compileError("'DsReplicaSync' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaAdd = @compileError("'DsReplicaAdd' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaDel = @compileError("'DsReplicaDel' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaModify = @compileError("'DsReplicaModify' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaUpdateRefs = @compileError("'DsReplicaUpdateRefs' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaSyncAll = @compileError("'DsReplicaSyncAll' requires that UNICODE be set to true or false in the root module");
        pub const DsRemoveDsServer = @compileError("'DsRemoveDsServer' requires that UNICODE be set to true or false in the root module");
        pub const DsRemoveDsDomain = @compileError("'DsRemoveDsDomain' requires that UNICODE be set to true or false in the root module");
        pub const DsListSites = @compileError("'DsListSites' requires that UNICODE be set to true or false in the root module");
        pub const DsListServersInSite = @compileError("'DsListServersInSite' requires that UNICODE be set to true or false in the root module");
        pub const DsListDomainsInSite = @compileError("'DsListDomainsInSite' requires that UNICODE be set to true or false in the root module");
        pub const DsListServersForDomainInSite = @compileError("'DsListServersForDomainInSite' requires that UNICODE be set to true or false in the root module");
        pub const DsListInfoForServer = @compileError("'DsListInfoForServer' requires that UNICODE be set to true or false in the root module");
        pub const DsListRoles = @compileError("'DsListRoles' requires that UNICODE be set to true or false in the root module");
        pub const DsQuerySitesByCost = @compileError("'DsQuerySitesByCost' requires that UNICODE be set to true or false in the root module");
        pub const DsMapSchemaGuids = @compileError("'DsMapSchemaGuids' requires that UNICODE be set to true or false in the root module");
        pub const DsFreeSchemaGuidMap = @compileError("'DsFreeSchemaGuidMap' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDomainControllerInfo = @compileError("'DsGetDomainControllerInfo' requires that UNICODE be set to true or false in the root module");
        pub const DsFreeDomainControllerInfo = @compileError("'DsFreeDomainControllerInfo' requires that UNICODE be set to true or false in the root module");
        pub const DsReplicaVerifyObjects = @compileError("'DsReplicaVerifyObjects' requires that UNICODE be set to true or false in the root module");
        pub const DsAddSidHistory = @compileError("'DsAddSidHistory' requires that UNICODE be set to true or false in the root module");
        pub const DsInheritSecurityIdentity = @compileError("'DsInheritSecurityIdentity' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDcName = @compileError("'DsGetDcName' requires that UNICODE be set to true or false in the root module");
        pub const DsGetSiteName = @compileError("'DsGetSiteName' requires that UNICODE be set to true or false in the root module");
        pub const DsValidateSubnetName = @compileError("'DsValidateSubnetName' requires that UNICODE be set to true or false in the root module");
        pub const DsAddressToSiteNames = @compileError("'DsAddressToSiteNames' requires that UNICODE be set to true or false in the root module");
        pub const DsAddressToSiteNamesEx = @compileError("'DsAddressToSiteNamesEx' requires that UNICODE be set to true or false in the root module");
        pub const DsEnumerateDomainTrusts = @compileError("'DsEnumerateDomainTrusts' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDcSiteCoverage = @compileError("'DsGetDcSiteCoverage' requires that UNICODE be set to true or false in the root module");
        pub const DsDeregisterDnsHostRecords = @compileError("'DsDeregisterDnsHostRecords' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDcOpen = @compileError("'DsGetDcOpen' requires that UNICODE be set to true or false in the root module");
        pub const DsGetDcNext = @compileError("'DsGetDcNext' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (35)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BFFCALLBACK = @import("../ui/shell.zig").BFFCALLBACK;
const BOOL = @import("../foundation.zig").BOOL;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const BSTR = @import("../foundation.zig").BSTR;
const CHAR = @import("../foundation.zig").CHAR;
const DISPPARAMS = @import("../system/com.zig").DISPPARAMS;
const DLGPROC = @import("../ui/windows_and_messaging.zig").DLGPROC;
const EXCEPINFO = @import("../system/com.zig").EXCEPINFO;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HKEY = @import("../system/registry.zig").HKEY;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDataObject = @import("../system/com.zig").IDataObject;
const IDispatch = @import("../system/com.zig").IDispatch;
const IEnumVARIANT = @import("../system/ole.zig").IEnumVARIANT;
const IPersist = @import("../system/com.zig").IPersist;
const IPropertyBag = @import("../system/com/structured_storage.zig").IPropertyBag;
const ITypeInfo = @import("../system/com.zig").ITypeInfo;
const IUnknown = @import("../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const LPARAM = @import("../foundation.zig").LPARAM;
const LPFNSVADDPROPSHEETPAGE = @import("../ui/controls.zig").LPFNSVADDPROPSHEETPAGE;
const LSA_FOREST_TRUST_INFORMATION = @import("../security/authentication/identity.zig").LSA_FOREST_TRUST_INFORMATION;
const PSECURITY_DESCRIPTOR = @import("../security.zig").PSECURITY_DESCRIPTOR;
const PSID = @import("../foundation.zig").PSID;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SOCKET_ADDRESS = @import("../networking/win_sock.zig").SOCKET_ADDRESS;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "LPCQADDFORMSPROC")) {
        _ = LPCQADDFORMSPROC;
    }
    if (@hasDecl(@This(), "LPCQADDPAGESPROC")) {
        _ = LPCQADDPAGESPROC;
    }
    if (@hasDecl(@This(), "LPCQPAGEPROC")) {
        _ = LPCQPAGEPROC;
    }
    if (@hasDecl(@This(), "LPDSENUMATTRIBUTES")) {
        _ = LPDSENUMATTRIBUTES;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
