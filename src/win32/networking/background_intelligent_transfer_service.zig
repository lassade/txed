//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (209)
//--------------------------------------------------------------------------------
pub const BG_NOTIFY_JOB_TRANSFERRED = @as(u32, 1);
pub const BG_NOTIFY_JOB_ERROR = @as(u32, 2);
pub const BG_NOTIFY_DISABLE = @as(u32, 4);
pub const BG_NOTIFY_JOB_MODIFICATION = @as(u32, 8);
pub const BG_NOTIFY_FILE_TRANSFERRED = @as(u32, 16);
pub const BG_NOTIFY_FILE_RANGES_TRANSFERRED = @as(u32, 32);
pub const BG_JOB_ENUM_ALL_USERS = @as(u32, 1);
pub const BG_COPY_FILE_OWNER = @as(u32, 1);
pub const BG_COPY_FILE_GROUP = @as(u32, 2);
pub const BG_COPY_FILE_DACL = @as(u32, 4);
pub const BG_COPY_FILE_SACL = @as(u32, 8);
pub const BG_COPY_FILE_ALL = @as(u32, 15);
pub const BG_SSL_ENABLE_CRL_CHECK = @as(u32, 1);
pub const BG_SSL_IGNORE_CERT_CN_INVALID = @as(u32, 2);
pub const BG_SSL_IGNORE_CERT_DATE_INVALID = @as(u32, 4);
pub const BG_SSL_IGNORE_UNKNOWN_CA = @as(u32, 8);
pub const BG_SSL_IGNORE_CERT_WRONG_USAGE = @as(u32, 16);
pub const BG_HTTP_REDIRECT_POLICY_MASK = @as(u32, 1792);
pub const BG_HTTP_REDIRECT_POLICY_ALLOW_SILENT = @as(u32, 0);
pub const BG_HTTP_REDIRECT_POLICY_ALLOW_REPORT = @as(u32, 256);
pub const BG_HTTP_REDIRECT_POLICY_DISALLOW = @as(u32, 512);
pub const BG_HTTP_REDIRECT_POLICY_ALLOW_HTTPS_TO_HTTP = @as(u32, 2048);
pub const BG_ENABLE_PEERCACHING_CLIENT = @as(u32, 1);
pub const BG_ENABLE_PEERCACHING_SERVER = @as(u32, 2);
pub const BG_DISABLE_BRANCH_CACHE = @as(u32, 4);
pub const BG_JOB_ENABLE_PEERCACHING_CLIENT = @as(u32, 1);
pub const BG_JOB_ENABLE_PEERCACHING_SERVER = @as(u32, 2);
pub const BG_JOB_DISABLE_BRANCH_CACHE = @as(u32, 4);
pub const BITS_COST_STATE_UNRESTRICTED = @as(u32, 1);
pub const BITS_COST_STATE_CAPPED_USAGE_UNKNOWN = @as(u32, 2);
pub const BITS_COST_STATE_BELOW_CAP = @as(u32, 4);
pub const BITS_COST_STATE_NEAR_CAP = @as(u32, 8);
pub const BITS_COST_STATE_OVERCAP_CHARGED = @as(u32, 16);
pub const BITS_COST_STATE_OVERCAP_THROTTLED = @as(u32, 32);
pub const BITS_COST_STATE_USAGE_BASED = @as(u32, 64);
pub const BITS_COST_STATE_ROAMING = @as(u32, 128);
pub const BITS_COST_OPTION_IGNORE_CONGESTION = @as(u32, 2147483648);
pub const BITS_COST_STATE_RESERVED = @as(u32, 1073741824);
pub const QM_NOTIFY_FILE_DONE = @as(u32, 1);
pub const QM_NOTIFY_JOB_DONE = @as(u32, 2);
pub const QM_NOTIFY_GROUP_DONE = @as(u32, 4);
pub const QM_NOTIFY_DISABLE_NOTIFY = @as(u32, 64);
pub const QM_NOTIFY_USE_PROGRESSEX = @as(u32, 128);
pub const QM_STATUS_FILE_COMPLETE = @as(u32, 1);
pub const QM_STATUS_FILE_INCOMPLETE = @as(u32, 2);
pub const QM_STATUS_JOB_COMPLETE = @as(u32, 4);
pub const QM_STATUS_JOB_INCOMPLETE = @as(u32, 8);
pub const QM_STATUS_JOB_ERROR = @as(u32, 16);
pub const QM_STATUS_JOB_FOREGROUND = @as(u32, 32);
pub const QM_STATUS_GROUP_COMPLETE = @as(u32, 64);
pub const QM_STATUS_GROUP_INCOMPLETE = @as(u32, 128);
pub const QM_STATUS_GROUP_SUSPENDED = @as(u32, 256);
pub const QM_STATUS_GROUP_ERROR = @as(u32, 512);
pub const QM_STATUS_GROUP_FOREGROUND = @as(u32, 1024);
pub const QM_PROTOCOL_HTTP = @as(u32, 1);
pub const QM_PROTOCOL_FTP = @as(u32, 2);
pub const QM_PROTOCOL_SMB = @as(u32, 3);
pub const QM_PROTOCOL_CUSTOM = @as(u32, 4);
pub const QM_PROGRESS_PERCENT_DONE = @as(u32, 1);
pub const QM_PROGRESS_TIME_DONE = @as(u32, 2);
pub const QM_PROGRESS_SIZE_DONE = @as(u32, 3);
pub const QM_E_INVALID_STATE = @as(u32, 2164264961);
pub const QM_E_SERVICE_UNAVAILABLE = @as(u32, 2164264962);
pub const QM_E_DOWNLOADER_UNAVAILABLE = @as(u32, 2164264963);
pub const QM_E_ITEM_NOT_FOUND = @as(u32, 2164264964);
pub const BG_E_NOT_FOUND = @as(i32, -2145386495);
pub const BG_E_INVALID_STATE = @as(i32, -2145386494);
pub const BG_E_EMPTY = @as(i32, -2145386493);
pub const BG_E_FILE_NOT_AVAILABLE = @as(i32, -2145386492);
pub const BG_E_PROTOCOL_NOT_AVAILABLE = @as(i32, -2145386491);
pub const BG_S_ERROR_CONTEXT_NONE = @as(i32, 2097158);
pub const BG_E_ERROR_CONTEXT_UNKNOWN = @as(i32, -2145386489);
pub const BG_E_ERROR_CONTEXT_GENERAL_QUEUE_MANAGER = @as(i32, -2145386488);
pub const BG_E_ERROR_CONTEXT_LOCAL_FILE = @as(i32, -2145386487);
pub const BG_E_ERROR_CONTEXT_REMOTE_FILE = @as(i32, -2145386486);
pub const BG_E_ERROR_CONTEXT_GENERAL_TRANSPORT = @as(i32, -2145386485);
pub const BG_E_ERROR_CONTEXT_QUEUE_MANAGER_NOTIFICATION = @as(i32, -2145386484);
pub const BG_E_DESTINATION_LOCKED = @as(i32, -2145386483);
pub const BG_E_VOLUME_CHANGED = @as(i32, -2145386482);
pub const BG_E_ERROR_INFORMATION_UNAVAILABLE = @as(i32, -2145386481);
pub const BG_E_NETWORK_DISCONNECTED = @as(i32, -2145386480);
pub const BG_E_MISSING_FILE_SIZE = @as(i32, -2145386479);
pub const BG_E_INSUFFICIENT_HTTP_SUPPORT = @as(i32, -2145386478);
pub const BG_E_INSUFFICIENT_RANGE_SUPPORT = @as(i32, -2145386477);
pub const BG_E_REMOTE_NOT_SUPPORTED = @as(i32, -2145386476);
pub const BG_E_NEW_OWNER_DIFF_MAPPING = @as(i32, -2145386475);
pub const BG_E_NEW_OWNER_NO_FILE_ACCESS = @as(i32, -2145386474);
pub const BG_S_PARTIAL_COMPLETE = @as(i32, 2097175);
pub const BG_E_PROXY_LIST_TOO_LARGE = @as(i32, -2145386472);
pub const BG_E_PROXY_BYPASS_LIST_TOO_LARGE = @as(i32, -2145386471);
pub const BG_S_UNABLE_TO_DELETE_FILES = @as(i32, 2097178);
pub const BG_E_INVALID_SERVER_RESPONSE = @as(i32, -2145386469);
pub const BG_E_TOO_MANY_FILES = @as(i32, -2145386468);
pub const BG_E_LOCAL_FILE_CHANGED = @as(i32, -2145386467);
pub const BG_E_ERROR_CONTEXT_REMOTE_APPLICATION = @as(i32, -2145386466);
pub const BG_E_SESSION_NOT_FOUND = @as(i32, -2145386465);
pub const BG_E_TOO_LARGE = @as(i32, -2145386464);
pub const BG_E_STRING_TOO_LONG = @as(i32, -2145386463);
pub const BG_E_CLIENT_SERVER_PROTOCOL_MISMATCH = @as(i32, -2145386462);
pub const BG_E_SERVER_EXECUTE_ENABLE = @as(i32, -2145386461);
pub const BG_E_NO_PROGRESS = @as(i32, -2145386460);
pub const BG_E_USERNAME_TOO_LARGE = @as(i32, -2145386459);
pub const BG_E_PASSWORD_TOO_LARGE = @as(i32, -2145386458);
pub const BG_E_INVALID_AUTH_TARGET = @as(i32, -2145386457);
pub const BG_E_INVALID_AUTH_SCHEME = @as(i32, -2145386456);
pub const BG_E_FILE_NOT_FOUND = @as(i32, -2145386455);
pub const BG_S_PROXY_CHANGED = @as(i32, 2097194);
pub const BG_E_INVALID_RANGE = @as(i32, -2145386453);
pub const BG_E_OVERLAPPING_RANGES = @as(i32, -2145386452);
pub const BG_E_CONNECT_FAILURE = @as(i32, -2145386451);
pub const BG_E_CONNECTION_CLOSED = @as(i32, -2145386450);
pub const BG_E_BLOCKED_BY_POLICY = @as(i32, -2145386434);
pub const BG_E_INVALID_PROXY_INFO = @as(i32, -2145386433);
pub const BG_E_INVALID_CREDENTIALS = @as(i32, -2145386432);
pub const BG_E_INVALID_HASH_ALGORITHM = @as(i32, -2145386431);
pub const BG_E_RECORD_DELETED = @as(i32, -2145386430);
pub const BG_E_COMMIT_IN_PROGRESS = @as(i32, -2145386429);
pub const BG_E_DISCOVERY_IN_PROGRESS = @as(i32, -2145386428);
pub const BG_E_UPNP_ERROR = @as(i32, -2145386427);
pub const BG_E_TEST_OPTION_BLOCKED_DOWNLOAD = @as(i32, -2145386426);
pub const BG_E_PEERCACHING_DISABLED = @as(i32, -2145386425);
pub const BG_E_BUSYCACHERECORD = @as(i32, -2145386424);
pub const BG_E_TOO_MANY_JOBS_PER_USER = @as(i32, -2145386423);
pub const BG_E_TOO_MANY_JOBS_PER_MACHINE = @as(i32, -2145386416);
pub const BG_E_TOO_MANY_FILES_IN_JOB = @as(i32, -2145386415);
pub const BG_E_TOO_MANY_RANGES_IN_FILE = @as(i32, -2145386414);
pub const BG_E_VALIDATION_FAILED = @as(i32, -2145386413);
pub const BG_E_MAXDOWNLOAD_TIMEOUT = @as(i32, -2145386412);
pub const BG_S_OVERRIDDEN_BY_POLICY = @as(i32, 2097237);
pub const BG_E_TOKEN_REQUIRED = @as(i32, -2145386410);
pub const BG_E_UNKNOWN_PROPERTY_ID = @as(i32, -2145386409);
pub const BG_E_READ_ONLY_PROPERTY = @as(i32, -2145386408);
pub const BG_E_BLOCKED_BY_COST_TRANSFER_POLICY = @as(i32, -2145386407);
pub const BG_E_PROPERTY_SUPPORTED_FOR_DOWNLOAD_JOBS_ONLY = @as(i32, -2145386400);
pub const BG_E_READ_ONLY_PROPERTY_AFTER_ADDFILE = @as(i32, -2145386399);
pub const BG_E_READ_ONLY_PROPERTY_AFTER_RESUME = @as(i32, -2145386398);
pub const BG_E_MAX_DOWNLOAD_SIZE_INVALID_VALUE = @as(i32, -2145386397);
pub const BG_E_MAX_DOWNLOAD_SIZE_LIMIT_REACHED = @as(i32, -2145386396);
pub const BG_E_STANDBY_MODE = @as(i32, -2145386395);
pub const BG_E_USE_STORED_CREDENTIALS_NOT_SUPPORTED = @as(i32, -2145386394);
pub const BG_E_BLOCKED_BY_BATTERY_POLICY = @as(i32, -2145386393);
pub const BG_E_BLOCKED_BY_BATTERY_SAVER = @as(i32, -2145386392);
pub const BG_E_WATCHDOG_TIMEOUT = @as(i32, -2145386391);
pub const BG_E_APP_PACKAGE_NOT_FOUND = @as(i32, -2145386390);
pub const BG_E_APP_PACKAGE_SCENARIO_NOT_SUPPORTED = @as(i32, -2145386389);
pub const BG_E_DATABASE_CORRUPT = @as(i32, -2145386388);
pub const BG_E_RANDOM_ACCESS_NOT_SUPPORTED = @as(i32, -2145386387);
pub const BG_E_BLOCKED_BY_BACKGROUND_ACCESS_POLICY = @as(i32, -2145386386);
pub const BG_E_BLOCKED_BY_GAME_MODE = @as(i32, -2145386385);
pub const BG_E_BLOCKED_BY_SYSTEM_POLICY = @as(i32, -2145386384);
pub const BG_E_NOT_SUPPORTED_WITH_CUSTOM_HTTP_METHOD = @as(i32, -2145386383);
pub const BG_E_UNSUPPORTED_JOB_CONFIGURATION = @as(i32, -2145386382);
pub const BG_E_REMOTE_FILE_CHANGED = @as(i32, -2145386381);
pub const BG_E_SERVER_CERT_VALIDATION_INTERFACE_REQUIRED = @as(i32, -2145386380);
pub const BG_E_READ_ONLY_WHEN_JOB_ACTIVE = @as(i32, -2145386379);
pub const BG_E_ERROR_CONTEXT_SERVER_CERTIFICATE_CALLBACK = @as(i32, -2145386378);
pub const BG_E_HTTP_ERROR_100 = @as(i32, -2145845148);
pub const BG_E_HTTP_ERROR_101 = @as(i32, -2145845147);
pub const BG_E_HTTP_ERROR_200 = @as(i32, -2145845048);
pub const BG_E_HTTP_ERROR_201 = @as(i32, -2145845047);
pub const BG_E_HTTP_ERROR_202 = @as(i32, -2145845046);
pub const BG_E_HTTP_ERROR_203 = @as(i32, -2145845045);
pub const BG_E_HTTP_ERROR_204 = @as(i32, -2145845044);
pub const BG_E_HTTP_ERROR_205 = @as(i32, -2145845043);
pub const BG_E_HTTP_ERROR_206 = @as(i32, -2145845042);
pub const BG_E_HTTP_ERROR_300 = @as(i32, -2145844948);
pub const BG_E_HTTP_ERROR_301 = @as(i32, -2145844947);
pub const BG_E_HTTP_ERROR_302 = @as(i32, -2145844946);
pub const BG_E_HTTP_ERROR_303 = @as(i32, -2145844945);
pub const BG_E_HTTP_ERROR_304 = @as(i32, -2145844944);
pub const BG_E_HTTP_ERROR_305 = @as(i32, -2145844943);
pub const BG_E_HTTP_ERROR_307 = @as(i32, -2145844941);
pub const BG_E_HTTP_ERROR_400 = @as(i32, -2145844848);
pub const BG_E_HTTP_ERROR_401 = @as(i32, -2145844847);
pub const BG_E_HTTP_ERROR_402 = @as(i32, -2145844846);
pub const BG_E_HTTP_ERROR_403 = @as(i32, -2145844845);
pub const BG_E_HTTP_ERROR_404 = @as(i32, -2145844844);
pub const BG_E_HTTP_ERROR_405 = @as(i32, -2145844843);
pub const BG_E_HTTP_ERROR_406 = @as(i32, -2145844842);
pub const BG_E_HTTP_ERROR_407 = @as(i32, -2145844841);
pub const BG_E_HTTP_ERROR_408 = @as(i32, -2145844840);
pub const BG_E_HTTP_ERROR_409 = @as(i32, -2145844839);
pub const BG_E_HTTP_ERROR_410 = @as(i32, -2145844838);
pub const BG_E_HTTP_ERROR_411 = @as(i32, -2145844837);
pub const BG_E_HTTP_ERROR_412 = @as(i32, -2145844836);
pub const BG_E_HTTP_ERROR_413 = @as(i32, -2145844835);
pub const BG_E_HTTP_ERROR_414 = @as(i32, -2145844834);
pub const BG_E_HTTP_ERROR_415 = @as(i32, -2145844833);
pub const BG_E_HTTP_ERROR_416 = @as(i32, -2145844832);
pub const BG_E_HTTP_ERROR_417 = @as(i32, -2145844831);
pub const BG_E_HTTP_ERROR_449 = @as(i32, -2145844799);
pub const BG_E_HTTP_ERROR_500 = @as(i32, -2145844748);
pub const BG_E_HTTP_ERROR_501 = @as(i32, -2145844747);
pub const BG_E_HTTP_ERROR_502 = @as(i32, -2145844746);
pub const BG_E_HTTP_ERROR_503 = @as(i32, -2145844745);
pub const BG_E_HTTP_ERROR_504 = @as(i32, -2145844744);
pub const BG_E_HTTP_ERROR_505 = @as(i32, -2145844743);
pub const BITS_MC_JOB_CANCELLED = @as(i32, -2145828864);
pub const BITS_MC_FILE_DELETION_FAILED = @as(i32, -2145828863);
pub const BITS_MC_FILE_DELETION_FAILED_MORE = @as(i32, -2145828862);
pub const BITS_MC_JOB_PROPERTY_CHANGE = @as(i32, -2145828861);
pub const BITS_MC_JOB_TAKE_OWNERSHIP = @as(i32, -2145828860);
pub const BITS_MC_JOB_SCAVENGED = @as(i32, -2145828859);
pub const BITS_MC_JOB_NOTIFICATION_FAILURE = @as(i32, -2145828858);
pub const BITS_MC_STATE_FILE_CORRUPT = @as(i32, -2145828857);
pub const BITS_MC_FAILED_TO_START = @as(i32, -2145828856);
pub const BITS_MC_FATAL_IGD_ERROR = @as(i32, -2145828855);
pub const BITS_MC_PEERCACHING_PORT = @as(i32, -2145828854);
pub const BITS_MC_WSD_PORT = @as(i32, -2145828853);

//--------------------------------------------------------------------------------
// Section: Types (74)
//--------------------------------------------------------------------------------
pub const BG_TOKEN = enum(u32) {
    LOCAL_FILE = 1,
    NETWORK = 2,
};
pub const BG_TOKEN_LOCAL_FILE = BG_TOKEN.LOCAL_FILE;
pub const BG_TOKEN_NETWORK = BG_TOKEN.NETWORK;

const CLSID_BackgroundCopyManager_Value = Guid.initString("4991d34b-80a1-4291-83b6-3328366b9097");
pub const CLSID_BackgroundCopyManager = &CLSID_BackgroundCopyManager_Value;

pub const BG_FILE_PROGRESS = extern struct {
    BytesTotal: u64,
    BytesTransferred: u64,
    Completed: BOOL,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBackgroundCopyFile_Value = Guid.initString("01b7bd23-fb88-4a77-8490-5891d3e4653a");
pub const IID_IBackgroundCopyFile = &IID_IBackgroundCopyFile_Value;
pub const IBackgroundCopyFile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRemoteName: *const fn (
            self: *const IBackgroundCopyFile,
            p_val: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalName: *const fn (
            self: *const IBackgroundCopyFile,
            p_val: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProgress: *const fn (
            self: *const IBackgroundCopyFile,
            p_val: ?*BG_FILE_PROGRESS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRemoteName(self: *const T, p_val_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyFile.VTable, @ptrCast(self.vtable)).GetRemoteName(@as(*const IBackgroundCopyFile, @ptrCast(self)), p_val_);
            }
            pub inline fn getLocalName(self: *const T, p_val_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyFile.VTable, @ptrCast(self.vtable)).GetLocalName(@as(*const IBackgroundCopyFile, @ptrCast(self)), p_val_);
            }
            pub inline fn getProgress(self: *const T, p_val_: ?*BG_FILE_PROGRESS) HRESULT {
                return @as(*const IBackgroundCopyFile.VTable, @ptrCast(self.vtable)).GetProgress(@as(*const IBackgroundCopyFile, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumBackgroundCopyFiles_Value = Guid.initString("ca51e165-c365-424c-8d41-24aaa4ff3c40");
pub const IID_IEnumBackgroundCopyFiles = &IID_IEnumBackgroundCopyFiles_Value;
pub const IEnumBackgroundCopyFiles = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumBackgroundCopyFiles,
            celt: u32,
            rgelt: ?*?*IBackgroundCopyFile,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumBackgroundCopyFiles,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumBackgroundCopyFiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumBackgroundCopyFiles,
            ppenum: ?*?*IEnumBackgroundCopyFiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IEnumBackgroundCopyFiles,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: ?*?*IBackgroundCopyFile, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumBackgroundCopyFiles.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumBackgroundCopyFiles, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumBackgroundCopyFiles.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumBackgroundCopyFiles, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumBackgroundCopyFiles.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumBackgroundCopyFiles, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumBackgroundCopyFiles) HRESULT {
                return @as(*const IEnumBackgroundCopyFiles.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumBackgroundCopyFiles, @ptrCast(self)), ppenum_);
            }
            pub inline fn getCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IEnumBackgroundCopyFiles.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IEnumBackgroundCopyFiles, @ptrCast(self)), pu_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const BG_ERROR_CONTEXT = enum(i32) {
    NONE = 0,
    UNKNOWN = 1,
    GENERAL_QUEUE_MANAGER = 2,
    QUEUE_MANAGER_NOTIFICATION = 3,
    LOCAL_FILE = 4,
    REMOTE_FILE = 5,
    GENERAL_TRANSPORT = 6,
    REMOTE_APPLICATION = 7,
    SERVER_CERTIFICATE_CALLBACK = 8,
};
pub const BG_ERROR_CONTEXT_NONE = BG_ERROR_CONTEXT.NONE;
pub const BG_ERROR_CONTEXT_UNKNOWN = BG_ERROR_CONTEXT.UNKNOWN;
pub const BG_ERROR_CONTEXT_GENERAL_QUEUE_MANAGER = BG_ERROR_CONTEXT.GENERAL_QUEUE_MANAGER;
pub const BG_ERROR_CONTEXT_QUEUE_MANAGER_NOTIFICATION = BG_ERROR_CONTEXT.QUEUE_MANAGER_NOTIFICATION;
pub const BG_ERROR_CONTEXT_LOCAL_FILE = BG_ERROR_CONTEXT.LOCAL_FILE;
pub const BG_ERROR_CONTEXT_REMOTE_FILE = BG_ERROR_CONTEXT.REMOTE_FILE;
pub const BG_ERROR_CONTEXT_GENERAL_TRANSPORT = BG_ERROR_CONTEXT.GENERAL_TRANSPORT;
pub const BG_ERROR_CONTEXT_REMOTE_APPLICATION = BG_ERROR_CONTEXT.REMOTE_APPLICATION;
pub const BG_ERROR_CONTEXT_SERVER_CERTIFICATE_CALLBACK = BG_ERROR_CONTEXT.SERVER_CERTIFICATE_CALLBACK;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBackgroundCopyError_Value = Guid.initString("19c613a0-fcb8-4f28-81ae-897c3d078f81");
pub const IID_IBackgroundCopyError = &IID_IBackgroundCopyError_Value;
pub const IBackgroundCopyError = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetError: *const fn (
            self: *const IBackgroundCopyError,
            p_context: ?*BG_ERROR_CONTEXT,
            p_code: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFile: *const fn (
            self: *const IBackgroundCopyError,
            p_val: ?*?*IBackgroundCopyFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorDescription: *const fn (
            self: *const IBackgroundCopyError,
            language_id: u32,
            p_error_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorContextDescription: *const fn (
            self: *const IBackgroundCopyError,
            language_id: u32,
            p_context_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProtocol: *const fn (
            self: *const IBackgroundCopyError,
            p_protocol: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getError(self: *const T, p_context_: ?*BG_ERROR_CONTEXT, p_code_: ?*HRESULT) HRESULT {
                return @as(*const IBackgroundCopyError.VTable, @ptrCast(self.vtable)).GetError(@as(*const IBackgroundCopyError, @ptrCast(self)), p_context_, p_code_);
            }
            pub inline fn getFile(self: *const T, p_val_: ?*?*IBackgroundCopyFile) HRESULT {
                return @as(*const IBackgroundCopyError.VTable, @ptrCast(self.vtable)).GetFile(@as(*const IBackgroundCopyError, @ptrCast(self)), p_val_);
            }
            pub inline fn getErrorDescription(self: *const T, language_id_: u32, p_error_description_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyError.VTable, @ptrCast(self.vtable)).GetErrorDescription(@as(*const IBackgroundCopyError, @ptrCast(self)), language_id_, p_error_description_);
            }
            pub inline fn getErrorContextDescription(self: *const T, language_id_: u32, p_context_description_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyError.VTable, @ptrCast(self.vtable)).GetErrorContextDescription(@as(*const IBackgroundCopyError, @ptrCast(self)), language_id_, p_context_description_);
            }
            pub inline fn getProtocol(self: *const T, p_protocol_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyError.VTable, @ptrCast(self.vtable)).GetProtocol(@as(*const IBackgroundCopyError, @ptrCast(self)), p_protocol_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const BG_FILE_INFO = extern struct {
    RemoteName: ?PWSTR,
    LocalName: ?PWSTR,
};

pub const BG_JOB_PROGRESS = extern struct {
    BytesTotal: u64,
    BytesTransferred: u64,
    FilesTotal: u32,
    FilesTransferred: u32,
};

pub const BG_JOB_TIMES = extern struct {
    CreationTime: FILETIME,
    ModificationTime: FILETIME,
    TransferCompletionTime: FILETIME,
};

pub const BG_JOB_PRIORITY = enum(i32) {
    FOREGROUND = 0,
    HIGH = 1,
    NORMAL = 2,
    LOW = 3,
};
pub const BG_JOB_PRIORITY_FOREGROUND = BG_JOB_PRIORITY.FOREGROUND;
pub const BG_JOB_PRIORITY_HIGH = BG_JOB_PRIORITY.HIGH;
pub const BG_JOB_PRIORITY_NORMAL = BG_JOB_PRIORITY.NORMAL;
pub const BG_JOB_PRIORITY_LOW = BG_JOB_PRIORITY.LOW;

pub const BG_JOB_STATE = enum(i32) {
    QUEUED = 0,
    CONNECTING = 1,
    TRANSFERRING = 2,
    SUSPENDED = 3,
    ERROR = 4,
    TRANSIENT_ERROR = 5,
    TRANSFERRED = 6,
    ACKNOWLEDGED = 7,
    CANCELLED = 8,
};
pub const BG_JOB_STATE_QUEUED = BG_JOB_STATE.QUEUED;
pub const BG_JOB_STATE_CONNECTING = BG_JOB_STATE.CONNECTING;
pub const BG_JOB_STATE_TRANSFERRING = BG_JOB_STATE.TRANSFERRING;
pub const BG_JOB_STATE_SUSPENDED = BG_JOB_STATE.SUSPENDED;
pub const BG_JOB_STATE_ERROR = BG_JOB_STATE.ERROR;
pub const BG_JOB_STATE_TRANSIENT_ERROR = BG_JOB_STATE.TRANSIENT_ERROR;
pub const BG_JOB_STATE_TRANSFERRED = BG_JOB_STATE.TRANSFERRED;
pub const BG_JOB_STATE_ACKNOWLEDGED = BG_JOB_STATE.ACKNOWLEDGED;
pub const BG_JOB_STATE_CANCELLED = BG_JOB_STATE.CANCELLED;

pub const BG_JOB_TYPE = enum(i32) {
    DOWNLOAD = 0,
    UPLOAD = 1,
    UPLOAD_REPLY = 2,
};
pub const BG_JOB_TYPE_DOWNLOAD = BG_JOB_TYPE.DOWNLOAD;
pub const BG_JOB_TYPE_UPLOAD = BG_JOB_TYPE.UPLOAD;
pub const BG_JOB_TYPE_UPLOAD_REPLY = BG_JOB_TYPE.UPLOAD_REPLY;

pub const BG_JOB_PROXY_USAGE = enum(i32) {
    PRECONFIG = 0,
    NO_PROXY = 1,
    OVERRIDE = 2,
    AUTODETECT = 3,
};
pub const BG_JOB_PROXY_USAGE_PRECONFIG = BG_JOB_PROXY_USAGE.PRECONFIG;
pub const BG_JOB_PROXY_USAGE_NO_PROXY = BG_JOB_PROXY_USAGE.NO_PROXY;
pub const BG_JOB_PROXY_USAGE_OVERRIDE = BG_JOB_PROXY_USAGE.OVERRIDE;
pub const BG_JOB_PROXY_USAGE_AUTODETECT = BG_JOB_PROXY_USAGE.AUTODETECT;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBackgroundCopyJob_Value = Guid.initString("37668d37-507e-4160-9316-26306d150b12");
pub const IID_IBackgroundCopyJob = &IID_IBackgroundCopyJob_Value;
pub const IBackgroundCopyJob = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddFileSet: *const fn (
            self: *const IBackgroundCopyJob,
            c_file_count: u32,
            p_file_set: [*]BG_FILE_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFile: *const fn (
            self: *const IBackgroundCopyJob,
            remote_url: ?[*:0]const u16,
            local_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumFiles: *const fn (
            self: *const IBackgroundCopyJob,
            p_enum: ?*?*IEnumBackgroundCopyFiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: *const fn (
            self: *const IBackgroundCopyJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IBackgroundCopyJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IBackgroundCopyJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Complete: *const fn (
            self: *const IBackgroundCopyJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetId: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*BG_JOB_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProgress: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*BG_JOB_PROGRESS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimes: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*BG_JOB_TIMES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetState: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*BG_JOB_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetError: *const fn (
            self: *const IBackgroundCopyJob,
            pp_error: ?*?*IBackgroundCopyError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOwner: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDisplayName: *const fn (
            self: *const IBackgroundCopyJob,
            val: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: *const fn (
            self: *const IBackgroundCopyJob,
            val: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPriority: *const fn (
            self: *const IBackgroundCopyJob,
            val: BG_JOB_PRIORITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPriority: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*BG_JOB_PRIORITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNotifyFlags: *const fn (
            self: *const IBackgroundCopyJob,
            val: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNotifyFlags: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNotifyInterface: *const fn (
            self: *const IBackgroundCopyJob,
            val: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNotifyInterface: *const fn (
            self: *const IBackgroundCopyJob,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMinimumRetryDelay: *const fn (
            self: *const IBackgroundCopyJob,
            seconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMinimumRetryDelay: *const fn (
            self: *const IBackgroundCopyJob,
            seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoProgressTimeout: *const fn (
            self: *const IBackgroundCopyJob,
            seconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNoProgressTimeout: *const fn (
            self: *const IBackgroundCopyJob,
            seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorCount: *const fn (
            self: *const IBackgroundCopyJob,
            errors: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxySettings: *const fn (
            self: *const IBackgroundCopyJob,
            proxy_usage: BG_JOB_PROXY_USAGE,
            proxy_list: ?[*:0]const u16,
            proxy_bypass_list: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxySettings: *const fn (
            self: *const IBackgroundCopyJob,
            p_proxy_usage: ?*BG_JOB_PROXY_USAGE,
            p_proxy_list: ?*?PWSTR,
            p_proxy_bypass_list: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TakeOwnership: *const fn (
            self: *const IBackgroundCopyJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addFileSet(self: *const T, c_file_count_: u32, p_file_set_: [*]BG_FILE_INFO) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).AddFileSet(@as(*const IBackgroundCopyJob, @ptrCast(self)), c_file_count_, p_file_set_);
            }
            pub inline fn addFile(self: *const T, remote_url_: ?[*:0]const u16, local_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).AddFile(@as(*const IBackgroundCopyJob, @ptrCast(self)), remote_url_, local_name_);
            }
            pub inline fn enumFiles(self: *const T, p_enum_: ?*?*IEnumBackgroundCopyFiles) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).EnumFiles(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_enum_);
            }
            pub inline fn @"suspend"(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).Suspend(@as(*const IBackgroundCopyJob, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).Resume(@as(*const IBackgroundCopyJob, @ptrCast(self)));
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IBackgroundCopyJob, @ptrCast(self)));
            }
            pub inline fn complete(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).Complete(@as(*const IBackgroundCopyJob, @ptrCast(self)));
            }
            pub inline fn getId(self: *const T, p_val_: ?*Guid) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetId(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn getType(self: *const T, p_val_: ?*BG_JOB_TYPE) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetType(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn getProgress(self: *const T, p_val_: ?*BG_JOB_PROGRESS) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetProgress(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn getTimes(self: *const T, p_val_: ?*BG_JOB_TIMES) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetTimes(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn getState(self: *const T, p_val_: ?*BG_JOB_STATE) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetState(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn getError(self: *const T, pp_error_: ?*?*IBackgroundCopyError) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetError(@as(*const IBackgroundCopyJob, @ptrCast(self)), pp_error_);
            }
            pub inline fn getOwner(self: *const T, p_val_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn setDisplayName(self: *const T, val_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).SetDisplayName(@as(*const IBackgroundCopyJob, @ptrCast(self)), val_);
            }
            pub inline fn getDisplayName(self: *const T, p_val_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetDisplayName(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn setDescription(self: *const T, val_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).SetDescription(@as(*const IBackgroundCopyJob, @ptrCast(self)), val_);
            }
            pub inline fn getDescription(self: *const T, p_val_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn setPriority(self: *const T, val_: BG_JOB_PRIORITY) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).SetPriority(@as(*const IBackgroundCopyJob, @ptrCast(self)), val_);
            }
            pub inline fn getPriority(self: *const T, p_val_: ?*BG_JOB_PRIORITY) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetPriority(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn setNotifyFlags(self: *const T, val_: u32) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).SetNotifyFlags(@as(*const IBackgroundCopyJob, @ptrCast(self)), val_);
            }
            pub inline fn getNotifyFlags(self: *const T, p_val_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetNotifyFlags(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn setNotifyInterface(self: *const T, val_: ?*IUnknown) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).SetNotifyInterface(@as(*const IBackgroundCopyJob, @ptrCast(self)), val_);
            }
            pub inline fn getNotifyInterface(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetNotifyInterface(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_val_);
            }
            pub inline fn setMinimumRetryDelay(self: *const T, seconds_: u32) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).SetMinimumRetryDelay(@as(*const IBackgroundCopyJob, @ptrCast(self)), seconds_);
            }
            pub inline fn getMinimumRetryDelay(self: *const T, seconds_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetMinimumRetryDelay(@as(*const IBackgroundCopyJob, @ptrCast(self)), seconds_);
            }
            pub inline fn setNoProgressTimeout(self: *const T, seconds_: u32) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).SetNoProgressTimeout(@as(*const IBackgroundCopyJob, @ptrCast(self)), seconds_);
            }
            pub inline fn getNoProgressTimeout(self: *const T, seconds_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetNoProgressTimeout(@as(*const IBackgroundCopyJob, @ptrCast(self)), seconds_);
            }
            pub inline fn getErrorCount(self: *const T, errors_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetErrorCount(@as(*const IBackgroundCopyJob, @ptrCast(self)), errors_);
            }
            pub inline fn setProxySettings(self: *const T, proxy_usage_: BG_JOB_PROXY_USAGE, proxy_list_: ?[*:0]const u16, proxy_bypass_list_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).SetProxySettings(@as(*const IBackgroundCopyJob, @ptrCast(self)), proxy_usage_, proxy_list_, proxy_bypass_list_);
            }
            pub inline fn getProxySettings(self: *const T, p_proxy_usage_: ?*BG_JOB_PROXY_USAGE, p_proxy_list_: ?*?PWSTR, p_proxy_bypass_list_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).GetProxySettings(@as(*const IBackgroundCopyJob, @ptrCast(self)), p_proxy_usage_, p_proxy_list_, p_proxy_bypass_list_);
            }
            pub inline fn takeOwnership(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyJob.VTable, @ptrCast(self.vtable)).TakeOwnership(@as(*const IBackgroundCopyJob, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumBackgroundCopyJobs_Value = Guid.initString("1af4f612-3b71-466f-8f58-7b6f73ac57ad");
pub const IID_IEnumBackgroundCopyJobs = &IID_IEnumBackgroundCopyJobs_Value;
pub const IEnumBackgroundCopyJobs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumBackgroundCopyJobs,
            celt: u32,
            rgelt: ?*?*IBackgroundCopyJob,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumBackgroundCopyJobs,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumBackgroundCopyJobs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumBackgroundCopyJobs,
            ppenum: ?*?*IEnumBackgroundCopyJobs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IEnumBackgroundCopyJobs,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: ?*?*IBackgroundCopyJob, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumBackgroundCopyJobs, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumBackgroundCopyJobs, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumBackgroundCopyJobs, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumBackgroundCopyJobs) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumBackgroundCopyJobs, @ptrCast(self)), ppenum_);
            }
            pub inline fn getCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IEnumBackgroundCopyJobs, @ptrCast(self)), pu_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBackgroundCopyCallback_Value = Guid.initString("97ea99c7-0186-4ad4-8df9-c5b4e0ed6b22");
pub const IID_IBackgroundCopyCallback = &IID_IBackgroundCopyCallback_Value;
pub const IBackgroundCopyCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        JobTransferred: *const fn (
            self: *const IBackgroundCopyCallback,
            p_job: ?*IBackgroundCopyJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        JobError: *const fn (
            self: *const IBackgroundCopyCallback,
            p_job: ?*IBackgroundCopyJob,
            p_error: ?*IBackgroundCopyError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        JobModification: *const fn (
            self: *const IBackgroundCopyCallback,
            p_job: ?*IBackgroundCopyJob,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn jobTransferred(self: *const T, p_job_: ?*IBackgroundCopyJob) HRESULT {
                return @as(*const IBackgroundCopyCallback.VTable, @ptrCast(self.vtable)).JobTransferred(@as(*const IBackgroundCopyCallback, @ptrCast(self)), p_job_);
            }
            pub inline fn jobError(self: *const T, p_job_: ?*IBackgroundCopyJob, p_error_: ?*IBackgroundCopyError) HRESULT {
                return @as(*const IBackgroundCopyCallback.VTable, @ptrCast(self.vtable)).JobError(@as(*const IBackgroundCopyCallback, @ptrCast(self)), p_job_, p_error_);
            }
            pub inline fn jobModification(self: *const T, p_job_: ?*IBackgroundCopyJob, dw_reserved_: u32) HRESULT {
                return @as(*const IBackgroundCopyCallback.VTable, @ptrCast(self.vtable)).JobModification(@as(*const IBackgroundCopyCallback, @ptrCast(self)), p_job_, dw_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIBackgroundCopyCallback_Value = Guid.initString("ca29d251-b4bb-4679-a3d9-ae8006119d54");
pub const IID_AsyncIBackgroundCopyCallback = &IID_AsyncIBackgroundCopyCallback_Value;
pub const AsyncIBackgroundCopyCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_JobTransferred: *const fn (
            self: *const AsyncIBackgroundCopyCallback,
            p_job: ?*IBackgroundCopyJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_JobTransferred: *const fn (
            self: *const AsyncIBackgroundCopyCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_JobError: *const fn (
            self: *const AsyncIBackgroundCopyCallback,
            p_job: ?*IBackgroundCopyJob,
            p_error: ?*IBackgroundCopyError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_JobError: *const fn (
            self: *const AsyncIBackgroundCopyCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_JobModification: *const fn (
            self: *const AsyncIBackgroundCopyCallback,
            p_job: ?*IBackgroundCopyJob,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_JobModification: *const fn (
            self: *const AsyncIBackgroundCopyCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginJobTransferred(self: *const T, p_job_: ?*IBackgroundCopyJob) HRESULT {
                return @as(*const AsyncIBackgroundCopyCallback.VTable, @ptrCast(self.vtable)).Begin_JobTransferred(@as(*const AsyncIBackgroundCopyCallback, @ptrCast(self)), p_job_);
            }
            pub inline fn finishJobTransferred(self: *const T) HRESULT {
                return @as(*const AsyncIBackgroundCopyCallback.VTable, @ptrCast(self.vtable)).Finish_JobTransferred(@as(*const AsyncIBackgroundCopyCallback, @ptrCast(self)));
            }
            pub inline fn beginJobError(self: *const T, p_job_: ?*IBackgroundCopyJob, p_error_: ?*IBackgroundCopyError) HRESULT {
                return @as(*const AsyncIBackgroundCopyCallback.VTable, @ptrCast(self.vtable)).Begin_JobError(@as(*const AsyncIBackgroundCopyCallback, @ptrCast(self)), p_job_, p_error_);
            }
            pub inline fn finishJobError(self: *const T) HRESULT {
                return @as(*const AsyncIBackgroundCopyCallback.VTable, @ptrCast(self.vtable)).Finish_JobError(@as(*const AsyncIBackgroundCopyCallback, @ptrCast(self)));
            }
            pub inline fn beginJobModification(self: *const T, p_job_: ?*IBackgroundCopyJob, dw_reserved_: u32) HRESULT {
                return @as(*const AsyncIBackgroundCopyCallback.VTable, @ptrCast(self.vtable)).Begin_JobModification(@as(*const AsyncIBackgroundCopyCallback, @ptrCast(self)), p_job_, dw_reserved_);
            }
            pub inline fn finishJobModification(self: *const T) HRESULT {
                return @as(*const AsyncIBackgroundCopyCallback.VTable, @ptrCast(self.vtable)).Finish_JobModification(@as(*const AsyncIBackgroundCopyCallback, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBackgroundCopyManager_Value = Guid.initString("5ce34c0d-0dc9-4c1f-897c-daa1b78cee7c");
pub const IID_IBackgroundCopyManager = &IID_IBackgroundCopyManager_Value;
pub const IBackgroundCopyManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateJob: *const fn (
            self: *const IBackgroundCopyManager,
            display_name: ?[*:0]const u16,
            type: BG_JOB_TYPE,
            p_job_id: ?*Guid,
            pp_job: ?*?*IBackgroundCopyJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJob: *const fn (
            self: *const IBackgroundCopyManager,
            job_i_d: ?*const Guid,
            pp_job: ?*?*IBackgroundCopyJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumJobs: *const fn (
            self: *const IBackgroundCopyManager,
            dw_flags: u32,
            pp_enum: ?*?*IEnumBackgroundCopyJobs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorDescription: *const fn (
            self: *const IBackgroundCopyManager,
            h_result: HRESULT,
            language_id: u32,
            p_error_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createJob(self: *const T, display_name_: ?[*:0]const u16, type_: BG_JOB_TYPE, p_job_id_: ?*Guid, pp_job_: ?*?*IBackgroundCopyJob) HRESULT {
                return @as(*const IBackgroundCopyManager.VTable, @ptrCast(self.vtable)).CreateJob(@as(*const IBackgroundCopyManager, @ptrCast(self)), display_name_, type_, p_job_id_, pp_job_);
            }
            pub inline fn getJob(self: *const T, job_i_d_: ?*const Guid, pp_job_: ?*?*IBackgroundCopyJob) HRESULT {
                return @as(*const IBackgroundCopyManager.VTable, @ptrCast(self.vtable)).GetJob(@as(*const IBackgroundCopyManager, @ptrCast(self)), job_i_d_, pp_job_);
            }
            pub inline fn enumJobs(self: *const T, dw_flags_: u32, pp_enum_: ?*?*IEnumBackgroundCopyJobs) HRESULT {
                return @as(*const IBackgroundCopyManager.VTable, @ptrCast(self.vtable)).EnumJobs(@as(*const IBackgroundCopyManager, @ptrCast(self)), dw_flags_, pp_enum_);
            }
            pub inline fn getErrorDescription(self: *const T, h_result_: HRESULT, language_id_: u32, p_error_description_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyManager.VTable, @ptrCast(self.vtable)).GetErrorDescription(@as(*const IBackgroundCopyManager, @ptrCast(self)), h_result_, language_id_, p_error_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyManager1_5_Value = Guid.initString("f087771f-d74f-4c1a-bb8a-e16aca9124ea");
pub const CLSID_BackgroundCopyManager1_5 = &CLSID_BackgroundCopyManager1_5_Value;

pub const BG_JOB_REPLY_PROGRESS = extern struct {
    BytesTotal: u64,
    BytesTransferred: u64,
};

pub const BG_AUTH_TARGET = enum(i32) {
    SERVER = 1,
    PROXY = 2,
};
pub const BG_AUTH_TARGET_SERVER = BG_AUTH_TARGET.SERVER;
pub const BG_AUTH_TARGET_PROXY = BG_AUTH_TARGET.PROXY;

pub const BG_AUTH_SCHEME = enum(i32) {
    BASIC = 1,
    DIGEST = 2,
    NTLM = 3,
    NEGOTIATE = 4,
    PASSPORT = 5,
};
pub const BG_AUTH_SCHEME_BASIC = BG_AUTH_SCHEME.BASIC;
pub const BG_AUTH_SCHEME_DIGEST = BG_AUTH_SCHEME.DIGEST;
pub const BG_AUTH_SCHEME_NTLM = BG_AUTH_SCHEME.NTLM;
pub const BG_AUTH_SCHEME_NEGOTIATE = BG_AUTH_SCHEME.NEGOTIATE;
pub const BG_AUTH_SCHEME_PASSPORT = BG_AUTH_SCHEME.PASSPORT;

pub const BG_BASIC_CREDENTIALS = extern struct {
    UserName: ?PWSTR,
    Password: ?PWSTR,
};

pub const BG_AUTH_CREDENTIALS_UNION = extern union {
    Basic: BG_BASIC_CREDENTIALS,
};

pub const BG_AUTH_CREDENTIALS = extern struct {
    Target: BG_AUTH_TARGET,
    Scheme: BG_AUTH_SCHEME,
    Credentials: BG_AUTH_CREDENTIALS_UNION,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBackgroundCopyJob2_Value = Guid.initString("54b50739-686f-45eb-9dff-d6a9a0faa9af");
pub const IID_IBackgroundCopyJob2 = &IID_IBackgroundCopyJob2_Value;
pub const IBackgroundCopyJob2 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyJob.VTable,
        SetNotifyCmdLine: *const fn (
            self: *const IBackgroundCopyJob2,
            program: ?[*:0]const u16,
            parameters: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNotifyCmdLine: *const fn (
            self: *const IBackgroundCopyJob2,
            p_program: ?*?PWSTR,
            p_parameters: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReplyProgress: *const fn (
            self: *const IBackgroundCopyJob2,
            p_progress: ?*BG_JOB_REPLY_PROGRESS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReplyData: *const fn (
            self: *const IBackgroundCopyJob2,
            pp_buffer: ?*?*u8,
            p_length: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReplyFileName: *const fn (
            self: *const IBackgroundCopyJob2,
            reply_file_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReplyFileName: *const fn (
            self: *const IBackgroundCopyJob2,
            p_reply_file_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentials: *const fn (
            self: *const IBackgroundCopyJob2,
            credentials: ?*BG_AUTH_CREDENTIALS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveCredentials: *const fn (
            self: *const IBackgroundCopyJob2,
            target: BG_AUTH_TARGET,
            scheme: BG_AUTH_SCHEME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyJob.MethodMixin(T);
            pub inline fn setNotifyCmdLine(self: *const T, program_: ?[*:0]const u16, parameters_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJob2.VTable, @ptrCast(self.vtable)).SetNotifyCmdLine(@as(*const IBackgroundCopyJob2, @ptrCast(self)), program_, parameters_);
            }
            pub inline fn getNotifyCmdLine(self: *const T, p_program_: ?*?PWSTR, p_parameters_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyJob2.VTable, @ptrCast(self.vtable)).GetNotifyCmdLine(@as(*const IBackgroundCopyJob2, @ptrCast(self)), p_program_, p_parameters_);
            }
            pub inline fn getReplyProgress(self: *const T, p_progress_: ?*BG_JOB_REPLY_PROGRESS) HRESULT {
                return @as(*const IBackgroundCopyJob2.VTable, @ptrCast(self.vtable)).GetReplyProgress(@as(*const IBackgroundCopyJob2, @ptrCast(self)), p_progress_);
            }
            pub inline fn getReplyData(self: *const T, pp_buffer_: ?*?*u8, p_length_: ?*u64) HRESULT {
                return @as(*const IBackgroundCopyJob2.VTable, @ptrCast(self.vtable)).GetReplyData(@as(*const IBackgroundCopyJob2, @ptrCast(self)), pp_buffer_, p_length_);
            }
            pub inline fn setReplyFileName(self: *const T, reply_file_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJob2.VTable, @ptrCast(self.vtable)).SetReplyFileName(@as(*const IBackgroundCopyJob2, @ptrCast(self)), reply_file_name_);
            }
            pub inline fn getReplyFileName(self: *const T, p_reply_file_name_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyJob2.VTable, @ptrCast(self.vtable)).GetReplyFileName(@as(*const IBackgroundCopyJob2, @ptrCast(self)), p_reply_file_name_);
            }
            pub inline fn setCredentials(self: *const T, credentials_: ?*BG_AUTH_CREDENTIALS) HRESULT {
                return @as(*const IBackgroundCopyJob2.VTable, @ptrCast(self.vtable)).SetCredentials(@as(*const IBackgroundCopyJob2, @ptrCast(self)), credentials_);
            }
            pub inline fn removeCredentials(self: *const T, target_: BG_AUTH_TARGET, scheme_: BG_AUTH_SCHEME) HRESULT {
                return @as(*const IBackgroundCopyJob2.VTable, @ptrCast(self.vtable)).RemoveCredentials(@as(*const IBackgroundCopyJob2, @ptrCast(self)), target_, scheme_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyManager2_0_Value = Guid.initString("6d18ad12-bde3-4393-b311-099c346e6df9");
pub const CLSID_BackgroundCopyManager2_0 = &CLSID_BackgroundCopyManager2_0_Value;

pub const BG_FILE_RANGE = extern struct {
    InitialOffset: u64,
    Length: u64,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBackgroundCopyJob3_Value = Guid.initString("443c8934-90ff-48ed-bcde-26f5c7450042");
pub const IID_IBackgroundCopyJob3 = &IID_IBackgroundCopyJob3_Value;
pub const IBackgroundCopyJob3 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyJob2.VTable,
        ReplaceRemotePrefix: *const fn (
            self: *const IBackgroundCopyJob3,
            old_prefix: ?[*:0]const u16,
            new_prefix: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFileWithRanges: *const fn (
            self: *const IBackgroundCopyJob3,
            remote_url: ?[*:0]const u16,
            local_name: ?[*:0]const u16,
            range_count: u32,
            ranges: [*]BG_FILE_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileACLFlags: *const fn (
            self: *const IBackgroundCopyJob3,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileACLFlags: *const fn (
            self: *const IBackgroundCopyJob3,
            flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyJob2.MethodMixin(T);
            pub inline fn replaceRemotePrefix(self: *const T, old_prefix_: ?[*:0]const u16, new_prefix_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJob3.VTable, @ptrCast(self.vtable)).ReplaceRemotePrefix(@as(*const IBackgroundCopyJob3, @ptrCast(self)), old_prefix_, new_prefix_);
            }
            pub inline fn addFileWithRanges(self: *const T, remote_url_: ?[*:0]const u16, local_name_: ?[*:0]const u16, range_count_: u32, ranges_: [*]BG_FILE_RANGE) HRESULT {
                return @as(*const IBackgroundCopyJob3.VTable, @ptrCast(self.vtable)).AddFileWithRanges(@as(*const IBackgroundCopyJob3, @ptrCast(self)), remote_url_, local_name_, range_count_, ranges_);
            }
            pub inline fn setFileACLFlags(self: *const T, flags_: u32) HRESULT {
                return @as(*const IBackgroundCopyJob3.VTable, @ptrCast(self.vtable)).SetFileACLFlags(@as(*const IBackgroundCopyJob3, @ptrCast(self)), flags_);
            }
            pub inline fn getFileACLFlags(self: *const T, flags_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob3.VTable, @ptrCast(self.vtable)).GetFileACLFlags(@as(*const IBackgroundCopyJob3, @ptrCast(self)), flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBackgroundCopyFile2_Value = Guid.initString("83e81b93-0873-474d-8a8c-f2018b1a939c");
pub const IID_IBackgroundCopyFile2 = &IID_IBackgroundCopyFile2_Value;
pub const IBackgroundCopyFile2 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyFile.VTable,
        GetFileRanges: *const fn (
            self: *const IBackgroundCopyFile2,
            range_count: ?*u32,
            ranges: [*]?*BG_FILE_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRemoteName: *const fn (
            self: *const IBackgroundCopyFile2,
            val: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyFile.MethodMixin(T);
            pub inline fn getFileRanges(self: *const T, range_count_: ?*u32, ranges_: [*]?*BG_FILE_RANGE) HRESULT {
                return @as(*const IBackgroundCopyFile2.VTable, @ptrCast(self.vtable)).GetFileRanges(@as(*const IBackgroundCopyFile2, @ptrCast(self)), range_count_, ranges_);
            }
            pub inline fn setRemoteName(self: *const T, val_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyFile2.VTable, @ptrCast(self.vtable)).SetRemoteName(@as(*const IBackgroundCopyFile2, @ptrCast(self)), val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyManager2_5_Value = Guid.initString("03ca98d6-ff5d-49b8-abc6-03dd84127020");
pub const CLSID_BackgroundCopyManager2_5 = &CLSID_BackgroundCopyManager2_5_Value;

pub const BG_CERT_STORE_LOCATION = enum(i32) {
    CURRENT_USER = 0,
    LOCAL_MACHINE = 1,
    CURRENT_SERVICE = 2,
    SERVICES = 3,
    USERS = 4,
    CURRENT_USER_GROUP_POLICY = 5,
    LOCAL_MACHINE_GROUP_POLICY = 6,
    LOCAL_MACHINE_ENTERPRISE = 7,
};
pub const BG_CERT_STORE_LOCATION_CURRENT_USER = BG_CERT_STORE_LOCATION.CURRENT_USER;
pub const BG_CERT_STORE_LOCATION_LOCAL_MACHINE = BG_CERT_STORE_LOCATION.LOCAL_MACHINE;
pub const BG_CERT_STORE_LOCATION_CURRENT_SERVICE = BG_CERT_STORE_LOCATION.CURRENT_SERVICE;
pub const BG_CERT_STORE_LOCATION_SERVICES = BG_CERT_STORE_LOCATION.SERVICES;
pub const BG_CERT_STORE_LOCATION_USERS = BG_CERT_STORE_LOCATION.USERS;
pub const BG_CERT_STORE_LOCATION_CURRENT_USER_GROUP_POLICY = BG_CERT_STORE_LOCATION.CURRENT_USER_GROUP_POLICY;
pub const BG_CERT_STORE_LOCATION_LOCAL_MACHINE_GROUP_POLICY = BG_CERT_STORE_LOCATION.LOCAL_MACHINE_GROUP_POLICY;
pub const BG_CERT_STORE_LOCATION_LOCAL_MACHINE_ENTERPRISE = BG_CERT_STORE_LOCATION.LOCAL_MACHINE_ENTERPRISE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBackgroundCopyJobHttpOptions_Value = Guid.initString("f1bd1079-9f01-4bdc-8036-f09b70095066");
pub const IID_IBackgroundCopyJobHttpOptions = &IID_IBackgroundCopyJobHttpOptions_Value;
pub const IBackgroundCopyJobHttpOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetClientCertificateByID: *const fn (
            self: *const IBackgroundCopyJobHttpOptions,
            store_location: BG_CERT_STORE_LOCATION,
            store_name: ?[*:0]const u16,
            p_cert_hash_blob: *[20]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientCertificateByName: *const fn (
            self: *const IBackgroundCopyJobHttpOptions,
            store_location: BG_CERT_STORE_LOCATION,
            store_name: ?[*:0]const u16,
            subject_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveClientCertificate: *const fn (
            self: *const IBackgroundCopyJobHttpOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientCertificate: *const fn (
            self: *const IBackgroundCopyJobHttpOptions,
            p_store_location: ?*BG_CERT_STORE_LOCATION,
            p_store_name: ?*?PWSTR,
            pp_cert_hash_blob: *[20]?*u8,
            p_subject_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCustomHeaders: *const fn (
            self: *const IBackgroundCopyJobHttpOptions,
            request_headers: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomHeaders: *const fn (
            self: *const IBackgroundCopyJobHttpOptions,
            p_request_headers: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityFlags: *const fn (
            self: *const IBackgroundCopyJobHttpOptions,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityFlags: *const fn (
            self: *const IBackgroundCopyJobHttpOptions,
            p_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setClientCertificateByID(self: *const T, store_location_: BG_CERT_STORE_LOCATION, store_name_: ?[*:0]const u16, p_cert_hash_blob_: *[20]u8) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions.VTable, @ptrCast(self.vtable)).SetClientCertificateByID(@as(*const IBackgroundCopyJobHttpOptions, @ptrCast(self)), store_location_, store_name_, p_cert_hash_blob_);
            }
            pub inline fn setClientCertificateByName(self: *const T, store_location_: BG_CERT_STORE_LOCATION, store_name_: ?[*:0]const u16, subject_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions.VTable, @ptrCast(self.vtable)).SetClientCertificateByName(@as(*const IBackgroundCopyJobHttpOptions, @ptrCast(self)), store_location_, store_name_, subject_name_);
            }
            pub inline fn removeClientCertificate(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions.VTable, @ptrCast(self.vtable)).RemoveClientCertificate(@as(*const IBackgroundCopyJobHttpOptions, @ptrCast(self)));
            }
            pub inline fn getClientCertificate(self: *const T, p_store_location_: ?*BG_CERT_STORE_LOCATION, p_store_name_: ?*?PWSTR, pp_cert_hash_blob_: *[20]?*u8, p_subject_name_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions.VTable, @ptrCast(self.vtable)).GetClientCertificate(@as(*const IBackgroundCopyJobHttpOptions, @ptrCast(self)), p_store_location_, p_store_name_, pp_cert_hash_blob_, p_subject_name_);
            }
            pub inline fn setCustomHeaders(self: *const T, request_headers_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions.VTable, @ptrCast(self.vtable)).SetCustomHeaders(@as(*const IBackgroundCopyJobHttpOptions, @ptrCast(self)), request_headers_);
            }
            pub inline fn getCustomHeaders(self: *const T, p_request_headers_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions.VTable, @ptrCast(self.vtable)).GetCustomHeaders(@as(*const IBackgroundCopyJobHttpOptions, @ptrCast(self)), p_request_headers_);
            }
            pub inline fn setSecurityFlags(self: *const T, flags_: u32) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions.VTable, @ptrCast(self.vtable)).SetSecurityFlags(@as(*const IBackgroundCopyJobHttpOptions, @ptrCast(self)), flags_);
            }
            pub inline fn getSecurityFlags(self: *const T, p_flags_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions.VTable, @ptrCast(self.vtable)).GetSecurityFlags(@as(*const IBackgroundCopyJobHttpOptions, @ptrCast(self)), p_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyManager3_0_Value = Guid.initString("659cdea7-489e-11d9-a9cd-000d56965251");
pub const CLSID_BackgroundCopyManager3_0 = &CLSID_BackgroundCopyManager3_0_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBitsPeerCacheRecord_Value = Guid.initString("659cdeaf-489e-11d9-a9cd-000d56965251");
pub const IID_IBitsPeerCacheRecord = &IID_IBitsPeerCacheRecord_Value;
pub const IBitsPeerCacheRecord = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetId: *const fn (
            self: *const IBitsPeerCacheRecord,
            p_val: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginUrl: *const fn (
            self: *const IBitsPeerCacheRecord,
            p_val: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSize: *const fn (
            self: *const IBitsPeerCacheRecord,
            p_val: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileModificationTime: *const fn (
            self: *const IBitsPeerCacheRecord,
            p_val: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastAccessTime: *const fn (
            self: *const IBitsPeerCacheRecord,
            p_val: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsFileValidated: *const fn (
            self: *const IBitsPeerCacheRecord,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileRanges: *const fn (
            self: *const IBitsPeerCacheRecord,
            p_range_count: ?*u32,
            pp_ranges: [*]?*BG_FILE_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getId(self: *const T, p_val_: ?*Guid) HRESULT {
                return @as(*const IBitsPeerCacheRecord.VTable, @ptrCast(self.vtable)).GetId(@as(*const IBitsPeerCacheRecord, @ptrCast(self)), p_val_);
            }
            pub inline fn getOriginUrl(self: *const T, p_val_: ?*?PWSTR) HRESULT {
                return @as(*const IBitsPeerCacheRecord.VTable, @ptrCast(self.vtable)).GetOriginUrl(@as(*const IBitsPeerCacheRecord, @ptrCast(self)), p_val_);
            }
            pub inline fn getFileSize(self: *const T, p_val_: ?*u64) HRESULT {
                return @as(*const IBitsPeerCacheRecord.VTable, @ptrCast(self.vtable)).GetFileSize(@as(*const IBitsPeerCacheRecord, @ptrCast(self)), p_val_);
            }
            pub inline fn getFileModificationTime(self: *const T, p_val_: ?*FILETIME) HRESULT {
                return @as(*const IBitsPeerCacheRecord.VTable, @ptrCast(self.vtable)).GetFileModificationTime(@as(*const IBitsPeerCacheRecord, @ptrCast(self)), p_val_);
            }
            pub inline fn getLastAccessTime(self: *const T, p_val_: ?*FILETIME) HRESULT {
                return @as(*const IBitsPeerCacheRecord.VTable, @ptrCast(self.vtable)).GetLastAccessTime(@as(*const IBitsPeerCacheRecord, @ptrCast(self)), p_val_);
            }
            pub inline fn isFileValidated(self: *const T) HRESULT {
                return @as(*const IBitsPeerCacheRecord.VTable, @ptrCast(self.vtable)).IsFileValidated(@as(*const IBitsPeerCacheRecord, @ptrCast(self)));
            }
            pub inline fn getFileRanges(self: *const T, p_range_count_: ?*u32, pp_ranges_: [*]?*BG_FILE_RANGE) HRESULT {
                return @as(*const IBitsPeerCacheRecord.VTable, @ptrCast(self.vtable)).GetFileRanges(@as(*const IBitsPeerCacheRecord, @ptrCast(self)), p_range_count_, pp_ranges_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumBitsPeerCacheRecords_Value = Guid.initString("659cdea4-489e-11d9-a9cd-000d56965251");
pub const IID_IEnumBitsPeerCacheRecords = &IID_IEnumBitsPeerCacheRecords_Value;
pub const IEnumBitsPeerCacheRecords = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumBitsPeerCacheRecords,
            celt: u32,
            rgelt: ?*?*IBitsPeerCacheRecord,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumBitsPeerCacheRecords,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumBitsPeerCacheRecords,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumBitsPeerCacheRecords,
            ppenum: ?*?*IEnumBitsPeerCacheRecords,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IEnumBitsPeerCacheRecords,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: ?*?*IBitsPeerCacheRecord, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumBitsPeerCacheRecords.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumBitsPeerCacheRecords, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumBitsPeerCacheRecords.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumBitsPeerCacheRecords, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumBitsPeerCacheRecords.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumBitsPeerCacheRecords, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumBitsPeerCacheRecords) HRESULT {
                return @as(*const IEnumBitsPeerCacheRecords.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumBitsPeerCacheRecords, @ptrCast(self)), ppenum_);
            }
            pub inline fn getCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IEnumBitsPeerCacheRecords.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IEnumBitsPeerCacheRecords, @ptrCast(self)), pu_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBitsPeer_Value = Guid.initString("659cdea2-489e-11d9-a9cd-000d56965251");
pub const IID_IBitsPeer = &IID_IBitsPeer_Value;
pub const IBitsPeer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPeerName: *const fn (
            self: *const IBitsPeer,
            p_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsAuthenticated: *const fn (
            self: *const IBitsPeer,
            p_auth: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsAvailable: *const fn (
            self: *const IBitsPeer,
            p_online: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPeerName(self: *const T, p_name_: ?*?PWSTR) HRESULT {
                return @as(*const IBitsPeer.VTable, @ptrCast(self.vtable)).GetPeerName(@as(*const IBitsPeer, @ptrCast(self)), p_name_);
            }
            pub inline fn isAuthenticated(self: *const T, p_auth_: ?*BOOL) HRESULT {
                return @as(*const IBitsPeer.VTable, @ptrCast(self.vtable)).IsAuthenticated(@as(*const IBitsPeer, @ptrCast(self)), p_auth_);
            }
            pub inline fn isAvailable(self: *const T, p_online_: ?*BOOL) HRESULT {
                return @as(*const IBitsPeer.VTable, @ptrCast(self.vtable)).IsAvailable(@as(*const IBitsPeer, @ptrCast(self)), p_online_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumBitsPeers_Value = Guid.initString("659cdea5-489e-11d9-a9cd-000d56965251");
pub const IID_IEnumBitsPeers = &IID_IEnumBitsPeers_Value;
pub const IEnumBitsPeers = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumBitsPeers,
            celt: u32,
            rgelt: ?*?*IBitsPeer,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumBitsPeers,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumBitsPeers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumBitsPeers,
            ppenum: ?*?*IEnumBitsPeers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IEnumBitsPeers,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: ?*?*IBitsPeer, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumBitsPeers.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumBitsPeers, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumBitsPeers.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumBitsPeers, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumBitsPeers.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumBitsPeers, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumBitsPeers) HRESULT {
                return @as(*const IEnumBitsPeers.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumBitsPeers, @ptrCast(self)), ppenum_);
            }
            pub inline fn getCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IEnumBitsPeers.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IEnumBitsPeers, @ptrCast(self)), pu_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBitsPeerCacheAdministration_Value = Guid.initString("659cdead-489e-11d9-a9cd-000d56965251");
pub const IID_IBitsPeerCacheAdministration = &IID_IBitsPeerCacheAdministration_Value;
pub const IBitsPeerCacheAdministration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMaximumCacheSize: *const fn (
            self: *const IBitsPeerCacheAdministration,
            p_bytes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaximumCacheSize: *const fn (
            self: *const IBitsPeerCacheAdministration,
            bytes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaximumContentAge: *const fn (
            self: *const IBitsPeerCacheAdministration,
            p_seconds: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaximumContentAge: *const fn (
            self: *const IBitsPeerCacheAdministration,
            seconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfigurationFlags: *const fn (
            self: *const IBitsPeerCacheAdministration,
            p_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfigurationFlags: *const fn (
            self: *const IBitsPeerCacheAdministration,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumRecords: *const fn (
            self: *const IBitsPeerCacheAdministration,
            pp_enum: ?*?*IEnumBitsPeerCacheRecords,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecord: *const fn (
            self: *const IBitsPeerCacheAdministration,
            id: ?*const Guid,
            pp_record: ?*?*IBitsPeerCacheRecord,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearRecords: *const fn (
            self: *const IBitsPeerCacheAdministration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRecord: *const fn (
            self: *const IBitsPeerCacheAdministration,
            id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteUrl: *const fn (
            self: *const IBitsPeerCacheAdministration,
            url: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumPeers: *const fn (
            self: *const IBitsPeerCacheAdministration,
            pp_enum: ?*?*IEnumBitsPeers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearPeers: *const fn (
            self: *const IBitsPeerCacheAdministration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiscoverPeers: *const fn (
            self: *const IBitsPeerCacheAdministration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMaximumCacheSize(self: *const T, p_bytes_: ?*u32) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).GetMaximumCacheSize(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), p_bytes_);
            }
            pub inline fn setMaximumCacheSize(self: *const T, bytes_: u32) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).SetMaximumCacheSize(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), bytes_);
            }
            pub inline fn getMaximumContentAge(self: *const T, p_seconds_: ?*u32) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).GetMaximumContentAge(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), p_seconds_);
            }
            pub inline fn setMaximumContentAge(self: *const T, seconds_: u32) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).SetMaximumContentAge(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), seconds_);
            }
            pub inline fn getConfigurationFlags(self: *const T, p_flags_: ?*u32) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).GetConfigurationFlags(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), p_flags_);
            }
            pub inline fn setConfigurationFlags(self: *const T, flags_: u32) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).SetConfigurationFlags(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), flags_);
            }
            pub inline fn enumRecords(self: *const T, pp_enum_: ?*?*IEnumBitsPeerCacheRecords) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).EnumRecords(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getRecord(self: *const T, id_: ?*const Guid, pp_record_: ?*?*IBitsPeerCacheRecord) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).GetRecord(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), id_, pp_record_);
            }
            pub inline fn clearRecords(self: *const T) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).ClearRecords(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)));
            }
            pub inline fn deleteRecord(self: *const T, id_: ?*const Guid) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).DeleteRecord(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), id_);
            }
            pub inline fn deleteUrl(self: *const T, url_: ?[*:0]const u16) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).DeleteUrl(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), url_);
            }
            pub inline fn enumPeers(self: *const T, pp_enum_: ?*?*IEnumBitsPeers) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).EnumPeers(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)), pp_enum_);
            }
            pub inline fn clearPeers(self: *const T) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).ClearPeers(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)));
            }
            pub inline fn discoverPeers(self: *const T) HRESULT {
                return @as(*const IBitsPeerCacheAdministration.VTable, @ptrCast(self.vtable)).DiscoverPeers(@as(*const IBitsPeerCacheAdministration, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBackgroundCopyJob4_Value = Guid.initString("659cdeae-489e-11d9-a9cd-000d56965251");
pub const IID_IBackgroundCopyJob4 = &IID_IBackgroundCopyJob4_Value;
pub const IBackgroundCopyJob4 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyJob3.VTable,
        SetPeerCachingFlags: *const fn (
            self: *const IBackgroundCopyJob4,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPeerCachingFlags: *const fn (
            self: *const IBackgroundCopyJob4,
            p_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOwnerIntegrityLevel: *const fn (
            self: *const IBackgroundCopyJob4,
            p_level: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOwnerElevationState: *const fn (
            self: *const IBackgroundCopyJob4,
            p_elevated: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaximumDownloadTime: *const fn (
            self: *const IBackgroundCopyJob4,
            timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaximumDownloadTime: *const fn (
            self: *const IBackgroundCopyJob4,
            p_timeout: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyJob3.MethodMixin(T);
            pub inline fn setPeerCachingFlags(self: *const T, flags_: u32) HRESULT {
                return @as(*const IBackgroundCopyJob4.VTable, @ptrCast(self.vtable)).SetPeerCachingFlags(@as(*const IBackgroundCopyJob4, @ptrCast(self)), flags_);
            }
            pub inline fn getPeerCachingFlags(self: *const T, p_flags_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob4.VTable, @ptrCast(self.vtable)).GetPeerCachingFlags(@as(*const IBackgroundCopyJob4, @ptrCast(self)), p_flags_);
            }
            pub inline fn getOwnerIntegrityLevel(self: *const T, p_level_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob4.VTable, @ptrCast(self.vtable)).GetOwnerIntegrityLevel(@as(*const IBackgroundCopyJob4, @ptrCast(self)), p_level_);
            }
            pub inline fn getOwnerElevationState(self: *const T, p_elevated_: ?*BOOL) HRESULT {
                return @as(*const IBackgroundCopyJob4.VTable, @ptrCast(self.vtable)).GetOwnerElevationState(@as(*const IBackgroundCopyJob4, @ptrCast(self)), p_elevated_);
            }
            pub inline fn setMaximumDownloadTime(self: *const T, timeout_: u32) HRESULT {
                return @as(*const IBackgroundCopyJob4.VTable, @ptrCast(self.vtable)).SetMaximumDownloadTime(@as(*const IBackgroundCopyJob4, @ptrCast(self)), timeout_);
            }
            pub inline fn getMaximumDownloadTime(self: *const T, p_timeout_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob4.VTable, @ptrCast(self.vtable)).GetMaximumDownloadTime(@as(*const IBackgroundCopyJob4, @ptrCast(self)), p_timeout_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBackgroundCopyFile3_Value = Guid.initString("659cdeaa-489e-11d9-a9cd-000d56965251");
pub const IID_IBackgroundCopyFile3 = &IID_IBackgroundCopyFile3_Value;
pub const IBackgroundCopyFile3 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyFile2.VTable,
        GetTemporaryName: *const fn (
            self: *const IBackgroundCopyFile3,
            p_filename: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValidationState: *const fn (
            self: *const IBackgroundCopyFile3,
            state: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValidationState: *const fn (
            self: *const IBackgroundCopyFile3,
            p_state: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDownloadedFromPeer: *const fn (
            self: *const IBackgroundCopyFile3,
            p_val: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyFile2.MethodMixin(T);
            pub inline fn getTemporaryName(self: *const T, p_filename_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyFile3.VTable, @ptrCast(self.vtable)).GetTemporaryName(@as(*const IBackgroundCopyFile3, @ptrCast(self)), p_filename_);
            }
            pub inline fn setValidationState(self: *const T, state_: BOOL) HRESULT {
                return @as(*const IBackgroundCopyFile3.VTable, @ptrCast(self.vtable)).SetValidationState(@as(*const IBackgroundCopyFile3, @ptrCast(self)), state_);
            }
            pub inline fn getValidationState(self: *const T, p_state_: ?*BOOL) HRESULT {
                return @as(*const IBackgroundCopyFile3.VTable, @ptrCast(self.vtable)).GetValidationState(@as(*const IBackgroundCopyFile3, @ptrCast(self)), p_state_);
            }
            pub inline fn isDownloadedFromPeer(self: *const T, p_val_: ?*BOOL) HRESULT {
                return @as(*const IBackgroundCopyFile3.VTable, @ptrCast(self.vtable)).IsDownloadedFromPeer(@as(*const IBackgroundCopyFile3, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBackgroundCopyCallback2_Value = Guid.initString("659cdeac-489e-11d9-a9cd-000d56965251");
pub const IID_IBackgroundCopyCallback2 = &IID_IBackgroundCopyCallback2_Value;
pub const IBackgroundCopyCallback2 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyCallback.VTable,
        FileTransferred: *const fn (
            self: *const IBackgroundCopyCallback2,
            p_job: ?*IBackgroundCopyJob,
            p_file: ?*IBackgroundCopyFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyCallback.MethodMixin(T);
            pub inline fn fileTransferred(self: *const T, p_job_: ?*IBackgroundCopyJob, p_file_: ?*IBackgroundCopyFile) HRESULT {
                return @as(*const IBackgroundCopyCallback2.VTable, @ptrCast(self.vtable)).FileTransferred(@as(*const IBackgroundCopyCallback2, @ptrCast(self)), p_job_, p_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyManager4_0_Value = Guid.initString("bb6df56b-cace-11dc-9992-0019b93a3a84");
pub const CLSID_BackgroundCopyManager4_0 = &CLSID_BackgroundCopyManager4_0_Value;

// TODO: this type is limited to platform 'windows6.1'
const IID_IBitsTokenOptions_Value = Guid.initString("9a2584c3-f7d2-457a-9a5e-22b67bffc7d2");
pub const IID_IBitsTokenOptions = &IID_IBitsTokenOptions_Value;
pub const IBitsTokenOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetHelperTokenFlags: *const fn (
            self: *const IBitsTokenOptions,
            usage_flags: BG_TOKEN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHelperTokenFlags: *const fn (
            self: *const IBitsTokenOptions,
            p_flags: ?*BG_TOKEN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHelperToken: *const fn (
            self: *const IBitsTokenOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearHelperToken: *const fn (
            self: *const IBitsTokenOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHelperTokenSid: *const fn (
            self: *const IBitsTokenOptions,
            p_sid: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setHelperTokenFlags(self: *const T, usage_flags_: BG_TOKEN) HRESULT {
                return @as(*const IBitsTokenOptions.VTable, @ptrCast(self.vtable)).SetHelperTokenFlags(@as(*const IBitsTokenOptions, @ptrCast(self)), usage_flags_);
            }
            pub inline fn getHelperTokenFlags(self: *const T, p_flags_: ?*BG_TOKEN) HRESULT {
                return @as(*const IBitsTokenOptions.VTable, @ptrCast(self.vtable)).GetHelperTokenFlags(@as(*const IBitsTokenOptions, @ptrCast(self)), p_flags_);
            }
            pub inline fn setHelperToken(self: *const T) HRESULT {
                return @as(*const IBitsTokenOptions.VTable, @ptrCast(self.vtable)).SetHelperToken(@as(*const IBitsTokenOptions, @ptrCast(self)));
            }
            pub inline fn clearHelperToken(self: *const T) HRESULT {
                return @as(*const IBitsTokenOptions.VTable, @ptrCast(self.vtable)).ClearHelperToken(@as(*const IBitsTokenOptions, @ptrCast(self)));
            }
            pub inline fn getHelperTokenSid(self: *const T, p_sid_: ?*?PWSTR) HRESULT {
                return @as(*const IBitsTokenOptions.VTable, @ptrCast(self.vtable)).GetHelperTokenSid(@as(*const IBitsTokenOptions, @ptrCast(self)), p_sid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IBackgroundCopyFile4_Value = Guid.initString("ef7e0655-7888-4960-b0e5-730846e03492");
pub const IID_IBackgroundCopyFile4 = &IID_IBackgroundCopyFile4_Value;
pub const IBackgroundCopyFile4 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyFile3.VTable,
        GetPeerDownloadStats: *const fn (
            self: *const IBackgroundCopyFile4,
            p_from_origin: ?*u64,
            p_from_peers: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyFile3.MethodMixin(T);
            pub inline fn getPeerDownloadStats(self: *const T, p_from_origin_: ?*u64, p_from_peers_: ?*u64) HRESULT {
                return @as(*const IBackgroundCopyFile4.VTable, @ptrCast(self.vtable)).GetPeerDownloadStats(@as(*const IBackgroundCopyFile4, @ptrCast(self)), p_from_origin_, p_from_peers_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyManager5_0_Value = Guid.initString("1ecca34c-e88a-44e3-8d6a-8921bde9e452");
pub const CLSID_BackgroundCopyManager5_0 = &CLSID_BackgroundCopyManager5_0_Value;

pub const BITS_JOB_TRANSFER_POLICY = enum(i32) {
    ALWAYS = -2147483393,
    NOT_ROAMING = -2147483521,
    NO_SURCHARGE = -2147483537,
    STANDARD = -2147483545,
    UNRESTRICTED = -2147483615,
};
pub const BITS_JOB_TRANSFER_POLICY_ALWAYS = BITS_JOB_TRANSFER_POLICY.ALWAYS;
pub const BITS_JOB_TRANSFER_POLICY_NOT_ROAMING = BITS_JOB_TRANSFER_POLICY.NOT_ROAMING;
pub const BITS_JOB_TRANSFER_POLICY_NO_SURCHARGE = BITS_JOB_TRANSFER_POLICY.NO_SURCHARGE;
pub const BITS_JOB_TRANSFER_POLICY_STANDARD = BITS_JOB_TRANSFER_POLICY.STANDARD;
pub const BITS_JOB_TRANSFER_POLICY_UNRESTRICTED = BITS_JOB_TRANSFER_POLICY.UNRESTRICTED;

pub const BITS_JOB_PROPERTY_ID = enum(i32) {
    ID_COST_FLAGS = 1,
    NOTIFICATION_CLSID = 2,
    DYNAMIC_CONTENT = 3,
    HIGH_PERFORMANCE = 4,
    MAX_DOWNLOAD_SIZE = 5,
    USE_STORED_CREDENTIALS = 7,
    MINIMUM_NOTIFICATION_INTERVAL_MS = 9,
    ON_DEMAND_MODE = 10,
};
pub const BITS_JOB_PROPERTY_ID_COST_FLAGS = BITS_JOB_PROPERTY_ID.ID_COST_FLAGS;
pub const BITS_JOB_PROPERTY_NOTIFICATION_CLSID = BITS_JOB_PROPERTY_ID.NOTIFICATION_CLSID;
pub const BITS_JOB_PROPERTY_DYNAMIC_CONTENT = BITS_JOB_PROPERTY_ID.DYNAMIC_CONTENT;
pub const BITS_JOB_PROPERTY_HIGH_PERFORMANCE = BITS_JOB_PROPERTY_ID.HIGH_PERFORMANCE;
pub const BITS_JOB_PROPERTY_MAX_DOWNLOAD_SIZE = BITS_JOB_PROPERTY_ID.MAX_DOWNLOAD_SIZE;
pub const BITS_JOB_PROPERTY_USE_STORED_CREDENTIALS = BITS_JOB_PROPERTY_ID.USE_STORED_CREDENTIALS;
pub const BITS_JOB_PROPERTY_MINIMUM_NOTIFICATION_INTERVAL_MS = BITS_JOB_PROPERTY_ID.MINIMUM_NOTIFICATION_INTERVAL_MS;
pub const BITS_JOB_PROPERTY_ON_DEMAND_MODE = BITS_JOB_PROPERTY_ID.ON_DEMAND_MODE;

pub const BITS_JOB_PROPERTY_VALUE = extern union {
    Dword: u32,
    ClsID: Guid,
    Enable: BOOL,
    Uint64: u64,
    Target: BG_AUTH_TARGET,
};

pub const BITS_FILE_PROPERTY_ID = enum(i32) {
    S = 1,
};
pub const BITS_FILE_PROPERTY_ID_HTTP_RESPONSE_HEADERS = BITS_FILE_PROPERTY_ID.S;

pub const BITS_FILE_PROPERTY_VALUE = extern union {
    String: ?PWSTR,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IBackgroundCopyJob5_Value = Guid.initString("e847030c-bbba-4657-af6d-484aa42bf1fe");
pub const IID_IBackgroundCopyJob5 = &IID_IBackgroundCopyJob5_Value;
pub const IBackgroundCopyJob5 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyJob4.VTable,
        SetProperty: *const fn (
            self: *const IBackgroundCopyJob5,
            property_id: BITS_JOB_PROPERTY_ID,
            property_value: BITS_JOB_PROPERTY_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IBackgroundCopyJob5,
            property_id: BITS_JOB_PROPERTY_ID,
            property_value: ?*BITS_JOB_PROPERTY_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyJob4.MethodMixin(T);
            pub inline fn setProperty(self: *const T, property_id_: BITS_JOB_PROPERTY_ID, property_value_: BITS_JOB_PROPERTY_VALUE) HRESULT {
                return @as(*const IBackgroundCopyJob5.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IBackgroundCopyJob5, @ptrCast(self)), property_id_, property_value_);
            }
            pub inline fn getProperty(self: *const T, property_id_: BITS_JOB_PROPERTY_ID, property_value_: ?*BITS_JOB_PROPERTY_VALUE) HRESULT {
                return @as(*const IBackgroundCopyJob5.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IBackgroundCopyJob5, @ptrCast(self)), property_id_, property_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IBackgroundCopyFile5_Value = Guid.initString("85c1657f-dafc-40e8-8834-df18ea25717e");
pub const IID_IBackgroundCopyFile5 = &IID_IBackgroundCopyFile5_Value;
pub const IBackgroundCopyFile5 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyFile4.VTable,
        SetProperty: *const fn (
            self: *const IBackgroundCopyFile5,
            property_id: BITS_FILE_PROPERTY_ID,
            property_value: BITS_FILE_PROPERTY_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IBackgroundCopyFile5,
            property_id: BITS_FILE_PROPERTY_ID,
            property_value: ?*BITS_FILE_PROPERTY_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyFile4.MethodMixin(T);
            pub inline fn setProperty(self: *const T, property_id_: BITS_FILE_PROPERTY_ID, property_value_: BITS_FILE_PROPERTY_VALUE) HRESULT {
                return @as(*const IBackgroundCopyFile5.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IBackgroundCopyFile5, @ptrCast(self)), property_id_, property_value_);
            }
            pub inline fn getProperty(self: *const T, property_id_: BITS_FILE_PROPERTY_ID, property_value_: ?*BITS_FILE_PROPERTY_VALUE) HRESULT {
                return @as(*const IBackgroundCopyFile5.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IBackgroundCopyFile5, @ptrCast(self)), property_id_, property_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyManager10_1_Value = Guid.initString("4bd3e4e1-7bd4-4a2b-9964-496400de5193");
pub const CLSID_BackgroundCopyManager10_1 = &CLSID_BackgroundCopyManager10_1_Value;

// TODO: this type is limited to platform 'windows10.0.15063'
const IID_IBackgroundCopyCallback3_Value = Guid.initString("98c97bd2-e32b-4ad8-a528-95fd8b16bd42");
pub const IID_IBackgroundCopyCallback3 = &IID_IBackgroundCopyCallback3_Value;
pub const IBackgroundCopyCallback3 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyCallback2.VTable,
        FileRangesTransferred: *const fn (
            self: *const IBackgroundCopyCallback3,
            job: ?*IBackgroundCopyJob,
            file: ?*IBackgroundCopyFile,
            range_count: u32,
            ranges: [*]const BG_FILE_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyCallback2.MethodMixin(T);
            pub inline fn fileRangesTransferred(self: *const T, job_: ?*IBackgroundCopyJob, file_: ?*IBackgroundCopyFile, range_count_: u32, ranges_: [*]const BG_FILE_RANGE) HRESULT {
                return @as(*const IBackgroundCopyCallback3.VTable, @ptrCast(self.vtable)).FileRangesTransferred(@as(*const IBackgroundCopyCallback3, @ptrCast(self)), job_, file_, range_count_, ranges_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.15063'
const IID_IBackgroundCopyFile6_Value = Guid.initString("cf6784f7-d677-49fd-9368-cb47aee9d1ad");
pub const IID_IBackgroundCopyFile6 = &IID_IBackgroundCopyFile6_Value;
pub const IBackgroundCopyFile6 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyFile5.VTable,
        UpdateDownloadPosition: *const fn (
            self: *const IBackgroundCopyFile6,
            offset: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestFileRanges: *const fn (
            self: *const IBackgroundCopyFile6,
            range_count: u32,
            ranges: [*]const BG_FILE_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilledFileRanges: *const fn (
            self: *const IBackgroundCopyFile6,
            range_count: ?*u32,
            ranges: [*]?*BG_FILE_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyFile5.MethodMixin(T);
            pub inline fn updateDownloadPosition(self: *const T, offset_: u64) HRESULT {
                return @as(*const IBackgroundCopyFile6.VTable, @ptrCast(self.vtable)).UpdateDownloadPosition(@as(*const IBackgroundCopyFile6, @ptrCast(self)), offset_);
            }
            pub inline fn requestFileRanges(self: *const T, range_count_: u32, ranges_: [*]const BG_FILE_RANGE) HRESULT {
                return @as(*const IBackgroundCopyFile6.VTable, @ptrCast(self.vtable)).RequestFileRanges(@as(*const IBackgroundCopyFile6, @ptrCast(self)), range_count_, ranges_);
            }
            pub inline fn getFilledFileRanges(self: *const T, range_count_: ?*u32, ranges_: [*]?*BG_FILE_RANGE) HRESULT {
                return @as(*const IBackgroundCopyFile6.VTable, @ptrCast(self.vtable)).GetFilledFileRanges(@as(*const IBackgroundCopyFile6, @ptrCast(self)), range_count_, ranges_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyManager10_2_Value = Guid.initString("4575438f-a6c8-4976-b0fe-2f26b80d959e");
pub const CLSID_BackgroundCopyManager10_2 = &CLSID_BackgroundCopyManager10_2_Value;

// TODO: this type is limited to platform 'windows10.0.17763'
const IID_IBackgroundCopyJobHttpOptions2_Value = Guid.initString("b591a192-a405-4fc3-8323-4c5c542578fc");
pub const IID_IBackgroundCopyJobHttpOptions2 = &IID_IBackgroundCopyJobHttpOptions2_Value;
pub const IBackgroundCopyJobHttpOptions2 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyJobHttpOptions.VTable,
        SetHttpMethod: *const fn (
            self: *const IBackgroundCopyJobHttpOptions2,
            method: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHttpMethod: *const fn (
            self: *const IBackgroundCopyJobHttpOptions2,
            method: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyJobHttpOptions.MethodMixin(T);
            pub inline fn setHttpMethod(self: *const T, method_: ?[*:0]const u16) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions2.VTable, @ptrCast(self.vtable)).SetHttpMethod(@as(*const IBackgroundCopyJobHttpOptions2, @ptrCast(self)), method_);
            }
            pub inline fn getHttpMethod(self: *const T, method_: ?*?PWSTR) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions2.VTable, @ptrCast(self.vtable)).GetHttpMethod(@as(*const IBackgroundCopyJobHttpOptions2, @ptrCast(self)), method_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyManager10_3_Value = Guid.initString("5fd42ad5-c04e-4d36-adc7-e08ff15737ad");
pub const CLSID_BackgroundCopyManager10_3 = &CLSID_BackgroundCopyManager10_3_Value;

const IID_IBackgroundCopyServerCertificateValidationCallback_Value = Guid.initString("4cec0d02-def7-4158-813a-c32a46945ff7");
pub const IID_IBackgroundCopyServerCertificateValidationCallback = &IID_IBackgroundCopyServerCertificateValidationCallback_Value;
pub const IBackgroundCopyServerCertificateValidationCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ValidateServerCertificate: *const fn (
            self: *const IBackgroundCopyServerCertificateValidationCallback,
            job: ?*IBackgroundCopyJob,
            file: ?*IBackgroundCopyFile,
            cert_length: u32,
            cert_data: [*:0]const u8,
            cert_encoding_type: u32,
            cert_store_length: u32,
            cert_store_data: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn validateServerCertificate(self: *const T, job_: ?*IBackgroundCopyJob, file_: ?*IBackgroundCopyFile, cert_length_: u32, cert_data_: [*:0]const u8, cert_encoding_type_: u32, cert_store_length_: u32, cert_store_data_: [*:0]const u8) HRESULT {
                return @as(*const IBackgroundCopyServerCertificateValidationCallback.VTable, @ptrCast(self.vtable)).ValidateServerCertificate(@as(*const IBackgroundCopyServerCertificateValidationCallback, @ptrCast(self)), job_, file_, cert_length_, cert_data_, cert_encoding_type_, cert_store_length_, cert_store_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IBackgroundCopyJobHttpOptions3_Value = Guid.initString("8a9263d3-fd4c-4eda-9b28-30132a4d4e3c");
pub const IID_IBackgroundCopyJobHttpOptions3 = &IID_IBackgroundCopyJobHttpOptions3_Value;
pub const IBackgroundCopyJobHttpOptions3 = extern struct {
    pub const VTable = extern struct {
        base: IBackgroundCopyJobHttpOptions2.VTable,
        SetServerCertificateValidationInterface: *const fn (
            self: *const IBackgroundCopyJobHttpOptions3,
            cert_validation_callback: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeCustomHeadersWriteOnly: *const fn (
            self: *const IBackgroundCopyJobHttpOptions3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBackgroundCopyJobHttpOptions2.MethodMixin(T);
            pub inline fn setServerCertificateValidationInterface(self: *const T, cert_validation_callback_: ?*IUnknown) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions3.VTable, @ptrCast(self.vtable)).SetServerCertificateValidationInterface(@as(*const IBackgroundCopyJobHttpOptions3, @ptrCast(self)), cert_validation_callback_);
            }
            pub inline fn makeCustomHeadersWriteOnly(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyJobHttpOptions3.VTable, @ptrCast(self.vtable)).MakeCustomHeadersWriteOnly(@as(*const IBackgroundCopyJobHttpOptions3, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BITSExtensionSetupFactory_Value = Guid.initString("efbbab68-7286-4783-94bf-9461d8b7e7e9");
pub const CLSID_BITSExtensionSetupFactory = &CLSID_BITSExtensionSetupFactory_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBITSExtensionSetup_Value = Guid.initString("29cfbbf7-09e4-4b97-b0bc-f2287e3d8eb3");
pub const IID_IBITSExtensionSetup = &IID_IBITSExtensionSetup_Value;
pub const IBITSExtensionSetup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        EnableBITSUploads: *const fn (
            self: *const IBITSExtensionSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableBITSUploads: *const fn (
            self: *const IBITSExtensionSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCleanupTaskName: *const fn (
            self: *const IBITSExtensionSetup,
            p_task_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCleanupTask: *const fn (
            self: *const IBITSExtensionSetup,
            riid: ?*const Guid,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn enableBITSUploads(self: *const T) HRESULT {
                return @as(*const IBITSExtensionSetup.VTable, @ptrCast(self.vtable)).EnableBITSUploads(@as(*const IBITSExtensionSetup, @ptrCast(self)));
            }
            pub inline fn disableBITSUploads(self: *const T) HRESULT {
                return @as(*const IBITSExtensionSetup.VTable, @ptrCast(self.vtable)).DisableBITSUploads(@as(*const IBITSExtensionSetup, @ptrCast(self)));
            }
            pub inline fn getCleanupTaskName(self: *const T, p_task_name_: ?*?BSTR) HRESULT {
                return @as(*const IBITSExtensionSetup.VTable, @ptrCast(self.vtable)).GetCleanupTaskName(@as(*const IBITSExtensionSetup, @ptrCast(self)), p_task_name_);
            }
            pub inline fn getCleanupTask(self: *const T, riid_: ?*const Guid, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IBITSExtensionSetup.VTable, @ptrCast(self.vtable)).GetCleanupTask(@as(*const IBITSExtensionSetup, @ptrCast(self)), riid_, pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBITSExtensionSetupFactory_Value = Guid.initString("d5d2d542-5503-4e64-8b48-72ef91a32ee1");
pub const IID_IBITSExtensionSetupFactory = &IID_IBITSExtensionSetupFactory_Value;
pub const IBITSExtensionSetupFactory = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetObject: *const fn (
            self: *const IBITSExtensionSetupFactory,
            path: ?BSTR,
            pp_extension_setup: ?*?*IBITSExtensionSetup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getObject(self: *const T, path_: ?BSTR, pp_extension_setup_: ?*?*IBITSExtensionSetup) HRESULT {
                return @as(*const IBITSExtensionSetupFactory.VTable, @ptrCast(self.vtable)).GetObject(@as(*const IBITSExtensionSetupFactory, @ptrCast(self)), path_, pp_extension_setup_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_BackgroundCopyQMgr_Value = Guid.initString("69ad4aee-51be-439b-a92c-86ae490e8b30");
pub const CLSID_BackgroundCopyQMgr = &CLSID_BackgroundCopyQMgr_Value;

pub const FILESETINFO = extern struct {
    bstrRemoteFile: ?BSTR,
    bstrLocalFile: ?BSTR,
    dwSizeHint: u32,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBackgroundCopyJob1_Value = Guid.initString("59f5553c-2031-4629-bb18-2645a6970947");
pub const IID_IBackgroundCopyJob1 = &IID_IBackgroundCopyJob1_Value;
pub const IBackgroundCopyJob1 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CancelJob: *const fn (
            self: *const IBackgroundCopyJob1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProgress: *const fn (
            self: *const IBackgroundCopyJob1,
            dw_flags: u32,
            pdw_progress: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IBackgroundCopyJob1,
            pdw_status: ?*u32,
            pdw_win32_result: ?*u32,
            pdw_transport_result: ?*u32,
            pdw_num_of_retries: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFiles: *const fn (
            self: *const IBackgroundCopyJob1,
            c_file_count: u32,
            pp_file_set: [*]?*FILESETINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFile: *const fn (
            self: *const IBackgroundCopyJob1,
            c_file_index: u32,
            p_file_info: ?*FILESETINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileCount: *const fn (
            self: *const IBackgroundCopyJob1,
            pdw_file_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SwitchToForeground: *const fn (
            self: *const IBackgroundCopyJob1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JobID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IBackgroundCopyJob1,
            pguid_job_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn cancelJob(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyJob1.VTable, @ptrCast(self.vtable)).CancelJob(@as(*const IBackgroundCopyJob1, @ptrCast(self)));
            }
            pub inline fn getProgress(self: *const T, dw_flags_: u32, pdw_progress_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob1.VTable, @ptrCast(self.vtable)).GetProgress(@as(*const IBackgroundCopyJob1, @ptrCast(self)), dw_flags_, pdw_progress_);
            }
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32, pdw_win32_result_: ?*u32, pdw_transport_result_: ?*u32, pdw_num_of_retries_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob1.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IBackgroundCopyJob1, @ptrCast(self)), pdw_status_, pdw_win32_result_, pdw_transport_result_, pdw_num_of_retries_);
            }
            pub inline fn addFiles(self: *const T, c_file_count_: u32, pp_file_set_: [*]?*FILESETINFO) HRESULT {
                return @as(*const IBackgroundCopyJob1.VTable, @ptrCast(self.vtable)).AddFiles(@as(*const IBackgroundCopyJob1, @ptrCast(self)), c_file_count_, pp_file_set_);
            }
            pub inline fn getFile(self: *const T, c_file_index_: u32, p_file_info_: ?*FILESETINFO) HRESULT {
                return @as(*const IBackgroundCopyJob1.VTable, @ptrCast(self.vtable)).GetFile(@as(*const IBackgroundCopyJob1, @ptrCast(self)), c_file_index_, p_file_info_);
            }
            pub inline fn getFileCount(self: *const T, pdw_file_count_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyJob1.VTable, @ptrCast(self.vtable)).GetFileCount(@as(*const IBackgroundCopyJob1, @ptrCast(self)), pdw_file_count_);
            }
            pub inline fn switchToForeground(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyJob1.VTable, @ptrCast(self.vtable)).SwitchToForeground(@as(*const IBackgroundCopyJob1, @ptrCast(self)));
            }
            pub inline fn getJobID(self: *const T, pguid_job_i_d_: ?*Guid) HRESULT {
                return @as(*const IBackgroundCopyJob1.VTable, @ptrCast(self.vtable)).get_JobID(@as(*const IBackgroundCopyJob1, @ptrCast(self)), pguid_job_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumBackgroundCopyJobs1_Value = Guid.initString("8baeba9d-8f1c-42c4-b82c-09ae79980d25");
pub const IID_IEnumBackgroundCopyJobs1 = &IID_IEnumBackgroundCopyJobs1_Value;
pub const IEnumBackgroundCopyJobs1 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumBackgroundCopyJobs1,
            celt: u32,
            rgelt: [*]Guid,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumBackgroundCopyJobs1,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumBackgroundCopyJobs1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumBackgroundCopyJobs1,
            ppenum: ?*?*IEnumBackgroundCopyJobs1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IEnumBackgroundCopyJobs1,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]Guid, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs1.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumBackgroundCopyJobs1, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs1.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumBackgroundCopyJobs1, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs1.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumBackgroundCopyJobs1, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumBackgroundCopyJobs1) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs1.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumBackgroundCopyJobs1, @ptrCast(self)), ppenum_);
            }
            pub inline fn getCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IEnumBackgroundCopyJobs1.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IEnumBackgroundCopyJobs1, @ptrCast(self)), pu_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const GROUPPROP = enum(i32) {
    PRIORITY = 0,
    REMOTEUSERID = 1,
    REMOTEUSERPWD = 2,
    LOCALUSERID = 3,
    LOCALUSERPWD = 4,
    PROTOCOLFLAGS = 5,
    NOTIFYFLAGS = 6,
    NOTIFYCLSID = 7,
    PROGRESSSIZE = 8,
    PROGRESSPERCENT = 9,
    PROGRESSTIME = 10,
    DISPLAYNAME = 11,
    DESCRIPTION = 12,
};
pub const GROUPPROP_PRIORITY = GROUPPROP.PRIORITY;
pub const GROUPPROP_REMOTEUSERID = GROUPPROP.REMOTEUSERID;
pub const GROUPPROP_REMOTEUSERPWD = GROUPPROP.REMOTEUSERPWD;
pub const GROUPPROP_LOCALUSERID = GROUPPROP.LOCALUSERID;
pub const GROUPPROP_LOCALUSERPWD = GROUPPROP.LOCALUSERPWD;
pub const GROUPPROP_PROTOCOLFLAGS = GROUPPROP.PROTOCOLFLAGS;
pub const GROUPPROP_NOTIFYFLAGS = GROUPPROP.NOTIFYFLAGS;
pub const GROUPPROP_NOTIFYCLSID = GROUPPROP.NOTIFYCLSID;
pub const GROUPPROP_PROGRESSSIZE = GROUPPROP.PROGRESSSIZE;
pub const GROUPPROP_PROGRESSPERCENT = GROUPPROP.PROGRESSPERCENT;
pub const GROUPPROP_PROGRESSTIME = GROUPPROP.PROGRESSTIME;
pub const GROUPPROP_DISPLAYNAME = GROUPPROP.DISPLAYNAME;
pub const GROUPPROP_DESCRIPTION = GROUPPROP.DESCRIPTION;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBackgroundCopyGroup_Value = Guid.initString("1ded80a7-53ea-424f-8a04-17fea9adc4f5");
pub const IID_IBackgroundCopyGroup = &IID_IBackgroundCopyGroup_Value;
pub const IBackgroundCopyGroup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProp: *const fn (
            self: *const IBackgroundCopyGroup,
            prop_i_d: GROUPPROP,
            pvar_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProp: *const fn (
            self: *const IBackgroundCopyGroup,
            prop_i_d: GROUPPROP,
            pvar_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProgress: *const fn (
            self: *const IBackgroundCopyGroup,
            dw_flags: u32,
            pdw_progress: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IBackgroundCopyGroup,
            pdw_status: ?*u32,
            pdw_job_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJob: *const fn (
            self: *const IBackgroundCopyGroup,
            job_i_d: Guid,
            pp_job: ?*?*IBackgroundCopyJob1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SuspendGroup: *const fn (
            self: *const IBackgroundCopyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeGroup: *const fn (
            self: *const IBackgroundCopyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelGroup: *const fn (
            self: *const IBackgroundCopyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IBackgroundCopyGroup,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IBackgroundCopyGroup,
            pguid_group_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateJob: *const fn (
            self: *const IBackgroundCopyGroup,
            guid_job_i_d: Guid,
            pp_job: ?*?*IBackgroundCopyJob1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumJobs: *const fn (
            self: *const IBackgroundCopyGroup,
            dw_flags: u32,
            pp_enum_jobs: ?*?*IEnumBackgroundCopyJobs1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SwitchToForeground: *const fn (
            self: *const IBackgroundCopyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryNewJobInterface: *const fn (
            self: *const IBackgroundCopyGroup,
            iid: ?*const Guid,
            p_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNotificationPointer: *const fn (
            self: *const IBackgroundCopyGroup,
            iid: ?*const Guid,
            p_unk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getProp(self: *const T, prop_i_d_: GROUPPROP, pvar_val_: ?*VARIANT) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).GetProp(@as(*const IBackgroundCopyGroup, @ptrCast(self)), prop_i_d_, pvar_val_);
            }
            pub inline fn setProp(self: *const T, prop_i_d_: GROUPPROP, pvar_val_: ?*VARIANT) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).SetProp(@as(*const IBackgroundCopyGroup, @ptrCast(self)), prop_i_d_, pvar_val_);
            }
            pub inline fn getProgress(self: *const T, dw_flags_: u32, pdw_progress_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).GetProgress(@as(*const IBackgroundCopyGroup, @ptrCast(self)), dw_flags_, pdw_progress_);
            }
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32, pdw_job_index_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IBackgroundCopyGroup, @ptrCast(self)), pdw_status_, pdw_job_index_);
            }
            pub inline fn getJob(self: *const T, job_i_d_: Guid, pp_job_: ?*?*IBackgroundCopyJob1) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).GetJob(@as(*const IBackgroundCopyGroup, @ptrCast(self)), job_i_d_, pp_job_);
            }
            pub inline fn suspendGroup(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).SuspendGroup(@as(*const IBackgroundCopyGroup, @ptrCast(self)));
            }
            pub inline fn resumeGroup(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).ResumeGroup(@as(*const IBackgroundCopyGroup, @ptrCast(self)));
            }
            pub inline fn cancelGroup(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).CancelGroup(@as(*const IBackgroundCopyGroup, @ptrCast(self)));
            }
            pub inline fn getSize(self: *const T, pdw_size_: ?*u32) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IBackgroundCopyGroup, @ptrCast(self)), pdw_size_);
            }
            pub inline fn getGroupID(self: *const T, pguid_group_i_d_: ?*Guid) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).get_GroupID(@as(*const IBackgroundCopyGroup, @ptrCast(self)), pguid_group_i_d_);
            }
            pub inline fn createJob(self: *const T, guid_job_i_d_: Guid, pp_job_: ?*?*IBackgroundCopyJob1) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).CreateJob(@as(*const IBackgroundCopyGroup, @ptrCast(self)), guid_job_i_d_, pp_job_);
            }
            pub inline fn enumJobs(self: *const T, dw_flags_: u32, pp_enum_jobs_: ?*?*IEnumBackgroundCopyJobs1) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).EnumJobs(@as(*const IBackgroundCopyGroup, @ptrCast(self)), dw_flags_, pp_enum_jobs_);
            }
            pub inline fn switchToForeground(self: *const T) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).SwitchToForeground(@as(*const IBackgroundCopyGroup, @ptrCast(self)));
            }
            pub inline fn queryNewJobInterface(self: *const T, iid_: ?*const Guid, p_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).QueryNewJobInterface(@as(*const IBackgroundCopyGroup, @ptrCast(self)), iid_, p_unk_);
            }
            pub inline fn setNotificationPointer(self: *const T, iid_: ?*const Guid, p_unk_: ?*IUnknown) HRESULT {
                return @as(*const IBackgroundCopyGroup.VTable, @ptrCast(self.vtable)).SetNotificationPointer(@as(*const IBackgroundCopyGroup, @ptrCast(self)), iid_, p_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumBackgroundCopyGroups_Value = Guid.initString("d993e603-4aa4-47c5-8665-c20d39c2ba4f");
pub const IID_IEnumBackgroundCopyGroups = &IID_IEnumBackgroundCopyGroups_Value;
pub const IEnumBackgroundCopyGroups = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumBackgroundCopyGroups,
            celt: u32,
            rgelt: [*]Guid,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumBackgroundCopyGroups,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumBackgroundCopyGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumBackgroundCopyGroups,
            ppenum: ?*?*IEnumBackgroundCopyGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IEnumBackgroundCopyGroups,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]Guid, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumBackgroundCopyGroups.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumBackgroundCopyGroups, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumBackgroundCopyGroups.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumBackgroundCopyGroups, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumBackgroundCopyGroups.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumBackgroundCopyGroups, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumBackgroundCopyGroups) HRESULT {
                return @as(*const IEnumBackgroundCopyGroups.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumBackgroundCopyGroups, @ptrCast(self)), ppenum_);
            }
            pub inline fn getCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IEnumBackgroundCopyGroups.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IEnumBackgroundCopyGroups, @ptrCast(self)), pu_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBackgroundCopyCallback1_Value = Guid.initString("084f6593-3800-4e08-9b59-99fa59addf82");
pub const IID_IBackgroundCopyCallback1 = &IID_IBackgroundCopyCallback1_Value;
pub const IBackgroundCopyCallback1 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStatus: *const fn (
            self: *const IBackgroundCopyCallback1,
            p_group: ?*IBackgroundCopyGroup,
            p_job: ?*IBackgroundCopyJob1,
            dw_file_index: u32,
            dw_status: u32,
            dw_num_of_retries: u32,
            dw_win32_result: u32,
            dw_transport_result: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnProgress: *const fn (
            self: *const IBackgroundCopyCallback1,
            progress_type: u32,
            p_group: ?*IBackgroundCopyGroup,
            p_job: ?*IBackgroundCopyJob1,
            dw_file_index: u32,
            dw_progress_value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnProgressEx: *const fn (
            self: *const IBackgroundCopyCallback1,
            progress_type: u32,
            p_group: ?*IBackgroundCopyGroup,
            p_job: ?*IBackgroundCopyJob1,
            dw_file_index: u32,
            dw_progress_value: u32,
            dw_byte_array_size: u32,
            p_byte: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onStatus(self: *const T, p_group_: ?*IBackgroundCopyGroup, p_job_: ?*IBackgroundCopyJob1, dw_file_index_: u32, dw_status_: u32, dw_num_of_retries_: u32, dw_win32_result_: u32, dw_transport_result_: u32) HRESULT {
                return @as(*const IBackgroundCopyCallback1.VTable, @ptrCast(self.vtable)).OnStatus(@as(*const IBackgroundCopyCallback1, @ptrCast(self)), p_group_, p_job_, dw_file_index_, dw_status_, dw_num_of_retries_, dw_win32_result_, dw_transport_result_);
            }
            pub inline fn onProgress(self: *const T, progress_type_: u32, p_group_: ?*IBackgroundCopyGroup, p_job_: ?*IBackgroundCopyJob1, dw_file_index_: u32, dw_progress_value_: u32) HRESULT {
                return @as(*const IBackgroundCopyCallback1.VTable, @ptrCast(self.vtable)).OnProgress(@as(*const IBackgroundCopyCallback1, @ptrCast(self)), progress_type_, p_group_, p_job_, dw_file_index_, dw_progress_value_);
            }
            pub inline fn onProgressEx(self: *const T, progress_type_: u32, p_group_: ?*IBackgroundCopyGroup, p_job_: ?*IBackgroundCopyJob1, dw_file_index_: u32, dw_progress_value_: u32, dw_byte_array_size_: u32, p_byte_: [*:0]u8) HRESULT {
                return @as(*const IBackgroundCopyCallback1.VTable, @ptrCast(self.vtable)).OnProgressEx(@as(*const IBackgroundCopyCallback1, @ptrCast(self)), progress_type_, p_group_, p_job_, dw_file_index_, dw_progress_value_, dw_byte_array_size_, p_byte_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBackgroundCopyQMgr_Value = Guid.initString("16f41c69-09f5-41d2-8cd8-3c08c47bc8a8");
pub const IID_IBackgroundCopyQMgr = &IID_IBackgroundCopyQMgr_Value;
pub const IBackgroundCopyQMgr = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateGroup: *const fn (
            self: *const IBackgroundCopyQMgr,
            guid_group_i_d: Guid,
            pp_group: ?*?*IBackgroundCopyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroup: *const fn (
            self: *const IBackgroundCopyQMgr,
            group_i_d: Guid,
            pp_group: ?*?*IBackgroundCopyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumGroups: *const fn (
            self: *const IBackgroundCopyQMgr,
            dw_flags: u32,
            pp_enum_groups: ?*?*IEnumBackgroundCopyGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createGroup(self: *const T, guid_group_i_d_: Guid, pp_group_: ?*?*IBackgroundCopyGroup) HRESULT {
                return @as(*const IBackgroundCopyQMgr.VTable, @ptrCast(self.vtable)).CreateGroup(@as(*const IBackgroundCopyQMgr, @ptrCast(self)), guid_group_i_d_, pp_group_);
            }
            pub inline fn getGroup(self: *const T, group_i_d_: Guid, pp_group_: ?*?*IBackgroundCopyGroup) HRESULT {
                return @as(*const IBackgroundCopyQMgr.VTable, @ptrCast(self.vtable)).GetGroup(@as(*const IBackgroundCopyQMgr, @ptrCast(self)), group_i_d_, pp_group_);
            }
            pub inline fn enumGroups(self: *const T, dw_flags_: u32, pp_enum_groups_: ?*?*IEnumBackgroundCopyGroups) HRESULT {
                return @as(*const IBackgroundCopyQMgr.VTable, @ptrCast(self.vtable)).EnumGroups(@as(*const IBackgroundCopyQMgr, @ptrCast(self)), dw_flags_, pp_enum_groups_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
