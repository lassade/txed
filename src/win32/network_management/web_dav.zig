//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const DAV_AUTHN_SCHEME_BASIC = @as(u32, 1);
pub const DAV_AUTHN_SCHEME_NTLM = @as(u32, 2);
pub const DAV_AUTHN_SCHEME_PASSPORT = @as(u32, 4);
pub const DAV_AUTHN_SCHEME_DIGEST = @as(u32, 8);
pub const DAV_AUTHN_SCHEME_NEGOTIATE = @as(u32, 16);
pub const DAV_AUTHN_SCHEME_CERT = @as(u32, 65536);
pub const DAV_AUTHN_SCHEME_FBA = @as(u32, 1048576);

//--------------------------------------------------------------------------------
// Section: Types (6)
//--------------------------------------------------------------------------------
pub const DAV_CALLBACK_AUTH_BLOB = extern struct {
    pBuffer: ?*anyopaque,
    ulSize: u32,
    ulType: u32,
};

pub const DAV_CALLBACK_AUTH_UNP = extern struct {
    pszUserName: ?PWSTR,
    ulUserNameLength: u32,
    pszPassword: ?PWSTR,
    ulPasswordLength: u32,
};

pub const DAV_CALLBACK_CRED = extern struct {
    AuthBlob: DAV_CALLBACK_AUTH_BLOB,
    UNPBlob: DAV_CALLBACK_AUTH_UNP,
    bAuthBlobValid: BOOL,
    bSave: BOOL,
};

pub const AUTHNEXTSTEP = enum(i32) {
    DefaultBehavior = 0,
    RetryRequest = 1,
    CancelRequest = 2,
};
pub const DefaultBehavior = AUTHNEXTSTEP.DefaultBehavior;
pub const RetryRequest = AUTHNEXTSTEP.RetryRequest;
pub const CancelRequest = AUTHNEXTSTEP.CancelRequest;

pub const PFNDAVAUTHCALLBACK_FREECRED = *const fn (
    pbuffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFNDAVAUTHCALLBACK = *const fn (
    lpwz_server_name: ?PWSTR,
    lpwz_remote_name: ?PWSTR,
    dw_auth_scheme: u32,
    dw_flags: u32,
    p_callback_cred: ?*DAV_CALLBACK_CRED,
    next_step: ?*AUTHNEXTSTEP,
    p_free_cred: ?*?PFNDAVAUTHCALLBACK_FREECRED,
) callconv(@import("std").os.windows.WINAPI) u32;

//--------------------------------------------------------------------------------
// Section: Functions (11)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DavAddConnection(
    connection_handle: ?*?HANDLE,
    remote_name: ?[*:0]const u16,
    user_name: ?[*:0]const u16,
    password: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 5?
    client_cert: ?*u8,
    cert_size: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DavDeleteConnection(
    connection_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DavGetUNCFromHTTPPath(
    url: ?[*:0]const u16,
    unc_path: ?[*:0]u16,
    lp_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DavGetHTTPFromUNCPath(
    unc_path: ?[*:0]const u16,
    url: ?[*:0]u16,
    lp_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "davclnt" fn DavGetTheLockOwnerOfTheFile(
    file_name: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 2?
    lock_owner_name: ?PWSTR,
    lock_owner_name_length_in_bytes: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DavGetExtendedError(
    h_file: ?HANDLE,
    ext_error: ?*u32,
    ext_error_string: [*:0]u16,
    c_ch_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn DavFlushFile(
    h_file: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "davclnt" fn DavInvalidateCache(
    u_r_l_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "davclnt" fn DavCancelConnectionsToServer(
    lp_name: ?PWSTR,
    f_force: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "davclnt" fn DavRegisterAuthCallback(
    call_back: ?PFNDAVAUTHCALLBACK,
    version: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "davclnt" fn DavUnregisterAuthCallback(
    h_callback: u32,
) callconv(@import("std").os.windows.WINAPI) void;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFNDAVAUTHCALLBACK_FREECRED")) {
        _ = PFNDAVAUTHCALLBACK_FREECRED;
    }
    if (@hasDecl(@This(), "PFNDAVAUTHCALLBACK")) {
        _ = PFNDAVAUTHCALLBACK;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
