//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const MCAST_CLIENT_ID_LEN = @as(u32, 17);
pub const MCAST_API_CURRENT_VERSION = @as(i32, 1);
pub const MCAST_API_VERSION_0 = @as(i32, 0);
pub const MCAST_API_VERSION_1 = @as(i32, 1);

//--------------------------------------------------------------------------------
// Section: Types (6)
//--------------------------------------------------------------------------------
pub const IPNG_ADDRESS = extern union {
    IpAddrV4: u32,
    IpAddrV6: [16]u8,
};

pub const MCAST_CLIENT_UID = extern struct {
    ClientUID: ?*u8,
    ClientUIDLength: u32,
};

pub const MCAST_SCOPE_CTX = extern struct {
    ScopeID: IPNG_ADDRESS,
    Interface: IPNG_ADDRESS,
    ServerID: IPNG_ADDRESS,
};

pub const MCAST_SCOPE_ENTRY = extern struct {
    ScopeCtx: MCAST_SCOPE_CTX,
    LastAddr: IPNG_ADDRESS,
    TTL: u32,
    ScopeDesc: UNICODE_STRING,
};

pub const MCAST_LEASE_REQUEST = extern struct {
    LeaseStartTime: i32,
    MaxLeaseStartTime: i32,
    LeaseDuration: u32,
    MinLeaseDuration: u32,
    ServerAddress: IPNG_ADDRESS,
    MinAddrCount: u16,
    AddrCount: u16,
    pAddrBuf: ?*u8,
};

pub const MCAST_LEASE_RESPONSE = extern struct {
    LeaseStartTime: i32,
    LeaseEndTime: i32,
    ServerAddress: IPNG_ADDRESS,
    AddrCount: u16,
    pAddrBuf: ?*u8,
};

//--------------------------------------------------------------------------------
// Section: Functions (7)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "dhcpcsvc" fn McastApiStartup(
    version: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "dhcpcsvc" fn McastApiCleanup() callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "dhcpcsvc" fn McastGenUID(
    p_request_i_d: ?*MCAST_CLIENT_UID,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "dhcpcsvc" fn McastEnumerateScopes(
    addr_family: u16,
    re_query: BOOL,
    p_scope_list: ?*MCAST_SCOPE_ENTRY,
    p_scope_len: ?*u32,
    p_scope_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "dhcpcsvc" fn McastRequestAddress(
    addr_family: u16,
    p_request_i_d: ?*MCAST_CLIENT_UID,
    p_scope_ctx: ?*MCAST_SCOPE_CTX,
    p_addr_request: ?*MCAST_LEASE_REQUEST,
    p_addr_response: ?*MCAST_LEASE_RESPONSE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "dhcpcsvc" fn McastRenewAddress(
    addr_family: u16,
    p_request_i_d: ?*MCAST_CLIENT_UID,
    p_renew_request: ?*MCAST_LEASE_REQUEST,
    p_renew_response: ?*MCAST_LEASE_RESPONSE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "dhcpcsvc" fn McastReleaseAddress(
    addr_family: u16,
    p_request_i_d: ?*MCAST_CLIENT_UID,
    p_release_request: ?*MCAST_LEASE_REQUEST,
) callconv(@import("std").os.windows.WINAPI) u32;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (2)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const UNICODE_STRING = @import("../foundation.zig").UNICODE_STRING;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
