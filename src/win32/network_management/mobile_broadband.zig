//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (92)
//--------------------------------------------------------------------------------
const CLSID_MbnConnectionProfileManager_Value = Guid.initString("bdfee05a-4418-11dd-90ed-001c257ccff1");
pub const CLSID_MbnConnectionProfileManager = &CLSID_MbnConnectionProfileManager_Value;

const CLSID_MbnInterfaceManager_Value = Guid.initString("bdfee05b-4418-11dd-90ed-001c257ccff1");
pub const CLSID_MbnInterfaceManager = &CLSID_MbnInterfaceManager_Value;

const CLSID_MbnConnectionManager_Value = Guid.initString("bdfee05c-4418-11dd-90ed-001c257ccff1");
pub const CLSID_MbnConnectionManager = &CLSID_MbnConnectionManager_Value;

const CLSID_MbnDeviceServicesManager_Value = Guid.initString("2269daa3-2a9f-4165-a501-ce00a6f7a75b");
pub const CLSID_MbnDeviceServicesManager = &CLSID_MbnDeviceServicesManager_Value;

const IID_IDummyMBNUCMExt_Value = Guid.initString("dcbbbab6-ffff-4bbb-aaee-338e368af6fa");
pub const IID_IDummyMBNUCMExt = &IID_IDummyMBNUCMExt_Value;
pub const IDummyMBNUCMExt = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const MBN_SIGNAL_CONSTANTS = enum(i32) {
    RSSI_DEFAULT = -1,
    RSSI_DISABLE = 0,
    RSSI_UNKNOWN = 99,
    // ERROR_RATE_UNKNOWN = 99, this enum value conflicts with RSSI_UNKNOWN
};
pub const MBN_RSSI_DEFAULT = MBN_SIGNAL_CONSTANTS.RSSI_DEFAULT;
pub const MBN_RSSI_DISABLE = MBN_SIGNAL_CONSTANTS.RSSI_DISABLE;
pub const MBN_RSSI_UNKNOWN = MBN_SIGNAL_CONSTANTS.RSSI_UNKNOWN;
pub const MBN_ERROR_RATE_UNKNOWN = MBN_SIGNAL_CONSTANTS.RSSI_UNKNOWN;

pub const MBN_CELLULAR_CLASS = enum(i32) {
    NONE = 0,
    GSM = 1,
    CDMA = 2,
};
pub const MBN_CELLULAR_CLASS_NONE = MBN_CELLULAR_CLASS.NONE;
pub const MBN_CELLULAR_CLASS_GSM = MBN_CELLULAR_CLASS.GSM;
pub const MBN_CELLULAR_CLASS_CDMA = MBN_CELLULAR_CLASS.CDMA;

pub const MBN_VOICE_CLASS = enum(i32) {
    NONE = 0,
    NO_VOICE = 1,
    SEPARATE_VOICE_DATA = 2,
    SIMULTANEOUS_VOICE_DATA = 3,
};
pub const MBN_VOICE_CLASS_NONE = MBN_VOICE_CLASS.NONE;
pub const MBN_VOICE_CLASS_NO_VOICE = MBN_VOICE_CLASS.NO_VOICE;
pub const MBN_VOICE_CLASS_SEPARATE_VOICE_DATA = MBN_VOICE_CLASS.SEPARATE_VOICE_DATA;
pub const MBN_VOICE_CLASS_SIMULTANEOUS_VOICE_DATA = MBN_VOICE_CLASS.SIMULTANEOUS_VOICE_DATA;

pub const MBN_PROVIDER_STATE = enum(i32) {
    NONE = 0,
    HOME = 1,
    FORBIDDEN = 2,
    PREFERRED = 4,
    VISIBLE = 8,
    REGISTERED = 16,
    PREFERRED_MULTICARRIER = 32,
};
pub const MBN_PROVIDER_STATE_NONE = MBN_PROVIDER_STATE.NONE;
pub const MBN_PROVIDER_STATE_HOME = MBN_PROVIDER_STATE.HOME;
pub const MBN_PROVIDER_STATE_FORBIDDEN = MBN_PROVIDER_STATE.FORBIDDEN;
pub const MBN_PROVIDER_STATE_PREFERRED = MBN_PROVIDER_STATE.PREFERRED;
pub const MBN_PROVIDER_STATE_VISIBLE = MBN_PROVIDER_STATE.VISIBLE;
pub const MBN_PROVIDER_STATE_REGISTERED = MBN_PROVIDER_STATE.REGISTERED;
pub const MBN_PROVIDER_STATE_PREFERRED_MULTICARRIER = MBN_PROVIDER_STATE.PREFERRED_MULTICARRIER;

pub const MBN_PROVIDER_CONSTANTS = enum(i32) {
    NAME_LEN = 20,
    ID_LEN = 6,
};
pub const MBN_PROVIDERNAME_LEN = MBN_PROVIDER_CONSTANTS.NAME_LEN;
pub const MBN_PROVIDERID_LEN = MBN_PROVIDER_CONSTANTS.ID_LEN;

pub const MBN_INTERFACE_CAPS_CONSTANTS = enum(i32) {
    DEVICEID_LEN = 18,
    MANUFACTURER_LEN = 32,
    // MODEL_LEN = 32, this enum value conflicts with MANUFACTURER_LEN
    // FIRMWARE_LEN = 32, this enum value conflicts with MANUFACTURER_LEN
};
pub const MBN_DEVICEID_LEN = MBN_INTERFACE_CAPS_CONSTANTS.DEVICEID_LEN;
pub const MBN_MANUFACTURER_LEN = MBN_INTERFACE_CAPS_CONSTANTS.MANUFACTURER_LEN;
pub const MBN_MODEL_LEN = MBN_INTERFACE_CAPS_CONSTANTS.MANUFACTURER_LEN;
pub const MBN_FIRMWARE_LEN = MBN_INTERFACE_CAPS_CONSTANTS.MANUFACTURER_LEN;

pub const MBN_DATA_CLASS = enum(i32) {
    NONE = 0,
    GPRS = 1,
    EDGE = 2,
    UMTS = 4,
    HSDPA = 8,
    HSUPA = 16,
    LTE = 32,
    @"5G_NSA" = 64,
    @"5G_SA" = 128,
    @"1XRTT" = 65536,
    @"1XEVDO" = 131072,
    @"1XEVDO_REVA" = 262144,
    @"1XEVDV" = 524288,
    @"3XRTT" = 1048576,
    @"1XEVDO_REVB" = 2097152,
    UMB = 4194304,
    CUSTOM = -2147483648,
};
pub const MBN_DATA_CLASS_NONE = MBN_DATA_CLASS.NONE;
pub const MBN_DATA_CLASS_GPRS = MBN_DATA_CLASS.GPRS;
pub const MBN_DATA_CLASS_EDGE = MBN_DATA_CLASS.EDGE;
pub const MBN_DATA_CLASS_UMTS = MBN_DATA_CLASS.UMTS;
pub const MBN_DATA_CLASS_HSDPA = MBN_DATA_CLASS.HSDPA;
pub const MBN_DATA_CLASS_HSUPA = MBN_DATA_CLASS.HSUPA;
pub const MBN_DATA_CLASS_LTE = MBN_DATA_CLASS.LTE;
pub const MBN_DATA_CLASS_5G_NSA = MBN_DATA_CLASS.@"5G_NSA";
pub const MBN_DATA_CLASS_5G_SA = MBN_DATA_CLASS.@"5G_SA";
pub const MBN_DATA_CLASS_1XRTT = MBN_DATA_CLASS.@"1XRTT";
pub const MBN_DATA_CLASS_1XEVDO = MBN_DATA_CLASS.@"1XEVDO";
pub const MBN_DATA_CLASS_1XEVDO_REVA = MBN_DATA_CLASS.@"1XEVDO_REVA";
pub const MBN_DATA_CLASS_1XEVDV = MBN_DATA_CLASS.@"1XEVDV";
pub const MBN_DATA_CLASS_3XRTT = MBN_DATA_CLASS.@"3XRTT";
pub const MBN_DATA_CLASS_1XEVDO_REVB = MBN_DATA_CLASS.@"1XEVDO_REVB";
pub const MBN_DATA_CLASS_UMB = MBN_DATA_CLASS.UMB;
pub const MBN_DATA_CLASS_CUSTOM = MBN_DATA_CLASS.CUSTOM;

pub const MBN_CTRL_CAPS = enum(i32) {
    NONE = 0,
    REG_MANUAL = 1,
    HW_RADIO_SWITCH = 2,
    CDMA_MOBILE_IP = 4,
    CDMA_SIMPLE_IP = 8,
    PROTECT_UNIQUEID = 16,
    MODEL_MULTI_CARRIER = 32,
    USSD = 64,
    MULTI_MODE = 128,
};
pub const MBN_CTRL_CAPS_NONE = MBN_CTRL_CAPS.NONE;
pub const MBN_CTRL_CAPS_REG_MANUAL = MBN_CTRL_CAPS.REG_MANUAL;
pub const MBN_CTRL_CAPS_HW_RADIO_SWITCH = MBN_CTRL_CAPS.HW_RADIO_SWITCH;
pub const MBN_CTRL_CAPS_CDMA_MOBILE_IP = MBN_CTRL_CAPS.CDMA_MOBILE_IP;
pub const MBN_CTRL_CAPS_CDMA_SIMPLE_IP = MBN_CTRL_CAPS.CDMA_SIMPLE_IP;
pub const MBN_CTRL_CAPS_PROTECT_UNIQUEID = MBN_CTRL_CAPS.PROTECT_UNIQUEID;
pub const MBN_CTRL_CAPS_MODEL_MULTI_CARRIER = MBN_CTRL_CAPS.MODEL_MULTI_CARRIER;
pub const MBN_CTRL_CAPS_USSD = MBN_CTRL_CAPS.USSD;
pub const MBN_CTRL_CAPS_MULTI_MODE = MBN_CTRL_CAPS.MULTI_MODE;

pub const MBN_SMS_CAPS = enum(i32) {
    NONE = 0,
    PDU_RECEIVE = 1,
    PDU_SEND = 2,
    TEXT_RECEIVE = 4,
    TEXT_SEND = 8,
};
pub const MBN_SMS_CAPS_NONE = MBN_SMS_CAPS.NONE;
pub const MBN_SMS_CAPS_PDU_RECEIVE = MBN_SMS_CAPS.PDU_RECEIVE;
pub const MBN_SMS_CAPS_PDU_SEND = MBN_SMS_CAPS.PDU_SEND;
pub const MBN_SMS_CAPS_TEXT_RECEIVE = MBN_SMS_CAPS.TEXT_RECEIVE;
pub const MBN_SMS_CAPS_TEXT_SEND = MBN_SMS_CAPS.TEXT_SEND;

pub const MBN_BAND_CLASS = enum(i32) {
    NONE = 0,
    @"0" = 1,
    I = 2,
    II = 4,
    III = 8,
    IV = 16,
    V = 32,
    VI = 64,
    VII = 128,
    VIII = 256,
    IX = 512,
    X = 1024,
    XI = 2048,
    XII = 4096,
    XIII = 8192,
    XIV = 16384,
    XV = 32768,
    XVI = 65536,
    XVII = 131072,
    CUSTOM = -2147483648,
};
pub const MBN_BAND_CLASS_NONE = MBN_BAND_CLASS.NONE;
pub const MBN_BAND_CLASS_0 = MBN_BAND_CLASS.@"0";
pub const MBN_BAND_CLASS_I = MBN_BAND_CLASS.I;
pub const MBN_BAND_CLASS_II = MBN_BAND_CLASS.II;
pub const MBN_BAND_CLASS_III = MBN_BAND_CLASS.III;
pub const MBN_BAND_CLASS_IV = MBN_BAND_CLASS.IV;
pub const MBN_BAND_CLASS_V = MBN_BAND_CLASS.V;
pub const MBN_BAND_CLASS_VI = MBN_BAND_CLASS.VI;
pub const MBN_BAND_CLASS_VII = MBN_BAND_CLASS.VII;
pub const MBN_BAND_CLASS_VIII = MBN_BAND_CLASS.VIII;
pub const MBN_BAND_CLASS_IX = MBN_BAND_CLASS.IX;
pub const MBN_BAND_CLASS_X = MBN_BAND_CLASS.X;
pub const MBN_BAND_CLASS_XI = MBN_BAND_CLASS.XI;
pub const MBN_BAND_CLASS_XII = MBN_BAND_CLASS.XII;
pub const MBN_BAND_CLASS_XIII = MBN_BAND_CLASS.XIII;
pub const MBN_BAND_CLASS_XIV = MBN_BAND_CLASS.XIV;
pub const MBN_BAND_CLASS_XV = MBN_BAND_CLASS.XV;
pub const MBN_BAND_CLASS_XVI = MBN_BAND_CLASS.XVI;
pub const MBN_BAND_CLASS_XVII = MBN_BAND_CLASS.XVII;
pub const MBN_BAND_CLASS_CUSTOM = MBN_BAND_CLASS.CUSTOM;

pub const MBN_INTERFACE_CAPS = extern struct {
    cellularClass: MBN_CELLULAR_CLASS,
    voiceClass: MBN_VOICE_CLASS,
    dataClass: u32,
    customDataClass: ?BSTR,
    gsmBandClass: u32,
    cdmaBandClass: u32,
    customBandClass: ?BSTR,
    smsCaps: u32,
    controlCaps: u32,
    deviceID: ?BSTR,
    manufacturer: ?BSTR,
    model: ?BSTR,
    firmwareInfo: ?BSTR,
};

pub const MBN_PROVIDER = extern struct {
    providerID: ?BSTR,
    providerState: u32,
    providerName: ?BSTR,
    dataClass: u32,
};

pub const MBN_PROVIDER2 = extern struct {
    provider: MBN_PROVIDER,
    cellularClass: MBN_CELLULAR_CLASS,
    signalStrength: u32,
    signalError: u32,
};

pub const MBN_READY_STATE = enum(i32) {
    OFF = 0,
    INITIALIZED = 1,
    SIM_NOT_INSERTED = 2,
    BAD_SIM = 3,
    FAILURE = 4,
    NOT_ACTIVATED = 5,
    DEVICE_LOCKED = 6,
    DEVICE_BLOCKED = 7,
    NO_ESIM_PROFILE = 8,
};
pub const MBN_READY_STATE_OFF = MBN_READY_STATE.OFF;
pub const MBN_READY_STATE_INITIALIZED = MBN_READY_STATE.INITIALIZED;
pub const MBN_READY_STATE_SIM_NOT_INSERTED = MBN_READY_STATE.SIM_NOT_INSERTED;
pub const MBN_READY_STATE_BAD_SIM = MBN_READY_STATE.BAD_SIM;
pub const MBN_READY_STATE_FAILURE = MBN_READY_STATE.FAILURE;
pub const MBN_READY_STATE_NOT_ACTIVATED = MBN_READY_STATE.NOT_ACTIVATED;
pub const MBN_READY_STATE_DEVICE_LOCKED = MBN_READY_STATE.DEVICE_LOCKED;
pub const MBN_READY_STATE_DEVICE_BLOCKED = MBN_READY_STATE.DEVICE_BLOCKED;
pub const MBN_READY_STATE_NO_ESIM_PROFILE = MBN_READY_STATE.NO_ESIM_PROFILE;

pub const MBN_ACTIVATION_STATE = enum(i32) {
    NONE = 0,
    ACTIVATED = 1,
    ACTIVATING = 2,
    DEACTIVATED = 3,
    DEACTIVATING = 4,
};
pub const MBN_ACTIVATION_STATE_NONE = MBN_ACTIVATION_STATE.NONE;
pub const MBN_ACTIVATION_STATE_ACTIVATED = MBN_ACTIVATION_STATE.ACTIVATED;
pub const MBN_ACTIVATION_STATE_ACTIVATING = MBN_ACTIVATION_STATE.ACTIVATING;
pub const MBN_ACTIVATION_STATE_DEACTIVATED = MBN_ACTIVATION_STATE.DEACTIVATED;
pub const MBN_ACTIVATION_STATE_DEACTIVATING = MBN_ACTIVATION_STATE.DEACTIVATING;

pub const MBN_CONNECTION_MODE = enum(i32) {
    PROFILE = 0,
    TMP_PROFILE = 1,
};
pub const MBN_CONNECTION_MODE_PROFILE = MBN_CONNECTION_MODE.PROFILE;
pub const MBN_CONNECTION_MODE_TMP_PROFILE = MBN_CONNECTION_MODE.TMP_PROFILE;

pub const MBN_VOICE_CALL_STATE = enum(i32) {
    NONE = 0,
    IN_PROGRESS = 1,
    HANGUP = 2,
};
pub const MBN_VOICE_CALL_STATE_NONE = MBN_VOICE_CALL_STATE.NONE;
pub const MBN_VOICE_CALL_STATE_IN_PROGRESS = MBN_VOICE_CALL_STATE.IN_PROGRESS;
pub const MBN_VOICE_CALL_STATE_HANGUP = MBN_VOICE_CALL_STATE.HANGUP;

pub const MBN_REGISTRATION_CONSTANTS = enum(i32) {
    ROAMTEXT_LEN = 64,
    CDMA_DEFAULT_PROVIDER_ID = 0,
};
pub const MBN_ROAMTEXT_LEN = MBN_REGISTRATION_CONSTANTS.ROAMTEXT_LEN;
pub const MBN_CDMA_DEFAULT_PROVIDER_ID = MBN_REGISTRATION_CONSTANTS.CDMA_DEFAULT_PROVIDER_ID;

pub const MBN_REGISTER_STATE = enum(i32) {
    NONE = 0,
    DEREGISTERED = 1,
    SEARCHING = 2,
    HOME = 3,
    ROAMING = 4,
    PARTNER = 5,
    DENIED = 6,
};
pub const MBN_REGISTER_STATE_NONE = MBN_REGISTER_STATE.NONE;
pub const MBN_REGISTER_STATE_DEREGISTERED = MBN_REGISTER_STATE.DEREGISTERED;
pub const MBN_REGISTER_STATE_SEARCHING = MBN_REGISTER_STATE.SEARCHING;
pub const MBN_REGISTER_STATE_HOME = MBN_REGISTER_STATE.HOME;
pub const MBN_REGISTER_STATE_ROAMING = MBN_REGISTER_STATE.ROAMING;
pub const MBN_REGISTER_STATE_PARTNER = MBN_REGISTER_STATE.PARTNER;
pub const MBN_REGISTER_STATE_DENIED = MBN_REGISTER_STATE.DENIED;

pub const MBN_REGISTER_MODE = enum(i32) {
    NONE = 0,
    AUTOMATIC = 1,
    MANUAL = 2,
};
pub const MBN_REGISTER_MODE_NONE = MBN_REGISTER_MODE.NONE;
pub const MBN_REGISTER_MODE_AUTOMATIC = MBN_REGISTER_MODE.AUTOMATIC;
pub const MBN_REGISTER_MODE_MANUAL = MBN_REGISTER_MODE.MANUAL;

pub const MBN_PIN_CONSTANTS = enum(i32) {
    ATTEMPTS_REMAINING_UNKNOWN = -1,
    // PIN_LENGTH_UNKNOWN = -1, this enum value conflicts with ATTEMPTS_REMAINING_UNKNOWN
};
pub const MBN_ATTEMPTS_REMAINING_UNKNOWN = MBN_PIN_CONSTANTS.ATTEMPTS_REMAINING_UNKNOWN;
pub const MBN_PIN_LENGTH_UNKNOWN = MBN_PIN_CONSTANTS.ATTEMPTS_REMAINING_UNKNOWN;

pub const MBN_PIN_STATE = enum(i32) {
    NONE = 0,
    ENTER = 1,
    UNBLOCK = 2,
};
pub const MBN_PIN_STATE_NONE = MBN_PIN_STATE.NONE;
pub const MBN_PIN_STATE_ENTER = MBN_PIN_STATE.ENTER;
pub const MBN_PIN_STATE_UNBLOCK = MBN_PIN_STATE.UNBLOCK;

pub const MBN_PIN_TYPE = enum(i32) {
    NONE = 0,
    CUSTOM = 1,
    PIN1 = 2,
    PIN2 = 3,
    DEVICE_SIM_PIN = 4,
    DEVICE_FIRST_SIM_PIN = 5,
    NETWORK_PIN = 6,
    NETWORK_SUBSET_PIN = 7,
    SVC_PROVIDER_PIN = 8,
    CORPORATE_PIN = 9,
    SUBSIDY_LOCK = 10,
};
pub const MBN_PIN_TYPE_NONE = MBN_PIN_TYPE.NONE;
pub const MBN_PIN_TYPE_CUSTOM = MBN_PIN_TYPE.CUSTOM;
pub const MBN_PIN_TYPE_PIN1 = MBN_PIN_TYPE.PIN1;
pub const MBN_PIN_TYPE_PIN2 = MBN_PIN_TYPE.PIN2;
pub const MBN_PIN_TYPE_DEVICE_SIM_PIN = MBN_PIN_TYPE.DEVICE_SIM_PIN;
pub const MBN_PIN_TYPE_DEVICE_FIRST_SIM_PIN = MBN_PIN_TYPE.DEVICE_FIRST_SIM_PIN;
pub const MBN_PIN_TYPE_NETWORK_PIN = MBN_PIN_TYPE.NETWORK_PIN;
pub const MBN_PIN_TYPE_NETWORK_SUBSET_PIN = MBN_PIN_TYPE.NETWORK_SUBSET_PIN;
pub const MBN_PIN_TYPE_SVC_PROVIDER_PIN = MBN_PIN_TYPE.SVC_PROVIDER_PIN;
pub const MBN_PIN_TYPE_CORPORATE_PIN = MBN_PIN_TYPE.CORPORATE_PIN;
pub const MBN_PIN_TYPE_SUBSIDY_LOCK = MBN_PIN_TYPE.SUBSIDY_LOCK;

pub const MBN_PIN_INFO = extern struct {
    pinState: MBN_PIN_STATE,
    pinType: MBN_PIN_TYPE,
    attemptsRemaining: u32,
};

pub const MBN_PIN_MODE = enum(i32) {
    ENABLED = 1,
    DISABLED = 2,
};
pub const MBN_PIN_MODE_ENABLED = MBN_PIN_MODE.ENABLED;
pub const MBN_PIN_MODE_DISABLED = MBN_PIN_MODE.DISABLED;

pub const MBN_PIN_FORMAT = enum(i32) {
    NONE = 0,
    NUMERIC = 1,
    ALPHANUMERIC = 2,
};
pub const MBN_PIN_FORMAT_NONE = MBN_PIN_FORMAT.NONE;
pub const MBN_PIN_FORMAT_NUMERIC = MBN_PIN_FORMAT.NUMERIC;
pub const MBN_PIN_FORMAT_ALPHANUMERIC = MBN_PIN_FORMAT.ALPHANUMERIC;

pub const MBN_CONTEXT_CONSTANTS = enum(i32) {
    ACCESSSTRING_LEN = 100,
    USERNAME_LEN = 255,
    // PASSWORD_LEN = 255, this enum value conflicts with USERNAME_LEN
    CONTEXT_ID_APPEND = -1,
};
pub const MBN_ACCESSSTRING_LEN = MBN_CONTEXT_CONSTANTS.ACCESSSTRING_LEN;
pub const MBN_USERNAME_LEN = MBN_CONTEXT_CONSTANTS.USERNAME_LEN;
pub const MBN_PASSWORD_LEN = MBN_CONTEXT_CONSTANTS.USERNAME_LEN;
pub const MBN_CONTEXT_ID_APPEND = MBN_CONTEXT_CONSTANTS.CONTEXT_ID_APPEND;

pub const MBN_AUTH_PROTOCOL = enum(i32) {
    NONE = 0,
    PAP = 1,
    CHAP = 2,
    MSCHAPV2 = 3,
};
pub const MBN_AUTH_PROTOCOL_NONE = MBN_AUTH_PROTOCOL.NONE;
pub const MBN_AUTH_PROTOCOL_PAP = MBN_AUTH_PROTOCOL.PAP;
pub const MBN_AUTH_PROTOCOL_CHAP = MBN_AUTH_PROTOCOL.CHAP;
pub const MBN_AUTH_PROTOCOL_MSCHAPV2 = MBN_AUTH_PROTOCOL.MSCHAPV2;

pub const MBN_COMPRESSION = enum(i32) {
    NONE = 0,
    ENABLE = 1,
};
pub const MBN_COMPRESSION_NONE = MBN_COMPRESSION.NONE;
pub const MBN_COMPRESSION_ENABLE = MBN_COMPRESSION.ENABLE;

pub const MBN_CONTEXT_TYPE = enum(i32) {
    NONE = 0,
    INTERNET = 1,
    VPN = 2,
    VOICE = 3,
    VIDEO_SHARE = 4,
    CUSTOM = 5,
    PURCHASE = 6,
};
pub const MBN_CONTEXT_TYPE_NONE = MBN_CONTEXT_TYPE.NONE;
pub const MBN_CONTEXT_TYPE_INTERNET = MBN_CONTEXT_TYPE.INTERNET;
pub const MBN_CONTEXT_TYPE_VPN = MBN_CONTEXT_TYPE.VPN;
pub const MBN_CONTEXT_TYPE_VOICE = MBN_CONTEXT_TYPE.VOICE;
pub const MBN_CONTEXT_TYPE_VIDEO_SHARE = MBN_CONTEXT_TYPE.VIDEO_SHARE;
pub const MBN_CONTEXT_TYPE_CUSTOM = MBN_CONTEXT_TYPE.CUSTOM;
pub const MBN_CONTEXT_TYPE_PURCHASE = MBN_CONTEXT_TYPE.PURCHASE;

pub const MBN_CONTEXT = extern struct {
    contextID: u32,
    contextType: MBN_CONTEXT_TYPE,
    accessString: ?BSTR,
    userName: ?BSTR,
    password: ?BSTR,
    compression: MBN_COMPRESSION,
    authType: MBN_AUTH_PROTOCOL,
};

pub const WWAEXT_SMS_CONSTANTS = enum(i32) {
    MESSAGE_INDEX_NONE = 0,
    // CDMA_SHORT_MSG_SIZE_UNKNOWN = 0, this enum value conflicts with MESSAGE_INDEX_NONE
    CDMA_SHORT_MSG_SIZE_MAX = 160,
};
pub const MBN_MESSAGE_INDEX_NONE = WWAEXT_SMS_CONSTANTS.MESSAGE_INDEX_NONE;
pub const MBN_CDMA_SHORT_MSG_SIZE_UNKNOWN = WWAEXT_SMS_CONSTANTS.MESSAGE_INDEX_NONE;
pub const MBN_CDMA_SHORT_MSG_SIZE_MAX = WWAEXT_SMS_CONSTANTS.CDMA_SHORT_MSG_SIZE_MAX;

pub const MBN_MSG_STATUS = enum(i32) {
    NEW = 0,
    OLD = 1,
    DRAFT = 2,
    SENT = 3,
};
pub const MBN_MSG_STATUS_NEW = MBN_MSG_STATUS.NEW;
pub const MBN_MSG_STATUS_OLD = MBN_MSG_STATUS.OLD;
pub const MBN_MSG_STATUS_DRAFT = MBN_MSG_STATUS.DRAFT;
pub const MBN_MSG_STATUS_SENT = MBN_MSG_STATUS.SENT;

pub const MBN_SMS_CDMA_LANG = enum(i32) {
    NONE = 0,
    ENGLISH = 1,
    FRENCH = 2,
    SPANISH = 3,
    JAPANESE = 4,
    KOREAN = 5,
    CHINESE = 6,
    HEBREW = 7,
};
pub const MBN_SMS_CDMA_LANG_NONE = MBN_SMS_CDMA_LANG.NONE;
pub const MBN_SMS_CDMA_LANG_ENGLISH = MBN_SMS_CDMA_LANG.ENGLISH;
pub const MBN_SMS_CDMA_LANG_FRENCH = MBN_SMS_CDMA_LANG.FRENCH;
pub const MBN_SMS_CDMA_LANG_SPANISH = MBN_SMS_CDMA_LANG.SPANISH;
pub const MBN_SMS_CDMA_LANG_JAPANESE = MBN_SMS_CDMA_LANG.JAPANESE;
pub const MBN_SMS_CDMA_LANG_KOREAN = MBN_SMS_CDMA_LANG.KOREAN;
pub const MBN_SMS_CDMA_LANG_CHINESE = MBN_SMS_CDMA_LANG.CHINESE;
pub const MBN_SMS_CDMA_LANG_HEBREW = MBN_SMS_CDMA_LANG.HEBREW;

pub const MBN_SMS_CDMA_ENCODING = enum(i32) {
    OCTET = 0,
    EPM = 1,
    @"7BIT_ASCII" = 2,
    IA5 = 3,
    UNICODE = 4,
    SHIFT_JIS = 5,
    KOREAN = 6,
    LATIN_HEBREW = 7,
    LATIN = 8,
    GSM_7BIT = 9,
};
pub const MBN_SMS_CDMA_ENCODING_OCTET = MBN_SMS_CDMA_ENCODING.OCTET;
pub const MBN_SMS_CDMA_ENCODING_EPM = MBN_SMS_CDMA_ENCODING.EPM;
pub const MBN_SMS_CDMA_ENCODING_7BIT_ASCII = MBN_SMS_CDMA_ENCODING.@"7BIT_ASCII";
pub const MBN_SMS_CDMA_ENCODING_IA5 = MBN_SMS_CDMA_ENCODING.IA5;
pub const MBN_SMS_CDMA_ENCODING_UNICODE = MBN_SMS_CDMA_ENCODING.UNICODE;
pub const MBN_SMS_CDMA_ENCODING_SHIFT_JIS = MBN_SMS_CDMA_ENCODING.SHIFT_JIS;
pub const MBN_SMS_CDMA_ENCODING_KOREAN = MBN_SMS_CDMA_ENCODING.KOREAN;
pub const MBN_SMS_CDMA_ENCODING_LATIN_HEBREW = MBN_SMS_CDMA_ENCODING.LATIN_HEBREW;
pub const MBN_SMS_CDMA_ENCODING_LATIN = MBN_SMS_CDMA_ENCODING.LATIN;
pub const MBN_SMS_CDMA_ENCODING_GSM_7BIT = MBN_SMS_CDMA_ENCODING.GSM_7BIT;

pub const MBN_SMS_FLAG = enum(i32) {
    ALL = 0,
    INDEX = 1,
    NEW = 2,
    OLD = 3,
    SENT = 4,
    DRAFT = 5,
};
pub const MBN_SMS_FLAG_ALL = MBN_SMS_FLAG.ALL;
pub const MBN_SMS_FLAG_INDEX = MBN_SMS_FLAG.INDEX;
pub const MBN_SMS_FLAG_NEW = MBN_SMS_FLAG.NEW;
pub const MBN_SMS_FLAG_OLD = MBN_SMS_FLAG.OLD;
pub const MBN_SMS_FLAG_SENT = MBN_SMS_FLAG.SENT;
pub const MBN_SMS_FLAG_DRAFT = MBN_SMS_FLAG.DRAFT;

pub const MBN_SMS_FILTER = extern struct {
    flag: MBN_SMS_FLAG,
    messageIndex: u32,
};

pub const MBN_SMS_STATUS_FLAG = enum(i32) {
    NONE = 0,
    MESSAGE_STORE_FULL = 1,
    NEW_MESSAGE = 2,
};
pub const MBN_SMS_FLAG_NONE = MBN_SMS_STATUS_FLAG.NONE;
pub const MBN_SMS_FLAG_MESSAGE_STORE_FULL = MBN_SMS_STATUS_FLAG.MESSAGE_STORE_FULL;
pub const MBN_SMS_FLAG_NEW_MESSAGE = MBN_SMS_STATUS_FLAG.NEW_MESSAGE;

pub const MBN_SMS_STATUS_INFO = extern struct {
    flag: u32,
    messageIndex: u32,
};

pub const MBN_SMS_FORMAT = enum(i32) {
    NONE = 0,
    PDU = 1,
    TEXT = 2,
};
pub const MBN_SMS_FORMAT_NONE = MBN_SMS_FORMAT.NONE;
pub const MBN_SMS_FORMAT_PDU = MBN_SMS_FORMAT.PDU;
pub const MBN_SMS_FORMAT_TEXT = MBN_SMS_FORMAT.TEXT;

pub const MBN_RADIO = enum(i32) {
    FF = 0,
    N = 1,
};
pub const MBN_RADIO_OFF = MBN_RADIO.FF;
pub const MBN_RADIO_ON = MBN_RADIO.N;

pub const MBN_DEVICE_SERVICE_SESSIONS_STATE = enum(i32) {
    D = 0,
};
pub const MBN_DEVICE_SERVICE_SESSIONS_RESTORED = MBN_DEVICE_SERVICE_SESSIONS_STATE.D;

pub const MBN_DEVICE_SERVICE = extern struct {
    deviceServiceID: ?BSTR,
    dataWriteSupported: i16,
    dataReadSupported: i16,
};

pub const MBN_DEVICE_SERVICES_INTERFACE_STATE = enum(i32) {
    ARRIVAL = 0,
    REMOVAL = 1,
};
pub const MBN_DEVICE_SERVICES_CAPABLE_INTERFACE_ARRIVAL = MBN_DEVICE_SERVICES_INTERFACE_STATE.ARRIVAL;
pub const MBN_DEVICE_SERVICES_CAPABLE_INTERFACE_REMOVAL = MBN_DEVICE_SERVICES_INTERFACE_STATE.REMOVAL;

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnection_Value = Guid.initString("dcbbbab6-200d-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnection = &IID_IMbnConnection_Value;
pub const IMbnConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectionID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnConnection,
            connection_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InterfaceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnConnection,
            interface_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn (
            self: *const IMbnConnection,
            connection_mode: MBN_CONNECTION_MODE,
            str_profile: ?[*:0]const u16,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const IMbnConnection,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionState: *const fn (
            self: *const IMbnConnection,
            connection_state: ?*MBN_ACTIVATION_STATE,
            profile_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVoiceCallState: *const fn (
            self: *const IMbnConnection,
            voice_call_state: ?*MBN_VOICE_CALL_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActivationNetworkError: *const fn (
            self: *const IMbnConnection,
            network_error: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getConnectionID(self: *const T, connection_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMbnConnection.VTable, @ptrCast(self.vtable)).get_ConnectionID(@as(*const IMbnConnection, @ptrCast(self)), connection_i_d_);
            }
            pub inline fn getInterfaceID(self: *const T, interface_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMbnConnection.VTable, @ptrCast(self.vtable)).get_InterfaceID(@as(*const IMbnConnection, @ptrCast(self)), interface_i_d_);
            }
            pub inline fn connect(self: *const T, connection_mode_: MBN_CONNECTION_MODE, str_profile_: ?[*:0]const u16, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnConnection.VTable, @ptrCast(self.vtable)).Connect(@as(*const IMbnConnection, @ptrCast(self)), connection_mode_, str_profile_, request_i_d_);
            }
            pub inline fn disconnect(self: *const T, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnConnection.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IMbnConnection, @ptrCast(self)), request_i_d_);
            }
            pub inline fn getConnectionState(self: *const T, connection_state_: ?*MBN_ACTIVATION_STATE, profile_name_: ?*?BSTR) HRESULT {
                return @as(*const IMbnConnection.VTable, @ptrCast(self.vtable)).GetConnectionState(@as(*const IMbnConnection, @ptrCast(self)), connection_state_, profile_name_);
            }
            pub inline fn getVoiceCallState(self: *const T, voice_call_state_: ?*MBN_VOICE_CALL_STATE) HRESULT {
                return @as(*const IMbnConnection.VTable, @ptrCast(self.vtable)).GetVoiceCallState(@as(*const IMbnConnection, @ptrCast(self)), voice_call_state_);
            }
            pub inline fn getActivationNetworkError(self: *const T, network_error_: ?*u32) HRESULT {
                return @as(*const IMbnConnection.VTable, @ptrCast(self.vtable)).GetActivationNetworkError(@as(*const IMbnConnection, @ptrCast(self)), network_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnectionEvents_Value = Guid.initString("dcbbbab6-200e-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnectionEvents = &IID_IMbnConnectionEvents_Value;
pub const IMbnConnectionEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConnectComplete: *const fn (
            self: *const IMbnConnectionEvents,
            new_connection: ?*IMbnConnection,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDisconnectComplete: *const fn (
            self: *const IMbnConnectionEvents,
            new_connection: ?*IMbnConnection,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnConnectStateChange: *const fn (
            self: *const IMbnConnectionEvents,
            new_connection: ?*IMbnConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnVoiceCallStateChange: *const fn (
            self: *const IMbnConnectionEvents,
            new_connection: ?*IMbnConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onConnectComplete(self: *const T, new_connection_: ?*IMbnConnection, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnConnectionEvents.VTable, @ptrCast(self.vtable)).OnConnectComplete(@as(*const IMbnConnectionEvents, @ptrCast(self)), new_connection_, request_i_d_, status_);
            }
            pub inline fn onDisconnectComplete(self: *const T, new_connection_: ?*IMbnConnection, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnConnectionEvents.VTable, @ptrCast(self.vtable)).OnDisconnectComplete(@as(*const IMbnConnectionEvents, @ptrCast(self)), new_connection_, request_i_d_, status_);
            }
            pub inline fn onConnectStateChange(self: *const T, new_connection_: ?*IMbnConnection) HRESULT {
                return @as(*const IMbnConnectionEvents.VTable, @ptrCast(self.vtable)).OnConnectStateChange(@as(*const IMbnConnectionEvents, @ptrCast(self)), new_connection_);
            }
            pub inline fn onVoiceCallStateChange(self: *const T, new_connection_: ?*IMbnConnection) HRESULT {
                return @as(*const IMbnConnectionEvents.VTable, @ptrCast(self.vtable)).OnVoiceCallStateChange(@as(*const IMbnConnectionEvents, @ptrCast(self)), new_connection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnInterface_Value = Guid.initString("dcbbbab6-2001-4bbb-aaee-338e368af6fa");
pub const IID_IMbnInterface = &IID_IMbnInterface_Value;
pub const IMbnInterface = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InterfaceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnInterface,
            interface_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInterfaceCapability: *const fn (
            self: *const IMbnInterface,
            interface_caps: ?*MBN_INTERFACE_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscriberInformation: *const fn (
            self: *const IMbnInterface,
            subscriber_information: ?*?*IMbnSubscriberInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReadyState: *const fn (
            self: *const IMbnInterface,
            ready_state: ?*MBN_READY_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InEmergencyMode: *const fn (
            self: *const IMbnInterface,
            emergency_mode: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHomeProvider: *const fn (
            self: *const IMbnInterface,
            home_provider: ?*MBN_PROVIDER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreferredProviders: *const fn (
            self: *const IMbnInterface,
            preferred_providers: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreferredProviders: *const fn (
            self: *const IMbnInterface,
            preferred_providers: ?*SAFEARRAY,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisibleProviders: *const fn (
            self: *const IMbnInterface,
            age: ?*u32,
            visible_providers: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScanNetwork: *const fn (
            self: *const IMbnInterface,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnection: *const fn (
            self: *const IMbnInterface,
            mbn_connection: ?*?*IMbnConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInterfaceID(self: *const T, interface_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).get_InterfaceID(@as(*const IMbnInterface, @ptrCast(self)), interface_i_d_);
            }
            pub inline fn getInterfaceCapability(self: *const T, interface_caps_: ?*MBN_INTERFACE_CAPS) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).GetInterfaceCapability(@as(*const IMbnInterface, @ptrCast(self)), interface_caps_);
            }
            pub inline fn getSubscriberInformation(self: *const T, subscriber_information_: ?*?*IMbnSubscriberInformation) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).GetSubscriberInformation(@as(*const IMbnInterface, @ptrCast(self)), subscriber_information_);
            }
            pub inline fn getReadyState(self: *const T, ready_state_: ?*MBN_READY_STATE) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).GetReadyState(@as(*const IMbnInterface, @ptrCast(self)), ready_state_);
            }
            pub inline fn inEmergencyMode(self: *const T, emergency_mode_: ?*i16) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).InEmergencyMode(@as(*const IMbnInterface, @ptrCast(self)), emergency_mode_);
            }
            pub inline fn getHomeProvider(self: *const T, home_provider_: ?*MBN_PROVIDER) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).GetHomeProvider(@as(*const IMbnInterface, @ptrCast(self)), home_provider_);
            }
            pub inline fn getPreferredProviders(self: *const T, preferred_providers_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).GetPreferredProviders(@as(*const IMbnInterface, @ptrCast(self)), preferred_providers_);
            }
            pub inline fn setPreferredProviders(self: *const T, preferred_providers_: ?*SAFEARRAY, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).SetPreferredProviders(@as(*const IMbnInterface, @ptrCast(self)), preferred_providers_, request_i_d_);
            }
            pub inline fn getVisibleProviders(self: *const T, age_: ?*u32, visible_providers_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).GetVisibleProviders(@as(*const IMbnInterface, @ptrCast(self)), age_, visible_providers_);
            }
            pub inline fn scanNetwork(self: *const T, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).ScanNetwork(@as(*const IMbnInterface, @ptrCast(self)), request_i_d_);
            }
            pub inline fn getConnection(self: *const T, mbn_connection_: ?*?*IMbnConnection) HRESULT {
                return @as(*const IMbnInterface.VTable, @ptrCast(self.vtable)).GetConnection(@as(*const IMbnInterface, @ptrCast(self)), mbn_connection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnInterfaceEvents_Value = Guid.initString("dcbbbab6-2002-4bbb-aaee-338e368af6fa");
pub const IID_IMbnInterfaceEvents = &IID_IMbnInterfaceEvents_Value;
pub const IMbnInterfaceEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnInterfaceCapabilityAvailable: *const fn (
            self: *const IMbnInterfaceEvents,
            new_interface: ?*IMbnInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSubscriberInformationChange: *const fn (
            self: *const IMbnInterfaceEvents,
            new_interface: ?*IMbnInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnReadyStateChange: *const fn (
            self: *const IMbnInterfaceEvents,
            new_interface: ?*IMbnInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEmergencyModeChange: *const fn (
            self: *const IMbnInterfaceEvents,
            new_interface: ?*IMbnInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnHomeProviderAvailable: *const fn (
            self: *const IMbnInterfaceEvents,
            new_interface: ?*IMbnInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPreferredProvidersChange: *const fn (
            self: *const IMbnInterfaceEvents,
            new_interface: ?*IMbnInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetPreferredProvidersComplete: *const fn (
            self: *const IMbnInterfaceEvents,
            new_interface: ?*IMbnInterface,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnScanNetworkComplete: *const fn (
            self: *const IMbnInterfaceEvents,
            new_interface: ?*IMbnInterface,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onInterfaceCapabilityAvailable(self: *const T, new_interface_: ?*IMbnInterface) HRESULT {
                return @as(*const IMbnInterfaceEvents.VTable, @ptrCast(self.vtable)).OnInterfaceCapabilityAvailable(@as(*const IMbnInterfaceEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onSubscriberInformationChange(self: *const T, new_interface_: ?*IMbnInterface) HRESULT {
                return @as(*const IMbnInterfaceEvents.VTable, @ptrCast(self.vtable)).OnSubscriberInformationChange(@as(*const IMbnInterfaceEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onReadyStateChange(self: *const T, new_interface_: ?*IMbnInterface) HRESULT {
                return @as(*const IMbnInterfaceEvents.VTable, @ptrCast(self.vtable)).OnReadyStateChange(@as(*const IMbnInterfaceEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onEmergencyModeChange(self: *const T, new_interface_: ?*IMbnInterface) HRESULT {
                return @as(*const IMbnInterfaceEvents.VTable, @ptrCast(self.vtable)).OnEmergencyModeChange(@as(*const IMbnInterfaceEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onHomeProviderAvailable(self: *const T, new_interface_: ?*IMbnInterface) HRESULT {
                return @as(*const IMbnInterfaceEvents.VTable, @ptrCast(self.vtable)).OnHomeProviderAvailable(@as(*const IMbnInterfaceEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onPreferredProvidersChange(self: *const T, new_interface_: ?*IMbnInterface) HRESULT {
                return @as(*const IMbnInterfaceEvents.VTable, @ptrCast(self.vtable)).OnPreferredProvidersChange(@as(*const IMbnInterfaceEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onSetPreferredProvidersComplete(self: *const T, new_interface_: ?*IMbnInterface, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnInterfaceEvents.VTable, @ptrCast(self.vtable)).OnSetPreferredProvidersComplete(@as(*const IMbnInterfaceEvents, @ptrCast(self)), new_interface_, request_i_d_, status_);
            }
            pub inline fn onScanNetworkComplete(self: *const T, new_interface_: ?*IMbnInterface, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnInterfaceEvents.VTable, @ptrCast(self.vtable)).OnScanNetworkComplete(@as(*const IMbnInterfaceEvents, @ptrCast(self)), new_interface_, request_i_d_, status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnInterfaceManager_Value = Guid.initString("dcbbbab6-201b-4bbb-aaee-338e368af6fa");
pub const IID_IMbnInterfaceManager = &IID_IMbnInterfaceManager_Value;
pub const IMbnInterfaceManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInterface: *const fn (
            self: *const IMbnInterfaceManager,
            interface_i_d: ?[*:0]const u16,
            mbn_interface: ?*?*IMbnInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInterfaces: *const fn (
            self: *const IMbnInterfaceManager,
            mbn_interfaces: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInterface(self: *const T, interface_i_d_: ?[*:0]const u16, mbn_interface_: ?*?*IMbnInterface) HRESULT {
                return @as(*const IMbnInterfaceManager.VTable, @ptrCast(self.vtable)).GetInterface(@as(*const IMbnInterfaceManager, @ptrCast(self)), interface_i_d_, mbn_interface_);
            }
            pub inline fn getInterfaces(self: *const T, mbn_interfaces_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnInterfaceManager.VTable, @ptrCast(self.vtable)).GetInterfaces(@as(*const IMbnInterfaceManager, @ptrCast(self)), mbn_interfaces_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnInterfaceManagerEvents_Value = Guid.initString("dcbbbab6-201c-4bbb-aaee-338e368af6fa");
pub const IID_IMbnInterfaceManagerEvents = &IID_IMbnInterfaceManagerEvents_Value;
pub const IMbnInterfaceManagerEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnInterfaceArrival: *const fn (
            self: *const IMbnInterfaceManagerEvents,
            new_interface: ?*IMbnInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInterfaceRemoval: *const fn (
            self: *const IMbnInterfaceManagerEvents,
            old_interface: ?*IMbnInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onInterfaceArrival(self: *const T, new_interface_: ?*IMbnInterface) HRESULT {
                return @as(*const IMbnInterfaceManagerEvents.VTable, @ptrCast(self.vtable)).OnInterfaceArrival(@as(*const IMbnInterfaceManagerEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onInterfaceRemoval(self: *const T, old_interface_: ?*IMbnInterface) HRESULT {
                return @as(*const IMbnInterfaceManagerEvents.VTable, @ptrCast(self.vtable)).OnInterfaceRemoval(@as(*const IMbnInterfaceManagerEvents, @ptrCast(self)), old_interface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnRegistration_Value = Guid.initString("dcbbbab6-2009-4bbb-aaee-338e368af6fa");
pub const IID_IMbnRegistration = &IID_IMbnRegistration_Value;
pub const IMbnRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRegisterState: *const fn (
            self: *const IMbnRegistration,
            register_state: ?*MBN_REGISTER_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisterMode: *const fn (
            self: *const IMbnRegistration,
            register_mode: ?*MBN_REGISTER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderID: *const fn (
            self: *const IMbnRegistration,
            provider_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderName: *const fn (
            self: *const IMbnRegistration,
            provider_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRoamingText: *const fn (
            self: *const IMbnRegistration,
            roaming_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAvailableDataClasses: *const fn (
            self: *const IMbnRegistration,
            available_data_classes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentDataClass: *const fn (
            self: *const IMbnRegistration,
            current_data_class: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegistrationNetworkError: *const fn (
            self: *const IMbnRegistration,
            registration_network_error: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPacketAttachNetworkError: *const fn (
            self: *const IMbnRegistration,
            packet_attach_network_error: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRegisterMode: *const fn (
            self: *const IMbnRegistration,
            register_mode: MBN_REGISTER_MODE,
            provider_i_d: ?[*:0]const u16,
            data_class: u32,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRegisterState(self: *const T, register_state_: ?*MBN_REGISTER_STATE) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).GetRegisterState(@as(*const IMbnRegistration, @ptrCast(self)), register_state_);
            }
            pub inline fn getRegisterMode(self: *const T, register_mode_: ?*MBN_REGISTER_MODE) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).GetRegisterMode(@as(*const IMbnRegistration, @ptrCast(self)), register_mode_);
            }
            pub inline fn getProviderID(self: *const T, provider_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).GetProviderID(@as(*const IMbnRegistration, @ptrCast(self)), provider_i_d_);
            }
            pub inline fn getProviderName(self: *const T, provider_name_: ?*?BSTR) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).GetProviderName(@as(*const IMbnRegistration, @ptrCast(self)), provider_name_);
            }
            pub inline fn getRoamingText(self: *const T, roaming_text_: ?*?BSTR) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).GetRoamingText(@as(*const IMbnRegistration, @ptrCast(self)), roaming_text_);
            }
            pub inline fn getAvailableDataClasses(self: *const T, available_data_classes_: ?*u32) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).GetAvailableDataClasses(@as(*const IMbnRegistration, @ptrCast(self)), available_data_classes_);
            }
            pub inline fn getCurrentDataClass(self: *const T, current_data_class_: ?*u32) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).GetCurrentDataClass(@as(*const IMbnRegistration, @ptrCast(self)), current_data_class_);
            }
            pub inline fn getRegistrationNetworkError(self: *const T, registration_network_error_: ?*u32) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).GetRegistrationNetworkError(@as(*const IMbnRegistration, @ptrCast(self)), registration_network_error_);
            }
            pub inline fn getPacketAttachNetworkError(self: *const T, packet_attach_network_error_: ?*u32) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).GetPacketAttachNetworkError(@as(*const IMbnRegistration, @ptrCast(self)), packet_attach_network_error_);
            }
            pub inline fn setRegisterMode(self: *const T, register_mode_: MBN_REGISTER_MODE, provider_i_d_: ?[*:0]const u16, data_class_: u32, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnRegistration.VTable, @ptrCast(self.vtable)).SetRegisterMode(@as(*const IMbnRegistration, @ptrCast(self)), register_mode_, provider_i_d_, data_class_, request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnRegistrationEvents_Value = Guid.initString("dcbbbab6-200a-4bbb-aaee-338e368af6fa");
pub const IID_IMbnRegistrationEvents = &IID_IMbnRegistrationEvents_Value;
pub const IMbnRegistrationEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnRegisterModeAvailable: *const fn (
            self: *const IMbnRegistrationEvents,
            new_interface: ?*IMbnRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnRegisterStateChange: *const fn (
            self: *const IMbnRegistrationEvents,
            new_interface: ?*IMbnRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPacketServiceStateChange: *const fn (
            self: *const IMbnRegistrationEvents,
            new_interface: ?*IMbnRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetRegisterModeComplete: *const fn (
            self: *const IMbnRegistrationEvents,
            new_interface: ?*IMbnRegistration,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onRegisterModeAvailable(self: *const T, new_interface_: ?*IMbnRegistration) HRESULT {
                return @as(*const IMbnRegistrationEvents.VTable, @ptrCast(self.vtable)).OnRegisterModeAvailable(@as(*const IMbnRegistrationEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onRegisterStateChange(self: *const T, new_interface_: ?*IMbnRegistration) HRESULT {
                return @as(*const IMbnRegistrationEvents.VTable, @ptrCast(self.vtable)).OnRegisterStateChange(@as(*const IMbnRegistrationEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onPacketServiceStateChange(self: *const T, new_interface_: ?*IMbnRegistration) HRESULT {
                return @as(*const IMbnRegistrationEvents.VTable, @ptrCast(self.vtable)).OnPacketServiceStateChange(@as(*const IMbnRegistrationEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onSetRegisterModeComplete(self: *const T, new_interface_: ?*IMbnRegistration, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnRegistrationEvents.VTable, @ptrCast(self.vtable)).OnSetRegisterModeComplete(@as(*const IMbnRegistrationEvents, @ptrCast(self)), new_interface_, request_i_d_, status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnectionManager_Value = Guid.initString("dcbbbab6-201d-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnectionManager = &IID_IMbnConnectionManager_Value;
pub const IMbnConnectionManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetConnection: *const fn (
            self: *const IMbnConnectionManager,
            connection_i_d: ?[*:0]const u16,
            mbn_connection: ?*?*IMbnConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnections: *const fn (
            self: *const IMbnConnectionManager,
            mbn_connections: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getConnection(self: *const T, connection_i_d_: ?[*:0]const u16, mbn_connection_: ?*?*IMbnConnection) HRESULT {
                return @as(*const IMbnConnectionManager.VTable, @ptrCast(self.vtable)).GetConnection(@as(*const IMbnConnectionManager, @ptrCast(self)), connection_i_d_, mbn_connection_);
            }
            pub inline fn getConnections(self: *const T, mbn_connections_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnConnectionManager.VTable, @ptrCast(self.vtable)).GetConnections(@as(*const IMbnConnectionManager, @ptrCast(self)), mbn_connections_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnectionManagerEvents_Value = Guid.initString("dcbbbab6-201e-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnectionManagerEvents = &IID_IMbnConnectionManagerEvents_Value;
pub const IMbnConnectionManagerEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConnectionArrival: *const fn (
            self: *const IMbnConnectionManagerEvents,
            new_connection: ?*IMbnConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnConnectionRemoval: *const fn (
            self: *const IMbnConnectionManagerEvents,
            old_connection: ?*IMbnConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onConnectionArrival(self: *const T, new_connection_: ?*IMbnConnection) HRESULT {
                return @as(*const IMbnConnectionManagerEvents.VTable, @ptrCast(self.vtable)).OnConnectionArrival(@as(*const IMbnConnectionManagerEvents, @ptrCast(self)), new_connection_);
            }
            pub inline fn onConnectionRemoval(self: *const T, old_connection_: ?*IMbnConnection) HRESULT {
                return @as(*const IMbnConnectionManagerEvents.VTable, @ptrCast(self.vtable)).OnConnectionRemoval(@as(*const IMbnConnectionManagerEvents, @ptrCast(self)), old_connection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnPinManager_Value = Guid.initString("dcbbbab6-2005-4bbb-aaee-338e368af6fa");
pub const IID_IMbnPinManager = &IID_IMbnPinManager_Value;
pub const IMbnPinManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPinList: *const fn (
            self: *const IMbnPinManager,
            pin_list: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPin: *const fn (
            self: *const IMbnPinManager,
            pin_type: MBN_PIN_TYPE,
            pin: ?*?*IMbnPin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPinState: *const fn (
            self: *const IMbnPinManager,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPinList(self: *const T, pin_list_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnPinManager.VTable, @ptrCast(self.vtable)).GetPinList(@as(*const IMbnPinManager, @ptrCast(self)), pin_list_);
            }
            pub inline fn getPin(self: *const T, pin_type_: MBN_PIN_TYPE, pin_: ?*?*IMbnPin) HRESULT {
                return @as(*const IMbnPinManager.VTable, @ptrCast(self.vtable)).GetPin(@as(*const IMbnPinManager, @ptrCast(self)), pin_type_, pin_);
            }
            pub inline fn getPinState(self: *const T, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnPinManager.VTable, @ptrCast(self.vtable)).GetPinState(@as(*const IMbnPinManager, @ptrCast(self)), request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnPinManagerEvents_Value = Guid.initString("dcbbbab6-2006-4bbb-aaee-338e368af6fa");
pub const IID_IMbnPinManagerEvents = &IID_IMbnPinManagerEvents_Value;
pub const IMbnPinManagerEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPinListAvailable: *const fn (
            self: *const IMbnPinManagerEvents,
            pin_manager: ?*IMbnPinManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetPinStateComplete: *const fn (
            self: *const IMbnPinManagerEvents,
            pin_manager: ?*IMbnPinManager,
            pin_info: MBN_PIN_INFO,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onPinListAvailable(self: *const T, pin_manager_: ?*IMbnPinManager) HRESULT {
                return @as(*const IMbnPinManagerEvents.VTable, @ptrCast(self.vtable)).OnPinListAvailable(@as(*const IMbnPinManagerEvents, @ptrCast(self)), pin_manager_);
            }
            pub inline fn onGetPinStateComplete(self: *const T, pin_manager_: ?*IMbnPinManager, pin_info_: MBN_PIN_INFO, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnPinManagerEvents.VTable, @ptrCast(self.vtable)).OnGetPinStateComplete(@as(*const IMbnPinManagerEvents, @ptrCast(self)), pin_manager_, pin_info_, request_i_d_, status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnPinEvents_Value = Guid.initString("dcbbbab6-2008-4bbb-aaee-338e368af6fa");
pub const IID_IMbnPinEvents = &IID_IMbnPinEvents_Value;
pub const IMbnPinEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnEnableComplete: *const fn (
            self: *const IMbnPinEvents,
            pin: ?*IMbnPin,
            pin_info: ?*MBN_PIN_INFO,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDisableComplete: *const fn (
            self: *const IMbnPinEvents,
            pin: ?*IMbnPin,
            pin_info: ?*MBN_PIN_INFO,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEnterComplete: *const fn (
            self: *const IMbnPinEvents,
            pin: ?*IMbnPin,
            pin_info: ?*MBN_PIN_INFO,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnChangeComplete: *const fn (
            self: *const IMbnPinEvents,
            pin: ?*IMbnPin,
            pin_info: ?*MBN_PIN_INFO,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnUnblockComplete: *const fn (
            self: *const IMbnPinEvents,
            pin: ?*IMbnPin,
            pin_info: ?*MBN_PIN_INFO,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onEnableComplete(self: *const T, pin_: ?*IMbnPin, pin_info_: ?*MBN_PIN_INFO, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnPinEvents.VTable, @ptrCast(self.vtable)).OnEnableComplete(@as(*const IMbnPinEvents, @ptrCast(self)), pin_, pin_info_, request_i_d_, status_);
            }
            pub inline fn onDisableComplete(self: *const T, pin_: ?*IMbnPin, pin_info_: ?*MBN_PIN_INFO, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnPinEvents.VTable, @ptrCast(self.vtable)).OnDisableComplete(@as(*const IMbnPinEvents, @ptrCast(self)), pin_, pin_info_, request_i_d_, status_);
            }
            pub inline fn onEnterComplete(self: *const T, pin_: ?*IMbnPin, pin_info_: ?*MBN_PIN_INFO, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnPinEvents.VTable, @ptrCast(self.vtable)).OnEnterComplete(@as(*const IMbnPinEvents, @ptrCast(self)), pin_, pin_info_, request_i_d_, status_);
            }
            pub inline fn onChangeComplete(self: *const T, pin_: ?*IMbnPin, pin_info_: ?*MBN_PIN_INFO, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnPinEvents.VTable, @ptrCast(self.vtable)).OnChangeComplete(@as(*const IMbnPinEvents, @ptrCast(self)), pin_, pin_info_, request_i_d_, status_);
            }
            pub inline fn onUnblockComplete(self: *const T, pin_: ?*IMbnPin, pin_info_: ?*MBN_PIN_INFO, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnPinEvents.VTable, @ptrCast(self.vtable)).OnUnblockComplete(@as(*const IMbnPinEvents, @ptrCast(self)), pin_, pin_info_, request_i_d_, status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnSubscriberInformation_Value = Guid.initString("459ecc43-bcf5-11dc-a8a8-001321f1405f");
pub const IID_IMbnSubscriberInformation = &IID_IMbnSubscriberInformation_Value;
pub const IMbnSubscriberInformation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubscriberID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSubscriberInformation,
            subscriber_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SimIccID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSubscriberInformation,
            sim_icc_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TelephoneNumbers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSubscriberInformation,
            telephone_numbers: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSubscriberID(self: *const T, subscriber_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMbnSubscriberInformation.VTable, @ptrCast(self.vtable)).get_SubscriberID(@as(*const IMbnSubscriberInformation, @ptrCast(self)), subscriber_i_d_);
            }
            pub inline fn getSimIccID(self: *const T, sim_icc_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMbnSubscriberInformation.VTable, @ptrCast(self.vtable)).get_SimIccID(@as(*const IMbnSubscriberInformation, @ptrCast(self)), sim_icc_i_d_);
            }
            pub inline fn getTelephoneNumbers(self: *const T, telephone_numbers_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnSubscriberInformation.VTable, @ptrCast(self.vtable)).get_TelephoneNumbers(@as(*const IMbnSubscriberInformation, @ptrCast(self)), telephone_numbers_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnSignal_Value = Guid.initString("dcbbbab6-2003-4bbb-aaee-338e368af6fa");
pub const IID_IMbnSignal = &IID_IMbnSignal_Value;
pub const IMbnSignal = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSignalStrength: *const fn (
            self: *const IMbnSignal,
            signal_strength: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignalError: *const fn (
            self: *const IMbnSignal,
            signal_error: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSignalStrength(self: *const T, signal_strength_: ?*u32) HRESULT {
                return @as(*const IMbnSignal.VTable, @ptrCast(self.vtable)).GetSignalStrength(@as(*const IMbnSignal, @ptrCast(self)), signal_strength_);
            }
            pub inline fn getSignalError(self: *const T, signal_error_: ?*u32) HRESULT {
                return @as(*const IMbnSignal.VTable, @ptrCast(self.vtable)).GetSignalError(@as(*const IMbnSignal, @ptrCast(self)), signal_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnSignalEvents_Value = Guid.initString("dcbbbab6-2004-4bbb-aaee-338e368af6fa");
pub const IID_IMbnSignalEvents = &IID_IMbnSignalEvents_Value;
pub const IMbnSignalEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnSignalStateChange: *const fn (
            self: *const IMbnSignalEvents,
            new_interface: ?*IMbnSignal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onSignalStateChange(self: *const T, new_interface_: ?*IMbnSignal) HRESULT {
                return @as(*const IMbnSignalEvents.VTable, @ptrCast(self.vtable)).OnSignalStateChange(@as(*const IMbnSignalEvents, @ptrCast(self)), new_interface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnectionContext_Value = Guid.initString("dcbbbab6-200b-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnectionContext = &IID_IMbnConnectionContext_Value;
pub const IMbnConnectionContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProvisionedContexts: *const fn (
            self: *const IMbnConnectionContext,
            provisioned_contexts: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProvisionedContext: *const fn (
            self: *const IMbnConnectionContext,
            provisioned_contexts: MBN_CONTEXT,
            provider_i_d: ?[*:0]const u16,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getProvisionedContexts(self: *const T, provisioned_contexts_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnConnectionContext.VTable, @ptrCast(self.vtable)).GetProvisionedContexts(@as(*const IMbnConnectionContext, @ptrCast(self)), provisioned_contexts_);
            }
            pub inline fn setProvisionedContext(self: *const T, provisioned_contexts_: MBN_CONTEXT, provider_i_d_: ?[*:0]const u16, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnConnectionContext.VTable, @ptrCast(self.vtable)).SetProvisionedContext(@as(*const IMbnConnectionContext, @ptrCast(self)), provisioned_contexts_, provider_i_d_, request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnectionContextEvents_Value = Guid.initString("dcbbbab6-200c-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnectionContextEvents = &IID_IMbnConnectionContextEvents_Value;
pub const IMbnConnectionContextEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnProvisionedContextListChange: *const fn (
            self: *const IMbnConnectionContextEvents,
            new_interface: ?*IMbnConnectionContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetProvisionedContextComplete: *const fn (
            self: *const IMbnConnectionContextEvents,
            new_interface: ?*IMbnConnectionContext,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onProvisionedContextListChange(self: *const T, new_interface_: ?*IMbnConnectionContext) HRESULT {
                return @as(*const IMbnConnectionContextEvents.VTable, @ptrCast(self.vtable)).OnProvisionedContextListChange(@as(*const IMbnConnectionContextEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onSetProvisionedContextComplete(self: *const T, new_interface_: ?*IMbnConnectionContext, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnConnectionContextEvents.VTable, @ptrCast(self.vtable)).OnSetProvisionedContextComplete(@as(*const IMbnConnectionContextEvents, @ptrCast(self)), new_interface_, request_i_d_, status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnectionProfileManager_Value = Guid.initString("dcbbbab6-200f-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnectionProfileManager = &IID_IMbnConnectionProfileManager_Value;
pub const IMbnConnectionProfileManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetConnectionProfiles: *const fn (
            self: *const IMbnConnectionProfileManager,
            mbn_interface: ?*IMbnInterface,
            connection_profiles: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionProfile: *const fn (
            self: *const IMbnConnectionProfileManager,
            mbn_interface: ?*IMbnInterface,
            profile_name: ?[*:0]const u16,
            connection_profile: ?*?*IMbnConnectionProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateConnectionProfile: *const fn (
            self: *const IMbnConnectionProfileManager,
            xml_profile: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getConnectionProfiles(self: *const T, mbn_interface_: ?*IMbnInterface, connection_profiles_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnConnectionProfileManager.VTable, @ptrCast(self.vtable)).GetConnectionProfiles(@as(*const IMbnConnectionProfileManager, @ptrCast(self)), mbn_interface_, connection_profiles_);
            }
            pub inline fn getConnectionProfile(self: *const T, mbn_interface_: ?*IMbnInterface, profile_name_: ?[*:0]const u16, connection_profile_: ?*?*IMbnConnectionProfile) HRESULT {
                return @as(*const IMbnConnectionProfileManager.VTable, @ptrCast(self.vtable)).GetConnectionProfile(@as(*const IMbnConnectionProfileManager, @ptrCast(self)), mbn_interface_, profile_name_, connection_profile_);
            }
            pub inline fn createConnectionProfile(self: *const T, xml_profile_: ?[*:0]const u16) HRESULT {
                return @as(*const IMbnConnectionProfileManager.VTable, @ptrCast(self.vtable)).CreateConnectionProfile(@as(*const IMbnConnectionProfileManager, @ptrCast(self)), xml_profile_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnectionProfile_Value = Guid.initString("dcbbbab6-2010-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnectionProfile = &IID_IMbnConnectionProfile_Value;
pub const IMbnConnectionProfile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProfileXmlData: *const fn (
            self: *const IMbnConnectionProfile,
            profile_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProfile: *const fn (
            self: *const IMbnConnectionProfile,
            str_profile: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IMbnConnectionProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getProfileXmlData(self: *const T, profile_data_: ?*?BSTR) HRESULT {
                return @as(*const IMbnConnectionProfile.VTable, @ptrCast(self.vtable)).GetProfileXmlData(@as(*const IMbnConnectionProfile, @ptrCast(self)), profile_data_);
            }
            pub inline fn updateProfile(self: *const T, str_profile_: ?[*:0]const u16) HRESULT {
                return @as(*const IMbnConnectionProfile.VTable, @ptrCast(self.vtable)).UpdateProfile(@as(*const IMbnConnectionProfile, @ptrCast(self)), str_profile_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IMbnConnectionProfile.VTable, @ptrCast(self.vtable)).Delete(@as(*const IMbnConnectionProfile, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnectionProfileEvents_Value = Guid.initString("dcbbbab6-2011-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnectionProfileEvents = &IID_IMbnConnectionProfileEvents_Value;
pub const IMbnConnectionProfileEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnProfileUpdate: *const fn (
            self: *const IMbnConnectionProfileEvents,
            new_profile: ?*IMbnConnectionProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onProfileUpdate(self: *const T, new_profile_: ?*IMbnConnectionProfile) HRESULT {
                return @as(*const IMbnConnectionProfileEvents.VTable, @ptrCast(self.vtable)).OnProfileUpdate(@as(*const IMbnConnectionProfileEvents, @ptrCast(self)), new_profile_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnSmsConfiguration_Value = Guid.initString("dcbbbab6-2012-4bbb-aaee-338e368af6fa");
pub const IID_IMbnSmsConfiguration = &IID_IMbnSmsConfiguration_Value;
pub const IMbnSmsConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceCenterAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsConfiguration,
            sc_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceCenterAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsConfiguration,
            sc_address: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxMessageIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsConfiguration,
            index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CdmaShortMsgSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsConfiguration,
            short_msg_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SmsFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsConfiguration,
            sms_format: ?*MBN_SMS_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SmsFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsConfiguration,
            sms_format: MBN_SMS_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getServiceCenterAddress(self: *const T, sc_address_: ?*?BSTR) HRESULT {
                return @as(*const IMbnSmsConfiguration.VTable, @ptrCast(self.vtable)).get_ServiceCenterAddress(@as(*const IMbnSmsConfiguration, @ptrCast(self)), sc_address_);
            }
            pub inline fn putServiceCenterAddress(self: *const T, sc_address_: ?[*:0]const u16) HRESULT {
                return @as(*const IMbnSmsConfiguration.VTable, @ptrCast(self.vtable)).put_ServiceCenterAddress(@as(*const IMbnSmsConfiguration, @ptrCast(self)), sc_address_);
            }
            pub inline fn getMaxMessageIndex(self: *const T, index_: ?*u32) HRESULT {
                return @as(*const IMbnSmsConfiguration.VTable, @ptrCast(self.vtable)).get_MaxMessageIndex(@as(*const IMbnSmsConfiguration, @ptrCast(self)), index_);
            }
            pub inline fn getCdmaShortMsgSize(self: *const T, short_msg_size_: ?*u32) HRESULT {
                return @as(*const IMbnSmsConfiguration.VTable, @ptrCast(self.vtable)).get_CdmaShortMsgSize(@as(*const IMbnSmsConfiguration, @ptrCast(self)), short_msg_size_);
            }
            pub inline fn getSmsFormat(self: *const T, sms_format_: ?*MBN_SMS_FORMAT) HRESULT {
                return @as(*const IMbnSmsConfiguration.VTable, @ptrCast(self.vtable)).get_SmsFormat(@as(*const IMbnSmsConfiguration, @ptrCast(self)), sms_format_);
            }
            pub inline fn putSmsFormat(self: *const T, sms_format_: MBN_SMS_FORMAT) HRESULT {
                return @as(*const IMbnSmsConfiguration.VTable, @ptrCast(self.vtable)).put_SmsFormat(@as(*const IMbnSmsConfiguration, @ptrCast(self)), sms_format_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnSmsReadMsgPdu_Value = Guid.initString("dcbbbab6-2013-4bbb-aaee-338e368af6fa");
pub const IID_IMbnSmsReadMsgPdu = &IID_IMbnSmsReadMsgPdu_Value;
pub const IMbnSmsReadMsgPdu = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Index: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgPdu,
            index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgPdu,
            status: ?*MBN_MSG_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PduData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgPdu,
            pdu_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Message: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgPdu,
            message: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIndex(self: *const T, index_: ?*u32) HRESULT {
                return @as(*const IMbnSmsReadMsgPdu.VTable, @ptrCast(self.vtable)).get_Index(@as(*const IMbnSmsReadMsgPdu, @ptrCast(self)), index_);
            }
            pub inline fn getStatus(self: *const T, status_: ?*MBN_MSG_STATUS) HRESULT {
                return @as(*const IMbnSmsReadMsgPdu.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IMbnSmsReadMsgPdu, @ptrCast(self)), status_);
            }
            pub inline fn getPduData(self: *const T, pdu_data_: ?*?BSTR) HRESULT {
                return @as(*const IMbnSmsReadMsgPdu.VTable, @ptrCast(self.vtable)).get_PduData(@as(*const IMbnSmsReadMsgPdu, @ptrCast(self)), pdu_data_);
            }
            pub inline fn getMessage(self: *const T, message_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnSmsReadMsgPdu.VTable, @ptrCast(self.vtable)).get_Message(@as(*const IMbnSmsReadMsgPdu, @ptrCast(self)), message_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnSmsReadMsgTextCdma_Value = Guid.initString("dcbbbab6-2014-4bbb-aaee-338e368af6fa");
pub const IID_IMbnSmsReadMsgTextCdma = &IID_IMbnSmsReadMsgTextCdma_Value;
pub const IMbnSmsReadMsgTextCdma = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Index: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgTextCdma,
            index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgTextCdma,
            status: ?*MBN_MSG_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Address: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgTextCdma,
            address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Timestamp: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgTextCdma,
            timestamp: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncodingID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgTextCdma,
            encoding_i_d: ?*MBN_SMS_CDMA_ENCODING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LanguageID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgTextCdma,
            language_i_d: ?*MBN_SMS_CDMA_LANG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeInCharacters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgTextCdma,
            size_in_characters: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Message: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnSmsReadMsgTextCdma,
            message: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIndex(self: *const T, index_: ?*u32) HRESULT {
                return @as(*const IMbnSmsReadMsgTextCdma.VTable, @ptrCast(self.vtable)).get_Index(@as(*const IMbnSmsReadMsgTextCdma, @ptrCast(self)), index_);
            }
            pub inline fn getStatus(self: *const T, status_: ?*MBN_MSG_STATUS) HRESULT {
                return @as(*const IMbnSmsReadMsgTextCdma.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IMbnSmsReadMsgTextCdma, @ptrCast(self)), status_);
            }
            pub inline fn getAddress(self: *const T, address_: ?*?BSTR) HRESULT {
                return @as(*const IMbnSmsReadMsgTextCdma.VTable, @ptrCast(self.vtable)).get_Address(@as(*const IMbnSmsReadMsgTextCdma, @ptrCast(self)), address_);
            }
            pub inline fn getTimestamp(self: *const T, timestamp_: ?*?BSTR) HRESULT {
                return @as(*const IMbnSmsReadMsgTextCdma.VTable, @ptrCast(self.vtable)).get_Timestamp(@as(*const IMbnSmsReadMsgTextCdma, @ptrCast(self)), timestamp_);
            }
            pub inline fn getEncodingID(self: *const T, encoding_i_d_: ?*MBN_SMS_CDMA_ENCODING) HRESULT {
                return @as(*const IMbnSmsReadMsgTextCdma.VTable, @ptrCast(self.vtable)).get_EncodingID(@as(*const IMbnSmsReadMsgTextCdma, @ptrCast(self)), encoding_i_d_);
            }
            pub inline fn getLanguageID(self: *const T, language_i_d_: ?*MBN_SMS_CDMA_LANG) HRESULT {
                return @as(*const IMbnSmsReadMsgTextCdma.VTable, @ptrCast(self.vtable)).get_LanguageID(@as(*const IMbnSmsReadMsgTextCdma, @ptrCast(self)), language_i_d_);
            }
            pub inline fn getSizeInCharacters(self: *const T, size_in_characters_: ?*u32) HRESULT {
                return @as(*const IMbnSmsReadMsgTextCdma.VTable, @ptrCast(self.vtable)).get_SizeInCharacters(@as(*const IMbnSmsReadMsgTextCdma, @ptrCast(self)), size_in_characters_);
            }
            pub inline fn getMessage(self: *const T, message_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnSmsReadMsgTextCdma.VTable, @ptrCast(self.vtable)).get_Message(@as(*const IMbnSmsReadMsgTextCdma, @ptrCast(self)), message_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnSms_Value = Guid.initString("dcbbbab6-2015-4bbb-aaee-338e368af6fa");
pub const IID_IMbnSms = &IID_IMbnSms_Value;
pub const IMbnSms = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSmsConfiguration: *const fn (
            self: *const IMbnSms,
            sms_configuration: ?*?*IMbnSmsConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSmsConfiguration: *const fn (
            self: *const IMbnSms,
            sms_configuration: ?*IMbnSmsConfiguration,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SmsSendPdu: *const fn (
            self: *const IMbnSms,
            pdu_data: ?[*:0]const u16,
            size: u8,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SmsSendCdma: *const fn (
            self: *const IMbnSms,
            address: ?[*:0]const u16,
            encoding: MBN_SMS_CDMA_ENCODING,
            language: MBN_SMS_CDMA_LANG,
            size_in_characters: u32,
            message: ?*SAFEARRAY,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SmsSendCdmaPdu: *const fn (
            self: *const IMbnSms,
            message: ?*SAFEARRAY,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SmsRead: *const fn (
            self: *const IMbnSms,
            sms_filter: ?*MBN_SMS_FILTER,
            sms_format: MBN_SMS_FORMAT,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SmsDelete: *const fn (
            self: *const IMbnSms,
            sms_filter: ?*MBN_SMS_FILTER,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSmsStatus: *const fn (
            self: *const IMbnSms,
            sms_status_info: ?*MBN_SMS_STATUS_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSmsConfiguration(self: *const T, sms_configuration_: ?*?*IMbnSmsConfiguration) HRESULT {
                return @as(*const IMbnSms.VTable, @ptrCast(self.vtable)).GetSmsConfiguration(@as(*const IMbnSms, @ptrCast(self)), sms_configuration_);
            }
            pub inline fn setSmsConfiguration(self: *const T, sms_configuration_: ?*IMbnSmsConfiguration, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnSms.VTable, @ptrCast(self.vtable)).SetSmsConfiguration(@as(*const IMbnSms, @ptrCast(self)), sms_configuration_, request_i_d_);
            }
            pub inline fn smsSendPdu(self: *const T, pdu_data_: ?[*:0]const u16, size_: u8, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnSms.VTable, @ptrCast(self.vtable)).SmsSendPdu(@as(*const IMbnSms, @ptrCast(self)), pdu_data_, size_, request_i_d_);
            }
            pub inline fn smsSendCdma(self: *const T, address_: ?[*:0]const u16, encoding_: MBN_SMS_CDMA_ENCODING, language_: MBN_SMS_CDMA_LANG, size_in_characters_: u32, message_: ?*SAFEARRAY, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnSms.VTable, @ptrCast(self.vtable)).SmsSendCdma(@as(*const IMbnSms, @ptrCast(self)), address_, encoding_, language_, size_in_characters_, message_, request_i_d_);
            }
            pub inline fn smsSendCdmaPdu(self: *const T, message_: ?*SAFEARRAY, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnSms.VTable, @ptrCast(self.vtable)).SmsSendCdmaPdu(@as(*const IMbnSms, @ptrCast(self)), message_, request_i_d_);
            }
            pub inline fn smsRead(self: *const T, sms_filter_: ?*MBN_SMS_FILTER, sms_format_: MBN_SMS_FORMAT, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnSms.VTable, @ptrCast(self.vtable)).SmsRead(@as(*const IMbnSms, @ptrCast(self)), sms_filter_, sms_format_, request_i_d_);
            }
            pub inline fn smsDelete(self: *const T, sms_filter_: ?*MBN_SMS_FILTER, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnSms.VTable, @ptrCast(self.vtable)).SmsDelete(@as(*const IMbnSms, @ptrCast(self)), sms_filter_, request_i_d_);
            }
            pub inline fn getSmsStatus(self: *const T, sms_status_info_: ?*MBN_SMS_STATUS_INFO) HRESULT {
                return @as(*const IMbnSms.VTable, @ptrCast(self.vtable)).GetSmsStatus(@as(*const IMbnSms, @ptrCast(self)), sms_status_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnSmsEvents_Value = Guid.initString("dcbbbab6-2016-4bbb-aaee-338e368af6fa");
pub const IID_IMbnSmsEvents = &IID_IMbnSmsEvents_Value;
pub const IMbnSmsEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnSmsConfigurationChange: *const fn (
            self: *const IMbnSmsEvents,
            sms: ?*IMbnSms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetSmsConfigurationComplete: *const fn (
            self: *const IMbnSmsEvents,
            sms: ?*IMbnSms,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSmsSendComplete: *const fn (
            self: *const IMbnSmsEvents,
            sms: ?*IMbnSms,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSmsReadComplete: *const fn (
            self: *const IMbnSmsEvents,
            sms: ?*IMbnSms,
            sms_format: MBN_SMS_FORMAT,
            read_msgs: ?*SAFEARRAY,
            more_msgs: i16,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSmsNewClass0Message: *const fn (
            self: *const IMbnSmsEvents,
            sms: ?*IMbnSms,
            sms_format: MBN_SMS_FORMAT,
            read_msgs: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSmsDeleteComplete: *const fn (
            self: *const IMbnSmsEvents,
            sms: ?*IMbnSms,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSmsStatusChange: *const fn (
            self: *const IMbnSmsEvents,
            sms: ?*IMbnSms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onSmsConfigurationChange(self: *const T, sms_: ?*IMbnSms) HRESULT {
                return @as(*const IMbnSmsEvents.VTable, @ptrCast(self.vtable)).OnSmsConfigurationChange(@as(*const IMbnSmsEvents, @ptrCast(self)), sms_);
            }
            pub inline fn onSetSmsConfigurationComplete(self: *const T, sms_: ?*IMbnSms, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnSmsEvents.VTable, @ptrCast(self.vtable)).OnSetSmsConfigurationComplete(@as(*const IMbnSmsEvents, @ptrCast(self)), sms_, request_i_d_, status_);
            }
            pub inline fn onSmsSendComplete(self: *const T, sms_: ?*IMbnSms, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnSmsEvents.VTable, @ptrCast(self.vtable)).OnSmsSendComplete(@as(*const IMbnSmsEvents, @ptrCast(self)), sms_, request_i_d_, status_);
            }
            pub inline fn onSmsReadComplete(self: *const T, sms_: ?*IMbnSms, sms_format_: MBN_SMS_FORMAT, read_msgs_: ?*SAFEARRAY, more_msgs_: i16, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnSmsEvents.VTable, @ptrCast(self.vtable)).OnSmsReadComplete(@as(*const IMbnSmsEvents, @ptrCast(self)), sms_, sms_format_, read_msgs_, more_msgs_, request_i_d_, status_);
            }
            pub inline fn onSmsNewClass0Message(self: *const T, sms_: ?*IMbnSms, sms_format_: MBN_SMS_FORMAT, read_msgs_: ?*SAFEARRAY) HRESULT {
                return @as(*const IMbnSmsEvents.VTable, @ptrCast(self.vtable)).OnSmsNewClass0Message(@as(*const IMbnSmsEvents, @ptrCast(self)), sms_, sms_format_, read_msgs_);
            }
            pub inline fn onSmsDeleteComplete(self: *const T, sms_: ?*IMbnSms, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnSmsEvents.VTable, @ptrCast(self.vtable)).OnSmsDeleteComplete(@as(*const IMbnSmsEvents, @ptrCast(self)), sms_, request_i_d_, status_);
            }
            pub inline fn onSmsStatusChange(self: *const T, sms_: ?*IMbnSms) HRESULT {
                return @as(*const IMbnSmsEvents.VTable, @ptrCast(self.vtable)).OnSmsStatusChange(@as(*const IMbnSmsEvents, @ptrCast(self)), sms_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnServiceActivation_Value = Guid.initString("dcbbbab6-2017-4bbb-aaee-338e368af6fa");
pub const IID_IMbnServiceActivation = &IID_IMbnServiceActivation_Value;
pub const IMbnServiceActivation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Activate: *const fn (
            self: *const IMbnServiceActivation,
            vendor_specific_data: ?*SAFEARRAY,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn activate(self: *const T, vendor_specific_data_: ?*SAFEARRAY, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnServiceActivation.VTable, @ptrCast(self.vtable)).Activate(@as(*const IMbnServiceActivation, @ptrCast(self)), vendor_specific_data_, request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnServiceActivationEvents_Value = Guid.initString("dcbbbab6-2018-4bbb-aaee-338e368af6fa");
pub const IID_IMbnServiceActivationEvents = &IID_IMbnServiceActivationEvents_Value;
pub const IMbnServiceActivationEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnActivationComplete: *const fn (
            self: *const IMbnServiceActivationEvents,
            service_activation: ?*IMbnServiceActivation,
            vendor_specific_data: ?*SAFEARRAY,
            request_i_d: u32,
            status: HRESULT,
            network_error: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onActivationComplete(self: *const T, service_activation_: ?*IMbnServiceActivation, vendor_specific_data_: ?*SAFEARRAY, request_i_d_: u32, status_: HRESULT, network_error_: u32) HRESULT {
                return @as(*const IMbnServiceActivationEvents.VTable, @ptrCast(self.vtable)).OnActivationComplete(@as(*const IMbnServiceActivationEvents, @ptrCast(self)), service_activation_, vendor_specific_data_, request_i_d_, status_, network_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnVendorSpecificOperation_Value = Guid.initString("dcbbbab6-2019-4bbb-aaee-338e368af6fa");
pub const IID_IMbnVendorSpecificOperation = &IID_IMbnVendorSpecificOperation_Value;
pub const IMbnVendorSpecificOperation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetVendorSpecific: *const fn (
            self: *const IMbnVendorSpecificOperation,
            vendor_specific_data: ?*SAFEARRAY,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setVendorSpecific(self: *const T, vendor_specific_data_: ?*SAFEARRAY, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnVendorSpecificOperation.VTable, @ptrCast(self.vtable)).SetVendorSpecific(@as(*const IMbnVendorSpecificOperation, @ptrCast(self)), vendor_specific_data_, request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnVendorSpecificEvents_Value = Guid.initString("dcbbbab6-201a-4bbb-aaee-338e368af6fa");
pub const IID_IMbnVendorSpecificEvents = &IID_IMbnVendorSpecificEvents_Value;
pub const IMbnVendorSpecificEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnEventNotification: *const fn (
            self: *const IMbnVendorSpecificEvents,
            vendor_operation: ?*IMbnVendorSpecificOperation,
            vendor_specific_data: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetVendorSpecificComplete: *const fn (
            self: *const IMbnVendorSpecificEvents,
            vendor_operation: ?*IMbnVendorSpecificOperation,
            vendor_specific_data: ?*SAFEARRAY,
            request_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onEventNotification(self: *const T, vendor_operation_: ?*IMbnVendorSpecificOperation, vendor_specific_data_: ?*SAFEARRAY) HRESULT {
                return @as(*const IMbnVendorSpecificEvents.VTable, @ptrCast(self.vtable)).OnEventNotification(@as(*const IMbnVendorSpecificEvents, @ptrCast(self)), vendor_operation_, vendor_specific_data_);
            }
            pub inline fn onSetVendorSpecificComplete(self: *const T, vendor_operation_: ?*IMbnVendorSpecificOperation, vendor_specific_data_: ?*SAFEARRAY, request_i_d_: u32) HRESULT {
                return @as(*const IMbnVendorSpecificEvents.VTable, @ptrCast(self.vtable)).OnSetVendorSpecificComplete(@as(*const IMbnVendorSpecificEvents, @ptrCast(self)), vendor_operation_, vendor_specific_data_, request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnConnectionProfileManagerEvents_Value = Guid.initString("dcbbbab6-201f-4bbb-aaee-338e368af6fa");
pub const IID_IMbnConnectionProfileManagerEvents = &IID_IMbnConnectionProfileManagerEvents_Value;
pub const IMbnConnectionProfileManagerEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConnectionProfileArrival: *const fn (
            self: *const IMbnConnectionProfileManagerEvents,
            new_connection_profile: ?*IMbnConnectionProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnConnectionProfileRemoval: *const fn (
            self: *const IMbnConnectionProfileManagerEvents,
            old_connection_profile: ?*IMbnConnectionProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onConnectionProfileArrival(self: *const T, new_connection_profile_: ?*IMbnConnectionProfile) HRESULT {
                return @as(*const IMbnConnectionProfileManagerEvents.VTable, @ptrCast(self.vtable)).OnConnectionProfileArrival(@as(*const IMbnConnectionProfileManagerEvents, @ptrCast(self)), new_connection_profile_);
            }
            pub inline fn onConnectionProfileRemoval(self: *const T, old_connection_profile_: ?*IMbnConnectionProfile) HRESULT {
                return @as(*const IMbnConnectionProfileManagerEvents.VTable, @ptrCast(self.vtable)).OnConnectionProfileRemoval(@as(*const IMbnConnectionProfileManagerEvents, @ptrCast(self)), old_connection_profile_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnRadio_Value = Guid.initString("dccccab6-201f-4bbb-aaee-338e368af6fa");
pub const IID_IMbnRadio = &IID_IMbnRadio_Value;
pub const IMbnRadio = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SoftwareRadioState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnRadio,
            software_radio_state: ?*MBN_RADIO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HardwareRadioState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnRadio,
            hardware_radio_state: ?*MBN_RADIO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSoftwareRadioState: *const fn (
            self: *const IMbnRadio,
            radio_state: MBN_RADIO,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSoftwareRadioState(self: *const T, software_radio_state_: ?*MBN_RADIO) HRESULT {
                return @as(*const IMbnRadio.VTable, @ptrCast(self.vtable)).get_SoftwareRadioState(@as(*const IMbnRadio, @ptrCast(self)), software_radio_state_);
            }
            pub inline fn getHardwareRadioState(self: *const T, hardware_radio_state_: ?*MBN_RADIO) HRESULT {
                return @as(*const IMbnRadio.VTable, @ptrCast(self.vtable)).get_HardwareRadioState(@as(*const IMbnRadio, @ptrCast(self)), hardware_radio_state_);
            }
            pub inline fn setSoftwareRadioState(self: *const T, radio_state_: MBN_RADIO, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnRadio.VTable, @ptrCast(self.vtable)).SetSoftwareRadioState(@as(*const IMbnRadio, @ptrCast(self)), radio_state_, request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnRadioEvents_Value = Guid.initString("dcdddab6-201f-4bbb-aaee-338e368af6fa");
pub const IID_IMbnRadioEvents = &IID_IMbnRadioEvents_Value;
pub const IMbnRadioEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnRadioStateChange: *const fn (
            self: *const IMbnRadioEvents,
            new_interface: ?*IMbnRadio,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetSoftwareRadioStateComplete: *const fn (
            self: *const IMbnRadioEvents,
            new_interface: ?*IMbnRadio,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onRadioStateChange(self: *const T, new_interface_: ?*IMbnRadio) HRESULT {
                return @as(*const IMbnRadioEvents.VTable, @ptrCast(self.vtable)).OnRadioStateChange(@as(*const IMbnRadioEvents, @ptrCast(self)), new_interface_);
            }
            pub inline fn onSetSoftwareRadioStateComplete(self: *const T, new_interface_: ?*IMbnRadio, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnRadioEvents.VTable, @ptrCast(self.vtable)).OnSetSoftwareRadioStateComplete(@as(*const IMbnRadioEvents, @ptrCast(self)), new_interface_, request_i_d_, status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IMbnMultiCarrier_Value = Guid.initString("dcbbbab6-2020-4bbb-aaee-338e368af6fa");
pub const IID_IMbnMultiCarrier = &IID_IMbnMultiCarrier_Value;
pub const IMbnMultiCarrier = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetHomeProvider: *const fn (
            self: *const IMbnMultiCarrier,
            home_provider: ?*MBN_PROVIDER2,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreferredProviders: *const fn (
            self: *const IMbnMultiCarrier,
            preferred_multicarrier_providers: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisibleProviders: *const fn (
            self: *const IMbnMultiCarrier,
            age: ?*u32,
            visible_providers: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedCellularClasses: *const fn (
            self: *const IMbnMultiCarrier,
            cellular_classes: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentCellularClass: *const fn (
            self: *const IMbnMultiCarrier,
            current_cellular_class: ?*MBN_CELLULAR_CLASS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScanNetwork: *const fn (
            self: *const IMbnMultiCarrier,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setHomeProvider(self: *const T, home_provider_: ?*MBN_PROVIDER2, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnMultiCarrier.VTable, @ptrCast(self.vtable)).SetHomeProvider(@as(*const IMbnMultiCarrier, @ptrCast(self)), home_provider_, request_i_d_);
            }
            pub inline fn getPreferredProviders(self: *const T, preferred_multicarrier_providers_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnMultiCarrier.VTable, @ptrCast(self.vtable)).GetPreferredProviders(@as(*const IMbnMultiCarrier, @ptrCast(self)), preferred_multicarrier_providers_);
            }
            pub inline fn getVisibleProviders(self: *const T, age_: ?*u32, visible_providers_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnMultiCarrier.VTable, @ptrCast(self.vtable)).GetVisibleProviders(@as(*const IMbnMultiCarrier, @ptrCast(self)), age_, visible_providers_);
            }
            pub inline fn getSupportedCellularClasses(self: *const T, cellular_classes_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnMultiCarrier.VTable, @ptrCast(self.vtable)).GetSupportedCellularClasses(@as(*const IMbnMultiCarrier, @ptrCast(self)), cellular_classes_);
            }
            pub inline fn getCurrentCellularClass(self: *const T, current_cellular_class_: ?*MBN_CELLULAR_CLASS) HRESULT {
                return @as(*const IMbnMultiCarrier.VTable, @ptrCast(self.vtable)).GetCurrentCellularClass(@as(*const IMbnMultiCarrier, @ptrCast(self)), current_cellular_class_);
            }
            pub inline fn scanNetwork(self: *const T, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnMultiCarrier.VTable, @ptrCast(self.vtable)).ScanNetwork(@as(*const IMbnMultiCarrier, @ptrCast(self)), request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IMbnMultiCarrierEvents_Value = Guid.initString("dcdddab6-2021-4bbb-aaee-338e368af6fa");
pub const IID_IMbnMultiCarrierEvents = &IID_IMbnMultiCarrierEvents_Value;
pub const IMbnMultiCarrierEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnSetHomeProviderComplete: *const fn (
            self: *const IMbnMultiCarrierEvents,
            mbn_interface: ?*IMbnMultiCarrier,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCurrentCellularClassChange: *const fn (
            self: *const IMbnMultiCarrierEvents,
            mbn_interface: ?*IMbnMultiCarrier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPreferredProvidersChange: *const fn (
            self: *const IMbnMultiCarrierEvents,
            mbn_interface: ?*IMbnMultiCarrier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnScanNetworkComplete: *const fn (
            self: *const IMbnMultiCarrierEvents,
            mbn_interface: ?*IMbnMultiCarrier,
            request_i_d: u32,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInterfaceCapabilityChange: *const fn (
            self: *const IMbnMultiCarrierEvents,
            mbn_interface: ?*IMbnMultiCarrier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onSetHomeProviderComplete(self: *const T, mbn_interface_: ?*IMbnMultiCarrier, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnMultiCarrierEvents.VTable, @ptrCast(self.vtable)).OnSetHomeProviderComplete(@as(*const IMbnMultiCarrierEvents, @ptrCast(self)), mbn_interface_, request_i_d_, status_);
            }
            pub inline fn onCurrentCellularClassChange(self: *const T, mbn_interface_: ?*IMbnMultiCarrier) HRESULT {
                return @as(*const IMbnMultiCarrierEvents.VTable, @ptrCast(self.vtable)).OnCurrentCellularClassChange(@as(*const IMbnMultiCarrierEvents, @ptrCast(self)), mbn_interface_);
            }
            pub inline fn onPreferredProvidersChange(self: *const T, mbn_interface_: ?*IMbnMultiCarrier) HRESULT {
                return @as(*const IMbnMultiCarrierEvents.VTable, @ptrCast(self.vtable)).OnPreferredProvidersChange(@as(*const IMbnMultiCarrierEvents, @ptrCast(self)), mbn_interface_);
            }
            pub inline fn onScanNetworkComplete(self: *const T, mbn_interface_: ?*IMbnMultiCarrier, request_i_d_: u32, status_: HRESULT) HRESULT {
                return @as(*const IMbnMultiCarrierEvents.VTable, @ptrCast(self.vtable)).OnScanNetworkComplete(@as(*const IMbnMultiCarrierEvents, @ptrCast(self)), mbn_interface_, request_i_d_, status_);
            }
            pub inline fn onInterfaceCapabilityChange(self: *const T, mbn_interface_: ?*IMbnMultiCarrier) HRESULT {
                return @as(*const IMbnMultiCarrierEvents.VTable, @ptrCast(self.vtable)).OnInterfaceCapabilityChange(@as(*const IMbnMultiCarrierEvents, @ptrCast(self)), mbn_interface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMbnDeviceServiceStateEvents_Value = Guid.initString("5d3ff196-89ee-49d8-8b60-33ffddffc58d");
pub const IID_IMbnDeviceServiceStateEvents = &IID_IMbnDeviceServiceStateEvents_Value;
pub const IMbnDeviceServiceStateEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnSessionsStateChange: *const fn (
            self: *const IMbnDeviceServiceStateEvents,
            interface_i_d: ?BSTR,
            state_change: MBN_DEVICE_SERVICE_SESSIONS_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onSessionsStateChange(self: *const T, interface_i_d_: ?BSTR, state_change_: MBN_DEVICE_SERVICE_SESSIONS_STATE) HRESULT {
                return @as(*const IMbnDeviceServiceStateEvents.VTable, @ptrCast(self.vtable)).OnSessionsStateChange(@as(*const IMbnDeviceServiceStateEvents, @ptrCast(self)), interface_i_d_, state_change_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IMbnDeviceServicesManager_Value = Guid.initString("20a26258-6811-4478-ac1d-13324e45e41c");
pub const IID_IMbnDeviceServicesManager = &IID_IMbnDeviceServicesManager_Value;
pub const IMbnDeviceServicesManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceServicesContext: *const fn (
            self: *const IMbnDeviceServicesManager,
            network_interface_i_d: ?BSTR,
            mbn_devices_context: ?*?*IMbnDeviceServicesContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDeviceServicesContext(self: *const T, network_interface_i_d_: ?BSTR, mbn_devices_context_: ?*?*IMbnDeviceServicesContext) HRESULT {
                return @as(*const IMbnDeviceServicesManager.VTable, @ptrCast(self.vtable)).GetDeviceServicesContext(@as(*const IMbnDeviceServicesManager, @ptrCast(self)), network_interface_i_d_, mbn_devices_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IMbnDeviceServicesContext_Value = Guid.initString("fc5ac347-1592-4068-80bb-6a57580150d8");
pub const IID_IMbnDeviceServicesContext = &IID_IMbnDeviceServicesContext_Value;
pub const IMbnDeviceServicesContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumerateDeviceServices: *const fn (
            self: *const IMbnDeviceServicesContext,
            device_services: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceService: *const fn (
            self: *const IMbnDeviceServicesContext,
            device_service_i_d: ?BSTR,
            mbn_device_service: ?*?*IMbnDeviceService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxCommandSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnDeviceServicesContext,
            max_command_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxDataSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnDeviceServicesContext,
            max_data_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enumerateDeviceServices(self: *const T, device_services_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IMbnDeviceServicesContext.VTable, @ptrCast(self.vtable)).EnumerateDeviceServices(@as(*const IMbnDeviceServicesContext, @ptrCast(self)), device_services_);
            }
            pub inline fn getDeviceService(self: *const T, device_service_i_d_: ?BSTR, mbn_device_service_: ?*?*IMbnDeviceService) HRESULT {
                return @as(*const IMbnDeviceServicesContext.VTable, @ptrCast(self.vtable)).GetDeviceService(@as(*const IMbnDeviceServicesContext, @ptrCast(self)), device_service_i_d_, mbn_device_service_);
            }
            pub inline fn getMaxCommandSize(self: *const T, max_command_size_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceServicesContext.VTable, @ptrCast(self.vtable)).get_MaxCommandSize(@as(*const IMbnDeviceServicesContext, @ptrCast(self)), max_command_size_);
            }
            pub inline fn getMaxDataSize(self: *const T, max_data_size_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceServicesContext.VTable, @ptrCast(self.vtable)).get_MaxDataSize(@as(*const IMbnDeviceServicesContext, @ptrCast(self)), max_data_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IMbnDeviceServicesEvents_Value = Guid.initString("0a900c19-6824-4e97-b76e-cf239d0ca642");
pub const IID_IMbnDeviceServicesEvents = &IID_IMbnDeviceServicesEvents_Value;
pub const IMbnDeviceServicesEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnQuerySupportedCommandsComplete: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            command_i_d_list: ?*SAFEARRAY,
            status: HRESULT,
            request_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOpenCommandSessionComplete: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            status: HRESULT,
            request_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCloseCommandSessionComplete: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            status: HRESULT,
            request_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetCommandComplete: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            response_i_d: u32,
            device_service_data: ?*SAFEARRAY,
            status: HRESULT,
            request_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQueryCommandComplete: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            response_i_d: u32,
            device_service_data: ?*SAFEARRAY,
            status: HRESULT,
            request_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEventNotification: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            event_i_d: u32,
            device_service_data: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOpenDataSessionComplete: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            status: HRESULT,
            request_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCloseDataSessionComplete: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            status: HRESULT,
            request_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnWriteDataComplete: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            status: HRESULT,
            request_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnReadData: *const fn (
            self: *const IMbnDeviceServicesEvents,
            device_service: ?*IMbnDeviceService,
            device_service_data: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInterfaceStateChange: *const fn (
            self: *const IMbnDeviceServicesEvents,
            interface_i_d: ?BSTR,
            state_change: MBN_DEVICE_SERVICES_INTERFACE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onQuerySupportedCommandsComplete(self: *const T, device_service_: ?*IMbnDeviceService, command_i_d_list_: ?*SAFEARRAY, status_: HRESULT, request_i_d_: u32) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnQuerySupportedCommandsComplete(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, command_i_d_list_, status_, request_i_d_);
            }
            pub inline fn onOpenCommandSessionComplete(self: *const T, device_service_: ?*IMbnDeviceService, status_: HRESULT, request_i_d_: u32) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnOpenCommandSessionComplete(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, status_, request_i_d_);
            }
            pub inline fn onCloseCommandSessionComplete(self: *const T, device_service_: ?*IMbnDeviceService, status_: HRESULT, request_i_d_: u32) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnCloseCommandSessionComplete(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, status_, request_i_d_);
            }
            pub inline fn onSetCommandComplete(self: *const T, device_service_: ?*IMbnDeviceService, response_i_d_: u32, device_service_data_: ?*SAFEARRAY, status_: HRESULT, request_i_d_: u32) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnSetCommandComplete(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, response_i_d_, device_service_data_, status_, request_i_d_);
            }
            pub inline fn onQueryCommandComplete(self: *const T, device_service_: ?*IMbnDeviceService, response_i_d_: u32, device_service_data_: ?*SAFEARRAY, status_: HRESULT, request_i_d_: u32) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnQueryCommandComplete(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, response_i_d_, device_service_data_, status_, request_i_d_);
            }
            pub inline fn onEventNotification(self: *const T, device_service_: ?*IMbnDeviceService, event_i_d_: u32, device_service_data_: ?*SAFEARRAY) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnEventNotification(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, event_i_d_, device_service_data_);
            }
            pub inline fn onOpenDataSessionComplete(self: *const T, device_service_: ?*IMbnDeviceService, status_: HRESULT, request_i_d_: u32) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnOpenDataSessionComplete(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, status_, request_i_d_);
            }
            pub inline fn onCloseDataSessionComplete(self: *const T, device_service_: ?*IMbnDeviceService, status_: HRESULT, request_i_d_: u32) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnCloseDataSessionComplete(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, status_, request_i_d_);
            }
            pub inline fn onWriteDataComplete(self: *const T, device_service_: ?*IMbnDeviceService, status_: HRESULT, request_i_d_: u32) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnWriteDataComplete(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, status_, request_i_d_);
            }
            pub inline fn onReadData(self: *const T, device_service_: ?*IMbnDeviceService, device_service_data_: ?*SAFEARRAY) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnReadData(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), device_service_, device_service_data_);
            }
            pub inline fn onInterfaceStateChange(self: *const T, interface_i_d_: ?BSTR, state_change_: MBN_DEVICE_SERVICES_INTERFACE_STATE) HRESULT {
                return @as(*const IMbnDeviceServicesEvents.VTable, @ptrCast(self.vtable)).OnInterfaceStateChange(@as(*const IMbnDeviceServicesEvents, @ptrCast(self)), interface_i_d_, state_change_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IMbnDeviceService_Value = Guid.initString("b3bb9a71-dc70-4be9-a4da-7886ae8b191b");
pub const IID_IMbnDeviceService = &IID_IMbnDeviceService_Value;
pub const IMbnDeviceService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QuerySupportedCommands: *const fn (
            self: *const IMbnDeviceService,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenCommandSession: *const fn (
            self: *const IMbnDeviceService,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseCommandSession: *const fn (
            self: *const IMbnDeviceService,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCommand: *const fn (
            self: *const IMbnDeviceService,
            command_i_d: u32,
            device_service_data: ?*SAFEARRAY,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryCommand: *const fn (
            self: *const IMbnDeviceService,
            command_i_d: u32,
            device_service_data: ?*SAFEARRAY,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenDataSession: *const fn (
            self: *const IMbnDeviceService,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseDataSession: *const fn (
            self: *const IMbnDeviceService,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteData: *const fn (
            self: *const IMbnDeviceService,
            device_service_data: ?*SAFEARRAY,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InterfaceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnDeviceService,
            interface_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceServiceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnDeviceService,
            device_service_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsCommandSessionOpen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnDeviceService,
            value: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsDataSessionOpen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnDeviceService,
            value: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn querySupportedCommands(self: *const T, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).QuerySupportedCommands(@as(*const IMbnDeviceService, @ptrCast(self)), request_i_d_);
            }
            pub inline fn openCommandSession(self: *const T, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).OpenCommandSession(@as(*const IMbnDeviceService, @ptrCast(self)), request_i_d_);
            }
            pub inline fn closeCommandSession(self: *const T, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).CloseCommandSession(@as(*const IMbnDeviceService, @ptrCast(self)), request_i_d_);
            }
            pub inline fn setCommand(self: *const T, command_i_d_: u32, device_service_data_: ?*SAFEARRAY, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).SetCommand(@as(*const IMbnDeviceService, @ptrCast(self)), command_i_d_, device_service_data_, request_i_d_);
            }
            pub inline fn queryCommand(self: *const T, command_i_d_: u32, device_service_data_: ?*SAFEARRAY, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).QueryCommand(@as(*const IMbnDeviceService, @ptrCast(self)), command_i_d_, device_service_data_, request_i_d_);
            }
            pub inline fn openDataSession(self: *const T, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).OpenDataSession(@as(*const IMbnDeviceService, @ptrCast(self)), request_i_d_);
            }
            pub inline fn closeDataSession(self: *const T, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).CloseDataSession(@as(*const IMbnDeviceService, @ptrCast(self)), request_i_d_);
            }
            pub inline fn writeData(self: *const T, device_service_data_: ?*SAFEARRAY, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).WriteData(@as(*const IMbnDeviceService, @ptrCast(self)), device_service_data_, request_i_d_);
            }
            pub inline fn getInterfaceID(self: *const T, interface_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).get_InterfaceID(@as(*const IMbnDeviceService, @ptrCast(self)), interface_i_d_);
            }
            pub inline fn getDeviceServiceID(self: *const T, device_service_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).get_DeviceServiceID(@as(*const IMbnDeviceService, @ptrCast(self)), device_service_i_d_);
            }
            pub inline fn getIsCommandSessionOpen(self: *const T, value_: ?*BOOL) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).get_IsCommandSessionOpen(@as(*const IMbnDeviceService, @ptrCast(self)), value_);
            }
            pub inline fn getIsDataSessionOpen(self: *const T, value_: ?*BOOL) HRESULT {
                return @as(*const IMbnDeviceService.VTable, @ptrCast(self.vtable)).get_IsDataSessionOpen(@as(*const IMbnDeviceService, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const __mbnapi_ReferenceRemainingTypes__ = extern struct {
    bandClass: MBN_BAND_CLASS,
    contextConstants: MBN_CONTEXT_CONSTANTS,
    ctrlCaps: MBN_CTRL_CAPS,
    dataClass: MBN_DATA_CLASS,
    interfaceCapsConstants: MBN_INTERFACE_CAPS_CONSTANTS,
    pinConstants: MBN_PIN_CONSTANTS,
    providerConstants: MBN_PROVIDER_CONSTANTS,
    providerState: MBN_PROVIDER_STATE,
    registrationConstants: MBN_REGISTRATION_CONSTANTS,
    signalConstants: MBN_SIGNAL_CONSTANTS,
    smsCaps: MBN_SMS_CAPS,
    smsConstants: WWAEXT_SMS_CONSTANTS,
    wwaextSmsConstants: WWAEXT_SMS_CONSTANTS,
    smsStatusFlag: MBN_SMS_STATUS_FLAG,
};

pub const __DummyPinType__ = extern struct {
    pinType: u32,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IMbnPin_Value = Guid.initString("dcbbbab6-2007-4bbb-aaee-338e368af6fa");
pub const IID_IMbnPin = &IID_IMbnPin_Value;
pub const IMbnPin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PinType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnPin,
            pin_type: ?*MBN_PIN_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PinFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnPin,
            pin_format: ?*MBN_PIN_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PinLengthMin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnPin,
            pin_length_min: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PinLengthMax: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnPin,
            pin_length_max: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PinMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMbnPin,
            pin_mode: ?*MBN_PIN_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const IMbnPin,
            pin: ?[*:0]const u16,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disable: *const fn (
            self: *const IMbnPin,
            pin: ?[*:0]const u16,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enter: *const fn (
            self: *const IMbnPin,
            pin: ?[*:0]const u16,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Change: *const fn (
            self: *const IMbnPin,
            pin: ?[*:0]const u16,
            new_pin: ?[*:0]const u16,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unblock: *const fn (
            self: *const IMbnPin,
            puk: ?[*:0]const u16,
            new_pin: ?[*:0]const u16,
            request_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPinManager: *const fn (
            self: *const IMbnPin,
            pin_manager: ?*?*IMbnPinManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPinType(self: *const T, pin_type_: ?*MBN_PIN_TYPE) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).get_PinType(@as(*const IMbnPin, @ptrCast(self)), pin_type_);
            }
            pub inline fn getPinFormat(self: *const T, pin_format_: ?*MBN_PIN_FORMAT) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).get_PinFormat(@as(*const IMbnPin, @ptrCast(self)), pin_format_);
            }
            pub inline fn getPinLengthMin(self: *const T, pin_length_min_: ?*u32) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).get_PinLengthMin(@as(*const IMbnPin, @ptrCast(self)), pin_length_min_);
            }
            pub inline fn getPinLengthMax(self: *const T, pin_length_max_: ?*u32) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).get_PinLengthMax(@as(*const IMbnPin, @ptrCast(self)), pin_length_max_);
            }
            pub inline fn getPinMode(self: *const T, pin_mode_: ?*MBN_PIN_MODE) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).get_PinMode(@as(*const IMbnPin, @ptrCast(self)), pin_mode_);
            }
            pub inline fn enable(self: *const T, pin_: ?[*:0]const u16, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).Enable(@as(*const IMbnPin, @ptrCast(self)), pin_, request_i_d_);
            }
            pub inline fn disable(self: *const T, pin_: ?[*:0]const u16, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).Disable(@as(*const IMbnPin, @ptrCast(self)), pin_, request_i_d_);
            }
            pub inline fn enter(self: *const T, pin_: ?[*:0]const u16, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).Enter(@as(*const IMbnPin, @ptrCast(self)), pin_, request_i_d_);
            }
            pub inline fn change(self: *const T, pin_: ?[*:0]const u16, new_pin_: ?[*:0]const u16, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).Change(@as(*const IMbnPin, @ptrCast(self)), pin_, new_pin_, request_i_d_);
            }
            pub inline fn unblock(self: *const T, puk_: ?[*:0]const u16, new_pin_: ?[*:0]const u16, request_i_d_: ?*u32) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).Unblock(@as(*const IMbnPin, @ptrCast(self)), puk_, new_pin_, request_i_d_);
            }
            pub inline fn getPinManager(self: *const T, pin_manager_: ?*?*IMbnPinManager) HRESULT {
                return @as(*const IMbnPin.VTable, @ptrCast(self.vtable)).GetPinManager(@as(*const IMbnPin, @ptrCast(self)), pin_manager_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
