//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const NETCON_MAX_NAME_LEN = @as(u32, 256);
pub const S_OBJECT_NO_LONGER_VALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2));
pub const NETISO_GEID_FOR_WDAG = @as(u32, 1);
pub const NETISO_GEID_FOR_NEUTRAL_AWARE = @as(u32, 2);

//--------------------------------------------------------------------------------
// Section: Types (97)
//--------------------------------------------------------------------------------
const CLSID_UPnPNAT_Value = Guid.initString("ae1e00aa-3fd5-403c-8a27-2bbdc30cd0e1");
pub const CLSID_UPnPNAT = &CLSID_UPnPNAT_Value;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUPnPNAT_Value = Guid.initString("b171c812-cc76-485a-94d8-b6b3a2794e99");
pub const IID_IUPnPNAT = &IID_IUPnPNAT_Value;
pub const IUPnPNAT = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StaticPortMappingCollection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPNAT,
            pp_s_p_ms: ?*?*IStaticPortMappingCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DynamicPortMappingCollection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPNAT,
            pp_d_p_ms: ?*?*IDynamicPortMappingCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NATEventManager: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IUPnPNAT,
            pp_n_e_m: ?*?*INATEventManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStaticPortMappingCollection(self: *const T, pp_s_p_ms_: ?*?*IStaticPortMappingCollection) HRESULT {
                return @as(*const IUPnPNAT.VTable, @ptrCast(self.vtable)).get_StaticPortMappingCollection(@as(*const IUPnPNAT, @ptrCast(self)), pp_s_p_ms_);
            }
            pub inline fn getDynamicPortMappingCollection(self: *const T, pp_d_p_ms_: ?*?*IDynamicPortMappingCollection) HRESULT {
                return @as(*const IUPnPNAT.VTable, @ptrCast(self.vtable)).get_DynamicPortMappingCollection(@as(*const IUPnPNAT, @ptrCast(self)), pp_d_p_ms_);
            }
            pub inline fn getNATEventManager(self: *const T, pp_n_e_m_: ?*?*INATEventManager) HRESULT {
                return @as(*const IUPnPNAT.VTable, @ptrCast(self.vtable)).get_NATEventManager(@as(*const IUPnPNAT, @ptrCast(self)), pp_n_e_m_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INATEventManager_Value = Guid.initString("624bd588-9060-4109-b0b0-1adbbcac32df");
pub const IID_INATEventManager = &IID_INATEventManager_Value;
pub const INATEventManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExternalIPAddressCallback: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INATEventManager,
            p_unk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NumberOfEntriesCallback: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INATEventManager,
            p_unk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putExternalIPAddressCallback(self: *const T, p_unk_: ?*IUnknown) HRESULT {
                return @as(*const INATEventManager.VTable, @ptrCast(self.vtable)).put_ExternalIPAddressCallback(@as(*const INATEventManager, @ptrCast(self)), p_unk_);
            }
            pub inline fn putNumberOfEntriesCallback(self: *const T, p_unk_: ?*IUnknown) HRESULT {
                return @as(*const INATEventManager.VTable, @ptrCast(self.vtable)).put_NumberOfEntriesCallback(@as(*const INATEventManager, @ptrCast(self)), p_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INATExternalIPAddressCallback_Value = Guid.initString("9c416740-a34e-446f-ba06-abd04c3149ae");
pub const IID_INATExternalIPAddressCallback = &IID_INATExternalIPAddressCallback_Value;
pub const INATExternalIPAddressCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NewExternalIPAddress: *const fn (
            self: *const INATExternalIPAddressCallback,
            bstr_new_external_i_p_address: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn newExternalIPAddress(self: *const T, bstr_new_external_i_p_address_: ?BSTR) HRESULT {
                return @as(*const INATExternalIPAddressCallback.VTable, @ptrCast(self.vtable)).NewExternalIPAddress(@as(*const INATExternalIPAddressCallback, @ptrCast(self)), bstr_new_external_i_p_address_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INATNumberOfEntriesCallback_Value = Guid.initString("c83a0a74-91ee-41b6-b67a-67e0f00bbd78");
pub const IID_INATNumberOfEntriesCallback = &IID_INATNumberOfEntriesCallback_Value;
pub const INATNumberOfEntriesCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NewNumberOfEntries: *const fn (
            self: *const INATNumberOfEntriesCallback,
            l_new_number_of_entries: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn newNumberOfEntries(self: *const T, l_new_number_of_entries_: i32) HRESULT {
                return @as(*const INATNumberOfEntriesCallback.VTable, @ptrCast(self.vtable)).NewNumberOfEntries(@as(*const INATNumberOfEntriesCallback, @ptrCast(self)), l_new_number_of_entries_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDynamicPortMappingCollection_Value = Guid.initString("b60de00f-156e-4e8d-9ec1-3a2342c10899");
pub const IID_IDynamicPortMappingCollection = &IID_IDynamicPortMappingCollection_Value;
pub const IDynamicPortMappingCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMappingCollection,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMappingCollection,
            bstr_remote_host: ?BSTR,
            l_external_port: i32,
            bstr_protocol: ?BSTR,
            pp_d_p_m: ?*?*IDynamicPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMappingCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IDynamicPortMappingCollection,
            bstr_remote_host: ?BSTR,
            l_external_port: i32,
            bstr_protocol: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IDynamicPortMappingCollection,
            bstr_remote_host: ?BSTR,
            l_external_port: i32,
            bstr_protocol: ?BSTR,
            l_internal_port: i32,
            bstr_internal_client: ?BSTR,
            b_enabled: i16,
            bstr_description: ?BSTR,
            l_lease_duration: i32,
            pp_d_p_m: ?*?*IDynamicPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IDynamicPortMappingCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IDynamicPortMappingCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, bstr_remote_host_: ?BSTR, l_external_port_: i32, bstr_protocol_: ?BSTR, pp_d_p_m_: ?*?*IDynamicPortMapping) HRESULT {
                return @as(*const IDynamicPortMappingCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IDynamicPortMappingCollection, @ptrCast(self)), bstr_remote_host_, l_external_port_, bstr_protocol_, pp_d_p_m_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IDynamicPortMappingCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IDynamicPortMappingCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, bstr_remote_host_: ?BSTR, l_external_port_: i32, bstr_protocol_: ?BSTR) HRESULT {
                return @as(*const IDynamicPortMappingCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IDynamicPortMappingCollection, @ptrCast(self)), bstr_remote_host_, l_external_port_, bstr_protocol_);
            }
            pub inline fn add(self: *const T, bstr_remote_host_: ?BSTR, l_external_port_: i32, bstr_protocol_: ?BSTR, l_internal_port_: i32, bstr_internal_client_: ?BSTR, b_enabled_: i16, bstr_description_: ?BSTR, l_lease_duration_: i32, pp_d_p_m_: ?*?*IDynamicPortMapping) HRESULT {
                return @as(*const IDynamicPortMappingCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IDynamicPortMappingCollection, @ptrCast(self)), bstr_remote_host_, l_external_port_, bstr_protocol_, l_internal_port_, bstr_internal_client_, b_enabled_, bstr_description_, l_lease_duration_, pp_d_p_m_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDynamicPortMapping_Value = Guid.initString("4fc80282-23b6-4378-9a27-cd8f17c9400c");
pub const IID_IDynamicPortMapping = &IID_IDynamicPortMapping_Value;
pub const IDynamicPortMapping = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalIPAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMapping,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteHost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMapping,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMapping,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMapping,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMapping,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalClient: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMapping,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMapping,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMapping,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LeaseDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicPortMapping,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenewLease: *const fn (
            self: *const IDynamicPortMapping,
            l_lease_duration_desired: i32,
            p_lease_duration_returned: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditInternalClient: *const fn (
            self: *const IDynamicPortMapping,
            bstr_internal_client: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const IDynamicPortMapping,
            vb: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditDescription: *const fn (
            self: *const IDynamicPortMapping,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditInternalPort: *const fn (
            self: *const IDynamicPortMapping,
            l_internal_port: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getExternalIPAddress(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).get_ExternalIPAddress(@as(*const IDynamicPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getRemoteHost(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).get_RemoteHost(@as(*const IDynamicPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getExternalPort(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).get_ExternalPort(@as(*const IDynamicPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getProtocol(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).get_Protocol(@as(*const IDynamicPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getInternalPort(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).get_InternalPort(@as(*const IDynamicPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getInternalClient(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).get_InternalClient(@as(*const IDynamicPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getEnabled(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IDynamicPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getDescription(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IDynamicPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getLeaseDuration(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).get_LeaseDuration(@as(*const IDynamicPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn renewLease(self: *const T, l_lease_duration_desired_: i32, p_lease_duration_returned_: ?*i32) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).RenewLease(@as(*const IDynamicPortMapping, @ptrCast(self)), l_lease_duration_desired_, p_lease_duration_returned_);
            }
            pub inline fn editInternalClient(self: *const T, bstr_internal_client_: ?BSTR) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).EditInternalClient(@as(*const IDynamicPortMapping, @ptrCast(self)), bstr_internal_client_);
            }
            pub inline fn enable(self: *const T, vb_: i16) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).Enable(@as(*const IDynamicPortMapping, @ptrCast(self)), vb_);
            }
            pub inline fn editDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).EditDescription(@as(*const IDynamicPortMapping, @ptrCast(self)), bstr_description_);
            }
            pub inline fn editInternalPort(self: *const T, l_internal_port_: i32) HRESULT {
                return @as(*const IDynamicPortMapping.VTable, @ptrCast(self.vtable)).EditInternalPort(@as(*const IDynamicPortMapping, @ptrCast(self)), l_internal_port_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IStaticPortMappingCollection_Value = Guid.initString("cd1f3e77-66d6-4664-82c7-36dbb641d0f1");
pub const IID_IStaticPortMappingCollection = &IID_IStaticPortMappingCollection_Value;
pub const IStaticPortMappingCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMappingCollection,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMappingCollection,
            l_external_port: i32,
            bstr_protocol: ?BSTR,
            pp_s_p_m: ?*?*IStaticPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMappingCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IStaticPortMappingCollection,
            l_external_port: i32,
            bstr_protocol: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IStaticPortMappingCollection,
            l_external_port: i32,
            bstr_protocol: ?BSTR,
            l_internal_port: i32,
            bstr_internal_client: ?BSTR,
            b_enabled: i16,
            bstr_description: ?BSTR,
            pp_s_p_m: ?*?*IStaticPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IStaticPortMappingCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IStaticPortMappingCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, l_external_port_: i32, bstr_protocol_: ?BSTR, pp_s_p_m_: ?*?*IStaticPortMapping) HRESULT {
                return @as(*const IStaticPortMappingCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IStaticPortMappingCollection, @ptrCast(self)), l_external_port_, bstr_protocol_, pp_s_p_m_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IStaticPortMappingCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IStaticPortMappingCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, l_external_port_: i32, bstr_protocol_: ?BSTR) HRESULT {
                return @as(*const IStaticPortMappingCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IStaticPortMappingCollection, @ptrCast(self)), l_external_port_, bstr_protocol_);
            }
            pub inline fn add(self: *const T, l_external_port_: i32, bstr_protocol_: ?BSTR, l_internal_port_: i32, bstr_internal_client_: ?BSTR, b_enabled_: i16, bstr_description_: ?BSTR, pp_s_p_m_: ?*?*IStaticPortMapping) HRESULT {
                return @as(*const IStaticPortMappingCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IStaticPortMappingCollection, @ptrCast(self)), l_external_port_, bstr_protocol_, l_internal_port_, bstr_internal_client_, b_enabled_, bstr_description_, pp_s_p_m_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IStaticPortMapping_Value = Guid.initString("6f10711f-729b-41e5-93b8-f21d0f818df1");
pub const IID_IStaticPortMapping = &IID_IStaticPortMapping_Value;
pub const IStaticPortMapping = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalIPAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMapping,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMapping,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMapping,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMapping,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalClient: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMapping,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMapping,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStaticPortMapping,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditInternalClient: *const fn (
            self: *const IStaticPortMapping,
            bstr_internal_client: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const IStaticPortMapping,
            vb: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditDescription: *const fn (
            self: *const IStaticPortMapping,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditInternalPort: *const fn (
            self: *const IStaticPortMapping,
            l_internal_port: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getExternalIPAddress(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).get_ExternalIPAddress(@as(*const IStaticPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getExternalPort(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).get_ExternalPort(@as(*const IStaticPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getInternalPort(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).get_InternalPort(@as(*const IStaticPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getProtocol(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).get_Protocol(@as(*const IStaticPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getInternalClient(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).get_InternalClient(@as(*const IStaticPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getEnabled(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IStaticPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn getDescription(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IStaticPortMapping, @ptrCast(self)), p_val_);
            }
            pub inline fn editInternalClient(self: *const T, bstr_internal_client_: ?BSTR) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).EditInternalClient(@as(*const IStaticPortMapping, @ptrCast(self)), bstr_internal_client_);
            }
            pub inline fn enable(self: *const T, vb_: i16) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).Enable(@as(*const IStaticPortMapping, @ptrCast(self)), vb_);
            }
            pub inline fn editDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).EditDescription(@as(*const IStaticPortMapping, @ptrCast(self)), bstr_description_);
            }
            pub inline fn editInternalPort(self: *const T, l_internal_port_: i32) HRESULT {
                return @as(*const IStaticPortMapping.VTable, @ptrCast(self.vtable)).EditInternalPort(@as(*const IStaticPortMapping, @ptrCast(self)), l_internal_port_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_NetSharingManager_Value = Guid.initString("5c63c1ad-3956-4ff8-8486-40034758315b");
pub const CLSID_NetSharingManager = &CLSID_NetSharingManager_Value;

const IID_IEnumNetConnection_Value = Guid.initString("c08956a0-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetConnection = &IID_IEnumNetConnection_Value;
pub const IEnumNetConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumNetConnection,
            celt: u32,
            rgelt: [*]?*INetConnection,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumNetConnection,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumNetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumNetConnection,
            ppenum: ?*?*IEnumNetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*INetConnection, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumNetConnection.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumNetConnection, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumNetConnection.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumNetConnection, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumNetConnection.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumNetConnection, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumNetConnection) HRESULT {
                return @as(*const IEnumNetConnection.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumNetConnection, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NETCON_CHARACTERISTIC_FLAGS = enum(i32) {
    NONE = 0,
    ALL_USERS = 1,
    ALLOW_DUPLICATION = 2,
    ALLOW_REMOVAL = 4,
    ALLOW_RENAME = 8,
    INCOMING_ONLY = 32,
    OUTGOING_ONLY = 64,
    BRANDED = 128,
    SHARED = 256,
    BRIDGED = 512,
    FIREWALLED = 1024,
    DEFAULT = 2048,
    HOMENET_CAPABLE = 4096,
    SHARED_PRIVATE = 8192,
    QUARANTINED = 16384,
    RESERVED = 32768,
    HOSTED_NETWORK = 65536,
    VIRTUAL_STATION = 131072,
    WIFI_DIRECT = 262144,
    BLUETOOTH_MASK = 983040,
    LAN_MASK = 15728640,
};
pub const NCCF_NONE = NETCON_CHARACTERISTIC_FLAGS.NONE;
pub const NCCF_ALL_USERS = NETCON_CHARACTERISTIC_FLAGS.ALL_USERS;
pub const NCCF_ALLOW_DUPLICATION = NETCON_CHARACTERISTIC_FLAGS.ALLOW_DUPLICATION;
pub const NCCF_ALLOW_REMOVAL = NETCON_CHARACTERISTIC_FLAGS.ALLOW_REMOVAL;
pub const NCCF_ALLOW_RENAME = NETCON_CHARACTERISTIC_FLAGS.ALLOW_RENAME;
pub const NCCF_INCOMING_ONLY = NETCON_CHARACTERISTIC_FLAGS.INCOMING_ONLY;
pub const NCCF_OUTGOING_ONLY = NETCON_CHARACTERISTIC_FLAGS.OUTGOING_ONLY;
pub const NCCF_BRANDED = NETCON_CHARACTERISTIC_FLAGS.BRANDED;
pub const NCCF_SHARED = NETCON_CHARACTERISTIC_FLAGS.SHARED;
pub const NCCF_BRIDGED = NETCON_CHARACTERISTIC_FLAGS.BRIDGED;
pub const NCCF_FIREWALLED = NETCON_CHARACTERISTIC_FLAGS.FIREWALLED;
pub const NCCF_DEFAULT = NETCON_CHARACTERISTIC_FLAGS.DEFAULT;
pub const NCCF_HOMENET_CAPABLE = NETCON_CHARACTERISTIC_FLAGS.HOMENET_CAPABLE;
pub const NCCF_SHARED_PRIVATE = NETCON_CHARACTERISTIC_FLAGS.SHARED_PRIVATE;
pub const NCCF_QUARANTINED = NETCON_CHARACTERISTIC_FLAGS.QUARANTINED;
pub const NCCF_RESERVED = NETCON_CHARACTERISTIC_FLAGS.RESERVED;
pub const NCCF_HOSTED_NETWORK = NETCON_CHARACTERISTIC_FLAGS.HOSTED_NETWORK;
pub const NCCF_VIRTUAL_STATION = NETCON_CHARACTERISTIC_FLAGS.VIRTUAL_STATION;
pub const NCCF_WIFI_DIRECT = NETCON_CHARACTERISTIC_FLAGS.WIFI_DIRECT;
pub const NCCF_BLUETOOTH_MASK = NETCON_CHARACTERISTIC_FLAGS.BLUETOOTH_MASK;
pub const NCCF_LAN_MASK = NETCON_CHARACTERISTIC_FLAGS.LAN_MASK;

pub const NETCON_STATUS = enum(i32) {
    DISCONNECTED = 0,
    CONNECTING = 1,
    CONNECTED = 2,
    DISCONNECTING = 3,
    HARDWARE_NOT_PRESENT = 4,
    HARDWARE_DISABLED = 5,
    HARDWARE_MALFUNCTION = 6,
    MEDIA_DISCONNECTED = 7,
    AUTHENTICATING = 8,
    AUTHENTICATION_SUCCEEDED = 9,
    AUTHENTICATION_FAILED = 10,
    INVALID_ADDRESS = 11,
    CREDENTIALS_REQUIRED = 12,
    ACTION_REQUIRED = 13,
    ACTION_REQUIRED_RETRY = 14,
    CONNECT_FAILED = 15,
};
pub const NCS_DISCONNECTED = NETCON_STATUS.DISCONNECTED;
pub const NCS_CONNECTING = NETCON_STATUS.CONNECTING;
pub const NCS_CONNECTED = NETCON_STATUS.CONNECTED;
pub const NCS_DISCONNECTING = NETCON_STATUS.DISCONNECTING;
pub const NCS_HARDWARE_NOT_PRESENT = NETCON_STATUS.HARDWARE_NOT_PRESENT;
pub const NCS_HARDWARE_DISABLED = NETCON_STATUS.HARDWARE_DISABLED;
pub const NCS_HARDWARE_MALFUNCTION = NETCON_STATUS.HARDWARE_MALFUNCTION;
pub const NCS_MEDIA_DISCONNECTED = NETCON_STATUS.MEDIA_DISCONNECTED;
pub const NCS_AUTHENTICATING = NETCON_STATUS.AUTHENTICATING;
pub const NCS_AUTHENTICATION_SUCCEEDED = NETCON_STATUS.AUTHENTICATION_SUCCEEDED;
pub const NCS_AUTHENTICATION_FAILED = NETCON_STATUS.AUTHENTICATION_FAILED;
pub const NCS_INVALID_ADDRESS = NETCON_STATUS.INVALID_ADDRESS;
pub const NCS_CREDENTIALS_REQUIRED = NETCON_STATUS.CREDENTIALS_REQUIRED;
pub const NCS_ACTION_REQUIRED = NETCON_STATUS.ACTION_REQUIRED;
pub const NCS_ACTION_REQUIRED_RETRY = NETCON_STATUS.ACTION_REQUIRED_RETRY;
pub const NCS_CONNECT_FAILED = NETCON_STATUS.CONNECT_FAILED;

pub const NETCON_TYPE = enum(i32) {
    DIRECT_CONNECT = 0,
    INBOUND = 1,
    INTERNET = 2,
    LAN = 3,
    PHONE = 4,
    TUNNEL = 5,
    BRIDGE = 6,
};
pub const NCT_DIRECT_CONNECT = NETCON_TYPE.DIRECT_CONNECT;
pub const NCT_INBOUND = NETCON_TYPE.INBOUND;
pub const NCT_INTERNET = NETCON_TYPE.INTERNET;
pub const NCT_LAN = NETCON_TYPE.LAN;
pub const NCT_PHONE = NETCON_TYPE.PHONE;
pub const NCT_TUNNEL = NETCON_TYPE.TUNNEL;
pub const NCT_BRIDGE = NETCON_TYPE.BRIDGE;

pub const NETCON_MEDIATYPE = enum(i32) {
    NONE = 0,
    DIRECT = 1,
    ISDN = 2,
    LAN = 3,
    PHONE = 4,
    TUNNEL = 5,
    PPPOE = 6,
    BRIDGE = 7,
    SHAREDACCESSHOST_LAN = 8,
    SHAREDACCESSHOST_RAS = 9,
};
pub const NCM_NONE = NETCON_MEDIATYPE.NONE;
pub const NCM_DIRECT = NETCON_MEDIATYPE.DIRECT;
pub const NCM_ISDN = NETCON_MEDIATYPE.ISDN;
pub const NCM_LAN = NETCON_MEDIATYPE.LAN;
pub const NCM_PHONE = NETCON_MEDIATYPE.PHONE;
pub const NCM_TUNNEL = NETCON_MEDIATYPE.TUNNEL;
pub const NCM_PPPOE = NETCON_MEDIATYPE.PPPOE;
pub const NCM_BRIDGE = NETCON_MEDIATYPE.BRIDGE;
pub const NCM_SHAREDACCESSHOST_LAN = NETCON_MEDIATYPE.SHAREDACCESSHOST_LAN;
pub const NCM_SHAREDACCESSHOST_RAS = NETCON_MEDIATYPE.SHAREDACCESSHOST_RAS;

pub const NETCON_PROPERTIES = extern struct {
    guidId: Guid,
    pszwName: ?PWSTR,
    pszwDeviceName: ?PWSTR,
    Status: NETCON_STATUS,
    MediaType: NETCON_MEDIATYPE,
    dwCharacter: u32,
    clsidThisObject: Guid,
    clsidUiObject: Guid,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetConnection_Value = Guid.initString("c08956a1-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetConnection = &IID_INetConnection_Value;
pub const INetConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Connect: *const fn (
            self: *const INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Duplicate: *const fn (
            self: *const INetConnection,
            pszw_duplicate_name: ?[*:0]const u16,
            pp_con: ?*?*INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: *const fn (
            self: *const INetConnection,
            pp_props: ?*?*NETCON_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUiObjectClassId: *const fn (
            self: *const INetConnection,
            pclsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rename: *const fn (
            self: *const INetConnection,
            pszw_new_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn connect(self: *const T) HRESULT {
                return @as(*const INetConnection.VTable, @ptrCast(self.vtable)).Connect(@as(*const INetConnection, @ptrCast(self)));
            }
            pub inline fn disconnect(self: *const T) HRESULT {
                return @as(*const INetConnection.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const INetConnection, @ptrCast(self)));
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const INetConnection.VTable, @ptrCast(self.vtable)).Delete(@as(*const INetConnection, @ptrCast(self)));
            }
            pub inline fn duplicate(self: *const T, pszw_duplicate_name_: ?[*:0]const u16, pp_con_: ?*?*INetConnection) HRESULT {
                return @as(*const INetConnection.VTable, @ptrCast(self.vtable)).Duplicate(@as(*const INetConnection, @ptrCast(self)), pszw_duplicate_name_, pp_con_);
            }
            pub inline fn getProperties(self: *const T, pp_props_: ?*?*NETCON_PROPERTIES) HRESULT {
                return @as(*const INetConnection.VTable, @ptrCast(self.vtable)).GetProperties(@as(*const INetConnection, @ptrCast(self)), pp_props_);
            }
            pub inline fn getUiObjectClassId(self: *const T, pclsid_: ?*Guid) HRESULT {
                return @as(*const INetConnection.VTable, @ptrCast(self.vtable)).GetUiObjectClassId(@as(*const INetConnection, @ptrCast(self)), pclsid_);
            }
            pub inline fn rename(self: *const T, pszw_new_name_: ?[*:0]const u16) HRESULT {
                return @as(*const INetConnection.VTable, @ptrCast(self.vtable)).Rename(@as(*const INetConnection, @ptrCast(self)), pszw_new_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NETCONMGR_ENUM_FLAGS = enum(i32) {
    DEFAULT = 0,
    HIDDEN = 1,
};
pub const NCME_DEFAULT = NETCONMGR_ENUM_FLAGS.DEFAULT;
pub const NCME_HIDDEN = NETCONMGR_ENUM_FLAGS.HIDDEN;

const IID_INetConnectionManager_Value = Guid.initString("c08956a2-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetConnectionManager = &IID_INetConnectionManager_Value;
pub const INetConnectionManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumConnections: *const fn (
            self: *const INetConnectionManager,
            flags: NETCONMGR_ENUM_FLAGS,
            pp_enum: ?*?*IEnumNetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enumConnections(self: *const T, flags_: NETCONMGR_ENUM_FLAGS, pp_enum_: ?*?*IEnumNetConnection) HRESULT {
                return @as(*const INetConnectionManager.VTable, @ptrCast(self.vtable)).EnumConnections(@as(*const INetConnectionManager, @ptrCast(self)), flags_, pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NETCONUI_CONNECT_FLAGS = enum(i32) {
    DEFAULT = 0,
    NO_UI = 1,
    ENABLE_DISABLE = 2,
};
pub const NCUC_DEFAULT = NETCONUI_CONNECT_FLAGS.DEFAULT;
pub const NCUC_NO_UI = NETCONUI_CONNECT_FLAGS.NO_UI;
pub const NCUC_ENABLE_DISABLE = NETCONUI_CONNECT_FLAGS.ENABLE_DISABLE;

const IID_INetConnectionConnectUi_Value = Guid.initString("c08956a3-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetConnectionConnectUi = &IID_INetConnectionConnectUi_Value;
pub const INetConnectionConnectUi = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetConnection: *const fn (
            self: *const INetConnectionConnectUi,
            p_con: ?*INetConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn (
            self: *const INetConnectionConnectUi,
            hwnd_parent: ?HWND,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const INetConnectionConnectUi,
            hwnd_parent: ?HWND,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setConnection(self: *const T, p_con_: ?*INetConnection) HRESULT {
                return @as(*const INetConnectionConnectUi.VTable, @ptrCast(self.vtable)).SetConnection(@as(*const INetConnectionConnectUi, @ptrCast(self)), p_con_);
            }
            pub inline fn connect(self: *const T, hwnd_parent_: ?HWND, dw_flags_: u32) HRESULT {
                return @as(*const INetConnectionConnectUi.VTable, @ptrCast(self.vtable)).Connect(@as(*const INetConnectionConnectUi, @ptrCast(self)), hwnd_parent_, dw_flags_);
            }
            pub inline fn disconnect(self: *const T, hwnd_parent_: ?HWND, dw_flags_: u32) HRESULT {
                return @as(*const INetConnectionConnectUi.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const INetConnectionConnectUi, @ptrCast(self)), hwnd_parent_, dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumNetSharingPortMapping_Value = Guid.initString("c08956b0-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetSharingPortMapping = &IID_IEnumNetSharingPortMapping_Value;
pub const IEnumNetSharingPortMapping = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumNetSharingPortMapping,
            celt: u32,
            rg_var: [*]VARIANT,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumNetSharingPortMapping,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumNetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumNetSharingPortMapping,
            ppenum: ?*?*IEnumNetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rg_var_: [*]VARIANT, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumNetSharingPortMapping.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumNetSharingPortMapping, @ptrCast(self)), celt_, rg_var_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumNetSharingPortMapping.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumNetSharingPortMapping, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumNetSharingPortMapping.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumNetSharingPortMapping, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumNetSharingPortMapping) HRESULT {
                return @as(*const IEnumNetSharingPortMapping.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumNetSharingPortMapping, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPortMappingProps_Value = Guid.initString("24b7e9b5-e38f-4685-851b-00892cf5f940");
pub const IID_INetSharingPortMappingProps = &IID_INetSharingPortMappingProps_Value;
pub const INetSharingPortMappingProps = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingProps,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IPProtocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingProps,
            puc_i_p_prot: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExternalPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingProps,
            pus_port: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternalPort: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingProps,
            pus_port: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Options: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingProps,
            pdw_options: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingProps,
            pbstr_target_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetIPAddress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingProps,
            pbstr_target_i_p_address: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingProps,
            pbool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const INetSharingPortMappingProps.VTable, @ptrCast(self.vtable)).get_Name(@as(*const INetSharingPortMappingProps, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getIPProtocol(self: *const T, puc_i_p_prot_: ?*u8) HRESULT {
                return @as(*const INetSharingPortMappingProps.VTable, @ptrCast(self.vtable)).get_IPProtocol(@as(*const INetSharingPortMappingProps, @ptrCast(self)), puc_i_p_prot_);
            }
            pub inline fn getExternalPort(self: *const T, pus_port_: ?*i32) HRESULT {
                return @as(*const INetSharingPortMappingProps.VTable, @ptrCast(self.vtable)).get_ExternalPort(@as(*const INetSharingPortMappingProps, @ptrCast(self)), pus_port_);
            }
            pub inline fn getInternalPort(self: *const T, pus_port_: ?*i32) HRESULT {
                return @as(*const INetSharingPortMappingProps.VTable, @ptrCast(self.vtable)).get_InternalPort(@as(*const INetSharingPortMappingProps, @ptrCast(self)), pus_port_);
            }
            pub inline fn getOptions(self: *const T, pdw_options_: ?*i32) HRESULT {
                return @as(*const INetSharingPortMappingProps.VTable, @ptrCast(self.vtable)).get_Options(@as(*const INetSharingPortMappingProps, @ptrCast(self)), pdw_options_);
            }
            pub inline fn getTargetName(self: *const T, pbstr_target_name_: ?*?BSTR) HRESULT {
                return @as(*const INetSharingPortMappingProps.VTable, @ptrCast(self.vtable)).get_TargetName(@as(*const INetSharingPortMappingProps, @ptrCast(self)), pbstr_target_name_);
            }
            pub inline fn getTargetIPAddress(self: *const T, pbstr_target_i_p_address_: ?*?BSTR) HRESULT {
                return @as(*const INetSharingPortMappingProps.VTable, @ptrCast(self.vtable)).get_TargetIPAddress(@as(*const INetSharingPortMappingProps, @ptrCast(self)), pbstr_target_i_p_address_);
            }
            pub inline fn getEnabled(self: *const T, pbool_: ?*i16) HRESULT {
                return @as(*const INetSharingPortMappingProps.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const INetSharingPortMappingProps, @ptrCast(self)), pbool_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPortMapping_Value = Guid.initString("c08956b1-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetSharingPortMapping = &IID_INetSharingPortMapping_Value;
pub const INetSharingPortMapping = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Disable: *const fn (
            self: *const INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMapping,
            pp_n_s_p_m_p: ?*?*INetSharingPortMappingProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn disable(self: *const T) HRESULT {
                return @as(*const INetSharingPortMapping.VTable, @ptrCast(self.vtable)).Disable(@as(*const INetSharingPortMapping, @ptrCast(self)));
            }
            pub inline fn enable(self: *const T) HRESULT {
                return @as(*const INetSharingPortMapping.VTable, @ptrCast(self.vtable)).Enable(@as(*const INetSharingPortMapping, @ptrCast(self)));
            }
            pub inline fn getProperties(self: *const T, pp_n_s_p_m_p_: ?*?*INetSharingPortMappingProps) HRESULT {
                return @as(*const INetSharingPortMapping.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const INetSharingPortMapping, @ptrCast(self)), pp_n_s_p_m_p_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const INetSharingPortMapping.VTable, @ptrCast(self.vtable)).Delete(@as(*const INetSharingPortMapping, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumNetSharingEveryConnection_Value = Guid.initString("c08956b8-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetSharingEveryConnection = &IID_IEnumNetSharingEveryConnection_Value;
pub const IEnumNetSharingEveryConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumNetSharingEveryConnection,
            celt: u32,
            rg_var: [*]VARIANT,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumNetSharingEveryConnection,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumNetSharingEveryConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumNetSharingEveryConnection,
            ppenum: ?*?*IEnumNetSharingEveryConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rg_var_: [*]VARIANT, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumNetSharingEveryConnection.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumNetSharingEveryConnection, @ptrCast(self)), celt_, rg_var_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumNetSharingEveryConnection.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumNetSharingEveryConnection, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumNetSharingEveryConnection.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumNetSharingEveryConnection, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumNetSharingEveryConnection) HRESULT {
                return @as(*const IEnumNetSharingEveryConnection.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumNetSharingEveryConnection, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumNetSharingPublicConnection_Value = Guid.initString("c08956b4-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetSharingPublicConnection = &IID_IEnumNetSharingPublicConnection_Value;
pub const IEnumNetSharingPublicConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumNetSharingPublicConnection,
            celt: u32,
            rg_var: [*]VARIANT,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumNetSharingPublicConnection,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumNetSharingPublicConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumNetSharingPublicConnection,
            ppenum: ?*?*IEnumNetSharingPublicConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rg_var_: [*]VARIANT, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumNetSharingPublicConnection.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumNetSharingPublicConnection, @ptrCast(self)), celt_, rg_var_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumNetSharingPublicConnection.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumNetSharingPublicConnection, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumNetSharingPublicConnection.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumNetSharingPublicConnection, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumNetSharingPublicConnection) HRESULT {
                return @as(*const IEnumNetSharingPublicConnection.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumNetSharingPublicConnection, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumNetSharingPrivateConnection_Value = Guid.initString("c08956b5-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_IEnumNetSharingPrivateConnection = &IID_IEnumNetSharingPrivateConnection_Value;
pub const IEnumNetSharingPrivateConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumNetSharingPrivateConnection,
            celt: u32,
            rg_var: [*]VARIANT,
            p_celt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumNetSharingPrivateConnection,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumNetSharingPrivateConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumNetSharingPrivateConnection,
            ppenum: ?*?*IEnumNetSharingPrivateConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rg_var_: [*]VARIANT, p_celt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumNetSharingPrivateConnection.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumNetSharingPrivateConnection, @ptrCast(self)), celt_, rg_var_, p_celt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumNetSharingPrivateConnection.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumNetSharingPrivateConnection, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumNetSharingPrivateConnection.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumNetSharingPrivateConnection, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumNetSharingPrivateConnection) HRESULT {
                return @as(*const IEnumNetSharingPrivateConnection.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumNetSharingPrivateConnection, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPortMappingCollection_Value = Guid.initString("02e4a2de-da20-4e34-89c8-ac22275a010b");
pub const IID_INetSharingPortMappingCollection = &IID_INetSharingPortMappingCollection_Value;
pub const INetSharingPortMappingCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingCollection,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPortMappingCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const INetSharingPortMappingCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const INetSharingPortMappingCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const INetSharingPortMappingCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const INetSharingPortMappingCollection, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetConnectionProps_Value = Guid.initString("f4277c95-ce5b-463d-8167-5662d9bcaa72");
pub const IID_INetConnectionProps = &IID_INetConnectionProps_Value;
pub const INetConnectionProps = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Guid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetConnectionProps,
            pbstr_guid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetConnectionProps,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetConnectionProps,
            pbstr_device_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetConnectionProps,
            p_status: ?*NETCON_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetConnectionProps,
            p_media_type: ?*NETCON_MEDIATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Characteristics: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetConnectionProps,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getGuid(self: *const T, pbstr_guid_: ?*?BSTR) HRESULT {
                return @as(*const INetConnectionProps.VTable, @ptrCast(self.vtable)).get_Guid(@as(*const INetConnectionProps, @ptrCast(self)), pbstr_guid_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const INetConnectionProps.VTable, @ptrCast(self.vtable)).get_Name(@as(*const INetConnectionProps, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getDeviceName(self: *const T, pbstr_device_name_: ?*?BSTR) HRESULT {
                return @as(*const INetConnectionProps.VTable, @ptrCast(self.vtable)).get_DeviceName(@as(*const INetConnectionProps, @ptrCast(self)), pbstr_device_name_);
            }
            pub inline fn getStatus(self: *const T, p_status_: ?*NETCON_STATUS) HRESULT {
                return @as(*const INetConnectionProps.VTable, @ptrCast(self.vtable)).get_Status(@as(*const INetConnectionProps, @ptrCast(self)), p_status_);
            }
            pub inline fn getMediaType(self: *const T, p_media_type_: ?*NETCON_MEDIATYPE) HRESULT {
                return @as(*const INetConnectionProps.VTable, @ptrCast(self.vtable)).get_MediaType(@as(*const INetConnectionProps, @ptrCast(self)), p_media_type_);
            }
            pub inline fn getCharacteristics(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const INetConnectionProps.VTable, @ptrCast(self.vtable)).get_Characteristics(@as(*const INetConnectionProps, @ptrCast(self)), pdw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHARINGCONNECTIONTYPE = enum(i32) {
    UBLIC = 0,
    RIVATE = 1,
};
pub const ICSSHARINGTYPE_PUBLIC = SHARINGCONNECTIONTYPE.UBLIC;
pub const ICSSHARINGTYPE_PRIVATE = SHARINGCONNECTIONTYPE.RIVATE;

pub const SHARINGCONNECTION_ENUM_FLAGS = enum(i32) {
    DEFAULT = 0,
    ENABLED = 1,
};
pub const ICSSC_DEFAULT = SHARINGCONNECTION_ENUM_FLAGS.DEFAULT;
pub const ICSSC_ENABLED = SHARINGCONNECTION_ENUM_FLAGS.ENABLED;

pub const ICS_TARGETTYPE = enum(i32) {
    NAME = 0,
    IPADDRESS = 1,
};
pub const ICSTT_NAME = ICS_TARGETTYPE.NAME;
pub const ICSTT_IPADDRESS = ICS_TARGETTYPE.IPADDRESS;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingConfiguration_Value = Guid.initString("c08956b6-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetSharingConfiguration = &IID_INetSharingConfiguration_Value;
pub const INetSharingConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SharingEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingConfiguration,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SharingConnectionType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingConfiguration,
            p_type: ?*SHARINGCONNECTIONTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableSharing: *const fn (
            self: *const INetSharingConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableSharing: *const fn (
            self: *const INetSharingConfiguration,
            type: SHARINGCONNECTIONTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InternetFirewallEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingConfiguration,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableInternetFirewall: *const fn (
            self: *const INetSharingConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableInternetFirewall: *const fn (
            self: *const INetSharingConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumPortMappings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingConfiguration,
            flags: SHARINGCONNECTION_ENUM_FLAGS,
            pp_coll: ?*?*INetSharingPortMappingCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPortMapping: *const fn (
            self: *const INetSharingConfiguration,
            bstr_name: ?BSTR,
            uc_i_p_protocol: u8,
            us_external_port: u16,
            us_internal_port: u16,
            dw_options: u32,
            bstr_target_name_or_i_p_address: ?BSTR,
            e_target_type: ICS_TARGETTYPE,
            pp_mapping: ?*?*INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePortMapping: *const fn (
            self: *const INetSharingConfiguration,
            p_mapping: ?*INetSharingPortMapping,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSharingEnabled(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).get_SharingEnabled(@as(*const INetSharingConfiguration, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn getSharingConnectionType(self: *const T, p_type_: ?*SHARINGCONNECTIONTYPE) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).get_SharingConnectionType(@as(*const INetSharingConfiguration, @ptrCast(self)), p_type_);
            }
            pub inline fn disableSharing(self: *const T) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).DisableSharing(@as(*const INetSharingConfiguration, @ptrCast(self)));
            }
            pub inline fn enableSharing(self: *const T, type_: SHARINGCONNECTIONTYPE) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).EnableSharing(@as(*const INetSharingConfiguration, @ptrCast(self)), type_);
            }
            pub inline fn getInternetFirewallEnabled(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).get_InternetFirewallEnabled(@as(*const INetSharingConfiguration, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn disableInternetFirewall(self: *const T) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).DisableInternetFirewall(@as(*const INetSharingConfiguration, @ptrCast(self)));
            }
            pub inline fn enableInternetFirewall(self: *const T) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).EnableInternetFirewall(@as(*const INetSharingConfiguration, @ptrCast(self)));
            }
            pub inline fn getEnumPortMappings(self: *const T, flags_: SHARINGCONNECTION_ENUM_FLAGS, pp_coll_: ?*?*INetSharingPortMappingCollection) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).get_EnumPortMappings(@as(*const INetSharingConfiguration, @ptrCast(self)), flags_, pp_coll_);
            }
            pub inline fn addPortMapping(self: *const T, bstr_name_: ?BSTR, uc_i_p_protocol_: u8, us_external_port_: u16, us_internal_port_: u16, dw_options_: u32, bstr_target_name_or_i_p_address_: ?BSTR, e_target_type_: ICS_TARGETTYPE, pp_mapping_: ?*?*INetSharingPortMapping) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).AddPortMapping(@as(*const INetSharingConfiguration, @ptrCast(self)), bstr_name_, uc_i_p_protocol_, us_external_port_, us_internal_port_, dw_options_, bstr_target_name_or_i_p_address_, e_target_type_, pp_mapping_);
            }
            pub inline fn removePortMapping(self: *const T, p_mapping_: ?*INetSharingPortMapping) HRESULT {
                return @as(*const INetSharingConfiguration.VTable, @ptrCast(self.vtable)).RemovePortMapping(@as(*const INetSharingConfiguration, @ptrCast(self)), p_mapping_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingEveryConnectionCollection_Value = Guid.initString("33c4643c-7811-46fa-a89a-768597bd7223");
pub const IID_INetSharingEveryConnectionCollection = &IID_INetSharingEveryConnectionCollection_Value;
pub const INetSharingEveryConnectionCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingEveryConnectionCollection,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingEveryConnectionCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const INetSharingEveryConnectionCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const INetSharingEveryConnectionCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const INetSharingEveryConnectionCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const INetSharingEveryConnectionCollection, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPublicConnectionCollection_Value = Guid.initString("7d7a6355-f372-4971-a149-bfc927be762a");
pub const IID_INetSharingPublicConnectionCollection = &IID_INetSharingPublicConnectionCollection_Value;
pub const INetSharingPublicConnectionCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPublicConnectionCollection,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPublicConnectionCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const INetSharingPublicConnectionCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const INetSharingPublicConnectionCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const INetSharingPublicConnectionCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const INetSharingPublicConnectionCollection, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingPrivateConnectionCollection_Value = Guid.initString("38ae69e0-4409-402a-a2cb-e965c727f840");
pub const IID_INetSharingPrivateConnectionCollection = &IID_INetSharingPrivateConnectionCollection_Value;
pub const INetSharingPrivateConnectionCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPrivateConnectionCollection,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingPrivateConnectionCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const INetSharingPrivateConnectionCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const INetSharingPrivateConnectionCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const INetSharingPrivateConnectionCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const INetSharingPrivateConnectionCollection, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INetSharingManager_Value = Guid.initString("c08956b7-1cd3-11d1-b1c5-00805fc1270e");
pub const IID_INetSharingManager = &IID_INetSharingManager_Value;
pub const INetSharingManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SharingInstalled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingManager,
            pb_installed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumPublicConnections: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingManager,
            flags: SHARINGCONNECTION_ENUM_FLAGS,
            pp_coll: ?*?*INetSharingPublicConnectionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumPrivateConnections: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingManager,
            flags: SHARINGCONNECTION_ENUM_FLAGS,
            pp_coll: ?*?*INetSharingPrivateConnectionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_INetSharingConfigurationForINetConnection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingManager,
            p_net_connection: ?*INetConnection,
            pp_net_sharing_configuration: ?*?*INetSharingConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumEveryConnection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingManager,
            pp_coll: ?*?*INetSharingEveryConnectionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetConnectionProps: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetSharingManager,
            p_net_connection: ?*INetConnection,
            pp_props: ?*?*INetConnectionProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSharingInstalled(self: *const T, pb_installed_: ?*i16) HRESULT {
                return @as(*const INetSharingManager.VTable, @ptrCast(self.vtable)).get_SharingInstalled(@as(*const INetSharingManager, @ptrCast(self)), pb_installed_);
            }
            pub inline fn getEnumPublicConnections(self: *const T, flags_: SHARINGCONNECTION_ENUM_FLAGS, pp_coll_: ?*?*INetSharingPublicConnectionCollection) HRESULT {
                return @as(*const INetSharingManager.VTable, @ptrCast(self.vtable)).get_EnumPublicConnections(@as(*const INetSharingManager, @ptrCast(self)), flags_, pp_coll_);
            }
            pub inline fn getEnumPrivateConnections(self: *const T, flags_: SHARINGCONNECTION_ENUM_FLAGS, pp_coll_: ?*?*INetSharingPrivateConnectionCollection) HRESULT {
                return @as(*const INetSharingManager.VTable, @ptrCast(self.vtable)).get_EnumPrivateConnections(@as(*const INetSharingManager, @ptrCast(self)), flags_, pp_coll_);
            }
            pub inline fn getINetSharingConfigurationForINetConnection(self: *const T, p_net_connection_: ?*INetConnection, pp_net_sharing_configuration_: ?*?*INetSharingConfiguration) HRESULT {
                return @as(*const INetSharingManager.VTable, @ptrCast(self.vtable)).get_INetSharingConfigurationForINetConnection(@as(*const INetSharingManager, @ptrCast(self)), p_net_connection_, pp_net_sharing_configuration_);
            }
            pub inline fn getEnumEveryConnection(self: *const T, pp_coll_: ?*?*INetSharingEveryConnectionCollection) HRESULT {
                return @as(*const INetSharingManager.VTable, @ptrCast(self.vtable)).get_EnumEveryConnection(@as(*const INetSharingManager, @ptrCast(self)), pp_coll_);
            }
            pub inline fn getNetConnectionProps(self: *const T, p_net_connection_: ?*INetConnection, pp_props_: ?*?*INetConnectionProps) HRESULT {
                return @as(*const INetSharingManager.VTable, @ptrCast(self.vtable)).get_NetConnectionProps(@as(*const INetSharingManager, @ptrCast(self)), p_net_connection_, pp_props_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_NetFwRule_Value = Guid.initString("2c5bc43e-3369-4c33-ab0c-be9469677af4");
pub const CLSID_NetFwRule = &CLSID_NetFwRule_Value;

const CLSID_NetFwOpenPort_Value = Guid.initString("0ca545c6-37ad-4a6c-bf92-9f7610067ef5");
pub const CLSID_NetFwOpenPort = &CLSID_NetFwOpenPort_Value;

const CLSID_NetFwAuthorizedApplication_Value = Guid.initString("ec9846b3-2762-4a6b-a214-6acb603462d2");
pub const CLSID_NetFwAuthorizedApplication = &CLSID_NetFwAuthorizedApplication_Value;

const CLSID_NetFwPolicy2_Value = Guid.initString("e2b3c97f-6ae1-41ac-817a-f6f92166d7dd");
pub const CLSID_NetFwPolicy2 = &CLSID_NetFwPolicy2_Value;

const CLSID_NetFwProduct_Value = Guid.initString("9d745ed8-c514-4d1d-bf42-751fed2d5ac7");
pub const CLSID_NetFwProduct = &CLSID_NetFwProduct_Value;

const CLSID_NetFwProducts_Value = Guid.initString("cc19079b-8272-4d73-bb70-cdb533527b61");
pub const CLSID_NetFwProducts = &CLSID_NetFwProducts_Value;

const CLSID_NetFwMgr_Value = Guid.initString("304ce942-6e39-40d8-943a-b913c40c9cd4");
pub const CLSID_NetFwMgr = &CLSID_NetFwMgr_Value;

pub const NET_FW_POLICY_TYPE = enum(i32) {
    GROUP = 0,
    LOCAL = 1,
    EFFECTIVE = 2,
    TYPE_MAX = 3,
};
pub const NET_FW_POLICY_GROUP = NET_FW_POLICY_TYPE.GROUP;
pub const NET_FW_POLICY_LOCAL = NET_FW_POLICY_TYPE.LOCAL;
pub const NET_FW_POLICY_EFFECTIVE = NET_FW_POLICY_TYPE.EFFECTIVE;
pub const NET_FW_POLICY_TYPE_MAX = NET_FW_POLICY_TYPE.TYPE_MAX;

pub const NET_FW_PROFILE_TYPE = enum(i32) {
    DOMAIN = 0,
    STANDARD = 1,
    CURRENT = 2,
    TYPE_MAX = 3,
};
pub const NET_FW_PROFILE_DOMAIN = NET_FW_PROFILE_TYPE.DOMAIN;
pub const NET_FW_PROFILE_STANDARD = NET_FW_PROFILE_TYPE.STANDARD;
pub const NET_FW_PROFILE_CURRENT = NET_FW_PROFILE_TYPE.CURRENT;
pub const NET_FW_PROFILE_TYPE_MAX = NET_FW_PROFILE_TYPE.TYPE_MAX;

pub const NET_FW_PROFILE_TYPE2 = enum(i32) {
    DOMAIN = 1,
    PRIVATE = 2,
    PUBLIC = 4,
    ALL = 2147483647,
};
pub const NET_FW_PROFILE2_DOMAIN = NET_FW_PROFILE_TYPE2.DOMAIN;
pub const NET_FW_PROFILE2_PRIVATE = NET_FW_PROFILE_TYPE2.PRIVATE;
pub const NET_FW_PROFILE2_PUBLIC = NET_FW_PROFILE_TYPE2.PUBLIC;
pub const NET_FW_PROFILE2_ALL = NET_FW_PROFILE_TYPE2.ALL;

pub const NET_FW_IP_VERSION = enum(i32) {
    V4 = 0,
    V6 = 1,
    ANY = 2,
    MAX = 3,
};
pub const NET_FW_IP_VERSION_V4 = NET_FW_IP_VERSION.V4;
pub const NET_FW_IP_VERSION_V6 = NET_FW_IP_VERSION.V6;
pub const NET_FW_IP_VERSION_ANY = NET_FW_IP_VERSION.ANY;
pub const NET_FW_IP_VERSION_MAX = NET_FW_IP_VERSION.MAX;

pub const NET_FW_SCOPE = enum(i32) {
    ALL = 0,
    LOCAL_SUBNET = 1,
    CUSTOM = 2,
    MAX = 3,
};
pub const NET_FW_SCOPE_ALL = NET_FW_SCOPE.ALL;
pub const NET_FW_SCOPE_LOCAL_SUBNET = NET_FW_SCOPE.LOCAL_SUBNET;
pub const NET_FW_SCOPE_CUSTOM = NET_FW_SCOPE.CUSTOM;
pub const NET_FW_SCOPE_MAX = NET_FW_SCOPE.MAX;

pub const NET_FW_IP_PROTOCOL = enum(i32) {
    TCP = 6,
    UDP = 17,
    ANY = 256,
};
pub const NET_FW_IP_PROTOCOL_TCP = NET_FW_IP_PROTOCOL.TCP;
pub const NET_FW_IP_PROTOCOL_UDP = NET_FW_IP_PROTOCOL.UDP;
pub const NET_FW_IP_PROTOCOL_ANY = NET_FW_IP_PROTOCOL.ANY;

pub const NET_FW_SERVICE_TYPE = enum(i32) {
    FILE_AND_PRINT = 0,
    UPNP = 1,
    REMOTE_DESKTOP = 2,
    NONE = 3,
    TYPE_MAX = 4,
};
pub const NET_FW_SERVICE_FILE_AND_PRINT = NET_FW_SERVICE_TYPE.FILE_AND_PRINT;
pub const NET_FW_SERVICE_UPNP = NET_FW_SERVICE_TYPE.UPNP;
pub const NET_FW_SERVICE_REMOTE_DESKTOP = NET_FW_SERVICE_TYPE.REMOTE_DESKTOP;
pub const NET_FW_SERVICE_NONE = NET_FW_SERVICE_TYPE.NONE;
pub const NET_FW_SERVICE_TYPE_MAX = NET_FW_SERVICE_TYPE.TYPE_MAX;

pub const NET_FW_RULE_DIRECTION = enum(i32) {
    IN = 1,
    OUT = 2,
    MAX = 3,
};
pub const NET_FW_RULE_DIR_IN = NET_FW_RULE_DIRECTION.IN;
pub const NET_FW_RULE_DIR_OUT = NET_FW_RULE_DIRECTION.OUT;
pub const NET_FW_RULE_DIR_MAX = NET_FW_RULE_DIRECTION.MAX;

pub const NET_FW_ACTION = enum(i32) {
    BLOCK = 0,
    ALLOW = 1,
    MAX = 2,
};
pub const NET_FW_ACTION_BLOCK = NET_FW_ACTION.BLOCK;
pub const NET_FW_ACTION_ALLOW = NET_FW_ACTION.ALLOW;
pub const NET_FW_ACTION_MAX = NET_FW_ACTION.MAX;

pub const NET_FW_MODIFY_STATE = enum(i32) {
    OK = 0,
    GP_OVERRIDE = 1,
    INBOUND_BLOCKED = 2,
};
pub const NET_FW_MODIFY_STATE_OK = NET_FW_MODIFY_STATE.OK;
pub const NET_FW_MODIFY_STATE_GP_OVERRIDE = NET_FW_MODIFY_STATE.GP_OVERRIDE;
pub const NET_FW_MODIFY_STATE_INBOUND_BLOCKED = NET_FW_MODIFY_STATE.INBOUND_BLOCKED;

pub const NET_FW_RULE_CATEGORY = enum(i32) {
    BOOT = 0,
    STEALTH = 1,
    FIREWALL = 2,
    CONSEC = 3,
    MAX = 4,
};
pub const NET_FW_RULE_CATEGORY_BOOT = NET_FW_RULE_CATEGORY.BOOT;
pub const NET_FW_RULE_CATEGORY_STEALTH = NET_FW_RULE_CATEGORY.STEALTH;
pub const NET_FW_RULE_CATEGORY_FIREWALL = NET_FW_RULE_CATEGORY.FIREWALL;
pub const NET_FW_RULE_CATEGORY_CONSEC = NET_FW_RULE_CATEGORY.CONSEC;
pub const NET_FW_RULE_CATEGORY_MAX = NET_FW_RULE_CATEGORY.MAX;

pub const NET_FW_EDGE_TRAVERSAL_TYPE = enum(i32) {
    DENY = 0,
    ALLOW = 1,
    DEFER_TO_APP = 2,
    DEFER_TO_USER = 3,
};
pub const NET_FW_EDGE_TRAVERSAL_TYPE_DENY = NET_FW_EDGE_TRAVERSAL_TYPE.DENY;
pub const NET_FW_EDGE_TRAVERSAL_TYPE_ALLOW = NET_FW_EDGE_TRAVERSAL_TYPE.ALLOW;
pub const NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_APP = NET_FW_EDGE_TRAVERSAL_TYPE.DEFER_TO_APP;
pub const NET_FW_EDGE_TRAVERSAL_TYPE_DEFER_TO_USER = NET_FW_EDGE_TRAVERSAL_TYPE.DEFER_TO_USER;

pub const NET_FW_AUTHENTICATE_TYPE = enum(i32) {
    NONE = 0,
    NO_ENCAPSULATION = 1,
    WITH_INTEGRITY = 2,
    AND_NEGOTIATE_ENCRYPTION = 3,
    AND_ENCRYPT = 4,
};
pub const NET_FW_AUTHENTICATE_NONE = NET_FW_AUTHENTICATE_TYPE.NONE;
pub const NET_FW_AUTHENTICATE_NO_ENCAPSULATION = NET_FW_AUTHENTICATE_TYPE.NO_ENCAPSULATION;
pub const NET_FW_AUTHENTICATE_WITH_INTEGRITY = NET_FW_AUTHENTICATE_TYPE.WITH_INTEGRITY;
pub const NET_FW_AUTHENTICATE_AND_NEGOTIATE_ENCRYPTION = NET_FW_AUTHENTICATE_TYPE.AND_NEGOTIATE_ENCRYPTION;
pub const NET_FW_AUTHENTICATE_AND_ENCRYPT = NET_FW_AUTHENTICATE_TYPE.AND_ENCRYPT;

pub const NETISO_FLAG = enum(i32) {
    FORCE_COMPUTE_BINARIES = 1,
    MAX = 2,
};
pub const NETISO_FLAG_FORCE_COMPUTE_BINARIES = NETISO_FLAG.FORCE_COMPUTE_BINARIES;
pub const NETISO_FLAG_MAX = NETISO_FLAG.MAX;

pub const INET_FIREWALL_AC_CREATION_TYPE = enum(i32) {
    NONE = 0,
    PACKAGE_ID_ONLY = 1,
    BINARY = 2,
    MAX = 4,
};
pub const INET_FIREWALL_AC_NONE = INET_FIREWALL_AC_CREATION_TYPE.NONE;
pub const INET_FIREWALL_AC_PACKAGE_ID_ONLY = INET_FIREWALL_AC_CREATION_TYPE.PACKAGE_ID_ONLY;
pub const INET_FIREWALL_AC_BINARY = INET_FIREWALL_AC_CREATION_TYPE.BINARY;
pub const INET_FIREWALL_AC_MAX = INET_FIREWALL_AC_CREATION_TYPE.MAX;

pub const INET_FIREWALL_AC_CHANGE_TYPE = enum(i32) {
    INVALID = 0,
    CREATE = 1,
    DELETE = 2,
    MAX = 3,
};
pub const INET_FIREWALL_AC_CHANGE_INVALID = INET_FIREWALL_AC_CHANGE_TYPE.INVALID;
pub const INET_FIREWALL_AC_CHANGE_CREATE = INET_FIREWALL_AC_CHANGE_TYPE.CREATE;
pub const INET_FIREWALL_AC_CHANGE_DELETE = INET_FIREWALL_AC_CHANGE_TYPE.DELETE;
pub const INET_FIREWALL_AC_CHANGE_MAX = INET_FIREWALL_AC_CHANGE_TYPE.MAX;

pub const INET_FIREWALL_AC_CAPABILITIES = extern struct {
    count: u32,
    capabilities: ?*SID_AND_ATTRIBUTES,
};

pub const INET_FIREWALL_AC_BINARIES = extern struct {
    count: u32,
    binaries: ?*?PWSTR,
};

pub const INET_FIREWALL_AC_CHANGE = extern struct {
    changeType: INET_FIREWALL_AC_CHANGE_TYPE,
    createType: INET_FIREWALL_AC_CREATION_TYPE,
    appContainerSid: ?*SID,
    userSid: ?*SID,
    displayName: ?PWSTR,
    Anonymous: extern union {
        capabilities: INET_FIREWALL_AC_CAPABILITIES,
        binaries: INET_FIREWALL_AC_BINARIES,
    },
};

pub const INET_FIREWALL_APP_CONTAINER = extern struct {
    appContainerSid: ?*SID,
    userSid: ?*SID,
    appContainerName: ?PWSTR,
    displayName: ?PWSTR,
    description: ?PWSTR,
    capabilities: INET_FIREWALL_AC_CAPABILITIES,
    binaries: INET_FIREWALL_AC_BINARIES,
    workingDirectory: ?PWSTR,
    packageFullName: ?PWSTR,
};

pub const PAC_CHANGES_CALLBACK_FN = *const fn (
    context: ?*anyopaque,
    p_change: ?*const INET_FIREWALL_AC_CHANGE,
) callconv(@import("std").os.windows.WINAPI) void;

pub const NETISO_ERROR_TYPE = enum(i32) {
    NONE = 0,
    PRIVATE_NETWORK = 1,
    INTERNET_CLIENT = 2,
    INTERNET_CLIENT_SERVER = 3,
    MAX = 4,
};
pub const NETISO_ERROR_TYPE_NONE = NETISO_ERROR_TYPE.NONE;
pub const NETISO_ERROR_TYPE_PRIVATE_NETWORK = NETISO_ERROR_TYPE.PRIVATE_NETWORK;
pub const NETISO_ERROR_TYPE_INTERNET_CLIENT = NETISO_ERROR_TYPE.INTERNET_CLIENT;
pub const NETISO_ERROR_TYPE_INTERNET_CLIENT_SERVER = NETISO_ERROR_TYPE.INTERNET_CLIENT_SERVER;
pub const NETISO_ERROR_TYPE_MAX = NETISO_ERROR_TYPE.MAX;

pub const PNETISO_EDP_ID_CALLBACK_FN = *const fn (
    context: ?*anyopaque,
    wsz_enterprise_id: ?[*:0]const u16,
    dw_err: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE = enum(i32) {
    INVALID = 0,
    LOCAL = 1,
    MDM = 2,
};
pub const FW_DYNAMIC_KEYWORD_ORIGIN_INVALID = _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE.INVALID;
pub const FW_DYNAMIC_KEYWORD_ORIGIN_LOCAL = _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE.LOCAL;
pub const FW_DYNAMIC_KEYWORD_ORIGIN_MDM = _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE.MDM;

pub const _tag_FW_DYNAMIC_KEYWORD_ADDRESS0 = extern struct {
    id: Guid,
    keyword: ?[*:0]const u16,
    flags: u32,
    addresses: ?[*:0]const u16,
};

pub const _tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0 = extern struct {
    dynamicKeywordAddress: _tag_FW_DYNAMIC_KEYWORD_ADDRESS0,
    next: ?*_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0,
    schemaVersion: u16,
    originType: _tag_FW_DYNAMIC_KEYWORD_ORIGIN_TYPE,
};

pub const _tag_FW_DYNAMIC_KEYWORD_ADDRESS_FLAGS = enum(i32) {
    E = 1,
};
pub const FW_DYNAMIC_KEYWORD_ADDRESS_FLAGS_AUTO_RESOLVE = _tag_FW_DYNAMIC_KEYWORD_ADDRESS_FLAGS.E;

pub const _tag_FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS = enum(i32) {
    AUTO_RESOLVE = 1,
    NON_AUTO_RESOLVE = 2,
    ALL = 3,
};
pub const FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS_AUTO_RESOLVE = _tag_FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS.AUTO_RESOLVE;
pub const FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS_NON_AUTO_RESOLVE = _tag_FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS.NON_AUTO_RESOLVE;
pub const FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS_ALL = _tag_FW_DYNAMIC_KEYWORD_ADDRESS_ENUM_FLAGS.ALL;

pub const PFN_FWADDDYNAMICKEYWORDADDRESS0 = *const fn (
    dynamic_keyword_address: ?*const _tag_FW_DYNAMIC_KEYWORD_ADDRESS0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWDELETEDYNAMICKEYWORDADDRESS0 = *const fn (
    dynamic_keyword_address_id: Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWENUMDYNAMICKEYWORDADDRESSESBYTYPE0 = *const fn (
    flags: u32,
    dynamic_keyword_address_data: ?*?*_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWENUMDYNAMICKEYWORDADDRESSBYID0 = *const fn (
    dynamic_keyword_address_id: Guid,
    dynamic_keyword_address_data: ?*?*_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWFREEDYNAMICKEYWORDADDRESSDATA0 = *const fn (
    dynamic_keyword_address_data: ?*_tag_FW_DYNAMIC_KEYWORD_ADDRESS_DATA0,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFN_FWUPDATEDYNAMICKEYWORDADDRESS0 = *const fn (
    dynamic_keyword_address_id: Guid,
    updated_addresses: ?[*:0]const u16,
    append: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwRemoteAdminSettings_Value = Guid.initString("d4becddf-6f73-4a83-b832-9c66874cd20e");
pub const IID_INetFwRemoteAdminSettings = &IID_INetFwRemoteAdminSettings_Value;
pub const INetFwRemoteAdminSettings = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRemoteAdminSettings,
            ip_version: ?*NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRemoteAdminSettings,
            ip_version: NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRemoteAdminSettings,
            scope: ?*NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRemoteAdminSettings,
            scope: NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRemoteAdminSettings,
            remote_addrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRemoteAdminSettings,
            remote_addrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRemoteAdminSettings,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRemoteAdminSettings,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIpVersion(self: *const T, ip_version_: ?*NET_FW_IP_VERSION) HRESULT {
                return @as(*const INetFwRemoteAdminSettings.VTable, @ptrCast(self.vtable)).get_IpVersion(@as(*const INetFwRemoteAdminSettings, @ptrCast(self)), ip_version_);
            }
            pub inline fn putIpVersion(self: *const T, ip_version_: NET_FW_IP_VERSION) HRESULT {
                return @as(*const INetFwRemoteAdminSettings.VTable, @ptrCast(self.vtable)).put_IpVersion(@as(*const INetFwRemoteAdminSettings, @ptrCast(self)), ip_version_);
            }
            pub inline fn getScope(self: *const T, scope_: ?*NET_FW_SCOPE) HRESULT {
                return @as(*const INetFwRemoteAdminSettings.VTable, @ptrCast(self.vtable)).get_Scope(@as(*const INetFwRemoteAdminSettings, @ptrCast(self)), scope_);
            }
            pub inline fn putScope(self: *const T, scope_: NET_FW_SCOPE) HRESULT {
                return @as(*const INetFwRemoteAdminSettings.VTable, @ptrCast(self.vtable)).put_Scope(@as(*const INetFwRemoteAdminSettings, @ptrCast(self)), scope_);
            }
            pub inline fn getRemoteAddresses(self: *const T, remote_addrs_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRemoteAdminSettings.VTable, @ptrCast(self.vtable)).get_RemoteAddresses(@as(*const INetFwRemoteAdminSettings, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn putRemoteAddresses(self: *const T, remote_addrs_: ?BSTR) HRESULT {
                return @as(*const INetFwRemoteAdminSettings.VTable, @ptrCast(self.vtable)).put_RemoteAddresses(@as(*const INetFwRemoteAdminSettings, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwRemoteAdminSettings.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const INetFwRemoteAdminSettings, @ptrCast(self)), enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const INetFwRemoteAdminSettings.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const INetFwRemoteAdminSettings, @ptrCast(self)), enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwIcmpSettings_Value = Guid.initString("a6207b2e-7cdd-426a-951e-5e1cbc5afead");
pub const IID_INetFwIcmpSettings = &IID_INetFwIcmpSettings_Value;
pub const INetFwIcmpSettings = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundDestinationUnreachable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundDestinationUnreachable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowRedirect: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowRedirect: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInboundEchoRequest: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInboundEchoRequest: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundTimeExceeded: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundTimeExceeded: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundParameterProblem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundParameterProblem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundSourceQuench: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundSourceQuench: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInboundRouterRequest: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInboundRouterRequest: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInboundTimestampRequest: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInboundTimestampRequest: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowInboundMaskRequest: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowInboundMaskRequest: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowOutboundPacketTooBig: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowOutboundPacketTooBig: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwIcmpSettings,
            allow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAllowOutboundDestinationUnreachable(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowOutboundDestinationUnreachable(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowOutboundDestinationUnreachable(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowOutboundDestinationUnreachable(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn getAllowRedirect(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowRedirect(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowRedirect(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowRedirect(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn getAllowInboundEchoRequest(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowInboundEchoRequest(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowInboundEchoRequest(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowInboundEchoRequest(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn getAllowOutboundTimeExceeded(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowOutboundTimeExceeded(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowOutboundTimeExceeded(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowOutboundTimeExceeded(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn getAllowOutboundParameterProblem(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowOutboundParameterProblem(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowOutboundParameterProblem(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowOutboundParameterProblem(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn getAllowOutboundSourceQuench(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowOutboundSourceQuench(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowOutboundSourceQuench(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowOutboundSourceQuench(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn getAllowInboundRouterRequest(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowInboundRouterRequest(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowInboundRouterRequest(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowInboundRouterRequest(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn getAllowInboundTimestampRequest(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowInboundTimestampRequest(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowInboundTimestampRequest(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowInboundTimestampRequest(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn getAllowInboundMaskRequest(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowInboundMaskRequest(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowInboundMaskRequest(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowInboundMaskRequest(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn getAllowOutboundPacketTooBig(self: *const T, allow_: ?*i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).get_AllowOutboundPacketTooBig(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
            pub inline fn putAllowOutboundPacketTooBig(self: *const T, allow_: i16) HRESULT {
                return @as(*const INetFwIcmpSettings.VTable, @ptrCast(self.vtable)).put_AllowOutboundPacketTooBig(@as(*const INetFwIcmpSettings, @ptrCast(self)), allow_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwOpenPort_Value = Guid.initString("e0483ba0-47ff-4d9c-a6d6-7741d0b195f7");
pub const IID_INetFwOpenPort = &IID_INetFwOpenPort_Value;
pub const INetFwOpenPort = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            ip_version: ?*NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            ip_version: NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            ip_protocol: ?*NET_FW_IP_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Protocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            ip_protocol: NET_FW_IP_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Port: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            port_number: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Port: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            port_number: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            scope: ?*NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            scope: NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            remote_addrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            remote_addrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BuiltIn: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPort,
            built_in: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).get_Name(@as(*const INetFwOpenPort, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).put_Name(@as(*const INetFwOpenPort, @ptrCast(self)), name_);
            }
            pub inline fn getIpVersion(self: *const T, ip_version_: ?*NET_FW_IP_VERSION) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).get_IpVersion(@as(*const INetFwOpenPort, @ptrCast(self)), ip_version_);
            }
            pub inline fn putIpVersion(self: *const T, ip_version_: NET_FW_IP_VERSION) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).put_IpVersion(@as(*const INetFwOpenPort, @ptrCast(self)), ip_version_);
            }
            pub inline fn getProtocol(self: *const T, ip_protocol_: ?*NET_FW_IP_PROTOCOL) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).get_Protocol(@as(*const INetFwOpenPort, @ptrCast(self)), ip_protocol_);
            }
            pub inline fn putProtocol(self: *const T, ip_protocol_: NET_FW_IP_PROTOCOL) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).put_Protocol(@as(*const INetFwOpenPort, @ptrCast(self)), ip_protocol_);
            }
            pub inline fn getPort(self: *const T, port_number_: ?*i32) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).get_Port(@as(*const INetFwOpenPort, @ptrCast(self)), port_number_);
            }
            pub inline fn putPort(self: *const T, port_number_: i32) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).put_Port(@as(*const INetFwOpenPort, @ptrCast(self)), port_number_);
            }
            pub inline fn getScope(self: *const T, scope_: ?*NET_FW_SCOPE) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).get_Scope(@as(*const INetFwOpenPort, @ptrCast(self)), scope_);
            }
            pub inline fn putScope(self: *const T, scope_: NET_FW_SCOPE) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).put_Scope(@as(*const INetFwOpenPort, @ptrCast(self)), scope_);
            }
            pub inline fn getRemoteAddresses(self: *const T, remote_addrs_: ?*?BSTR) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).get_RemoteAddresses(@as(*const INetFwOpenPort, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn putRemoteAddresses(self: *const T, remote_addrs_: ?BSTR) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).put_RemoteAddresses(@as(*const INetFwOpenPort, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const INetFwOpenPort, @ptrCast(self)), enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const INetFwOpenPort, @ptrCast(self)), enabled_);
            }
            pub inline fn getBuiltIn(self: *const T, built_in_: ?*i16) HRESULT {
                return @as(*const INetFwOpenPort.VTable, @ptrCast(self.vtable)).get_BuiltIn(@as(*const INetFwOpenPort, @ptrCast(self)), built_in_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwOpenPorts_Value = Guid.initString("c0e9d7fa-e07e-430a-b19a-090ce82d92e2");
pub const IID_INetFwOpenPorts = &IID_INetFwOpenPorts_Value;
pub const INetFwOpenPorts = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPorts,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const INetFwOpenPorts,
            port: ?*INetFwOpenPort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const INetFwOpenPorts,
            port_number: i32,
            ip_protocol: NET_FW_IP_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const INetFwOpenPorts,
            port_number: i32,
            ip_protocol: NET_FW_IP_PROTOCOL,
            open_port: ?*?*INetFwOpenPort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwOpenPorts,
            new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const INetFwOpenPorts.VTable, @ptrCast(self.vtable)).get_Count(@as(*const INetFwOpenPorts, @ptrCast(self)), count_);
            }
            pub inline fn add(self: *const T, port_: ?*INetFwOpenPort) HRESULT {
                return @as(*const INetFwOpenPorts.VTable, @ptrCast(self.vtable)).Add(@as(*const INetFwOpenPorts, @ptrCast(self)), port_);
            }
            pub inline fn remove(self: *const T, port_number_: i32, ip_protocol_: NET_FW_IP_PROTOCOL) HRESULT {
                return @as(*const INetFwOpenPorts.VTable, @ptrCast(self.vtable)).Remove(@as(*const INetFwOpenPorts, @ptrCast(self)), port_number_, ip_protocol_);
            }
            pub inline fn item(self: *const T, port_number_: i32, ip_protocol_: NET_FW_IP_PROTOCOL, open_port_: ?*?*INetFwOpenPort) HRESULT {
                return @as(*const INetFwOpenPorts.VTable, @ptrCast(self.vtable)).Item(@as(*const INetFwOpenPorts, @ptrCast(self)), port_number_, ip_protocol_, open_port_);
            }
            pub inline fn getNewEnum(self: *const T, new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const INetFwOpenPorts.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const INetFwOpenPorts, @ptrCast(self)), new_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwService_Value = Guid.initString("79fd57c8-908e-4a36-9888-d5b3f0a444cf");
pub const IID_INetFwService = &IID_INetFwService_Value;
pub const INetFwService = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            type: ?*NET_FW_SERVICE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Customized: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            customized: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            ip_version: ?*NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            ip_version: NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            scope: ?*NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            scope: NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            remote_addrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            remote_addrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GloballyOpenPorts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwService,
            open_ports: ?*?*INetFwOpenPorts,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).get_Name(@as(*const INetFwService, @ptrCast(self)), name_);
            }
            pub inline fn getType(self: *const T, type_: ?*NET_FW_SERVICE_TYPE) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).get_Type(@as(*const INetFwService, @ptrCast(self)), type_);
            }
            pub inline fn getCustomized(self: *const T, customized_: ?*i16) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).get_Customized(@as(*const INetFwService, @ptrCast(self)), customized_);
            }
            pub inline fn getIpVersion(self: *const T, ip_version_: ?*NET_FW_IP_VERSION) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).get_IpVersion(@as(*const INetFwService, @ptrCast(self)), ip_version_);
            }
            pub inline fn putIpVersion(self: *const T, ip_version_: NET_FW_IP_VERSION) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).put_IpVersion(@as(*const INetFwService, @ptrCast(self)), ip_version_);
            }
            pub inline fn getScope(self: *const T, scope_: ?*NET_FW_SCOPE) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).get_Scope(@as(*const INetFwService, @ptrCast(self)), scope_);
            }
            pub inline fn putScope(self: *const T, scope_: NET_FW_SCOPE) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).put_Scope(@as(*const INetFwService, @ptrCast(self)), scope_);
            }
            pub inline fn getRemoteAddresses(self: *const T, remote_addrs_: ?*?BSTR) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).get_RemoteAddresses(@as(*const INetFwService, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn putRemoteAddresses(self: *const T, remote_addrs_: ?BSTR) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).put_RemoteAddresses(@as(*const INetFwService, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const INetFwService, @ptrCast(self)), enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const INetFwService, @ptrCast(self)), enabled_);
            }
            pub inline fn getGloballyOpenPorts(self: *const T, open_ports_: ?*?*INetFwOpenPorts) HRESULT {
                return @as(*const INetFwService.VTable, @ptrCast(self.vtable)).get_GloballyOpenPorts(@as(*const INetFwService, @ptrCast(self)), open_ports_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwServices_Value = Guid.initString("79649bb4-903e-421b-94c9-79848e79f6ee");
pub const IID_INetFwServices = &IID_INetFwServices_Value;
pub const INetFwServices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwServices,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const INetFwServices,
            svc_type: NET_FW_SERVICE_TYPE,
            service: ?*?*INetFwService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwServices,
            new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const INetFwServices.VTable, @ptrCast(self.vtable)).get_Count(@as(*const INetFwServices, @ptrCast(self)), count_);
            }
            pub inline fn item(self: *const T, svc_type_: NET_FW_SERVICE_TYPE, service_: ?*?*INetFwService) HRESULT {
                return @as(*const INetFwServices.VTable, @ptrCast(self.vtable)).Item(@as(*const INetFwServices, @ptrCast(self)), svc_type_, service_);
            }
            pub inline fn getNewEnum(self: *const T, new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const INetFwServices.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const INetFwServices, @ptrCast(self)), new_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwAuthorizedApplication_Value = Guid.initString("b5e64ffa-c2c5-444e-a301-fb5e00018050");
pub const IID_INetFwAuthorizedApplication = &IID_INetFwAuthorizedApplication_Value;
pub const INetFwAuthorizedApplication = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessImageFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            image_file_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProcessImageFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            image_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            ip_version: ?*NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            ip_version: NET_FW_IP_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            scope: ?*NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            scope: NET_FW_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            remote_addrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            remote_addrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplication,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).get_Name(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).put_Name(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), name_);
            }
            pub inline fn getProcessImageFileName(self: *const T, image_file_name_: ?*?BSTR) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).get_ProcessImageFileName(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), image_file_name_);
            }
            pub inline fn putProcessImageFileName(self: *const T, image_file_name_: ?BSTR) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).put_ProcessImageFileName(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), image_file_name_);
            }
            pub inline fn getIpVersion(self: *const T, ip_version_: ?*NET_FW_IP_VERSION) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).get_IpVersion(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), ip_version_);
            }
            pub inline fn putIpVersion(self: *const T, ip_version_: NET_FW_IP_VERSION) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).put_IpVersion(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), ip_version_);
            }
            pub inline fn getScope(self: *const T, scope_: ?*NET_FW_SCOPE) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).get_Scope(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), scope_);
            }
            pub inline fn putScope(self: *const T, scope_: NET_FW_SCOPE) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).put_Scope(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), scope_);
            }
            pub inline fn getRemoteAddresses(self: *const T, remote_addrs_: ?*?BSTR) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).get_RemoteAddresses(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn putRemoteAddresses(self: *const T, remote_addrs_: ?BSTR) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).put_RemoteAddresses(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const INetFwAuthorizedApplication.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const INetFwAuthorizedApplication, @ptrCast(self)), enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwAuthorizedApplications_Value = Guid.initString("644efd52-ccf9-486c-97a2-39f352570b30");
pub const IID_INetFwAuthorizedApplications = &IID_INetFwAuthorizedApplications_Value;
pub const INetFwAuthorizedApplications = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplications,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const INetFwAuthorizedApplications,
            app: ?*INetFwAuthorizedApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const INetFwAuthorizedApplications,
            image_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const INetFwAuthorizedApplications,
            image_file_name: ?BSTR,
            app: ?*?*INetFwAuthorizedApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwAuthorizedApplications,
            new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const INetFwAuthorizedApplications.VTable, @ptrCast(self.vtable)).get_Count(@as(*const INetFwAuthorizedApplications, @ptrCast(self)), count_);
            }
            pub inline fn add(self: *const T, app_: ?*INetFwAuthorizedApplication) HRESULT {
                return @as(*const INetFwAuthorizedApplications.VTable, @ptrCast(self.vtable)).Add(@as(*const INetFwAuthorizedApplications, @ptrCast(self)), app_);
            }
            pub inline fn remove(self: *const T, image_file_name_: ?BSTR) HRESULT {
                return @as(*const INetFwAuthorizedApplications.VTable, @ptrCast(self.vtable)).Remove(@as(*const INetFwAuthorizedApplications, @ptrCast(self)), image_file_name_);
            }
            pub inline fn item(self: *const T, image_file_name_: ?BSTR, app_: ?*?*INetFwAuthorizedApplication) HRESULT {
                return @as(*const INetFwAuthorizedApplications.VTable, @ptrCast(self.vtable)).Item(@as(*const INetFwAuthorizedApplications, @ptrCast(self)), image_file_name_, app_);
            }
            pub inline fn getNewEnum(self: *const T, new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const INetFwAuthorizedApplications.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const INetFwAuthorizedApplications, @ptrCast(self)), new_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwRule_Value = Guid.initString("af230d27-baba-4e42-aced-f524f22cfce2");
pub const IID_INetFwRule = &IID_INetFwRule_Value;
pub const INetFwRule = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            desc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            desc: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            image_file_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplicationName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            image_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            service_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServiceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            service_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Protocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            protocol: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Protocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            protocol: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalPorts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            port_numbers: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalPorts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            port_numbers: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemotePorts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            port_numbers: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemotePorts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            port_numbers: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            local_addrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            local_addrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            remote_addrs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            remote_addrs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IcmpTypesAndCodes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            icmp_types_and_codes: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IcmpTypesAndCodes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            icmp_types_and_codes: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Direction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            dir: ?*NET_FW_RULE_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Direction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            dir: NET_FW_RULE_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Interfaces: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            interfaces: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Interfaces: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            interfaces: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InterfaceTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            interface_types: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InterfaceTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            interface_types: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Grouping: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            context: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Grouping: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            context: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profiles: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            profile_types_bitmask: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Profiles: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            profile_types_bitmask: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EdgeTraversal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EdgeTraversal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Action: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            action: ?*NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Action: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule,
            action: NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_Name(@as(*const INetFwRule, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_Name(@as(*const INetFwRule, @ptrCast(self)), name_);
            }
            pub inline fn getDescription(self: *const T, desc_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_Description(@as(*const INetFwRule, @ptrCast(self)), desc_);
            }
            pub inline fn putDescription(self: *const T, desc_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_Description(@as(*const INetFwRule, @ptrCast(self)), desc_);
            }
            pub inline fn getApplicationName(self: *const T, image_file_name_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_ApplicationName(@as(*const INetFwRule, @ptrCast(self)), image_file_name_);
            }
            pub inline fn putApplicationName(self: *const T, image_file_name_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_ApplicationName(@as(*const INetFwRule, @ptrCast(self)), image_file_name_);
            }
            pub inline fn getServiceName(self: *const T, service_name_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_ServiceName(@as(*const INetFwRule, @ptrCast(self)), service_name_);
            }
            pub inline fn putServiceName(self: *const T, service_name_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_ServiceName(@as(*const INetFwRule, @ptrCast(self)), service_name_);
            }
            pub inline fn getProtocol(self: *const T, protocol_: ?*i32) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_Protocol(@as(*const INetFwRule, @ptrCast(self)), protocol_);
            }
            pub inline fn putProtocol(self: *const T, protocol_: i32) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_Protocol(@as(*const INetFwRule, @ptrCast(self)), protocol_);
            }
            pub inline fn getLocalPorts(self: *const T, port_numbers_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_LocalPorts(@as(*const INetFwRule, @ptrCast(self)), port_numbers_);
            }
            pub inline fn putLocalPorts(self: *const T, port_numbers_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_LocalPorts(@as(*const INetFwRule, @ptrCast(self)), port_numbers_);
            }
            pub inline fn getRemotePorts(self: *const T, port_numbers_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_RemotePorts(@as(*const INetFwRule, @ptrCast(self)), port_numbers_);
            }
            pub inline fn putRemotePorts(self: *const T, port_numbers_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_RemotePorts(@as(*const INetFwRule, @ptrCast(self)), port_numbers_);
            }
            pub inline fn getLocalAddresses(self: *const T, local_addrs_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_LocalAddresses(@as(*const INetFwRule, @ptrCast(self)), local_addrs_);
            }
            pub inline fn putLocalAddresses(self: *const T, local_addrs_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_LocalAddresses(@as(*const INetFwRule, @ptrCast(self)), local_addrs_);
            }
            pub inline fn getRemoteAddresses(self: *const T, remote_addrs_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_RemoteAddresses(@as(*const INetFwRule, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn putRemoteAddresses(self: *const T, remote_addrs_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_RemoteAddresses(@as(*const INetFwRule, @ptrCast(self)), remote_addrs_);
            }
            pub inline fn getIcmpTypesAndCodes(self: *const T, icmp_types_and_codes_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_IcmpTypesAndCodes(@as(*const INetFwRule, @ptrCast(self)), icmp_types_and_codes_);
            }
            pub inline fn putIcmpTypesAndCodes(self: *const T, icmp_types_and_codes_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_IcmpTypesAndCodes(@as(*const INetFwRule, @ptrCast(self)), icmp_types_and_codes_);
            }
            pub inline fn getDirection(self: *const T, dir_: ?*NET_FW_RULE_DIRECTION) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_Direction(@as(*const INetFwRule, @ptrCast(self)), dir_);
            }
            pub inline fn putDirection(self: *const T, dir_: NET_FW_RULE_DIRECTION) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_Direction(@as(*const INetFwRule, @ptrCast(self)), dir_);
            }
            pub inline fn getInterfaces(self: *const T, interfaces_: ?*VARIANT) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_Interfaces(@as(*const INetFwRule, @ptrCast(self)), interfaces_);
            }
            pub inline fn putInterfaces(self: *const T, interfaces_: VARIANT) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_Interfaces(@as(*const INetFwRule, @ptrCast(self)), interfaces_);
            }
            pub inline fn getInterfaceTypes(self: *const T, interface_types_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_InterfaceTypes(@as(*const INetFwRule, @ptrCast(self)), interface_types_);
            }
            pub inline fn putInterfaceTypes(self: *const T, interface_types_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_InterfaceTypes(@as(*const INetFwRule, @ptrCast(self)), interface_types_);
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const INetFwRule, @ptrCast(self)), enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const INetFwRule, @ptrCast(self)), enabled_);
            }
            pub inline fn getGrouping(self: *const T, context_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_Grouping(@as(*const INetFwRule, @ptrCast(self)), context_);
            }
            pub inline fn putGrouping(self: *const T, context_: ?BSTR) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_Grouping(@as(*const INetFwRule, @ptrCast(self)), context_);
            }
            pub inline fn getProfiles(self: *const T, profile_types_bitmask_: ?*i32) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_Profiles(@as(*const INetFwRule, @ptrCast(self)), profile_types_bitmask_);
            }
            pub inline fn putProfiles(self: *const T, profile_types_bitmask_: i32) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_Profiles(@as(*const INetFwRule, @ptrCast(self)), profile_types_bitmask_);
            }
            pub inline fn getEdgeTraversal(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_EdgeTraversal(@as(*const INetFwRule, @ptrCast(self)), enabled_);
            }
            pub inline fn putEdgeTraversal(self: *const T, enabled_: i16) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_EdgeTraversal(@as(*const INetFwRule, @ptrCast(self)), enabled_);
            }
            pub inline fn getAction(self: *const T, action_: ?*NET_FW_ACTION) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).get_Action(@as(*const INetFwRule, @ptrCast(self)), action_);
            }
            pub inline fn putAction(self: *const T, action_: NET_FW_ACTION) HRESULT {
                return @as(*const INetFwRule.VTable, @ptrCast(self.vtable)).put_Action(@as(*const INetFwRule, @ptrCast(self)), action_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_INetFwRule2_Value = Guid.initString("9c27c8da-189b-4dde-89f7-8b39a316782c");
pub const IID_INetFwRule2 = &IID_INetFwRule2_Value;
pub const INetFwRule2 = extern struct {
    pub const VTable = extern struct {
        base: INetFwRule.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EdgeTraversalOptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule2,
            l_options: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EdgeTraversalOptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule2,
            l_options: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace INetFwRule.MethodMixin(T);
            pub inline fn getEdgeTraversalOptions(self: *const T, l_options_: ?*i32) HRESULT {
                return @as(*const INetFwRule2.VTable, @ptrCast(self.vtable)).get_EdgeTraversalOptions(@as(*const INetFwRule2, @ptrCast(self)), l_options_);
            }
            pub inline fn putEdgeTraversalOptions(self: *const T, l_options_: i32) HRESULT {
                return @as(*const INetFwRule2.VTable, @ptrCast(self.vtable)).put_EdgeTraversalOptions(@as(*const INetFwRule2, @ptrCast(self)), l_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_INetFwRule3_Value = Guid.initString("b21563ff-d696-4222-ab46-4e89b73ab34a");
pub const IID_INetFwRule3 = &IID_INetFwRule3_Value;
pub const INetFwRule3 = extern struct {
    pub const VTable = extern struct {
        base: INetFwRule2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalAppPackageId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_package_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalAppPackageId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_package_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalUserOwner: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_user_owner: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalUserOwner: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_user_owner: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalUserAuthorizedList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_user_auth_list: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalUserAuthorizedList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_user_auth_list: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteUserAuthorizedList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_user_auth_list: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteUserAuthorizedList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_user_auth_list: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteMachineAuthorizedList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_user_auth_list: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteMachineAuthorizedList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            wsz_user_auth_list: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecureFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            l_options: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecureFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRule3,
            l_options: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace INetFwRule2.MethodMixin(T);
            pub inline fn getLocalAppPackageId(self: *const T, wsz_package_id_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).get_LocalAppPackageId(@as(*const INetFwRule3, @ptrCast(self)), wsz_package_id_);
            }
            pub inline fn putLocalAppPackageId(self: *const T, wsz_package_id_: ?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).put_LocalAppPackageId(@as(*const INetFwRule3, @ptrCast(self)), wsz_package_id_);
            }
            pub inline fn getLocalUserOwner(self: *const T, wsz_user_owner_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).get_LocalUserOwner(@as(*const INetFwRule3, @ptrCast(self)), wsz_user_owner_);
            }
            pub inline fn putLocalUserOwner(self: *const T, wsz_user_owner_: ?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).put_LocalUserOwner(@as(*const INetFwRule3, @ptrCast(self)), wsz_user_owner_);
            }
            pub inline fn getLocalUserAuthorizedList(self: *const T, wsz_user_auth_list_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).get_LocalUserAuthorizedList(@as(*const INetFwRule3, @ptrCast(self)), wsz_user_auth_list_);
            }
            pub inline fn putLocalUserAuthorizedList(self: *const T, wsz_user_auth_list_: ?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).put_LocalUserAuthorizedList(@as(*const INetFwRule3, @ptrCast(self)), wsz_user_auth_list_);
            }
            pub inline fn getRemoteUserAuthorizedList(self: *const T, wsz_user_auth_list_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).get_RemoteUserAuthorizedList(@as(*const INetFwRule3, @ptrCast(self)), wsz_user_auth_list_);
            }
            pub inline fn putRemoteUserAuthorizedList(self: *const T, wsz_user_auth_list_: ?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).put_RemoteUserAuthorizedList(@as(*const INetFwRule3, @ptrCast(self)), wsz_user_auth_list_);
            }
            pub inline fn getRemoteMachineAuthorizedList(self: *const T, wsz_user_auth_list_: ?*?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).get_RemoteMachineAuthorizedList(@as(*const INetFwRule3, @ptrCast(self)), wsz_user_auth_list_);
            }
            pub inline fn putRemoteMachineAuthorizedList(self: *const T, wsz_user_auth_list_: ?BSTR) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).put_RemoteMachineAuthorizedList(@as(*const INetFwRule3, @ptrCast(self)), wsz_user_auth_list_);
            }
            pub inline fn getSecureFlags(self: *const T, l_options_: ?*i32) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).get_SecureFlags(@as(*const INetFwRule3, @ptrCast(self)), l_options_);
            }
            pub inline fn putSecureFlags(self: *const T, l_options_: i32) HRESULT {
                return @as(*const INetFwRule3.VTable, @ptrCast(self.vtable)).put_SecureFlags(@as(*const INetFwRule3, @ptrCast(self)), l_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwRules_Value = Guid.initString("9c4c6277-5027-441e-afae-ca1f542da009");
pub const IID_INetFwRules = &IID_INetFwRules_Value;
pub const INetFwRules = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRules,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const INetFwRules,
            rule: ?*INetFwRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const INetFwRules,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const INetFwRules,
            name: ?BSTR,
            rule: ?*?*INetFwRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwRules,
            new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const INetFwRules.VTable, @ptrCast(self.vtable)).get_Count(@as(*const INetFwRules, @ptrCast(self)), count_);
            }
            pub inline fn add(self: *const T, rule_: ?*INetFwRule) HRESULT {
                return @as(*const INetFwRules.VTable, @ptrCast(self.vtable)).Add(@as(*const INetFwRules, @ptrCast(self)), rule_);
            }
            pub inline fn remove(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const INetFwRules.VTable, @ptrCast(self.vtable)).Remove(@as(*const INetFwRules, @ptrCast(self)), name_);
            }
            pub inline fn item(self: *const T, name_: ?BSTR, rule_: ?*?*INetFwRule) HRESULT {
                return @as(*const INetFwRules.VTable, @ptrCast(self.vtable)).Item(@as(*const INetFwRules, @ptrCast(self)), name_, rule_);
            }
            pub inline fn getNewEnum(self: *const T, new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const INetFwRules.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const INetFwRules, @ptrCast(self)), new_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwServiceRestriction_Value = Guid.initString("8267bbe3-f890-491c-b7b6-2db1ef0e5d2b");
pub const IID_INetFwServiceRestriction = &IID_INetFwServiceRestriction_Value;
pub const INetFwServiceRestriction = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        RestrictService: *const fn (
            self: *const INetFwServiceRestriction,
            service_name: ?BSTR,
            app_name: ?BSTR,
            restrict_service: i16,
            service_sid_restricted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceRestricted: *const fn (
            self: *const INetFwServiceRestriction,
            service_name: ?BSTR,
            app_name: ?BSTR,
            service_restricted: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Rules: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwServiceRestriction,
            rules: ?*?*INetFwRules,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn restrictService(self: *const T, service_name_: ?BSTR, app_name_: ?BSTR, restrict_service_: i16, service_sid_restricted_: i16) HRESULT {
                return @as(*const INetFwServiceRestriction.VTable, @ptrCast(self.vtable)).RestrictService(@as(*const INetFwServiceRestriction, @ptrCast(self)), service_name_, app_name_, restrict_service_, service_sid_restricted_);
            }
            pub inline fn serviceRestricted(self: *const T, service_name_: ?BSTR, app_name_: ?BSTR, service_restricted_: ?*i16) HRESULT {
                return @as(*const INetFwServiceRestriction.VTable, @ptrCast(self.vtable)).ServiceRestricted(@as(*const INetFwServiceRestriction, @ptrCast(self)), service_name_, app_name_, service_restricted_);
            }
            pub inline fn getRules(self: *const T, rules_: ?*?*INetFwRules) HRESULT {
                return @as(*const INetFwServiceRestriction.VTable, @ptrCast(self.vtable)).get_Rules(@as(*const INetFwServiceRestriction, @ptrCast(self)), rules_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwProfile_Value = Guid.initString("174a0dda-e9f9-449d-993b-21ab667ca456");
pub const IID_INetFwProfile = &IID_INetFwProfile_Value;
pub const INetFwProfile = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            type: ?*NET_FW_PROFILE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FirewallEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FirewallEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExceptionsNotAllowed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            not_allowed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExceptionsNotAllowed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            not_allowed: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NotificationsDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            disabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NotificationsDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            disabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UnicastResponsesToMulticastBroadcastDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            disabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UnicastResponsesToMulticastBroadcastDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            disabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteAdminSettings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            remote_admin_settings: ?*?*INetFwRemoteAdminSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IcmpSettings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            icmp_settings: ?*?*INetFwIcmpSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GloballyOpenPorts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            open_ports: ?*?*INetFwOpenPorts,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Services: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            services: ?*?*INetFwServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthorizedApplications: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProfile,
            apps: ?*?*INetFwAuthorizedApplications,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getType(self: *const T, type_: ?*NET_FW_PROFILE_TYPE) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_Type(@as(*const INetFwProfile, @ptrCast(self)), type_);
            }
            pub inline fn getFirewallEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_FirewallEnabled(@as(*const INetFwProfile, @ptrCast(self)), enabled_);
            }
            pub inline fn putFirewallEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).put_FirewallEnabled(@as(*const INetFwProfile, @ptrCast(self)), enabled_);
            }
            pub inline fn getExceptionsNotAllowed(self: *const T, not_allowed_: ?*i16) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_ExceptionsNotAllowed(@as(*const INetFwProfile, @ptrCast(self)), not_allowed_);
            }
            pub inline fn putExceptionsNotAllowed(self: *const T, not_allowed_: i16) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).put_ExceptionsNotAllowed(@as(*const INetFwProfile, @ptrCast(self)), not_allowed_);
            }
            pub inline fn getNotificationsDisabled(self: *const T, disabled_: ?*i16) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_NotificationsDisabled(@as(*const INetFwProfile, @ptrCast(self)), disabled_);
            }
            pub inline fn putNotificationsDisabled(self: *const T, disabled_: i16) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).put_NotificationsDisabled(@as(*const INetFwProfile, @ptrCast(self)), disabled_);
            }
            pub inline fn getUnicastResponsesToMulticastBroadcastDisabled(self: *const T, disabled_: ?*i16) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_UnicastResponsesToMulticastBroadcastDisabled(@as(*const INetFwProfile, @ptrCast(self)), disabled_);
            }
            pub inline fn putUnicastResponsesToMulticastBroadcastDisabled(self: *const T, disabled_: i16) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).put_UnicastResponsesToMulticastBroadcastDisabled(@as(*const INetFwProfile, @ptrCast(self)), disabled_);
            }
            pub inline fn getRemoteAdminSettings(self: *const T, remote_admin_settings_: ?*?*INetFwRemoteAdminSettings) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_RemoteAdminSettings(@as(*const INetFwProfile, @ptrCast(self)), remote_admin_settings_);
            }
            pub inline fn getIcmpSettings(self: *const T, icmp_settings_: ?*?*INetFwIcmpSettings) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_IcmpSettings(@as(*const INetFwProfile, @ptrCast(self)), icmp_settings_);
            }
            pub inline fn getGloballyOpenPorts(self: *const T, open_ports_: ?*?*INetFwOpenPorts) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_GloballyOpenPorts(@as(*const INetFwProfile, @ptrCast(self)), open_ports_);
            }
            pub inline fn getServices(self: *const T, services_: ?*?*INetFwServices) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_Services(@as(*const INetFwProfile, @ptrCast(self)), services_);
            }
            pub inline fn getAuthorizedApplications(self: *const T, apps_: ?*?*INetFwAuthorizedApplications) HRESULT {
                return @as(*const INetFwProfile.VTable, @ptrCast(self.vtable)).get_AuthorizedApplications(@as(*const INetFwProfile, @ptrCast(self)), apps_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwPolicy_Value = Guid.initString("d46d2478-9ac9-4008-9dc7-5563ce5536cc");
pub const IID_INetFwPolicy = &IID_INetFwPolicy_Value;
pub const INetFwPolicy = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentProfile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy,
            profile: ?*?*INetFwProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProfileByType: *const fn (
            self: *const INetFwPolicy,
            profile_type: NET_FW_PROFILE_TYPE,
            profile: ?*?*INetFwProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCurrentProfile(self: *const T, profile_: ?*?*INetFwProfile) HRESULT {
                return @as(*const INetFwPolicy.VTable, @ptrCast(self.vtable)).get_CurrentProfile(@as(*const INetFwPolicy, @ptrCast(self)), profile_);
            }
            pub inline fn getProfileByType(self: *const T, profile_type_: NET_FW_PROFILE_TYPE, profile_: ?*?*INetFwProfile) HRESULT {
                return @as(*const INetFwPolicy.VTable, @ptrCast(self.vtable)).GetProfileByType(@as(*const INetFwPolicy, @ptrCast(self)), profile_type_, profile_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwPolicy2_Value = Guid.initString("98325047-c671-4174-8d81-defcd3f03186");
pub const IID_INetFwPolicy2 = &IID_INetFwPolicy2_Value;
pub const INetFwPolicy2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentProfileTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_types_bitmask: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FirewallEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FirewallEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExcludedInterfaces: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            interfaces: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExcludedInterfaces: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            interfaces: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BlockAllInboundTraffic: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            block: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BlockAllInboundTraffic: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            block: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NotificationsDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            disabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NotificationsDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            disabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UnicastResponsesToMulticastBroadcastDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            disabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UnicastResponsesToMulticastBroadcastDisabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            disabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Rules: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            rules: ?*?*INetFwRules,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServiceRestriction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            service_restriction: ?*?*INetFwServiceRestriction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableRuleGroup: *const fn (
            self: *const INetFwPolicy2,
            profile_types_bitmask: i32,
            group: ?BSTR,
            enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRuleGroupEnabled: *const fn (
            self: *const INetFwPolicy2,
            profile_types_bitmask: i32,
            group: ?BSTR,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreLocalFirewallDefaults: *const fn (
            self: *const INetFwPolicy2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultInboundAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            action: ?*NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultInboundAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            action: NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultOutboundAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            action: ?*NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultOutboundAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            profile_type: NET_FW_PROFILE_TYPE2,
            action: NET_FW_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsRuleGroupCurrentlyEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            group: ?BSTR,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalPolicyModifyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwPolicy2,
            modify_state: ?*NET_FW_MODIFY_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCurrentProfileTypes(self: *const T, profile_types_bitmask_: ?*i32) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_CurrentProfileTypes(@as(*const INetFwPolicy2, @ptrCast(self)), profile_types_bitmask_);
            }
            pub inline fn getFirewallEnabled(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_FirewallEnabled(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, enabled_);
            }
            pub inline fn putFirewallEnabled(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, enabled_: i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).put_FirewallEnabled(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, enabled_);
            }
            pub inline fn getExcludedInterfaces(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, interfaces_: ?*VARIANT) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_ExcludedInterfaces(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, interfaces_);
            }
            pub inline fn putExcludedInterfaces(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, interfaces_: VARIANT) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).put_ExcludedInterfaces(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, interfaces_);
            }
            pub inline fn getBlockAllInboundTraffic(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, block_: ?*i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_BlockAllInboundTraffic(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, block_);
            }
            pub inline fn putBlockAllInboundTraffic(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, block_: i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).put_BlockAllInboundTraffic(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, block_);
            }
            pub inline fn getNotificationsDisabled(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, disabled_: ?*i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_NotificationsDisabled(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, disabled_);
            }
            pub inline fn putNotificationsDisabled(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, disabled_: i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).put_NotificationsDisabled(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, disabled_);
            }
            pub inline fn getUnicastResponsesToMulticastBroadcastDisabled(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, disabled_: ?*i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_UnicastResponsesToMulticastBroadcastDisabled(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, disabled_);
            }
            pub inline fn putUnicastResponsesToMulticastBroadcastDisabled(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, disabled_: i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).put_UnicastResponsesToMulticastBroadcastDisabled(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, disabled_);
            }
            pub inline fn getRules(self: *const T, rules_: ?*?*INetFwRules) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_Rules(@as(*const INetFwPolicy2, @ptrCast(self)), rules_);
            }
            pub inline fn getServiceRestriction(self: *const T, service_restriction_: ?*?*INetFwServiceRestriction) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_ServiceRestriction(@as(*const INetFwPolicy2, @ptrCast(self)), service_restriction_);
            }
            pub inline fn enableRuleGroup(self: *const T, profile_types_bitmask_: i32, group_: ?BSTR, enable_: i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).EnableRuleGroup(@as(*const INetFwPolicy2, @ptrCast(self)), profile_types_bitmask_, group_, enable_);
            }
            pub inline fn isRuleGroupEnabled(self: *const T, profile_types_bitmask_: i32, group_: ?BSTR, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).IsRuleGroupEnabled(@as(*const INetFwPolicy2, @ptrCast(self)), profile_types_bitmask_, group_, enabled_);
            }
            pub inline fn restoreLocalFirewallDefaults(self: *const T) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).RestoreLocalFirewallDefaults(@as(*const INetFwPolicy2, @ptrCast(self)));
            }
            pub inline fn getDefaultInboundAction(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, action_: ?*NET_FW_ACTION) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_DefaultInboundAction(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, action_);
            }
            pub inline fn putDefaultInboundAction(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, action_: NET_FW_ACTION) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).put_DefaultInboundAction(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, action_);
            }
            pub inline fn getDefaultOutboundAction(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, action_: ?*NET_FW_ACTION) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_DefaultOutboundAction(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, action_);
            }
            pub inline fn putDefaultOutboundAction(self: *const T, profile_type_: NET_FW_PROFILE_TYPE2, action_: NET_FW_ACTION) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).put_DefaultOutboundAction(@as(*const INetFwPolicy2, @ptrCast(self)), profile_type_, action_);
            }
            pub inline fn getIsRuleGroupCurrentlyEnabled(self: *const T, group_: ?BSTR, enabled_: ?*i16) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_IsRuleGroupCurrentlyEnabled(@as(*const INetFwPolicy2, @ptrCast(self)), group_, enabled_);
            }
            pub inline fn getLocalPolicyModifyState(self: *const T, modify_state_: ?*NET_FW_MODIFY_STATE) HRESULT {
                return @as(*const INetFwPolicy2.VTable, @ptrCast(self.vtable)).get_LocalPolicyModifyState(@as(*const INetFwPolicy2, @ptrCast(self)), modify_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetFwMgr_Value = Guid.initString("f7898af5-cac4-4632-a2ec-da06e5111af2");
pub const IID_INetFwMgr = &IID_INetFwMgr_Value;
pub const INetFwMgr = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalPolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwMgr,
            local_policy: ?*?*INetFwPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentProfileType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwMgr,
            profile_type: ?*NET_FW_PROFILE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreDefaults: *const fn (
            self: *const INetFwMgr,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPortAllowed: *const fn (
            self: *const INetFwMgr,
            image_file_name: ?BSTR,
            ip_version: NET_FW_IP_VERSION,
            port_number: i32,
            local_address: ?BSTR,
            ip_protocol: NET_FW_IP_PROTOCOL,
            allowed: ?*VARIANT,
            restricted: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsIcmpTypeAllowed: *const fn (
            self: *const INetFwMgr,
            ip_version: NET_FW_IP_VERSION,
            local_address: ?BSTR,
            type: u8,
            allowed: ?*VARIANT,
            restricted: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getLocalPolicy(self: *const T, local_policy_: ?*?*INetFwPolicy) HRESULT {
                return @as(*const INetFwMgr.VTable, @ptrCast(self.vtable)).get_LocalPolicy(@as(*const INetFwMgr, @ptrCast(self)), local_policy_);
            }
            pub inline fn getCurrentProfileType(self: *const T, profile_type_: ?*NET_FW_PROFILE_TYPE) HRESULT {
                return @as(*const INetFwMgr.VTable, @ptrCast(self.vtable)).get_CurrentProfileType(@as(*const INetFwMgr, @ptrCast(self)), profile_type_);
            }
            pub inline fn restoreDefaults(self: *const T) HRESULT {
                return @as(*const INetFwMgr.VTable, @ptrCast(self.vtable)).RestoreDefaults(@as(*const INetFwMgr, @ptrCast(self)));
            }
            pub inline fn isPortAllowed(self: *const T, image_file_name_: ?BSTR, ip_version_: NET_FW_IP_VERSION, port_number_: i32, local_address_: ?BSTR, ip_protocol_: NET_FW_IP_PROTOCOL, allowed_: ?*VARIANT, restricted_: ?*VARIANT) HRESULT {
                return @as(*const INetFwMgr.VTable, @ptrCast(self.vtable)).IsPortAllowed(@as(*const INetFwMgr, @ptrCast(self)), image_file_name_, ip_version_, port_number_, local_address_, ip_protocol_, allowed_, restricted_);
            }
            pub inline fn isIcmpTypeAllowed(self: *const T, ip_version_: NET_FW_IP_VERSION, local_address_: ?BSTR, type_: u8, allowed_: ?*VARIANT, restricted_: ?*VARIANT) HRESULT {
                return @as(*const INetFwMgr.VTable, @ptrCast(self.vtable)).IsIcmpTypeAllowed(@as(*const INetFwMgr, @ptrCast(self)), ip_version_, local_address_, type_, allowed_, restricted_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_INetFwProduct_Value = Guid.initString("71881699-18f4-458b-b892-3ffce5e07f75");
pub const IID_INetFwProduct = &IID_INetFwProduct_Value;
pub const INetFwProduct = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RuleCategories: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProduct,
            rule_categories: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RuleCategories: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProduct,
            rule_categories: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProduct,
            display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProduct,
            display_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathToSignedProductExe: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProduct,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getRuleCategories(self: *const T, rule_categories_: ?*VARIANT) HRESULT {
                return @as(*const INetFwProduct.VTable, @ptrCast(self.vtable)).get_RuleCategories(@as(*const INetFwProduct, @ptrCast(self)), rule_categories_);
            }
            pub inline fn putRuleCategories(self: *const T, rule_categories_: VARIANT) HRESULT {
                return @as(*const INetFwProduct.VTable, @ptrCast(self.vtable)).put_RuleCategories(@as(*const INetFwProduct, @ptrCast(self)), rule_categories_);
            }
            pub inline fn getDisplayName(self: *const T, display_name_: ?*?BSTR) HRESULT {
                return @as(*const INetFwProduct.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const INetFwProduct, @ptrCast(self)), display_name_);
            }
            pub inline fn putDisplayName(self: *const T, display_name_: ?BSTR) HRESULT {
                return @as(*const INetFwProduct.VTable, @ptrCast(self.vtable)).put_DisplayName(@as(*const INetFwProduct, @ptrCast(self)), display_name_);
            }
            pub inline fn getPathToSignedProductExe(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const INetFwProduct.VTable, @ptrCast(self.vtable)).get_PathToSignedProductExe(@as(*const INetFwProduct, @ptrCast(self)), path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_INetFwProducts_Value = Guid.initString("39eb36e0-2097-40bd-8af2-63a13b525362");
pub const IID_INetFwProducts = &IID_INetFwProducts_Value;
pub const INetFwProducts = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProducts,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Register: *const fn (
            self: *const INetFwProducts,
            product: ?*INetFwProduct,
            registration: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const INetFwProducts,
            index: i32,
            product: ?*?*INetFwProduct,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetFwProducts,
            new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const INetFwProducts.VTable, @ptrCast(self.vtable)).get_Count(@as(*const INetFwProducts, @ptrCast(self)), count_);
            }
            pub inline fn register(self: *const T, product_: ?*INetFwProduct, registration_: ?*?*IUnknown) HRESULT {
                return @as(*const INetFwProducts.VTable, @ptrCast(self.vtable)).Register(@as(*const INetFwProducts, @ptrCast(self)), product_, registration_);
            }
            pub inline fn item(self: *const T, index_: i32, product_: ?*?*INetFwProduct) HRESULT {
                return @as(*const INetFwProducts.VTable, @ptrCast(self.vtable)).Item(@as(*const INetFwProducts, @ptrCast(self)), index_, product_);
            }
            pub inline fn getNewEnum(self: *const T, new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const INetFwProducts.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const INetFwProducts, @ptrCast(self)), new_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (8)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationSetupAppContainerBinaries(
    application_container_sid: ?PSID,
    package_full_name: ?[*:0]const u16,
    package_folder: ?[*:0]const u16,
    display_name: ?[*:0]const u16,
    b_binaries_fully_computed: BOOL,
    binaries: [*]?PWSTR,
    binaries_count: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationRegisterForAppContainerChanges(
    flags: u32,
    callback: ?PAC_CHANGES_CALLBACK_FN,
    context: ?*anyopaque,
    registration_object: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationUnregisterForAppContainerChanges(
    registration_object: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationFreeAppContainers(
    p_public_app_cs: ?*INET_FIREWALL_APP_CONTAINER,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationEnumAppContainers(
    flags: u32,
    pdw_num_public_app_cs: ?*u32,
    pp_public_app_cs: ?*?*INET_FIREWALL_APP_CONTAINER,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationGetAppContainerConfig(
    pdw_num_public_app_cs: ?*u32,
    app_container_sids: ?*?*SID_AND_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationSetAppContainerConfig(
    dw_num_public_app_cs: u32,
    app_container_sids: [*]SID_AND_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-net-isolation-l1-1-0" fn NetworkIsolationDiagnoseConnectFailureAndGetInfo(
    wsz_server_name: ?[*:0]const u16,
    net_iso_error: ?*NETISO_ERROR_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (13)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const PSID = @import("../foundation.zig").PSID;
const PWSTR = @import("../foundation.zig").PWSTR;
const SID = @import("../security.zig").SID;
const SID_AND_ATTRIBUTES = @import("../security.zig").SID_AND_ATTRIBUTES;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PAC_CHANGES_CALLBACK_FN")) {
        _ = PAC_CHANGES_CALLBACK_FN;
    }
    if (@hasDecl(@This(), "PNETISO_EDP_ID_CALLBACK_FN")) {
        _ = PNETISO_EDP_ID_CALLBACK_FN;
    }
    if (@hasDecl(@This(), "PFN_FWADDDYNAMICKEYWORDADDRESS0")) {
        _ = PFN_FWADDDYNAMICKEYWORDADDRESS0;
    }
    if (@hasDecl(@This(), "PFN_FWDELETEDYNAMICKEYWORDADDRESS0")) {
        _ = PFN_FWDELETEDYNAMICKEYWORDADDRESS0;
    }
    if (@hasDecl(@This(), "PFN_FWENUMDYNAMICKEYWORDADDRESSESBYTYPE0")) {
        _ = PFN_FWENUMDYNAMICKEYWORDADDRESSESBYTYPE0;
    }
    if (@hasDecl(@This(), "PFN_FWENUMDYNAMICKEYWORDADDRESSBYID0")) {
        _ = PFN_FWENUMDYNAMICKEYWORDADDRESSBYID0;
    }
    if (@hasDecl(@This(), "PFN_FWFREEDYNAMICKEYWORDADDRESSDATA0")) {
        _ = PFN_FWFREEDYNAMICKEYWORDADDRESSDATA0;
    }
    if (@hasDecl(@This(), "PFN_FWUPDATEDYNAMICKEYWORDADDRESS0")) {
        _ = PFN_FWUPDATEDYNAMICKEYWORDADDRESS0;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
