//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (2)
//--------------------------------------------------------------------------------
pub const ID_GDF_XML_STR = "__GDF_XML";
pub const ID_GDF_THUMBNAIL_STR = "__GDF_THUMBNAIL";

//--------------------------------------------------------------------------------
// Section: Types (21)
//--------------------------------------------------------------------------------
const CLSID_GameExplorer_Value = Guid.initString("9a5ea990-3034-4d6f-9128-01f3c61022bc");
pub const CLSID_GameExplorer = &CLSID_GameExplorer_Value;

const CLSID_GameStatistics_Value = Guid.initString("dbc85a2c-c0dc-4961-b6e2-d28b62c11ad4");
pub const CLSID_GameStatistics = &CLSID_GameStatistics_Value;

pub const GAME_INSTALL_SCOPE = enum(i32) {
    NOT_INSTALLED = 1,
    CURRENT_USER = 2,
    ALL_USERS = 3,
};
pub const GIS_NOT_INSTALLED = GAME_INSTALL_SCOPE.NOT_INSTALLED;
pub const GIS_CURRENT_USER = GAME_INSTALL_SCOPE.CURRENT_USER;
pub const GIS_ALL_USERS = GAME_INSTALL_SCOPE.ALL_USERS;

const IID_IGameExplorer_Value = Guid.initString("e7b2fb72-d728-49b3-a5f2-18ebf5f1349e");
pub const IID_IGameExplorer = &IID_IGameExplorer_Value;
pub const IGameExplorer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddGame: *const fn (
            self: *const IGameExplorer,
            bstr_g_d_f_binary_path: ?BSTR,
            bstr_game_install_directory: ?BSTR,
            install_scope: GAME_INSTALL_SCOPE,
            pguid_instance_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveGame: *const fn (
            self: *const IGameExplorer,
            guid_instance_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateGame: *const fn (
            self: *const IGameExplorer,
            guid_instance_i_d: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VerifyAccess: *const fn (
            self: *const IGameExplorer,
            bstr_g_d_f_binary_path: ?BSTR,
            pf_has_access: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addGame(self: *const T, bstr_g_d_f_binary_path_: ?BSTR, bstr_game_install_directory_: ?BSTR, install_scope_: GAME_INSTALL_SCOPE, pguid_instance_i_d_: ?*Guid) HRESULT {
                return @as(*const IGameExplorer.VTable, @ptrCast(self.vtable)).AddGame(@as(*const IGameExplorer, @ptrCast(self)), bstr_g_d_f_binary_path_, bstr_game_install_directory_, install_scope_, pguid_instance_i_d_);
            }
            pub inline fn removeGame(self: *const T, guid_instance_i_d_: Guid) HRESULT {
                return @as(*const IGameExplorer.VTable, @ptrCast(self.vtable)).RemoveGame(@as(*const IGameExplorer, @ptrCast(self)), guid_instance_i_d_);
            }
            pub inline fn updateGame(self: *const T, guid_instance_i_d_: Guid) HRESULT {
                return @as(*const IGameExplorer.VTable, @ptrCast(self.vtable)).UpdateGame(@as(*const IGameExplorer, @ptrCast(self)), guid_instance_i_d_);
            }
            pub inline fn verifyAccess(self: *const T, bstr_g_d_f_binary_path_: ?BSTR, pf_has_access_: ?*BOOL) HRESULT {
                return @as(*const IGameExplorer.VTable, @ptrCast(self.vtable)).VerifyAccess(@as(*const IGameExplorer, @ptrCast(self)), bstr_g_d_f_binary_path_, pf_has_access_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const GAMESTATS_OPEN_TYPE = enum(i32) {
    RCREATE = 0,
    NLY = 1,
};
pub const GAMESTATS_OPEN_OPENORCREATE = GAMESTATS_OPEN_TYPE.RCREATE;
pub const GAMESTATS_OPEN_OPENONLY = GAMESTATS_OPEN_TYPE.NLY;

pub const GAMESTATS_OPEN_RESULT = enum(i32) {
    CREATED = 0,
    OPENED = 1,
};
pub const GAMESTATS_OPEN_CREATED = GAMESTATS_OPEN_RESULT.CREATED;
pub const GAMESTATS_OPEN_OPENED = GAMESTATS_OPEN_RESULT.OPENED;

const IID_IGameStatistics_Value = Guid.initString("3887c9ca-04a0-42ae-bc4c-5fa6c7721145");
pub const IID_IGameStatistics = &IID_IGameStatistics_Value;
pub const IGameStatistics = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMaxCategoryLength: *const fn (
            self: *const IGameStatistics,
            cch: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxNameLength: *const fn (
            self: *const IGameStatistics,
            cch: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxValueLength: *const fn (
            self: *const IGameStatistics,
            cch: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxCategories: *const fn (
            self: *const IGameStatistics,
            p_max: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxStatsPerCategory: *const fn (
            self: *const IGameStatistics,
            p_max: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCategoryTitle: *const fn (
            self: *const IGameStatistics,
            category_index: u16,
            title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryTitle: *const fn (
            self: *const IGameStatistics,
            category_index: u16,
            p_title: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistic: *const fn (
            self: *const IGameStatistics,
            category_index: u16,
            stat_index: u16,
            p_name: ?*?PWSTR,
            p_value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatistic: *const fn (
            self: *const IGameStatistics,
            category_index: u16,
            stat_index: u16,
            name: ?[*:0]const u16,
            value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IGameStatistics,
            track_changes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLastPlayedCategory: *const fn (
            self: *const IGameStatistics,
            category_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastPlayedCategory: *const fn (
            self: *const IGameStatistics,
            p_category_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMaxCategoryLength(self: *const T, cch_: ?*u32) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).GetMaxCategoryLength(@as(*const IGameStatistics, @ptrCast(self)), cch_);
            }
            pub inline fn getMaxNameLength(self: *const T, cch_: ?*u32) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).GetMaxNameLength(@as(*const IGameStatistics, @ptrCast(self)), cch_);
            }
            pub inline fn getMaxValueLength(self: *const T, cch_: ?*u32) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).GetMaxValueLength(@as(*const IGameStatistics, @ptrCast(self)), cch_);
            }
            pub inline fn getMaxCategories(self: *const T, p_max_: ?*u16) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).GetMaxCategories(@as(*const IGameStatistics, @ptrCast(self)), p_max_);
            }
            pub inline fn getMaxStatsPerCategory(self: *const T, p_max_: ?*u16) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).GetMaxStatsPerCategory(@as(*const IGameStatistics, @ptrCast(self)), p_max_);
            }
            pub inline fn setCategoryTitle(self: *const T, category_index_: u16, title_: ?[*:0]const u16) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).SetCategoryTitle(@as(*const IGameStatistics, @ptrCast(self)), category_index_, title_);
            }
            pub inline fn getCategoryTitle(self: *const T, category_index_: u16, p_title_: ?*?PWSTR) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).GetCategoryTitle(@as(*const IGameStatistics, @ptrCast(self)), category_index_, p_title_);
            }
            pub inline fn getStatistic(self: *const T, category_index_: u16, stat_index_: u16, p_name_: ?*?PWSTR, p_value_: ?*?PWSTR) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).GetStatistic(@as(*const IGameStatistics, @ptrCast(self)), category_index_, stat_index_, p_name_, p_value_);
            }
            pub inline fn setStatistic(self: *const T, category_index_: u16, stat_index_: u16, name_: ?[*:0]const u16, value_: ?[*:0]const u16) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).SetStatistic(@as(*const IGameStatistics, @ptrCast(self)), category_index_, stat_index_, name_, value_);
            }
            pub inline fn save(self: *const T, track_changes_: BOOL) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).Save(@as(*const IGameStatistics, @ptrCast(self)), track_changes_);
            }
            pub inline fn setLastPlayedCategory(self: *const T, category_index_: u32) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).SetLastPlayedCategory(@as(*const IGameStatistics, @ptrCast(self)), category_index_);
            }
            pub inline fn getLastPlayedCategory(self: *const T, p_category_index_: ?*u32) HRESULT {
                return @as(*const IGameStatistics.VTable, @ptrCast(self.vtable)).GetLastPlayedCategory(@as(*const IGameStatistics, @ptrCast(self)), p_category_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IGameStatisticsMgr_Value = Guid.initString("aff3ea11-e70e-407d-95dd-35e612c41ce2");
pub const IID_IGameStatisticsMgr = &IID_IGameStatisticsMgr_Value;
pub const IGameStatisticsMgr = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGameStatistics: *const fn (
            self: *const IGameStatisticsMgr,
            g_d_f_binary_path: ?[*:0]const u16,
            open_type: GAMESTATS_OPEN_TYPE,
            p_open_result: ?*GAMESTATS_OPEN_RESULT,
            ppi_stats: ?*?*IGameStatistics,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveGameStatistics: *const fn (
            self: *const IGameStatisticsMgr,
            g_d_f_binary_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getGameStatistics(self: *const T, g_d_f_binary_path_: ?[*:0]const u16, open_type_: GAMESTATS_OPEN_TYPE, p_open_result_: ?*GAMESTATS_OPEN_RESULT, ppi_stats_: ?*?*IGameStatistics) HRESULT {
                return @as(*const IGameStatisticsMgr.VTable, @ptrCast(self.vtable)).GetGameStatistics(@as(*const IGameStatisticsMgr, @ptrCast(self)), g_d_f_binary_path_, open_type_, p_open_result_, ppi_stats_);
            }
            pub inline fn removeGameStatistics(self: *const T, g_d_f_binary_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IGameStatisticsMgr.VTable, @ptrCast(self.vtable)).RemoveGameStatistics(@as(*const IGameStatisticsMgr, @ptrCast(self)), g_d_f_binary_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IGameExplorer2_Value = Guid.initString("86874aa7-a1ed-450d-a7eb-b89e20b2fff3");
pub const IID_IGameExplorer2 = &IID_IGameExplorer2_Value;
pub const IGameExplorer2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InstallGame: *const fn (
            self: *const IGameExplorer2,
            binary_g_d_f_path: ?[*:0]const u16,
            install_directory: ?[*:0]const u16,
            install_scope: GAME_INSTALL_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UninstallGame: *const fn (
            self: *const IGameExplorer2,
            binary_g_d_f_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckAccess: *const fn (
            self: *const IGameExplorer2,
            binary_g_d_f_path: ?[*:0]const u16,
            p_has_access: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn installGame(self: *const T, binary_g_d_f_path_: ?[*:0]const u16, install_directory_: ?[*:0]const u16, install_scope_: GAME_INSTALL_SCOPE) HRESULT {
                return @as(*const IGameExplorer2.VTable, @ptrCast(self.vtable)).InstallGame(@as(*const IGameExplorer2, @ptrCast(self)), binary_g_d_f_path_, install_directory_, install_scope_);
            }
            pub inline fn uninstallGame(self: *const T, binary_g_d_f_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IGameExplorer2.VTable, @ptrCast(self.vtable)).UninstallGame(@as(*const IGameExplorer2, @ptrCast(self)), binary_g_d_f_path_);
            }
            pub inline fn checkAccess(self: *const T, binary_g_d_f_path_: ?[*:0]const u16, p_has_access_: ?*BOOL) HRESULT {
                return @as(*const IGameExplorer2.VTable, @ptrCast(self.vtable)).CheckAccess(@as(*const IGameExplorer2, @ptrCast(self)), binary_g_d_f_path_, p_has_access_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const GAMING_DEVICE_VENDOR_ID = enum(i32) {
    NONE = 0,
    MICROSOFT = -1024700366,
};
pub const GAMING_DEVICE_VENDOR_ID_NONE = GAMING_DEVICE_VENDOR_ID.NONE;
pub const GAMING_DEVICE_VENDOR_ID_MICROSOFT = GAMING_DEVICE_VENDOR_ID.MICROSOFT;

pub const GAMING_DEVICE_DEVICE_ID = enum(i32) {
    NONE = 0,
    XBOX_ONE = 1988865574,
    XBOX_ONE_S = 712204761,
    XBOX_ONE_X = 1523980231,
    XBOX_ONE_X_DEVKIT = 284675555,
};
pub const GAMING_DEVICE_DEVICE_ID_NONE = GAMING_DEVICE_DEVICE_ID.NONE;
pub const GAMING_DEVICE_DEVICE_ID_XBOX_ONE = GAMING_DEVICE_DEVICE_ID.XBOX_ONE;
pub const GAMING_DEVICE_DEVICE_ID_XBOX_ONE_S = GAMING_DEVICE_DEVICE_ID.XBOX_ONE_S;
pub const GAMING_DEVICE_DEVICE_ID_XBOX_ONE_X = GAMING_DEVICE_DEVICE_ID.XBOX_ONE_X;
pub const GAMING_DEVICE_DEVICE_ID_XBOX_ONE_X_DEVKIT = GAMING_DEVICE_DEVICE_ID.XBOX_ONE_X_DEVKIT;

pub const GAMING_DEVICE_MODEL_INFORMATION = extern struct {
    vendorId: GAMING_DEVICE_VENDOR_ID,
    deviceId: GAMING_DEVICE_DEVICE_ID,
};

pub const GameUICompletionRoutine = *const fn (
    return_code: HRESULT,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PlayerPickerUICompletionRoutine = *const fn (
    return_code: HRESULT,
    context: ?*anyopaque,
    selected_xuids: [*]const ?HSTRING,
    selected_xuids_count: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const KnownGamingPrivileges = enum(i32) {
    BROADCAST = 190,
    VIEW_FRIENDS_LIST = 197,
    GAME_DVR = 198,
    SHARE_KINECT_CONTENT = 199,
    MULTIPLAYER_PARTIES = 203,
    COMMUNICATION_VOICE_INGAME = 205,
    COMMUNICATION_VOICE_SKYPE = 206,
    CLOUD_GAMING_MANAGE_SESSION = 207,
    CLOUD_GAMING_JOIN_SESSION = 208,
    CLOUD_SAVED_GAMES = 209,
    SHARE_CONTENT = 211,
    PREMIUM_CONTENT = 214,
    SUBSCRIPTION_CONTENT = 219,
    SOCIAL_NETWORK_SHARING = 220,
    PREMIUM_VIDEO = 224,
    VIDEO_COMMUNICATIONS = 235,
    PURCHASE_CONTENT = 245,
    USER_CREATED_CONTENT = 247,
    PROFILE_VIEWING = 249,
    COMMUNICATIONS = 252,
    MULTIPLAYER_SESSIONS = 254,
    ADD_FRIEND = 255,
};
pub const XPRIVILEGE_BROADCAST = KnownGamingPrivileges.BROADCAST;
pub const XPRIVILEGE_VIEW_FRIENDS_LIST = KnownGamingPrivileges.VIEW_FRIENDS_LIST;
pub const XPRIVILEGE_GAME_DVR = KnownGamingPrivileges.GAME_DVR;
pub const XPRIVILEGE_SHARE_KINECT_CONTENT = KnownGamingPrivileges.SHARE_KINECT_CONTENT;
pub const XPRIVILEGE_MULTIPLAYER_PARTIES = KnownGamingPrivileges.MULTIPLAYER_PARTIES;
pub const XPRIVILEGE_COMMUNICATION_VOICE_INGAME = KnownGamingPrivileges.COMMUNICATION_VOICE_INGAME;
pub const XPRIVILEGE_COMMUNICATION_VOICE_SKYPE = KnownGamingPrivileges.COMMUNICATION_VOICE_SKYPE;
pub const XPRIVILEGE_CLOUD_GAMING_MANAGE_SESSION = KnownGamingPrivileges.CLOUD_GAMING_MANAGE_SESSION;
pub const XPRIVILEGE_CLOUD_GAMING_JOIN_SESSION = KnownGamingPrivileges.CLOUD_GAMING_JOIN_SESSION;
pub const XPRIVILEGE_CLOUD_SAVED_GAMES = KnownGamingPrivileges.CLOUD_SAVED_GAMES;
pub const XPRIVILEGE_SHARE_CONTENT = KnownGamingPrivileges.SHARE_CONTENT;
pub const XPRIVILEGE_PREMIUM_CONTENT = KnownGamingPrivileges.PREMIUM_CONTENT;
pub const XPRIVILEGE_SUBSCRIPTION_CONTENT = KnownGamingPrivileges.SUBSCRIPTION_CONTENT;
pub const XPRIVILEGE_SOCIAL_NETWORK_SHARING = KnownGamingPrivileges.SOCIAL_NETWORK_SHARING;
pub const XPRIVILEGE_PREMIUM_VIDEO = KnownGamingPrivileges.PREMIUM_VIDEO;
pub const XPRIVILEGE_VIDEO_COMMUNICATIONS = KnownGamingPrivileges.VIDEO_COMMUNICATIONS;
pub const XPRIVILEGE_PURCHASE_CONTENT = KnownGamingPrivileges.PURCHASE_CONTENT;
pub const XPRIVILEGE_USER_CREATED_CONTENT = KnownGamingPrivileges.USER_CREATED_CONTENT;
pub const XPRIVILEGE_PROFILE_VIEWING = KnownGamingPrivileges.PROFILE_VIEWING;
pub const XPRIVILEGE_COMMUNICATIONS = KnownGamingPrivileges.COMMUNICATIONS;
pub const XPRIVILEGE_MULTIPLAYER_SESSIONS = KnownGamingPrivileges.MULTIPLAYER_SESSIONS;
pub const XPRIVILEGE_ADD_FRIEND = KnownGamingPrivileges.ADD_FRIEND;

const CLSID_XblIdpAuthManager_Value = Guid.initString("ce23534b-56d8-4978-86a2-7ee570640468");
pub const CLSID_XblIdpAuthManager = &CLSID_XblIdpAuthManager_Value;

const CLSID_XblIdpAuthTokenResult_Value = Guid.initString("9f493441-744a-410c-ae2b-9a22f7c7731f");
pub const CLSID_XblIdpAuthTokenResult = &CLSID_XblIdpAuthTokenResult_Value;

pub const XBL_IDP_AUTH_TOKEN_STATUS = enum(i32) {
    SUCCESS = 0,
    OFFLINE_SUCCESS = 1,
    NO_ACCOUNT_SET = 2,
    LOAD_MSA_ACCOUNT_FAILED = 3,
    XBOX_VETO = 4,
    MSA_INTERRUPT = 5,
    OFFLINE_NO_CONSENT = 6,
    VIEW_NOT_SET = 7,
    UNKNOWN = -1,
};
pub const XBL_IDP_AUTH_TOKEN_STATUS_SUCCESS = XBL_IDP_AUTH_TOKEN_STATUS.SUCCESS;
pub const XBL_IDP_AUTH_TOKEN_STATUS_OFFLINE_SUCCESS = XBL_IDP_AUTH_TOKEN_STATUS.OFFLINE_SUCCESS;
pub const XBL_IDP_AUTH_TOKEN_STATUS_NO_ACCOUNT_SET = XBL_IDP_AUTH_TOKEN_STATUS.NO_ACCOUNT_SET;
pub const XBL_IDP_AUTH_TOKEN_STATUS_LOAD_MSA_ACCOUNT_FAILED = XBL_IDP_AUTH_TOKEN_STATUS.LOAD_MSA_ACCOUNT_FAILED;
pub const XBL_IDP_AUTH_TOKEN_STATUS_XBOX_VETO = XBL_IDP_AUTH_TOKEN_STATUS.XBOX_VETO;
pub const XBL_IDP_AUTH_TOKEN_STATUS_MSA_INTERRUPT = XBL_IDP_AUTH_TOKEN_STATUS.MSA_INTERRUPT;
pub const XBL_IDP_AUTH_TOKEN_STATUS_OFFLINE_NO_CONSENT = XBL_IDP_AUTH_TOKEN_STATUS.OFFLINE_NO_CONSENT;
pub const XBL_IDP_AUTH_TOKEN_STATUS_VIEW_NOT_SET = XBL_IDP_AUTH_TOKEN_STATUS.VIEW_NOT_SET;
pub const XBL_IDP_AUTH_TOKEN_STATUS_UNKNOWN = XBL_IDP_AUTH_TOKEN_STATUS.UNKNOWN;

const IID_IXblIdpAuthManager_Value = Guid.initString("eb5ddb08-8bbf-449b-ac21-b02ddeb3b136");
pub const IID_IXblIdpAuthManager = &IID_IXblIdpAuthManager_Value;
pub const IXblIdpAuthManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetGamerAccount: *const fn (
            self: *const IXblIdpAuthManager,
            msa_account_id: ?[*:0]const u16,
            xuid: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGamerAccount: *const fn (
            self: *const IXblIdpAuthManager,
            msa_account_id: ?*?PWSTR,
            xuid: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAppViewInitialized: *const fn (
            self: *const IXblIdpAuthManager,
            app_sid: ?[*:0]const u16,
            msa_account_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnvironment: *const fn (
            self: *const IXblIdpAuthManager,
            environment: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSandbox: *const fn (
            self: *const IXblIdpAuthManager,
            sandbox: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTokenAndSignatureWithTokenResult: *const fn (
            self: *const IXblIdpAuthManager,
            msa_account_id: ?[*:0]const u16,
            app_sid: ?[*:0]const u16,
            msa_target: ?[*:0]const u16,
            msa_policy: ?[*:0]const u16,
            http_method: ?[*:0]const u16,
            uri: ?[*:0]const u16,
            headers: ?[*:0]const u16,
            body: [*:0]u8,
            body_size: u32,
            force_refresh: BOOL,
            result: ?*?*IXblIdpAuthTokenResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setGamerAccount(self: *const T, msa_account_id_: ?[*:0]const u16, xuid_: ?[*:0]const u16) HRESULT {
                return @as(*const IXblIdpAuthManager.VTable, @ptrCast(self.vtable)).SetGamerAccount(@as(*const IXblIdpAuthManager, @ptrCast(self)), msa_account_id_, xuid_);
            }
            pub inline fn getGamerAccount(self: *const T, msa_account_id_: ?*?PWSTR, xuid_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthManager.VTable, @ptrCast(self.vtable)).GetGamerAccount(@as(*const IXblIdpAuthManager, @ptrCast(self)), msa_account_id_, xuid_);
            }
            pub inline fn setAppViewInitialized(self: *const T, app_sid_: ?[*:0]const u16, msa_account_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IXblIdpAuthManager.VTable, @ptrCast(self.vtable)).SetAppViewInitialized(@as(*const IXblIdpAuthManager, @ptrCast(self)), app_sid_, msa_account_id_);
            }
            pub inline fn getEnvironment(self: *const T, environment_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthManager.VTable, @ptrCast(self.vtable)).GetEnvironment(@as(*const IXblIdpAuthManager, @ptrCast(self)), environment_);
            }
            pub inline fn getSandbox(self: *const T, sandbox_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthManager.VTable, @ptrCast(self.vtable)).GetSandbox(@as(*const IXblIdpAuthManager, @ptrCast(self)), sandbox_);
            }
            pub inline fn getTokenAndSignatureWithTokenResult(self: *const T, msa_account_id_: ?[*:0]const u16, app_sid_: ?[*:0]const u16, msa_target_: ?[*:0]const u16, msa_policy_: ?[*:0]const u16, http_method_: ?[*:0]const u16, uri_: ?[*:0]const u16, headers_: ?[*:0]const u16, body_: [*:0]u8, body_size_: u32, force_refresh_: BOOL, result_: ?*?*IXblIdpAuthTokenResult) HRESULT {
                return @as(*const IXblIdpAuthManager.VTable, @ptrCast(self.vtable)).GetTokenAndSignatureWithTokenResult(@as(*const IXblIdpAuthManager, @ptrCast(self)), msa_account_id_, app_sid_, msa_target_, msa_policy_, http_method_, uri_, headers_, body_, body_size_, force_refresh_, result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXblIdpAuthTokenResult_Value = Guid.initString("46ce0225-f267-4d68-b299-b2762552dec1");
pub const IID_IXblIdpAuthTokenResult = &IID_IXblIdpAuthTokenResult_Value;
pub const IXblIdpAuthTokenResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStatus: *const fn (
            self: *const IXblIdpAuthTokenResult,
            status: ?*XBL_IDP_AUTH_TOKEN_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorCode: *const fn (
            self: *const IXblIdpAuthTokenResult,
            error_code: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToken: *const fn (
            self: *const IXblIdpAuthTokenResult,
            token: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignature: *const fn (
            self: *const IXblIdpAuthTokenResult,
            signature: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSandbox: *const fn (
            self: *const IXblIdpAuthTokenResult,
            sandbox: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnvironment: *const fn (
            self: *const IXblIdpAuthTokenResult,
            environment: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMsaAccountId: *const fn (
            self: *const IXblIdpAuthTokenResult,
            msa_account_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXuid: *const fn (
            self: *const IXblIdpAuthTokenResult,
            xuid: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGamertag: *const fn (
            self: *const IXblIdpAuthTokenResult,
            gamertag: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAgeGroup: *const fn (
            self: *const IXblIdpAuthTokenResult,
            age_group: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivileges: *const fn (
            self: *const IXblIdpAuthTokenResult,
            privileges: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMsaTarget: *const fn (
            self: *const IXblIdpAuthTokenResult,
            msa_target: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMsaPolicy: *const fn (
            self: *const IXblIdpAuthTokenResult,
            msa_policy: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMsaAppId: *const fn (
            self: *const IXblIdpAuthTokenResult,
            msa_app_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRedirect: *const fn (
            self: *const IXblIdpAuthTokenResult,
            redirect: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMessage: *const fn (
            self: *const IXblIdpAuthTokenResult,
            message: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHelpId: *const fn (
            self: *const IXblIdpAuthTokenResult,
            help_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnforcementBans: *const fn (
            self: *const IXblIdpAuthTokenResult,
            enforcement_bans: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestrictions: *const fn (
            self: *const IXblIdpAuthTokenResult,
            restrictions: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTitleRestrictions: *const fn (
            self: *const IXblIdpAuthTokenResult,
            title_restrictions: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStatus(self: *const T, status_: ?*XBL_IDP_AUTH_TOKEN_STATUS) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), status_);
            }
            pub inline fn getErrorCode(self: *const T, error_code_: ?*HRESULT) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetErrorCode(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), error_code_);
            }
            pub inline fn getToken(self: *const T, token_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetToken(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), token_);
            }
            pub inline fn getSignature(self: *const T, signature_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetSignature(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), signature_);
            }
            pub inline fn getSandbox(self: *const T, sandbox_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetSandbox(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), sandbox_);
            }
            pub inline fn getEnvironment(self: *const T, environment_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetEnvironment(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), environment_);
            }
            pub inline fn getMsaAccountId(self: *const T, msa_account_id_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetMsaAccountId(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), msa_account_id_);
            }
            pub inline fn getXuid(self: *const T, xuid_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetXuid(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), xuid_);
            }
            pub inline fn getGamertag(self: *const T, gamertag_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetGamertag(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), gamertag_);
            }
            pub inline fn getAgeGroup(self: *const T, age_group_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetAgeGroup(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), age_group_);
            }
            pub inline fn getPrivileges(self: *const T, privileges_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetPrivileges(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), privileges_);
            }
            pub inline fn getMsaTarget(self: *const T, msa_target_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetMsaTarget(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), msa_target_);
            }
            pub inline fn getMsaPolicy(self: *const T, msa_policy_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetMsaPolicy(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), msa_policy_);
            }
            pub inline fn getMsaAppId(self: *const T, msa_app_id_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetMsaAppId(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), msa_app_id_);
            }
            pub inline fn getRedirect(self: *const T, redirect_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetRedirect(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), redirect_);
            }
            pub inline fn getMessage(self: *const T, message_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetMessage(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), message_);
            }
            pub inline fn getHelpId(self: *const T, help_id_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetHelpId(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), help_id_);
            }
            pub inline fn getEnforcementBans(self: *const T, enforcement_bans_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetEnforcementBans(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), enforcement_bans_);
            }
            pub inline fn getRestrictions(self: *const T, restrictions_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetRestrictions(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), restrictions_);
            }
            pub inline fn getTitleRestrictions(self: *const T, title_restrictions_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult.VTable, @ptrCast(self.vtable)).GetTitleRestrictions(@as(*const IXblIdpAuthTokenResult, @ptrCast(self)), title_restrictions_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXblIdpAuthTokenResult2_Value = Guid.initString("75d760b0-60b9-412d-994f-26b2cd5f7812");
pub const IID_IXblIdpAuthTokenResult2 = &IID_IXblIdpAuthTokenResult2_Value;
pub const IXblIdpAuthTokenResult2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetModernGamertag: *const fn (
            self: *const IXblIdpAuthTokenResult2,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetModernGamertagSuffix: *const fn (
            self: *const IXblIdpAuthTokenResult2,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUniqueModernGamertag: *const fn (
            self: *const IXblIdpAuthTokenResult2,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getModernGamertag(self: *const T, value_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult2.VTable, @ptrCast(self.vtable)).GetModernGamertag(@as(*const IXblIdpAuthTokenResult2, @ptrCast(self)), value_);
            }
            pub inline fn getModernGamertagSuffix(self: *const T, value_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult2.VTable, @ptrCast(self.vtable)).GetModernGamertagSuffix(@as(*const IXblIdpAuthTokenResult2, @ptrCast(self)), value_);
            }
            pub inline fn getUniqueModernGamertag(self: *const T, value_: ?*?PWSTR) HRESULT {
                return @as(*const IXblIdpAuthTokenResult2.VTable, @ptrCast(self.vtable)).GetUniqueModernGamertag(@as(*const IXblIdpAuthTokenResult2, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (30)
//--------------------------------------------------------------------------------
pub extern "api-ms-win-gaming-expandedresources-l1-1-0" fn HasExpandedResources(
    has_expanded_resources: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-expandedresources-l1-1-0" fn GetExpandedResourceExclusiveCpuCount(
    exclusive_cpu_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-expandedresources-l1-1-0" fn ReleaseExclusiveCpuSets() callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-deviceinformation-l1-1-0" fn GetGamingDeviceModelInformation(
    information: ?*GAMING_DEVICE_MODEL_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowGameInviteUI(
    service_configuration_id: ?HSTRING,
    session_template_name: ?HSTRING,
    session_id: ?HSTRING,
    invitation_display_text: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowPlayerPickerUI(
    prompt_display_text: ?HSTRING,
    xuids: [*]const ?HSTRING,
    xuids_count: usize,
    pre_selected_xuids: ?[*]const ?HSTRING,
    pre_selected_xuids_count: usize,
    min_selection_count: usize,
    max_selection_count: usize,
    completion_routine: ?PlayerPickerUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowProfileCardUI(
    target_user_xuid: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowChangeFriendRelationshipUI(
    target_user_xuid: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ShowTitleAchievementsUI(
    title_id: u32,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-0" fn ProcessPendingGameUI(
    wait_for_completion: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-0" fn TryCancelPendingGameUI() callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-gaming-tcui-l1-1-1" fn CheckGamingPrivilegeWithUI(
    privilege_id: u32,
    scope: ?HSTRING,
    policy: ?HSTRING,
    friendly_message: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-1" fn CheckGamingPrivilegeSilently(
    privilege_id: u32,
    scope: ?HSTRING,
    policy: ?HSTRING,
    has_privilege: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowGameInviteUIForUser(
    user: ?*IInspectable,
    service_configuration_id: ?HSTRING,
    session_template_name: ?HSTRING,
    session_id: ?HSTRING,
    invitation_display_text: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowPlayerPickerUIForUser(
    user: ?*IInspectable,
    prompt_display_text: ?HSTRING,
    xuids: [*]const ?HSTRING,
    xuids_count: usize,
    pre_selected_xuids: ?[*]const ?HSTRING,
    pre_selected_xuids_count: usize,
    min_selection_count: usize,
    max_selection_count: usize,
    completion_routine: ?PlayerPickerUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowProfileCardUIForUser(
    user: ?*IInspectable,
    target_user_xuid: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowChangeFriendRelationshipUIForUser(
    user: ?*IInspectable,
    target_user_xuid: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-2" fn ShowTitleAchievementsUIForUser(
    user: ?*IInspectable,
    title_id: u32,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-2" fn CheckGamingPrivilegeWithUIForUser(
    user: ?*IInspectable,
    privilege_id: u32,
    scope: ?HSTRING,
    policy: ?HSTRING,
    friendly_message: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-2" fn CheckGamingPrivilegeSilentlyForUser(
    user: ?*IInspectable,
    privilege_id: u32,
    scope: ?HSTRING,
    policy: ?HSTRING,
    has_privilege: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-3" fn ShowGameInviteUIWithContext(
    service_configuration_id: ?HSTRING,
    session_template_name: ?HSTRING,
    session_id: ?HSTRING,
    invitation_display_text: ?HSTRING,
    custom_activation_context: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-3" fn ShowGameInviteUIWithContextForUser(
    user: ?*IInspectable,
    service_configuration_id: ?HSTRING,
    session_template_name: ?HSTRING,
    session_id: ?HSTRING,
    invitation_display_text: ?HSTRING,
    custom_activation_context: ?HSTRING,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowGameInfoUI(
    title_id: u32,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowGameInfoUIForUser(
    user: ?*IInspectable,
    title_id: u32,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowFindFriendsUI(
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowFindFriendsUIForUser(
    user: ?*IInspectable,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowCustomizeUserProfileUI(
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowCustomizeUserProfileUIForUser(
    user: ?*IInspectable,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowUserSettingsUI(
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-gaming-tcui-l1-1-4" fn ShowUserSettingsUIForUser(
    user: ?*IInspectable,
    completion_routine: ?GameUICompletionRoutine,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("zig.zig").Guid;
const BOOL = @import("foundation.zig").BOOL;
const BSTR = @import("foundation.zig").BSTR;
const HRESULT = @import("foundation.zig").HRESULT;
const HSTRING = @import("system/win_rt.zig").HSTRING;
const IInspectable = @import("system/win_rt.zig").IInspectable;
const IUnknown = @import("system/com.zig").IUnknown;
const PWSTR = @import("foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "GameUICompletionRoutine")) {
        _ = GameUICompletionRoutine;
    }
    if (@hasDecl(@This(), "PlayerPickerUICompletionRoutine")) {
        _ = PlayerPickerUICompletionRoutine;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
