//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (83)
//--------------------------------------------------------------------------------
pub const VSS_ASSOC_NO_MAX_SPACE = @as(i32, -1);
pub const VSS_ASSOC_REMOVE = @as(u32, 0);
pub const VSS_E_BAD_STATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212543));
pub const VSS_E_UNEXPECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212542));
pub const VSS_E_PROVIDER_ALREADY_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212541));
pub const VSS_E_PROVIDER_NOT_REGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212540));
pub const VSS_E_PROVIDER_VETO = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212538));
pub const VSS_E_PROVIDER_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212537));
pub const VSS_E_OBJECT_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212536));
pub const VSS_S_ASYNC_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 271113));
pub const VSS_S_ASYNC_FINISHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 271114));
pub const VSS_S_ASYNC_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 271115));
pub const VSS_E_VOLUME_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212532));
pub const VSS_E_VOLUME_NOT_SUPPORTED_BY_PROVIDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212530));
pub const VSS_E_OBJECT_ALREADY_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212531));
pub const VSS_E_UNEXPECTED_PROVIDER_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212529));
pub const VSS_E_CORRUPT_XML_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212528));
pub const VSS_E_INVALID_XML_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212527));
pub const VSS_E_MAXIMUM_NUMBER_OF_VOLUMES_REACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212526));
pub const VSS_E_FLUSH_WRITES_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212525));
pub const VSS_E_HOLD_WRITES_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212524));
pub const VSS_E_UNEXPECTED_WRITER_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212523));
pub const VSS_E_SNAPSHOT_SET_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212522));
pub const VSS_E_MAXIMUM_NUMBER_OF_SNAPSHOTS_REACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212521));
pub const VSS_E_WRITER_INFRASTRUCTURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212520));
pub const VSS_E_WRITER_NOT_RESPONDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212519));
pub const VSS_E_WRITER_ALREADY_SUBSCRIBED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212518));
pub const VSS_E_UNSUPPORTED_CONTEXT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212517));
pub const VSS_E_VOLUME_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212515));
pub const VSS_E_MAXIMUM_DIFFAREA_ASSOCIATIONS_REACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212514));
pub const VSS_E_INSUFFICIENT_STORAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212513));
pub const VSS_E_NO_SNAPSHOTS_IMPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212512));
pub const VSS_S_SOME_SNAPSHOTS_NOT_IMPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 271137));
pub const VSS_E_SOME_SNAPSHOTS_NOT_IMPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212511));
pub const VSS_E_MAXIMUM_NUMBER_OF_REMOTE_MACHINES_REACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212510));
pub const VSS_E_REMOTE_SERVER_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212509));
pub const VSS_E_REMOTE_SERVER_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212508));
pub const VSS_E_REVERT_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212507));
pub const VSS_E_REVERT_VOLUME_LOST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212506));
pub const VSS_E_REBOOT_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212505));
pub const VSS_E_TRANSACTION_FREEZE_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212504));
pub const VSS_E_TRANSACTION_THAW_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212503));
pub const VSS_E_VOLUME_NOT_LOCAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212499));
pub const VSS_E_CLUSTER_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212498));
pub const VSS_E_WRITERERROR_INCONSISTENTSNAPSHOT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212304));
pub const VSS_E_WRITERERROR_OUTOFRESOURCES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212303));
pub const VSS_E_WRITERERROR_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212302));
pub const VSS_E_WRITERERROR_RETRYABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212301));
pub const VSS_E_WRITERERROR_NONRETRYABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212300));
pub const VSS_E_WRITERERROR_RECOVERY_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212299));
pub const VSS_E_BREAK_REVERT_ID_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212298));
pub const VSS_E_LEGACY_PROVIDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212297));
pub const VSS_E_MISSING_DISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212296));
pub const VSS_E_MISSING_HIDDEN_VOLUME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212295));
pub const VSS_E_MISSING_VOLUME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212294));
pub const VSS_E_AUTORECOVERY_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212293));
pub const VSS_E_DYNAMIC_DISK_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212292));
pub const VSS_E_NONTRANSPORTABLE_BCD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212291));
pub const VSS_E_CANNOT_REVERT_DISKID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212290));
pub const VSS_E_RESYNC_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212289));
pub const VSS_E_CLUSTER_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212288));
pub const VSS_E_UNSELECTED_VOLUME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212502));
pub const VSS_E_SNAPSHOT_NOT_IN_SET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212501));
pub const VSS_E_NESTED_VOLUME_LIMIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212500));
pub const VSS_E_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212497));
pub const VSS_E_WRITERERROR_PARTIAL_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212490));
pub const VSS_E_ASRERROR_DISK_ASSIGNMENT_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212287));
pub const VSS_E_ASRERROR_DISK_RECREATION_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212286));
pub const VSS_E_ASRERROR_NO_ARCPATH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212285));
pub const VSS_E_ASRERROR_MISSING_DYNDISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212284));
pub const VSS_E_ASRERROR_SHARED_CRIDISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212283));
pub const VSS_E_ASRERROR_DATADISK_RDISK0 = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212282));
pub const VSS_E_ASRERROR_RDISK0_TOOSMALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212281));
pub const VSS_E_ASRERROR_CRITICAL_DISKS_TOO_SMALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212280));
pub const VSS_E_WRITER_STATUS_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212279));
pub const VSS_E_ASRERROR_DYNAMIC_VHD_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212278));
pub const VSS_E_CRITICAL_VOLUME_ON_INVALID_DISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212271));
pub const VSS_E_ASRERROR_RDISK_FOR_SYSTEM_DISK_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212270));
pub const VSS_E_ASRERROR_NO_PHYSICAL_DISK_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212269));
pub const VSS_E_ASRERROR_FIXED_PHYSICAL_DISK_AVAILABLE_AFTER_DISK_EXCLUSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212268));
pub const VSS_E_ASRERROR_CRITICAL_DISK_CANNOT_BE_EXCLUDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212267));
pub const VSS_E_ASRERROR_SYSTEM_PARTITION_HIDDEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212266));
pub const VSS_E_FSS_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147212265));

//--------------------------------------------------------------------------------
// Section: Types (69)
//--------------------------------------------------------------------------------
pub const VSS_OBJECT_TYPE = enum(i32) {
    UNKNOWN = 0,
    NONE = 1,
    SNAPSHOT_SET = 2,
    SNAPSHOT = 3,
    PROVIDER = 4,
    TYPE_COUNT = 5,
};
pub const VSS_OBJECT_UNKNOWN = VSS_OBJECT_TYPE.UNKNOWN;
pub const VSS_OBJECT_NONE = VSS_OBJECT_TYPE.NONE;
pub const VSS_OBJECT_SNAPSHOT_SET = VSS_OBJECT_TYPE.SNAPSHOT_SET;
pub const VSS_OBJECT_SNAPSHOT = VSS_OBJECT_TYPE.SNAPSHOT;
pub const VSS_OBJECT_PROVIDER = VSS_OBJECT_TYPE.PROVIDER;
pub const VSS_OBJECT_TYPE_COUNT = VSS_OBJECT_TYPE.TYPE_COUNT;

pub const VSS_SNAPSHOT_STATE = enum(i32) {
    UNKNOWN = 0,
    PREPARING = 1,
    PROCESSING_PREPARE = 2,
    PREPARED = 3,
    PROCESSING_PRECOMMIT = 4,
    PRECOMMITTED = 5,
    PROCESSING_COMMIT = 6,
    COMMITTED = 7,
    PROCESSING_POSTCOMMIT = 8,
    PROCESSING_PREFINALCOMMIT = 9,
    PREFINALCOMMITTED = 10,
    PROCESSING_POSTFINALCOMMIT = 11,
    CREATED = 12,
    ABORTED = 13,
    DELETED = 14,
    POSTCOMMITTED = 15,
    COUNT = 16,
};
pub const VSS_SS_UNKNOWN = VSS_SNAPSHOT_STATE.UNKNOWN;
pub const VSS_SS_PREPARING = VSS_SNAPSHOT_STATE.PREPARING;
pub const VSS_SS_PROCESSING_PREPARE = VSS_SNAPSHOT_STATE.PROCESSING_PREPARE;
pub const VSS_SS_PREPARED = VSS_SNAPSHOT_STATE.PREPARED;
pub const VSS_SS_PROCESSING_PRECOMMIT = VSS_SNAPSHOT_STATE.PROCESSING_PRECOMMIT;
pub const VSS_SS_PRECOMMITTED = VSS_SNAPSHOT_STATE.PRECOMMITTED;
pub const VSS_SS_PROCESSING_COMMIT = VSS_SNAPSHOT_STATE.PROCESSING_COMMIT;
pub const VSS_SS_COMMITTED = VSS_SNAPSHOT_STATE.COMMITTED;
pub const VSS_SS_PROCESSING_POSTCOMMIT = VSS_SNAPSHOT_STATE.PROCESSING_POSTCOMMIT;
pub const VSS_SS_PROCESSING_PREFINALCOMMIT = VSS_SNAPSHOT_STATE.PROCESSING_PREFINALCOMMIT;
pub const VSS_SS_PREFINALCOMMITTED = VSS_SNAPSHOT_STATE.PREFINALCOMMITTED;
pub const VSS_SS_PROCESSING_POSTFINALCOMMIT = VSS_SNAPSHOT_STATE.PROCESSING_POSTFINALCOMMIT;
pub const VSS_SS_CREATED = VSS_SNAPSHOT_STATE.CREATED;
pub const VSS_SS_ABORTED = VSS_SNAPSHOT_STATE.ABORTED;
pub const VSS_SS_DELETED = VSS_SNAPSHOT_STATE.DELETED;
pub const VSS_SS_POSTCOMMITTED = VSS_SNAPSHOT_STATE.POSTCOMMITTED;
pub const VSS_SS_COUNT = VSS_SNAPSHOT_STATE.COUNT;

pub const VSS_VOLUME_SNAPSHOT_ATTRIBUTES = enum(i32) {
    PERSISTENT = 1,
    NO_AUTORECOVERY = 2,
    CLIENT_ACCESSIBLE = 4,
    NO_AUTO_RELEASE = 8,
    NO_WRITERS = 16,
    TRANSPORTABLE = 32,
    NOT_SURFACED = 64,
    NOT_TRANSACTED = 128,
    HARDWARE_ASSISTED = 65536,
    DIFFERENTIAL = 131072,
    PLEX = 262144,
    IMPORTED = 524288,
    EXPOSED_LOCALLY = 1048576,
    EXPOSED_REMOTELY = 2097152,
    AUTORECOVER = 4194304,
    ROLLBACK_RECOVERY = 8388608,
    DELAYED_POSTSNAPSHOT = 16777216,
    TXF_RECOVERY = 33554432,
    FILE_SHARE = 67108864,
};
pub const VSS_VOLSNAP_ATTR_PERSISTENT = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.PERSISTENT;
pub const VSS_VOLSNAP_ATTR_NO_AUTORECOVERY = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.NO_AUTORECOVERY;
pub const VSS_VOLSNAP_ATTR_CLIENT_ACCESSIBLE = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.CLIENT_ACCESSIBLE;
pub const VSS_VOLSNAP_ATTR_NO_AUTO_RELEASE = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.NO_AUTO_RELEASE;
pub const VSS_VOLSNAP_ATTR_NO_WRITERS = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.NO_WRITERS;
pub const VSS_VOLSNAP_ATTR_TRANSPORTABLE = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.TRANSPORTABLE;
pub const VSS_VOLSNAP_ATTR_NOT_SURFACED = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.NOT_SURFACED;
pub const VSS_VOLSNAP_ATTR_NOT_TRANSACTED = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.NOT_TRANSACTED;
pub const VSS_VOLSNAP_ATTR_HARDWARE_ASSISTED = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.HARDWARE_ASSISTED;
pub const VSS_VOLSNAP_ATTR_DIFFERENTIAL = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.DIFFERENTIAL;
pub const VSS_VOLSNAP_ATTR_PLEX = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.PLEX;
pub const VSS_VOLSNAP_ATTR_IMPORTED = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.IMPORTED;
pub const VSS_VOLSNAP_ATTR_EXPOSED_LOCALLY = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.EXPOSED_LOCALLY;
pub const VSS_VOLSNAP_ATTR_EXPOSED_REMOTELY = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.EXPOSED_REMOTELY;
pub const VSS_VOLSNAP_ATTR_AUTORECOVER = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.AUTORECOVER;
pub const VSS_VOLSNAP_ATTR_ROLLBACK_RECOVERY = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.ROLLBACK_RECOVERY;
pub const VSS_VOLSNAP_ATTR_DELAYED_POSTSNAPSHOT = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.DELAYED_POSTSNAPSHOT;
pub const VSS_VOLSNAP_ATTR_TXF_RECOVERY = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.TXF_RECOVERY;
pub const VSS_VOLSNAP_ATTR_FILE_SHARE = VSS_VOLUME_SNAPSHOT_ATTRIBUTES.FILE_SHARE;

pub const VSS_SNAPSHOT_CONTEXT = enum(i32) {
    BACKUP = 0,
    FILE_SHARE_BACKUP = 16,
    NAS_ROLLBACK = 25,
    APP_ROLLBACK = 9,
    CLIENT_ACCESSIBLE = 29,
    CLIENT_ACCESSIBLE_WRITERS = 13,
    ALL = -1,
};
pub const VSS_CTX_BACKUP = VSS_SNAPSHOT_CONTEXT.BACKUP;
pub const VSS_CTX_FILE_SHARE_BACKUP = VSS_SNAPSHOT_CONTEXT.FILE_SHARE_BACKUP;
pub const VSS_CTX_NAS_ROLLBACK = VSS_SNAPSHOT_CONTEXT.NAS_ROLLBACK;
pub const VSS_CTX_APP_ROLLBACK = VSS_SNAPSHOT_CONTEXT.APP_ROLLBACK;
pub const VSS_CTX_CLIENT_ACCESSIBLE = VSS_SNAPSHOT_CONTEXT.CLIENT_ACCESSIBLE;
pub const VSS_CTX_CLIENT_ACCESSIBLE_WRITERS = VSS_SNAPSHOT_CONTEXT.CLIENT_ACCESSIBLE_WRITERS;
pub const VSS_CTX_ALL = VSS_SNAPSHOT_CONTEXT.ALL;

pub const VSS_PROVIDER_CAPABILITIES = enum(i32) {
    LEGACY = 1,
    COMPLIANT = 2,
    LUN_REPOINT = 4,
    LUN_RESYNC = 8,
    OFFLINE_CREATION = 16,
    MULTIPLE_IMPORT = 32,
    RECYCLING = 64,
    PLEX = 128,
    DIFFERENTIAL = 256,
    CLUSTERED = 512,
};
pub const VSS_PRV_CAPABILITY_LEGACY = VSS_PROVIDER_CAPABILITIES.LEGACY;
pub const VSS_PRV_CAPABILITY_COMPLIANT = VSS_PROVIDER_CAPABILITIES.COMPLIANT;
pub const VSS_PRV_CAPABILITY_LUN_REPOINT = VSS_PROVIDER_CAPABILITIES.LUN_REPOINT;
pub const VSS_PRV_CAPABILITY_LUN_RESYNC = VSS_PROVIDER_CAPABILITIES.LUN_RESYNC;
pub const VSS_PRV_CAPABILITY_OFFLINE_CREATION = VSS_PROVIDER_CAPABILITIES.OFFLINE_CREATION;
pub const VSS_PRV_CAPABILITY_MULTIPLE_IMPORT = VSS_PROVIDER_CAPABILITIES.MULTIPLE_IMPORT;
pub const VSS_PRV_CAPABILITY_RECYCLING = VSS_PROVIDER_CAPABILITIES.RECYCLING;
pub const VSS_PRV_CAPABILITY_PLEX = VSS_PROVIDER_CAPABILITIES.PLEX;
pub const VSS_PRV_CAPABILITY_DIFFERENTIAL = VSS_PROVIDER_CAPABILITIES.DIFFERENTIAL;
pub const VSS_PRV_CAPABILITY_CLUSTERED = VSS_PROVIDER_CAPABILITIES.CLUSTERED;

pub const VSS_HARDWARE_OPTIONS = enum(i32) {
    BREAKEX_FLAG_MASK_LUNS = 1,
    BREAKEX_FLAG_MAKE_READ_WRITE = 2,
    BREAKEX_FLAG_REVERT_IDENTITY_ALL = 4,
    BREAKEX_FLAG_REVERT_IDENTITY_NONE = 8,
    ONLUNSTATECHANGE_NOTIFY_READ_WRITE = 256,
    ONLUNSTATECHANGE_NOTIFY_LUN_PRE_RECOVERY = 512,
    ONLUNSTATECHANGE_NOTIFY_LUN_POST_RECOVERY = 1024,
    ONLUNSTATECHANGE_DO_MASK_LUNS = 2048,
};
pub const VSS_BREAKEX_FLAG_MASK_LUNS = VSS_HARDWARE_OPTIONS.BREAKEX_FLAG_MASK_LUNS;
pub const VSS_BREAKEX_FLAG_MAKE_READ_WRITE = VSS_HARDWARE_OPTIONS.BREAKEX_FLAG_MAKE_READ_WRITE;
pub const VSS_BREAKEX_FLAG_REVERT_IDENTITY_ALL = VSS_HARDWARE_OPTIONS.BREAKEX_FLAG_REVERT_IDENTITY_ALL;
pub const VSS_BREAKEX_FLAG_REVERT_IDENTITY_NONE = VSS_HARDWARE_OPTIONS.BREAKEX_FLAG_REVERT_IDENTITY_NONE;
pub const VSS_ONLUNSTATECHANGE_NOTIFY_READ_WRITE = VSS_HARDWARE_OPTIONS.ONLUNSTATECHANGE_NOTIFY_READ_WRITE;
pub const VSS_ONLUNSTATECHANGE_NOTIFY_LUN_PRE_RECOVERY = VSS_HARDWARE_OPTIONS.ONLUNSTATECHANGE_NOTIFY_LUN_PRE_RECOVERY;
pub const VSS_ONLUNSTATECHANGE_NOTIFY_LUN_POST_RECOVERY = VSS_HARDWARE_OPTIONS.ONLUNSTATECHANGE_NOTIFY_LUN_POST_RECOVERY;
pub const VSS_ONLUNSTATECHANGE_DO_MASK_LUNS = VSS_HARDWARE_OPTIONS.ONLUNSTATECHANGE_DO_MASK_LUNS;

pub const VSS_RECOVERY_OPTIONS = enum(i32) {
    REVERT_IDENTITY_ALL = 256,
    NO_VOLUME_CHECK = 512,
};
pub const VSS_RECOVERY_REVERT_IDENTITY_ALL = VSS_RECOVERY_OPTIONS.REVERT_IDENTITY_ALL;
pub const VSS_RECOVERY_NO_VOLUME_CHECK = VSS_RECOVERY_OPTIONS.NO_VOLUME_CHECK;

pub const VSS_WRITER_STATE = enum(i32) {
    UNKNOWN = 0,
    STABLE = 1,
    WAITING_FOR_FREEZE = 2,
    WAITING_FOR_THAW = 3,
    WAITING_FOR_POST_SNAPSHOT = 4,
    WAITING_FOR_BACKUP_COMPLETE = 5,
    FAILED_AT_IDENTIFY = 6,
    FAILED_AT_PREPARE_BACKUP = 7,
    FAILED_AT_PREPARE_SNAPSHOT = 8,
    FAILED_AT_FREEZE = 9,
    FAILED_AT_THAW = 10,
    FAILED_AT_POST_SNAPSHOT = 11,
    FAILED_AT_BACKUP_COMPLETE = 12,
    FAILED_AT_PRE_RESTORE = 13,
    FAILED_AT_POST_RESTORE = 14,
    FAILED_AT_BACKUPSHUTDOWN = 15,
    COUNT = 16,
};
pub const VSS_WS_UNKNOWN = VSS_WRITER_STATE.UNKNOWN;
pub const VSS_WS_STABLE = VSS_WRITER_STATE.STABLE;
pub const VSS_WS_WAITING_FOR_FREEZE = VSS_WRITER_STATE.WAITING_FOR_FREEZE;
pub const VSS_WS_WAITING_FOR_THAW = VSS_WRITER_STATE.WAITING_FOR_THAW;
pub const VSS_WS_WAITING_FOR_POST_SNAPSHOT = VSS_WRITER_STATE.WAITING_FOR_POST_SNAPSHOT;
pub const VSS_WS_WAITING_FOR_BACKUP_COMPLETE = VSS_WRITER_STATE.WAITING_FOR_BACKUP_COMPLETE;
pub const VSS_WS_FAILED_AT_IDENTIFY = VSS_WRITER_STATE.FAILED_AT_IDENTIFY;
pub const VSS_WS_FAILED_AT_PREPARE_BACKUP = VSS_WRITER_STATE.FAILED_AT_PREPARE_BACKUP;
pub const VSS_WS_FAILED_AT_PREPARE_SNAPSHOT = VSS_WRITER_STATE.FAILED_AT_PREPARE_SNAPSHOT;
pub const VSS_WS_FAILED_AT_FREEZE = VSS_WRITER_STATE.FAILED_AT_FREEZE;
pub const VSS_WS_FAILED_AT_THAW = VSS_WRITER_STATE.FAILED_AT_THAW;
pub const VSS_WS_FAILED_AT_POST_SNAPSHOT = VSS_WRITER_STATE.FAILED_AT_POST_SNAPSHOT;
pub const VSS_WS_FAILED_AT_BACKUP_COMPLETE = VSS_WRITER_STATE.FAILED_AT_BACKUP_COMPLETE;
pub const VSS_WS_FAILED_AT_PRE_RESTORE = VSS_WRITER_STATE.FAILED_AT_PRE_RESTORE;
pub const VSS_WS_FAILED_AT_POST_RESTORE = VSS_WRITER_STATE.FAILED_AT_POST_RESTORE;
pub const VSS_WS_FAILED_AT_BACKUPSHUTDOWN = VSS_WRITER_STATE.FAILED_AT_BACKUPSHUTDOWN;
pub const VSS_WS_COUNT = VSS_WRITER_STATE.COUNT;

pub const VSS_BACKUP_TYPE = enum(i32) {
    UNDEFINED = 0,
    FULL = 1,
    INCREMENTAL = 2,
    DIFFERENTIAL = 3,
    LOG = 4,
    COPY = 5,
    OTHER = 6,
};
pub const VSS_BT_UNDEFINED = VSS_BACKUP_TYPE.UNDEFINED;
pub const VSS_BT_FULL = VSS_BACKUP_TYPE.FULL;
pub const VSS_BT_INCREMENTAL = VSS_BACKUP_TYPE.INCREMENTAL;
pub const VSS_BT_DIFFERENTIAL = VSS_BACKUP_TYPE.DIFFERENTIAL;
pub const VSS_BT_LOG = VSS_BACKUP_TYPE.LOG;
pub const VSS_BT_COPY = VSS_BACKUP_TYPE.COPY;
pub const VSS_BT_OTHER = VSS_BACKUP_TYPE.OTHER;

pub const VSS_RESTORE_TYPE = enum(i32) {
    UNDEFINED = 0,
    BY_COPY = 1,
    IMPORT = 2,
    OTHER = 3,
};
pub const VSS_RTYPE_UNDEFINED = VSS_RESTORE_TYPE.UNDEFINED;
pub const VSS_RTYPE_BY_COPY = VSS_RESTORE_TYPE.BY_COPY;
pub const VSS_RTYPE_IMPORT = VSS_RESTORE_TYPE.IMPORT;
pub const VSS_RTYPE_OTHER = VSS_RESTORE_TYPE.OTHER;

pub const VSS_ROLLFORWARD_TYPE = enum(i32) {
    UNDEFINED = 0,
    NONE = 1,
    ALL = 2,
    PARTIAL = 3,
};
pub const VSS_RF_UNDEFINED = VSS_ROLLFORWARD_TYPE.UNDEFINED;
pub const VSS_RF_NONE = VSS_ROLLFORWARD_TYPE.NONE;
pub const VSS_RF_ALL = VSS_ROLLFORWARD_TYPE.ALL;
pub const VSS_RF_PARTIAL = VSS_ROLLFORWARD_TYPE.PARTIAL;

pub const VSS_PROVIDER_TYPE = enum(i32) {
    UNKNOWN = 0,
    SYSTEM = 1,
    SOFTWARE = 2,
    HARDWARE = 3,
    FILESHARE = 4,
};
pub const VSS_PROV_UNKNOWN = VSS_PROVIDER_TYPE.UNKNOWN;
pub const VSS_PROV_SYSTEM = VSS_PROVIDER_TYPE.SYSTEM;
pub const VSS_PROV_SOFTWARE = VSS_PROVIDER_TYPE.SOFTWARE;
pub const VSS_PROV_HARDWARE = VSS_PROVIDER_TYPE.HARDWARE;
pub const VSS_PROV_FILESHARE = VSS_PROVIDER_TYPE.FILESHARE;

pub const VSS_APPLICATION_LEVEL = enum(i32) {
    UNKNOWN = 0,
    SYSTEM = 1,
    BACK_END = 2,
    FRONT_END = 3,
    SYSTEM_RM = 4,
    AUTO = -1,
};
pub const VSS_APP_UNKNOWN = VSS_APPLICATION_LEVEL.UNKNOWN;
pub const VSS_APP_SYSTEM = VSS_APPLICATION_LEVEL.SYSTEM;
pub const VSS_APP_BACK_END = VSS_APPLICATION_LEVEL.BACK_END;
pub const VSS_APP_FRONT_END = VSS_APPLICATION_LEVEL.FRONT_END;
pub const VSS_APP_SYSTEM_RM = VSS_APPLICATION_LEVEL.SYSTEM_RM;
pub const VSS_APP_AUTO = VSS_APPLICATION_LEVEL.AUTO;

pub const VSS_SNAPSHOT_COMPATIBILITY = enum(i32) {
    DEFRAG = 1,
    CONTENTINDEX = 2,
};
pub const VSS_SC_DISABLE_DEFRAG = VSS_SNAPSHOT_COMPATIBILITY.DEFRAG;
pub const VSS_SC_DISABLE_CONTENTINDEX = VSS_SNAPSHOT_COMPATIBILITY.CONTENTINDEX;

pub const VSS_SNAPSHOT_PROPERTY_ID = enum(i32) {
    UNKNOWN = 0,
    SNAPSHOT_ID = 1,
    SNAPSHOT_SET_ID = 2,
    SNAPSHOTS_COUNT = 3,
    SNAPSHOT_DEVICE = 4,
    ORIGINAL_VOLUME = 5,
    ORIGINATING_MACHINE = 6,
    SERVICE_MACHINE = 7,
    EXPOSED_NAME = 8,
    EXPOSED_PATH = 9,
    PROVIDER_ID = 10,
    SNAPSHOT_ATTRIBUTES = 11,
    CREATION_TIMESTAMP = 12,
    STATUS = 13,
};
pub const VSS_SPROPID_UNKNOWN = VSS_SNAPSHOT_PROPERTY_ID.UNKNOWN;
pub const VSS_SPROPID_SNAPSHOT_ID = VSS_SNAPSHOT_PROPERTY_ID.SNAPSHOT_ID;
pub const VSS_SPROPID_SNAPSHOT_SET_ID = VSS_SNAPSHOT_PROPERTY_ID.SNAPSHOT_SET_ID;
pub const VSS_SPROPID_SNAPSHOTS_COUNT = VSS_SNAPSHOT_PROPERTY_ID.SNAPSHOTS_COUNT;
pub const VSS_SPROPID_SNAPSHOT_DEVICE = VSS_SNAPSHOT_PROPERTY_ID.SNAPSHOT_DEVICE;
pub const VSS_SPROPID_ORIGINAL_VOLUME = VSS_SNAPSHOT_PROPERTY_ID.ORIGINAL_VOLUME;
pub const VSS_SPROPID_ORIGINATING_MACHINE = VSS_SNAPSHOT_PROPERTY_ID.ORIGINATING_MACHINE;
pub const VSS_SPROPID_SERVICE_MACHINE = VSS_SNAPSHOT_PROPERTY_ID.SERVICE_MACHINE;
pub const VSS_SPROPID_EXPOSED_NAME = VSS_SNAPSHOT_PROPERTY_ID.EXPOSED_NAME;
pub const VSS_SPROPID_EXPOSED_PATH = VSS_SNAPSHOT_PROPERTY_ID.EXPOSED_PATH;
pub const VSS_SPROPID_PROVIDER_ID = VSS_SNAPSHOT_PROPERTY_ID.PROVIDER_ID;
pub const VSS_SPROPID_SNAPSHOT_ATTRIBUTES = VSS_SNAPSHOT_PROPERTY_ID.SNAPSHOT_ATTRIBUTES;
pub const VSS_SPROPID_CREATION_TIMESTAMP = VSS_SNAPSHOT_PROPERTY_ID.CREATION_TIMESTAMP;
pub const VSS_SPROPID_STATUS = VSS_SNAPSHOT_PROPERTY_ID.STATUS;

pub const VSS_FILE_SPEC_BACKUP_TYPE = enum(i32) {
    FULL_BACKUP_REQUIRED = 1,
    DIFFERENTIAL_BACKUP_REQUIRED = 2,
    INCREMENTAL_BACKUP_REQUIRED = 4,
    LOG_BACKUP_REQUIRED = 8,
    FULL_SNAPSHOT_REQUIRED = 256,
    DIFFERENTIAL_SNAPSHOT_REQUIRED = 512,
    INCREMENTAL_SNAPSHOT_REQUIRED = 1024,
    LOG_SNAPSHOT_REQUIRED = 2048,
    CREATED_DURING_BACKUP = 65536,
    ALL_BACKUP_REQUIRED = 15,
    ALL_SNAPSHOT_REQUIRED = 3840,
};
pub const VSS_FSBT_FULL_BACKUP_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.FULL_BACKUP_REQUIRED;
pub const VSS_FSBT_DIFFERENTIAL_BACKUP_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.DIFFERENTIAL_BACKUP_REQUIRED;
pub const VSS_FSBT_INCREMENTAL_BACKUP_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.INCREMENTAL_BACKUP_REQUIRED;
pub const VSS_FSBT_LOG_BACKUP_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.LOG_BACKUP_REQUIRED;
pub const VSS_FSBT_FULL_SNAPSHOT_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.FULL_SNAPSHOT_REQUIRED;
pub const VSS_FSBT_DIFFERENTIAL_SNAPSHOT_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.DIFFERENTIAL_SNAPSHOT_REQUIRED;
pub const VSS_FSBT_INCREMENTAL_SNAPSHOT_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.INCREMENTAL_SNAPSHOT_REQUIRED;
pub const VSS_FSBT_LOG_SNAPSHOT_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.LOG_SNAPSHOT_REQUIRED;
pub const VSS_FSBT_CREATED_DURING_BACKUP = VSS_FILE_SPEC_BACKUP_TYPE.CREATED_DURING_BACKUP;
pub const VSS_FSBT_ALL_BACKUP_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.ALL_BACKUP_REQUIRED;
pub const VSS_FSBT_ALL_SNAPSHOT_REQUIRED = VSS_FILE_SPEC_BACKUP_TYPE.ALL_SNAPSHOT_REQUIRED;

pub const VSS_BACKUP_SCHEMA = enum(i32) {
    UNDEFINED = 0,
    DIFFERENTIAL = 1,
    INCREMENTAL = 2,
    EXCLUSIVE_INCREMENTAL_DIFFERENTIAL = 4,
    LOG = 8,
    COPY = 16,
    TIMESTAMPED = 32,
    LAST_MODIFY = 64,
    LSN = 128,
    WRITER_SUPPORTS_NEW_TARGET = 256,
    WRITER_SUPPORTS_RESTORE_WITH_MOVE = 512,
    INDEPENDENT_SYSTEM_STATE = 1024,
    ROLLFORWARD_RESTORE = 4096,
    RESTORE_RENAME = 8192,
    AUTHORITATIVE_RESTORE = 16384,
    WRITER_SUPPORTS_PARALLEL_RESTORES = 32768,
};
pub const VSS_BS_UNDEFINED = VSS_BACKUP_SCHEMA.UNDEFINED;
pub const VSS_BS_DIFFERENTIAL = VSS_BACKUP_SCHEMA.DIFFERENTIAL;
pub const VSS_BS_INCREMENTAL = VSS_BACKUP_SCHEMA.INCREMENTAL;
pub const VSS_BS_EXCLUSIVE_INCREMENTAL_DIFFERENTIAL = VSS_BACKUP_SCHEMA.EXCLUSIVE_INCREMENTAL_DIFFERENTIAL;
pub const VSS_BS_LOG = VSS_BACKUP_SCHEMA.LOG;
pub const VSS_BS_COPY = VSS_BACKUP_SCHEMA.COPY;
pub const VSS_BS_TIMESTAMPED = VSS_BACKUP_SCHEMA.TIMESTAMPED;
pub const VSS_BS_LAST_MODIFY = VSS_BACKUP_SCHEMA.LAST_MODIFY;
pub const VSS_BS_LSN = VSS_BACKUP_SCHEMA.LSN;
pub const VSS_BS_WRITER_SUPPORTS_NEW_TARGET = VSS_BACKUP_SCHEMA.WRITER_SUPPORTS_NEW_TARGET;
pub const VSS_BS_WRITER_SUPPORTS_RESTORE_WITH_MOVE = VSS_BACKUP_SCHEMA.WRITER_SUPPORTS_RESTORE_WITH_MOVE;
pub const VSS_BS_INDEPENDENT_SYSTEM_STATE = VSS_BACKUP_SCHEMA.INDEPENDENT_SYSTEM_STATE;
pub const VSS_BS_ROLLFORWARD_RESTORE = VSS_BACKUP_SCHEMA.ROLLFORWARD_RESTORE;
pub const VSS_BS_RESTORE_RENAME = VSS_BACKUP_SCHEMA.RESTORE_RENAME;
pub const VSS_BS_AUTHORITATIVE_RESTORE = VSS_BACKUP_SCHEMA.AUTHORITATIVE_RESTORE;
pub const VSS_BS_WRITER_SUPPORTS_PARALLEL_RESTORES = VSS_BACKUP_SCHEMA.WRITER_SUPPORTS_PARALLEL_RESTORES;

pub const VSS_SNAPSHOT_PROP = extern struct {
    m_SnapshotId: Guid,
    m_SnapshotSetId: Guid,
    m_lSnapshotsCount: i32,
    m_pwszSnapshotDeviceObject: ?*u16,
    m_pwszOriginalVolumeName: ?*u16,
    m_pwszOriginatingMachine: ?*u16,
    m_pwszServiceMachine: ?*u16,
    m_pwszExposedName: ?*u16,
    m_pwszExposedPath: ?*u16,
    m_ProviderId: Guid,
    m_lSnapshotAttributes: i32,
    m_tsCreationTimestamp: i64,
    m_eStatus: VSS_SNAPSHOT_STATE,
};

pub const VSS_PROVIDER_PROP = extern struct {
    m_ProviderId: Guid,
    m_pwszProviderName: ?*u16,
    m_eProviderType: VSS_PROVIDER_TYPE,
    m_pwszProviderVersion: ?*u16,
    m_ProviderVersionId: Guid,
    m_ClassId: Guid,
};

pub const VSS_OBJECT_UNION = extern union {
    Snap: VSS_SNAPSHOT_PROP,
    Prov: VSS_PROVIDER_PROP,
};

pub const VSS_OBJECT_PROP = extern struct {
    Type: VSS_OBJECT_TYPE,
    Obj: VSS_OBJECT_UNION,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IVssEnumObject_Value = Guid.initString("ae1c7110-2f60-11d3-8a39-00c04f72d8e3");
pub const IID_IVssEnumObject = &IID_IVssEnumObject_Value;
pub const IVssEnumObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IVssEnumObject,
            celt: u32,
            rgelt: [*]VSS_OBJECT_PROP,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IVssEnumObject,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IVssEnumObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IVssEnumObject,
            ppenum: ?*?*IVssEnumObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]VSS_OBJECT_PROP, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IVssEnumObject.VTable, @ptrCast(self.vtable)).Next(@as(*const IVssEnumObject, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IVssEnumObject.VTable, @ptrCast(self.vtable)).Skip(@as(*const IVssEnumObject, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IVssEnumObject.VTable, @ptrCast(self.vtable)).Reset(@as(*const IVssEnumObject, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IVssEnumObject) HRESULT {
                return @as(*const IVssEnumObject.VTable, @ptrCast(self.vtable)).Clone(@as(*const IVssEnumObject, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IVssAsync_Value = Guid.initString("507c37b4-cf5b-4e95-b0af-14eb9767467e");
pub const IID_IVssAsync = &IID_IVssAsync_Value;
pub const IVssAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Cancel: *const fn (
            self: *const IVssAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Wait: *const fn (
            self: *const IVssAsync,
            dw_milliseconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryStatus: *const fn (
            self: *const IVssAsync,
            p_hr_result: ?*HRESULT,
            p_reserved: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IVssAsync.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IVssAsync, @ptrCast(self)));
            }
            pub inline fn wait(self: *const T, dw_milliseconds_: u32) HRESULT {
                return @as(*const IVssAsync.VTable, @ptrCast(self.vtable)).Wait(@as(*const IVssAsync, @ptrCast(self)), dw_milliseconds_);
            }
            pub inline fn queryStatus(self: *const T, p_hr_result_: ?*HRESULT, p_reserved_: ?*i32) HRESULT {
                return @as(*const IVssAsync.VTable, @ptrCast(self.vtable)).QueryStatus(@as(*const IVssAsync, @ptrCast(self)), p_hr_result_, p_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const VSS_USAGE_TYPE = enum(i32) {
    UNDEFINED = 0,
    BOOTABLESYSTEMSTATE = 1,
    SYSTEMSERVICE = 2,
    USERDATA = 3,
    OTHER = 4,
};
pub const VSS_UT_UNDEFINED = VSS_USAGE_TYPE.UNDEFINED;
pub const VSS_UT_BOOTABLESYSTEMSTATE = VSS_USAGE_TYPE.BOOTABLESYSTEMSTATE;
pub const VSS_UT_SYSTEMSERVICE = VSS_USAGE_TYPE.SYSTEMSERVICE;
pub const VSS_UT_USERDATA = VSS_USAGE_TYPE.USERDATA;
pub const VSS_UT_OTHER = VSS_USAGE_TYPE.OTHER;

pub const VSS_SOURCE_TYPE = enum(i32) {
    UNDEFINED = 0,
    TRANSACTEDDB = 1,
    NONTRANSACTEDDB = 2,
    OTHER = 3,
};
pub const VSS_ST_UNDEFINED = VSS_SOURCE_TYPE.UNDEFINED;
pub const VSS_ST_TRANSACTEDDB = VSS_SOURCE_TYPE.TRANSACTEDDB;
pub const VSS_ST_NONTRANSACTEDDB = VSS_SOURCE_TYPE.NONTRANSACTEDDB;
pub const VSS_ST_OTHER = VSS_SOURCE_TYPE.OTHER;

pub const VSS_RESTOREMETHOD_ENUM = enum(i32) {
    UNDEFINED = 0,
    RESTORE_IF_NOT_THERE = 1,
    RESTORE_IF_CAN_REPLACE = 2,
    STOP_RESTORE_START = 3,
    RESTORE_TO_ALTERNATE_LOCATION = 4,
    RESTORE_AT_REBOOT = 5,
    RESTORE_AT_REBOOT_IF_CANNOT_REPLACE = 6,
    CUSTOM = 7,
    RESTORE_STOP_START = 8,
};
pub const VSS_RME_UNDEFINED = VSS_RESTOREMETHOD_ENUM.UNDEFINED;
pub const VSS_RME_RESTORE_IF_NOT_THERE = VSS_RESTOREMETHOD_ENUM.RESTORE_IF_NOT_THERE;
pub const VSS_RME_RESTORE_IF_CAN_REPLACE = VSS_RESTOREMETHOD_ENUM.RESTORE_IF_CAN_REPLACE;
pub const VSS_RME_STOP_RESTORE_START = VSS_RESTOREMETHOD_ENUM.STOP_RESTORE_START;
pub const VSS_RME_RESTORE_TO_ALTERNATE_LOCATION = VSS_RESTOREMETHOD_ENUM.RESTORE_TO_ALTERNATE_LOCATION;
pub const VSS_RME_RESTORE_AT_REBOOT = VSS_RESTOREMETHOD_ENUM.RESTORE_AT_REBOOT;
pub const VSS_RME_RESTORE_AT_REBOOT_IF_CANNOT_REPLACE = VSS_RESTOREMETHOD_ENUM.RESTORE_AT_REBOOT_IF_CANNOT_REPLACE;
pub const VSS_RME_CUSTOM = VSS_RESTOREMETHOD_ENUM.CUSTOM;
pub const VSS_RME_RESTORE_STOP_START = VSS_RESTOREMETHOD_ENUM.RESTORE_STOP_START;

pub const VSS_WRITERRESTORE_ENUM = enum(i32) {
    UNDEFINED = 0,
    NEVER = 1,
    IF_REPLACE_FAILS = 2,
    ALWAYS = 3,
};
pub const VSS_WRE_UNDEFINED = VSS_WRITERRESTORE_ENUM.UNDEFINED;
pub const VSS_WRE_NEVER = VSS_WRITERRESTORE_ENUM.NEVER;
pub const VSS_WRE_IF_REPLACE_FAILS = VSS_WRITERRESTORE_ENUM.IF_REPLACE_FAILS;
pub const VSS_WRE_ALWAYS = VSS_WRITERRESTORE_ENUM.ALWAYS;

pub const VSS_COMPONENT_TYPE = enum(i32) {
    UNDEFINED = 0,
    DATABASE = 1,
    FILEGROUP = 2,
};
pub const VSS_CT_UNDEFINED = VSS_COMPONENT_TYPE.UNDEFINED;
pub const VSS_CT_DATABASE = VSS_COMPONENT_TYPE.DATABASE;
pub const VSS_CT_FILEGROUP = VSS_COMPONENT_TYPE.FILEGROUP;

pub const VSS_ALTERNATE_WRITER_STATE = enum(i32) {
    UNDEFINED = 0,
    NO_ALTERNATE_WRITER = 1,
    ALTERNATE_WRITER_EXISTS = 2,
    THIS_IS_ALTERNATE_WRITER = 3,
};
pub const VSS_AWS_UNDEFINED = VSS_ALTERNATE_WRITER_STATE.UNDEFINED;
pub const VSS_AWS_NO_ALTERNATE_WRITER = VSS_ALTERNATE_WRITER_STATE.NO_ALTERNATE_WRITER;
pub const VSS_AWS_ALTERNATE_WRITER_EXISTS = VSS_ALTERNATE_WRITER_STATE.ALTERNATE_WRITER_EXISTS;
pub const VSS_AWS_THIS_IS_ALTERNATE_WRITER = VSS_ALTERNATE_WRITER_STATE.THIS_IS_ALTERNATE_WRITER;

pub const VSS_SUBSCRIBE_MASK = enum(i32) {
    POST_SNAPSHOT_FLAG = 1,
    BACKUP_EVENTS_FLAG = 2,
    RESTORE_EVENTS_FLAG = 4,
    IO_THROTTLING_FLAG = 8,
    ALL_FLAGS = -1,
};
pub const VSS_SM_POST_SNAPSHOT_FLAG = VSS_SUBSCRIBE_MASK.POST_SNAPSHOT_FLAG;
pub const VSS_SM_BACKUP_EVENTS_FLAG = VSS_SUBSCRIBE_MASK.BACKUP_EVENTS_FLAG;
pub const VSS_SM_RESTORE_EVENTS_FLAG = VSS_SUBSCRIBE_MASK.RESTORE_EVENTS_FLAG;
pub const VSS_SM_IO_THROTTLING_FLAG = VSS_SUBSCRIBE_MASK.IO_THROTTLING_FLAG;
pub const VSS_SM_ALL_FLAGS = VSS_SUBSCRIBE_MASK.ALL_FLAGS;

pub const VSS_RESTORE_TARGET = enum(i32) {
    UNDEFINED = 0,
    ORIGINAL = 1,
    ALTERNATE = 2,
    DIRECTED = 3,
    ORIGINAL_LOCATION = 4,
};
pub const VSS_RT_UNDEFINED = VSS_RESTORE_TARGET.UNDEFINED;
pub const VSS_RT_ORIGINAL = VSS_RESTORE_TARGET.ORIGINAL;
pub const VSS_RT_ALTERNATE = VSS_RESTORE_TARGET.ALTERNATE;
pub const VSS_RT_DIRECTED = VSS_RESTORE_TARGET.DIRECTED;
pub const VSS_RT_ORIGINAL_LOCATION = VSS_RESTORE_TARGET.ORIGINAL_LOCATION;

pub const VSS_FILE_RESTORE_STATUS = enum(i32) {
    UNDEFINED = 0,
    NONE = 1,
    ALL = 2,
    FAILED = 3,
};
pub const VSS_RS_UNDEFINED = VSS_FILE_RESTORE_STATUS.UNDEFINED;
pub const VSS_RS_NONE = VSS_FILE_RESTORE_STATUS.NONE;
pub const VSS_RS_ALL = VSS_FILE_RESTORE_STATUS.ALL;
pub const VSS_RS_FAILED = VSS_FILE_RESTORE_STATUS.FAILED;

pub const VSS_COMPONENT_FLAGS = enum(i32) {
    BACKUP_RECOVERY = 1,
    APP_ROLLBACK_RECOVERY = 2,
    NOT_SYSTEM_STATE = 4,
};
pub const VSS_CF_BACKUP_RECOVERY = VSS_COMPONENT_FLAGS.BACKUP_RECOVERY;
pub const VSS_CF_APP_ROLLBACK_RECOVERY = VSS_COMPONENT_FLAGS.APP_ROLLBACK_RECOVERY;
pub const VSS_CF_NOT_SYSTEM_STATE = VSS_COMPONENT_FLAGS.NOT_SYSTEM_STATE;

pub const IVssExamineWriterMetadata = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const IVssWMFiledesc = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPath: *const fn (
            self: *const IVssWMFiledesc,
            pbstr_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilespec: *const fn (
            self: *const IVssWMFiledesc,
            pbstr_filespec: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecursive: *const fn (
            self: *const IVssWMFiledesc,
            pb_recursive: ?*bool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlternateLocation: *const fn (
            self: *const IVssWMFiledesc,
            pbstr_alternate_location: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackupTypeMask: *const fn (
            self: *const IVssWMFiledesc,
            pdw_type_mask: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPath(self: *const T, pbstr_path_: ?*?BSTR) HRESULT {
                return @as(*const IVssWMFiledesc.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IVssWMFiledesc, @ptrCast(self)), pbstr_path_);
            }
            pub inline fn getFilespec(self: *const T, pbstr_filespec_: ?*?BSTR) HRESULT {
                return @as(*const IVssWMFiledesc.VTable, @ptrCast(self.vtable)).GetFilespec(@as(*const IVssWMFiledesc, @ptrCast(self)), pbstr_filespec_);
            }
            pub inline fn getRecursive(self: *const T, pb_recursive_: ?*bool) HRESULT {
                return @as(*const IVssWMFiledesc.VTable, @ptrCast(self.vtable)).GetRecursive(@as(*const IVssWMFiledesc, @ptrCast(self)), pb_recursive_);
            }
            pub inline fn getAlternateLocation(self: *const T, pbstr_alternate_location_: ?*?BSTR) HRESULT {
                return @as(*const IVssWMFiledesc.VTable, @ptrCast(self.vtable)).GetAlternateLocation(@as(*const IVssWMFiledesc, @ptrCast(self)), pbstr_alternate_location_);
            }
            pub inline fn getBackupTypeMask(self: *const T, pdw_type_mask_: ?*u32) HRESULT {
                return @as(*const IVssWMFiledesc.VTable, @ptrCast(self.vtable)).GetBackupTypeMask(@as(*const IVssWMFiledesc, @ptrCast(self)), pdw_type_mask_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IVssWMDependency = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWriterId: *const fn (
            self: *const IVssWMDependency,
            p_writer_id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogicalPath: *const fn (
            self: *const IVssWMDependency,
            pbstr_logical_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentName: *const fn (
            self: *const IVssWMDependency,
            pbstr_component_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getWriterId(self: *const T, p_writer_id_: ?*Guid) HRESULT {
                return @as(*const IVssWMDependency.VTable, @ptrCast(self.vtable)).GetWriterId(@as(*const IVssWMDependency, @ptrCast(self)), p_writer_id_);
            }
            pub inline fn getLogicalPath(self: *const T, pbstr_logical_path_: ?*?BSTR) HRESULT {
                return @as(*const IVssWMDependency.VTable, @ptrCast(self.vtable)).GetLogicalPath(@as(*const IVssWMDependency, @ptrCast(self)), pbstr_logical_path_);
            }
            pub inline fn getComponentName(self: *const T, pbstr_component_name_: ?*?BSTR) HRESULT {
                return @as(*const IVssWMDependency.VTable, @ptrCast(self.vtable)).GetComponentName(@as(*const IVssWMDependency, @ptrCast(self)), pbstr_component_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVssComponent_Value = Guid.initString("d2c72c96-c121-4518-b627-e5a93d010ead");
pub const IID_IVssComponent = &IID_IVssComponent_Value;
pub const IVssComponent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLogicalPath: *const fn (
            self: *const IVssComponent,
            pbstr_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentType: *const fn (
            self: *const IVssComponent,
            pct: ?*VSS_COMPONENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentName: *const fn (
            self: *const IVssComponent,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackupSucceeded: *const fn (
            self: *const IVssComponent,
            pb_succeeded: ?*bool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlternateLocationMappingCount: *const fn (
            self: *const IVssComponent,
            pc_mappings: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlternateLocationMapping: *const fn (
            self: *const IVssComponent,
            i_mapping: u32,
            pp_filedesc: ?*?*IVssWMFiledesc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackupMetadata: *const fn (
            self: *const IVssComponent,
            wsz_data: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackupMetadata: *const fn (
            self: *const IVssComponent,
            pbstr_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPartialFile: *const fn (
            self: *const IVssComponent,
            wsz_path: ?[*:0]const u16,
            wsz_filename: ?[*:0]const u16,
            wsz_ranges: ?[*:0]const u16,
            wsz_metadata: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartialFileCount: *const fn (
            self: *const IVssComponent,
            pc_partial_files: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartialFile: *const fn (
            self: *const IVssComponent,
            i_partial_file: u32,
            pbstr_path: ?*?BSTR,
            pbstr_filename: ?*?BSTR,
            pbstr_range: ?*?BSTR,
            pbstr_metadata: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSelectedForRestore: *const fn (
            self: *const IVssComponent,
            pb_selected_for_restore: ?*bool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdditionalRestores: *const fn (
            self: *const IVssComponent,
            pb_additional_restores: ?*bool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNewTargetCount: *const fn (
            self: *const IVssComponent,
            pc_new_target: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNewTarget: *const fn (
            self: *const IVssComponent,
            i_new_target: u32,
            pp_filedesc: ?*?*IVssWMFiledesc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDirectedTarget: *const fn (
            self: *const IVssComponent,
            wsz_source_path: ?[*:0]const u16,
            wsz_source_filename: ?[*:0]const u16,
            wsz_source_range_list: ?[*:0]const u16,
            wsz_destination_path: ?[*:0]const u16,
            wsz_destination_filename: ?[*:0]const u16,
            wsz_destination_range_list: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDirectedTargetCount: *const fn (
            self: *const IVssComponent,
            pc_directed_target: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDirectedTarget: *const fn (
            self: *const IVssComponent,
            i_directed_target: u32,
            pbstr_source_path: ?*?BSTR,
            pbstr_source_file_name: ?*?BSTR,
            pbstr_source_range_list: ?*?BSTR,
            pbstr_destination_path: ?*?BSTR,
            pbstr_destination_filename: ?*?BSTR,
            pbstr_destination_range_list: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRestoreMetadata: *const fn (
            self: *const IVssComponent,
            wsz_restore_metadata: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestoreMetadata: *const fn (
            self: *const IVssComponent,
            pbstr_restore_metadata: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRestoreTarget: *const fn (
            self: *const IVssComponent,
            target: VSS_RESTORE_TARGET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestoreTarget: *const fn (
            self: *const IVssComponent,
            p_target: ?*VSS_RESTORE_TARGET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreRestoreFailureMsg: *const fn (
            self: *const IVssComponent,
            wsz_pre_restore_failure_msg: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreRestoreFailureMsg: *const fn (
            self: *const IVssComponent,
            pbstr_pre_restore_failure_msg: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPostRestoreFailureMsg: *const fn (
            self: *const IVssComponent,
            wsz_post_restore_failure_msg: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostRestoreFailureMsg: *const fn (
            self: *const IVssComponent,
            pbstr_post_restore_failure_msg: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackupStamp: *const fn (
            self: *const IVssComponent,
            wsz_backup_stamp: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackupStamp: *const fn (
            self: *const IVssComponent,
            pbstr_backup_stamp: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviousBackupStamp: *const fn (
            self: *const IVssComponent,
            pbstr_backup_stamp: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackupOptions: *const fn (
            self: *const IVssComponent,
            pbstr_backup_options: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestoreOptions: *const fn (
            self: *const IVssComponent,
            pbstr_restore_options: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestoreSubcomponentCount: *const fn (
            self: *const IVssComponent,
            pc_restore_subcomponent: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestoreSubcomponent: *const fn (
            self: *const IVssComponent,
            i_component: u32,
            pbstr_logical_path: ?*?BSTR,
            pbstr_component_name: ?*?BSTR,
            pb_repair: ?*bool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileRestoreStatus: *const fn (
            self: *const IVssComponent,
            p_status: ?*VSS_FILE_RESTORE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDifferencedFilesByLastModifyTime: *const fn (
            self: *const IVssComponent,
            wsz_path: ?[*:0]const u16,
            wsz_filespec: ?[*:0]const u16,
            b_recursive: BOOL,
            ft_last_modify_time: FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDifferencedFilesByLastModifyLSN: *const fn (
            self: *const IVssComponent,
            wsz_path: ?[*:0]const u16,
            wsz_filespec: ?[*:0]const u16,
            b_recursive: BOOL,
            bstr_lsn_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDifferencedFilesCount: *const fn (
            self: *const IVssComponent,
            pc_differenced_files: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDifferencedFile: *const fn (
            self: *const IVssComponent,
            i_differenced_file: u32,
            pbstr_path: ?*?BSTR,
            pbstr_filespec: ?*?BSTR,
            pb_recursive: ?*BOOL,
            pbstr_lsn_string: ?*?BSTR,
            pft_last_modify_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLogicalPath(self: *const T, pbstr_path_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetLogicalPath(@as(*const IVssComponent, @ptrCast(self)), pbstr_path_);
            }
            pub inline fn getComponentType(self: *const T, pct_: ?*VSS_COMPONENT_TYPE) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetComponentType(@as(*const IVssComponent, @ptrCast(self)), pct_);
            }
            pub inline fn getComponentName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetComponentName(@as(*const IVssComponent, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getBackupSucceeded(self: *const T, pb_succeeded_: ?*bool) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetBackupSucceeded(@as(*const IVssComponent, @ptrCast(self)), pb_succeeded_);
            }
            pub inline fn getAlternateLocationMappingCount(self: *const T, pc_mappings_: ?*u32) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetAlternateLocationMappingCount(@as(*const IVssComponent, @ptrCast(self)), pc_mappings_);
            }
            pub inline fn getAlternateLocationMapping(self: *const T, i_mapping_: u32, pp_filedesc_: ?*?*IVssWMFiledesc) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetAlternateLocationMapping(@as(*const IVssComponent, @ptrCast(self)), i_mapping_, pp_filedesc_);
            }
            pub inline fn setBackupMetadata(self: *const T, wsz_data_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).SetBackupMetadata(@as(*const IVssComponent, @ptrCast(self)), wsz_data_);
            }
            pub inline fn getBackupMetadata(self: *const T, pbstr_data_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetBackupMetadata(@as(*const IVssComponent, @ptrCast(self)), pbstr_data_);
            }
            pub inline fn addPartialFile(self: *const T, wsz_path_: ?[*:0]const u16, wsz_filename_: ?[*:0]const u16, wsz_ranges_: ?[*:0]const u16, wsz_metadata_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).AddPartialFile(@as(*const IVssComponent, @ptrCast(self)), wsz_path_, wsz_filename_, wsz_ranges_, wsz_metadata_);
            }
            pub inline fn getPartialFileCount(self: *const T, pc_partial_files_: ?*u32) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetPartialFileCount(@as(*const IVssComponent, @ptrCast(self)), pc_partial_files_);
            }
            pub inline fn getPartialFile(self: *const T, i_partial_file_: u32, pbstr_path_: ?*?BSTR, pbstr_filename_: ?*?BSTR, pbstr_range_: ?*?BSTR, pbstr_metadata_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetPartialFile(@as(*const IVssComponent, @ptrCast(self)), i_partial_file_, pbstr_path_, pbstr_filename_, pbstr_range_, pbstr_metadata_);
            }
            pub inline fn isSelectedForRestore(self: *const T, pb_selected_for_restore_: ?*bool) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).IsSelectedForRestore(@as(*const IVssComponent, @ptrCast(self)), pb_selected_for_restore_);
            }
            pub inline fn getAdditionalRestores(self: *const T, pb_additional_restores_: ?*bool) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetAdditionalRestores(@as(*const IVssComponent, @ptrCast(self)), pb_additional_restores_);
            }
            pub inline fn getNewTargetCount(self: *const T, pc_new_target_: ?*u32) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetNewTargetCount(@as(*const IVssComponent, @ptrCast(self)), pc_new_target_);
            }
            pub inline fn getNewTarget(self: *const T, i_new_target_: u32, pp_filedesc_: ?*?*IVssWMFiledesc) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetNewTarget(@as(*const IVssComponent, @ptrCast(self)), i_new_target_, pp_filedesc_);
            }
            pub inline fn addDirectedTarget(self: *const T, wsz_source_path_: ?[*:0]const u16, wsz_source_filename_: ?[*:0]const u16, wsz_source_range_list_: ?[*:0]const u16, wsz_destination_path_: ?[*:0]const u16, wsz_destination_filename_: ?[*:0]const u16, wsz_destination_range_list_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).AddDirectedTarget(@as(*const IVssComponent, @ptrCast(self)), wsz_source_path_, wsz_source_filename_, wsz_source_range_list_, wsz_destination_path_, wsz_destination_filename_, wsz_destination_range_list_);
            }
            pub inline fn getDirectedTargetCount(self: *const T, pc_directed_target_: ?*u32) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetDirectedTargetCount(@as(*const IVssComponent, @ptrCast(self)), pc_directed_target_);
            }
            pub inline fn getDirectedTarget(self: *const T, i_directed_target_: u32, pbstr_source_path_: ?*?BSTR, pbstr_source_file_name_: ?*?BSTR, pbstr_source_range_list_: ?*?BSTR, pbstr_destination_path_: ?*?BSTR, pbstr_destination_filename_: ?*?BSTR, pbstr_destination_range_list_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetDirectedTarget(@as(*const IVssComponent, @ptrCast(self)), i_directed_target_, pbstr_source_path_, pbstr_source_file_name_, pbstr_source_range_list_, pbstr_destination_path_, pbstr_destination_filename_, pbstr_destination_range_list_);
            }
            pub inline fn setRestoreMetadata(self: *const T, wsz_restore_metadata_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).SetRestoreMetadata(@as(*const IVssComponent, @ptrCast(self)), wsz_restore_metadata_);
            }
            pub inline fn getRestoreMetadata(self: *const T, pbstr_restore_metadata_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetRestoreMetadata(@as(*const IVssComponent, @ptrCast(self)), pbstr_restore_metadata_);
            }
            pub inline fn setRestoreTarget(self: *const T, target_: VSS_RESTORE_TARGET) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).SetRestoreTarget(@as(*const IVssComponent, @ptrCast(self)), target_);
            }
            pub inline fn getRestoreTarget(self: *const T, p_target_: ?*VSS_RESTORE_TARGET) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetRestoreTarget(@as(*const IVssComponent, @ptrCast(self)), p_target_);
            }
            pub inline fn setPreRestoreFailureMsg(self: *const T, wsz_pre_restore_failure_msg_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).SetPreRestoreFailureMsg(@as(*const IVssComponent, @ptrCast(self)), wsz_pre_restore_failure_msg_);
            }
            pub inline fn getPreRestoreFailureMsg(self: *const T, pbstr_pre_restore_failure_msg_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetPreRestoreFailureMsg(@as(*const IVssComponent, @ptrCast(self)), pbstr_pre_restore_failure_msg_);
            }
            pub inline fn setPostRestoreFailureMsg(self: *const T, wsz_post_restore_failure_msg_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).SetPostRestoreFailureMsg(@as(*const IVssComponent, @ptrCast(self)), wsz_post_restore_failure_msg_);
            }
            pub inline fn getPostRestoreFailureMsg(self: *const T, pbstr_post_restore_failure_msg_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetPostRestoreFailureMsg(@as(*const IVssComponent, @ptrCast(self)), pbstr_post_restore_failure_msg_);
            }
            pub inline fn setBackupStamp(self: *const T, wsz_backup_stamp_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).SetBackupStamp(@as(*const IVssComponent, @ptrCast(self)), wsz_backup_stamp_);
            }
            pub inline fn getBackupStamp(self: *const T, pbstr_backup_stamp_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetBackupStamp(@as(*const IVssComponent, @ptrCast(self)), pbstr_backup_stamp_);
            }
            pub inline fn getPreviousBackupStamp(self: *const T, pbstr_backup_stamp_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetPreviousBackupStamp(@as(*const IVssComponent, @ptrCast(self)), pbstr_backup_stamp_);
            }
            pub inline fn getBackupOptions(self: *const T, pbstr_backup_options_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetBackupOptions(@as(*const IVssComponent, @ptrCast(self)), pbstr_backup_options_);
            }
            pub inline fn getRestoreOptions(self: *const T, pbstr_restore_options_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetRestoreOptions(@as(*const IVssComponent, @ptrCast(self)), pbstr_restore_options_);
            }
            pub inline fn getRestoreSubcomponentCount(self: *const T, pc_restore_subcomponent_: ?*u32) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetRestoreSubcomponentCount(@as(*const IVssComponent, @ptrCast(self)), pc_restore_subcomponent_);
            }
            pub inline fn getRestoreSubcomponent(self: *const T, i_component_: u32, pbstr_logical_path_: ?*?BSTR, pbstr_component_name_: ?*?BSTR, pb_repair_: ?*bool) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetRestoreSubcomponent(@as(*const IVssComponent, @ptrCast(self)), i_component_, pbstr_logical_path_, pbstr_component_name_, pb_repair_);
            }
            pub inline fn getFileRestoreStatus(self: *const T, p_status_: ?*VSS_FILE_RESTORE_STATUS) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetFileRestoreStatus(@as(*const IVssComponent, @ptrCast(self)), p_status_);
            }
            pub inline fn addDifferencedFilesByLastModifyTime(self: *const T, wsz_path_: ?[*:0]const u16, wsz_filespec_: ?[*:0]const u16, b_recursive_: BOOL, ft_last_modify_time_: FILETIME) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).AddDifferencedFilesByLastModifyTime(@as(*const IVssComponent, @ptrCast(self)), wsz_path_, wsz_filespec_, b_recursive_, ft_last_modify_time_);
            }
            pub inline fn addDifferencedFilesByLastModifyLSN(self: *const T, wsz_path_: ?[*:0]const u16, wsz_filespec_: ?[*:0]const u16, b_recursive_: BOOL, bstr_lsn_string_: ?BSTR) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).AddDifferencedFilesByLastModifyLSN(@as(*const IVssComponent, @ptrCast(self)), wsz_path_, wsz_filespec_, b_recursive_, bstr_lsn_string_);
            }
            pub inline fn getDifferencedFilesCount(self: *const T, pc_differenced_files_: ?*u32) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetDifferencedFilesCount(@as(*const IVssComponent, @ptrCast(self)), pc_differenced_files_);
            }
            pub inline fn getDifferencedFile(self: *const T, i_differenced_file_: u32, pbstr_path_: ?*?BSTR, pbstr_filespec_: ?*?BSTR, pb_recursive_: ?*BOOL, pbstr_lsn_string_: ?*?BSTR, pft_last_modify_time_: ?*FILETIME) HRESULT {
                return @as(*const IVssComponent.VTable, @ptrCast(self.vtable)).GetDifferencedFile(@as(*const IVssComponent, @ptrCast(self)), i_differenced_file_, pbstr_path_, pbstr_filespec_, pb_recursive_, pbstr_lsn_string_, pft_last_modify_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IVssWriterComponents = extern struct {
    pub const VTable = extern struct {
        GetComponentCount: *const fn (
            self: *const IVssWriterComponents,
            pc_components: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWriterInfo: *const fn (
            self: *const IVssWriterComponents,
            pid_instance: ?*Guid,
            pid_writer: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponent: *const fn (
            self: *const IVssWriterComponents,
            i_component: u32,
            pp_component: ?*?*IVssComponent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub inline fn getComponentCount(self: *const T, pc_components_: ?*u32) HRESULT {
                return @as(*const IVssWriterComponents.VTable, @ptrCast(self.vtable)).GetComponentCount(@as(*const IVssWriterComponents, @ptrCast(self)), pc_components_);
            }
            pub inline fn getWriterInfo(self: *const T, pid_instance_: ?*Guid, pid_writer_: ?*Guid) HRESULT {
                return @as(*const IVssWriterComponents.VTable, @ptrCast(self.vtable)).GetWriterInfo(@as(*const IVssWriterComponents, @ptrCast(self)), pid_instance_, pid_writer_);
            }
            pub inline fn getComponent(self: *const T, i_component_: u32, pp_component_: ?*?*IVssComponent) HRESULT {
                return @as(*const IVssWriterComponents.VTable, @ptrCast(self.vtable)).GetComponent(@as(*const IVssWriterComponents, @ptrCast(self)), i_component_, pp_component_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVssComponentEx_Value = Guid.initString("156c8b5e-f131-4bd7-9c97-d1923be7e1fa");
pub const IID_IVssComponentEx = &IID_IVssComponentEx_Value;
pub const IVssComponentEx = extern struct {
    pub const VTable = extern struct {
        base: IVssComponent.VTable,
        SetPrepareForBackupFailureMsg: *const fn (
            self: *const IVssComponentEx,
            wsz_failure_msg: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPostSnapshotFailureMsg: *const fn (
            self: *const IVssComponentEx,
            wsz_failure_msg: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrepareForBackupFailureMsg: *const fn (
            self: *const IVssComponentEx,
            pbstr_failure_msg: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostSnapshotFailureMsg: *const fn (
            self: *const IVssComponentEx,
            pbstr_failure_msg: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthoritativeRestore: *const fn (
            self: *const IVssComponentEx,
            pb_auth: ?*bool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRollForward: *const fn (
            self: *const IVssComponentEx,
            p_roll_type: ?*VSS_ROLLFORWARD_TYPE,
            pbstr_point: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestoreName: *const fn (
            self: *const IVssComponentEx,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IVssComponent.MethodMixin(T);
            pub inline fn setPrepareForBackupFailureMsg(self: *const T, wsz_failure_msg_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssComponentEx.VTable, @ptrCast(self.vtable)).SetPrepareForBackupFailureMsg(@as(*const IVssComponentEx, @ptrCast(self)), wsz_failure_msg_);
            }
            pub inline fn setPostSnapshotFailureMsg(self: *const T, wsz_failure_msg_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssComponentEx.VTable, @ptrCast(self.vtable)).SetPostSnapshotFailureMsg(@as(*const IVssComponentEx, @ptrCast(self)), wsz_failure_msg_);
            }
            pub inline fn getPrepareForBackupFailureMsg(self: *const T, pbstr_failure_msg_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponentEx.VTable, @ptrCast(self.vtable)).GetPrepareForBackupFailureMsg(@as(*const IVssComponentEx, @ptrCast(self)), pbstr_failure_msg_);
            }
            pub inline fn getPostSnapshotFailureMsg(self: *const T, pbstr_failure_msg_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponentEx.VTable, @ptrCast(self.vtable)).GetPostSnapshotFailureMsg(@as(*const IVssComponentEx, @ptrCast(self)), pbstr_failure_msg_);
            }
            pub inline fn getAuthoritativeRestore(self: *const T, pb_auth_: ?*bool) HRESULT {
                return @as(*const IVssComponentEx.VTable, @ptrCast(self.vtable)).GetAuthoritativeRestore(@as(*const IVssComponentEx, @ptrCast(self)), pb_auth_);
            }
            pub inline fn getRollForward(self: *const T, p_roll_type_: ?*VSS_ROLLFORWARD_TYPE, pbstr_point_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponentEx.VTable, @ptrCast(self.vtable)).GetRollForward(@as(*const IVssComponentEx, @ptrCast(self)), p_roll_type_, pbstr_point_);
            }
            pub inline fn getRestoreName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IVssComponentEx.VTable, @ptrCast(self.vtable)).GetRestoreName(@as(*const IVssComponentEx, @ptrCast(self)), pbstr_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVssComponentEx2_Value = Guid.initString("3b5be0f2-07a9-4e4b-bdd3-cfdc8e2c0d2d");
pub const IID_IVssComponentEx2 = &IID_IVssComponentEx2_Value;
pub const IVssComponentEx2 = extern struct {
    pub const VTable = extern struct {
        base: IVssComponentEx.VTable,
        SetFailure: *const fn (
            self: *const IVssComponentEx2,
            hr: HRESULT,
            hr_application: HRESULT,
            wsz_application_message: ?[*:0]const u16,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFailure: *const fn (
            self: *const IVssComponentEx2,
            phr: ?*HRESULT,
            phr_application: ?*HRESULT,
            pbstr_application_message: ?*?BSTR,
            pdw_reserved: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IVssComponentEx.MethodMixin(T);
            pub inline fn setFailure(self: *const T, hr_: HRESULT, hr_application_: HRESULT, wsz_application_message_: ?[*:0]const u16, dw_reserved_: u32) HRESULT {
                return @as(*const IVssComponentEx2.VTable, @ptrCast(self.vtable)).SetFailure(@as(*const IVssComponentEx2, @ptrCast(self)), hr_, hr_application_, wsz_application_message_, dw_reserved_);
            }
            pub inline fn getFailure(self: *const T, phr_: ?*HRESULT, phr_application_: ?*HRESULT, pbstr_application_message_: ?*?BSTR, pdw_reserved_: ?*u32) HRESULT {
                return @as(*const IVssComponentEx2.VTable, @ptrCast(self.vtable)).GetFailure(@as(*const IVssComponentEx2, @ptrCast(self)), phr_, phr_application_, pbstr_application_message_, pdw_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IVssCreateWriterMetadata = extern struct {
    pub const VTable = extern struct {
        AddIncludeFiles: *const fn (
            self: *const IVssCreateWriterMetadata,
            wsz_path: ?[*:0]const u16,
            wsz_filespec: ?[*:0]const u16,
            b_recursive: u8,
            wsz_alternate_location: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddExcludeFiles: *const fn (
            self: *const IVssCreateWriterMetadata,
            wsz_path: ?[*:0]const u16,
            wsz_filespec: ?[*:0]const u16,
            b_recursive: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddComponent: *const fn (
            self: *const IVssCreateWriterMetadata,
            ct: VSS_COMPONENT_TYPE,
            wsz_logical_path: ?[*:0]const u16,
            wsz_component_name: ?[*:0]const u16,
            wsz_caption: ?[*:0]const u16,
            pb_icon: ?*const u8,
            cb_icon: u32,
            b_restore_metadata: u8,
            b_notify_on_backup_complete: u8,
            b_selectable: u8,
            b_selectable_for_restore: u8,
            dw_component_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDatabaseFiles: *const fn (
            self: *const IVssCreateWriterMetadata,
            wsz_logical_path: ?[*:0]const u16,
            wsz_database_name: ?[*:0]const u16,
            wsz_path: ?[*:0]const u16,
            wsz_filespec: ?[*:0]const u16,
            dw_backup_type_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDatabaseLogFiles: *const fn (
            self: *const IVssCreateWriterMetadata,
            wsz_logical_path: ?[*:0]const u16,
            wsz_database_name: ?[*:0]const u16,
            wsz_path: ?[*:0]const u16,
            wsz_filespec: ?[*:0]const u16,
            dw_backup_type_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFilesToFileGroup: *const fn (
            self: *const IVssCreateWriterMetadata,
            wsz_logical_path: ?[*:0]const u16,
            wsz_group_name: ?[*:0]const u16,
            wsz_path: ?[*:0]const u16,
            wsz_filespec: ?[*:0]const u16,
            b_recursive: u8,
            wsz_alternate_location: ?[*:0]const u16,
            dw_backup_type_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRestoreMethod: *const fn (
            self: *const IVssCreateWriterMetadata,
            method: VSS_RESTOREMETHOD_ENUM,
            wsz_service: ?[*:0]const u16,
            wsz_user_procedure: ?[*:0]const u16,
            writer_restore: VSS_WRITERRESTORE_ENUM,
            b_reboot_required: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAlternateLocationMapping: *const fn (
            self: *const IVssCreateWriterMetadata,
            wsz_source_path: ?[*:0]const u16,
            wsz_source_filespec: ?[*:0]const u16,
            b_recursive: u8,
            wsz_destination: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddComponentDependency: *const fn (
            self: *const IVssCreateWriterMetadata,
            wsz_for_logical_path: ?[*:0]const u16,
            wsz_for_component_name: ?[*:0]const u16,
            on_writer_id: Guid,
            wsz_on_logical_path: ?[*:0]const u16,
            wsz_on_component_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackupSchema: *const fn (
            self: *const IVssCreateWriterMetadata,
            dw_schema_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocument: *const fn (
            self: *const IVssCreateWriterMetadata,
            p_doc: ?*?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAsXML: *const fn (
            self: *const IVssCreateWriterMetadata,
            pbstr_x_m_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub inline fn addIncludeFiles(self: *const T, wsz_path_: ?[*:0]const u16, wsz_filespec_: ?[*:0]const u16, b_recursive_: u8, wsz_alternate_location_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).AddIncludeFiles(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), wsz_path_, wsz_filespec_, b_recursive_, wsz_alternate_location_);
            }
            pub inline fn addExcludeFiles(self: *const T, wsz_path_: ?[*:0]const u16, wsz_filespec_: ?[*:0]const u16, b_recursive_: u8) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).AddExcludeFiles(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), wsz_path_, wsz_filespec_, b_recursive_);
            }
            pub inline fn addComponent(self: *const T, ct_: VSS_COMPONENT_TYPE, wsz_logical_path_: ?[*:0]const u16, wsz_component_name_: ?[*:0]const u16, wsz_caption_: ?[*:0]const u16, pb_icon_: ?*const u8, cb_icon_: u32, b_restore_metadata_: u8, b_notify_on_backup_complete_: u8, b_selectable_: u8, b_selectable_for_restore_: u8, dw_component_flags_: u32) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).AddComponent(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), ct_, wsz_logical_path_, wsz_component_name_, wsz_caption_, pb_icon_, cb_icon_, b_restore_metadata_, b_notify_on_backup_complete_, b_selectable_, b_selectable_for_restore_, dw_component_flags_);
            }
            pub inline fn addDatabaseFiles(self: *const T, wsz_logical_path_: ?[*:0]const u16, wsz_database_name_: ?[*:0]const u16, wsz_path_: ?[*:0]const u16, wsz_filespec_: ?[*:0]const u16, dw_backup_type_mask_: u32) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).AddDatabaseFiles(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), wsz_logical_path_, wsz_database_name_, wsz_path_, wsz_filespec_, dw_backup_type_mask_);
            }
            pub inline fn addDatabaseLogFiles(self: *const T, wsz_logical_path_: ?[*:0]const u16, wsz_database_name_: ?[*:0]const u16, wsz_path_: ?[*:0]const u16, wsz_filespec_: ?[*:0]const u16, dw_backup_type_mask_: u32) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).AddDatabaseLogFiles(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), wsz_logical_path_, wsz_database_name_, wsz_path_, wsz_filespec_, dw_backup_type_mask_);
            }
            pub inline fn addFilesToFileGroup(self: *const T, wsz_logical_path_: ?[*:0]const u16, wsz_group_name_: ?[*:0]const u16, wsz_path_: ?[*:0]const u16, wsz_filespec_: ?[*:0]const u16, b_recursive_: u8, wsz_alternate_location_: ?[*:0]const u16, dw_backup_type_mask_: u32) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).AddFilesToFileGroup(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), wsz_logical_path_, wsz_group_name_, wsz_path_, wsz_filespec_, b_recursive_, wsz_alternate_location_, dw_backup_type_mask_);
            }
            pub inline fn setRestoreMethod(self: *const T, method_: VSS_RESTOREMETHOD_ENUM, wsz_service_: ?[*:0]const u16, wsz_user_procedure_: ?[*:0]const u16, writer_restore_: VSS_WRITERRESTORE_ENUM, b_reboot_required_: u8) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).SetRestoreMethod(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), method_, wsz_service_, wsz_user_procedure_, writer_restore_, b_reboot_required_);
            }
            pub inline fn addAlternateLocationMapping(self: *const T, wsz_source_path_: ?[*:0]const u16, wsz_source_filespec_: ?[*:0]const u16, b_recursive_: u8, wsz_destination_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).AddAlternateLocationMapping(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), wsz_source_path_, wsz_source_filespec_, b_recursive_, wsz_destination_);
            }
            pub inline fn addComponentDependency(self: *const T, wsz_for_logical_path_: ?[*:0]const u16, wsz_for_component_name_: ?[*:0]const u16, on_writer_id_: Guid, wsz_on_logical_path_: ?[*:0]const u16, wsz_on_component_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).AddComponentDependency(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), wsz_for_logical_path_, wsz_for_component_name_, on_writer_id_, wsz_on_logical_path_, wsz_on_component_name_);
            }
            pub inline fn setBackupSchema(self: *const T, dw_schema_mask_: u32) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).SetBackupSchema(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), dw_schema_mask_);
            }
            pub inline fn getDocument(self: *const T, p_doc_: ?*?*IXMLDOMDocument) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).GetDocument(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), p_doc_);
            }
            pub inline fn saveAsXML(self: *const T, pbstr_x_m_l_: ?*?BSTR) HRESULT {
                return @as(*const IVssCreateWriterMetadata.VTable, @ptrCast(self.vtable)).SaveAsXML(@as(*const IVssCreateWriterMetadata, @ptrCast(self)), pbstr_x_m_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IVssWriterImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IVssWriterImpl,
            writer_id: Guid,
            wsz_writer_name: ?[*:0]const u16,
            wsz_writer_instance_name: ?[*:0]const u16,
            dw_major_version: u32,
            dw_minor_version: u32,
            ut: VSS_USAGE_TYPE,
            st: VSS_SOURCE_TYPE,
            n_level: VSS_APPLICATION_LEVEL,
            dw_timeout: u32,
            aws: VSS_ALTERNATE_WRITER_STATE,
            b_i_o_throttling_only: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Subscribe: *const fn (
            self: *const IVssWriterImpl,
            dw_subscribe_timeout: u32,
            dw_event_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unsubscribe: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetCurrentVolumeArray: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) ?*?PWSTR,
        GetCurrentVolumeCount: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetSnapshotDeviceName: *const fn (
            self: *const IVssWriterImpl,
            wsz_original_volume: ?[*:0]const u16,
            ppwsz_snapshot_device: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentSnapshotSetId: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) Guid,
        GetContext: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        GetCurrentLevel: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) VSS_APPLICATION_LEVEL,
        IsPathAffected: *const fn (
            self: *const IVssWriterImpl,
            wsz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) bool,
        IsBootableSystemStateBackedUp: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) bool,
        AreComponentsSelected: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) bool,
        GetBackupType: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) VSS_BACKUP_TYPE,
        GetRestoreType: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) VSS_RESTORE_TYPE,
        SetWriterFailure: *const fn (
            self: *const IVssWriterImpl,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPartialFileSupportEnabled: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) bool,
        InstallAlternateWriter: *const fn (
            self: *const IVssWriterImpl,
            id_writer: Guid,
            clsid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIdentityInformation: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) ?*IVssExamineWriterMetadata,
        SetWriterFailureEx: *const fn (
            self: *const IVssWriterImpl,
            hr: HRESULT,
            hr_application: HRESULT,
            wsz_application_message: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSessionId: *const fn (
            self: *const IVssWriterImpl,
            id_session: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsWriterShuttingDown: *const fn (
            self: *const IVssWriterImpl,
        ) callconv(@import("std").os.windows.WINAPI) bool,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, writer_id_: Guid, wsz_writer_name_: ?[*:0]const u16, wsz_writer_instance_name_: ?[*:0]const u16, dw_major_version_: u32, dw_minor_version_: u32, ut_: VSS_USAGE_TYPE, st_: VSS_SOURCE_TYPE, n_level_: VSS_APPLICATION_LEVEL, dw_timeout_: u32, aws_: VSS_ALTERNATE_WRITER_STATE, b_i_o_throttling_only_: u8) HRESULT {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IVssWriterImpl, @ptrCast(self)), writer_id_, wsz_writer_name_, wsz_writer_instance_name_, dw_major_version_, dw_minor_version_, ut_, st_, n_level_, dw_timeout_, aws_, b_i_o_throttling_only_);
            }
            pub inline fn subscribe(self: *const T, dw_subscribe_timeout_: u32, dw_event_flags_: u32) HRESULT {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).Subscribe(@as(*const IVssWriterImpl, @ptrCast(self)), dw_subscribe_timeout_, dw_event_flags_);
            }
            pub inline fn unsubscribe(self: *const T) HRESULT {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).Unsubscribe(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn uninitialize(self: *const T) void {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).Uninitialize(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn getCurrentVolumeArray(self: *const T) ?*?PWSTR {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetCurrentVolumeArray(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn getCurrentVolumeCount(self: *const T) u32 {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetCurrentVolumeCount(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn getSnapshotDeviceName(self: *const T, wsz_original_volume_: ?[*:0]const u16, ppwsz_snapshot_device_: ?*?PWSTR) HRESULT {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetSnapshotDeviceName(@as(*const IVssWriterImpl, @ptrCast(self)), wsz_original_volume_, ppwsz_snapshot_device_);
            }
            pub inline fn getCurrentSnapshotSetId(self: *const T) Guid {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetCurrentSnapshotSetId(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn getContext(self: *const T) i32 {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetContext(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn getCurrentLevel(self: *const T) VSS_APPLICATION_LEVEL {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetCurrentLevel(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn isPathAffected(self: *const T, wsz_path_: ?[*:0]const u16) bool {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).IsPathAffected(@as(*const IVssWriterImpl, @ptrCast(self)), wsz_path_);
            }
            pub inline fn isBootableSystemStateBackedUp(self: *const T) bool {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).IsBootableSystemStateBackedUp(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn areComponentsSelected(self: *const T) bool {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).AreComponentsSelected(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn getBackupType(self: *const T) VSS_BACKUP_TYPE {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetBackupType(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn getRestoreType(self: *const T) VSS_RESTORE_TYPE {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetRestoreType(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn setWriterFailure(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).SetWriterFailure(@as(*const IVssWriterImpl, @ptrCast(self)), hr_);
            }
            pub inline fn isPartialFileSupportEnabled(self: *const T) bool {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).IsPartialFileSupportEnabled(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn installAlternateWriter(self: *const T, id_writer_: Guid, clsid_: Guid) HRESULT {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).InstallAlternateWriter(@as(*const IVssWriterImpl, @ptrCast(self)), id_writer_, clsid_);
            }
            pub inline fn getIdentityInformation(self: *const T) ?*IVssExamineWriterMetadata {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetIdentityInformation(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
            pub inline fn setWriterFailureEx(self: *const T, hr_: HRESULT, hr_application_: HRESULT, wsz_application_message_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).SetWriterFailureEx(@as(*const IVssWriterImpl, @ptrCast(self)), hr_, hr_application_, wsz_application_message_);
            }
            pub inline fn getSessionId(self: *const T, id_session_: ?*Guid) HRESULT {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).GetSessionId(@as(*const IVssWriterImpl, @ptrCast(self)), id_session_);
            }
            pub inline fn isWriterShuttingDown(self: *const T) bool {
                return @as(*const IVssWriterImpl.VTable, @ptrCast(self.vtable)).IsWriterShuttingDown(@as(*const IVssWriterImpl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVssCreateExpressWriterMetadata_Value = Guid.initString("9c772e77-b26e-427f-92dd-c996f41ea5e3");
pub const IID_IVssCreateExpressWriterMetadata = &IID_IVssCreateExpressWriterMetadata_Value;
pub const IVssCreateExpressWriterMetadata = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddExcludeFiles: *const fn (
            self: *const IVssCreateExpressWriterMetadata,
            wsz_path: ?[*:0]const u16,
            wsz_filespec: ?[*:0]const u16,
            b_recursive: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddComponent: *const fn (
            self: *const IVssCreateExpressWriterMetadata,
            ct: VSS_COMPONENT_TYPE,
            wsz_logical_path: ?[*:0]const u16,
            wsz_component_name: ?[*:0]const u16,
            wsz_caption: ?[*:0]const u16,
            pb_icon: ?*const u8,
            cb_icon: u32,
            b_restore_metadata: u8,
            b_notify_on_backup_complete: u8,
            b_selectable: u8,
            b_selectable_for_restore: u8,
            dw_component_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFilesToFileGroup: *const fn (
            self: *const IVssCreateExpressWriterMetadata,
            wsz_logical_path: ?[*:0]const u16,
            wsz_group_name: ?[*:0]const u16,
            wsz_path: ?[*:0]const u16,
            wsz_filespec: ?[*:0]const u16,
            b_recursive: u8,
            wsz_alternate_location: ?[*:0]const u16,
            dw_backup_type_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRestoreMethod: *const fn (
            self: *const IVssCreateExpressWriterMetadata,
            method: VSS_RESTOREMETHOD_ENUM,
            wsz_service: ?[*:0]const u16,
            wsz_user_procedure: ?[*:0]const u16,
            writer_restore: VSS_WRITERRESTORE_ENUM,
            b_reboot_required: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddComponentDependency: *const fn (
            self: *const IVssCreateExpressWriterMetadata,
            wsz_for_logical_path: ?[*:0]const u16,
            wsz_for_component_name: ?[*:0]const u16,
            on_writer_id: Guid,
            wsz_on_logical_path: ?[*:0]const u16,
            wsz_on_component_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackupSchema: *const fn (
            self: *const IVssCreateExpressWriterMetadata,
            dw_schema_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAsXML: *const fn (
            self: *const IVssCreateExpressWriterMetadata,
            pbstr_x_m_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addExcludeFiles(self: *const T, wsz_path_: ?[*:0]const u16, wsz_filespec_: ?[*:0]const u16, b_recursive_: u8) HRESULT {
                return @as(*const IVssCreateExpressWriterMetadata.VTable, @ptrCast(self.vtable)).AddExcludeFiles(@as(*const IVssCreateExpressWriterMetadata, @ptrCast(self)), wsz_path_, wsz_filespec_, b_recursive_);
            }
            pub inline fn addComponent(self: *const T, ct_: VSS_COMPONENT_TYPE, wsz_logical_path_: ?[*:0]const u16, wsz_component_name_: ?[*:0]const u16, wsz_caption_: ?[*:0]const u16, pb_icon_: ?*const u8, cb_icon_: u32, b_restore_metadata_: u8, b_notify_on_backup_complete_: u8, b_selectable_: u8, b_selectable_for_restore_: u8, dw_component_flags_: u32) HRESULT {
                return @as(*const IVssCreateExpressWriterMetadata.VTable, @ptrCast(self.vtable)).AddComponent(@as(*const IVssCreateExpressWriterMetadata, @ptrCast(self)), ct_, wsz_logical_path_, wsz_component_name_, wsz_caption_, pb_icon_, cb_icon_, b_restore_metadata_, b_notify_on_backup_complete_, b_selectable_, b_selectable_for_restore_, dw_component_flags_);
            }
            pub inline fn addFilesToFileGroup(self: *const T, wsz_logical_path_: ?[*:0]const u16, wsz_group_name_: ?[*:0]const u16, wsz_path_: ?[*:0]const u16, wsz_filespec_: ?[*:0]const u16, b_recursive_: u8, wsz_alternate_location_: ?[*:0]const u16, dw_backup_type_mask_: u32) HRESULT {
                return @as(*const IVssCreateExpressWriterMetadata.VTable, @ptrCast(self.vtable)).AddFilesToFileGroup(@as(*const IVssCreateExpressWriterMetadata, @ptrCast(self)), wsz_logical_path_, wsz_group_name_, wsz_path_, wsz_filespec_, b_recursive_, wsz_alternate_location_, dw_backup_type_mask_);
            }
            pub inline fn setRestoreMethod(self: *const T, method_: VSS_RESTOREMETHOD_ENUM, wsz_service_: ?[*:0]const u16, wsz_user_procedure_: ?[*:0]const u16, writer_restore_: VSS_WRITERRESTORE_ENUM, b_reboot_required_: u8) HRESULT {
                return @as(*const IVssCreateExpressWriterMetadata.VTable, @ptrCast(self.vtable)).SetRestoreMethod(@as(*const IVssCreateExpressWriterMetadata, @ptrCast(self)), method_, wsz_service_, wsz_user_procedure_, writer_restore_, b_reboot_required_);
            }
            pub inline fn addComponentDependency(self: *const T, wsz_for_logical_path_: ?[*:0]const u16, wsz_for_component_name_: ?[*:0]const u16, on_writer_id_: Guid, wsz_on_logical_path_: ?[*:0]const u16, wsz_on_component_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IVssCreateExpressWriterMetadata.VTable, @ptrCast(self.vtable)).AddComponentDependency(@as(*const IVssCreateExpressWriterMetadata, @ptrCast(self)), wsz_for_logical_path_, wsz_for_component_name_, on_writer_id_, wsz_on_logical_path_, wsz_on_component_name_);
            }
            pub inline fn setBackupSchema(self: *const T, dw_schema_mask_: u32) HRESULT {
                return @as(*const IVssCreateExpressWriterMetadata.VTable, @ptrCast(self.vtable)).SetBackupSchema(@as(*const IVssCreateExpressWriterMetadata, @ptrCast(self)), dw_schema_mask_);
            }
            pub inline fn saveAsXML(self: *const T, pbstr_x_m_l_: ?*?BSTR) HRESULT {
                return @as(*const IVssCreateExpressWriterMetadata.VTable, @ptrCast(self.vtable)).SaveAsXML(@as(*const IVssCreateExpressWriterMetadata, @ptrCast(self)), pbstr_x_m_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVssExpressWriter_Value = Guid.initString("e33affdc-59c7-47b1-97d5-4266598f6235");
pub const IID_IVssExpressWriter = &IID_IVssExpressWriter_Value;
pub const IVssExpressWriter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateMetadata: *const fn (
            self: *const IVssExpressWriter,
            writer_id: Guid,
            writer_name: ?[*:0]const u16,
            usage_type: VSS_USAGE_TYPE,
            version_major: u32,
            version_minor: u32,
            reserved: u32,
            pp_metadata: ?*?*IVssCreateExpressWriterMetadata,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadMetadata: *const fn (
            self: *const IVssExpressWriter,
            metadata: ?[*:0]const u16,
            reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Register: *const fn (
            self: *const IVssExpressWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unregister: *const fn (
            self: *const IVssExpressWriter,
            writer_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createMetadata(self: *const T, writer_id_: Guid, writer_name_: ?[*:0]const u16, usage_type_: VSS_USAGE_TYPE, version_major_: u32, version_minor_: u32, reserved_: u32, pp_metadata_: ?*?*IVssCreateExpressWriterMetadata) HRESULT {
                return @as(*const IVssExpressWriter.VTable, @ptrCast(self.vtable)).CreateMetadata(@as(*const IVssExpressWriter, @ptrCast(self)), writer_id_, writer_name_, usage_type_, version_major_, version_minor_, reserved_, pp_metadata_);
            }
            pub inline fn loadMetadata(self: *const T, metadata_: ?[*:0]const u16, reserved_: u32) HRESULT {
                return @as(*const IVssExpressWriter.VTable, @ptrCast(self.vtable)).LoadMetadata(@as(*const IVssExpressWriter, @ptrCast(self)), metadata_, reserved_);
            }
            pub inline fn register(self: *const T) HRESULT {
                return @as(*const IVssExpressWriter.VTable, @ptrCast(self.vtable)).Register(@as(*const IVssExpressWriter, @ptrCast(self)));
            }
            pub inline fn unregister(self: *const T, writer_id_: Guid) HRESULT {
                return @as(*const IVssExpressWriter.VTable, @ptrCast(self.vtable)).Unregister(@as(*const IVssExpressWriter, @ptrCast(self)), writer_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_VssSnapshotMgmt_Value = Guid.initString("0b5a2c52-3eb9-470a-96e2-6c6d4570e40f");
pub const CLSID_VssSnapshotMgmt = &CLSID_VssSnapshotMgmt_Value;

pub const VSS_MGMT_OBJECT_TYPE = enum(i32) {
    UNKNOWN = 0,
    VOLUME = 1,
    DIFF_VOLUME = 2,
    DIFF_AREA = 3,
};
pub const VSS_MGMT_OBJECT_UNKNOWN = VSS_MGMT_OBJECT_TYPE.UNKNOWN;
pub const VSS_MGMT_OBJECT_VOLUME = VSS_MGMT_OBJECT_TYPE.VOLUME;
pub const VSS_MGMT_OBJECT_DIFF_VOLUME = VSS_MGMT_OBJECT_TYPE.DIFF_VOLUME;
pub const VSS_MGMT_OBJECT_DIFF_AREA = VSS_MGMT_OBJECT_TYPE.DIFF_AREA;

pub const VSS_VOLUME_PROP = extern struct {
    m_pwszVolumeName: ?*u16,
    m_pwszVolumeDisplayName: ?*u16,
};

pub const VSS_DIFF_VOLUME_PROP = extern struct {
    m_pwszVolumeName: ?*u16,
    m_pwszVolumeDisplayName: ?*u16,
    m_llVolumeFreeSpace: i64,
    m_llVolumeTotalSpace: i64,
};

pub const VSS_DIFF_AREA_PROP = extern struct {
    m_pwszVolumeName: ?*u16,
    m_pwszDiffAreaVolumeName: ?*u16,
    m_llMaximumDiffSpace: i64,
    m_llAllocatedDiffSpace: i64,
    m_llUsedDiffSpace: i64,
};

pub const VSS_MGMT_OBJECT_UNION = extern union {
    Vol: VSS_VOLUME_PROP,
    DiffVol: VSS_DIFF_VOLUME_PROP,
    DiffArea: VSS_DIFF_AREA_PROP,
};

pub const VSS_MGMT_OBJECT_PROP = extern struct {
    Type: VSS_MGMT_OBJECT_TYPE,
    Obj: VSS_MGMT_OBJECT_UNION,
};

pub const VSS_PROTECTION_LEVEL = enum(i32) {
    ORIGINAL_VOLUME = 0,
    SNAPSHOT = 1,
};
pub const VSS_PROTECTION_LEVEL_ORIGINAL_VOLUME = VSS_PROTECTION_LEVEL.ORIGINAL_VOLUME;
pub const VSS_PROTECTION_LEVEL_SNAPSHOT = VSS_PROTECTION_LEVEL.SNAPSHOT;

pub const VSS_PROTECTION_FAULT = enum(i32) {
    NONE = 0,
    DIFF_AREA_MISSING = 1,
    IO_FAILURE_DURING_ONLINE = 2,
    META_DATA_CORRUPTION = 3,
    MEMORY_ALLOCATION_FAILURE = 4,
    MAPPED_MEMORY_FAILURE = 5,
    COW_READ_FAILURE = 6,
    COW_WRITE_FAILURE = 7,
    DIFF_AREA_FULL = 8,
    GROW_TOO_SLOW = 9,
    GROW_FAILED = 10,
    DESTROY_ALL_SNAPSHOTS = 11,
    FILE_SYSTEM_FAILURE = 12,
    IO_FAILURE = 13,
    DIFF_AREA_REMOVED = 14,
    EXTERNAL_WRITER_TO_DIFF_AREA = 15,
    MOUNT_DURING_CLUSTER_OFFLINE = 16,
};
pub const VSS_PROTECTION_FAULT_NONE = VSS_PROTECTION_FAULT.NONE;
pub const VSS_PROTECTION_FAULT_DIFF_AREA_MISSING = VSS_PROTECTION_FAULT.DIFF_AREA_MISSING;
pub const VSS_PROTECTION_FAULT_IO_FAILURE_DURING_ONLINE = VSS_PROTECTION_FAULT.IO_FAILURE_DURING_ONLINE;
pub const VSS_PROTECTION_FAULT_META_DATA_CORRUPTION = VSS_PROTECTION_FAULT.META_DATA_CORRUPTION;
pub const VSS_PROTECTION_FAULT_MEMORY_ALLOCATION_FAILURE = VSS_PROTECTION_FAULT.MEMORY_ALLOCATION_FAILURE;
pub const VSS_PROTECTION_FAULT_MAPPED_MEMORY_FAILURE = VSS_PROTECTION_FAULT.MAPPED_MEMORY_FAILURE;
pub const VSS_PROTECTION_FAULT_COW_READ_FAILURE = VSS_PROTECTION_FAULT.COW_READ_FAILURE;
pub const VSS_PROTECTION_FAULT_COW_WRITE_FAILURE = VSS_PROTECTION_FAULT.COW_WRITE_FAILURE;
pub const VSS_PROTECTION_FAULT_DIFF_AREA_FULL = VSS_PROTECTION_FAULT.DIFF_AREA_FULL;
pub const VSS_PROTECTION_FAULT_GROW_TOO_SLOW = VSS_PROTECTION_FAULT.GROW_TOO_SLOW;
pub const VSS_PROTECTION_FAULT_GROW_FAILED = VSS_PROTECTION_FAULT.GROW_FAILED;
pub const VSS_PROTECTION_FAULT_DESTROY_ALL_SNAPSHOTS = VSS_PROTECTION_FAULT.DESTROY_ALL_SNAPSHOTS;
pub const VSS_PROTECTION_FAULT_FILE_SYSTEM_FAILURE = VSS_PROTECTION_FAULT.FILE_SYSTEM_FAILURE;
pub const VSS_PROTECTION_FAULT_IO_FAILURE = VSS_PROTECTION_FAULT.IO_FAILURE;
pub const VSS_PROTECTION_FAULT_DIFF_AREA_REMOVED = VSS_PROTECTION_FAULT.DIFF_AREA_REMOVED;
pub const VSS_PROTECTION_FAULT_EXTERNAL_WRITER_TO_DIFF_AREA = VSS_PROTECTION_FAULT.EXTERNAL_WRITER_TO_DIFF_AREA;
pub const VSS_PROTECTION_FAULT_MOUNT_DURING_CLUSTER_OFFLINE = VSS_PROTECTION_FAULT.MOUNT_DURING_CLUSTER_OFFLINE;

pub const VSS_VOLUME_PROTECTION_INFO = extern struct {
    m_protectionLevel: VSS_PROTECTION_LEVEL,
    m_volumeIsOfflineForProtection: BOOL,
    m_protectionFault: VSS_PROTECTION_FAULT,
    m_failureStatus: i32,
    m_volumeHasUnusedDiffArea: BOOL,
    m_reserved: u32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssSnapshotMgmt_Value = Guid.initString("fa7df749-66e7-4986-a27f-e2f04ae53772");
pub const IID_IVssSnapshotMgmt = &IID_IVssSnapshotMgmt_Value;
pub const IVssSnapshotMgmt = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProviderMgmtInterface: *const fn (
            self: *const IVssSnapshotMgmt,
            provider_id: Guid,
            interface_id: ?*const Guid,
            pp_itf: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryVolumesSupportedForSnapshots: *const fn (
            self: *const IVssSnapshotMgmt,
            provider_id: Guid,
            l_context: i32,
            pp_enum: ?*?*IVssEnumMgmtObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySnapshotsByVolume: *const fn (
            self: *const IVssSnapshotMgmt,
            pwsz_volume_name: ?*u16,
            provider_id: Guid,
            pp_enum: ?*?*IVssEnumObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getProviderMgmtInterface(self: *const T, provider_id_: Guid, interface_id_: ?*const Guid, pp_itf_: ?*?*IUnknown) HRESULT {
                return @as(*const IVssSnapshotMgmt.VTable, @ptrCast(self.vtable)).GetProviderMgmtInterface(@as(*const IVssSnapshotMgmt, @ptrCast(self)), provider_id_, interface_id_, pp_itf_);
            }
            pub inline fn queryVolumesSupportedForSnapshots(self: *const T, provider_id_: Guid, l_context_: i32, pp_enum_: ?*?*IVssEnumMgmtObject) HRESULT {
                return @as(*const IVssSnapshotMgmt.VTable, @ptrCast(self.vtable)).QueryVolumesSupportedForSnapshots(@as(*const IVssSnapshotMgmt, @ptrCast(self)), provider_id_, l_context_, pp_enum_);
            }
            pub inline fn querySnapshotsByVolume(self: *const T, pwsz_volume_name_: ?*u16, provider_id_: Guid, pp_enum_: ?*?*IVssEnumObject) HRESULT {
                return @as(*const IVssSnapshotMgmt.VTable, @ptrCast(self.vtable)).QuerySnapshotsByVolume(@as(*const IVssSnapshotMgmt, @ptrCast(self)), pwsz_volume_name_, provider_id_, pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssSnapshotMgmt2_Value = Guid.initString("0f61ec39-fe82-45f2-a3f0-768b5d427102");
pub const IID_IVssSnapshotMgmt2 = &IID_IVssSnapshotMgmt2_Value;
pub const IVssSnapshotMgmt2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMinDiffAreaSize: *const fn (
            self: *const IVssSnapshotMgmt2,
            pll_min_diff_area_size: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMinDiffAreaSize(self: *const T, pll_min_diff_area_size_: ?*i64) HRESULT {
                return @as(*const IVssSnapshotMgmt2.VTable, @ptrCast(self.vtable)).GetMinDiffAreaSize(@as(*const IVssSnapshotMgmt2, @ptrCast(self)), pll_min_diff_area_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssDifferentialSoftwareSnapshotMgmt_Value = Guid.initString("214a0f28-b737-4026-b847-4f9e37d79529");
pub const IID_IVssDifferentialSoftwareSnapshotMgmt = &IID_IVssDifferentialSoftwareSnapshotMgmt_Value;
pub const IVssDifferentialSoftwareSnapshotMgmt = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddDiffArea: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt,
            pwsz_volume_name: ?*u16,
            pwsz_diff_area_volume_name: ?*u16,
            ll_maximum_diff_space: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeDiffAreaMaximumSize: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt,
            pwsz_volume_name: ?*u16,
            pwsz_diff_area_volume_name: ?*u16,
            ll_maximum_diff_space: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryVolumesSupportedForDiffAreas: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt,
            pwsz_original_volume_name: ?*u16,
            pp_enum: ?*?*IVssEnumMgmtObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryDiffAreasForVolume: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt,
            pwsz_volume_name: ?*u16,
            pp_enum: ?*?*IVssEnumMgmtObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryDiffAreasOnVolume: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt,
            pwsz_volume_name: ?*u16,
            pp_enum: ?*?*IVssEnumMgmtObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryDiffAreasForSnapshot: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt,
            snapshot_id: Guid,
            pp_enum: ?*?*IVssEnumMgmtObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addDiffArea(self: *const T, pwsz_volume_name_: ?*u16, pwsz_diff_area_volume_name_: ?*u16, ll_maximum_diff_space_: i64) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt.VTable, @ptrCast(self.vtable)).AddDiffArea(@as(*const IVssDifferentialSoftwareSnapshotMgmt, @ptrCast(self)), pwsz_volume_name_, pwsz_diff_area_volume_name_, ll_maximum_diff_space_);
            }
            pub inline fn changeDiffAreaMaximumSize(self: *const T, pwsz_volume_name_: ?*u16, pwsz_diff_area_volume_name_: ?*u16, ll_maximum_diff_space_: i64) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt.VTable, @ptrCast(self.vtable)).ChangeDiffAreaMaximumSize(@as(*const IVssDifferentialSoftwareSnapshotMgmt, @ptrCast(self)), pwsz_volume_name_, pwsz_diff_area_volume_name_, ll_maximum_diff_space_);
            }
            pub inline fn queryVolumesSupportedForDiffAreas(self: *const T, pwsz_original_volume_name_: ?*u16, pp_enum_: ?*?*IVssEnumMgmtObject) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt.VTable, @ptrCast(self.vtable)).QueryVolumesSupportedForDiffAreas(@as(*const IVssDifferentialSoftwareSnapshotMgmt, @ptrCast(self)), pwsz_original_volume_name_, pp_enum_);
            }
            pub inline fn queryDiffAreasForVolume(self: *const T, pwsz_volume_name_: ?*u16, pp_enum_: ?*?*IVssEnumMgmtObject) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt.VTable, @ptrCast(self.vtable)).QueryDiffAreasForVolume(@as(*const IVssDifferentialSoftwareSnapshotMgmt, @ptrCast(self)), pwsz_volume_name_, pp_enum_);
            }
            pub inline fn queryDiffAreasOnVolume(self: *const T, pwsz_volume_name_: ?*u16, pp_enum_: ?*?*IVssEnumMgmtObject) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt.VTable, @ptrCast(self.vtable)).QueryDiffAreasOnVolume(@as(*const IVssDifferentialSoftwareSnapshotMgmt, @ptrCast(self)), pwsz_volume_name_, pp_enum_);
            }
            pub inline fn queryDiffAreasForSnapshot(self: *const T, snapshot_id_: Guid, pp_enum_: ?*?*IVssEnumMgmtObject) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt.VTable, @ptrCast(self.vtable)).QueryDiffAreasForSnapshot(@as(*const IVssDifferentialSoftwareSnapshotMgmt, @ptrCast(self)), snapshot_id_, pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssDifferentialSoftwareSnapshotMgmt2_Value = Guid.initString("949d7353-675f-4275-8969-f044c6277815");
pub const IID_IVssDifferentialSoftwareSnapshotMgmt2 = &IID_IVssDifferentialSoftwareSnapshotMgmt2_Value;
pub const IVssDifferentialSoftwareSnapshotMgmt2 = extern struct {
    pub const VTable = extern struct {
        base: IVssDifferentialSoftwareSnapshotMgmt.VTable,
        ChangeDiffAreaMaximumSizeEx: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt2,
            pwsz_volume_name: ?*u16,
            pwsz_diff_area_volume_name: ?*u16,
            ll_maximum_diff_space: i64,
            b_volatile: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MigrateDiffAreas: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt2,
            pwsz_volume_name: ?*u16,
            pwsz_diff_area_volume_name: ?*u16,
            pwsz_new_diff_area_volume_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryMigrationStatus: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt2,
            pwsz_volume_name: ?*u16,
            pwsz_diff_area_volume_name: ?*u16,
            pp_async: ?*?*IVssAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapshotPriority: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt2,
            id_snapshot: Guid,
            priority: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IVssDifferentialSoftwareSnapshotMgmt.MethodMixin(T);
            pub inline fn changeDiffAreaMaximumSizeEx(self: *const T, pwsz_volume_name_: ?*u16, pwsz_diff_area_volume_name_: ?*u16, ll_maximum_diff_space_: i64, b_volatile_: BOOL) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt2.VTable, @ptrCast(self.vtable)).ChangeDiffAreaMaximumSizeEx(@as(*const IVssDifferentialSoftwareSnapshotMgmt2, @ptrCast(self)), pwsz_volume_name_, pwsz_diff_area_volume_name_, ll_maximum_diff_space_, b_volatile_);
            }
            pub inline fn migrateDiffAreas(self: *const T, pwsz_volume_name_: ?*u16, pwsz_diff_area_volume_name_: ?*u16, pwsz_new_diff_area_volume_name_: ?*u16) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt2.VTable, @ptrCast(self.vtable)).MigrateDiffAreas(@as(*const IVssDifferentialSoftwareSnapshotMgmt2, @ptrCast(self)), pwsz_volume_name_, pwsz_diff_area_volume_name_, pwsz_new_diff_area_volume_name_);
            }
            pub inline fn queryMigrationStatus(self: *const T, pwsz_volume_name_: ?*u16, pwsz_diff_area_volume_name_: ?*u16, pp_async_: ?*?*IVssAsync) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt2.VTable, @ptrCast(self.vtable)).QueryMigrationStatus(@as(*const IVssDifferentialSoftwareSnapshotMgmt2, @ptrCast(self)), pwsz_volume_name_, pwsz_diff_area_volume_name_, pp_async_);
            }
            pub inline fn setSnapshotPriority(self: *const T, id_snapshot_: Guid, priority_: u8) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt2.VTable, @ptrCast(self.vtable)).SetSnapshotPriority(@as(*const IVssDifferentialSoftwareSnapshotMgmt2, @ptrCast(self)), id_snapshot_, priority_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssDifferentialSoftwareSnapshotMgmt3_Value = Guid.initString("383f7e71-a4c5-401f-b27f-f826289f8458");
pub const IID_IVssDifferentialSoftwareSnapshotMgmt3 = &IID_IVssDifferentialSoftwareSnapshotMgmt3_Value;
pub const IVssDifferentialSoftwareSnapshotMgmt3 = extern struct {
    pub const VTable = extern struct {
        base: IVssDifferentialSoftwareSnapshotMgmt2.VTable,
        SetVolumeProtectLevel: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt3,
            pwsz_volume_name: ?*u16,
            protection_level: VSS_PROTECTION_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVolumeProtectLevel: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt3,
            pwsz_volume_name: ?*u16,
            protection_level: ?*VSS_VOLUME_PROTECTION_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearVolumeProtectFault: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt3,
            pwsz_volume_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteUnusedDiffAreas: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt3,
            pwsz_diff_area_volume_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySnapshotDeltaBitmap: *const fn (
            self: *const IVssDifferentialSoftwareSnapshotMgmt3,
            id_snapshot_older: Guid,
            id_snapshot_younger: Guid,
            pc_block_size_per_bit: ?*u32,
            pc_bitmap_length: ?*u32,
            ppb_bitmap: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IVssDifferentialSoftwareSnapshotMgmt2.MethodMixin(T);
            pub inline fn setVolumeProtectLevel(self: *const T, pwsz_volume_name_: ?*u16, protection_level_: VSS_PROTECTION_LEVEL) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt3.VTable, @ptrCast(self.vtable)).SetVolumeProtectLevel(@as(*const IVssDifferentialSoftwareSnapshotMgmt3, @ptrCast(self)), pwsz_volume_name_, protection_level_);
            }
            pub inline fn getVolumeProtectLevel(self: *const T, pwsz_volume_name_: ?*u16, protection_level_: ?*VSS_VOLUME_PROTECTION_INFO) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt3.VTable, @ptrCast(self.vtable)).GetVolumeProtectLevel(@as(*const IVssDifferentialSoftwareSnapshotMgmt3, @ptrCast(self)), pwsz_volume_name_, protection_level_);
            }
            pub inline fn clearVolumeProtectFault(self: *const T, pwsz_volume_name_: ?*u16) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt3.VTable, @ptrCast(self.vtable)).ClearVolumeProtectFault(@as(*const IVssDifferentialSoftwareSnapshotMgmt3, @ptrCast(self)), pwsz_volume_name_);
            }
            pub inline fn deleteUnusedDiffAreas(self: *const T, pwsz_diff_area_volume_name_: ?*u16) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt3.VTable, @ptrCast(self.vtable)).DeleteUnusedDiffAreas(@as(*const IVssDifferentialSoftwareSnapshotMgmt3, @ptrCast(self)), pwsz_diff_area_volume_name_);
            }
            pub inline fn querySnapshotDeltaBitmap(self: *const T, id_snapshot_older_: Guid, id_snapshot_younger_: Guid, pc_block_size_per_bit_: ?*u32, pc_bitmap_length_: ?*u32, ppb_bitmap_: [*]?*u8) HRESULT {
                return @as(*const IVssDifferentialSoftwareSnapshotMgmt3.VTable, @ptrCast(self.vtable)).QuerySnapshotDeltaBitmap(@as(*const IVssDifferentialSoftwareSnapshotMgmt3, @ptrCast(self)), id_snapshot_older_, id_snapshot_younger_, pc_block_size_per_bit_, pc_bitmap_length_, ppb_bitmap_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssEnumMgmtObject_Value = Guid.initString("01954e6b-9254-4e6e-808c-c9e05d007696");
pub const IID_IVssEnumMgmtObject = &IID_IVssEnumMgmtObject_Value;
pub const IVssEnumMgmtObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IVssEnumMgmtObject,
            celt: u32,
            rgelt: [*]VSS_MGMT_OBJECT_PROP,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IVssEnumMgmtObject,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IVssEnumMgmtObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IVssEnumMgmtObject,
            ppenum: ?*?*IVssEnumMgmtObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]VSS_MGMT_OBJECT_PROP, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IVssEnumMgmtObject.VTable, @ptrCast(self.vtable)).Next(@as(*const IVssEnumMgmtObject, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IVssEnumMgmtObject.VTable, @ptrCast(self.vtable)).Skip(@as(*const IVssEnumMgmtObject, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IVssEnumMgmtObject.VTable, @ptrCast(self.vtable)).Reset(@as(*const IVssEnumMgmtObject, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IVssEnumMgmtObject) HRESULT {
                return @as(*const IVssEnumMgmtObject.VTable, @ptrCast(self.vtable)).Clone(@as(*const IVssEnumMgmtObject, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_VSSCoordinator_Value = Guid.initString("e579ab5f-1cc4-44b4-bed9-de0991ff0623");
pub const CLSID_VSSCoordinator = &CLSID_VSSCoordinator_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssAdmin_Value = Guid.initString("77ed5996-2f63-11d3-8a39-00c04f72d8e3");
pub const IID_IVssAdmin = &IID_IVssAdmin_Value;
pub const IVssAdmin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterProvider: *const fn (
            self: *const IVssAdmin,
            p_provider_id: Guid,
            class_id: Guid,
            pwsz_provider_name: ?*u16,
            e_provider_type: VSS_PROVIDER_TYPE,
            pwsz_provider_version: ?*u16,
            provider_version_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterProvider: *const fn (
            self: *const IVssAdmin,
            provider_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryProviders: *const fn (
            self: *const IVssAdmin,
            pp_enum: ?*?*IVssEnumObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortAllSnapshotsInProgress: *const fn (
            self: *const IVssAdmin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerProvider(self: *const T, p_provider_id_: Guid, class_id_: Guid, pwsz_provider_name_: ?*u16, e_provider_type_: VSS_PROVIDER_TYPE, pwsz_provider_version_: ?*u16, provider_version_id_: Guid) HRESULT {
                return @as(*const IVssAdmin.VTable, @ptrCast(self.vtable)).RegisterProvider(@as(*const IVssAdmin, @ptrCast(self)), p_provider_id_, class_id_, pwsz_provider_name_, e_provider_type_, pwsz_provider_version_, provider_version_id_);
            }
            pub inline fn unregisterProvider(self: *const T, provider_id_: Guid) HRESULT {
                return @as(*const IVssAdmin.VTable, @ptrCast(self.vtable)).UnregisterProvider(@as(*const IVssAdmin, @ptrCast(self)), provider_id_);
            }
            pub inline fn queryProviders(self: *const T, pp_enum_: ?*?*IVssEnumObject) HRESULT {
                return @as(*const IVssAdmin.VTable, @ptrCast(self.vtable)).QueryProviders(@as(*const IVssAdmin, @ptrCast(self)), pp_enum_);
            }
            pub inline fn abortAllSnapshotsInProgress(self: *const T) HRESULT {
                return @as(*const IVssAdmin.VTable, @ptrCast(self.vtable)).AbortAllSnapshotsInProgress(@as(*const IVssAdmin, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IVssAdminEx_Value = Guid.initString("7858a9f8-b1fa-41a6-964f-b9b36b8cd8d8");
pub const IID_IVssAdminEx = &IID_IVssAdminEx_Value;
pub const IVssAdminEx = extern struct {
    pub const VTable = extern struct {
        base: IVssAdmin.VTable,
        GetProviderCapability: *const fn (
            self: *const IVssAdminEx,
            p_provider_id: Guid,
            pll_original_capability_mask: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderContext: *const fn (
            self: *const IVssAdminEx,
            provider_id: Guid,
            pl_context: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProviderContext: *const fn (
            self: *const IVssAdminEx,
            provider_id: Guid,
            l_context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IVssAdmin.MethodMixin(T);
            pub inline fn getProviderCapability(self: *const T, p_provider_id_: Guid, pll_original_capability_mask_: ?*u64) HRESULT {
                return @as(*const IVssAdminEx.VTable, @ptrCast(self.vtable)).GetProviderCapability(@as(*const IVssAdminEx, @ptrCast(self)), p_provider_id_, pll_original_capability_mask_);
            }
            pub inline fn getProviderContext(self: *const T, provider_id_: Guid, pl_context_: ?*i32) HRESULT {
                return @as(*const IVssAdminEx.VTable, @ptrCast(self.vtable)).GetProviderContext(@as(*const IVssAdminEx, @ptrCast(self)), provider_id_, pl_context_);
            }
            pub inline fn setProviderContext(self: *const T, provider_id_: Guid, l_context_: i32) HRESULT {
                return @as(*const IVssAdminEx.VTable, @ptrCast(self.vtable)).SetProviderContext(@as(*const IVssAdminEx, @ptrCast(self)), provider_id_, l_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssSoftwareSnapshotProvider_Value = Guid.initString("609e123e-2c5a-44d3-8f01-0b1d9a47d1ff");
pub const IID_IVssSoftwareSnapshotProvider = &IID_IVssSoftwareSnapshotProvider_Value;
pub const IVssSoftwareSnapshotProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetContext: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            l_context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSnapshotProperties: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            snapshot_id: Guid,
            p_prop: ?*VSS_SNAPSHOT_PROP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Query: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            queried_object_id: Guid,
            e_queried_object_type: VSS_OBJECT_TYPE,
            e_returned_objects_type: VSS_OBJECT_TYPE,
            pp_enum: ?*?*IVssEnumObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteSnapshots: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            source_object_id: Guid,
            e_source_object_type: VSS_OBJECT_TYPE,
            b_force_delete: BOOL,
            pl_deleted_snapshots: ?*i32,
            p_nondeleted_snapshot_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginPrepareSnapshot: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            snapshot_set_id: Guid,
            snapshot_id: Guid,
            pwsz_volume_name: ?*u16,
            l_new_context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVolumeSupported: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            pwsz_volume_name: ?*u16,
            pb_supported_by_this_provider: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVolumeSnapshotted: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            pwsz_volume_name: ?*u16,
            pb_snapshots_present: ?*BOOL,
            pl_snapshot_compatibility: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapshotProperty: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            snapshot_id: Guid,
            e_snapshot_property_id: VSS_SNAPSHOT_PROPERTY_ID,
            v_property: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevertToSnapshot: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            snapshot_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryRevertStatus: *const fn (
            self: *const IVssSoftwareSnapshotProvider,
            pwsz_volume: ?*u16,
            pp_async: ?*?*IVssAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setContext(self: *const T, l_context_: i32) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).SetContext(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), l_context_);
            }
            pub inline fn getSnapshotProperties(self: *const T, snapshot_id_: Guid, p_prop_: ?*VSS_SNAPSHOT_PROP) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).GetSnapshotProperties(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), snapshot_id_, p_prop_);
            }
            pub inline fn query(self: *const T, queried_object_id_: Guid, e_queried_object_type_: VSS_OBJECT_TYPE, e_returned_objects_type_: VSS_OBJECT_TYPE, pp_enum_: ?*?*IVssEnumObject) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).Query(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), queried_object_id_, e_queried_object_type_, e_returned_objects_type_, pp_enum_);
            }
            pub inline fn deleteSnapshots(self: *const T, source_object_id_: Guid, e_source_object_type_: VSS_OBJECT_TYPE, b_force_delete_: BOOL, pl_deleted_snapshots_: ?*i32, p_nondeleted_snapshot_i_d_: ?*Guid) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).DeleteSnapshots(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), source_object_id_, e_source_object_type_, b_force_delete_, pl_deleted_snapshots_, p_nondeleted_snapshot_i_d_);
            }
            pub inline fn beginPrepareSnapshot(self: *const T, snapshot_set_id_: Guid, snapshot_id_: Guid, pwsz_volume_name_: ?*u16, l_new_context_: i32) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).BeginPrepareSnapshot(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), snapshot_set_id_, snapshot_id_, pwsz_volume_name_, l_new_context_);
            }
            pub inline fn isVolumeSupported(self: *const T, pwsz_volume_name_: ?*u16, pb_supported_by_this_provider_: ?*BOOL) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).IsVolumeSupported(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), pwsz_volume_name_, pb_supported_by_this_provider_);
            }
            pub inline fn isVolumeSnapshotted(self: *const T, pwsz_volume_name_: ?*u16, pb_snapshots_present_: ?*BOOL, pl_snapshot_compatibility_: ?*i32) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).IsVolumeSnapshotted(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), pwsz_volume_name_, pb_snapshots_present_, pl_snapshot_compatibility_);
            }
            pub inline fn setSnapshotProperty(self: *const T, snapshot_id_: Guid, e_snapshot_property_id_: VSS_SNAPSHOT_PROPERTY_ID, v_property_: VARIANT) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).SetSnapshotProperty(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), snapshot_id_, e_snapshot_property_id_, v_property_);
            }
            pub inline fn revertToSnapshot(self: *const T, snapshot_id_: Guid) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).RevertToSnapshot(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), snapshot_id_);
            }
            pub inline fn queryRevertStatus(self: *const T, pwsz_volume_: ?*u16, pp_async_: ?*?*IVssAsync) HRESULT {
                return @as(*const IVssSoftwareSnapshotProvider.VTable, @ptrCast(self.vtable)).QueryRevertStatus(@as(*const IVssSoftwareSnapshotProvider, @ptrCast(self)), pwsz_volume_, pp_async_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssProviderCreateSnapshotSet_Value = Guid.initString("5f894e5b-1e39-4778-8e23-9abad9f0e08c");
pub const IID_IVssProviderCreateSnapshotSet = &IID_IVssProviderCreateSnapshotSet_Value;
pub const IVssProviderCreateSnapshotSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EndPrepareSnapshots: *const fn (
            self: *const IVssProviderCreateSnapshotSet,
            snapshot_set_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreCommitSnapshots: *const fn (
            self: *const IVssProviderCreateSnapshotSet,
            snapshot_set_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitSnapshots: *const fn (
            self: *const IVssProviderCreateSnapshotSet,
            snapshot_set_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostCommitSnapshots: *const fn (
            self: *const IVssProviderCreateSnapshotSet,
            snapshot_set_id: Guid,
            l_snapshots_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreFinalCommitSnapshots: *const fn (
            self: *const IVssProviderCreateSnapshotSet,
            snapshot_set_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostFinalCommitSnapshots: *const fn (
            self: *const IVssProviderCreateSnapshotSet,
            snapshot_set_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortSnapshots: *const fn (
            self: *const IVssProviderCreateSnapshotSet,
            snapshot_set_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn endPrepareSnapshots(self: *const T, snapshot_set_id_: Guid) HRESULT {
                return @as(*const IVssProviderCreateSnapshotSet.VTable, @ptrCast(self.vtable)).EndPrepareSnapshots(@as(*const IVssProviderCreateSnapshotSet, @ptrCast(self)), snapshot_set_id_);
            }
            pub inline fn preCommitSnapshots(self: *const T, snapshot_set_id_: Guid) HRESULT {
                return @as(*const IVssProviderCreateSnapshotSet.VTable, @ptrCast(self.vtable)).PreCommitSnapshots(@as(*const IVssProviderCreateSnapshotSet, @ptrCast(self)), snapshot_set_id_);
            }
            pub inline fn commitSnapshots(self: *const T, snapshot_set_id_: Guid) HRESULT {
                return @as(*const IVssProviderCreateSnapshotSet.VTable, @ptrCast(self.vtable)).CommitSnapshots(@as(*const IVssProviderCreateSnapshotSet, @ptrCast(self)), snapshot_set_id_);
            }
            pub inline fn postCommitSnapshots(self: *const T, snapshot_set_id_: Guid, l_snapshots_count_: i32) HRESULT {
                return @as(*const IVssProviderCreateSnapshotSet.VTable, @ptrCast(self.vtable)).PostCommitSnapshots(@as(*const IVssProviderCreateSnapshotSet, @ptrCast(self)), snapshot_set_id_, l_snapshots_count_);
            }
            pub inline fn preFinalCommitSnapshots(self: *const T, snapshot_set_id_: Guid) HRESULT {
                return @as(*const IVssProviderCreateSnapshotSet.VTable, @ptrCast(self.vtable)).PreFinalCommitSnapshots(@as(*const IVssProviderCreateSnapshotSet, @ptrCast(self)), snapshot_set_id_);
            }
            pub inline fn postFinalCommitSnapshots(self: *const T, snapshot_set_id_: Guid) HRESULT {
                return @as(*const IVssProviderCreateSnapshotSet.VTable, @ptrCast(self.vtable)).PostFinalCommitSnapshots(@as(*const IVssProviderCreateSnapshotSet, @ptrCast(self)), snapshot_set_id_);
            }
            pub inline fn abortSnapshots(self: *const T, snapshot_set_id_: Guid) HRESULT {
                return @as(*const IVssProviderCreateSnapshotSet.VTable, @ptrCast(self.vtable)).AbortSnapshots(@as(*const IVssProviderCreateSnapshotSet, @ptrCast(self)), snapshot_set_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVssProviderNotifications_Value = Guid.initString("e561901f-03a5-4afe-86d0-72baeece7004");
pub const IID_IVssProviderNotifications = &IID_IVssProviderNotifications_Value;
pub const IVssProviderNotifications = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnLoad: *const fn (
            self: *const IVssProviderNotifications,
            p_callback: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnUnload: *const fn (
            self: *const IVssProviderNotifications,
            b_force_unload: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onLoad(self: *const T, p_callback_: ?*IUnknown) HRESULT {
                return @as(*const IVssProviderNotifications.VTable, @ptrCast(self.vtable)).OnLoad(@as(*const IVssProviderNotifications, @ptrCast(self)), p_callback_);
            }
            pub inline fn onUnload(self: *const T, b_force_unload_: BOOL) HRESULT {
                return @as(*const IVssProviderNotifications.VTable, @ptrCast(self.vtable)).OnUnload(@as(*const IVssProviderNotifications, @ptrCast(self)), b_force_unload_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_IVssHardwareSnapshotProvider_Value = Guid.initString("9593a157-44e9-4344-bbeb-44fbf9b06b10");
pub const IID_IVssHardwareSnapshotProvider = &IID_IVssHardwareSnapshotProvider_Value;
pub const IVssHardwareSnapshotProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AreLunsSupported: *const fn (
            self: *const IVssHardwareSnapshotProvider,
            l_lun_count: i32,
            l_context: i32,
            rgwsz_devices: [*]?*u16,
            p_lun_information: [*]VDS_LUN_INFORMATION,
            pb_is_supported: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillInLunInfo: *const fn (
            self: *const IVssHardwareSnapshotProvider,
            wsz_device_name: ?*u16,
            p_lun_info: ?*VDS_LUN_INFORMATION,
            pb_is_supported: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginPrepareSnapshot: *const fn (
            self: *const IVssHardwareSnapshotProvider,
            snapshot_set_id: Guid,
            snapshot_id: Guid,
            l_context: i32,
            l_lun_count: i32,
            rg_device_names: [*]?*u16,
            rg_lun_information: [*]VDS_LUN_INFORMATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetLuns: *const fn (
            self: *const IVssHardwareSnapshotProvider,
            l_lun_count: i32,
            rg_device_names: [*]?*u16,
            rg_source_luns: [*]VDS_LUN_INFORMATION,
            rg_destination_luns: [*]VDS_LUN_INFORMATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LocateLuns: *const fn (
            self: *const IVssHardwareSnapshotProvider,
            l_lun_count: i32,
            rg_source_luns: [*]VDS_LUN_INFORMATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLunEmpty: *const fn (
            self: *const IVssHardwareSnapshotProvider,
            wsz_device_name: ?*u16,
            p_information: ?*VDS_LUN_INFORMATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn areLunsSupported(self: *const T, l_lun_count_: i32, l_context_: i32, rgwsz_devices_: [*]?*u16, p_lun_information_: [*]VDS_LUN_INFORMATION, pb_is_supported_: ?*BOOL) HRESULT {
                return @as(*const IVssHardwareSnapshotProvider.VTable, @ptrCast(self.vtable)).AreLunsSupported(@as(*const IVssHardwareSnapshotProvider, @ptrCast(self)), l_lun_count_, l_context_, rgwsz_devices_, p_lun_information_, pb_is_supported_);
            }
            pub inline fn fillInLunInfo(self: *const T, wsz_device_name_: ?*u16, p_lun_info_: ?*VDS_LUN_INFORMATION, pb_is_supported_: ?*BOOL) HRESULT {
                return @as(*const IVssHardwareSnapshotProvider.VTable, @ptrCast(self.vtable)).FillInLunInfo(@as(*const IVssHardwareSnapshotProvider, @ptrCast(self)), wsz_device_name_, p_lun_info_, pb_is_supported_);
            }
            pub inline fn beginPrepareSnapshot(self: *const T, snapshot_set_id_: Guid, snapshot_id_: Guid, l_context_: i32, l_lun_count_: i32, rg_device_names_: [*]?*u16, rg_lun_information_: [*]VDS_LUN_INFORMATION) HRESULT {
                return @as(*const IVssHardwareSnapshotProvider.VTable, @ptrCast(self.vtable)).BeginPrepareSnapshot(@as(*const IVssHardwareSnapshotProvider, @ptrCast(self)), snapshot_set_id_, snapshot_id_, l_context_, l_lun_count_, rg_device_names_, rg_lun_information_);
            }
            pub inline fn getTargetLuns(self: *const T, l_lun_count_: i32, rg_device_names_: [*]?*u16, rg_source_luns_: [*]VDS_LUN_INFORMATION, rg_destination_luns_: [*]VDS_LUN_INFORMATION) HRESULT {
                return @as(*const IVssHardwareSnapshotProvider.VTable, @ptrCast(self.vtable)).GetTargetLuns(@as(*const IVssHardwareSnapshotProvider, @ptrCast(self)), l_lun_count_, rg_device_names_, rg_source_luns_, rg_destination_luns_);
            }
            pub inline fn locateLuns(self: *const T, l_lun_count_: i32, rg_source_luns_: [*]VDS_LUN_INFORMATION) HRESULT {
                return @as(*const IVssHardwareSnapshotProvider.VTable, @ptrCast(self.vtable)).LocateLuns(@as(*const IVssHardwareSnapshotProvider, @ptrCast(self)), l_lun_count_, rg_source_luns_);
            }
            pub inline fn onLunEmpty(self: *const T, wsz_device_name_: ?*u16, p_information_: ?*VDS_LUN_INFORMATION) HRESULT {
                return @as(*const IVssHardwareSnapshotProvider.VTable, @ptrCast(self.vtable)).OnLunEmpty(@as(*const IVssHardwareSnapshotProvider, @ptrCast(self)), wsz_device_name_, p_information_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IVssHardwareSnapshotProviderEx_Value = Guid.initString("7f5ba925-cdb1-4d11-a71f-339eb7e709fd");
pub const IID_IVssHardwareSnapshotProviderEx = &IID_IVssHardwareSnapshotProviderEx_Value;
pub const IVssHardwareSnapshotProviderEx = extern struct {
    pub const VTable = extern struct {
        base: IVssHardwareSnapshotProvider.VTable,
        GetProviderCapabilities: *const fn (
            self: *const IVssHardwareSnapshotProviderEx,
            pll_original_capability_mask: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLunStateChange: *const fn (
            self: *const IVssHardwareSnapshotProviderEx,
            p_snapshot_luns: [*]VDS_LUN_INFORMATION,
            p_original_luns: [*]VDS_LUN_INFORMATION,
            dw_count: u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResyncLuns: *const fn (
            self: *const IVssHardwareSnapshotProviderEx,
            p_source_luns: [*]VDS_LUN_INFORMATION,
            p_target_luns: [*]VDS_LUN_INFORMATION,
            dw_count: u32,
            pp_async: ?*?*IVssAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnReuseLuns: *const fn (
            self: *const IVssHardwareSnapshotProviderEx,
            p_snapshot_luns: [*]VDS_LUN_INFORMATION,
            p_original_luns: [*]VDS_LUN_INFORMATION,
            dw_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IVssHardwareSnapshotProvider.MethodMixin(T);
            pub inline fn getProviderCapabilities(self: *const T, pll_original_capability_mask_: ?*u64) HRESULT {
                return @as(*const IVssHardwareSnapshotProviderEx.VTable, @ptrCast(self.vtable)).GetProviderCapabilities(@as(*const IVssHardwareSnapshotProviderEx, @ptrCast(self)), pll_original_capability_mask_);
            }
            pub inline fn onLunStateChange(self: *const T, p_snapshot_luns_: [*]VDS_LUN_INFORMATION, p_original_luns_: [*]VDS_LUN_INFORMATION, dw_count_: u32, dw_flags_: u32) HRESULT {
                return @as(*const IVssHardwareSnapshotProviderEx.VTable, @ptrCast(self.vtable)).OnLunStateChange(@as(*const IVssHardwareSnapshotProviderEx, @ptrCast(self)), p_snapshot_luns_, p_original_luns_, dw_count_, dw_flags_);
            }
            pub inline fn resyncLuns(self: *const T, p_source_luns_: [*]VDS_LUN_INFORMATION, p_target_luns_: [*]VDS_LUN_INFORMATION, dw_count_: u32, pp_async_: ?*?*IVssAsync) HRESULT {
                return @as(*const IVssHardwareSnapshotProviderEx.VTable, @ptrCast(self.vtable)).ResyncLuns(@as(*const IVssHardwareSnapshotProviderEx, @ptrCast(self)), p_source_luns_, p_target_luns_, dw_count_, pp_async_);
            }
            pub inline fn onReuseLuns(self: *const T, p_snapshot_luns_: [*]VDS_LUN_INFORMATION, p_original_luns_: [*]VDS_LUN_INFORMATION, dw_count_: u32) HRESULT {
                return @as(*const IVssHardwareSnapshotProviderEx.VTable, @ptrCast(self.vtable)).OnReuseLuns(@as(*const IVssHardwareSnapshotProviderEx, @ptrCast(self)), p_snapshot_luns_, p_original_luns_, dw_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IVssFileShareSnapshotProvider_Value = Guid.initString("c8636060-7c2e-11df-8c4a-0800200c9a66");
pub const IID_IVssFileShareSnapshotProvider = &IID_IVssFileShareSnapshotProvider_Value;
pub const IVssFileShareSnapshotProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetContext: *const fn (
            self: *const IVssFileShareSnapshotProvider,
            l_context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSnapshotProperties: *const fn (
            self: *const IVssFileShareSnapshotProvider,
            snapshot_id: Guid,
            p_prop: ?*VSS_SNAPSHOT_PROP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Query: *const fn (
            self: *const IVssFileShareSnapshotProvider,
            queried_object_id: Guid,
            e_queried_object_type: VSS_OBJECT_TYPE,
            e_returned_objects_type: VSS_OBJECT_TYPE,
            pp_enum: ?*?*IVssEnumObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteSnapshots: *const fn (
            self: *const IVssFileShareSnapshotProvider,
            source_object_id: Guid,
            e_source_object_type: VSS_OBJECT_TYPE,
            b_force_delete: BOOL,
            pl_deleted_snapshots: ?*i32,
            p_nondeleted_snapshot_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginPrepareSnapshot: *const fn (
            self: *const IVssFileShareSnapshotProvider,
            snapshot_set_id: Guid,
            snapshot_id: Guid,
            pwsz_share_path: ?*u16,
            l_new_context: i32,
            provider_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPathSupported: *const fn (
            self: *const IVssFileShareSnapshotProvider,
            pwsz_share_path: ?*u16,
            pb_supported_by_this_provider: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPathSnapshotted: *const fn (
            self: *const IVssFileShareSnapshotProvider,
            pwsz_share_path: ?*u16,
            pb_snapshots_present: ?*BOOL,
            pl_snapshot_compatibility: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapshotProperty: *const fn (
            self: *const IVssFileShareSnapshotProvider,
            snapshot_id: Guid,
            e_snapshot_property_id: VSS_SNAPSHOT_PROPERTY_ID,
            v_property: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setContext(self: *const T, l_context_: i32) HRESULT {
                return @as(*const IVssFileShareSnapshotProvider.VTable, @ptrCast(self.vtable)).SetContext(@as(*const IVssFileShareSnapshotProvider, @ptrCast(self)), l_context_);
            }
            pub inline fn getSnapshotProperties(self: *const T, snapshot_id_: Guid, p_prop_: ?*VSS_SNAPSHOT_PROP) HRESULT {
                return @as(*const IVssFileShareSnapshotProvider.VTable, @ptrCast(self.vtable)).GetSnapshotProperties(@as(*const IVssFileShareSnapshotProvider, @ptrCast(self)), snapshot_id_, p_prop_);
            }
            pub inline fn query(self: *const T, queried_object_id_: Guid, e_queried_object_type_: VSS_OBJECT_TYPE, e_returned_objects_type_: VSS_OBJECT_TYPE, pp_enum_: ?*?*IVssEnumObject) HRESULT {
                return @as(*const IVssFileShareSnapshotProvider.VTable, @ptrCast(self.vtable)).Query(@as(*const IVssFileShareSnapshotProvider, @ptrCast(self)), queried_object_id_, e_queried_object_type_, e_returned_objects_type_, pp_enum_);
            }
            pub inline fn deleteSnapshots(self: *const T, source_object_id_: Guid, e_source_object_type_: VSS_OBJECT_TYPE, b_force_delete_: BOOL, pl_deleted_snapshots_: ?*i32, p_nondeleted_snapshot_i_d_: ?*Guid) HRESULT {
                return @as(*const IVssFileShareSnapshotProvider.VTable, @ptrCast(self.vtable)).DeleteSnapshots(@as(*const IVssFileShareSnapshotProvider, @ptrCast(self)), source_object_id_, e_source_object_type_, b_force_delete_, pl_deleted_snapshots_, p_nondeleted_snapshot_i_d_);
            }
            pub inline fn beginPrepareSnapshot(self: *const T, snapshot_set_id_: Guid, snapshot_id_: Guid, pwsz_share_path_: ?*u16, l_new_context_: i32, provider_id_: Guid) HRESULT {
                return @as(*const IVssFileShareSnapshotProvider.VTable, @ptrCast(self.vtable)).BeginPrepareSnapshot(@as(*const IVssFileShareSnapshotProvider, @ptrCast(self)), snapshot_set_id_, snapshot_id_, pwsz_share_path_, l_new_context_, provider_id_);
            }
            pub inline fn isPathSupported(self: *const T, pwsz_share_path_: ?*u16, pb_supported_by_this_provider_: ?*BOOL) HRESULT {
                return @as(*const IVssFileShareSnapshotProvider.VTable, @ptrCast(self.vtable)).IsPathSupported(@as(*const IVssFileShareSnapshotProvider, @ptrCast(self)), pwsz_share_path_, pb_supported_by_this_provider_);
            }
            pub inline fn isPathSnapshotted(self: *const T, pwsz_share_path_: ?*u16, pb_snapshots_present_: ?*BOOL, pl_snapshot_compatibility_: ?*i32) HRESULT {
                return @as(*const IVssFileShareSnapshotProvider.VTable, @ptrCast(self.vtable)).IsPathSnapshotted(@as(*const IVssFileShareSnapshotProvider, @ptrCast(self)), pwsz_share_path_, pb_snapshots_present_, pl_snapshot_compatibility_);
            }
            pub inline fn setSnapshotProperty(self: *const T, snapshot_id_: Guid, e_snapshot_property_id_: VSS_SNAPSHOT_PROPERTY_ID, v_property_: VARIANT) HRESULT {
                return @as(*const IVssFileShareSnapshotProvider.VTable, @ptrCast(self.vtable)).SetSnapshotProperty(@as(*const IVssFileShareSnapshotProvider, @ptrCast(self)), snapshot_id_, e_snapshot_property_id_, v_property_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (1)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.1'
pub extern "vssapi" fn CreateVssExpressWriterInternal(
    pp_writer: ?*?*IVssExpressWriter,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const IXMLDOMDocument = @import("../data/xml/ms_xml.zig").IXMLDOMDocument;
const PWSTR = @import("../foundation.zig").PWSTR;
const VARIANT = @import("../system/com.zig").VARIANT;
const VDS_LUN_INFORMATION = @import("../storage/virtual_disk_service.zig").VDS_LUN_INFORMATION;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
