//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (102)
//--------------------------------------------------------------------------------
pub const OPC_E_NONCONFORMING_URI = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175231));
pub const OPC_E_RELATIVE_URI_REQUIRED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175230));
pub const OPC_E_RELATIONSHIP_URI_REQUIRED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175229));
pub const OPC_E_PART_CANNOT_BE_DIRECTORY = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175228));
pub const OPC_E_UNEXPECTED_CONTENT_TYPE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175227));
pub const OPC_E_INVALID_CONTENT_TYPE_XML = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175226));
pub const OPC_E_MISSING_CONTENT_TYPES = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175225));
pub const OPC_E_NONCONFORMING_CONTENT_TYPES_XML = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175224));
pub const OPC_E_NONCONFORMING_RELS_XML = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175223));
pub const OPC_E_INVALID_RELS_XML = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175222));
pub const OPC_E_DUPLICATE_PART = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175221));
pub const OPC_E_INVALID_OVERRIDE_PART_NAME = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175220));
pub const OPC_E_DUPLICATE_OVERRIDE_PART = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175219));
pub const OPC_E_INVALID_DEFAULT_EXTENSION = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175218));
pub const OPC_E_DUPLICATE_DEFAULT_EXTENSION = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175217));
pub const OPC_E_INVALID_RELATIONSHIP_ID = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175216));
pub const OPC_E_INVALID_RELATIONSHIP_TYPE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175215));
pub const OPC_E_INVALID_RELATIONSHIP_TARGET = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175214));
pub const OPC_E_DUPLICATE_RELATIONSHIP = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175213));
pub const OPC_E_CONFLICTING_SETTINGS = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175212));
pub const OPC_E_DUPLICATE_PIECE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175211));
pub const OPC_E_INVALID_PIECE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175210));
pub const OPC_E_MISSING_PIECE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175209));
pub const OPC_E_NO_SUCH_PART = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175208));
pub const OPC_E_DS_SIGNATURE_CORRUPT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175207));
pub const OPC_E_DS_DIGEST_VALUE_ERROR = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175206));
pub const OPC_E_DS_DUPLICATE_SIGNATURE_ORIGIN_RELATIONSHIP = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175205));
pub const OPC_E_DS_INVALID_SIGNATURE_ORIGIN_RELATIONSHIP = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175204));
pub const OPC_E_DS_INVALID_CERTIFICATE_RELATIONSHIP = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175203));
pub const OPC_E_DS_EXTERNAL_SIGNATURE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175202));
pub const OPC_E_DS_MISSING_SIGNATURE_ORIGIN_PART = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175201));
pub const OPC_E_DS_MISSING_SIGNATURE_PART = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175200));
pub const OPC_E_DS_INVALID_RELATIONSHIP_TRANSFORM_XML = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175199));
pub const OPC_E_DS_INVALID_CANONICALIZATION_METHOD = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175198));
pub const OPC_E_DS_INVALID_RELATIONSHIPS_SIGNING_OPTION = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175197));
pub const OPC_E_DS_INVALID_OPC_SIGNATURE_TIME_FORMAT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175196));
pub const OPC_E_DS_PACKAGE_REFERENCE_URI_RESERVED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175195));
pub const OPC_E_DS_MISSING_SIGNATURE_PROPERTIES_ELEMENT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175194));
pub const OPC_E_DS_MISSING_SIGNATURE_PROPERTY_ELEMENT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175193));
pub const OPC_E_DS_DUPLICATE_SIGNATURE_PROPERTY_ELEMENT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175192));
pub const OPC_E_DS_MISSING_SIGNATURE_TIME_PROPERTY = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175191));
pub const OPC_E_DS_INVALID_SIGNATURE_XML = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175190));
pub const OPC_E_DS_INVALID_SIGNATURE_COUNT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175189));
pub const OPC_E_DS_MISSING_SIGNATURE_ALGORITHM = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175188));
pub const OPC_E_DS_DUPLICATE_PACKAGE_OBJECT_REFERENCES = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175187));
pub const OPC_E_DS_MISSING_PACKAGE_OBJECT_REFERENCE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175186));
pub const OPC_E_DS_EXTERNAL_SIGNATURE_REFERENCE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175185));
pub const OPC_E_DS_REFERENCE_MISSING_CONTENT_TYPE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175184));
pub const OPC_E_DS_MULTIPLE_RELATIONSHIP_TRANSFORMS = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175183));
pub const OPC_E_DS_MISSING_CANONICALIZATION_TRANSFORM = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175182));
pub const OPC_E_MC_UNEXPECTED_ELEMENT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175181));
pub const OPC_E_MC_UNEXPECTED_REQUIRES_ATTR = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175180));
pub const OPC_E_MC_MISSING_REQUIRES_ATTR = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175179));
pub const OPC_E_MC_UNEXPECTED_ATTR = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175178));
pub const OPC_E_MC_INVALID_PREFIX_LIST = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175177));
pub const OPC_E_MC_INVALID_QNAME_LIST = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175176));
pub const OPC_E_MC_NESTED_ALTERNATE_CONTENT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175175));
pub const OPC_E_MC_UNEXPECTED_CHOICE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175174));
pub const OPC_E_MC_MISSING_CHOICE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175173));
pub const OPC_E_MC_INVALID_ENUM_TYPE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175172));
pub const OPC_E_MC_UNKNOWN_NAMESPACE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175170));
pub const OPC_E_MC_UNKNOWN_PREFIX = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175169));
pub const OPC_E_MC_INVALID_ATTRIBUTES_ON_IGNORABLE_ELEMENT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175168));
pub const OPC_E_MC_INVALID_XMLNS_ATTRIBUTE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175167));
pub const OPC_E_INVALID_XML_ENCODING = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175166));
pub const OPC_E_DS_SIGNATURE_REFERENCE_MISSING_URI = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175165));
pub const OPC_E_INVALID_CONTENT_TYPE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175164));
pub const OPC_E_DS_SIGNATURE_PROPERTY_MISSING_TARGET = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175163));
pub const OPC_E_DS_SIGNATURE_METHOD_NOT_SET = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175162));
pub const OPC_E_DS_DEFAULT_DIGEST_METHOD_NOT_SET = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175161));
pub const OPC_E_NO_SUCH_RELATIONSHIP = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175160));
pub const OPC_E_MC_MULTIPLE_FALLBACK_ELEMENTS = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175159));
pub const OPC_E_MC_INCONSISTENT_PROCESS_CONTENT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175158));
pub const OPC_E_MC_INCONSISTENT_PRESERVE_ATTRIBUTES = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175157));
pub const OPC_E_MC_INCONSISTENT_PRESERVE_ELEMENTS = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175156));
pub const OPC_E_INVALID_RELATIONSHIP_TARGET_MODE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175155));
pub const OPC_E_COULD_NOT_RECOVER = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175154));
pub const OPC_E_UNSUPPORTED_PACKAGE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175153));
pub const OPC_E_ENUM_COLLECTION_CHANGED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175152));
pub const OPC_E_ENUM_CANNOT_MOVE_NEXT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175151));
pub const OPC_E_ENUM_CANNOT_MOVE_PREVIOUS = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175150));
pub const OPC_E_ENUM_INVALID_POSITION = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175149));
pub const OPC_E_DS_SIGNATURE_ORIGIN_EXISTS = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175148));
pub const OPC_E_DS_UNSIGNED_PACKAGE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175147));
pub const OPC_E_DS_MISSING_CERTIFICATE_PART = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175146));
pub const OPC_E_NO_SUCH_SETTINGS = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142175145));
pub const OPC_E_ZIP_INCORRECT_DATA_SIZE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171135));
pub const OPC_E_ZIP_CORRUPTED_ARCHIVE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171134));
pub const OPC_E_ZIP_COMPRESSION_FAILED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171133));
pub const OPC_E_ZIP_DECOMPRESSION_FAILED = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171132));
pub const OPC_E_ZIP_INCONSISTENT_FILEITEM = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171131));
pub const OPC_E_ZIP_INCONSISTENT_DIRECTORY = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171130));
pub const OPC_E_ZIP_MISSING_DATA_DESCRIPTOR = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171129));
pub const OPC_E_ZIP_UNSUPPORTEDARCHIVE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171128));
pub const OPC_E_ZIP_CENTRAL_DIRECTORY_TOO_LARGE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171127));
pub const OPC_E_ZIP_NAME_TOO_LARGE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171126));
pub const OPC_E_ZIP_DUPLICATE_NAME = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171125));
pub const OPC_E_ZIP_COMMENT_TOO_LARGE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171124));
pub const OPC_E_ZIP_EXTRA_FIELDS_TOO_LARGE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171123));
pub const OPC_E_ZIP_FILE_HEADER_TOO_LARGE = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171122));
pub const OPC_E_ZIP_MISSING_END_OF_CENTRAL_DIRECTORY = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171121));
pub const OPC_E_ZIP_REQUIRES_64_BIT = @import("../../zig.zig").typedConst(HRESULT, @as(i32, -2142171120));

//--------------------------------------------------------------------------------
// Section: Types (43)
//--------------------------------------------------------------------------------
const CLSID_OpcFactory_Value = Guid.initString("6b2d6ba0-9f3e-4f27-920b-313cc426a39e");
pub const CLSID_OpcFactory = &CLSID_OpcFactory_Value;

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcUri_Value = Guid.initString("bc9c1b9b-d62c-49eb-aef0-3b4e0b28ebed");
pub const IID_IOpcUri = &IID_IOpcUri_Value;
pub const IOpcUri = extern struct {
    pub const VTable = extern struct {
        base: IUri.VTable,
        GetRelationshipsPartUri: *const fn (
            self: *const IOpcUri,
            relationship_part_uri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeUri: *const fn (
            self: *const IOpcUri,
            target_part_uri: ?*IOpcPartUri,
            relative_uri: ?*?*IUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CombinePartUri: *const fn (
            self: *const IOpcUri,
            relative_uri: ?*IUri,
            combined_uri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUri.MethodMixin(T);
            pub inline fn getRelationshipsPartUri(self: *const T, relationship_part_uri_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IOpcUri.VTable, @ptrCast(self.vtable)).GetRelationshipsPartUri(@as(*const IOpcUri, @ptrCast(self)), relationship_part_uri_);
            }
            pub inline fn getRelativeUri(self: *const T, target_part_uri_: ?*IOpcPartUri, relative_uri_: ?*?*IUri) HRESULT {
                return @as(*const IOpcUri.VTable, @ptrCast(self.vtable)).GetRelativeUri(@as(*const IOpcUri, @ptrCast(self)), target_part_uri_, relative_uri_);
            }
            pub inline fn combinePartUri(self: *const T, relative_uri_: ?*IUri, combined_uri_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IOpcUri.VTable, @ptrCast(self.vtable)).CombinePartUri(@as(*const IOpcUri, @ptrCast(self)), relative_uri_, combined_uri_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcPartUri_Value = Guid.initString("7d3babe7-88b2-46ba-85cb-4203cb016c87");
pub const IID_IOpcPartUri = &IID_IOpcPartUri_Value;
pub const IOpcPartUri = extern struct {
    pub const VTable = extern struct {
        base: IOpcUri.VTable,
        ComparePartUri: *const fn (
            self: *const IOpcPartUri,
            part_uri: ?*IOpcPartUri,
            comparison_result: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceUri: *const fn (
            self: *const IOpcPartUri,
            source_uri: ?*?*IOpcUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRelationshipsPartUri: *const fn (
            self: *const IOpcPartUri,
            is_relationship_uri: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOpcUri.MethodMixin(T);
            pub inline fn comparePartUri(self: *const T, part_uri_: ?*IOpcPartUri, comparison_result_: ?*i32) HRESULT {
                return @as(*const IOpcPartUri.VTable, @ptrCast(self.vtable)).ComparePartUri(@as(*const IOpcPartUri, @ptrCast(self)), part_uri_, comparison_result_);
            }
            pub inline fn getSourceUri(self: *const T, source_uri_: ?*?*IOpcUri) HRESULT {
                return @as(*const IOpcPartUri.VTable, @ptrCast(self.vtable)).GetSourceUri(@as(*const IOpcPartUri, @ptrCast(self)), source_uri_);
            }
            pub inline fn isRelationshipsPartUri(self: *const T, is_relationship_uri_: ?*BOOL) HRESULT {
                return @as(*const IOpcPartUri.VTable, @ptrCast(self.vtable)).IsRelationshipsPartUri(@as(*const IOpcPartUri, @ptrCast(self)), is_relationship_uri_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OPC_URI_TARGET_MODE = enum(i32) {
    INTERNAL = 0,
    EXTERNAL = 1,
};
pub const OPC_URI_TARGET_MODE_INTERNAL = OPC_URI_TARGET_MODE.INTERNAL;
pub const OPC_URI_TARGET_MODE_EXTERNAL = OPC_URI_TARGET_MODE.EXTERNAL;

pub const OPC_COMPRESSION_OPTIONS = enum(i32) {
    NONE = -1,
    NORMAL = 0,
    MAXIMUM = 1,
    FAST = 2,
    SUPERFAST = 3,
};
pub const OPC_COMPRESSION_NONE = OPC_COMPRESSION_OPTIONS.NONE;
pub const OPC_COMPRESSION_NORMAL = OPC_COMPRESSION_OPTIONS.NORMAL;
pub const OPC_COMPRESSION_MAXIMUM = OPC_COMPRESSION_OPTIONS.MAXIMUM;
pub const OPC_COMPRESSION_FAST = OPC_COMPRESSION_OPTIONS.FAST;
pub const OPC_COMPRESSION_SUPERFAST = OPC_COMPRESSION_OPTIONS.SUPERFAST;

pub const OPC_STREAM_IO_MODE = enum(i32) {
    READ = 1,
    WRITE = 2,
};
pub const OPC_STREAM_IO_READ = OPC_STREAM_IO_MODE.READ;
pub const OPC_STREAM_IO_WRITE = OPC_STREAM_IO_MODE.WRITE;

pub const OPC_READ_FLAGS = enum(u32) {
    READ_DEFAULT = 0,
    VALIDATE_ON_LOAD = 1,
    CACHE_ON_ACCESS = 2,
    _,
    pub fn initFlags(o: struct {
        READ_DEFAULT: u1 = 0,
        VALIDATE_ON_LOAD: u1 = 0,
        CACHE_ON_ACCESS: u1 = 0,
    }) OPC_READ_FLAGS {
        return @as(OPC_READ_FLAGS, @enumFromInt((if (o.READ_DEFAULT == 1) @intFromEnum(OPC_READ_FLAGS.READ_DEFAULT) else 0) | (if (o.VALIDATE_ON_LOAD == 1) @intFromEnum(OPC_READ_FLAGS.VALIDATE_ON_LOAD) else 0) | (if (o.CACHE_ON_ACCESS == 1) @intFromEnum(OPC_READ_FLAGS.CACHE_ON_ACCESS) else 0)));
    }
};
pub const OPC_READ_DEFAULT = OPC_READ_FLAGS.READ_DEFAULT;
pub const OPC_VALIDATE_ON_LOAD = OPC_READ_FLAGS.VALIDATE_ON_LOAD;
pub const OPC_CACHE_ON_ACCESS = OPC_READ_FLAGS.CACHE_ON_ACCESS;

pub const OPC_WRITE_FLAGS = enum(u32) {
    DEFAULT = 0,
    FORCE_ZIP32 = 1,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        FORCE_ZIP32: u1 = 0,
    }) OPC_WRITE_FLAGS {
        return @as(OPC_WRITE_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(OPC_WRITE_FLAGS.DEFAULT) else 0) | (if (o.FORCE_ZIP32 == 1) @intFromEnum(OPC_WRITE_FLAGS.FORCE_ZIP32) else 0)));
    }
};
pub const OPC_WRITE_DEFAULT = OPC_WRITE_FLAGS.DEFAULT;
pub const OPC_WRITE_FORCE_ZIP32 = OPC_WRITE_FLAGS.FORCE_ZIP32;

pub const OPC_SIGNATURE_VALIDATION_RESULT = enum(i32) {
    VALID = 0,
    INVALID = -1,
};
pub const OPC_SIGNATURE_VALID = OPC_SIGNATURE_VALIDATION_RESULT.VALID;
pub const OPC_SIGNATURE_INVALID = OPC_SIGNATURE_VALIDATION_RESULT.INVALID;

pub const OPC_CANONICALIZATION_METHOD = enum(i32) {
    NONE = 0,
    C14N = 1,
    C14N_WITH_COMMENTS = 2,
};
pub const OPC_CANONICALIZATION_NONE = OPC_CANONICALIZATION_METHOD.NONE;
pub const OPC_CANONICALIZATION_C14N = OPC_CANONICALIZATION_METHOD.C14N;
pub const OPC_CANONICALIZATION_C14N_WITH_COMMENTS = OPC_CANONICALIZATION_METHOD.C14N_WITH_COMMENTS;

pub const OPC_RELATIONSHIP_SELECTOR = enum(i32) {
    ID = 0,
    TYPE = 1,
};
pub const OPC_RELATIONSHIP_SELECT_BY_ID = OPC_RELATIONSHIP_SELECTOR.ID;
pub const OPC_RELATIONSHIP_SELECT_BY_TYPE = OPC_RELATIONSHIP_SELECTOR.TYPE;

pub const OPC_RELATIONSHIPS_SIGNING_OPTION = enum(i32) {
    USING_SELECTORS = 0,
    PART = 1,
};
pub const OPC_RELATIONSHIP_SIGN_USING_SELECTORS = OPC_RELATIONSHIPS_SIGNING_OPTION.USING_SELECTORS;
pub const OPC_RELATIONSHIP_SIGN_PART = OPC_RELATIONSHIPS_SIGNING_OPTION.PART;

pub const OPC_CERTIFICATE_EMBEDDING_OPTION = enum(i32) {
    IN_CERTIFICATE_PART = 0,
    IN_SIGNATURE_PART = 1,
    NOT_EMBEDDED = 2,
};
pub const OPC_CERTIFICATE_IN_CERTIFICATE_PART = OPC_CERTIFICATE_EMBEDDING_OPTION.IN_CERTIFICATE_PART;
pub const OPC_CERTIFICATE_IN_SIGNATURE_PART = OPC_CERTIFICATE_EMBEDDING_OPTION.IN_SIGNATURE_PART;
pub const OPC_CERTIFICATE_NOT_EMBEDDED = OPC_CERTIFICATE_EMBEDDING_OPTION.NOT_EMBEDDED;

pub const OPC_SIGNATURE_TIME_FORMAT = enum(i32) {
    MILLISECONDS = 0,
    SECONDS = 1,
    MINUTES = 2,
    DAYS = 3,
    MONTHS = 4,
    YEARS = 5,
};
pub const OPC_SIGNATURE_TIME_FORMAT_MILLISECONDS = OPC_SIGNATURE_TIME_FORMAT.MILLISECONDS;
pub const OPC_SIGNATURE_TIME_FORMAT_SECONDS = OPC_SIGNATURE_TIME_FORMAT.SECONDS;
pub const OPC_SIGNATURE_TIME_FORMAT_MINUTES = OPC_SIGNATURE_TIME_FORMAT.MINUTES;
pub const OPC_SIGNATURE_TIME_FORMAT_DAYS = OPC_SIGNATURE_TIME_FORMAT.DAYS;
pub const OPC_SIGNATURE_TIME_FORMAT_MONTHS = OPC_SIGNATURE_TIME_FORMAT.MONTHS;
pub const OPC_SIGNATURE_TIME_FORMAT_YEARS = OPC_SIGNATURE_TIME_FORMAT.YEARS;

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcPackage_Value = Guid.initString("42195949-3b79-4fc8-89c6-fc7fb979ee70");
pub const IID_IOpcPackage = &IID_IOpcPackage_Value;
pub const IOpcPackage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPartSet: *const fn (
            self: *const IOpcPackage,
            part_set: ?*?*IOpcPartSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelationshipSet: *const fn (
            self: *const IOpcPackage,
            relationship_set: ?*?*IOpcRelationshipSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPartSet(self: *const T, part_set_: ?*?*IOpcPartSet) HRESULT {
                return @as(*const IOpcPackage.VTable, @ptrCast(self.vtable)).GetPartSet(@as(*const IOpcPackage, @ptrCast(self)), part_set_);
            }
            pub inline fn getRelationshipSet(self: *const T, relationship_set_: ?*?*IOpcRelationshipSet) HRESULT {
                return @as(*const IOpcPackage.VTable, @ptrCast(self.vtable)).GetRelationshipSet(@as(*const IOpcPackage, @ptrCast(self)), relationship_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcPart_Value = Guid.initString("42195949-3b79-4fc8-89c6-fc7fb979ee71");
pub const IID_IOpcPart = &IID_IOpcPart_Value;
pub const IOpcPart = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRelationshipSet: *const fn (
            self: *const IOpcPart,
            relationship_set: ?*?*IOpcRelationshipSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentStream: *const fn (
            self: *const IOpcPart,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IOpcPart,
            name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentType: *const fn (
            self: *const IOpcPart,
            content_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompressionOptions: *const fn (
            self: *const IOpcPart,
            compression_options: ?*OPC_COMPRESSION_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRelationshipSet(self: *const T, relationship_set_: ?*?*IOpcRelationshipSet) HRESULT {
                return @as(*const IOpcPart.VTable, @ptrCast(self.vtable)).GetRelationshipSet(@as(*const IOpcPart, @ptrCast(self)), relationship_set_);
            }
            pub inline fn getContentStream(self: *const T, stream_: ?*?*IStream) HRESULT {
                return @as(*const IOpcPart.VTable, @ptrCast(self.vtable)).GetContentStream(@as(*const IOpcPart, @ptrCast(self)), stream_);
            }
            pub inline fn getName(self: *const T, name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IOpcPart.VTable, @ptrCast(self.vtable)).GetName(@as(*const IOpcPart, @ptrCast(self)), name_);
            }
            pub inline fn getContentType(self: *const T, content_type_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcPart.VTable, @ptrCast(self.vtable)).GetContentType(@as(*const IOpcPart, @ptrCast(self)), content_type_);
            }
            pub inline fn getCompressionOptions(self: *const T, compression_options_: ?*OPC_COMPRESSION_OPTIONS) HRESULT {
                return @as(*const IOpcPart.VTable, @ptrCast(self.vtable)).GetCompressionOptions(@as(*const IOpcPart, @ptrCast(self)), compression_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcRelationship_Value = Guid.initString("42195949-3b79-4fc8-89c6-fc7fb979ee72");
pub const IID_IOpcRelationship = &IID_IOpcRelationship_Value;
pub const IOpcRelationship = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetId: *const fn (
            self: *const IOpcRelationship,
            relationship_identifier: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelationshipType: *const fn (
            self: *const IOpcRelationship,
            relationship_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceUri: *const fn (
            self: *const IOpcRelationship,
            source_uri: ?*?*IOpcUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetUri: *const fn (
            self: *const IOpcRelationship,
            target_uri: ?*?*IUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetMode: *const fn (
            self: *const IOpcRelationship,
            target_mode: ?*OPC_URI_TARGET_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getId(self: *const T, relationship_identifier_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcRelationship.VTable, @ptrCast(self.vtable)).GetId(@as(*const IOpcRelationship, @ptrCast(self)), relationship_identifier_);
            }
            pub inline fn getRelationshipType(self: *const T, relationship_type_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcRelationship.VTable, @ptrCast(self.vtable)).GetRelationshipType(@as(*const IOpcRelationship, @ptrCast(self)), relationship_type_);
            }
            pub inline fn getSourceUri(self: *const T, source_uri_: ?*?*IOpcUri) HRESULT {
                return @as(*const IOpcRelationship.VTable, @ptrCast(self.vtable)).GetSourceUri(@as(*const IOpcRelationship, @ptrCast(self)), source_uri_);
            }
            pub inline fn getTargetUri(self: *const T, target_uri_: ?*?*IUri) HRESULT {
                return @as(*const IOpcRelationship.VTable, @ptrCast(self.vtable)).GetTargetUri(@as(*const IOpcRelationship, @ptrCast(self)), target_uri_);
            }
            pub inline fn getTargetMode(self: *const T, target_mode_: ?*OPC_URI_TARGET_MODE) HRESULT {
                return @as(*const IOpcRelationship.VTable, @ptrCast(self.vtable)).GetTargetMode(@as(*const IOpcRelationship, @ptrCast(self)), target_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcPartSet_Value = Guid.initString("42195949-3b79-4fc8-89c6-fc7fb979ee73");
pub const IID_IOpcPartSet = &IID_IOpcPartSet_Value;
pub const IOpcPartSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPart: *const fn (
            self: *const IOpcPartSet,
            name: ?*IOpcPartUri,
            part: ?*?*IOpcPart,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePart: *const fn (
            self: *const IOpcPartSet,
            name: ?*IOpcPartUri,
            content_type: ?[*:0]const u16,
            compression_options: OPC_COMPRESSION_OPTIONS,
            part: ?*?*IOpcPart,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePart: *const fn (
            self: *const IOpcPartSet,
            name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PartExists: *const fn (
            self: *const IOpcPartSet,
            name: ?*IOpcPartUri,
            part_exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IOpcPartSet,
            part_enumerator: ?*?*IOpcPartEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPart(self: *const T, name_: ?*IOpcPartUri, part_: ?*?*IOpcPart) HRESULT {
                return @as(*const IOpcPartSet.VTable, @ptrCast(self.vtable)).GetPart(@as(*const IOpcPartSet, @ptrCast(self)), name_, part_);
            }
            pub inline fn createPart(self: *const T, name_: ?*IOpcPartUri, content_type_: ?[*:0]const u16, compression_options_: OPC_COMPRESSION_OPTIONS, part_: ?*?*IOpcPart) HRESULT {
                return @as(*const IOpcPartSet.VTable, @ptrCast(self.vtable)).CreatePart(@as(*const IOpcPartSet, @ptrCast(self)), name_, content_type_, compression_options_, part_);
            }
            pub inline fn deletePart(self: *const T, name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IOpcPartSet.VTable, @ptrCast(self.vtable)).DeletePart(@as(*const IOpcPartSet, @ptrCast(self)), name_);
            }
            pub inline fn partExists(self: *const T, name_: ?*IOpcPartUri, part_exists_: ?*BOOL) HRESULT {
                return @as(*const IOpcPartSet.VTable, @ptrCast(self.vtable)).PartExists(@as(*const IOpcPartSet, @ptrCast(self)), name_, part_exists_);
            }
            pub inline fn getEnumerator(self: *const T, part_enumerator_: ?*?*IOpcPartEnumerator) HRESULT {
                return @as(*const IOpcPartSet.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IOpcPartSet, @ptrCast(self)), part_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcRelationshipSet_Value = Guid.initString("42195949-3b79-4fc8-89c6-fc7fb979ee74");
pub const IID_IOpcRelationshipSet = &IID_IOpcRelationshipSet_Value;
pub const IOpcRelationshipSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRelationship: *const fn (
            self: *const IOpcRelationshipSet,
            relationship_identifier: ?[*:0]const u16,
            relationship: ?*?*IOpcRelationship,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRelationship: *const fn (
            self: *const IOpcRelationshipSet,
            relationship_identifier: ?[*:0]const u16,
            relationship_type: ?[*:0]const u16,
            target_uri: ?*IUri,
            target_mode: OPC_URI_TARGET_MODE,
            relationship: ?*?*IOpcRelationship,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRelationship: *const fn (
            self: *const IOpcRelationshipSet,
            relationship_identifier: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RelationshipExists: *const fn (
            self: *const IOpcRelationshipSet,
            relationship_identifier: ?[*:0]const u16,
            relationship_exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IOpcRelationshipSet,
            relationship_enumerator: ?*?*IOpcRelationshipEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumeratorForType: *const fn (
            self: *const IOpcRelationshipSet,
            relationship_type: ?[*:0]const u16,
            relationship_enumerator: ?*?*IOpcRelationshipEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelationshipsContentStream: *const fn (
            self: *const IOpcRelationshipSet,
            contents: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRelationship(self: *const T, relationship_identifier_: ?[*:0]const u16, relationship_: ?*?*IOpcRelationship) HRESULT {
                return @as(*const IOpcRelationshipSet.VTable, @ptrCast(self.vtable)).GetRelationship(@as(*const IOpcRelationshipSet, @ptrCast(self)), relationship_identifier_, relationship_);
            }
            pub inline fn createRelationship(self: *const T, relationship_identifier_: ?[*:0]const u16, relationship_type_: ?[*:0]const u16, target_uri_: ?*IUri, target_mode_: OPC_URI_TARGET_MODE, relationship_: ?*?*IOpcRelationship) HRESULT {
                return @as(*const IOpcRelationshipSet.VTable, @ptrCast(self.vtable)).CreateRelationship(@as(*const IOpcRelationshipSet, @ptrCast(self)), relationship_identifier_, relationship_type_, target_uri_, target_mode_, relationship_);
            }
            pub inline fn deleteRelationship(self: *const T, relationship_identifier_: ?[*:0]const u16) HRESULT {
                return @as(*const IOpcRelationshipSet.VTable, @ptrCast(self.vtable)).DeleteRelationship(@as(*const IOpcRelationshipSet, @ptrCast(self)), relationship_identifier_);
            }
            pub inline fn relationshipExists(self: *const T, relationship_identifier_: ?[*:0]const u16, relationship_exists_: ?*BOOL) HRESULT {
                return @as(*const IOpcRelationshipSet.VTable, @ptrCast(self.vtable)).RelationshipExists(@as(*const IOpcRelationshipSet, @ptrCast(self)), relationship_identifier_, relationship_exists_);
            }
            pub inline fn getEnumerator(self: *const T, relationship_enumerator_: ?*?*IOpcRelationshipEnumerator) HRESULT {
                return @as(*const IOpcRelationshipSet.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IOpcRelationshipSet, @ptrCast(self)), relationship_enumerator_);
            }
            pub inline fn getEnumeratorForType(self: *const T, relationship_type_: ?[*:0]const u16, relationship_enumerator_: ?*?*IOpcRelationshipEnumerator) HRESULT {
                return @as(*const IOpcRelationshipSet.VTable, @ptrCast(self.vtable)).GetEnumeratorForType(@as(*const IOpcRelationshipSet, @ptrCast(self)), relationship_type_, relationship_enumerator_);
            }
            pub inline fn getRelationshipsContentStream(self: *const T, contents_: ?*?*IStream) HRESULT {
                return @as(*const IOpcRelationshipSet.VTable, @ptrCast(self.vtable)).GetRelationshipsContentStream(@as(*const IOpcRelationshipSet, @ptrCast(self)), contents_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcPartEnumerator_Value = Guid.initString("42195949-3b79-4fc8-89c6-fc7fb979ee75");
pub const IID_IOpcPartEnumerator = &IID_IOpcPartEnumerator_Value;
pub const IOpcPartEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IOpcPartEnumerator,
            has_next: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MovePrevious: *const fn (
            self: *const IOpcPartEnumerator,
            has_previous: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IOpcPartEnumerator,
            part: ?*?*IOpcPart,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOpcPartEnumerator,
            copy: ?*?*IOpcPartEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_next_: ?*BOOL) HRESULT {
                return @as(*const IOpcPartEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IOpcPartEnumerator, @ptrCast(self)), has_next_);
            }
            pub inline fn movePrevious(self: *const T, has_previous_: ?*BOOL) HRESULT {
                return @as(*const IOpcPartEnumerator.VTable, @ptrCast(self.vtable)).MovePrevious(@as(*const IOpcPartEnumerator, @ptrCast(self)), has_previous_);
            }
            pub inline fn getCurrent(self: *const T, part_: ?*?*IOpcPart) HRESULT {
                return @as(*const IOpcPartEnumerator.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IOpcPartEnumerator, @ptrCast(self)), part_);
            }
            pub inline fn clone(self: *const T, copy_: ?*?*IOpcPartEnumerator) HRESULT {
                return @as(*const IOpcPartEnumerator.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOpcPartEnumerator, @ptrCast(self)), copy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcRelationshipEnumerator_Value = Guid.initString("42195949-3b79-4fc8-89c6-fc7fb979ee76");
pub const IID_IOpcRelationshipEnumerator = &IID_IOpcRelationshipEnumerator_Value;
pub const IOpcRelationshipEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IOpcRelationshipEnumerator,
            has_next: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MovePrevious: *const fn (
            self: *const IOpcRelationshipEnumerator,
            has_previous: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IOpcRelationshipEnumerator,
            relationship: ?*?*IOpcRelationship,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOpcRelationshipEnumerator,
            copy: ?*?*IOpcRelationshipEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_next_: ?*BOOL) HRESULT {
                return @as(*const IOpcRelationshipEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IOpcRelationshipEnumerator, @ptrCast(self)), has_next_);
            }
            pub inline fn movePrevious(self: *const T, has_previous_: ?*BOOL) HRESULT {
                return @as(*const IOpcRelationshipEnumerator.VTable, @ptrCast(self.vtable)).MovePrevious(@as(*const IOpcRelationshipEnumerator, @ptrCast(self)), has_previous_);
            }
            pub inline fn getCurrent(self: *const T, relationship_: ?*?*IOpcRelationship) HRESULT {
                return @as(*const IOpcRelationshipEnumerator.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IOpcRelationshipEnumerator, @ptrCast(self)), relationship_);
            }
            pub inline fn clone(self: *const T, copy_: ?*?*IOpcRelationshipEnumerator) HRESULT {
                return @as(*const IOpcRelationshipEnumerator.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOpcRelationshipEnumerator, @ptrCast(self)), copy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignaturePartReference_Value = Guid.initString("e24231ca-59f4-484e-b64b-36eeda36072c");
pub const IID_IOpcSignaturePartReference = &IID_IOpcSignaturePartReference_Value;
pub const IOpcSignaturePartReference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPartName: *const fn (
            self: *const IOpcSignaturePartReference,
            part_name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentType: *const fn (
            self: *const IOpcSignaturePartReference,
            content_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDigestMethod: *const fn (
            self: *const IOpcSignaturePartReference,
            digest_method: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDigestValue: *const fn (
            self: *const IOpcSignaturePartReference,
            digest_value: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformMethod: *const fn (
            self: *const IOpcSignaturePartReference,
            transform_method: ?*OPC_CANONICALIZATION_METHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPartName(self: *const T, part_name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IOpcSignaturePartReference.VTable, @ptrCast(self.vtable)).GetPartName(@as(*const IOpcSignaturePartReference, @ptrCast(self)), part_name_);
            }
            pub inline fn getContentType(self: *const T, content_type_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcSignaturePartReference.VTable, @ptrCast(self.vtable)).GetContentType(@as(*const IOpcSignaturePartReference, @ptrCast(self)), content_type_);
            }
            pub inline fn getDigestMethod(self: *const T, digest_method_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcSignaturePartReference.VTable, @ptrCast(self.vtable)).GetDigestMethod(@as(*const IOpcSignaturePartReference, @ptrCast(self)), digest_method_);
            }
            pub inline fn getDigestValue(self: *const T, digest_value_: [*]?*u8, count_: ?*u32) HRESULT {
                return @as(*const IOpcSignaturePartReference.VTable, @ptrCast(self.vtable)).GetDigestValue(@as(*const IOpcSignaturePartReference, @ptrCast(self)), digest_value_, count_);
            }
            pub inline fn getTransformMethod(self: *const T, transform_method_: ?*OPC_CANONICALIZATION_METHOD) HRESULT {
                return @as(*const IOpcSignaturePartReference.VTable, @ptrCast(self.vtable)).GetTransformMethod(@as(*const IOpcSignaturePartReference, @ptrCast(self)), transform_method_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignatureRelationshipReference_Value = Guid.initString("57babac6-9d4a-4e50-8b86-e5d4051eae7c");
pub const IID_IOpcSignatureRelationshipReference = &IID_IOpcSignatureRelationshipReference_Value;
pub const IOpcSignatureRelationshipReference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSourceUri: *const fn (
            self: *const IOpcSignatureRelationshipReference,
            source_uri: ?*?*IOpcUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDigestMethod: *const fn (
            self: *const IOpcSignatureRelationshipReference,
            digest_method: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDigestValue: *const fn (
            self: *const IOpcSignatureRelationshipReference,
            digest_value: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformMethod: *const fn (
            self: *const IOpcSignatureRelationshipReference,
            transform_method: ?*OPC_CANONICALIZATION_METHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelationshipSigningOption: *const fn (
            self: *const IOpcSignatureRelationshipReference,
            relationship_signing_option: ?*OPC_RELATIONSHIPS_SIGNING_OPTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelationshipSelectorEnumerator: *const fn (
            self: *const IOpcSignatureRelationshipReference,
            selector_enumerator: ?*?*IOpcRelationshipSelectorEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSourceUri(self: *const T, source_uri_: ?*?*IOpcUri) HRESULT {
                return @as(*const IOpcSignatureRelationshipReference.VTable, @ptrCast(self.vtable)).GetSourceUri(@as(*const IOpcSignatureRelationshipReference, @ptrCast(self)), source_uri_);
            }
            pub inline fn getDigestMethod(self: *const T, digest_method_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcSignatureRelationshipReference.VTable, @ptrCast(self.vtable)).GetDigestMethod(@as(*const IOpcSignatureRelationshipReference, @ptrCast(self)), digest_method_);
            }
            pub inline fn getDigestValue(self: *const T, digest_value_: [*]?*u8, count_: ?*u32) HRESULT {
                return @as(*const IOpcSignatureRelationshipReference.VTable, @ptrCast(self.vtable)).GetDigestValue(@as(*const IOpcSignatureRelationshipReference, @ptrCast(self)), digest_value_, count_);
            }
            pub inline fn getTransformMethod(self: *const T, transform_method_: ?*OPC_CANONICALIZATION_METHOD) HRESULT {
                return @as(*const IOpcSignatureRelationshipReference.VTable, @ptrCast(self.vtable)).GetTransformMethod(@as(*const IOpcSignatureRelationshipReference, @ptrCast(self)), transform_method_);
            }
            pub inline fn getRelationshipSigningOption(self: *const T, relationship_signing_option_: ?*OPC_RELATIONSHIPS_SIGNING_OPTION) HRESULT {
                return @as(*const IOpcSignatureRelationshipReference.VTable, @ptrCast(self.vtable)).GetRelationshipSigningOption(@as(*const IOpcSignatureRelationshipReference, @ptrCast(self)), relationship_signing_option_);
            }
            pub inline fn getRelationshipSelectorEnumerator(self: *const T, selector_enumerator_: ?*?*IOpcRelationshipSelectorEnumerator) HRESULT {
                return @as(*const IOpcSignatureRelationshipReference.VTable, @ptrCast(self.vtable)).GetRelationshipSelectorEnumerator(@as(*const IOpcSignatureRelationshipReference, @ptrCast(self)), selector_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcRelationshipSelector_Value = Guid.initString("f8f26c7f-b28f-4899-84c8-5d5639ede75f");
pub const IID_IOpcRelationshipSelector = &IID_IOpcRelationshipSelector_Value;
pub const IOpcRelationshipSelector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSelectorType: *const fn (
            self: *const IOpcRelationshipSelector,
            selector: ?*OPC_RELATIONSHIP_SELECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectionCriterion: *const fn (
            self: *const IOpcRelationshipSelector,
            selection_criterion: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSelectorType(self: *const T, selector_: ?*OPC_RELATIONSHIP_SELECTOR) HRESULT {
                return @as(*const IOpcRelationshipSelector.VTable, @ptrCast(self.vtable)).GetSelectorType(@as(*const IOpcRelationshipSelector, @ptrCast(self)), selector_);
            }
            pub inline fn getSelectionCriterion(self: *const T, selection_criterion_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcRelationshipSelector.VTable, @ptrCast(self.vtable)).GetSelectionCriterion(@as(*const IOpcRelationshipSelector, @ptrCast(self)), selection_criterion_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignatureReference_Value = Guid.initString("1b47005e-3011-4edc-be6f-0f65e5ab0342");
pub const IID_IOpcSignatureReference = &IID_IOpcSignatureReference_Value;
pub const IOpcSignatureReference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetId: *const fn (
            self: *const IOpcSignatureReference,
            reference_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUri: *const fn (
            self: *const IOpcSignatureReference,
            reference_uri: ?*?*IUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IOpcSignatureReference,
            type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformMethod: *const fn (
            self: *const IOpcSignatureReference,
            transform_method: ?*OPC_CANONICALIZATION_METHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDigestMethod: *const fn (
            self: *const IOpcSignatureReference,
            digest_method: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDigestValue: *const fn (
            self: *const IOpcSignatureReference,
            digest_value: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getId(self: *const T, reference_id_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcSignatureReference.VTable, @ptrCast(self.vtable)).GetId(@as(*const IOpcSignatureReference, @ptrCast(self)), reference_id_);
            }
            pub inline fn getUri(self: *const T, reference_uri_: ?*?*IUri) HRESULT {
                return @as(*const IOpcSignatureReference.VTable, @ptrCast(self.vtable)).GetUri(@as(*const IOpcSignatureReference, @ptrCast(self)), reference_uri_);
            }
            pub inline fn getType(self: *const T, type_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcSignatureReference.VTable, @ptrCast(self.vtable)).GetType(@as(*const IOpcSignatureReference, @ptrCast(self)), type_);
            }
            pub inline fn getTransformMethod(self: *const T, transform_method_: ?*OPC_CANONICALIZATION_METHOD) HRESULT {
                return @as(*const IOpcSignatureReference.VTable, @ptrCast(self.vtable)).GetTransformMethod(@as(*const IOpcSignatureReference, @ptrCast(self)), transform_method_);
            }
            pub inline fn getDigestMethod(self: *const T, digest_method_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcSignatureReference.VTable, @ptrCast(self.vtable)).GetDigestMethod(@as(*const IOpcSignatureReference, @ptrCast(self)), digest_method_);
            }
            pub inline fn getDigestValue(self: *const T, digest_value_: [*]?*u8, count_: ?*u32) HRESULT {
                return @as(*const IOpcSignatureReference.VTable, @ptrCast(self.vtable)).GetDigestValue(@as(*const IOpcSignatureReference, @ptrCast(self)), digest_value_, count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignatureCustomObject_Value = Guid.initString("5d77a19e-62c1-44e7-becd-45da5ae51a56");
pub const IID_IOpcSignatureCustomObject = &IID_IOpcSignatureCustomObject_Value;
pub const IOpcSignatureCustomObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetXml: *const fn (
            self: *const IOpcSignatureCustomObject,
            xml_markup: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getXml(self: *const T, xml_markup_: [*]?*u8, count_: ?*u32) HRESULT {
                return @as(*const IOpcSignatureCustomObject.VTable, @ptrCast(self.vtable)).GetXml(@as(*const IOpcSignatureCustomObject, @ptrCast(self)), xml_markup_, count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcDigitalSignature_Value = Guid.initString("52ab21dd-1cd0-4949-bc80-0c1232d00cb4");
pub const IID_IOpcDigitalSignature = &IID_IOpcDigitalSignature_Value;
pub const IOpcDigitalSignature = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNamespaces: *const fn (
            self: *const IOpcDigitalSignature,
            prefixes: [*]?*?PWSTR,
            namespaces: [*]?*?PWSTR,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureId: *const fn (
            self: *const IOpcDigitalSignature,
            signature_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignaturePartName: *const fn (
            self: *const IOpcDigitalSignature,
            signature_part_name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureMethod: *const fn (
            self: *const IOpcDigitalSignature,
            signature_method: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCanonicalizationMethod: *const fn (
            self: *const IOpcDigitalSignature,
            canonicalization_method: ?*OPC_CANONICALIZATION_METHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureValue: *const fn (
            self: *const IOpcDigitalSignature,
            signature_value: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignaturePartReferenceEnumerator: *const fn (
            self: *const IOpcDigitalSignature,
            part_reference_enumerator: ?*?*IOpcSignaturePartReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureRelationshipReferenceEnumerator: *const fn (
            self: *const IOpcDigitalSignature,
            relationship_reference_enumerator: ?*?*IOpcSignatureRelationshipReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningTime: *const fn (
            self: *const IOpcDigitalSignature,
            signing_time: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimeFormat: *const fn (
            self: *const IOpcDigitalSignature,
            time_format: ?*OPC_SIGNATURE_TIME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPackageObjectReference: *const fn (
            self: *const IOpcDigitalSignature,
            package_object_reference: ?*?*IOpcSignatureReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateEnumerator: *const fn (
            self: *const IOpcDigitalSignature,
            certificate_enumerator: ?*?*IOpcCertificateEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomReferenceEnumerator: *const fn (
            self: *const IOpcDigitalSignature,
            custom_reference_enumerator: ?*?*IOpcSignatureReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomObjectEnumerator: *const fn (
            self: *const IOpcDigitalSignature,
            custom_object_enumerator: ?*?*IOpcSignatureCustomObjectEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureXml: *const fn (
            self: *const IOpcDigitalSignature,
            signature_xml: ?*?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNamespaces(self: *const T, prefixes_: [*]?*?PWSTR, namespaces_: [*]?*?PWSTR, count_: ?*u32) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetNamespaces(@as(*const IOpcDigitalSignature, @ptrCast(self)), prefixes_, namespaces_, count_);
            }
            pub inline fn getSignatureId(self: *const T, signature_id_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetSignatureId(@as(*const IOpcDigitalSignature, @ptrCast(self)), signature_id_);
            }
            pub inline fn getSignaturePartName(self: *const T, signature_part_name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetSignaturePartName(@as(*const IOpcDigitalSignature, @ptrCast(self)), signature_part_name_);
            }
            pub inline fn getSignatureMethod(self: *const T, signature_method_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetSignatureMethod(@as(*const IOpcDigitalSignature, @ptrCast(self)), signature_method_);
            }
            pub inline fn getCanonicalizationMethod(self: *const T, canonicalization_method_: ?*OPC_CANONICALIZATION_METHOD) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetCanonicalizationMethod(@as(*const IOpcDigitalSignature, @ptrCast(self)), canonicalization_method_);
            }
            pub inline fn getSignatureValue(self: *const T, signature_value_: [*]?*u8, count_: ?*u32) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetSignatureValue(@as(*const IOpcDigitalSignature, @ptrCast(self)), signature_value_, count_);
            }
            pub inline fn getSignaturePartReferenceEnumerator(self: *const T, part_reference_enumerator_: ?*?*IOpcSignaturePartReferenceEnumerator) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetSignaturePartReferenceEnumerator(@as(*const IOpcDigitalSignature, @ptrCast(self)), part_reference_enumerator_);
            }
            pub inline fn getSignatureRelationshipReferenceEnumerator(self: *const T, relationship_reference_enumerator_: ?*?*IOpcSignatureRelationshipReferenceEnumerator) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetSignatureRelationshipReferenceEnumerator(@as(*const IOpcDigitalSignature, @ptrCast(self)), relationship_reference_enumerator_);
            }
            pub inline fn getSigningTime(self: *const T, signing_time_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetSigningTime(@as(*const IOpcDigitalSignature, @ptrCast(self)), signing_time_);
            }
            pub inline fn getTimeFormat(self: *const T, time_format_: ?*OPC_SIGNATURE_TIME_FORMAT) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetTimeFormat(@as(*const IOpcDigitalSignature, @ptrCast(self)), time_format_);
            }
            pub inline fn getPackageObjectReference(self: *const T, package_object_reference_: ?*?*IOpcSignatureReference) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetPackageObjectReference(@as(*const IOpcDigitalSignature, @ptrCast(self)), package_object_reference_);
            }
            pub inline fn getCertificateEnumerator(self: *const T, certificate_enumerator_: ?*?*IOpcCertificateEnumerator) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetCertificateEnumerator(@as(*const IOpcDigitalSignature, @ptrCast(self)), certificate_enumerator_);
            }
            pub inline fn getCustomReferenceEnumerator(self: *const T, custom_reference_enumerator_: ?*?*IOpcSignatureReferenceEnumerator) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetCustomReferenceEnumerator(@as(*const IOpcDigitalSignature, @ptrCast(self)), custom_reference_enumerator_);
            }
            pub inline fn getCustomObjectEnumerator(self: *const T, custom_object_enumerator_: ?*?*IOpcSignatureCustomObjectEnumerator) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetCustomObjectEnumerator(@as(*const IOpcDigitalSignature, @ptrCast(self)), custom_object_enumerator_);
            }
            pub inline fn getSignatureXml(self: *const T, signature_xml_: ?*?*u8, count_: ?*u32) HRESULT {
                return @as(*const IOpcDigitalSignature.VTable, @ptrCast(self.vtable)).GetSignatureXml(@as(*const IOpcDigitalSignature, @ptrCast(self)), signature_xml_, count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSigningOptions_Value = Guid.initString("50d2d6a5-7aeb-46c0-b241-43ab0e9b407e");
pub const IID_IOpcSigningOptions = &IID_IOpcSigningOptions_Value;
pub const IOpcSigningOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSignatureId: *const fn (
            self: *const IOpcSigningOptions,
            signature_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureId: *const fn (
            self: *const IOpcSigningOptions,
            signature_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureMethod: *const fn (
            self: *const IOpcSigningOptions,
            signature_method: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureMethod: *const fn (
            self: *const IOpcSigningOptions,
            signature_method: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultDigestMethod: *const fn (
            self: *const IOpcSigningOptions,
            digest_method: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultDigestMethod: *const fn (
            self: *const IOpcSigningOptions,
            digest_method: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateEmbeddingOption: *const fn (
            self: *const IOpcSigningOptions,
            embedding_option: ?*OPC_CERTIFICATE_EMBEDDING_OPTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateEmbeddingOption: *const fn (
            self: *const IOpcSigningOptions,
            embedding_option: OPC_CERTIFICATE_EMBEDDING_OPTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimeFormat: *const fn (
            self: *const IOpcSigningOptions,
            time_format: ?*OPC_SIGNATURE_TIME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimeFormat: *const fn (
            self: *const IOpcSigningOptions,
            time_format: OPC_SIGNATURE_TIME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignaturePartReferenceSet: *const fn (
            self: *const IOpcSigningOptions,
            part_reference_set: ?*?*IOpcSignaturePartReferenceSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureRelationshipReferenceSet: *const fn (
            self: *const IOpcSigningOptions,
            relationship_reference_set: ?*?*IOpcSignatureRelationshipReferenceSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomObjectSet: *const fn (
            self: *const IOpcSigningOptions,
            custom_object_set: ?*?*IOpcSignatureCustomObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomReferenceSet: *const fn (
            self: *const IOpcSigningOptions,
            custom_reference_set: ?*?*IOpcSignatureReferenceSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateSet: *const fn (
            self: *const IOpcSigningOptions,
            certificate_set: ?*?*IOpcCertificateSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignaturePartName: *const fn (
            self: *const IOpcSigningOptions,
            signature_part_name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignaturePartName: *const fn (
            self: *const IOpcSigningOptions,
            signature_part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSignatureId(self: *const T, signature_id_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetSignatureId(@as(*const IOpcSigningOptions, @ptrCast(self)), signature_id_);
            }
            pub inline fn setSignatureId(self: *const T, signature_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).SetSignatureId(@as(*const IOpcSigningOptions, @ptrCast(self)), signature_id_);
            }
            pub inline fn getSignatureMethod(self: *const T, signature_method_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetSignatureMethod(@as(*const IOpcSigningOptions, @ptrCast(self)), signature_method_);
            }
            pub inline fn setSignatureMethod(self: *const T, signature_method_: ?[*:0]const u16) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).SetSignatureMethod(@as(*const IOpcSigningOptions, @ptrCast(self)), signature_method_);
            }
            pub inline fn getDefaultDigestMethod(self: *const T, digest_method_: ?*?PWSTR) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetDefaultDigestMethod(@as(*const IOpcSigningOptions, @ptrCast(self)), digest_method_);
            }
            pub inline fn setDefaultDigestMethod(self: *const T, digest_method_: ?[*:0]const u16) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).SetDefaultDigestMethod(@as(*const IOpcSigningOptions, @ptrCast(self)), digest_method_);
            }
            pub inline fn getCertificateEmbeddingOption(self: *const T, embedding_option_: ?*OPC_CERTIFICATE_EMBEDDING_OPTION) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetCertificateEmbeddingOption(@as(*const IOpcSigningOptions, @ptrCast(self)), embedding_option_);
            }
            pub inline fn setCertificateEmbeddingOption(self: *const T, embedding_option_: OPC_CERTIFICATE_EMBEDDING_OPTION) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).SetCertificateEmbeddingOption(@as(*const IOpcSigningOptions, @ptrCast(self)), embedding_option_);
            }
            pub inline fn getTimeFormat(self: *const T, time_format_: ?*OPC_SIGNATURE_TIME_FORMAT) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetTimeFormat(@as(*const IOpcSigningOptions, @ptrCast(self)), time_format_);
            }
            pub inline fn setTimeFormat(self: *const T, time_format_: OPC_SIGNATURE_TIME_FORMAT) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).SetTimeFormat(@as(*const IOpcSigningOptions, @ptrCast(self)), time_format_);
            }
            pub inline fn getSignaturePartReferenceSet(self: *const T, part_reference_set_: ?*?*IOpcSignaturePartReferenceSet) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetSignaturePartReferenceSet(@as(*const IOpcSigningOptions, @ptrCast(self)), part_reference_set_);
            }
            pub inline fn getSignatureRelationshipReferenceSet(self: *const T, relationship_reference_set_: ?*?*IOpcSignatureRelationshipReferenceSet) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetSignatureRelationshipReferenceSet(@as(*const IOpcSigningOptions, @ptrCast(self)), relationship_reference_set_);
            }
            pub inline fn getCustomObjectSet(self: *const T, custom_object_set_: ?*?*IOpcSignatureCustomObjectSet) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetCustomObjectSet(@as(*const IOpcSigningOptions, @ptrCast(self)), custom_object_set_);
            }
            pub inline fn getCustomReferenceSet(self: *const T, custom_reference_set_: ?*?*IOpcSignatureReferenceSet) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetCustomReferenceSet(@as(*const IOpcSigningOptions, @ptrCast(self)), custom_reference_set_);
            }
            pub inline fn getCertificateSet(self: *const T, certificate_set_: ?*?*IOpcCertificateSet) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetCertificateSet(@as(*const IOpcSigningOptions, @ptrCast(self)), certificate_set_);
            }
            pub inline fn getSignaturePartName(self: *const T, signature_part_name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).GetSignaturePartName(@as(*const IOpcSigningOptions, @ptrCast(self)), signature_part_name_);
            }
            pub inline fn setSignaturePartName(self: *const T, signature_part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IOpcSigningOptions.VTable, @ptrCast(self.vtable)).SetSignaturePartName(@as(*const IOpcSigningOptions, @ptrCast(self)), signature_part_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcDigitalSignatureManager_Value = Guid.initString("d5e62a0b-696d-462f-94df-72e33cef2659");
pub const IID_IOpcDigitalSignatureManager = &IID_IOpcDigitalSignatureManager_Value;
pub const IOpcDigitalSignatureManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSignatureOriginPartName: *const fn (
            self: *const IOpcDigitalSignatureManager,
            signature_origin_part_name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureOriginPartName: *const fn (
            self: *const IOpcDigitalSignatureManager,
            signature_origin_part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureEnumerator: *const fn (
            self: *const IOpcDigitalSignatureManager,
            signature_enumerator: ?*?*IOpcDigitalSignatureEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveSignature: *const fn (
            self: *const IOpcDigitalSignatureManager,
            signature_part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSigningOptions: *const fn (
            self: *const IOpcDigitalSignatureManager,
            signing_options: ?*?*IOpcSigningOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Validate: *const fn (
            self: *const IOpcDigitalSignatureManager,
            signature: ?*IOpcDigitalSignature,
            certificate: ?*const CERT_CONTEXT,
            validation_result: ?*OPC_SIGNATURE_VALIDATION_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Sign: *const fn (
            self: *const IOpcDigitalSignatureManager,
            certificate: ?*const CERT_CONTEXT,
            signing_options: ?*IOpcSigningOptions,
            digital_signature: ?*?*IOpcDigitalSignature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReplaceSignatureXml: *const fn (
            self: *const IOpcDigitalSignatureManager,
            signature_part_name: ?*IOpcPartUri,
            new_signature_xml: ?*const u8,
            count: u32,
            digital_signature: ?*?*IOpcDigitalSignature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSignatureOriginPartName(self: *const T, signature_origin_part_name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IOpcDigitalSignatureManager.VTable, @ptrCast(self.vtable)).GetSignatureOriginPartName(@as(*const IOpcDigitalSignatureManager, @ptrCast(self)), signature_origin_part_name_);
            }
            pub inline fn setSignatureOriginPartName(self: *const T, signature_origin_part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IOpcDigitalSignatureManager.VTable, @ptrCast(self.vtable)).SetSignatureOriginPartName(@as(*const IOpcDigitalSignatureManager, @ptrCast(self)), signature_origin_part_name_);
            }
            pub inline fn getSignatureEnumerator(self: *const T, signature_enumerator_: ?*?*IOpcDigitalSignatureEnumerator) HRESULT {
                return @as(*const IOpcDigitalSignatureManager.VTable, @ptrCast(self.vtable)).GetSignatureEnumerator(@as(*const IOpcDigitalSignatureManager, @ptrCast(self)), signature_enumerator_);
            }
            pub inline fn removeSignature(self: *const T, signature_part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IOpcDigitalSignatureManager.VTable, @ptrCast(self.vtable)).RemoveSignature(@as(*const IOpcDigitalSignatureManager, @ptrCast(self)), signature_part_name_);
            }
            pub inline fn createSigningOptions(self: *const T, signing_options_: ?*?*IOpcSigningOptions) HRESULT {
                return @as(*const IOpcDigitalSignatureManager.VTable, @ptrCast(self.vtable)).CreateSigningOptions(@as(*const IOpcDigitalSignatureManager, @ptrCast(self)), signing_options_);
            }
            pub inline fn validate(self: *const T, signature_: ?*IOpcDigitalSignature, certificate_: ?*const CERT_CONTEXT, validation_result_: ?*OPC_SIGNATURE_VALIDATION_RESULT) HRESULT {
                return @as(*const IOpcDigitalSignatureManager.VTable, @ptrCast(self.vtable)).Validate(@as(*const IOpcDigitalSignatureManager, @ptrCast(self)), signature_, certificate_, validation_result_);
            }
            pub inline fn sign(self: *const T, certificate_: ?*const CERT_CONTEXT, signing_options_: ?*IOpcSigningOptions, digital_signature_: ?*?*IOpcDigitalSignature) HRESULT {
                return @as(*const IOpcDigitalSignatureManager.VTable, @ptrCast(self.vtable)).Sign(@as(*const IOpcDigitalSignatureManager, @ptrCast(self)), certificate_, signing_options_, digital_signature_);
            }
            pub inline fn replaceSignatureXml(self: *const T, signature_part_name_: ?*IOpcPartUri, new_signature_xml_: ?*const u8, count_: u32, digital_signature_: ?*?*IOpcDigitalSignature) HRESULT {
                return @as(*const IOpcDigitalSignatureManager.VTable, @ptrCast(self.vtable)).ReplaceSignatureXml(@as(*const IOpcDigitalSignatureManager, @ptrCast(self)), signature_part_name_, new_signature_xml_, count_, digital_signature_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignaturePartReferenceEnumerator_Value = Guid.initString("80eb1561-8c77-49cf-8266-459b356ee99a");
pub const IID_IOpcSignaturePartReferenceEnumerator = &IID_IOpcSignaturePartReferenceEnumerator_Value;
pub const IOpcSignaturePartReferenceEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IOpcSignaturePartReferenceEnumerator,
            has_next: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MovePrevious: *const fn (
            self: *const IOpcSignaturePartReferenceEnumerator,
            has_previous: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IOpcSignaturePartReferenceEnumerator,
            part_reference: ?*?*IOpcSignaturePartReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOpcSignaturePartReferenceEnumerator,
            copy: ?*?*IOpcSignaturePartReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_next_: ?*BOOL) HRESULT {
                return @as(*const IOpcSignaturePartReferenceEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IOpcSignaturePartReferenceEnumerator, @ptrCast(self)), has_next_);
            }
            pub inline fn movePrevious(self: *const T, has_previous_: ?*BOOL) HRESULT {
                return @as(*const IOpcSignaturePartReferenceEnumerator.VTable, @ptrCast(self.vtable)).MovePrevious(@as(*const IOpcSignaturePartReferenceEnumerator, @ptrCast(self)), has_previous_);
            }
            pub inline fn getCurrent(self: *const T, part_reference_: ?*?*IOpcSignaturePartReference) HRESULT {
                return @as(*const IOpcSignaturePartReferenceEnumerator.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IOpcSignaturePartReferenceEnumerator, @ptrCast(self)), part_reference_);
            }
            pub inline fn clone(self: *const T, copy_: ?*?*IOpcSignaturePartReferenceEnumerator) HRESULT {
                return @as(*const IOpcSignaturePartReferenceEnumerator.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOpcSignaturePartReferenceEnumerator, @ptrCast(self)), copy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignatureRelationshipReferenceEnumerator_Value = Guid.initString("773ba3e4-f021-48e4-aa04-9816db5d3495");
pub const IID_IOpcSignatureRelationshipReferenceEnumerator = &IID_IOpcSignatureRelationshipReferenceEnumerator_Value;
pub const IOpcSignatureRelationshipReferenceEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IOpcSignatureRelationshipReferenceEnumerator,
            has_next: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MovePrevious: *const fn (
            self: *const IOpcSignatureRelationshipReferenceEnumerator,
            has_previous: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IOpcSignatureRelationshipReferenceEnumerator,
            relationship_reference: ?*?*IOpcSignatureRelationshipReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOpcSignatureRelationshipReferenceEnumerator,
            copy: ?*?*IOpcSignatureRelationshipReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_next_: ?*BOOL) HRESULT {
                return @as(*const IOpcSignatureRelationshipReferenceEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IOpcSignatureRelationshipReferenceEnumerator, @ptrCast(self)), has_next_);
            }
            pub inline fn movePrevious(self: *const T, has_previous_: ?*BOOL) HRESULT {
                return @as(*const IOpcSignatureRelationshipReferenceEnumerator.VTable, @ptrCast(self.vtable)).MovePrevious(@as(*const IOpcSignatureRelationshipReferenceEnumerator, @ptrCast(self)), has_previous_);
            }
            pub inline fn getCurrent(self: *const T, relationship_reference_: ?*?*IOpcSignatureRelationshipReference) HRESULT {
                return @as(*const IOpcSignatureRelationshipReferenceEnumerator.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IOpcSignatureRelationshipReferenceEnumerator, @ptrCast(self)), relationship_reference_);
            }
            pub inline fn clone(self: *const T, copy_: ?*?*IOpcSignatureRelationshipReferenceEnumerator) HRESULT {
                return @as(*const IOpcSignatureRelationshipReferenceEnumerator.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOpcSignatureRelationshipReferenceEnumerator, @ptrCast(self)), copy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcRelationshipSelectorEnumerator_Value = Guid.initString("5e50a181-a91b-48ac-88d2-bca3d8f8c0b1");
pub const IID_IOpcRelationshipSelectorEnumerator = &IID_IOpcRelationshipSelectorEnumerator_Value;
pub const IOpcRelationshipSelectorEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IOpcRelationshipSelectorEnumerator,
            has_next: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MovePrevious: *const fn (
            self: *const IOpcRelationshipSelectorEnumerator,
            has_previous: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IOpcRelationshipSelectorEnumerator,
            relationship_selector: ?*?*IOpcRelationshipSelector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOpcRelationshipSelectorEnumerator,
            copy: ?*?*IOpcRelationshipSelectorEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_next_: ?*BOOL) HRESULT {
                return @as(*const IOpcRelationshipSelectorEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IOpcRelationshipSelectorEnumerator, @ptrCast(self)), has_next_);
            }
            pub inline fn movePrevious(self: *const T, has_previous_: ?*BOOL) HRESULT {
                return @as(*const IOpcRelationshipSelectorEnumerator.VTable, @ptrCast(self.vtable)).MovePrevious(@as(*const IOpcRelationshipSelectorEnumerator, @ptrCast(self)), has_previous_);
            }
            pub inline fn getCurrent(self: *const T, relationship_selector_: ?*?*IOpcRelationshipSelector) HRESULT {
                return @as(*const IOpcRelationshipSelectorEnumerator.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IOpcRelationshipSelectorEnumerator, @ptrCast(self)), relationship_selector_);
            }
            pub inline fn clone(self: *const T, copy_: ?*?*IOpcRelationshipSelectorEnumerator) HRESULT {
                return @as(*const IOpcRelationshipSelectorEnumerator.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOpcRelationshipSelectorEnumerator, @ptrCast(self)), copy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignatureReferenceEnumerator_Value = Guid.initString("cfa59a45-28b1-4868-969e-fa8097fdc12a");
pub const IID_IOpcSignatureReferenceEnumerator = &IID_IOpcSignatureReferenceEnumerator_Value;
pub const IOpcSignatureReferenceEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IOpcSignatureReferenceEnumerator,
            has_next: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MovePrevious: *const fn (
            self: *const IOpcSignatureReferenceEnumerator,
            has_previous: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IOpcSignatureReferenceEnumerator,
            reference: ?*?*IOpcSignatureReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOpcSignatureReferenceEnumerator,
            copy: ?*?*IOpcSignatureReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_next_: ?*BOOL) HRESULT {
                return @as(*const IOpcSignatureReferenceEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IOpcSignatureReferenceEnumerator, @ptrCast(self)), has_next_);
            }
            pub inline fn movePrevious(self: *const T, has_previous_: ?*BOOL) HRESULT {
                return @as(*const IOpcSignatureReferenceEnumerator.VTable, @ptrCast(self.vtable)).MovePrevious(@as(*const IOpcSignatureReferenceEnumerator, @ptrCast(self)), has_previous_);
            }
            pub inline fn getCurrent(self: *const T, reference_: ?*?*IOpcSignatureReference) HRESULT {
                return @as(*const IOpcSignatureReferenceEnumerator.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IOpcSignatureReferenceEnumerator, @ptrCast(self)), reference_);
            }
            pub inline fn clone(self: *const T, copy_: ?*?*IOpcSignatureReferenceEnumerator) HRESULT {
                return @as(*const IOpcSignatureReferenceEnumerator.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOpcSignatureReferenceEnumerator, @ptrCast(self)), copy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignatureCustomObjectEnumerator_Value = Guid.initString("5ee4fe1d-e1b0-4683-8079-7ea0fcf80b4c");
pub const IID_IOpcSignatureCustomObjectEnumerator = &IID_IOpcSignatureCustomObjectEnumerator_Value;
pub const IOpcSignatureCustomObjectEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IOpcSignatureCustomObjectEnumerator,
            has_next: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MovePrevious: *const fn (
            self: *const IOpcSignatureCustomObjectEnumerator,
            has_previous: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IOpcSignatureCustomObjectEnumerator,
            custom_object: ?*?*IOpcSignatureCustomObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOpcSignatureCustomObjectEnumerator,
            copy: ?*?*IOpcSignatureCustomObjectEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_next_: ?*BOOL) HRESULT {
                return @as(*const IOpcSignatureCustomObjectEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IOpcSignatureCustomObjectEnumerator, @ptrCast(self)), has_next_);
            }
            pub inline fn movePrevious(self: *const T, has_previous_: ?*BOOL) HRESULT {
                return @as(*const IOpcSignatureCustomObjectEnumerator.VTable, @ptrCast(self.vtable)).MovePrevious(@as(*const IOpcSignatureCustomObjectEnumerator, @ptrCast(self)), has_previous_);
            }
            pub inline fn getCurrent(self: *const T, custom_object_: ?*?*IOpcSignatureCustomObject) HRESULT {
                return @as(*const IOpcSignatureCustomObjectEnumerator.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IOpcSignatureCustomObjectEnumerator, @ptrCast(self)), custom_object_);
            }
            pub inline fn clone(self: *const T, copy_: ?*?*IOpcSignatureCustomObjectEnumerator) HRESULT {
                return @as(*const IOpcSignatureCustomObjectEnumerator.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOpcSignatureCustomObjectEnumerator, @ptrCast(self)), copy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcCertificateEnumerator_Value = Guid.initString("85131937-8f24-421f-b439-59ab24d140b8");
pub const IID_IOpcCertificateEnumerator = &IID_IOpcCertificateEnumerator_Value;
pub const IOpcCertificateEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IOpcCertificateEnumerator,
            has_next: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MovePrevious: *const fn (
            self: *const IOpcCertificateEnumerator,
            has_previous: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IOpcCertificateEnumerator,
            certificate: ?*const ?*CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOpcCertificateEnumerator,
            copy: ?*?*IOpcCertificateEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_next_: ?*BOOL) HRESULT {
                return @as(*const IOpcCertificateEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IOpcCertificateEnumerator, @ptrCast(self)), has_next_);
            }
            pub inline fn movePrevious(self: *const T, has_previous_: ?*BOOL) HRESULT {
                return @as(*const IOpcCertificateEnumerator.VTable, @ptrCast(self.vtable)).MovePrevious(@as(*const IOpcCertificateEnumerator, @ptrCast(self)), has_previous_);
            }
            pub inline fn getCurrent(self: *const T, certificate_: ?*const ?*CERT_CONTEXT) HRESULT {
                return @as(*const IOpcCertificateEnumerator.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IOpcCertificateEnumerator, @ptrCast(self)), certificate_);
            }
            pub inline fn clone(self: *const T, copy_: ?*?*IOpcCertificateEnumerator) HRESULT {
                return @as(*const IOpcCertificateEnumerator.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOpcCertificateEnumerator, @ptrCast(self)), copy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcDigitalSignatureEnumerator_Value = Guid.initString("967b6882-0ba3-4358-b9e7-b64c75063c5e");
pub const IID_IOpcDigitalSignatureEnumerator = &IID_IOpcDigitalSignatureEnumerator_Value;
pub const IOpcDigitalSignatureEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IOpcDigitalSignatureEnumerator,
            has_next: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MovePrevious: *const fn (
            self: *const IOpcDigitalSignatureEnumerator,
            has_previous: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn (
            self: *const IOpcDigitalSignatureEnumerator,
            digital_signature: ?*?*IOpcDigitalSignature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IOpcDigitalSignatureEnumerator,
            copy: ?*?*IOpcDigitalSignatureEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_next_: ?*BOOL) HRESULT {
                return @as(*const IOpcDigitalSignatureEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IOpcDigitalSignatureEnumerator, @ptrCast(self)), has_next_);
            }
            pub inline fn movePrevious(self: *const T, has_previous_: ?*BOOL) HRESULT {
                return @as(*const IOpcDigitalSignatureEnumerator.VTable, @ptrCast(self.vtable)).MovePrevious(@as(*const IOpcDigitalSignatureEnumerator, @ptrCast(self)), has_previous_);
            }
            pub inline fn getCurrent(self: *const T, digital_signature_: ?*?*IOpcDigitalSignature) HRESULT {
                return @as(*const IOpcDigitalSignatureEnumerator.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IOpcDigitalSignatureEnumerator, @ptrCast(self)), digital_signature_);
            }
            pub inline fn clone(self: *const T, copy_: ?*?*IOpcDigitalSignatureEnumerator) HRESULT {
                return @as(*const IOpcDigitalSignatureEnumerator.VTable, @ptrCast(self.vtable)).Clone(@as(*const IOpcDigitalSignatureEnumerator, @ptrCast(self)), copy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignaturePartReferenceSet_Value = Guid.initString("6c9fe28c-ecd9-4b22-9d36-7fdde670fec0");
pub const IID_IOpcSignaturePartReferenceSet = &IID_IOpcSignaturePartReferenceSet_Value;
pub const IOpcSignaturePartReferenceSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IOpcSignaturePartReferenceSet,
            part_uri: ?*IOpcPartUri,
            digest_method: ?[*:0]const u16,
            transform_method: OPC_CANONICALIZATION_METHOD,
            part_reference: ?*?*IOpcSignaturePartReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IOpcSignaturePartReferenceSet,
            part_reference: ?*IOpcSignaturePartReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IOpcSignaturePartReferenceSet,
            part_reference_enumerator: ?*?*IOpcSignaturePartReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, part_uri_: ?*IOpcPartUri, digest_method_: ?[*:0]const u16, transform_method_: OPC_CANONICALIZATION_METHOD, part_reference_: ?*?*IOpcSignaturePartReference) HRESULT {
                return @as(*const IOpcSignaturePartReferenceSet.VTable, @ptrCast(self.vtable)).Create(@as(*const IOpcSignaturePartReferenceSet, @ptrCast(self)), part_uri_, digest_method_, transform_method_, part_reference_);
            }
            pub inline fn delete(self: *const T, part_reference_: ?*IOpcSignaturePartReference) HRESULT {
                return @as(*const IOpcSignaturePartReferenceSet.VTable, @ptrCast(self.vtable)).Delete(@as(*const IOpcSignaturePartReferenceSet, @ptrCast(self)), part_reference_);
            }
            pub inline fn getEnumerator(self: *const T, part_reference_enumerator_: ?*?*IOpcSignaturePartReferenceEnumerator) HRESULT {
                return @as(*const IOpcSignaturePartReferenceSet.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IOpcSignaturePartReferenceSet, @ptrCast(self)), part_reference_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignatureRelationshipReferenceSet_Value = Guid.initString("9f863ca5-3631-404c-828d-807e0715069b");
pub const IID_IOpcSignatureRelationshipReferenceSet = &IID_IOpcSignatureRelationshipReferenceSet_Value;
pub const IOpcSignatureRelationshipReferenceSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IOpcSignatureRelationshipReferenceSet,
            source_uri: ?*IOpcUri,
            digest_method: ?[*:0]const u16,
            relationship_signing_option: OPC_RELATIONSHIPS_SIGNING_OPTION,
            selector_set: ?*IOpcRelationshipSelectorSet,
            transform_method: OPC_CANONICALIZATION_METHOD,
            relationship_reference: ?*?*IOpcSignatureRelationshipReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRelationshipSelectorSet: *const fn (
            self: *const IOpcSignatureRelationshipReferenceSet,
            selector_set: ?*?*IOpcRelationshipSelectorSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IOpcSignatureRelationshipReferenceSet,
            relationship_reference: ?*IOpcSignatureRelationshipReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IOpcSignatureRelationshipReferenceSet,
            relationship_reference_enumerator: ?*?*IOpcSignatureRelationshipReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, source_uri_: ?*IOpcUri, digest_method_: ?[*:0]const u16, relationship_signing_option_: OPC_RELATIONSHIPS_SIGNING_OPTION, selector_set_: ?*IOpcRelationshipSelectorSet, transform_method_: OPC_CANONICALIZATION_METHOD, relationship_reference_: ?*?*IOpcSignatureRelationshipReference) HRESULT {
                return @as(*const IOpcSignatureRelationshipReferenceSet.VTable, @ptrCast(self.vtable)).Create(@as(*const IOpcSignatureRelationshipReferenceSet, @ptrCast(self)), source_uri_, digest_method_, relationship_signing_option_, selector_set_, transform_method_, relationship_reference_);
            }
            pub inline fn createRelationshipSelectorSet(self: *const T, selector_set_: ?*?*IOpcRelationshipSelectorSet) HRESULT {
                return @as(*const IOpcSignatureRelationshipReferenceSet.VTable, @ptrCast(self.vtable)).CreateRelationshipSelectorSet(@as(*const IOpcSignatureRelationshipReferenceSet, @ptrCast(self)), selector_set_);
            }
            pub inline fn delete(self: *const T, relationship_reference_: ?*IOpcSignatureRelationshipReference) HRESULT {
                return @as(*const IOpcSignatureRelationshipReferenceSet.VTable, @ptrCast(self.vtable)).Delete(@as(*const IOpcSignatureRelationshipReferenceSet, @ptrCast(self)), relationship_reference_);
            }
            pub inline fn getEnumerator(self: *const T, relationship_reference_enumerator_: ?*?*IOpcSignatureRelationshipReferenceEnumerator) HRESULT {
                return @as(*const IOpcSignatureRelationshipReferenceSet.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IOpcSignatureRelationshipReferenceSet, @ptrCast(self)), relationship_reference_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcRelationshipSelectorSet_Value = Guid.initString("6e34c269-a4d3-47c0-b5c4-87ff2b3b6136");
pub const IID_IOpcRelationshipSelectorSet = &IID_IOpcRelationshipSelectorSet_Value;
pub const IOpcRelationshipSelectorSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IOpcRelationshipSelectorSet,
            selector: OPC_RELATIONSHIP_SELECTOR,
            selection_criterion: ?[*:0]const u16,
            relationship_selector: ?*?*IOpcRelationshipSelector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IOpcRelationshipSelectorSet,
            relationship_selector: ?*IOpcRelationshipSelector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IOpcRelationshipSelectorSet,
            relationship_selector_enumerator: ?*?*IOpcRelationshipSelectorEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, selector_: OPC_RELATIONSHIP_SELECTOR, selection_criterion_: ?[*:0]const u16, relationship_selector_: ?*?*IOpcRelationshipSelector) HRESULT {
                return @as(*const IOpcRelationshipSelectorSet.VTable, @ptrCast(self.vtable)).Create(@as(*const IOpcRelationshipSelectorSet, @ptrCast(self)), selector_, selection_criterion_, relationship_selector_);
            }
            pub inline fn delete(self: *const T, relationship_selector_: ?*IOpcRelationshipSelector) HRESULT {
                return @as(*const IOpcRelationshipSelectorSet.VTable, @ptrCast(self.vtable)).Delete(@as(*const IOpcRelationshipSelectorSet, @ptrCast(self)), relationship_selector_);
            }
            pub inline fn getEnumerator(self: *const T, relationship_selector_enumerator_: ?*?*IOpcRelationshipSelectorEnumerator) HRESULT {
                return @as(*const IOpcRelationshipSelectorSet.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IOpcRelationshipSelectorSet, @ptrCast(self)), relationship_selector_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignatureReferenceSet_Value = Guid.initString("f3b02d31-ab12-42dd-9e2f-2b16761c3c1e");
pub const IID_IOpcSignatureReferenceSet = &IID_IOpcSignatureReferenceSet_Value;
pub const IOpcSignatureReferenceSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IOpcSignatureReferenceSet,
            reference_uri: ?*IUri,
            reference_id: ?[*:0]const u16,
            type: ?[*:0]const u16,
            digest_method: ?[*:0]const u16,
            transform_method: OPC_CANONICALIZATION_METHOD,
            reference: ?*?*IOpcSignatureReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IOpcSignatureReferenceSet,
            reference: ?*IOpcSignatureReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IOpcSignatureReferenceSet,
            reference_enumerator: ?*?*IOpcSignatureReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, reference_uri_: ?*IUri, reference_id_: ?[*:0]const u16, type_: ?[*:0]const u16, digest_method_: ?[*:0]const u16, transform_method_: OPC_CANONICALIZATION_METHOD, reference_: ?*?*IOpcSignatureReference) HRESULT {
                return @as(*const IOpcSignatureReferenceSet.VTable, @ptrCast(self.vtable)).Create(@as(*const IOpcSignatureReferenceSet, @ptrCast(self)), reference_uri_, reference_id_, type_, digest_method_, transform_method_, reference_);
            }
            pub inline fn delete(self: *const T, reference_: ?*IOpcSignatureReference) HRESULT {
                return @as(*const IOpcSignatureReferenceSet.VTable, @ptrCast(self.vtable)).Delete(@as(*const IOpcSignatureReferenceSet, @ptrCast(self)), reference_);
            }
            pub inline fn getEnumerator(self: *const T, reference_enumerator_: ?*?*IOpcSignatureReferenceEnumerator) HRESULT {
                return @as(*const IOpcSignatureReferenceSet.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IOpcSignatureReferenceSet, @ptrCast(self)), reference_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcSignatureCustomObjectSet_Value = Guid.initString("8f792ac5-7947-4e11-bc3d-2659ff046ae1");
pub const IID_IOpcSignatureCustomObjectSet = &IID_IOpcSignatureCustomObjectSet_Value;
pub const IOpcSignatureCustomObjectSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IOpcSignatureCustomObjectSet,
            xml_markup: [*:0]const u8,
            count: u32,
            custom_object: ?*?*IOpcSignatureCustomObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IOpcSignatureCustomObjectSet,
            custom_object: ?*IOpcSignatureCustomObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IOpcSignatureCustomObjectSet,
            custom_object_enumerator: ?*?*IOpcSignatureCustomObjectEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, xml_markup_: [*:0]const u8, count_: u32, custom_object_: ?*?*IOpcSignatureCustomObject) HRESULT {
                return @as(*const IOpcSignatureCustomObjectSet.VTable, @ptrCast(self.vtable)).Create(@as(*const IOpcSignatureCustomObjectSet, @ptrCast(self)), xml_markup_, count_, custom_object_);
            }
            pub inline fn delete(self: *const T, custom_object_: ?*IOpcSignatureCustomObject) HRESULT {
                return @as(*const IOpcSignatureCustomObjectSet.VTable, @ptrCast(self.vtable)).Delete(@as(*const IOpcSignatureCustomObjectSet, @ptrCast(self)), custom_object_);
            }
            pub inline fn getEnumerator(self: *const T, custom_object_enumerator_: ?*?*IOpcSignatureCustomObjectEnumerator) HRESULT {
                return @as(*const IOpcSignatureCustomObjectSet.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IOpcSignatureCustomObjectSet, @ptrCast(self)), custom_object_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcCertificateSet_Value = Guid.initString("56ea4325-8e2d-4167-b1a4-e486d24c8fa7");
pub const IID_IOpcCertificateSet = &IID_IOpcCertificateSet_Value;
pub const IOpcCertificateSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Add: *const fn (
            self: *const IOpcCertificateSet,
            certificate: ?*const CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IOpcCertificateSet,
            certificate: ?*const CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IOpcCertificateSet,
            certificate_enumerator: ?*?*IOpcCertificateEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn add(self: *const T, certificate_: ?*const CERT_CONTEXT) HRESULT {
                return @as(*const IOpcCertificateSet.VTable, @ptrCast(self.vtable)).Add(@as(*const IOpcCertificateSet, @ptrCast(self)), certificate_);
            }
            pub inline fn remove(self: *const T, certificate_: ?*const CERT_CONTEXT) HRESULT {
                return @as(*const IOpcCertificateSet.VTable, @ptrCast(self.vtable)).Remove(@as(*const IOpcCertificateSet, @ptrCast(self)), certificate_);
            }
            pub inline fn getEnumerator(self: *const T, certificate_enumerator_: ?*?*IOpcCertificateEnumerator) HRESULT {
                return @as(*const IOpcCertificateSet.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IOpcCertificateSet, @ptrCast(self)), certificate_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpcFactory_Value = Guid.initString("6d0b4446-cd73-4ab3-94f4-8ccdf6116154");
pub const IID_IOpcFactory = &IID_IOpcFactory_Value;
pub const IOpcFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePackageRootUri: *const fn (
            self: *const IOpcFactory,
            root_uri: ?*?*IOpcUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePartUri: *const fn (
            self: *const IOpcFactory,
            pwz_uri: ?[*:0]const u16,
            part_uri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStreamOnFile: *const fn (
            self: *const IOpcFactory,
            filename: ?[*:0]const u16,
            io_mode: OPC_STREAM_IO_MODE,
            security_attributes: ?*SECURITY_ATTRIBUTES,
            dw_flags_and_attributes: u32,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackage: *const fn (
            self: *const IOpcFactory,
            package: ?*?*IOpcPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadPackageFromStream: *const fn (
            self: *const IOpcFactory,
            stream: ?*IStream,
            flags: OPC_READ_FLAGS,
            package: ?*?*IOpcPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePackageToStream: *const fn (
            self: *const IOpcFactory,
            package: ?*IOpcPackage,
            flags: OPC_WRITE_FLAGS,
            stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDigitalSignatureManager: *const fn (
            self: *const IOpcFactory,
            package: ?*IOpcPackage,
            signature_manager: ?*?*IOpcDigitalSignatureManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createPackageRootUri(self: *const T, root_uri_: ?*?*IOpcUri) HRESULT {
                return @as(*const IOpcFactory.VTable, @ptrCast(self.vtable)).CreatePackageRootUri(@as(*const IOpcFactory, @ptrCast(self)), root_uri_);
            }
            pub inline fn createPartUri(self: *const T, pwz_uri_: ?[*:0]const u16, part_uri_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IOpcFactory.VTable, @ptrCast(self.vtable)).CreatePartUri(@as(*const IOpcFactory, @ptrCast(self)), pwz_uri_, part_uri_);
            }
            pub inline fn createStreamOnFile(self: *const T, filename_: ?[*:0]const u16, io_mode_: OPC_STREAM_IO_MODE, security_attributes_: ?*SECURITY_ATTRIBUTES, dw_flags_and_attributes_: u32, stream_: ?*?*IStream) HRESULT {
                return @as(*const IOpcFactory.VTable, @ptrCast(self.vtable)).CreateStreamOnFile(@as(*const IOpcFactory, @ptrCast(self)), filename_, io_mode_, security_attributes_, dw_flags_and_attributes_, stream_);
            }
            pub inline fn createPackage(self: *const T, package_: ?*?*IOpcPackage) HRESULT {
                return @as(*const IOpcFactory.VTable, @ptrCast(self.vtable)).CreatePackage(@as(*const IOpcFactory, @ptrCast(self)), package_);
            }
            pub inline fn readPackageFromStream(self: *const T, stream_: ?*IStream, flags_: OPC_READ_FLAGS, package_: ?*?*IOpcPackage) HRESULT {
                return @as(*const IOpcFactory.VTable, @ptrCast(self.vtable)).ReadPackageFromStream(@as(*const IOpcFactory, @ptrCast(self)), stream_, flags_, package_);
            }
            pub inline fn writePackageToStream(self: *const T, package_: ?*IOpcPackage, flags_: OPC_WRITE_FLAGS, stream_: ?*IStream) HRESULT {
                return @as(*const IOpcFactory.VTable, @ptrCast(self.vtable)).WritePackageToStream(@as(*const IOpcFactory, @ptrCast(self)), package_, flags_, stream_);
            }
            pub inline fn createDigitalSignatureManager(self: *const T, package_: ?*IOpcPackage, signature_manager_: ?*?*IOpcDigitalSignatureManager) HRESULT {
                return @as(*const IOpcFactory.VTable, @ptrCast(self.vtable)).CreateDigitalSignatureManager(@as(*const IOpcFactory, @ptrCast(self)), package_, signature_manager_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const CERT_CONTEXT = @import("../../security/cryptography.zig").CERT_CONTEXT;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IStream = @import("../../system/com.zig").IStream;
const IUnknown = @import("../../system/com.zig").IUnknown;
const IUri = @import("../../system/com.zig").IUri;
const PWSTR = @import("../../foundation.zig").PWSTR;
const SECURITY_ATTRIBUTES = @import("../../security.zig").SECURITY_ATTRIBUTES;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
