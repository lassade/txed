//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (85)
//--------------------------------------------------------------------------------
pub const XPS_E_SIGREQUESTID_DUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108795));
pub const XPS_E_PACKAGE_NOT_OPENED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108794));
pub const XPS_E_PACKAGE_ALREADY_OPENED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108793));
pub const XPS_E_SIGNATUREID_DUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108792));
pub const XPS_E_MARKUP_COMPATIBILITY_ELEMENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108791));
pub const XPS_E_OBJECT_DETACHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108790));
pub const XPS_E_INVALID_SIGNATUREBLOCK_MARKUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108789));
pub const XPS_E_INVALID_NUMBER_OF_POINTS_IN_CURVE_SEGMENTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108160));
pub const XPS_E_ABSOLUTE_REFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108159));
pub const XPS_E_INVALID_NUMBER_OF_COLOR_CHANNELS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108158));
pub const XPS_E_INVALID_LANGUAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109696));
pub const XPS_E_INVALID_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109695));
pub const XPS_E_INVALID_RESOURCE_KEY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109694));
pub const XPS_E_INVALID_PAGE_SIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109693));
pub const XPS_E_INVALID_BLEED_BOX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109692));
pub const XPS_E_INVALID_THUMBNAIL_IMAGE_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109691));
pub const XPS_E_INVALID_LOOKUP_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109690));
pub const XPS_E_INVALID_FLOAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109689));
pub const XPS_E_UNEXPECTED_CONTENT_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109688));
pub const XPS_E_INVALID_FONT_URI = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109686));
pub const XPS_E_INVALID_CONTENT_BOX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109685));
pub const XPS_E_INVALID_MARKUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109684));
pub const XPS_E_INVALID_XML_ENCODING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109683));
pub const XPS_E_INVALID_CONTENT_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109682));
pub const XPS_E_INVALID_OBFUSCATED_FONT_URI = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109681));
pub const XPS_E_UNEXPECTED_RELATIONSHIP_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109680));
pub const XPS_E_UNEXPECTED_RESTRICTED_FONT_RELATIONSHIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109679));
pub const XPS_E_MISSING_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109440));
pub const XPS_E_MISSING_LOOKUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109439));
pub const XPS_E_MISSING_GLYPHS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109438));
pub const XPS_E_MISSING_SEGMENT_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109437));
pub const XPS_E_MISSING_COLORPROFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109436));
pub const XPS_E_MISSING_RELATIONSHIP_TARGET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109435));
pub const XPS_E_MISSING_RESOURCE_RELATIONSHIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109434));
pub const XPS_E_MISSING_FONTURI = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109433));
pub const XPS_E_MISSING_DOCUMENTSEQUENCE_RELATIONSHIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109432));
pub const XPS_E_MISSING_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109431));
pub const XPS_E_MISSING_REFERRED_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109430));
pub const XPS_E_MISSING_REFERRED_PAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109429));
pub const XPS_E_MISSING_PAGE_IN_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109428));
pub const XPS_E_MISSING_PAGE_IN_PAGEREFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109427));
pub const XPS_E_MISSING_IMAGE_IN_IMAGEBRUSH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109426));
pub const XPS_E_MISSING_RESOURCE_KEY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109425));
pub const XPS_E_MISSING_PART_REFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109424));
pub const XPS_E_MISSING_RESTRICTED_FONT_RELATIONSHIP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109423));
pub const XPS_E_MISSING_DISCARDCONTROL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109422));
pub const XPS_E_MISSING_PART_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109421));
pub const XPS_E_UNAVAILABLE_PACKAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109420));
pub const XPS_E_DUPLICATE_RESOURCE_KEYS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109184));
pub const XPS_E_MULTIPLE_RESOURCES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109183));
pub const XPS_E_MULTIPLE_DOCUMENTSEQUENCE_RELATIONSHIPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109182));
pub const XPS_E_MULTIPLE_THUMBNAILS_ON_PAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109181));
pub const XPS_E_MULTIPLE_THUMBNAILS_ON_PACKAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109180));
pub const XPS_E_MULTIPLE_PRINTTICKETS_ON_PAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109179));
pub const XPS_E_MULTIPLE_PRINTTICKETS_ON_DOCUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109178));
pub const XPS_E_MULTIPLE_PRINTTICKETS_ON_DOCUMENTSEQUENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109177));
pub const XPS_E_MULTIPLE_REFERENCES_TO_PART = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109176));
pub const XPS_E_DUPLICATE_NAMES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142109175));
pub const XPS_E_STRING_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108928));
pub const XPS_E_TOO_MANY_INDICES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108927));
pub const XPS_E_MAPPING_OUT_OF_ORDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108926));
pub const XPS_E_MAPPING_OUTSIDE_STRING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108925));
pub const XPS_E_MAPPING_OUTSIDE_INDICES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108924));
pub const XPS_E_CARET_OUTSIDE_STRING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108923));
pub const XPS_E_CARET_OUT_OF_ORDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108922));
pub const XPS_E_ODD_BIDILEVEL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108921));
pub const XPS_E_ONE_TO_ONE_MAPPING_EXPECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108920));
pub const XPS_E_RESTRICTED_FONT_NOT_OBFUSCATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108919));
pub const XPS_E_NEGATIVE_FLOAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108918));
pub const XPS_E_XKEY_ATTR_PRESENT_OUTSIDE_RES_DICT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108672));
pub const XPS_E_DICTIONARY_ITEM_NAMED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108671));
pub const XPS_E_NESTED_REMOTE_DICTIONARY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108670));
pub const XPS_E_INDEX_OUT_OF_RANGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108416));
pub const XPS_E_VISUAL_CIRCULAR_REF = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108415));
pub const XPS_E_NO_CUSTOM_OBJECTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108414));
pub const XPS_E_ALREADY_OWNED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108413));
pub const XPS_E_RESOURCE_NOT_OWNED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108412));
pub const XPS_E_UNEXPECTED_COLORPROFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108411));
pub const XPS_E_COLOR_COMPONENT_OUT_OF_RANGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108410));
pub const XPS_E_BOTH_PATHFIGURE_AND_ABBR_SYNTAX_PRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108409));
pub const XPS_E_BOTH_RESOURCE_AND_SOURCEATTR_PRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108408));
pub const XPS_E_BLEED_BOX_PAGE_DIMENSIONS_NOT_IN_SYNC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108407));
pub const XPS_E_RELATIONSHIP_EXTERNAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108406));
pub const XPS_E_NOT_ENOUGH_GRADIENT_STOPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108405));
pub const XPS_E_PACKAGE_WRITER_NOT_CLOSED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2142108404));

//--------------------------------------------------------------------------------
// Section: Types (110)
//--------------------------------------------------------------------------------
pub const PRINT_WINDOW_FLAGS = enum(u32) {
    Y = 1,
};
pub const PW_CLIENTONLY = PRINT_WINDOW_FLAGS.Y;

pub const DEVICE_CAPABILITIES = enum(u32) {
    BINNAMES = 12,
    BINS = 6,
    COLLATE = 22,
    COLORDEVICE = 32,
    COPIES = 18,
    DRIVER = 11,
    DUPLEX = 7,
    ENUMRESOLUTIONS = 13,
    EXTRA = 9,
    FIELDS = 1,
    FILEDEPENDENCIES = 14,
    MAXEXTENT = 5,
    MEDIAREADY = 29,
    MEDIATYPENAMES = 34,
    MEDIATYPES = 35,
    MINEXTENT = 4,
    ORIENTATION = 17,
    NUP = 33,
    PAPERNAMES = 16,
    PAPERS = 2,
    PAPERSIZE = 3,
    PERSONALITY = 25,
    PRINTERMEM = 28,
    PRINTRATE = 26,
    PRINTRATEPPM = 31,
    PRINTRATEUNIT = 27,
    SIZE = 8,
    STAPLE = 30,
    TRUETYPE = 15,
    VERSION = 10,
};
pub const DC_BINNAMES = DEVICE_CAPABILITIES.BINNAMES;
pub const DC_BINS = DEVICE_CAPABILITIES.BINS;
pub const DC_COLLATE = DEVICE_CAPABILITIES.COLLATE;
pub const DC_COLORDEVICE = DEVICE_CAPABILITIES.COLORDEVICE;
pub const DC_COPIES = DEVICE_CAPABILITIES.COPIES;
pub const DC_DRIVER = DEVICE_CAPABILITIES.DRIVER;
pub const DC_DUPLEX = DEVICE_CAPABILITIES.DUPLEX;
pub const DC_ENUMRESOLUTIONS = DEVICE_CAPABILITIES.ENUMRESOLUTIONS;
pub const DC_EXTRA = DEVICE_CAPABILITIES.EXTRA;
pub const DC_FIELDS = DEVICE_CAPABILITIES.FIELDS;
pub const DC_FILEDEPENDENCIES = DEVICE_CAPABILITIES.FILEDEPENDENCIES;
pub const DC_MAXEXTENT = DEVICE_CAPABILITIES.MAXEXTENT;
pub const DC_MEDIAREADY = DEVICE_CAPABILITIES.MEDIAREADY;
pub const DC_MEDIATYPENAMES = DEVICE_CAPABILITIES.MEDIATYPENAMES;
pub const DC_MEDIATYPES = DEVICE_CAPABILITIES.MEDIATYPES;
pub const DC_MINEXTENT = DEVICE_CAPABILITIES.MINEXTENT;
pub const DC_ORIENTATION = DEVICE_CAPABILITIES.ORIENTATION;
pub const DC_NUP = DEVICE_CAPABILITIES.NUP;
pub const DC_PAPERNAMES = DEVICE_CAPABILITIES.PAPERNAMES;
pub const DC_PAPERS = DEVICE_CAPABILITIES.PAPERS;
pub const DC_PAPERSIZE = DEVICE_CAPABILITIES.PAPERSIZE;
pub const DC_PERSONALITY = DEVICE_CAPABILITIES.PERSONALITY;
pub const DC_PRINTERMEM = DEVICE_CAPABILITIES.PRINTERMEM;
pub const DC_PRINTRATE = DEVICE_CAPABILITIES.PRINTRATE;
pub const DC_PRINTRATEPPM = DEVICE_CAPABILITIES.PRINTRATEPPM;
pub const DC_PRINTRATEUNIT = DEVICE_CAPABILITIES.PRINTRATEUNIT;
pub const DC_SIZE = DEVICE_CAPABILITIES.SIZE;
pub const DC_STAPLE = DEVICE_CAPABILITIES.STAPLE;
pub const DC_TRUETYPE = DEVICE_CAPABILITIES.TRUETYPE;
pub const DC_VERSION = DEVICE_CAPABILITIES.VERSION;

pub const PSINJECT_POINT = enum(u16) {
    BEGINSTREAM = 1,
    PSADOBE = 2,
    PAGESATEND = 3,
    PAGES = 4,
    DOCNEEDEDRES = 5,
    DOCSUPPLIEDRES = 6,
    PAGEORDER = 7,
    ORIENTATION = 8,
    BOUNDINGBOX = 9,
    DOCUMENTPROCESSCOLORS = 10,
    COMMENTS = 11,
    BEGINDEFAULTS = 12,
    ENDDEFAULTS = 13,
    BEGINPROLOG = 14,
    ENDPROLOG = 15,
    BEGINSETUP = 16,
    ENDSETUP = 17,
    TRAILER = 18,
    EOF = 19,
    ENDSTREAM = 20,
    DOCUMENTPROCESSCOLORSATEND = 21,
    PAGENUMBER = 100,
    BEGINPAGESETUP = 101,
    ENDPAGESETUP = 102,
    PAGETRAILER = 103,
    PLATECOLOR = 104,
    SHOWPAGE = 105,
    PAGEBBOX = 106,
    ENDPAGECOMMENTS = 107,
    VMSAVE = 200,
    VMRESTORE = 201,
    _,
    pub fn initFlags(o: struct {
        BEGINSTREAM: u1 = 0,
        PSADOBE: u1 = 0,
        PAGESATEND: u1 = 0,
        PAGES: u1 = 0,
        DOCNEEDEDRES: u1 = 0,
        DOCSUPPLIEDRES: u1 = 0,
        PAGEORDER: u1 = 0,
        ORIENTATION: u1 = 0,
        BOUNDINGBOX: u1 = 0,
        DOCUMENTPROCESSCOLORS: u1 = 0,
        COMMENTS: u1 = 0,
        BEGINDEFAULTS: u1 = 0,
        ENDDEFAULTS: u1 = 0,
        BEGINPROLOG: u1 = 0,
        ENDPROLOG: u1 = 0,
        BEGINSETUP: u1 = 0,
        ENDSETUP: u1 = 0,
        TRAILER: u1 = 0,
        EOF: u1 = 0,
        ENDSTREAM: u1 = 0,
        DOCUMENTPROCESSCOLORSATEND: u1 = 0,
        PAGENUMBER: u1 = 0,
        BEGINPAGESETUP: u1 = 0,
        ENDPAGESETUP: u1 = 0,
        PAGETRAILER: u1 = 0,
        PLATECOLOR: u1 = 0,
        SHOWPAGE: u1 = 0,
        PAGEBBOX: u1 = 0,
        ENDPAGECOMMENTS: u1 = 0,
        VMSAVE: u1 = 0,
        VMRESTORE: u1 = 0,
    }) PSINJECT_POINT {
        return @as(PSINJECT_POINT, @enumFromInt((if (o.BEGINSTREAM == 1) @intFromEnum(PSINJECT_POINT.BEGINSTREAM) else 0) | (if (o.PSADOBE == 1) @intFromEnum(PSINJECT_POINT.PSADOBE) else 0) | (if (o.PAGESATEND == 1) @intFromEnum(PSINJECT_POINT.PAGESATEND) else 0) | (if (o.PAGES == 1) @intFromEnum(PSINJECT_POINT.PAGES) else 0) | (if (o.DOCNEEDEDRES == 1) @intFromEnum(PSINJECT_POINT.DOCNEEDEDRES) else 0) | (if (o.DOCSUPPLIEDRES == 1) @intFromEnum(PSINJECT_POINT.DOCSUPPLIEDRES) else 0) | (if (o.PAGEORDER == 1) @intFromEnum(PSINJECT_POINT.PAGEORDER) else 0) | (if (o.ORIENTATION == 1) @intFromEnum(PSINJECT_POINT.ORIENTATION) else 0) | (if (o.BOUNDINGBOX == 1) @intFromEnum(PSINJECT_POINT.BOUNDINGBOX) else 0) | (if (o.DOCUMENTPROCESSCOLORS == 1) @intFromEnum(PSINJECT_POINT.DOCUMENTPROCESSCOLORS) else 0) | (if (o.COMMENTS == 1) @intFromEnum(PSINJECT_POINT.COMMENTS) else 0) | (if (o.BEGINDEFAULTS == 1) @intFromEnum(PSINJECT_POINT.BEGINDEFAULTS) else 0) | (if (o.ENDDEFAULTS == 1) @intFromEnum(PSINJECT_POINT.ENDDEFAULTS) else 0) | (if (o.BEGINPROLOG == 1) @intFromEnum(PSINJECT_POINT.BEGINPROLOG) else 0) | (if (o.ENDPROLOG == 1) @intFromEnum(PSINJECT_POINT.ENDPROLOG) else 0) | (if (o.BEGINSETUP == 1) @intFromEnum(PSINJECT_POINT.BEGINSETUP) else 0) | (if (o.ENDSETUP == 1) @intFromEnum(PSINJECT_POINT.ENDSETUP) else 0) | (if (o.TRAILER == 1) @intFromEnum(PSINJECT_POINT.TRAILER) else 0) | (if (o.EOF == 1) @intFromEnum(PSINJECT_POINT.EOF) else 0) | (if (o.ENDSTREAM == 1) @intFromEnum(PSINJECT_POINT.ENDSTREAM) else 0) | (if (o.DOCUMENTPROCESSCOLORSATEND == 1) @intFromEnum(PSINJECT_POINT.DOCUMENTPROCESSCOLORSATEND) else 0) | (if (o.PAGENUMBER == 1) @intFromEnum(PSINJECT_POINT.PAGENUMBER) else 0) | (if (o.BEGINPAGESETUP == 1) @intFromEnum(PSINJECT_POINT.BEGINPAGESETUP) else 0) | (if (o.ENDPAGESETUP == 1) @intFromEnum(PSINJECT_POINT.ENDPAGESETUP) else 0) | (if (o.PAGETRAILER == 1) @intFromEnum(PSINJECT_POINT.PAGETRAILER) else 0) | (if (o.PLATECOLOR == 1) @intFromEnum(PSINJECT_POINT.PLATECOLOR) else 0) | (if (o.SHOWPAGE == 1) @intFromEnum(PSINJECT_POINT.SHOWPAGE) else 0) | (if (o.PAGEBBOX == 1) @intFromEnum(PSINJECT_POINT.PAGEBBOX) else 0) | (if (o.ENDPAGECOMMENTS == 1) @intFromEnum(PSINJECT_POINT.ENDPAGECOMMENTS) else 0) | (if (o.VMSAVE == 1) @intFromEnum(PSINJECT_POINT.VMSAVE) else 0) | (if (o.VMRESTORE == 1) @intFromEnum(PSINJECT_POINT.VMRESTORE) else 0)));
    }
};
pub const PSINJECT_BEGINSTREAM = PSINJECT_POINT.BEGINSTREAM;
pub const PSINJECT_PSADOBE = PSINJECT_POINT.PSADOBE;
pub const PSINJECT_PAGESATEND = PSINJECT_POINT.PAGESATEND;
pub const PSINJECT_PAGES = PSINJECT_POINT.PAGES;
pub const PSINJECT_DOCNEEDEDRES = PSINJECT_POINT.DOCNEEDEDRES;
pub const PSINJECT_DOCSUPPLIEDRES = PSINJECT_POINT.DOCSUPPLIEDRES;
pub const PSINJECT_PAGEORDER = PSINJECT_POINT.PAGEORDER;
pub const PSINJECT_ORIENTATION = PSINJECT_POINT.ORIENTATION;
pub const PSINJECT_BOUNDINGBOX = PSINJECT_POINT.BOUNDINGBOX;
pub const PSINJECT_DOCUMENTPROCESSCOLORS = PSINJECT_POINT.DOCUMENTPROCESSCOLORS;
pub const PSINJECT_COMMENTS = PSINJECT_POINT.COMMENTS;
pub const PSINJECT_BEGINDEFAULTS = PSINJECT_POINT.BEGINDEFAULTS;
pub const PSINJECT_ENDDEFAULTS = PSINJECT_POINT.ENDDEFAULTS;
pub const PSINJECT_BEGINPROLOG = PSINJECT_POINT.BEGINPROLOG;
pub const PSINJECT_ENDPROLOG = PSINJECT_POINT.ENDPROLOG;
pub const PSINJECT_BEGINSETUP = PSINJECT_POINT.BEGINSETUP;
pub const PSINJECT_ENDSETUP = PSINJECT_POINT.ENDSETUP;
pub const PSINJECT_TRAILER = PSINJECT_POINT.TRAILER;
pub const PSINJECT_EOF = PSINJECT_POINT.EOF;
pub const PSINJECT_ENDSTREAM = PSINJECT_POINT.ENDSTREAM;
pub const PSINJECT_DOCUMENTPROCESSCOLORSATEND = PSINJECT_POINT.DOCUMENTPROCESSCOLORSATEND;
pub const PSINJECT_PAGENUMBER = PSINJECT_POINT.PAGENUMBER;
pub const PSINJECT_BEGINPAGESETUP = PSINJECT_POINT.BEGINPAGESETUP;
pub const PSINJECT_ENDPAGESETUP = PSINJECT_POINT.ENDPAGESETUP;
pub const PSINJECT_PAGETRAILER = PSINJECT_POINT.PAGETRAILER;
pub const PSINJECT_PLATECOLOR = PSINJECT_POINT.PLATECOLOR;
pub const PSINJECT_SHOWPAGE = PSINJECT_POINT.SHOWPAGE;
pub const PSINJECT_PAGEBBOX = PSINJECT_POINT.PAGEBBOX;
pub const PSINJECT_ENDPAGECOMMENTS = PSINJECT_POINT.ENDPAGECOMMENTS;
pub const PSINJECT_VMSAVE = PSINJECT_POINT.VMSAVE;
pub const PSINJECT_VMRESTORE = PSINJECT_POINT.VMRESTORE;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HPTPROVIDER = *opaque {};

pub const DRAWPATRECT = extern struct {
    ptPosition: POINT,
    ptSize: POINT,
    wStyle: u16,
    wPattern: u16,
};

pub const PSINJECTDATA = extern struct {
    DataBytes: u32,
    InjectionPoint: PSINJECT_POINT,
    PageNumber: u16,
};

pub const PSFEATURE_OUTPUT = extern struct {
    bPageIndependent: BOOL,
    bSetPageDevice: BOOL,
};

pub const PSFEATURE_CUSTPAPER = extern struct {
    lOrientation: i32,
    lWidth: i32,
    lHeight: i32,
    lWidthOffset: i32,
    lHeightOffset: i32,
};

pub const ABORTPROC = *const fn (
    param0: ?HDC,
    param1: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DOCINFOA = extern struct {
    cbSize: i32,
    lpszDocName: ?[*:0]const u8,
    lpszOutput: ?[*:0]const u8,
    lpszDatatype: ?[*:0]const u8,
    fwType: u32,
};

pub const DOCINFOW = extern struct {
    cbSize: i32,
    lpszDocName: ?[*:0]const u16,
    lpszOutput: ?[*:0]const u16,
    lpszDatatype: ?[*:0]const u16,
    fwType: u32,
};

const CLSID_XpsOMObjectFactory_Value = Guid.initString("e974d26d-3d9b-4d47-88cc-3872f2dc3585");
pub const CLSID_XpsOMObjectFactory = &CLSID_XpsOMObjectFactory_Value;

const CLSID_XpsOMThumbnailGenerator_Value = Guid.initString("7e4a23e2-b969-4761-be35-1a8ced58e323");
pub const CLSID_XpsOMThumbnailGenerator = &CLSID_XpsOMThumbnailGenerator_Value;

pub const XPS_TILE_MODE = enum(i32) {
    NONE = 1,
    TILE = 2,
    FLIPX = 3,
    FLIPY = 4,
    FLIPXY = 5,
};
pub const XPS_TILE_MODE_NONE = XPS_TILE_MODE.NONE;
pub const XPS_TILE_MODE_TILE = XPS_TILE_MODE.TILE;
pub const XPS_TILE_MODE_FLIPX = XPS_TILE_MODE.FLIPX;
pub const XPS_TILE_MODE_FLIPY = XPS_TILE_MODE.FLIPY;
pub const XPS_TILE_MODE_FLIPXY = XPS_TILE_MODE.FLIPXY;

pub const XPS_COLOR_INTERPOLATION = enum(i32) {
    CRGBLINEAR = 1,
    RGBLINEAR = 2,
};
pub const XPS_COLOR_INTERPOLATION_SCRGBLINEAR = XPS_COLOR_INTERPOLATION.CRGBLINEAR;
pub const XPS_COLOR_INTERPOLATION_SRGBLINEAR = XPS_COLOR_INTERPOLATION.RGBLINEAR;

pub const XPS_SPREAD_METHOD = enum(i32) {
    PAD = 1,
    REFLECT = 2,
    REPEAT = 3,
};
pub const XPS_SPREAD_METHOD_PAD = XPS_SPREAD_METHOD.PAD;
pub const XPS_SPREAD_METHOD_REFLECT = XPS_SPREAD_METHOD.REFLECT;
pub const XPS_SPREAD_METHOD_REPEAT = XPS_SPREAD_METHOD.REPEAT;

pub const XPS_STYLE_SIMULATION = enum(i32) {
    NONE = 1,
    ITALIC = 2,
    BOLD = 3,
    BOLDITALIC = 4,
};
pub const XPS_STYLE_SIMULATION_NONE = XPS_STYLE_SIMULATION.NONE;
pub const XPS_STYLE_SIMULATION_ITALIC = XPS_STYLE_SIMULATION.ITALIC;
pub const XPS_STYLE_SIMULATION_BOLD = XPS_STYLE_SIMULATION.BOLD;
pub const XPS_STYLE_SIMULATION_BOLDITALIC = XPS_STYLE_SIMULATION.BOLDITALIC;

pub const XPS_LINE_CAP = enum(i32) {
    FLAT = 1,
    ROUND = 2,
    SQUARE = 3,
    TRIANGLE = 4,
};
pub const XPS_LINE_CAP_FLAT = XPS_LINE_CAP.FLAT;
pub const XPS_LINE_CAP_ROUND = XPS_LINE_CAP.ROUND;
pub const XPS_LINE_CAP_SQUARE = XPS_LINE_CAP.SQUARE;
pub const XPS_LINE_CAP_TRIANGLE = XPS_LINE_CAP.TRIANGLE;

pub const XPS_DASH_CAP = enum(i32) {
    FLAT = 1,
    ROUND = 2,
    SQUARE = 3,
    TRIANGLE = 4,
};
pub const XPS_DASH_CAP_FLAT = XPS_DASH_CAP.FLAT;
pub const XPS_DASH_CAP_ROUND = XPS_DASH_CAP.ROUND;
pub const XPS_DASH_CAP_SQUARE = XPS_DASH_CAP.SQUARE;
pub const XPS_DASH_CAP_TRIANGLE = XPS_DASH_CAP.TRIANGLE;

pub const XPS_LINE_JOIN = enum(i32) {
    MITER = 1,
    BEVEL = 2,
    ROUND = 3,
};
pub const XPS_LINE_JOIN_MITER = XPS_LINE_JOIN.MITER;
pub const XPS_LINE_JOIN_BEVEL = XPS_LINE_JOIN.BEVEL;
pub const XPS_LINE_JOIN_ROUND = XPS_LINE_JOIN.ROUND;

pub const XPS_IMAGE_TYPE = enum(i32) {
    JPEG = 1,
    PNG = 2,
    TIFF = 3,
    WDP = 4,
    JXR = 5,
};
pub const XPS_IMAGE_TYPE_JPEG = XPS_IMAGE_TYPE.JPEG;
pub const XPS_IMAGE_TYPE_PNG = XPS_IMAGE_TYPE.PNG;
pub const XPS_IMAGE_TYPE_TIFF = XPS_IMAGE_TYPE.TIFF;
pub const XPS_IMAGE_TYPE_WDP = XPS_IMAGE_TYPE.WDP;
pub const XPS_IMAGE_TYPE_JXR = XPS_IMAGE_TYPE.JXR;

pub const XPS_COLOR_TYPE = enum(i32) {
    SRGB = 1,
    SCRGB = 2,
    CONTEXT = 3,
};
pub const XPS_COLOR_TYPE_SRGB = XPS_COLOR_TYPE.SRGB;
pub const XPS_COLOR_TYPE_SCRGB = XPS_COLOR_TYPE.SCRGB;
pub const XPS_COLOR_TYPE_CONTEXT = XPS_COLOR_TYPE.CONTEXT;

pub const XPS_FILL_RULE = enum(i32) {
    EVENODD = 1,
    NONZERO = 2,
};
pub const XPS_FILL_RULE_EVENODD = XPS_FILL_RULE.EVENODD;
pub const XPS_FILL_RULE_NONZERO = XPS_FILL_RULE.NONZERO;

pub const XPS_SEGMENT_TYPE = enum(i32) {
    ARC_LARGE_CLOCKWISE = 1,
    ARC_LARGE_COUNTERCLOCKWISE = 2,
    ARC_SMALL_CLOCKWISE = 3,
    ARC_SMALL_COUNTERCLOCKWISE = 4,
    BEZIER = 5,
    LINE = 6,
    QUADRATIC_BEZIER = 7,
};
pub const XPS_SEGMENT_TYPE_ARC_LARGE_CLOCKWISE = XPS_SEGMENT_TYPE.ARC_LARGE_CLOCKWISE;
pub const XPS_SEGMENT_TYPE_ARC_LARGE_COUNTERCLOCKWISE = XPS_SEGMENT_TYPE.ARC_LARGE_COUNTERCLOCKWISE;
pub const XPS_SEGMENT_TYPE_ARC_SMALL_CLOCKWISE = XPS_SEGMENT_TYPE.ARC_SMALL_CLOCKWISE;
pub const XPS_SEGMENT_TYPE_ARC_SMALL_COUNTERCLOCKWISE = XPS_SEGMENT_TYPE.ARC_SMALL_COUNTERCLOCKWISE;
pub const XPS_SEGMENT_TYPE_BEZIER = XPS_SEGMENT_TYPE.BEZIER;
pub const XPS_SEGMENT_TYPE_LINE = XPS_SEGMENT_TYPE.LINE;
pub const XPS_SEGMENT_TYPE_QUADRATIC_BEZIER = XPS_SEGMENT_TYPE.QUADRATIC_BEZIER;

pub const XPS_SEGMENT_STROKE_PATTERN = enum(i32) {
    ALL = 1,
    NONE = 2,
    MIXED = 3,
};
pub const XPS_SEGMENT_STROKE_PATTERN_ALL = XPS_SEGMENT_STROKE_PATTERN.ALL;
pub const XPS_SEGMENT_STROKE_PATTERN_NONE = XPS_SEGMENT_STROKE_PATTERN.NONE;
pub const XPS_SEGMENT_STROKE_PATTERN_MIXED = XPS_SEGMENT_STROKE_PATTERN.MIXED;

pub const XPS_FONT_EMBEDDING = enum(i32) {
    NORMAL = 1,
    OBFUSCATED = 2,
    RESTRICTED = 3,
    RESTRICTED_UNOBFUSCATED = 4,
};
pub const XPS_FONT_EMBEDDING_NORMAL = XPS_FONT_EMBEDDING.NORMAL;
pub const XPS_FONT_EMBEDDING_OBFUSCATED = XPS_FONT_EMBEDDING.OBFUSCATED;
pub const XPS_FONT_EMBEDDING_RESTRICTED = XPS_FONT_EMBEDDING.RESTRICTED;
pub const XPS_FONT_EMBEDDING_RESTRICTED_UNOBFUSCATED = XPS_FONT_EMBEDDING.RESTRICTED_UNOBFUSCATED;

pub const XPS_OBJECT_TYPE = enum(i32) {
    CANVAS = 1,
    GLYPHS = 2,
    PATH = 3,
    MATRIX_TRANSFORM = 4,
    GEOMETRY = 5,
    SOLID_COLOR_BRUSH = 6,
    IMAGE_BRUSH = 7,
    LINEAR_GRADIENT_BRUSH = 8,
    RADIAL_GRADIENT_BRUSH = 9,
    VISUAL_BRUSH = 10,
};
pub const XPS_OBJECT_TYPE_CANVAS = XPS_OBJECT_TYPE.CANVAS;
pub const XPS_OBJECT_TYPE_GLYPHS = XPS_OBJECT_TYPE.GLYPHS;
pub const XPS_OBJECT_TYPE_PATH = XPS_OBJECT_TYPE.PATH;
pub const XPS_OBJECT_TYPE_MATRIX_TRANSFORM = XPS_OBJECT_TYPE.MATRIX_TRANSFORM;
pub const XPS_OBJECT_TYPE_GEOMETRY = XPS_OBJECT_TYPE.GEOMETRY;
pub const XPS_OBJECT_TYPE_SOLID_COLOR_BRUSH = XPS_OBJECT_TYPE.SOLID_COLOR_BRUSH;
pub const XPS_OBJECT_TYPE_IMAGE_BRUSH = XPS_OBJECT_TYPE.IMAGE_BRUSH;
pub const XPS_OBJECT_TYPE_LINEAR_GRADIENT_BRUSH = XPS_OBJECT_TYPE.LINEAR_GRADIENT_BRUSH;
pub const XPS_OBJECT_TYPE_RADIAL_GRADIENT_BRUSH = XPS_OBJECT_TYPE.RADIAL_GRADIENT_BRUSH;
pub const XPS_OBJECT_TYPE_VISUAL_BRUSH = XPS_OBJECT_TYPE.VISUAL_BRUSH;

pub const XPS_THUMBNAIL_SIZE = enum(i32) {
    VERYSMALL = 1,
    SMALL = 2,
    MEDIUM = 3,
    LARGE = 4,
};
pub const XPS_THUMBNAIL_SIZE_VERYSMALL = XPS_THUMBNAIL_SIZE.VERYSMALL;
pub const XPS_THUMBNAIL_SIZE_SMALL = XPS_THUMBNAIL_SIZE.SMALL;
pub const XPS_THUMBNAIL_SIZE_MEDIUM = XPS_THUMBNAIL_SIZE.MEDIUM;
pub const XPS_THUMBNAIL_SIZE_LARGE = XPS_THUMBNAIL_SIZE.LARGE;

pub const XPS_INTERLEAVING = enum(i32) {
    FF = 1,
    N = 2,
};
pub const XPS_INTERLEAVING_OFF = XPS_INTERLEAVING.FF;
pub const XPS_INTERLEAVING_ON = XPS_INTERLEAVING.N;

pub const XPS_POINT = extern struct {
    x: f32,
    y: f32,
};

pub const XPS_SIZE = extern struct {
    width: f32,
    height: f32,
};

pub const XPS_RECT = extern struct {
    x: f32,
    y: f32,
    width: f32,
    height: f32,
};

pub const XPS_DASH = extern struct {
    length: f32,
    gap: f32,
};

pub const XPS_GLYPH_INDEX = extern struct {
    index: i32,
    advanceWidth: f32,
    horizontalOffset: f32,
    verticalOffset: f32,
};

pub const XPS_GLYPH_MAPPING = extern struct {
    unicodeStringStart: u32,
    unicodeStringLength: u16,
    glyphIndicesStart: u32,
    glyphIndicesLength: u16,
};

pub const XPS_MATRIX = extern struct {
    m11: f32,
    m12: f32,
    m21: f32,
    m22: f32,
    m31: f32,
    m32: f32,
};

pub const XPS_COLOR = extern struct {
    pub const XPS_COLOR_VALUE = extern union {
        sRGB: extern struct {
            alpha: u8,
            red: u8,
            green: u8,
            blue: u8,
        },
        scRGB: extern struct {
            alpha: f32,
            red: f32,
            green: f32,
            blue: f32,
        },
        context: extern struct {
            channelCount: u8,
            channels: [9]f32,
        },
    };
    colorType: XPS_COLOR_TYPE,
    value: XPS_COLOR_VALUE,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMShareable_Value = Guid.initString("7137398f-2fc1-454d-8c6a-2c3115a16ece");
pub const IID_IXpsOMShareable = &IID_IXpsOMShareable_Value;
pub const IXpsOMShareable = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMShareable,
            owner: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IXpsOMShareable,
            type: ?*XPS_OBJECT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOwner(self: *const T, owner_: ?*?*IUnknown) HRESULT {
                return @as(*const IXpsOMShareable.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMShareable, @ptrCast(self)), owner_);
            }
            pub inline fn getType(self: *const T, type_: ?*XPS_OBJECT_TYPE) HRESULT {
                return @as(*const IXpsOMShareable.VTable, @ptrCast(self.vtable)).GetType(@as(*const IXpsOMShareable, @ptrCast(self)), type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMVisual_Value = Guid.initString("bc3e7333-fb0b-4af3-a819-0b4eaad0d2fd");
pub const IID_IXpsOMVisual = &IID_IXpsOMVisual_Value;
pub const IXpsOMVisual = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMShareable.VTable,
        GetTransform: *const fn (
            self: *const IXpsOMVisual,
            matrix_transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLocal: *const fn (
            self: *const IXpsOMVisual,
            matrix_transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLocal: *const fn (
            self: *const IXpsOMVisual,
            matrix_transform: ?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLookup: *const fn (
            self: *const IXpsOMVisual,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLookup: *const fn (
            self: *const IXpsOMVisual,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipGeometry: *const fn (
            self: *const IXpsOMVisual,
            clip_geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipGeometryLocal: *const fn (
            self: *const IXpsOMVisual,
            clip_geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipGeometryLocal: *const fn (
            self: *const IXpsOMVisual,
            clip_geometry: ?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClipGeometryLookup: *const fn (
            self: *const IXpsOMVisual,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipGeometryLookup: *const fn (
            self: *const IXpsOMVisual,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpacity: *const fn (
            self: *const IXpsOMVisual,
            opacity: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity: *const fn (
            self: *const IXpsOMVisual,
            opacity: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpacityMaskBrush: *const fn (
            self: *const IXpsOMVisual,
            opacity_mask_brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpacityMaskBrushLocal: *const fn (
            self: *const IXpsOMVisual,
            opacity_mask_brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacityMaskBrushLocal: *const fn (
            self: *const IXpsOMVisual,
            opacity_mask_brush: ?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpacityMaskBrushLookup: *const fn (
            self: *const IXpsOMVisual,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacityMaskBrushLookup: *const fn (
            self: *const IXpsOMVisual,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IXpsOMVisual,
            name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: *const fn (
            self: *const IXpsOMVisual,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsHyperlinkTarget: *const fn (
            self: *const IXpsOMVisual,
            is_hyperlink: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsHyperlinkTarget: *const fn (
            self: *const IXpsOMVisual,
            is_hyperlink: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHyperlinkNavigateUri: *const fn (
            self: *const IXpsOMVisual,
            hyperlink_uri: ?*?*IUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHyperlinkNavigateUri: *const fn (
            self: *const IXpsOMVisual,
            hyperlink_uri: ?*IUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguage: *const fn (
            self: *const IXpsOMVisual,
            language: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguage: *const fn (
            self: *const IXpsOMVisual,
            language: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMShareable.MethodMixin(T);
            pub inline fn getTransform(self: *const T, matrix_transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetTransform(@as(*const IXpsOMVisual, @ptrCast(self)), matrix_transform_);
            }
            pub inline fn getTransformLocal(self: *const T, matrix_transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetTransformLocal(@as(*const IXpsOMVisual, @ptrCast(self)), matrix_transform_);
            }
            pub inline fn setTransformLocal(self: *const T, matrix_transform_: ?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetTransformLocal(@as(*const IXpsOMVisual, @ptrCast(self)), matrix_transform_);
            }
            pub inline fn getTransformLookup(self: *const T, key_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetTransformLookup(@as(*const IXpsOMVisual, @ptrCast(self)), key_);
            }
            pub inline fn setTransformLookup(self: *const T, key_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetTransformLookup(@as(*const IXpsOMVisual, @ptrCast(self)), key_);
            }
            pub inline fn getClipGeometry(self: *const T, clip_geometry_: ?*?*IXpsOMGeometry) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetClipGeometry(@as(*const IXpsOMVisual, @ptrCast(self)), clip_geometry_);
            }
            pub inline fn getClipGeometryLocal(self: *const T, clip_geometry_: ?*?*IXpsOMGeometry) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetClipGeometryLocal(@as(*const IXpsOMVisual, @ptrCast(self)), clip_geometry_);
            }
            pub inline fn setClipGeometryLocal(self: *const T, clip_geometry_: ?*IXpsOMGeometry) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetClipGeometryLocal(@as(*const IXpsOMVisual, @ptrCast(self)), clip_geometry_);
            }
            pub inline fn getClipGeometryLookup(self: *const T, key_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetClipGeometryLookup(@as(*const IXpsOMVisual, @ptrCast(self)), key_);
            }
            pub inline fn setClipGeometryLookup(self: *const T, key_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetClipGeometryLookup(@as(*const IXpsOMVisual, @ptrCast(self)), key_);
            }
            pub inline fn getOpacity(self: *const T, opacity_: ?*f32) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetOpacity(@as(*const IXpsOMVisual, @ptrCast(self)), opacity_);
            }
            pub inline fn setOpacity(self: *const T, opacity_: f32) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetOpacity(@as(*const IXpsOMVisual, @ptrCast(self)), opacity_);
            }
            pub inline fn getOpacityMaskBrush(self: *const T, opacity_mask_brush_: ?*?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetOpacityMaskBrush(@as(*const IXpsOMVisual, @ptrCast(self)), opacity_mask_brush_);
            }
            pub inline fn getOpacityMaskBrushLocal(self: *const T, opacity_mask_brush_: ?*?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetOpacityMaskBrushLocal(@as(*const IXpsOMVisual, @ptrCast(self)), opacity_mask_brush_);
            }
            pub inline fn setOpacityMaskBrushLocal(self: *const T, opacity_mask_brush_: ?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetOpacityMaskBrushLocal(@as(*const IXpsOMVisual, @ptrCast(self)), opacity_mask_brush_);
            }
            pub inline fn getOpacityMaskBrushLookup(self: *const T, key_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetOpacityMaskBrushLookup(@as(*const IXpsOMVisual, @ptrCast(self)), key_);
            }
            pub inline fn setOpacityMaskBrushLookup(self: *const T, key_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetOpacityMaskBrushLookup(@as(*const IXpsOMVisual, @ptrCast(self)), key_);
            }
            pub inline fn getName(self: *const T, name_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetName(@as(*const IXpsOMVisual, @ptrCast(self)), name_);
            }
            pub inline fn setName(self: *const T, name_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetName(@as(*const IXpsOMVisual, @ptrCast(self)), name_);
            }
            pub inline fn getIsHyperlinkTarget(self: *const T, is_hyperlink_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetIsHyperlinkTarget(@as(*const IXpsOMVisual, @ptrCast(self)), is_hyperlink_);
            }
            pub inline fn setIsHyperlinkTarget(self: *const T, is_hyperlink_: BOOL) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetIsHyperlinkTarget(@as(*const IXpsOMVisual, @ptrCast(self)), is_hyperlink_);
            }
            pub inline fn getHyperlinkNavigateUri(self: *const T, hyperlink_uri_: ?*?*IUri) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetHyperlinkNavigateUri(@as(*const IXpsOMVisual, @ptrCast(self)), hyperlink_uri_);
            }
            pub inline fn setHyperlinkNavigateUri(self: *const T, hyperlink_uri_: ?*IUri) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetHyperlinkNavigateUri(@as(*const IXpsOMVisual, @ptrCast(self)), hyperlink_uri_);
            }
            pub inline fn getLanguage(self: *const T, language_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).GetLanguage(@as(*const IXpsOMVisual, @ptrCast(self)), language_);
            }
            pub inline fn setLanguage(self: *const T, language_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMVisual.VTable, @ptrCast(self.vtable)).SetLanguage(@as(*const IXpsOMVisual, @ptrCast(self)), language_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPart_Value = Guid.initString("74eb2f0b-a91e-4486-afac-0fabeca3dfc6");
pub const IID_IXpsOMPart = &IID_IXpsOMPart_Value;
pub const IXpsOMPart = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPartName: *const fn (
            self: *const IXpsOMPart,
            part_uri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPartName: *const fn (
            self: *const IXpsOMPart,
            part_uri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPartName(self: *const T, part_uri_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMPart.VTable, @ptrCast(self.vtable)).GetPartName(@as(*const IXpsOMPart, @ptrCast(self)), part_uri_);
            }
            pub inline fn setPartName(self: *const T, part_uri_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMPart.VTable, @ptrCast(self.vtable)).SetPartName(@as(*const IXpsOMPart, @ptrCast(self)), part_uri_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGlyphsEditor_Value = Guid.initString("a5ab8616-5b16-4b9f-9629-89b323ed7909");
pub const IID_IXpsOMGlyphsEditor = &IID_IXpsOMGlyphsEditor_Value;
pub const IXpsOMGlyphsEditor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ApplyEdits: *const fn (
            self: *const IXpsOMGlyphsEditor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnicodeString: *const fn (
            self: *const IXpsOMGlyphsEditor,
            unicode_string: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnicodeString: *const fn (
            self: *const IXpsOMGlyphsEditor,
            unicode_string: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndexCount: *const fn (
            self: *const IXpsOMGlyphsEditor,
            index_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndices: *const fn (
            self: *const IXpsOMGlyphsEditor,
            index_count: ?*u32,
            glyph_indices: ?*XPS_GLYPH_INDEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGlyphIndices: *const fn (
            self: *const IXpsOMGlyphsEditor,
            index_count: u32,
            glyph_indices: ?*const XPS_GLYPH_INDEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphMappingCount: *const fn (
            self: *const IXpsOMGlyphsEditor,
            glyph_mapping_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphMappings: *const fn (
            self: *const IXpsOMGlyphsEditor,
            glyph_mapping_count: ?*u32,
            glyph_mappings: ?*XPS_GLYPH_MAPPING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGlyphMappings: *const fn (
            self: *const IXpsOMGlyphsEditor,
            glyph_mapping_count: u32,
            glyph_mappings: ?*const XPS_GLYPH_MAPPING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProhibitedCaretStopCount: *const fn (
            self: *const IXpsOMGlyphsEditor,
            prohibited_caret_stop_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProhibitedCaretStops: *const fn (
            self: *const IXpsOMGlyphsEditor,
            count: ?*u32,
            prohibited_caret_stops: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProhibitedCaretStops: *const fn (
            self: *const IXpsOMGlyphsEditor,
            count: u32,
            prohibited_caret_stops: ?*const u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBidiLevel: *const fn (
            self: *const IXpsOMGlyphsEditor,
            bidi_level: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBidiLevel: *const fn (
            self: *const IXpsOMGlyphsEditor,
            bidi_level: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsSideways: *const fn (
            self: *const IXpsOMGlyphsEditor,
            is_sideways: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsSideways: *const fn (
            self: *const IXpsOMGlyphsEditor,
            is_sideways: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceFontName: *const fn (
            self: *const IXpsOMGlyphsEditor,
            device_font_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDeviceFontName: *const fn (
            self: *const IXpsOMGlyphsEditor,
            device_font_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn applyEdits(self: *const T) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).ApplyEdits(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)));
            }
            pub inline fn getUnicodeString(self: *const T, unicode_string_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetUnicodeString(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), unicode_string_);
            }
            pub inline fn setUnicodeString(self: *const T, unicode_string_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).SetUnicodeString(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), unicode_string_);
            }
            pub inline fn getGlyphIndexCount(self: *const T, index_count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetGlyphIndexCount(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), index_count_);
            }
            pub inline fn getGlyphIndices(self: *const T, index_count_: ?*u32, glyph_indices_: ?*XPS_GLYPH_INDEX) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetGlyphIndices(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), index_count_, glyph_indices_);
            }
            pub inline fn setGlyphIndices(self: *const T, index_count_: u32, glyph_indices_: ?*const XPS_GLYPH_INDEX) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).SetGlyphIndices(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), index_count_, glyph_indices_);
            }
            pub inline fn getGlyphMappingCount(self: *const T, glyph_mapping_count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetGlyphMappingCount(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), glyph_mapping_count_);
            }
            pub inline fn getGlyphMappings(self: *const T, glyph_mapping_count_: ?*u32, glyph_mappings_: ?*XPS_GLYPH_MAPPING) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetGlyphMappings(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), glyph_mapping_count_, glyph_mappings_);
            }
            pub inline fn setGlyphMappings(self: *const T, glyph_mapping_count_: u32, glyph_mappings_: ?*const XPS_GLYPH_MAPPING) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).SetGlyphMappings(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), glyph_mapping_count_, glyph_mappings_);
            }
            pub inline fn getProhibitedCaretStopCount(self: *const T, prohibited_caret_stop_count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetProhibitedCaretStopCount(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), prohibited_caret_stop_count_);
            }
            pub inline fn getProhibitedCaretStops(self: *const T, count_: ?*u32, prohibited_caret_stops_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetProhibitedCaretStops(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), count_, prohibited_caret_stops_);
            }
            pub inline fn setProhibitedCaretStops(self: *const T, count_: u32, prohibited_caret_stops_: ?*const u32) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).SetProhibitedCaretStops(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), count_, prohibited_caret_stops_);
            }
            pub inline fn getBidiLevel(self: *const T, bidi_level_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetBidiLevel(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), bidi_level_);
            }
            pub inline fn setBidiLevel(self: *const T, bidi_level_: u32) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).SetBidiLevel(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), bidi_level_);
            }
            pub inline fn getIsSideways(self: *const T, is_sideways_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetIsSideways(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), is_sideways_);
            }
            pub inline fn setIsSideways(self: *const T, is_sideways_: BOOL) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).SetIsSideways(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), is_sideways_);
            }
            pub inline fn getDeviceFontName(self: *const T, device_font_name_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).GetDeviceFontName(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), device_font_name_);
            }
            pub inline fn setDeviceFontName(self: *const T, device_font_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMGlyphsEditor.VTable, @ptrCast(self.vtable)).SetDeviceFontName(@as(*const IXpsOMGlyphsEditor, @ptrCast(self)), device_font_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGlyphs_Value = Guid.initString("819b3199-0a5a-4b64-bec7-a9e17e780de2");
pub const IID_IXpsOMGlyphs = &IID_IXpsOMGlyphs_Value;
pub const IXpsOMGlyphs = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMVisual.VTable,
        GetUnicodeString: *const fn (
            self: *const IXpsOMGlyphs,
            unicode_string: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndexCount: *const fn (
            self: *const IXpsOMGlyphs,
            index_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndices: *const fn (
            self: *const IXpsOMGlyphs,
            index_count: ?*u32,
            glyph_indices: ?*XPS_GLYPH_INDEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphMappingCount: *const fn (
            self: *const IXpsOMGlyphs,
            glyph_mapping_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphMappings: *const fn (
            self: *const IXpsOMGlyphs,
            glyph_mapping_count: ?*u32,
            glyph_mappings: ?*XPS_GLYPH_MAPPING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProhibitedCaretStopCount: *const fn (
            self: *const IXpsOMGlyphs,
            prohibited_caret_stop_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProhibitedCaretStops: *const fn (
            self: *const IXpsOMGlyphs,
            prohibited_caret_stop_count: ?*u32,
            prohibited_caret_stops: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBidiLevel: *const fn (
            self: *const IXpsOMGlyphs,
            bidi_level: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsSideways: *const fn (
            self: *const IXpsOMGlyphs,
            is_sideways: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceFontName: *const fn (
            self: *const IXpsOMGlyphs,
            device_font_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStyleSimulations: *const fn (
            self: *const IXpsOMGlyphs,
            style_simulations: ?*XPS_STYLE_SIMULATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStyleSimulations: *const fn (
            self: *const IXpsOMGlyphs,
            style_simulations: XPS_STYLE_SIMULATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOrigin: *const fn (
            self: *const IXpsOMGlyphs,
            origin: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOrigin: *const fn (
            self: *const IXpsOMGlyphs,
            origin: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontRenderingEmSize: *const fn (
            self: *const IXpsOMGlyphs,
            font_rendering_em_size: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontRenderingEmSize: *const fn (
            self: *const IXpsOMGlyphs,
            font_rendering_em_size: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontResource: *const fn (
            self: *const IXpsOMGlyphs,
            font_resource: ?*?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontResource: *const fn (
            self: *const IXpsOMGlyphs,
            font_resource: ?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceIndex: *const fn (
            self: *const IXpsOMGlyphs,
            font_face_index: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontFaceIndex: *const fn (
            self: *const IXpsOMGlyphs,
            font_face_index: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrush: *const fn (
            self: *const IXpsOMGlyphs,
            fill_brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrushLocal: *const fn (
            self: *const IXpsOMGlyphs,
            fill_brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillBrushLocal: *const fn (
            self: *const IXpsOMGlyphs,
            fill_brush: ?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrushLookup: *const fn (
            self: *const IXpsOMGlyphs,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillBrushLookup: *const fn (
            self: *const IXpsOMGlyphs,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphsEditor: *const fn (
            self: *const IXpsOMGlyphs,
            editor: ?*?*IXpsOMGlyphsEditor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMGlyphs,
            glyphs: ?*?*IXpsOMGlyphs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMVisual.MethodMixin(T);
            pub inline fn getUnicodeString(self: *const T, unicode_string_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetUnicodeString(@as(*const IXpsOMGlyphs, @ptrCast(self)), unicode_string_);
            }
            pub inline fn getGlyphIndexCount(self: *const T, index_count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetGlyphIndexCount(@as(*const IXpsOMGlyphs, @ptrCast(self)), index_count_);
            }
            pub inline fn getGlyphIndices(self: *const T, index_count_: ?*u32, glyph_indices_: ?*XPS_GLYPH_INDEX) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetGlyphIndices(@as(*const IXpsOMGlyphs, @ptrCast(self)), index_count_, glyph_indices_);
            }
            pub inline fn getGlyphMappingCount(self: *const T, glyph_mapping_count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetGlyphMappingCount(@as(*const IXpsOMGlyphs, @ptrCast(self)), glyph_mapping_count_);
            }
            pub inline fn getGlyphMappings(self: *const T, glyph_mapping_count_: ?*u32, glyph_mappings_: ?*XPS_GLYPH_MAPPING) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetGlyphMappings(@as(*const IXpsOMGlyphs, @ptrCast(self)), glyph_mapping_count_, glyph_mappings_);
            }
            pub inline fn getProhibitedCaretStopCount(self: *const T, prohibited_caret_stop_count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetProhibitedCaretStopCount(@as(*const IXpsOMGlyphs, @ptrCast(self)), prohibited_caret_stop_count_);
            }
            pub inline fn getProhibitedCaretStops(self: *const T, prohibited_caret_stop_count_: ?*u32, prohibited_caret_stops_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetProhibitedCaretStops(@as(*const IXpsOMGlyphs, @ptrCast(self)), prohibited_caret_stop_count_, prohibited_caret_stops_);
            }
            pub inline fn getBidiLevel(self: *const T, bidi_level_: ?*u32) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetBidiLevel(@as(*const IXpsOMGlyphs, @ptrCast(self)), bidi_level_);
            }
            pub inline fn getIsSideways(self: *const T, is_sideways_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetIsSideways(@as(*const IXpsOMGlyphs, @ptrCast(self)), is_sideways_);
            }
            pub inline fn getDeviceFontName(self: *const T, device_font_name_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetDeviceFontName(@as(*const IXpsOMGlyphs, @ptrCast(self)), device_font_name_);
            }
            pub inline fn getStyleSimulations(self: *const T, style_simulations_: ?*XPS_STYLE_SIMULATION) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetStyleSimulations(@as(*const IXpsOMGlyphs, @ptrCast(self)), style_simulations_);
            }
            pub inline fn setStyleSimulations(self: *const T, style_simulations_: XPS_STYLE_SIMULATION) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).SetStyleSimulations(@as(*const IXpsOMGlyphs, @ptrCast(self)), style_simulations_);
            }
            pub inline fn getOrigin(self: *const T, origin_: ?*XPS_POINT) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetOrigin(@as(*const IXpsOMGlyphs, @ptrCast(self)), origin_);
            }
            pub inline fn setOrigin(self: *const T, origin_: ?*const XPS_POINT) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).SetOrigin(@as(*const IXpsOMGlyphs, @ptrCast(self)), origin_);
            }
            pub inline fn getFontRenderingEmSize(self: *const T, font_rendering_em_size_: ?*f32) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetFontRenderingEmSize(@as(*const IXpsOMGlyphs, @ptrCast(self)), font_rendering_em_size_);
            }
            pub inline fn setFontRenderingEmSize(self: *const T, font_rendering_em_size_: f32) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).SetFontRenderingEmSize(@as(*const IXpsOMGlyphs, @ptrCast(self)), font_rendering_em_size_);
            }
            pub inline fn getFontResource(self: *const T, font_resource_: ?*?*IXpsOMFontResource) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetFontResource(@as(*const IXpsOMGlyphs, @ptrCast(self)), font_resource_);
            }
            pub inline fn setFontResource(self: *const T, font_resource_: ?*IXpsOMFontResource) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).SetFontResource(@as(*const IXpsOMGlyphs, @ptrCast(self)), font_resource_);
            }
            pub inline fn getFontFaceIndex(self: *const T, font_face_index_: ?*i16) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetFontFaceIndex(@as(*const IXpsOMGlyphs, @ptrCast(self)), font_face_index_);
            }
            pub inline fn setFontFaceIndex(self: *const T, font_face_index_: i16) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).SetFontFaceIndex(@as(*const IXpsOMGlyphs, @ptrCast(self)), font_face_index_);
            }
            pub inline fn getFillBrush(self: *const T, fill_brush_: ?*?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetFillBrush(@as(*const IXpsOMGlyphs, @ptrCast(self)), fill_brush_);
            }
            pub inline fn getFillBrushLocal(self: *const T, fill_brush_: ?*?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetFillBrushLocal(@as(*const IXpsOMGlyphs, @ptrCast(self)), fill_brush_);
            }
            pub inline fn setFillBrushLocal(self: *const T, fill_brush_: ?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).SetFillBrushLocal(@as(*const IXpsOMGlyphs, @ptrCast(self)), fill_brush_);
            }
            pub inline fn getFillBrushLookup(self: *const T, key_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetFillBrushLookup(@as(*const IXpsOMGlyphs, @ptrCast(self)), key_);
            }
            pub inline fn setFillBrushLookup(self: *const T, key_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).SetFillBrushLookup(@as(*const IXpsOMGlyphs, @ptrCast(self)), key_);
            }
            pub inline fn getGlyphsEditor(self: *const T, editor_: ?*?*IXpsOMGlyphsEditor) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).GetGlyphsEditor(@as(*const IXpsOMGlyphs, @ptrCast(self)), editor_);
            }
            pub inline fn clone(self: *const T, glyphs_: ?*?*IXpsOMGlyphs) HRESULT {
                return @as(*const IXpsOMGlyphs.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMGlyphs, @ptrCast(self)), glyphs_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDashCollection_Value = Guid.initString("081613f4-74eb-48f2-83b3-37a9ce2d7dc6");
pub const IID_IXpsOMDashCollection = &IID_IXpsOMDashCollection_Value;
pub const IXpsOMDashCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMDashCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMDashCollection,
            index: u32,
            dash: ?*XPS_DASH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMDashCollection,
            index: u32,
            dash: ?*const XPS_DASH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMDashCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMDashCollection,
            index: u32,
            dash: ?*const XPS_DASH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMDashCollection,
            dash: ?*const XPS_DASH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMDashCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMDashCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, dash_: ?*XPS_DASH) HRESULT {
                return @as(*const IXpsOMDashCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMDashCollection, @ptrCast(self)), index_, dash_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, dash_: ?*const XPS_DASH) HRESULT {
                return @as(*const IXpsOMDashCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMDashCollection, @ptrCast(self)), index_, dash_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMDashCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMDashCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, dash_: ?*const XPS_DASH) HRESULT {
                return @as(*const IXpsOMDashCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMDashCollection, @ptrCast(self)), index_, dash_);
            }
            pub inline fn append(self: *const T, dash_: ?*const XPS_DASH) HRESULT {
                return @as(*const IXpsOMDashCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMDashCollection, @ptrCast(self)), dash_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMMatrixTransform_Value = Guid.initString("b77330ff-bb37-4501-a93e-f1b1e50bfc46");
pub const IID_IXpsOMMatrixTransform = &IID_IXpsOMMatrixTransform_Value;
pub const IXpsOMMatrixTransform = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMShareable.VTable,
        GetMatrix: *const fn (
            self: *const IXpsOMMatrixTransform,
            matrix: ?*XPS_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrix: *const fn (
            self: *const IXpsOMMatrixTransform,
            matrix: ?*const XPS_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMMatrixTransform,
            matrix_transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMShareable.MethodMixin(T);
            pub inline fn getMatrix(self: *const T, matrix_: ?*XPS_MATRIX) HRESULT {
                return @as(*const IXpsOMMatrixTransform.VTable, @ptrCast(self.vtable)).GetMatrix(@as(*const IXpsOMMatrixTransform, @ptrCast(self)), matrix_);
            }
            pub inline fn setMatrix(self: *const T, matrix_: ?*const XPS_MATRIX) HRESULT {
                return @as(*const IXpsOMMatrixTransform.VTable, @ptrCast(self.vtable)).SetMatrix(@as(*const IXpsOMMatrixTransform, @ptrCast(self)), matrix_);
            }
            pub inline fn clone(self: *const T, matrix_transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMMatrixTransform.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMMatrixTransform, @ptrCast(self)), matrix_transform_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGeometry_Value = Guid.initString("64fcf3d7-4d58-44ba-ad73-a13af6492072");
pub const IID_IXpsOMGeometry = &IID_IXpsOMGeometry_Value;
pub const IXpsOMGeometry = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMShareable.VTable,
        GetFigures: *const fn (
            self: *const IXpsOMGeometry,
            figures: ?*?*IXpsOMGeometryFigureCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillRule: *const fn (
            self: *const IXpsOMGeometry,
            fill_rule: ?*XPS_FILL_RULE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillRule: *const fn (
            self: *const IXpsOMGeometry,
            fill_rule: XPS_FILL_RULE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: *const fn (
            self: *const IXpsOMGeometry,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLocal: *const fn (
            self: *const IXpsOMGeometry,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLocal: *const fn (
            self: *const IXpsOMGeometry,
            transform: ?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLookup: *const fn (
            self: *const IXpsOMGeometry,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLookup: *const fn (
            self: *const IXpsOMGeometry,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMGeometry,
            geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMShareable.MethodMixin(T);
            pub inline fn getFigures(self: *const T, figures_: ?*?*IXpsOMGeometryFigureCollection) HRESULT {
                return @as(*const IXpsOMGeometry.VTable, @ptrCast(self.vtable)).GetFigures(@as(*const IXpsOMGeometry, @ptrCast(self)), figures_);
            }
            pub inline fn getFillRule(self: *const T, fill_rule_: ?*XPS_FILL_RULE) HRESULT {
                return @as(*const IXpsOMGeometry.VTable, @ptrCast(self.vtable)).GetFillRule(@as(*const IXpsOMGeometry, @ptrCast(self)), fill_rule_);
            }
            pub inline fn setFillRule(self: *const T, fill_rule_: XPS_FILL_RULE) HRESULT {
                return @as(*const IXpsOMGeometry.VTable, @ptrCast(self.vtable)).SetFillRule(@as(*const IXpsOMGeometry, @ptrCast(self)), fill_rule_);
            }
            pub inline fn getTransform(self: *const T, transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMGeometry.VTable, @ptrCast(self.vtable)).GetTransform(@as(*const IXpsOMGeometry, @ptrCast(self)), transform_);
            }
            pub inline fn getTransformLocal(self: *const T, transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMGeometry.VTable, @ptrCast(self.vtable)).GetTransformLocal(@as(*const IXpsOMGeometry, @ptrCast(self)), transform_);
            }
            pub inline fn setTransformLocal(self: *const T, transform_: ?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMGeometry.VTable, @ptrCast(self.vtable)).SetTransformLocal(@as(*const IXpsOMGeometry, @ptrCast(self)), transform_);
            }
            pub inline fn getTransformLookup(self: *const T, lookup_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMGeometry.VTable, @ptrCast(self.vtable)).GetTransformLookup(@as(*const IXpsOMGeometry, @ptrCast(self)), lookup_);
            }
            pub inline fn setTransformLookup(self: *const T, lookup_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMGeometry.VTable, @ptrCast(self.vtable)).SetTransformLookup(@as(*const IXpsOMGeometry, @ptrCast(self)), lookup_);
            }
            pub inline fn clone(self: *const T, geometry_: ?*?*IXpsOMGeometry) HRESULT {
                return @as(*const IXpsOMGeometry.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMGeometry, @ptrCast(self)), geometry_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGeometryFigure_Value = Guid.initString("d410dc83-908c-443e-8947-b1795d3c165a");
pub const IID_IXpsOMGeometryFigure = &IID_IXpsOMGeometryFigure_Value;
pub const IXpsOMGeometryFigure = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMGeometryFigure,
            owner: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentData: *const fn (
            self: *const IXpsOMGeometryFigure,
            data_count: ?*u32,
            segment_data: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentTypes: *const fn (
            self: *const IXpsOMGeometryFigure,
            segment_count: ?*u32,
            segment_types: ?*XPS_SEGMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentStrokes: *const fn (
            self: *const IXpsOMGeometryFigure,
            segment_count: ?*u32,
            segment_strokes: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSegments: *const fn (
            self: *const IXpsOMGeometryFigure,
            segment_count: u32,
            segment_data_count: u32,
            segment_types: ?*const XPS_SEGMENT_TYPE,
            segment_data: ?*const f32,
            segment_strokes: ?*const BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStartPoint: *const fn (
            self: *const IXpsOMGeometryFigure,
            start_point: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStartPoint: *const fn (
            self: *const IXpsOMGeometryFigure,
            start_point: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsClosed: *const fn (
            self: *const IXpsOMGeometryFigure,
            is_closed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsClosed: *const fn (
            self: *const IXpsOMGeometryFigure,
            is_closed: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsFilled: *const fn (
            self: *const IXpsOMGeometryFigure,
            is_filled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsFilled: *const fn (
            self: *const IXpsOMGeometryFigure,
            is_filled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentCount: *const fn (
            self: *const IXpsOMGeometryFigure,
            segment_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentDataCount: *const fn (
            self: *const IXpsOMGeometryFigure,
            segment_data_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentStrokePattern: *const fn (
            self: *const IXpsOMGeometryFigure,
            segment_stroke_pattern: ?*XPS_SEGMENT_STROKE_PATTERN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMGeometryFigure,
            geometry_figure: ?*?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOwner(self: *const T, owner_: ?*?*IXpsOMGeometry) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), owner_);
            }
            pub inline fn getSegmentData(self: *const T, data_count_: ?*u32, segment_data_: ?*f32) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetSegmentData(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), data_count_, segment_data_);
            }
            pub inline fn getSegmentTypes(self: *const T, segment_count_: ?*u32, segment_types_: ?*XPS_SEGMENT_TYPE) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetSegmentTypes(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), segment_count_, segment_types_);
            }
            pub inline fn getSegmentStrokes(self: *const T, segment_count_: ?*u32, segment_strokes_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetSegmentStrokes(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), segment_count_, segment_strokes_);
            }
            pub inline fn setSegments(self: *const T, segment_count_: u32, segment_data_count_: u32, segment_types_: ?*const XPS_SEGMENT_TYPE, segment_data_: ?*const f32, segment_strokes_: ?*const BOOL) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).SetSegments(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), segment_count_, segment_data_count_, segment_types_, segment_data_, segment_strokes_);
            }
            pub inline fn getStartPoint(self: *const T, start_point_: ?*XPS_POINT) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetStartPoint(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), start_point_);
            }
            pub inline fn setStartPoint(self: *const T, start_point_: ?*const XPS_POINT) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).SetStartPoint(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), start_point_);
            }
            pub inline fn getIsClosed(self: *const T, is_closed_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetIsClosed(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), is_closed_);
            }
            pub inline fn setIsClosed(self: *const T, is_closed_: BOOL) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).SetIsClosed(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), is_closed_);
            }
            pub inline fn getIsFilled(self: *const T, is_filled_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetIsFilled(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), is_filled_);
            }
            pub inline fn setIsFilled(self: *const T, is_filled_: BOOL) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).SetIsFilled(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), is_filled_);
            }
            pub inline fn getSegmentCount(self: *const T, segment_count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetSegmentCount(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), segment_count_);
            }
            pub inline fn getSegmentDataCount(self: *const T, segment_data_count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetSegmentDataCount(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), segment_data_count_);
            }
            pub inline fn getSegmentStrokePattern(self: *const T, segment_stroke_pattern_: ?*XPS_SEGMENT_STROKE_PATTERN) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).GetSegmentStrokePattern(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), segment_stroke_pattern_);
            }
            pub inline fn clone(self: *const T, geometry_figure_: ?*?*IXpsOMGeometryFigure) HRESULT {
                return @as(*const IXpsOMGeometryFigure.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMGeometryFigure, @ptrCast(self)), geometry_figure_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGeometryFigureCollection_Value = Guid.initString("fd48c3f3-a58e-4b5a-8826-1de54abe72b2");
pub const IID_IXpsOMGeometryFigureCollection = &IID_IXpsOMGeometryFigureCollection_Value;
pub const IXpsOMGeometryFigureCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMGeometryFigureCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMGeometryFigureCollection,
            index: u32,
            geometry_figure: ?*?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMGeometryFigureCollection,
            index: u32,
            geometry_figure: ?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMGeometryFigureCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMGeometryFigureCollection,
            index: u32,
            geometry_figure: ?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMGeometryFigureCollection,
            geometry_figure: ?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGeometryFigureCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMGeometryFigureCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, geometry_figure_: ?*?*IXpsOMGeometryFigure) HRESULT {
                return @as(*const IXpsOMGeometryFigureCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMGeometryFigureCollection, @ptrCast(self)), index_, geometry_figure_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, geometry_figure_: ?*IXpsOMGeometryFigure) HRESULT {
                return @as(*const IXpsOMGeometryFigureCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMGeometryFigureCollection, @ptrCast(self)), index_, geometry_figure_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMGeometryFigureCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMGeometryFigureCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, geometry_figure_: ?*IXpsOMGeometryFigure) HRESULT {
                return @as(*const IXpsOMGeometryFigureCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMGeometryFigureCollection, @ptrCast(self)), index_, geometry_figure_);
            }
            pub inline fn append(self: *const T, geometry_figure_: ?*IXpsOMGeometryFigure) HRESULT {
                return @as(*const IXpsOMGeometryFigureCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMGeometryFigureCollection, @ptrCast(self)), geometry_figure_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPath_Value = Guid.initString("37d38bb6-3ee9-4110-9312-14b194163337");
pub const IID_IXpsOMPath = &IID_IXpsOMPath_Value;
pub const IXpsOMPath = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMVisual.VTable,
        GetGeometry: *const fn (
            self: *const IXpsOMPath,
            geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGeometryLocal: *const fn (
            self: *const IXpsOMPath,
            geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGeometryLocal: *const fn (
            self: *const IXpsOMPath,
            geometry: ?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGeometryLookup: *const fn (
            self: *const IXpsOMPath,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGeometryLookup: *const fn (
            self: *const IXpsOMPath,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessibilityShortDescription: *const fn (
            self: *const IXpsOMPath,
            short_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccessibilityShortDescription: *const fn (
            self: *const IXpsOMPath,
            short_description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessibilityLongDescription: *const fn (
            self: *const IXpsOMPath,
            long_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccessibilityLongDescription: *const fn (
            self: *const IXpsOMPath,
            long_description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSnapsToPixels: *const fn (
            self: *const IXpsOMPath,
            snaps_to_pixels: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapsToPixels: *const fn (
            self: *const IXpsOMPath,
            snaps_to_pixels: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeBrush: *const fn (
            self: *const IXpsOMPath,
            brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeBrushLocal: *const fn (
            self: *const IXpsOMPath,
            brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeBrushLocal: *const fn (
            self: *const IXpsOMPath,
            brush: ?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeBrushLookup: *const fn (
            self: *const IXpsOMPath,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeBrushLookup: *const fn (
            self: *const IXpsOMPath,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeDashes: *const fn (
            self: *const IXpsOMPath,
            stroke_dashes: ?*?*IXpsOMDashCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeDashCap: *const fn (
            self: *const IXpsOMPath,
            stroke_dash_cap: ?*XPS_DASH_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeDashCap: *const fn (
            self: *const IXpsOMPath,
            stroke_dash_cap: XPS_DASH_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeDashOffset: *const fn (
            self: *const IXpsOMPath,
            stroke_dash_offset: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeDashOffset: *const fn (
            self: *const IXpsOMPath,
            stroke_dash_offset: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeStartLineCap: *const fn (
            self: *const IXpsOMPath,
            stroke_start_line_cap: ?*XPS_LINE_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeStartLineCap: *const fn (
            self: *const IXpsOMPath,
            stroke_start_line_cap: XPS_LINE_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeEndLineCap: *const fn (
            self: *const IXpsOMPath,
            stroke_end_line_cap: ?*XPS_LINE_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeEndLineCap: *const fn (
            self: *const IXpsOMPath,
            stroke_end_line_cap: XPS_LINE_CAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeLineJoin: *const fn (
            self: *const IXpsOMPath,
            stroke_line_join: ?*XPS_LINE_JOIN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeLineJoin: *const fn (
            self: *const IXpsOMPath,
            stroke_line_join: XPS_LINE_JOIN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeMiterLimit: *const fn (
            self: *const IXpsOMPath,
            stroke_miter_limit: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeMiterLimit: *const fn (
            self: *const IXpsOMPath,
            stroke_miter_limit: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeThickness: *const fn (
            self: *const IXpsOMPath,
            stroke_thickness: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrokeThickness: *const fn (
            self: *const IXpsOMPath,
            stroke_thickness: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrush: *const fn (
            self: *const IXpsOMPath,
            brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrushLocal: *const fn (
            self: *const IXpsOMPath,
            brush: ?*?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillBrushLocal: *const fn (
            self: *const IXpsOMPath,
            brush: ?*IXpsOMBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFillBrushLookup: *const fn (
            self: *const IXpsOMPath,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFillBrushLookup: *const fn (
            self: *const IXpsOMPath,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMPath,
            path: ?*?*IXpsOMPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMVisual.MethodMixin(T);
            pub inline fn getGeometry(self: *const T, geometry_: ?*?*IXpsOMGeometry) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetGeometry(@as(*const IXpsOMPath, @ptrCast(self)), geometry_);
            }
            pub inline fn getGeometryLocal(self: *const T, geometry_: ?*?*IXpsOMGeometry) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetGeometryLocal(@as(*const IXpsOMPath, @ptrCast(self)), geometry_);
            }
            pub inline fn setGeometryLocal(self: *const T, geometry_: ?*IXpsOMGeometry) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetGeometryLocal(@as(*const IXpsOMPath, @ptrCast(self)), geometry_);
            }
            pub inline fn getGeometryLookup(self: *const T, lookup_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetGeometryLookup(@as(*const IXpsOMPath, @ptrCast(self)), lookup_);
            }
            pub inline fn setGeometryLookup(self: *const T, lookup_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetGeometryLookup(@as(*const IXpsOMPath, @ptrCast(self)), lookup_);
            }
            pub inline fn getAccessibilityShortDescription(self: *const T, short_description_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetAccessibilityShortDescription(@as(*const IXpsOMPath, @ptrCast(self)), short_description_);
            }
            pub inline fn setAccessibilityShortDescription(self: *const T, short_description_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetAccessibilityShortDescription(@as(*const IXpsOMPath, @ptrCast(self)), short_description_);
            }
            pub inline fn getAccessibilityLongDescription(self: *const T, long_description_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetAccessibilityLongDescription(@as(*const IXpsOMPath, @ptrCast(self)), long_description_);
            }
            pub inline fn setAccessibilityLongDescription(self: *const T, long_description_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetAccessibilityLongDescription(@as(*const IXpsOMPath, @ptrCast(self)), long_description_);
            }
            pub inline fn getSnapsToPixels(self: *const T, snaps_to_pixels_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetSnapsToPixels(@as(*const IXpsOMPath, @ptrCast(self)), snaps_to_pixels_);
            }
            pub inline fn setSnapsToPixels(self: *const T, snaps_to_pixels_: BOOL) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetSnapsToPixels(@as(*const IXpsOMPath, @ptrCast(self)), snaps_to_pixels_);
            }
            pub inline fn getStrokeBrush(self: *const T, brush_: ?*?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeBrush(@as(*const IXpsOMPath, @ptrCast(self)), brush_);
            }
            pub inline fn getStrokeBrushLocal(self: *const T, brush_: ?*?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeBrushLocal(@as(*const IXpsOMPath, @ptrCast(self)), brush_);
            }
            pub inline fn setStrokeBrushLocal(self: *const T, brush_: ?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetStrokeBrushLocal(@as(*const IXpsOMPath, @ptrCast(self)), brush_);
            }
            pub inline fn getStrokeBrushLookup(self: *const T, lookup_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeBrushLookup(@as(*const IXpsOMPath, @ptrCast(self)), lookup_);
            }
            pub inline fn setStrokeBrushLookup(self: *const T, lookup_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetStrokeBrushLookup(@as(*const IXpsOMPath, @ptrCast(self)), lookup_);
            }
            pub inline fn getStrokeDashes(self: *const T, stroke_dashes_: ?*?*IXpsOMDashCollection) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeDashes(@as(*const IXpsOMPath, @ptrCast(self)), stroke_dashes_);
            }
            pub inline fn getStrokeDashCap(self: *const T, stroke_dash_cap_: ?*XPS_DASH_CAP) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeDashCap(@as(*const IXpsOMPath, @ptrCast(self)), stroke_dash_cap_);
            }
            pub inline fn setStrokeDashCap(self: *const T, stroke_dash_cap_: XPS_DASH_CAP) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetStrokeDashCap(@as(*const IXpsOMPath, @ptrCast(self)), stroke_dash_cap_);
            }
            pub inline fn getStrokeDashOffset(self: *const T, stroke_dash_offset_: ?*f32) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeDashOffset(@as(*const IXpsOMPath, @ptrCast(self)), stroke_dash_offset_);
            }
            pub inline fn setStrokeDashOffset(self: *const T, stroke_dash_offset_: f32) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetStrokeDashOffset(@as(*const IXpsOMPath, @ptrCast(self)), stroke_dash_offset_);
            }
            pub inline fn getStrokeStartLineCap(self: *const T, stroke_start_line_cap_: ?*XPS_LINE_CAP) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeStartLineCap(@as(*const IXpsOMPath, @ptrCast(self)), stroke_start_line_cap_);
            }
            pub inline fn setStrokeStartLineCap(self: *const T, stroke_start_line_cap_: XPS_LINE_CAP) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetStrokeStartLineCap(@as(*const IXpsOMPath, @ptrCast(self)), stroke_start_line_cap_);
            }
            pub inline fn getStrokeEndLineCap(self: *const T, stroke_end_line_cap_: ?*XPS_LINE_CAP) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeEndLineCap(@as(*const IXpsOMPath, @ptrCast(self)), stroke_end_line_cap_);
            }
            pub inline fn setStrokeEndLineCap(self: *const T, stroke_end_line_cap_: XPS_LINE_CAP) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetStrokeEndLineCap(@as(*const IXpsOMPath, @ptrCast(self)), stroke_end_line_cap_);
            }
            pub inline fn getStrokeLineJoin(self: *const T, stroke_line_join_: ?*XPS_LINE_JOIN) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeLineJoin(@as(*const IXpsOMPath, @ptrCast(self)), stroke_line_join_);
            }
            pub inline fn setStrokeLineJoin(self: *const T, stroke_line_join_: XPS_LINE_JOIN) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetStrokeLineJoin(@as(*const IXpsOMPath, @ptrCast(self)), stroke_line_join_);
            }
            pub inline fn getStrokeMiterLimit(self: *const T, stroke_miter_limit_: ?*f32) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeMiterLimit(@as(*const IXpsOMPath, @ptrCast(self)), stroke_miter_limit_);
            }
            pub inline fn setStrokeMiterLimit(self: *const T, stroke_miter_limit_: f32) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetStrokeMiterLimit(@as(*const IXpsOMPath, @ptrCast(self)), stroke_miter_limit_);
            }
            pub inline fn getStrokeThickness(self: *const T, stroke_thickness_: ?*f32) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetStrokeThickness(@as(*const IXpsOMPath, @ptrCast(self)), stroke_thickness_);
            }
            pub inline fn setStrokeThickness(self: *const T, stroke_thickness_: f32) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetStrokeThickness(@as(*const IXpsOMPath, @ptrCast(self)), stroke_thickness_);
            }
            pub inline fn getFillBrush(self: *const T, brush_: ?*?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetFillBrush(@as(*const IXpsOMPath, @ptrCast(self)), brush_);
            }
            pub inline fn getFillBrushLocal(self: *const T, brush_: ?*?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetFillBrushLocal(@as(*const IXpsOMPath, @ptrCast(self)), brush_);
            }
            pub inline fn setFillBrushLocal(self: *const T, brush_: ?*IXpsOMBrush) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetFillBrushLocal(@as(*const IXpsOMPath, @ptrCast(self)), brush_);
            }
            pub inline fn getFillBrushLookup(self: *const T, lookup_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).GetFillBrushLookup(@as(*const IXpsOMPath, @ptrCast(self)), lookup_);
            }
            pub inline fn setFillBrushLookup(self: *const T, lookup_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).SetFillBrushLookup(@as(*const IXpsOMPath, @ptrCast(self)), lookup_);
            }
            pub inline fn clone(self: *const T, path_: ?*?*IXpsOMPath) HRESULT {
                return @as(*const IXpsOMPath.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMPath, @ptrCast(self)), path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMBrush_Value = Guid.initString("56a3f80c-ea4c-4187-a57b-a2a473b2b42b");
pub const IID_IXpsOMBrush = &IID_IXpsOMBrush_Value;
pub const IXpsOMBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMShareable.VTable,
        GetOpacity: *const fn (
            self: *const IXpsOMBrush,
            opacity: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity: *const fn (
            self: *const IXpsOMBrush,
            opacity: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMShareable.MethodMixin(T);
            pub inline fn getOpacity(self: *const T, opacity_: ?*f32) HRESULT {
                return @as(*const IXpsOMBrush.VTable, @ptrCast(self.vtable)).GetOpacity(@as(*const IXpsOMBrush, @ptrCast(self)), opacity_);
            }
            pub inline fn setOpacity(self: *const T, opacity_: f32) HRESULT {
                return @as(*const IXpsOMBrush.VTable, @ptrCast(self.vtable)).SetOpacity(@as(*const IXpsOMBrush, @ptrCast(self)), opacity_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGradientStopCollection_Value = Guid.initString("c9174c3a-3cd3-4319-bda4-11a39392ceef");
pub const IID_IXpsOMGradientStopCollection = &IID_IXpsOMGradientStopCollection_Value;
pub const IXpsOMGradientStopCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMGradientStopCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMGradientStopCollection,
            index: u32,
            stop: ?*?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMGradientStopCollection,
            index: u32,
            stop: ?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMGradientStopCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMGradientStopCollection,
            index: u32,
            stop: ?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMGradientStopCollection,
            stop: ?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMGradientStopCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMGradientStopCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, stop_: ?*?*IXpsOMGradientStop) HRESULT {
                return @as(*const IXpsOMGradientStopCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMGradientStopCollection, @ptrCast(self)), index_, stop_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, stop_: ?*IXpsOMGradientStop) HRESULT {
                return @as(*const IXpsOMGradientStopCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMGradientStopCollection, @ptrCast(self)), index_, stop_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMGradientStopCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMGradientStopCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, stop_: ?*IXpsOMGradientStop) HRESULT {
                return @as(*const IXpsOMGradientStopCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMGradientStopCollection, @ptrCast(self)), index_, stop_);
            }
            pub inline fn append(self: *const T, stop_: ?*IXpsOMGradientStop) HRESULT {
                return @as(*const IXpsOMGradientStopCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMGradientStopCollection, @ptrCast(self)), stop_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMSolidColorBrush_Value = Guid.initString("a06f9f05-3be9-4763-98a8-094fc672e488");
pub const IID_IXpsOMSolidColorBrush = &IID_IXpsOMSolidColorBrush_Value;
pub const IXpsOMSolidColorBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMBrush.VTable,
        GetColor: *const fn (
            self: *const IXpsOMSolidColorBrush,
            color: ?*XPS_COLOR,
            color_profile: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColor: *const fn (
            self: *const IXpsOMSolidColorBrush,
            color: ?*const XPS_COLOR,
            color_profile: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMSolidColorBrush,
            solid_color_brush: ?*?*IXpsOMSolidColorBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMBrush.MethodMixin(T);
            pub inline fn getColor(self: *const T, color_: ?*XPS_COLOR, color_profile_: ?*?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMSolidColorBrush.VTable, @ptrCast(self.vtable)).GetColor(@as(*const IXpsOMSolidColorBrush, @ptrCast(self)), color_, color_profile_);
            }
            pub inline fn setColor(self: *const T, color_: ?*const XPS_COLOR, color_profile_: ?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMSolidColorBrush.VTable, @ptrCast(self.vtable)).SetColor(@as(*const IXpsOMSolidColorBrush, @ptrCast(self)), color_, color_profile_);
            }
            pub inline fn clone(self: *const T, solid_color_brush_: ?*?*IXpsOMSolidColorBrush) HRESULT {
                return @as(*const IXpsOMSolidColorBrush.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMSolidColorBrush, @ptrCast(self)), solid_color_brush_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMTileBrush_Value = Guid.initString("0fc2328d-d722-4a54-b2ec-be90218a789e");
pub const IID_IXpsOMTileBrush = &IID_IXpsOMTileBrush_Value;
pub const IXpsOMTileBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMBrush.VTable,
        GetTransform: *const fn (
            self: *const IXpsOMTileBrush,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLocal: *const fn (
            self: *const IXpsOMTileBrush,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLocal: *const fn (
            self: *const IXpsOMTileBrush,
            transform: ?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLookup: *const fn (
            self: *const IXpsOMTileBrush,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLookup: *const fn (
            self: *const IXpsOMTileBrush,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewbox: *const fn (
            self: *const IXpsOMTileBrush,
            viewbox: ?*XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewbox: *const fn (
            self: *const IXpsOMTileBrush,
            viewbox: ?*const XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewport: *const fn (
            self: *const IXpsOMTileBrush,
            viewport: ?*XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewport: *const fn (
            self: *const IXpsOMTileBrush,
            viewport: ?*const XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTileMode: *const fn (
            self: *const IXpsOMTileBrush,
            tile_mode: ?*XPS_TILE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTileMode: *const fn (
            self: *const IXpsOMTileBrush,
            tile_mode: XPS_TILE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMBrush.MethodMixin(T);
            pub inline fn getTransform(self: *const T, transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).GetTransform(@as(*const IXpsOMTileBrush, @ptrCast(self)), transform_);
            }
            pub inline fn getTransformLocal(self: *const T, transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).GetTransformLocal(@as(*const IXpsOMTileBrush, @ptrCast(self)), transform_);
            }
            pub inline fn setTransformLocal(self: *const T, transform_: ?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).SetTransformLocal(@as(*const IXpsOMTileBrush, @ptrCast(self)), transform_);
            }
            pub inline fn getTransformLookup(self: *const T, key_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).GetTransformLookup(@as(*const IXpsOMTileBrush, @ptrCast(self)), key_);
            }
            pub inline fn setTransformLookup(self: *const T, key_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).SetTransformLookup(@as(*const IXpsOMTileBrush, @ptrCast(self)), key_);
            }
            pub inline fn getViewbox(self: *const T, viewbox_: ?*XPS_RECT) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).GetViewbox(@as(*const IXpsOMTileBrush, @ptrCast(self)), viewbox_);
            }
            pub inline fn setViewbox(self: *const T, viewbox_: ?*const XPS_RECT) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).SetViewbox(@as(*const IXpsOMTileBrush, @ptrCast(self)), viewbox_);
            }
            pub inline fn getViewport(self: *const T, viewport_: ?*XPS_RECT) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).GetViewport(@as(*const IXpsOMTileBrush, @ptrCast(self)), viewport_);
            }
            pub inline fn setViewport(self: *const T, viewport_: ?*const XPS_RECT) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).SetViewport(@as(*const IXpsOMTileBrush, @ptrCast(self)), viewport_);
            }
            pub inline fn getTileMode(self: *const T, tile_mode_: ?*XPS_TILE_MODE) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).GetTileMode(@as(*const IXpsOMTileBrush, @ptrCast(self)), tile_mode_);
            }
            pub inline fn setTileMode(self: *const T, tile_mode_: XPS_TILE_MODE) HRESULT {
                return @as(*const IXpsOMTileBrush.VTable, @ptrCast(self.vtable)).SetTileMode(@as(*const IXpsOMTileBrush, @ptrCast(self)), tile_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMVisualBrush_Value = Guid.initString("97e294af-5b37-46b4-8057-874d2f64119b");
pub const IID_IXpsOMVisualBrush = &IID_IXpsOMVisualBrush_Value;
pub const IXpsOMVisualBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMTileBrush.VTable,
        GetVisual: *const fn (
            self: *const IXpsOMVisualBrush,
            visual: ?*?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisualLocal: *const fn (
            self: *const IXpsOMVisualBrush,
            visual: ?*?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVisualLocal: *const fn (
            self: *const IXpsOMVisualBrush,
            visual: ?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisualLookup: *const fn (
            self: *const IXpsOMVisualBrush,
            lookup: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVisualLookup: *const fn (
            self: *const IXpsOMVisualBrush,
            lookup: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMVisualBrush,
            visual_brush: ?*?*IXpsOMVisualBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMTileBrush.MethodMixin(T);
            pub inline fn getVisual(self: *const T, visual_: ?*?*IXpsOMVisual) HRESULT {
                return @as(*const IXpsOMVisualBrush.VTable, @ptrCast(self.vtable)).GetVisual(@as(*const IXpsOMVisualBrush, @ptrCast(self)), visual_);
            }
            pub inline fn getVisualLocal(self: *const T, visual_: ?*?*IXpsOMVisual) HRESULT {
                return @as(*const IXpsOMVisualBrush.VTable, @ptrCast(self.vtable)).GetVisualLocal(@as(*const IXpsOMVisualBrush, @ptrCast(self)), visual_);
            }
            pub inline fn setVisualLocal(self: *const T, visual_: ?*IXpsOMVisual) HRESULT {
                return @as(*const IXpsOMVisualBrush.VTable, @ptrCast(self.vtable)).SetVisualLocal(@as(*const IXpsOMVisualBrush, @ptrCast(self)), visual_);
            }
            pub inline fn getVisualLookup(self: *const T, lookup_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMVisualBrush.VTable, @ptrCast(self.vtable)).GetVisualLookup(@as(*const IXpsOMVisualBrush, @ptrCast(self)), lookup_);
            }
            pub inline fn setVisualLookup(self: *const T, lookup_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMVisualBrush.VTable, @ptrCast(self.vtable)).SetVisualLookup(@as(*const IXpsOMVisualBrush, @ptrCast(self)), lookup_);
            }
            pub inline fn clone(self: *const T, visual_brush_: ?*?*IXpsOMVisualBrush) HRESULT {
                return @as(*const IXpsOMVisualBrush.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMVisualBrush, @ptrCast(self)), visual_brush_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMImageBrush_Value = Guid.initString("3df0b466-d382-49ef-8550-dd94c80242e4");
pub const IID_IXpsOMImageBrush = &IID_IXpsOMImageBrush_Value;
pub const IXpsOMImageBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMTileBrush.VTable,
        GetImageResource: *const fn (
            self: *const IXpsOMImageBrush,
            image_resource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetImageResource: *const fn (
            self: *const IXpsOMImageBrush,
            image_resource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorProfileResource: *const fn (
            self: *const IXpsOMImageBrush,
            color_profile_resource: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorProfileResource: *const fn (
            self: *const IXpsOMImageBrush,
            color_profile_resource: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMImageBrush,
            image_brush: ?*?*IXpsOMImageBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMTileBrush.MethodMixin(T);
            pub inline fn getImageResource(self: *const T, image_resource_: ?*?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMImageBrush.VTable, @ptrCast(self.vtable)).GetImageResource(@as(*const IXpsOMImageBrush, @ptrCast(self)), image_resource_);
            }
            pub inline fn setImageResource(self: *const T, image_resource_: ?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMImageBrush.VTable, @ptrCast(self.vtable)).SetImageResource(@as(*const IXpsOMImageBrush, @ptrCast(self)), image_resource_);
            }
            pub inline fn getColorProfileResource(self: *const T, color_profile_resource_: ?*?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMImageBrush.VTable, @ptrCast(self.vtable)).GetColorProfileResource(@as(*const IXpsOMImageBrush, @ptrCast(self)), color_profile_resource_);
            }
            pub inline fn setColorProfileResource(self: *const T, color_profile_resource_: ?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMImageBrush.VTable, @ptrCast(self.vtable)).SetColorProfileResource(@as(*const IXpsOMImageBrush, @ptrCast(self)), color_profile_resource_);
            }
            pub inline fn clone(self: *const T, image_brush_: ?*?*IXpsOMImageBrush) HRESULT {
                return @as(*const IXpsOMImageBrush.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMImageBrush, @ptrCast(self)), image_brush_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGradientStop_Value = Guid.initString("5cf4f5cc-3969-49b5-a70a-5550b618fe49");
pub const IID_IXpsOMGradientStop = &IID_IXpsOMGradientStop_Value;
pub const IXpsOMGradientStop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMGradientStop,
            owner: ?*?*IXpsOMGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOffset: *const fn (
            self: *const IXpsOMGradientStop,
            offset: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffset: *const fn (
            self: *const IXpsOMGradientStop,
            offset: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColor: *const fn (
            self: *const IXpsOMGradientStop,
            color: ?*XPS_COLOR,
            color_profile: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColor: *const fn (
            self: *const IXpsOMGradientStop,
            color: ?*const XPS_COLOR,
            color_profile: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMGradientStop,
            gradient_stop: ?*?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOwner(self: *const T, owner_: ?*?*IXpsOMGradientBrush) HRESULT {
                return @as(*const IXpsOMGradientStop.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMGradientStop, @ptrCast(self)), owner_);
            }
            pub inline fn getOffset(self: *const T, offset_: ?*f32) HRESULT {
                return @as(*const IXpsOMGradientStop.VTable, @ptrCast(self.vtable)).GetOffset(@as(*const IXpsOMGradientStop, @ptrCast(self)), offset_);
            }
            pub inline fn setOffset(self: *const T, offset_: f32) HRESULT {
                return @as(*const IXpsOMGradientStop.VTable, @ptrCast(self.vtable)).SetOffset(@as(*const IXpsOMGradientStop, @ptrCast(self)), offset_);
            }
            pub inline fn getColor(self: *const T, color_: ?*XPS_COLOR, color_profile_: ?*?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMGradientStop.VTable, @ptrCast(self.vtable)).GetColor(@as(*const IXpsOMGradientStop, @ptrCast(self)), color_, color_profile_);
            }
            pub inline fn setColor(self: *const T, color_: ?*const XPS_COLOR, color_profile_: ?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMGradientStop.VTable, @ptrCast(self.vtable)).SetColor(@as(*const IXpsOMGradientStop, @ptrCast(self)), color_, color_profile_);
            }
            pub inline fn clone(self: *const T, gradient_stop_: ?*?*IXpsOMGradientStop) HRESULT {
                return @as(*const IXpsOMGradientStop.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMGradientStop, @ptrCast(self)), gradient_stop_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMGradientBrush_Value = Guid.initString("edb59622-61a2-42c3-bace-acf2286c06bf");
pub const IID_IXpsOMGradientBrush = &IID_IXpsOMGradientBrush_Value;
pub const IXpsOMGradientBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMBrush.VTable,
        GetGradientStops: *const fn (
            self: *const IXpsOMGradientBrush,
            gradient_stops: ?*?*IXpsOMGradientStopCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: *const fn (
            self: *const IXpsOMGradientBrush,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLocal: *const fn (
            self: *const IXpsOMGradientBrush,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLocal: *const fn (
            self: *const IXpsOMGradientBrush,
            transform: ?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransformLookup: *const fn (
            self: *const IXpsOMGradientBrush,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformLookup: *const fn (
            self: *const IXpsOMGradientBrush,
            key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpreadMethod: *const fn (
            self: *const IXpsOMGradientBrush,
            spread_method: ?*XPS_SPREAD_METHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpreadMethod: *const fn (
            self: *const IXpsOMGradientBrush,
            spread_method: XPS_SPREAD_METHOD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorInterpolationMode: *const fn (
            self: *const IXpsOMGradientBrush,
            color_interpolation_mode: ?*XPS_COLOR_INTERPOLATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorInterpolationMode: *const fn (
            self: *const IXpsOMGradientBrush,
            color_interpolation_mode: XPS_COLOR_INTERPOLATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMBrush.MethodMixin(T);
            pub inline fn getGradientStops(self: *const T, gradient_stops_: ?*?*IXpsOMGradientStopCollection) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).GetGradientStops(@as(*const IXpsOMGradientBrush, @ptrCast(self)), gradient_stops_);
            }
            pub inline fn getTransform(self: *const T, transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).GetTransform(@as(*const IXpsOMGradientBrush, @ptrCast(self)), transform_);
            }
            pub inline fn getTransformLocal(self: *const T, transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).GetTransformLocal(@as(*const IXpsOMGradientBrush, @ptrCast(self)), transform_);
            }
            pub inline fn setTransformLocal(self: *const T, transform_: ?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).SetTransformLocal(@as(*const IXpsOMGradientBrush, @ptrCast(self)), transform_);
            }
            pub inline fn getTransformLookup(self: *const T, key_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).GetTransformLookup(@as(*const IXpsOMGradientBrush, @ptrCast(self)), key_);
            }
            pub inline fn setTransformLookup(self: *const T, key_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).SetTransformLookup(@as(*const IXpsOMGradientBrush, @ptrCast(self)), key_);
            }
            pub inline fn getSpreadMethod(self: *const T, spread_method_: ?*XPS_SPREAD_METHOD) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).GetSpreadMethod(@as(*const IXpsOMGradientBrush, @ptrCast(self)), spread_method_);
            }
            pub inline fn setSpreadMethod(self: *const T, spread_method_: XPS_SPREAD_METHOD) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).SetSpreadMethod(@as(*const IXpsOMGradientBrush, @ptrCast(self)), spread_method_);
            }
            pub inline fn getColorInterpolationMode(self: *const T, color_interpolation_mode_: ?*XPS_COLOR_INTERPOLATION) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).GetColorInterpolationMode(@as(*const IXpsOMGradientBrush, @ptrCast(self)), color_interpolation_mode_);
            }
            pub inline fn setColorInterpolationMode(self: *const T, color_interpolation_mode_: XPS_COLOR_INTERPOLATION) HRESULT {
                return @as(*const IXpsOMGradientBrush.VTable, @ptrCast(self.vtable)).SetColorInterpolationMode(@as(*const IXpsOMGradientBrush, @ptrCast(self)), color_interpolation_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMLinearGradientBrush_Value = Guid.initString("005e279f-c30d-40ff-93ec-1950d3c528db");
pub const IID_IXpsOMLinearGradientBrush = &IID_IXpsOMLinearGradientBrush_Value;
pub const IXpsOMLinearGradientBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMGradientBrush.VTable,
        GetStartPoint: *const fn (
            self: *const IXpsOMLinearGradientBrush,
            start_point: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStartPoint: *const fn (
            self: *const IXpsOMLinearGradientBrush,
            start_point: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEndPoint: *const fn (
            self: *const IXpsOMLinearGradientBrush,
            end_point: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEndPoint: *const fn (
            self: *const IXpsOMLinearGradientBrush,
            end_point: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMLinearGradientBrush,
            linear_gradient_brush: ?*?*IXpsOMLinearGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMGradientBrush.MethodMixin(T);
            pub inline fn getStartPoint(self: *const T, start_point_: ?*XPS_POINT) HRESULT {
                return @as(*const IXpsOMLinearGradientBrush.VTable, @ptrCast(self.vtable)).GetStartPoint(@as(*const IXpsOMLinearGradientBrush, @ptrCast(self)), start_point_);
            }
            pub inline fn setStartPoint(self: *const T, start_point_: ?*const XPS_POINT) HRESULT {
                return @as(*const IXpsOMLinearGradientBrush.VTable, @ptrCast(self.vtable)).SetStartPoint(@as(*const IXpsOMLinearGradientBrush, @ptrCast(self)), start_point_);
            }
            pub inline fn getEndPoint(self: *const T, end_point_: ?*XPS_POINT) HRESULT {
                return @as(*const IXpsOMLinearGradientBrush.VTable, @ptrCast(self.vtable)).GetEndPoint(@as(*const IXpsOMLinearGradientBrush, @ptrCast(self)), end_point_);
            }
            pub inline fn setEndPoint(self: *const T, end_point_: ?*const XPS_POINT) HRESULT {
                return @as(*const IXpsOMLinearGradientBrush.VTable, @ptrCast(self.vtable)).SetEndPoint(@as(*const IXpsOMLinearGradientBrush, @ptrCast(self)), end_point_);
            }
            pub inline fn clone(self: *const T, linear_gradient_brush_: ?*?*IXpsOMLinearGradientBrush) HRESULT {
                return @as(*const IXpsOMLinearGradientBrush.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMLinearGradientBrush, @ptrCast(self)), linear_gradient_brush_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMRadialGradientBrush_Value = Guid.initString("75f207e5-08bf-413c-96b1-b82b4064176b");
pub const IID_IXpsOMRadialGradientBrush = &IID_IXpsOMRadialGradientBrush_Value;
pub const IXpsOMRadialGradientBrush = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMGradientBrush.VTable,
        GetCenter: *const fn (
            self: *const IXpsOMRadialGradientBrush,
            center: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenter: *const fn (
            self: *const IXpsOMRadialGradientBrush,
            center: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRadiiSizes: *const fn (
            self: *const IXpsOMRadialGradientBrush,
            radii_sizes: ?*XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRadiiSizes: *const fn (
            self: *const IXpsOMRadialGradientBrush,
            radii_sizes: ?*const XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGradientOrigin: *const fn (
            self: *const IXpsOMRadialGradientBrush,
            origin: ?*XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGradientOrigin: *const fn (
            self: *const IXpsOMRadialGradientBrush,
            origin: ?*const XPS_POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMRadialGradientBrush,
            radial_gradient_brush: ?*?*IXpsOMRadialGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMGradientBrush.MethodMixin(T);
            pub inline fn getCenter(self: *const T, center_: ?*XPS_POINT) HRESULT {
                return @as(*const IXpsOMRadialGradientBrush.VTable, @ptrCast(self.vtable)).GetCenter(@as(*const IXpsOMRadialGradientBrush, @ptrCast(self)), center_);
            }
            pub inline fn setCenter(self: *const T, center_: ?*const XPS_POINT) HRESULT {
                return @as(*const IXpsOMRadialGradientBrush.VTable, @ptrCast(self.vtable)).SetCenter(@as(*const IXpsOMRadialGradientBrush, @ptrCast(self)), center_);
            }
            pub inline fn getRadiiSizes(self: *const T, radii_sizes_: ?*XPS_SIZE) HRESULT {
                return @as(*const IXpsOMRadialGradientBrush.VTable, @ptrCast(self.vtable)).GetRadiiSizes(@as(*const IXpsOMRadialGradientBrush, @ptrCast(self)), radii_sizes_);
            }
            pub inline fn setRadiiSizes(self: *const T, radii_sizes_: ?*const XPS_SIZE) HRESULT {
                return @as(*const IXpsOMRadialGradientBrush.VTable, @ptrCast(self.vtable)).SetRadiiSizes(@as(*const IXpsOMRadialGradientBrush, @ptrCast(self)), radii_sizes_);
            }
            pub inline fn getGradientOrigin(self: *const T, origin_: ?*XPS_POINT) HRESULT {
                return @as(*const IXpsOMRadialGradientBrush.VTable, @ptrCast(self.vtable)).GetGradientOrigin(@as(*const IXpsOMRadialGradientBrush, @ptrCast(self)), origin_);
            }
            pub inline fn setGradientOrigin(self: *const T, origin_: ?*const XPS_POINT) HRESULT {
                return @as(*const IXpsOMRadialGradientBrush.VTable, @ptrCast(self.vtable)).SetGradientOrigin(@as(*const IXpsOMRadialGradientBrush, @ptrCast(self)), origin_);
            }
            pub inline fn clone(self: *const T, radial_gradient_brush_: ?*?*IXpsOMRadialGradientBrush) HRESULT {
                return @as(*const IXpsOMRadialGradientBrush.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMRadialGradientBrush, @ptrCast(self)), radial_gradient_brush_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMResource_Value = Guid.initString("da2ac0a2-73a2-4975-ad14-74097c3ff3a5");
pub const IID_IXpsOMResource = &IID_IXpsOMResource_Value;
pub const IXpsOMResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMPart.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPartResources_Value = Guid.initString("f4cf7729-4864-4275-99b3-a8717163ecaf");
pub const IID_IXpsOMPartResources = &IID_IXpsOMPartResources_Value;
pub const IXpsOMPartResources = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontResources: *const fn (
            self: *const IXpsOMPartResources,
            font_resources: ?*?*IXpsOMFontResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageResources: *const fn (
            self: *const IXpsOMPartResources,
            image_resources: ?*?*IXpsOMImageResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorProfileResources: *const fn (
            self: *const IXpsOMPartResources,
            color_profile_resources: ?*?*IXpsOMColorProfileResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemoteDictionaryResources: *const fn (
            self: *const IXpsOMPartResources,
            dictionary_resources: ?*?*IXpsOMRemoteDictionaryResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFontResources(self: *const T, font_resources_: ?*?*IXpsOMFontResourceCollection) HRESULT {
                return @as(*const IXpsOMPartResources.VTable, @ptrCast(self.vtable)).GetFontResources(@as(*const IXpsOMPartResources, @ptrCast(self)), font_resources_);
            }
            pub inline fn getImageResources(self: *const T, image_resources_: ?*?*IXpsOMImageResourceCollection) HRESULT {
                return @as(*const IXpsOMPartResources.VTable, @ptrCast(self.vtable)).GetImageResources(@as(*const IXpsOMPartResources, @ptrCast(self)), image_resources_);
            }
            pub inline fn getColorProfileResources(self: *const T, color_profile_resources_: ?*?*IXpsOMColorProfileResourceCollection) HRESULT {
                return @as(*const IXpsOMPartResources.VTable, @ptrCast(self.vtable)).GetColorProfileResources(@as(*const IXpsOMPartResources, @ptrCast(self)), color_profile_resources_);
            }
            pub inline fn getRemoteDictionaryResources(self: *const T, dictionary_resources_: ?*?*IXpsOMRemoteDictionaryResourceCollection) HRESULT {
                return @as(*const IXpsOMPartResources.VTable, @ptrCast(self.vtable)).GetRemoteDictionaryResources(@as(*const IXpsOMPartResources, @ptrCast(self)), dictionary_resources_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDictionary_Value = Guid.initString("897c86b8-8eaf-4ae3-bdde-56419fcf4236");
pub const IID_IXpsOMDictionary = &IID_IXpsOMDictionary_Value;
pub const IXpsOMDictionary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMDictionary,
            owner: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IXpsOMDictionary,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMDictionary,
            index: u32,
            key: ?*?PWSTR,
            entry: ?*?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByKey: *const fn (
            self: *const IXpsOMDictionary,
            key: ?[*:0]const u16,
            before_entry: ?*IXpsOMShareable,
            entry: ?*?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIndex: *const fn (
            self: *const IXpsOMDictionary,
            entry: ?*IXpsOMShareable,
            index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMDictionary,
            key: ?[*:0]const u16,
            entry: ?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMDictionary,
            index: u32,
            key: ?[*:0]const u16,
            entry: ?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMDictionary,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMDictionary,
            index: u32,
            key: ?[*:0]const u16,
            entry: ?*IXpsOMShareable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMDictionary,
            dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOwner(self: *const T, owner_: ?*?*IUnknown) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMDictionary, @ptrCast(self)), owner_);
            }
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMDictionary, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, key_: ?*?PWSTR, entry_: ?*?*IXpsOMShareable) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMDictionary, @ptrCast(self)), index_, key_, entry_);
            }
            pub inline fn getByKey(self: *const T, key_: ?[*:0]const u16, before_entry_: ?*IXpsOMShareable, entry_: ?*?*IXpsOMShareable) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).GetByKey(@as(*const IXpsOMDictionary, @ptrCast(self)), key_, before_entry_, entry_);
            }
            pub inline fn getIndex(self: *const T, entry_: ?*IXpsOMShareable, index_: ?*u32) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).GetIndex(@as(*const IXpsOMDictionary, @ptrCast(self)), entry_, index_);
            }
            pub inline fn append(self: *const T, key_: ?[*:0]const u16, entry_: ?*IXpsOMShareable) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMDictionary, @ptrCast(self)), key_, entry_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, key_: ?[*:0]const u16, entry_: ?*IXpsOMShareable) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMDictionary, @ptrCast(self)), index_, key_, entry_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMDictionary, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, key_: ?[*:0]const u16, entry_: ?*IXpsOMShareable) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMDictionary, @ptrCast(self)), index_, key_, entry_);
            }
            pub inline fn clone(self: *const T, dictionary_: ?*?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMDictionary.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMDictionary, @ptrCast(self)), dictionary_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMFontResource_Value = Guid.initString("a8c45708-47d9-4af4-8d20-33b48c9b8485");
pub const IID_IXpsOMFontResource = &IID_IXpsOMFontResource_Value;
pub const IXpsOMFontResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetStream: *const fn (
            self: *const IXpsOMFontResource,
            reader_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: *const fn (
            self: *const IXpsOMFontResource,
            source_stream: ?*IStream,
            embedding_option: XPS_FONT_EMBEDDING,
            part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEmbeddingOption: *const fn (
            self: *const IXpsOMFontResource,
            embedding_option: ?*XPS_FONT_EMBEDDING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMResource.MethodMixin(T);
            pub inline fn getStream(self: *const T, reader_stream_: ?*?*IStream) HRESULT {
                return @as(*const IXpsOMFontResource.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IXpsOMFontResource, @ptrCast(self)), reader_stream_);
            }
            pub inline fn setContent(self: *const T, source_stream_: ?*IStream, embedding_option_: XPS_FONT_EMBEDDING, part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMFontResource.VTable, @ptrCast(self.vtable)).SetContent(@as(*const IXpsOMFontResource, @ptrCast(self)), source_stream_, embedding_option_, part_name_);
            }
            pub inline fn getEmbeddingOption(self: *const T, embedding_option_: ?*XPS_FONT_EMBEDDING) HRESULT {
                return @as(*const IXpsOMFontResource.VTable, @ptrCast(self.vtable)).GetEmbeddingOption(@as(*const IXpsOMFontResource, @ptrCast(self)), embedding_option_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMFontResourceCollection_Value = Guid.initString("70b4a6bb-88d4-4fa8-aaf9-6d9c596fdbad");
pub const IID_IXpsOMFontResourceCollection = &IID_IXpsOMFontResourceCollection_Value;
pub const IXpsOMFontResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMFontResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMFontResourceCollection,
            index: u32,
            value: ?*?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMFontResourceCollection,
            index: u32,
            value: ?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMFontResourceCollection,
            index: u32,
            value: ?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMFontResourceCollection,
            value: ?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMFontResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: *const fn (
            self: *const IXpsOMFontResourceCollection,
            part_name: ?*IOpcPartUri,
            part: ?*?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMFontResourceCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMFontResourceCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, value_: ?*?*IXpsOMFontResource) HRESULT {
                return @as(*const IXpsOMFontResourceCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMFontResourceCollection, @ptrCast(self)), index_, value_);
            }
            pub inline fn setAt(self: *const T, index_: u32, value_: ?*IXpsOMFontResource) HRESULT {
                return @as(*const IXpsOMFontResourceCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMFontResourceCollection, @ptrCast(self)), index_, value_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, value_: ?*IXpsOMFontResource) HRESULT {
                return @as(*const IXpsOMFontResourceCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMFontResourceCollection, @ptrCast(self)), index_, value_);
            }
            pub inline fn append(self: *const T, value_: ?*IXpsOMFontResource) HRESULT {
                return @as(*const IXpsOMFontResourceCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMFontResourceCollection, @ptrCast(self)), value_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMFontResourceCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMFontResourceCollection, @ptrCast(self)), index_);
            }
            pub inline fn getByPartName(self: *const T, part_name_: ?*IOpcPartUri, part_: ?*?*IXpsOMFontResource) HRESULT {
                return @as(*const IXpsOMFontResourceCollection.VTable, @ptrCast(self.vtable)).GetByPartName(@as(*const IXpsOMFontResourceCollection, @ptrCast(self)), part_name_, part_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMImageResource_Value = Guid.initString("3db8417d-ae50-485e-9a44-d7758f78a23f");
pub const IID_IXpsOMImageResource = &IID_IXpsOMImageResource_Value;
pub const IXpsOMImageResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetStream: *const fn (
            self: *const IXpsOMImageResource,
            reader_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: *const fn (
            self: *const IXpsOMImageResource,
            source_stream: ?*IStream,
            image_type: XPS_IMAGE_TYPE,
            part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageType: *const fn (
            self: *const IXpsOMImageResource,
            image_type: ?*XPS_IMAGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMResource.MethodMixin(T);
            pub inline fn getStream(self: *const T, reader_stream_: ?*?*IStream) HRESULT {
                return @as(*const IXpsOMImageResource.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IXpsOMImageResource, @ptrCast(self)), reader_stream_);
            }
            pub inline fn setContent(self: *const T, source_stream_: ?*IStream, image_type_: XPS_IMAGE_TYPE, part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMImageResource.VTable, @ptrCast(self.vtable)).SetContent(@as(*const IXpsOMImageResource, @ptrCast(self)), source_stream_, image_type_, part_name_);
            }
            pub inline fn getImageType(self: *const T, image_type_: ?*XPS_IMAGE_TYPE) HRESULT {
                return @as(*const IXpsOMImageResource.VTable, @ptrCast(self.vtable)).GetImageType(@as(*const IXpsOMImageResource, @ptrCast(self)), image_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMImageResourceCollection_Value = Guid.initString("7a4a1a71-9cde-4b71-b33f-62de843eabfe");
pub const IID_IXpsOMImageResourceCollection = &IID_IXpsOMImageResourceCollection_Value;
pub const IXpsOMImageResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMImageResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMImageResourceCollection,
            index: u32,
            object: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMImageResourceCollection,
            index: u32,
            object: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMImageResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMImageResourceCollection,
            index: u32,
            object: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMImageResourceCollection,
            object: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: *const fn (
            self: *const IXpsOMImageResourceCollection,
            part_name: ?*IOpcPartUri,
            part: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMImageResourceCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMImageResourceCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, object_: ?*?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMImageResourceCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMImageResourceCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, object_: ?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMImageResourceCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMImageResourceCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMImageResourceCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMImageResourceCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, object_: ?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMImageResourceCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMImageResourceCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn append(self: *const T, object_: ?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMImageResourceCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMImageResourceCollection, @ptrCast(self)), object_);
            }
            pub inline fn getByPartName(self: *const T, part_name_: ?*IOpcPartUri, part_: ?*?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMImageResourceCollection.VTable, @ptrCast(self.vtable)).GetByPartName(@as(*const IXpsOMImageResourceCollection, @ptrCast(self)), part_name_, part_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMColorProfileResource_Value = Guid.initString("67bd7d69-1eef-4bb1-b5e7-6f4f87be8abe");
pub const IID_IXpsOMColorProfileResource = &IID_IXpsOMColorProfileResource_Value;
pub const IXpsOMColorProfileResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetStream: *const fn (
            self: *const IXpsOMColorProfileResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: *const fn (
            self: *const IXpsOMColorProfileResource,
            source_stream: ?*IStream,
            part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMResource.MethodMixin(T);
            pub inline fn getStream(self: *const T, stream_: ?*?*IStream) HRESULT {
                return @as(*const IXpsOMColorProfileResource.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IXpsOMColorProfileResource, @ptrCast(self)), stream_);
            }
            pub inline fn setContent(self: *const T, source_stream_: ?*IStream, part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMColorProfileResource.VTable, @ptrCast(self.vtable)).SetContent(@as(*const IXpsOMColorProfileResource, @ptrCast(self)), source_stream_, part_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMColorProfileResourceCollection_Value = Guid.initString("12759630-5fba-4283-8f7d-cca849809edb");
pub const IID_IXpsOMColorProfileResourceCollection = &IID_IXpsOMColorProfileResourceCollection_Value;
pub const IXpsOMColorProfileResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMColorProfileResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMColorProfileResourceCollection,
            index: u32,
            object: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMColorProfileResourceCollection,
            index: u32,
            object: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMColorProfileResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMColorProfileResourceCollection,
            index: u32,
            object: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMColorProfileResourceCollection,
            object: ?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: *const fn (
            self: *const IXpsOMColorProfileResourceCollection,
            part_name: ?*IOpcPartUri,
            part: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMColorProfileResourceCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMColorProfileResourceCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, object_: ?*?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMColorProfileResourceCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMColorProfileResourceCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, object_: ?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMColorProfileResourceCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMColorProfileResourceCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMColorProfileResourceCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMColorProfileResourceCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, object_: ?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMColorProfileResourceCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMColorProfileResourceCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn append(self: *const T, object_: ?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMColorProfileResourceCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMColorProfileResourceCollection, @ptrCast(self)), object_);
            }
            pub inline fn getByPartName(self: *const T, part_name_: ?*IOpcPartUri, part_: ?*?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMColorProfileResourceCollection.VTable, @ptrCast(self.vtable)).GetByPartName(@as(*const IXpsOMColorProfileResourceCollection, @ptrCast(self)), part_name_, part_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPrintTicketResource_Value = Guid.initString("e7ff32d2-34aa-499b-bbe9-9cd4ee6c59f7");
pub const IID_IXpsOMPrintTicketResource = &IID_IXpsOMPrintTicketResource_Value;
pub const IXpsOMPrintTicketResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetStream: *const fn (
            self: *const IXpsOMPrintTicketResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: *const fn (
            self: *const IXpsOMPrintTicketResource,
            source_stream: ?*IStream,
            part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMResource.MethodMixin(T);
            pub inline fn getStream(self: *const T, stream_: ?*?*IStream) HRESULT {
                return @as(*const IXpsOMPrintTicketResource.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IXpsOMPrintTicketResource, @ptrCast(self)), stream_);
            }
            pub inline fn setContent(self: *const T, source_stream_: ?*IStream, part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMPrintTicketResource.VTable, @ptrCast(self.vtable)).SetContent(@as(*const IXpsOMPrintTicketResource, @ptrCast(self)), source_stream_, part_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMRemoteDictionaryResource_Value = Guid.initString("c9bd7cd4-e16a-4bf8-8c84-c950af7a3061");
pub const IID_IXpsOMRemoteDictionaryResource = &IID_IXpsOMRemoteDictionaryResource_Value;
pub const IXpsOMRemoteDictionaryResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetDictionary: *const fn (
            self: *const IXpsOMRemoteDictionaryResource,
            dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionary: *const fn (
            self: *const IXpsOMRemoteDictionaryResource,
            dictionary: ?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMResource.MethodMixin(T);
            pub inline fn getDictionary(self: *const T, dictionary_: ?*?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResource.VTable, @ptrCast(self.vtable)).GetDictionary(@as(*const IXpsOMRemoteDictionaryResource, @ptrCast(self)), dictionary_);
            }
            pub inline fn setDictionary(self: *const T, dictionary_: ?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResource.VTable, @ptrCast(self.vtable)).SetDictionary(@as(*const IXpsOMRemoteDictionaryResource, @ptrCast(self)), dictionary_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMRemoteDictionaryResourceCollection_Value = Guid.initString("5c38db61-7fec-464a-87bd-41e3bef018be");
pub const IID_IXpsOMRemoteDictionaryResourceCollection = &IID_IXpsOMRemoteDictionaryResourceCollection_Value;
pub const IXpsOMRemoteDictionaryResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            index: u32,
            object: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            index: u32,
            object: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            index: u32,
            object: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            object: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: *const fn (
            self: *const IXpsOMRemoteDictionaryResourceCollection,
            part_name: ?*IOpcPartUri,
            remote_dictionary_resource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResourceCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMRemoteDictionaryResourceCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, object_: ?*?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResourceCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMRemoteDictionaryResourceCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, object_: ?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResourceCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMRemoteDictionaryResourceCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResourceCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMRemoteDictionaryResourceCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, object_: ?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResourceCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMRemoteDictionaryResourceCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn append(self: *const T, object_: ?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResourceCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMRemoteDictionaryResourceCollection, @ptrCast(self)), object_);
            }
            pub inline fn getByPartName(self: *const T, part_name_: ?*IOpcPartUri, remote_dictionary_resource_: ?*?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResourceCollection.VTable, @ptrCast(self.vtable)).GetByPartName(@as(*const IXpsOMRemoteDictionaryResourceCollection, @ptrCast(self)), part_name_, remote_dictionary_resource_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMSignatureBlockResourceCollection_Value = Guid.initString("ab8f5d8e-351b-4d33-aaed-fa56f0022931");
pub const IID_IXpsOMSignatureBlockResourceCollection = &IID_IXpsOMSignatureBlockResourceCollection_Value;
pub const IXpsOMSignatureBlockResourceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMSignatureBlockResourceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMSignatureBlockResourceCollection,
            index: u32,
            signature_block_resource: ?*?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMSignatureBlockResourceCollection,
            index: u32,
            signature_block_resource: ?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMSignatureBlockResourceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMSignatureBlockResourceCollection,
            index: u32,
            signature_block_resource: ?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMSignatureBlockResourceCollection,
            signature_block_resource: ?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetByPartName: *const fn (
            self: *const IXpsOMSignatureBlockResourceCollection,
            part_name: ?*IOpcPartUri,
            signature_block_resource: ?*?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMSignatureBlockResourceCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMSignatureBlockResourceCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, signature_block_resource_: ?*?*IXpsOMSignatureBlockResource) HRESULT {
                return @as(*const IXpsOMSignatureBlockResourceCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMSignatureBlockResourceCollection, @ptrCast(self)), index_, signature_block_resource_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, signature_block_resource_: ?*IXpsOMSignatureBlockResource) HRESULT {
                return @as(*const IXpsOMSignatureBlockResourceCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMSignatureBlockResourceCollection, @ptrCast(self)), index_, signature_block_resource_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMSignatureBlockResourceCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMSignatureBlockResourceCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, signature_block_resource_: ?*IXpsOMSignatureBlockResource) HRESULT {
                return @as(*const IXpsOMSignatureBlockResourceCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMSignatureBlockResourceCollection, @ptrCast(self)), index_, signature_block_resource_);
            }
            pub inline fn append(self: *const T, signature_block_resource_: ?*IXpsOMSignatureBlockResource) HRESULT {
                return @as(*const IXpsOMSignatureBlockResourceCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMSignatureBlockResourceCollection, @ptrCast(self)), signature_block_resource_);
            }
            pub inline fn getByPartName(self: *const T, part_name_: ?*IOpcPartUri, signature_block_resource_: ?*?*IXpsOMSignatureBlockResource) HRESULT {
                return @as(*const IXpsOMSignatureBlockResourceCollection.VTable, @ptrCast(self.vtable)).GetByPartName(@as(*const IXpsOMSignatureBlockResourceCollection, @ptrCast(self)), part_name_, signature_block_resource_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDocumentStructureResource_Value = Guid.initString("85febc8a-6b63-48a9-af07-7064e4ecff30");
pub const IID_IXpsOMDocumentStructureResource = &IID_IXpsOMDocumentStructureResource_Value;
pub const IXpsOMDocumentStructureResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMDocumentStructureResource,
            owner: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: *const fn (
            self: *const IXpsOMDocumentStructureResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: *const fn (
            self: *const IXpsOMDocumentStructureResource,
            source_stream: ?*IStream,
            part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMResource.MethodMixin(T);
            pub inline fn getOwner(self: *const T, owner_: ?*?*IXpsOMDocument) HRESULT {
                return @as(*const IXpsOMDocumentStructureResource.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMDocumentStructureResource, @ptrCast(self)), owner_);
            }
            pub inline fn getStream(self: *const T, stream_: ?*?*IStream) HRESULT {
                return @as(*const IXpsOMDocumentStructureResource.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IXpsOMDocumentStructureResource, @ptrCast(self)), stream_);
            }
            pub inline fn setContent(self: *const T, source_stream_: ?*IStream, part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMDocumentStructureResource.VTable, @ptrCast(self.vtable)).SetContent(@as(*const IXpsOMDocumentStructureResource, @ptrCast(self)), source_stream_, part_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMStoryFragmentsResource_Value = Guid.initString("c2b3ca09-0473-4282-87ae-1780863223f0");
pub const IID_IXpsOMStoryFragmentsResource = &IID_IXpsOMStoryFragmentsResource_Value;
pub const IXpsOMStoryFragmentsResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMStoryFragmentsResource,
            owner: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: *const fn (
            self: *const IXpsOMStoryFragmentsResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: *const fn (
            self: *const IXpsOMStoryFragmentsResource,
            source_stream: ?*IStream,
            part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMResource.MethodMixin(T);
            pub inline fn getOwner(self: *const T, owner_: ?*?*IXpsOMPageReference) HRESULT {
                return @as(*const IXpsOMStoryFragmentsResource.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMStoryFragmentsResource, @ptrCast(self)), owner_);
            }
            pub inline fn getStream(self: *const T, stream_: ?*?*IStream) HRESULT {
                return @as(*const IXpsOMStoryFragmentsResource.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IXpsOMStoryFragmentsResource, @ptrCast(self)), stream_);
            }
            pub inline fn setContent(self: *const T, source_stream_: ?*IStream, part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMStoryFragmentsResource.VTable, @ptrCast(self.vtable)).SetContent(@as(*const IXpsOMStoryFragmentsResource, @ptrCast(self)), source_stream_, part_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMSignatureBlockResource_Value = Guid.initString("4776ad35-2e04-4357-8743-ebf6c171a905");
pub const IID_IXpsOMSignatureBlockResource = &IID_IXpsOMSignatureBlockResource_Value;
pub const IXpsOMSignatureBlockResource = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMResource.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMSignatureBlockResource,
            owner: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: *const fn (
            self: *const IXpsOMSignatureBlockResource,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: *const fn (
            self: *const IXpsOMSignatureBlockResource,
            source_stream: ?*IStream,
            part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMResource.MethodMixin(T);
            pub inline fn getOwner(self: *const T, owner_: ?*?*IXpsOMDocument) HRESULT {
                return @as(*const IXpsOMSignatureBlockResource.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMSignatureBlockResource, @ptrCast(self)), owner_);
            }
            pub inline fn getStream(self: *const T, stream_: ?*?*IStream) HRESULT {
                return @as(*const IXpsOMSignatureBlockResource.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IXpsOMSignatureBlockResource, @ptrCast(self)), stream_);
            }
            pub inline fn setContent(self: *const T, source_stream_: ?*IStream, part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMSignatureBlockResource.VTable, @ptrCast(self.vtable)).SetContent(@as(*const IXpsOMSignatureBlockResource, @ptrCast(self)), source_stream_, part_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMVisualCollection_Value = Guid.initString("94d8abde-ab91-46a8-82b7-f5b05ef01a96");
pub const IID_IXpsOMVisualCollection = &IID_IXpsOMVisualCollection_Value;
pub const IXpsOMVisualCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMVisualCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMVisualCollection,
            index: u32,
            object: ?*?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMVisualCollection,
            index: u32,
            object: ?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMVisualCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMVisualCollection,
            index: u32,
            object: ?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMVisualCollection,
            object: ?*IXpsOMVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMVisualCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMVisualCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, object_: ?*?*IXpsOMVisual) HRESULT {
                return @as(*const IXpsOMVisualCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMVisualCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, object_: ?*IXpsOMVisual) HRESULT {
                return @as(*const IXpsOMVisualCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMVisualCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMVisualCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMVisualCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, object_: ?*IXpsOMVisual) HRESULT {
                return @as(*const IXpsOMVisualCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMVisualCollection, @ptrCast(self)), index_, object_);
            }
            pub inline fn append(self: *const T, object_: ?*IXpsOMVisual) HRESULT {
                return @as(*const IXpsOMVisualCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMVisualCollection, @ptrCast(self)), object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMCanvas_Value = Guid.initString("221d1452-331e-47c6-87e9-6ccefb9b5ba3");
pub const IID_IXpsOMCanvas = &IID_IXpsOMCanvas_Value;
pub const IXpsOMCanvas = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMVisual.VTable,
        GetVisuals: *const fn (
            self: *const IXpsOMCanvas,
            visuals: ?*?*IXpsOMVisualCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUseAliasedEdgeMode: *const fn (
            self: *const IXpsOMCanvas,
            use_aliased_edge_mode: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUseAliasedEdgeMode: *const fn (
            self: *const IXpsOMCanvas,
            use_aliased_edge_mode: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessibilityShortDescription: *const fn (
            self: *const IXpsOMCanvas,
            short_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccessibilityShortDescription: *const fn (
            self: *const IXpsOMCanvas,
            short_description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessibilityLongDescription: *const fn (
            self: *const IXpsOMCanvas,
            long_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccessibilityLongDescription: *const fn (
            self: *const IXpsOMCanvas,
            long_description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionary: *const fn (
            self: *const IXpsOMCanvas,
            resource_dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionaryLocal: *const fn (
            self: *const IXpsOMCanvas,
            resource_dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionaryLocal: *const fn (
            self: *const IXpsOMCanvas,
            resource_dictionary: ?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionaryResource: *const fn (
            self: *const IXpsOMCanvas,
            remote_dictionary_resource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionaryResource: *const fn (
            self: *const IXpsOMCanvas,
            remote_dictionary_resource: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMCanvas,
            canvas: ?*?*IXpsOMCanvas,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMVisual.MethodMixin(T);
            pub inline fn getVisuals(self: *const T, visuals_: ?*?*IXpsOMVisualCollection) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).GetVisuals(@as(*const IXpsOMCanvas, @ptrCast(self)), visuals_);
            }
            pub inline fn getUseAliasedEdgeMode(self: *const T, use_aliased_edge_mode_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).GetUseAliasedEdgeMode(@as(*const IXpsOMCanvas, @ptrCast(self)), use_aliased_edge_mode_);
            }
            pub inline fn setUseAliasedEdgeMode(self: *const T, use_aliased_edge_mode_: BOOL) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).SetUseAliasedEdgeMode(@as(*const IXpsOMCanvas, @ptrCast(self)), use_aliased_edge_mode_);
            }
            pub inline fn getAccessibilityShortDescription(self: *const T, short_description_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).GetAccessibilityShortDescription(@as(*const IXpsOMCanvas, @ptrCast(self)), short_description_);
            }
            pub inline fn setAccessibilityShortDescription(self: *const T, short_description_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).SetAccessibilityShortDescription(@as(*const IXpsOMCanvas, @ptrCast(self)), short_description_);
            }
            pub inline fn getAccessibilityLongDescription(self: *const T, long_description_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).GetAccessibilityLongDescription(@as(*const IXpsOMCanvas, @ptrCast(self)), long_description_);
            }
            pub inline fn setAccessibilityLongDescription(self: *const T, long_description_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).SetAccessibilityLongDescription(@as(*const IXpsOMCanvas, @ptrCast(self)), long_description_);
            }
            pub inline fn getDictionary(self: *const T, resource_dictionary_: ?*?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).GetDictionary(@as(*const IXpsOMCanvas, @ptrCast(self)), resource_dictionary_);
            }
            pub inline fn getDictionaryLocal(self: *const T, resource_dictionary_: ?*?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).GetDictionaryLocal(@as(*const IXpsOMCanvas, @ptrCast(self)), resource_dictionary_);
            }
            pub inline fn setDictionaryLocal(self: *const T, resource_dictionary_: ?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).SetDictionaryLocal(@as(*const IXpsOMCanvas, @ptrCast(self)), resource_dictionary_);
            }
            pub inline fn getDictionaryResource(self: *const T, remote_dictionary_resource_: ?*?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).GetDictionaryResource(@as(*const IXpsOMCanvas, @ptrCast(self)), remote_dictionary_resource_);
            }
            pub inline fn setDictionaryResource(self: *const T, remote_dictionary_resource_: ?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).SetDictionaryResource(@as(*const IXpsOMCanvas, @ptrCast(self)), remote_dictionary_resource_);
            }
            pub inline fn clone(self: *const T, canvas_: ?*?*IXpsOMCanvas) HRESULT {
                return @as(*const IXpsOMCanvas.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMCanvas, @ptrCast(self)), canvas_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPage_Value = Guid.initString("d3e18888-f120-4fee-8c68-35296eae91d4");
pub const IID_IXpsOMPage = &IID_IXpsOMPage_Value;
pub const IXpsOMPage = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMPage,
            page_reference: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisuals: *const fn (
            self: *const IXpsOMPage,
            visuals: ?*?*IXpsOMVisualCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageDimensions: *const fn (
            self: *const IXpsOMPage,
            page_dimensions: ?*XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPageDimensions: *const fn (
            self: *const IXpsOMPage,
            page_dimensions: ?*const XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentBox: *const fn (
            self: *const IXpsOMPage,
            content_box: ?*XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContentBox: *const fn (
            self: *const IXpsOMPage,
            content_box: ?*const XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBleedBox: *const fn (
            self: *const IXpsOMPage,
            bleed_box: ?*XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBleedBox: *const fn (
            self: *const IXpsOMPage,
            bleed_box: ?*const XPS_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguage: *const fn (
            self: *const IXpsOMPage,
            language: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguage: *const fn (
            self: *const IXpsOMPage,
            language: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IXpsOMPage,
            name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: *const fn (
            self: *const IXpsOMPage,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsHyperlinkTarget: *const fn (
            self: *const IXpsOMPage,
            is_hyperlink_target: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsHyperlinkTarget: *const fn (
            self: *const IXpsOMPage,
            is_hyperlink_target: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionary: *const fn (
            self: *const IXpsOMPage,
            resource_dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionaryLocal: *const fn (
            self: *const IXpsOMPage,
            resource_dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionaryLocal: *const fn (
            self: *const IXpsOMPage,
            resource_dictionary: ?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDictionaryResource: *const fn (
            self: *const IXpsOMPage,
            remote_dictionary_resource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDictionaryResource: *const fn (
            self: *const IXpsOMPage,
            remote_dictionary_resource: ?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write: *const fn (
            self: *const IXpsOMPage,
            stream: ?*ISequentialStream,
            optimize_markup_size: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateUnusedLookupKey: *const fn (
            self: *const IXpsOMPage,
            type: XPS_OBJECT_TYPE,
            key: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMPage,
            page: ?*?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMPart.MethodMixin(T);
            pub inline fn getOwner(self: *const T, page_reference_: ?*?*IXpsOMPageReference) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMPage, @ptrCast(self)), page_reference_);
            }
            pub inline fn getVisuals(self: *const T, visuals_: ?*?*IXpsOMVisualCollection) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetVisuals(@as(*const IXpsOMPage, @ptrCast(self)), visuals_);
            }
            pub inline fn getPageDimensions(self: *const T, page_dimensions_: ?*XPS_SIZE) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetPageDimensions(@as(*const IXpsOMPage, @ptrCast(self)), page_dimensions_);
            }
            pub inline fn setPageDimensions(self: *const T, page_dimensions_: ?*const XPS_SIZE) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).SetPageDimensions(@as(*const IXpsOMPage, @ptrCast(self)), page_dimensions_);
            }
            pub inline fn getContentBox(self: *const T, content_box_: ?*XPS_RECT) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetContentBox(@as(*const IXpsOMPage, @ptrCast(self)), content_box_);
            }
            pub inline fn setContentBox(self: *const T, content_box_: ?*const XPS_RECT) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).SetContentBox(@as(*const IXpsOMPage, @ptrCast(self)), content_box_);
            }
            pub inline fn getBleedBox(self: *const T, bleed_box_: ?*XPS_RECT) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetBleedBox(@as(*const IXpsOMPage, @ptrCast(self)), bleed_box_);
            }
            pub inline fn setBleedBox(self: *const T, bleed_box_: ?*const XPS_RECT) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).SetBleedBox(@as(*const IXpsOMPage, @ptrCast(self)), bleed_box_);
            }
            pub inline fn getLanguage(self: *const T, language_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetLanguage(@as(*const IXpsOMPage, @ptrCast(self)), language_);
            }
            pub inline fn setLanguage(self: *const T, language_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).SetLanguage(@as(*const IXpsOMPage, @ptrCast(self)), language_);
            }
            pub inline fn getName(self: *const T, name_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetName(@as(*const IXpsOMPage, @ptrCast(self)), name_);
            }
            pub inline fn setName(self: *const T, name_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).SetName(@as(*const IXpsOMPage, @ptrCast(self)), name_);
            }
            pub inline fn getIsHyperlinkTarget(self: *const T, is_hyperlink_target_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetIsHyperlinkTarget(@as(*const IXpsOMPage, @ptrCast(self)), is_hyperlink_target_);
            }
            pub inline fn setIsHyperlinkTarget(self: *const T, is_hyperlink_target_: BOOL) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).SetIsHyperlinkTarget(@as(*const IXpsOMPage, @ptrCast(self)), is_hyperlink_target_);
            }
            pub inline fn getDictionary(self: *const T, resource_dictionary_: ?*?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetDictionary(@as(*const IXpsOMPage, @ptrCast(self)), resource_dictionary_);
            }
            pub inline fn getDictionaryLocal(self: *const T, resource_dictionary_: ?*?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetDictionaryLocal(@as(*const IXpsOMPage, @ptrCast(self)), resource_dictionary_);
            }
            pub inline fn setDictionaryLocal(self: *const T, resource_dictionary_: ?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).SetDictionaryLocal(@as(*const IXpsOMPage, @ptrCast(self)), resource_dictionary_);
            }
            pub inline fn getDictionaryResource(self: *const T, remote_dictionary_resource_: ?*?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GetDictionaryResource(@as(*const IXpsOMPage, @ptrCast(self)), remote_dictionary_resource_);
            }
            pub inline fn setDictionaryResource(self: *const T, remote_dictionary_resource_: ?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).SetDictionaryResource(@as(*const IXpsOMPage, @ptrCast(self)), remote_dictionary_resource_);
            }
            pub inline fn write(self: *const T, stream_: ?*ISequentialStream, optimize_markup_size_: BOOL) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).Write(@as(*const IXpsOMPage, @ptrCast(self)), stream_, optimize_markup_size_);
            }
            pub inline fn generateUnusedLookupKey(self: *const T, type_: XPS_OBJECT_TYPE, key_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).GenerateUnusedLookupKey(@as(*const IXpsOMPage, @ptrCast(self)), type_, key_);
            }
            pub inline fn clone(self: *const T, page_: ?*?*IXpsOMPage) HRESULT {
                return @as(*const IXpsOMPage.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMPage, @ptrCast(self)), page_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPageReference_Value = Guid.initString("ed360180-6f92-4998-890d-2f208531a0a0");
pub const IID_IXpsOMPageReference = &IID_IXpsOMPageReference_Value;
pub const IXpsOMPageReference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMPageReference,
            document: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPage: *const fn (
            self: *const IXpsOMPageReference,
            page: ?*?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPage: *const fn (
            self: *const IXpsOMPageReference,
            page: ?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiscardPage: *const fn (
            self: *const IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPageLoaded: *const fn (
            self: *const IXpsOMPageReference,
            is_page_loaded: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdvisoryPageDimensions: *const fn (
            self: *const IXpsOMPageReference,
            page_dimensions: ?*XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAdvisoryPageDimensions: *const fn (
            self: *const IXpsOMPageReference,
            page_dimensions: ?*const XPS_SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoryFragmentsResource: *const fn (
            self: *const IXpsOMPageReference,
            story_fragments_resource: ?*?*IXpsOMStoryFragmentsResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStoryFragmentsResource: *const fn (
            self: *const IXpsOMPageReference,
            story_fragments_resource: ?*IXpsOMStoryFragmentsResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintTicketResource: *const fn (
            self: *const IXpsOMPageReference,
            print_ticket_resource: ?*?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrintTicketResource: *const fn (
            self: *const IXpsOMPageReference,
            print_ticket_resource: ?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnailResource: *const fn (
            self: *const IXpsOMPageReference,
            image_resource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailResource: *const fn (
            self: *const IXpsOMPageReference,
            image_resource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollectLinkTargets: *const fn (
            self: *const IXpsOMPageReference,
            link_targets: ?*?*IXpsOMNameCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollectPartResources: *const fn (
            self: *const IXpsOMPageReference,
            part_resources: ?*?*IXpsOMPartResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasRestrictedFonts: *const fn (
            self: *const IXpsOMPageReference,
            restricted_fonts: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMPageReference,
            page_reference: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOwner(self: *const T, document_: ?*?*IXpsOMDocument) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMPageReference, @ptrCast(self)), document_);
            }
            pub inline fn getPage(self: *const T, page_: ?*?*IXpsOMPage) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).GetPage(@as(*const IXpsOMPageReference, @ptrCast(self)), page_);
            }
            pub inline fn setPage(self: *const T, page_: ?*IXpsOMPage) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).SetPage(@as(*const IXpsOMPageReference, @ptrCast(self)), page_);
            }
            pub inline fn discardPage(self: *const T) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).DiscardPage(@as(*const IXpsOMPageReference, @ptrCast(self)));
            }
            pub inline fn isPageLoaded(self: *const T, is_page_loaded_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).IsPageLoaded(@as(*const IXpsOMPageReference, @ptrCast(self)), is_page_loaded_);
            }
            pub inline fn getAdvisoryPageDimensions(self: *const T, page_dimensions_: ?*XPS_SIZE) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).GetAdvisoryPageDimensions(@as(*const IXpsOMPageReference, @ptrCast(self)), page_dimensions_);
            }
            pub inline fn setAdvisoryPageDimensions(self: *const T, page_dimensions_: ?*const XPS_SIZE) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).SetAdvisoryPageDimensions(@as(*const IXpsOMPageReference, @ptrCast(self)), page_dimensions_);
            }
            pub inline fn getStoryFragmentsResource(self: *const T, story_fragments_resource_: ?*?*IXpsOMStoryFragmentsResource) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).GetStoryFragmentsResource(@as(*const IXpsOMPageReference, @ptrCast(self)), story_fragments_resource_);
            }
            pub inline fn setStoryFragmentsResource(self: *const T, story_fragments_resource_: ?*IXpsOMStoryFragmentsResource) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).SetStoryFragmentsResource(@as(*const IXpsOMPageReference, @ptrCast(self)), story_fragments_resource_);
            }
            pub inline fn getPrintTicketResource(self: *const T, print_ticket_resource_: ?*?*IXpsOMPrintTicketResource) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).GetPrintTicketResource(@as(*const IXpsOMPageReference, @ptrCast(self)), print_ticket_resource_);
            }
            pub inline fn setPrintTicketResource(self: *const T, print_ticket_resource_: ?*IXpsOMPrintTicketResource) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).SetPrintTicketResource(@as(*const IXpsOMPageReference, @ptrCast(self)), print_ticket_resource_);
            }
            pub inline fn getThumbnailResource(self: *const T, image_resource_: ?*?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).GetThumbnailResource(@as(*const IXpsOMPageReference, @ptrCast(self)), image_resource_);
            }
            pub inline fn setThumbnailResource(self: *const T, image_resource_: ?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).SetThumbnailResource(@as(*const IXpsOMPageReference, @ptrCast(self)), image_resource_);
            }
            pub inline fn collectLinkTargets(self: *const T, link_targets_: ?*?*IXpsOMNameCollection) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).CollectLinkTargets(@as(*const IXpsOMPageReference, @ptrCast(self)), link_targets_);
            }
            pub inline fn collectPartResources(self: *const T, part_resources_: ?*?*IXpsOMPartResources) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).CollectPartResources(@as(*const IXpsOMPageReference, @ptrCast(self)), part_resources_);
            }
            pub inline fn hasRestrictedFonts(self: *const T, restricted_fonts_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).HasRestrictedFonts(@as(*const IXpsOMPageReference, @ptrCast(self)), restricted_fonts_);
            }
            pub inline fn clone(self: *const T, page_reference_: ?*?*IXpsOMPageReference) HRESULT {
                return @as(*const IXpsOMPageReference.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMPageReference, @ptrCast(self)), page_reference_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPageReferenceCollection_Value = Guid.initString("ca16ba4d-e7b9-45c5-958b-f98022473745");
pub const IID_IXpsOMPageReferenceCollection = &IID_IXpsOMPageReferenceCollection_Value;
pub const IXpsOMPageReferenceCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMPageReferenceCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMPageReferenceCollection,
            index: u32,
            page_reference: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMPageReferenceCollection,
            index: u32,
            page_reference: ?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMPageReferenceCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMPageReferenceCollection,
            index: u32,
            page_reference: ?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMPageReferenceCollection,
            page_reference: ?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMPageReferenceCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMPageReferenceCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, page_reference_: ?*?*IXpsOMPageReference) HRESULT {
                return @as(*const IXpsOMPageReferenceCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMPageReferenceCollection, @ptrCast(self)), index_, page_reference_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, page_reference_: ?*IXpsOMPageReference) HRESULT {
                return @as(*const IXpsOMPageReferenceCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMPageReferenceCollection, @ptrCast(self)), index_, page_reference_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMPageReferenceCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMPageReferenceCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, page_reference_: ?*IXpsOMPageReference) HRESULT {
                return @as(*const IXpsOMPageReferenceCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMPageReferenceCollection, @ptrCast(self)), index_, page_reference_);
            }
            pub inline fn append(self: *const T, page_reference_: ?*IXpsOMPageReference) HRESULT {
                return @as(*const IXpsOMPageReferenceCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMPageReferenceCollection, @ptrCast(self)), page_reference_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDocument_Value = Guid.initString("2c2c94cb-ac5f-4254-8ee9-23948309d9f0");
pub const IID_IXpsOMDocument = &IID_IXpsOMDocument_Value;
pub const IXpsOMDocument = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMDocument,
            document_sequence: ?*?*IXpsOMDocumentSequence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageReferences: *const fn (
            self: *const IXpsOMDocument,
            page_references: ?*?*IXpsOMPageReferenceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintTicketResource: *const fn (
            self: *const IXpsOMDocument,
            print_ticket_resource: ?*?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrintTicketResource: *const fn (
            self: *const IXpsOMDocument,
            print_ticket_resource: ?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentStructureResource: *const fn (
            self: *const IXpsOMDocument,
            document_structure_resource: ?*?*IXpsOMDocumentStructureResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDocumentStructureResource: *const fn (
            self: *const IXpsOMDocument,
            document_structure_resource: ?*IXpsOMDocumentStructureResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureBlockResources: *const fn (
            self: *const IXpsOMDocument,
            signature_block_resources: ?*?*IXpsOMSignatureBlockResourceCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMDocument,
            document: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMPart.MethodMixin(T);
            pub inline fn getOwner(self: *const T, document_sequence_: ?*?*IXpsOMDocumentSequence) HRESULT {
                return @as(*const IXpsOMDocument.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMDocument, @ptrCast(self)), document_sequence_);
            }
            pub inline fn getPageReferences(self: *const T, page_references_: ?*?*IXpsOMPageReferenceCollection) HRESULT {
                return @as(*const IXpsOMDocument.VTable, @ptrCast(self.vtable)).GetPageReferences(@as(*const IXpsOMDocument, @ptrCast(self)), page_references_);
            }
            pub inline fn getPrintTicketResource(self: *const T, print_ticket_resource_: ?*?*IXpsOMPrintTicketResource) HRESULT {
                return @as(*const IXpsOMDocument.VTable, @ptrCast(self.vtable)).GetPrintTicketResource(@as(*const IXpsOMDocument, @ptrCast(self)), print_ticket_resource_);
            }
            pub inline fn setPrintTicketResource(self: *const T, print_ticket_resource_: ?*IXpsOMPrintTicketResource) HRESULT {
                return @as(*const IXpsOMDocument.VTable, @ptrCast(self.vtable)).SetPrintTicketResource(@as(*const IXpsOMDocument, @ptrCast(self)), print_ticket_resource_);
            }
            pub inline fn getDocumentStructureResource(self: *const T, document_structure_resource_: ?*?*IXpsOMDocumentStructureResource) HRESULT {
                return @as(*const IXpsOMDocument.VTable, @ptrCast(self.vtable)).GetDocumentStructureResource(@as(*const IXpsOMDocument, @ptrCast(self)), document_structure_resource_);
            }
            pub inline fn setDocumentStructureResource(self: *const T, document_structure_resource_: ?*IXpsOMDocumentStructureResource) HRESULT {
                return @as(*const IXpsOMDocument.VTable, @ptrCast(self.vtable)).SetDocumentStructureResource(@as(*const IXpsOMDocument, @ptrCast(self)), document_structure_resource_);
            }
            pub inline fn getSignatureBlockResources(self: *const T, signature_block_resources_: ?*?*IXpsOMSignatureBlockResourceCollection) HRESULT {
                return @as(*const IXpsOMDocument.VTable, @ptrCast(self.vtable)).GetSignatureBlockResources(@as(*const IXpsOMDocument, @ptrCast(self)), signature_block_resources_);
            }
            pub inline fn clone(self: *const T, document_: ?*?*IXpsOMDocument) HRESULT {
                return @as(*const IXpsOMDocument.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMDocument, @ptrCast(self)), document_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDocumentCollection_Value = Guid.initString("d1c87f0d-e947-4754-8a25-971478f7e83e");
pub const IID_IXpsOMDocumentCollection = &IID_IXpsOMDocumentCollection_Value;
pub const IXpsOMDocumentCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMDocumentCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMDocumentCollection,
            index: u32,
            document: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMDocumentCollection,
            index: u32,
            document: ?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMDocumentCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMDocumentCollection,
            index: u32,
            document: ?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMDocumentCollection,
            document: ?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMDocumentCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMDocumentCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, document_: ?*?*IXpsOMDocument) HRESULT {
                return @as(*const IXpsOMDocumentCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMDocumentCollection, @ptrCast(self)), index_, document_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, document_: ?*IXpsOMDocument) HRESULT {
                return @as(*const IXpsOMDocumentCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMDocumentCollection, @ptrCast(self)), index_, document_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMDocumentCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMDocumentCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, document_: ?*IXpsOMDocument) HRESULT {
                return @as(*const IXpsOMDocumentCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMDocumentCollection, @ptrCast(self)), index_, document_);
            }
            pub inline fn append(self: *const T, document_: ?*IXpsOMDocument) HRESULT {
                return @as(*const IXpsOMDocumentCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMDocumentCollection, @ptrCast(self)), document_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMDocumentSequence_Value = Guid.initString("56492eb4-d8d5-425e-8256-4c2b64ad0264");
pub const IID_IXpsOMDocumentSequence = &IID_IXpsOMDocumentSequence_Value;
pub const IXpsOMDocumentSequence = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMDocumentSequence,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocuments: *const fn (
            self: *const IXpsOMDocumentSequence,
            documents: ?*?*IXpsOMDocumentCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintTicketResource: *const fn (
            self: *const IXpsOMDocumentSequence,
            print_ticket_resource: ?*?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrintTicketResource: *const fn (
            self: *const IXpsOMDocumentSequence,
            print_ticket_resource: ?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMPart.MethodMixin(T);
            pub inline fn getOwner(self: *const T, package_: ?*?*IXpsOMPackage) HRESULT {
                return @as(*const IXpsOMDocumentSequence.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMDocumentSequence, @ptrCast(self)), package_);
            }
            pub inline fn getDocuments(self: *const T, documents_: ?*?*IXpsOMDocumentCollection) HRESULT {
                return @as(*const IXpsOMDocumentSequence.VTable, @ptrCast(self.vtable)).GetDocuments(@as(*const IXpsOMDocumentSequence, @ptrCast(self)), documents_);
            }
            pub inline fn getPrintTicketResource(self: *const T, print_ticket_resource_: ?*?*IXpsOMPrintTicketResource) HRESULT {
                return @as(*const IXpsOMDocumentSequence.VTable, @ptrCast(self.vtable)).GetPrintTicketResource(@as(*const IXpsOMDocumentSequence, @ptrCast(self)), print_ticket_resource_);
            }
            pub inline fn setPrintTicketResource(self: *const T, print_ticket_resource_: ?*IXpsOMPrintTicketResource) HRESULT {
                return @as(*const IXpsOMDocumentSequence.VTable, @ptrCast(self.vtable)).SetPrintTicketResource(@as(*const IXpsOMDocumentSequence, @ptrCast(self)), print_ticket_resource_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMCoreProperties_Value = Guid.initString("3340fe8f-4027-4aa1-8f5f-d35ae45fe597");
pub const IID_IXpsOMCoreProperties = &IID_IXpsOMCoreProperties_Value;
pub const IXpsOMCoreProperties = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPart.VTable,
        GetOwner: *const fn (
            self: *const IXpsOMCoreProperties,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategory: *const fn (
            self: *const IXpsOMCoreProperties,
            category: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCategory: *const fn (
            self: *const IXpsOMCoreProperties,
            category: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentStatus: *const fn (
            self: *const IXpsOMCoreProperties,
            content_status: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContentStatus: *const fn (
            self: *const IXpsOMCoreProperties,
            content_status: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentType: *const fn (
            self: *const IXpsOMCoreProperties,
            content_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContentType: *const fn (
            self: *const IXpsOMCoreProperties,
            content_type: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreated: *const fn (
            self: *const IXpsOMCoreProperties,
            created: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreated: *const fn (
            self: *const IXpsOMCoreProperties,
            created: ?*const SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreator: *const fn (
            self: *const IXpsOMCoreProperties,
            creator: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreator: *const fn (
            self: *const IXpsOMCoreProperties,
            creator: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const IXpsOMCoreProperties,
            description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: *const fn (
            self: *const IXpsOMCoreProperties,
            description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIdentifier: *const fn (
            self: *const IXpsOMCoreProperties,
            identifier: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIdentifier: *const fn (
            self: *const IXpsOMCoreProperties,
            identifier: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeywords: *const fn (
            self: *const IXpsOMCoreProperties,
            keywords: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKeywords: *const fn (
            self: *const IXpsOMCoreProperties,
            keywords: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguage: *const fn (
            self: *const IXpsOMCoreProperties,
            language: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguage: *const fn (
            self: *const IXpsOMCoreProperties,
            language: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastModifiedBy: *const fn (
            self: *const IXpsOMCoreProperties,
            last_modified_by: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLastModifiedBy: *const fn (
            self: *const IXpsOMCoreProperties,
            last_modified_by: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastPrinted: *const fn (
            self: *const IXpsOMCoreProperties,
            last_printed: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLastPrinted: *const fn (
            self: *const IXpsOMCoreProperties,
            last_printed: ?*const SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetModified: *const fn (
            self: *const IXpsOMCoreProperties,
            modified: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModified: *const fn (
            self: *const IXpsOMCoreProperties,
            modified: ?*const SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRevision: *const fn (
            self: *const IXpsOMCoreProperties,
            revision: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRevision: *const fn (
            self: *const IXpsOMCoreProperties,
            revision: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubject: *const fn (
            self: *const IXpsOMCoreProperties,
            subject: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSubject: *const fn (
            self: *const IXpsOMCoreProperties,
            subject: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTitle: *const fn (
            self: *const IXpsOMCoreProperties,
            title: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn (
            self: *const IXpsOMCoreProperties,
            title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersion: *const fn (
            self: *const IXpsOMCoreProperties,
            version: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVersion: *const fn (
            self: *const IXpsOMCoreProperties,
            version: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IXpsOMCoreProperties,
            core_properties: ?*?*IXpsOMCoreProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMPart.MethodMixin(T);
            pub inline fn getOwner(self: *const T, package_: ?*?*IXpsOMPackage) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetOwner(@as(*const IXpsOMCoreProperties, @ptrCast(self)), package_);
            }
            pub inline fn getCategory(self: *const T, category_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetCategory(@as(*const IXpsOMCoreProperties, @ptrCast(self)), category_);
            }
            pub inline fn setCategory(self: *const T, category_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetCategory(@as(*const IXpsOMCoreProperties, @ptrCast(self)), category_);
            }
            pub inline fn getContentStatus(self: *const T, content_status_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetContentStatus(@as(*const IXpsOMCoreProperties, @ptrCast(self)), content_status_);
            }
            pub inline fn setContentStatus(self: *const T, content_status_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetContentStatus(@as(*const IXpsOMCoreProperties, @ptrCast(self)), content_status_);
            }
            pub inline fn getContentType(self: *const T, content_type_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetContentType(@as(*const IXpsOMCoreProperties, @ptrCast(self)), content_type_);
            }
            pub inline fn setContentType(self: *const T, content_type_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetContentType(@as(*const IXpsOMCoreProperties, @ptrCast(self)), content_type_);
            }
            pub inline fn getCreated(self: *const T, created_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetCreated(@as(*const IXpsOMCoreProperties, @ptrCast(self)), created_);
            }
            pub inline fn setCreated(self: *const T, created_: ?*const SYSTEMTIME) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetCreated(@as(*const IXpsOMCoreProperties, @ptrCast(self)), created_);
            }
            pub inline fn getCreator(self: *const T, creator_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetCreator(@as(*const IXpsOMCoreProperties, @ptrCast(self)), creator_);
            }
            pub inline fn setCreator(self: *const T, creator_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetCreator(@as(*const IXpsOMCoreProperties, @ptrCast(self)), creator_);
            }
            pub inline fn getDescription(self: *const T, description_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const IXpsOMCoreProperties, @ptrCast(self)), description_);
            }
            pub inline fn setDescription(self: *const T, description_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetDescription(@as(*const IXpsOMCoreProperties, @ptrCast(self)), description_);
            }
            pub inline fn getIdentifier(self: *const T, identifier_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetIdentifier(@as(*const IXpsOMCoreProperties, @ptrCast(self)), identifier_);
            }
            pub inline fn setIdentifier(self: *const T, identifier_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetIdentifier(@as(*const IXpsOMCoreProperties, @ptrCast(self)), identifier_);
            }
            pub inline fn getKeywords(self: *const T, keywords_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetKeywords(@as(*const IXpsOMCoreProperties, @ptrCast(self)), keywords_);
            }
            pub inline fn setKeywords(self: *const T, keywords_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetKeywords(@as(*const IXpsOMCoreProperties, @ptrCast(self)), keywords_);
            }
            pub inline fn getLanguage(self: *const T, language_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetLanguage(@as(*const IXpsOMCoreProperties, @ptrCast(self)), language_);
            }
            pub inline fn setLanguage(self: *const T, language_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetLanguage(@as(*const IXpsOMCoreProperties, @ptrCast(self)), language_);
            }
            pub inline fn getLastModifiedBy(self: *const T, last_modified_by_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetLastModifiedBy(@as(*const IXpsOMCoreProperties, @ptrCast(self)), last_modified_by_);
            }
            pub inline fn setLastModifiedBy(self: *const T, last_modified_by_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetLastModifiedBy(@as(*const IXpsOMCoreProperties, @ptrCast(self)), last_modified_by_);
            }
            pub inline fn getLastPrinted(self: *const T, last_printed_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetLastPrinted(@as(*const IXpsOMCoreProperties, @ptrCast(self)), last_printed_);
            }
            pub inline fn setLastPrinted(self: *const T, last_printed_: ?*const SYSTEMTIME) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetLastPrinted(@as(*const IXpsOMCoreProperties, @ptrCast(self)), last_printed_);
            }
            pub inline fn getModified(self: *const T, modified_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetModified(@as(*const IXpsOMCoreProperties, @ptrCast(self)), modified_);
            }
            pub inline fn setModified(self: *const T, modified_: ?*const SYSTEMTIME) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetModified(@as(*const IXpsOMCoreProperties, @ptrCast(self)), modified_);
            }
            pub inline fn getRevision(self: *const T, revision_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetRevision(@as(*const IXpsOMCoreProperties, @ptrCast(self)), revision_);
            }
            pub inline fn setRevision(self: *const T, revision_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetRevision(@as(*const IXpsOMCoreProperties, @ptrCast(self)), revision_);
            }
            pub inline fn getSubject(self: *const T, subject_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetSubject(@as(*const IXpsOMCoreProperties, @ptrCast(self)), subject_);
            }
            pub inline fn setSubject(self: *const T, subject_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetSubject(@as(*const IXpsOMCoreProperties, @ptrCast(self)), subject_);
            }
            pub inline fn getTitle(self: *const T, title_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetTitle(@as(*const IXpsOMCoreProperties, @ptrCast(self)), title_);
            }
            pub inline fn setTitle(self: *const T, title_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetTitle(@as(*const IXpsOMCoreProperties, @ptrCast(self)), title_);
            }
            pub inline fn getVersion(self: *const T, version_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).GetVersion(@as(*const IXpsOMCoreProperties, @ptrCast(self)), version_);
            }
            pub inline fn setVersion(self: *const T, version_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).SetVersion(@as(*const IXpsOMCoreProperties, @ptrCast(self)), version_);
            }
            pub inline fn clone(self: *const T, core_properties_: ?*?*IXpsOMCoreProperties) HRESULT {
                return @as(*const IXpsOMCoreProperties.VTable, @ptrCast(self.vtable)).Clone(@as(*const IXpsOMCoreProperties, @ptrCast(self)), core_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPackage_Value = Guid.initString("18c3df65-81e1-4674-91dc-fc452f5a416f");
pub const IID_IXpsOMPackage = &IID_IXpsOMPackage_Value;
pub const IXpsOMPackage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDocumentSequence: *const fn (
            self: *const IXpsOMPackage,
            document_sequence: ?*?*IXpsOMDocumentSequence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDocumentSequence: *const fn (
            self: *const IXpsOMPackage,
            document_sequence: ?*IXpsOMDocumentSequence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCoreProperties: *const fn (
            self: *const IXpsOMPackage,
            core_properties: ?*?*IXpsOMCoreProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoreProperties: *const fn (
            self: *const IXpsOMPackage,
            core_properties: ?*IXpsOMCoreProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDiscardControlPartName: *const fn (
            self: *const IXpsOMPackage,
            discard_control_part_uri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDiscardControlPartName: *const fn (
            self: *const IXpsOMPackage,
            discard_control_part_uri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnailResource: *const fn (
            self: *const IXpsOMPackage,
            image_resource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailResource: *const fn (
            self: *const IXpsOMPackage,
            image_resource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToFile: *const fn (
            self: *const IXpsOMPackage,
            file_name: ?[*:0]const u16,
            security_attributes: ?*SECURITY_ATTRIBUTES,
            flags_and_attributes: u32,
            optimize_markup_size: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToStream: *const fn (
            self: *const IXpsOMPackage,
            stream: ?*ISequentialStream,
            optimize_markup_size: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDocumentSequence(self: *const T, document_sequence_: ?*?*IXpsOMDocumentSequence) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).GetDocumentSequence(@as(*const IXpsOMPackage, @ptrCast(self)), document_sequence_);
            }
            pub inline fn setDocumentSequence(self: *const T, document_sequence_: ?*IXpsOMDocumentSequence) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).SetDocumentSequence(@as(*const IXpsOMPackage, @ptrCast(self)), document_sequence_);
            }
            pub inline fn getCoreProperties(self: *const T, core_properties_: ?*?*IXpsOMCoreProperties) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).GetCoreProperties(@as(*const IXpsOMPackage, @ptrCast(self)), core_properties_);
            }
            pub inline fn setCoreProperties(self: *const T, core_properties_: ?*IXpsOMCoreProperties) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).SetCoreProperties(@as(*const IXpsOMPackage, @ptrCast(self)), core_properties_);
            }
            pub inline fn getDiscardControlPartName(self: *const T, discard_control_part_uri_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).GetDiscardControlPartName(@as(*const IXpsOMPackage, @ptrCast(self)), discard_control_part_uri_);
            }
            pub inline fn setDiscardControlPartName(self: *const T, discard_control_part_uri_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).SetDiscardControlPartName(@as(*const IXpsOMPackage, @ptrCast(self)), discard_control_part_uri_);
            }
            pub inline fn getThumbnailResource(self: *const T, image_resource_: ?*?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).GetThumbnailResource(@as(*const IXpsOMPackage, @ptrCast(self)), image_resource_);
            }
            pub inline fn setThumbnailResource(self: *const T, image_resource_: ?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).SetThumbnailResource(@as(*const IXpsOMPackage, @ptrCast(self)), image_resource_);
            }
            pub inline fn writeToFile(self: *const T, file_name_: ?[*:0]const u16, security_attributes_: ?*SECURITY_ATTRIBUTES, flags_and_attributes_: u32, optimize_markup_size_: BOOL) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).WriteToFile(@as(*const IXpsOMPackage, @ptrCast(self)), file_name_, security_attributes_, flags_and_attributes_, optimize_markup_size_);
            }
            pub inline fn writeToStream(self: *const T, stream_: ?*ISequentialStream, optimize_markup_size_: BOOL) HRESULT {
                return @as(*const IXpsOMPackage.VTable, @ptrCast(self.vtable)).WriteToStream(@as(*const IXpsOMPackage, @ptrCast(self)), stream_, optimize_markup_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMObjectFactory_Value = Guid.initString("f9b2a685-a50d-4fc2-b764-b56e093ea0ca");
pub const IID_IXpsOMObjectFactory = &IID_IXpsOMObjectFactory_Value;
pub const IXpsOMObjectFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePackage: *const fn (
            self: *const IXpsOMObjectFactory,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageFromFile: *const fn (
            self: *const IXpsOMObjectFactory,
            filename: ?[*:0]const u16,
            reuse_objects: BOOL,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageFromStream: *const fn (
            self: *const IXpsOMObjectFactory,
            stream: ?*IStream,
            reuse_objects: BOOL,
            package: ?*?*IXpsOMPackage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStoryFragmentsResource: *const fn (
            self: *const IXpsOMObjectFactory,
            acquired_stream: ?*IStream,
            part_uri: ?*IOpcPartUri,
            story_fragments_resource: ?*?*IXpsOMStoryFragmentsResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDocumentStructureResource: *const fn (
            self: *const IXpsOMObjectFactory,
            acquired_stream: ?*IStream,
            part_uri: ?*IOpcPartUri,
            document_structure_resource: ?*?*IXpsOMDocumentStructureResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSignatureBlockResource: *const fn (
            self: *const IXpsOMObjectFactory,
            acquired_stream: ?*IStream,
            part_uri: ?*IOpcPartUri,
            signature_block_resource: ?*?*IXpsOMSignatureBlockResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRemoteDictionaryResource: *const fn (
            self: *const IXpsOMObjectFactory,
            dictionary: ?*IXpsOMDictionary,
            part_uri: ?*IOpcPartUri,
            remote_dictionary_resource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRemoteDictionaryResourceFromStream: *const fn (
            self: *const IXpsOMObjectFactory,
            dictionary_markup_stream: ?*IStream,
            dictionary_part_uri: ?*IOpcPartUri,
            resources: ?*IXpsOMPartResources,
            dictionary_resource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePartResources: *const fn (
            self: *const IXpsOMObjectFactory,
            part_resources: ?*?*IXpsOMPartResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDocumentSequence: *const fn (
            self: *const IXpsOMObjectFactory,
            part_uri: ?*IOpcPartUri,
            document_sequence: ?*?*IXpsOMDocumentSequence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDocument: *const fn (
            self: *const IXpsOMObjectFactory,
            part_uri: ?*IOpcPartUri,
            document: ?*?*IXpsOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePageReference: *const fn (
            self: *const IXpsOMObjectFactory,
            advisory_page_dimensions: ?*const XPS_SIZE,
            page_reference: ?*?*IXpsOMPageReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePage: *const fn (
            self: *const IXpsOMObjectFactory,
            page_dimensions: ?*const XPS_SIZE,
            language: ?[*:0]const u16,
            part_uri: ?*IOpcPartUri,
            page: ?*?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePageFromStream: *const fn (
            self: *const IXpsOMObjectFactory,
            page_markup_stream: ?*IStream,
            part_uri: ?*IOpcPartUri,
            resources: ?*IXpsOMPartResources,
            reuse_objects: BOOL,
            page: ?*?*IXpsOMPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCanvas: *const fn (
            self: *const IXpsOMObjectFactory,
            canvas: ?*?*IXpsOMCanvas,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGlyphs: *const fn (
            self: *const IXpsOMObjectFactory,
            font_resource: ?*IXpsOMFontResource,
            glyphs: ?*?*IXpsOMGlyphs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePath: *const fn (
            self: *const IXpsOMObjectFactory,
            path: ?*?*IXpsOMPath,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGeometry: *const fn (
            self: *const IXpsOMObjectFactory,
            geometry: ?*?*IXpsOMGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGeometryFigure: *const fn (
            self: *const IXpsOMObjectFactory,
            start_point: ?*const XPS_POINT,
            figure: ?*?*IXpsOMGeometryFigure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform: *const fn (
            self: *const IXpsOMObjectFactory,
            matrix: ?*const XPS_MATRIX,
            transform: ?*?*IXpsOMMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSolidColorBrush: *const fn (
            self: *const IXpsOMObjectFactory,
            color: ?*const XPS_COLOR,
            color_profile: ?*IXpsOMColorProfileResource,
            solid_color_brush: ?*?*IXpsOMSolidColorBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorProfileResource: *const fn (
            self: *const IXpsOMObjectFactory,
            acquired_stream: ?*IStream,
            part_uri: ?*IOpcPartUri,
            color_profile_resource: ?*?*IXpsOMColorProfileResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageBrush: *const fn (
            self: *const IXpsOMObjectFactory,
            image: ?*IXpsOMImageResource,
            view_box: ?*const XPS_RECT,
            view_port: ?*const XPS_RECT,
            image_brush: ?*?*IXpsOMImageBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVisualBrush: *const fn (
            self: *const IXpsOMObjectFactory,
            view_box: ?*const XPS_RECT,
            view_port: ?*const XPS_RECT,
            visual_brush: ?*?*IXpsOMVisualBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageResource: *const fn (
            self: *const IXpsOMObjectFactory,
            acquired_stream: ?*IStream,
            content_type: XPS_IMAGE_TYPE,
            part_uri: ?*IOpcPartUri,
            image_resource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePrintTicketResource: *const fn (
            self: *const IXpsOMObjectFactory,
            acquired_stream: ?*IStream,
            part_uri: ?*IOpcPartUri,
            print_ticket_resource: ?*?*IXpsOMPrintTicketResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontResource: *const fn (
            self: *const IXpsOMObjectFactory,
            acquired_stream: ?*IStream,
            font_embedding: XPS_FONT_EMBEDDING,
            part_uri: ?*IOpcPartUri,
            is_obf_source_stream: BOOL,
            font_resource: ?*?*IXpsOMFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGradientStop: *const fn (
            self: *const IXpsOMObjectFactory,
            color: ?*const XPS_COLOR,
            color_profile: ?*IXpsOMColorProfileResource,
            offset: f32,
            gradient_stop: ?*?*IXpsOMGradientStop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearGradientBrush: *const fn (
            self: *const IXpsOMObjectFactory,
            grad_stop1: ?*IXpsOMGradientStop,
            grad_stop2: ?*IXpsOMGradientStop,
            start_point: ?*const XPS_POINT,
            end_point: ?*const XPS_POINT,
            linear_gradient_brush: ?*?*IXpsOMLinearGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRadialGradientBrush: *const fn (
            self: *const IXpsOMObjectFactory,
            grad_stop1: ?*IXpsOMGradientStop,
            grad_stop2: ?*IXpsOMGradientStop,
            center_point: ?*const XPS_POINT,
            gradient_origin: ?*const XPS_POINT,
            radii_sizes: ?*const XPS_SIZE,
            radial_gradient_brush: ?*?*IXpsOMRadialGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCoreProperties: *const fn (
            self: *const IXpsOMObjectFactory,
            part_uri: ?*IOpcPartUri,
            core_properties: ?*?*IXpsOMCoreProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDictionary: *const fn (
            self: *const IXpsOMObjectFactory,
            dictionary: ?*?*IXpsOMDictionary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePartUriCollection: *const fn (
            self: *const IXpsOMObjectFactory,
            part_uri_collection: ?*?*IXpsOMPartUriCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageWriterOnFile: *const fn (
            self: *const IXpsOMObjectFactory,
            file_name: ?[*:0]const u16,
            security_attributes: ?*SECURITY_ATTRIBUTES,
            flags_and_attributes: u32,
            optimize_markup_size: BOOL,
            interleaving: XPS_INTERLEAVING,
            document_sequence_part_name: ?*IOpcPartUri,
            core_properties: ?*IXpsOMCoreProperties,
            package_thumbnail: ?*IXpsOMImageResource,
            document_sequence_print_ticket: ?*IXpsOMPrintTicketResource,
            discard_control_part_name: ?*IOpcPartUri,
            package_writer: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageWriterOnStream: *const fn (
            self: *const IXpsOMObjectFactory,
            output_stream: ?*ISequentialStream,
            optimize_markup_size: BOOL,
            interleaving: XPS_INTERLEAVING,
            document_sequence_part_name: ?*IOpcPartUri,
            core_properties: ?*IXpsOMCoreProperties,
            package_thumbnail: ?*IXpsOMImageResource,
            document_sequence_print_ticket: ?*IXpsOMPrintTicketResource,
            discard_control_part_name: ?*IOpcPartUri,
            package_writer: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePartUri: *const fn (
            self: *const IXpsOMObjectFactory,
            uri: ?[*:0]const u16,
            part_uri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateReadOnlyStreamOnFile: *const fn (
            self: *const IXpsOMObjectFactory,
            filename: ?[*:0]const u16,
            stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createPackage(self: *const T, package_: ?*?*IXpsOMPackage) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePackage(@as(*const IXpsOMObjectFactory, @ptrCast(self)), package_);
            }
            pub inline fn createPackageFromFile(self: *const T, filename_: ?[*:0]const u16, reuse_objects_: BOOL, package_: ?*?*IXpsOMPackage) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePackageFromFile(@as(*const IXpsOMObjectFactory, @ptrCast(self)), filename_, reuse_objects_, package_);
            }
            pub inline fn createPackageFromStream(self: *const T, stream_: ?*IStream, reuse_objects_: BOOL, package_: ?*?*IXpsOMPackage) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePackageFromStream(@as(*const IXpsOMObjectFactory, @ptrCast(self)), stream_, reuse_objects_, package_);
            }
            pub inline fn createStoryFragmentsResource(self: *const T, acquired_stream_: ?*IStream, part_uri_: ?*IOpcPartUri, story_fragments_resource_: ?*?*IXpsOMStoryFragmentsResource) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateStoryFragmentsResource(@as(*const IXpsOMObjectFactory, @ptrCast(self)), acquired_stream_, part_uri_, story_fragments_resource_);
            }
            pub inline fn createDocumentStructureResource(self: *const T, acquired_stream_: ?*IStream, part_uri_: ?*IOpcPartUri, document_structure_resource_: ?*?*IXpsOMDocumentStructureResource) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateDocumentStructureResource(@as(*const IXpsOMObjectFactory, @ptrCast(self)), acquired_stream_, part_uri_, document_structure_resource_);
            }
            pub inline fn createSignatureBlockResource(self: *const T, acquired_stream_: ?*IStream, part_uri_: ?*IOpcPartUri, signature_block_resource_: ?*?*IXpsOMSignatureBlockResource) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateSignatureBlockResource(@as(*const IXpsOMObjectFactory, @ptrCast(self)), acquired_stream_, part_uri_, signature_block_resource_);
            }
            pub inline fn createRemoteDictionaryResource(self: *const T, dictionary_: ?*IXpsOMDictionary, part_uri_: ?*IOpcPartUri, remote_dictionary_resource_: ?*?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateRemoteDictionaryResource(@as(*const IXpsOMObjectFactory, @ptrCast(self)), dictionary_, part_uri_, remote_dictionary_resource_);
            }
            pub inline fn createRemoteDictionaryResourceFromStream(self: *const T, dictionary_markup_stream_: ?*IStream, dictionary_part_uri_: ?*IOpcPartUri, resources_: ?*IXpsOMPartResources, dictionary_resource_: ?*?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateRemoteDictionaryResourceFromStream(@as(*const IXpsOMObjectFactory, @ptrCast(self)), dictionary_markup_stream_, dictionary_part_uri_, resources_, dictionary_resource_);
            }
            pub inline fn createPartResources(self: *const T, part_resources_: ?*?*IXpsOMPartResources) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePartResources(@as(*const IXpsOMObjectFactory, @ptrCast(self)), part_resources_);
            }
            pub inline fn createDocumentSequence(self: *const T, part_uri_: ?*IOpcPartUri, document_sequence_: ?*?*IXpsOMDocumentSequence) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateDocumentSequence(@as(*const IXpsOMObjectFactory, @ptrCast(self)), part_uri_, document_sequence_);
            }
            pub inline fn createDocument(self: *const T, part_uri_: ?*IOpcPartUri, document_: ?*?*IXpsOMDocument) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateDocument(@as(*const IXpsOMObjectFactory, @ptrCast(self)), part_uri_, document_);
            }
            pub inline fn createPageReference(self: *const T, advisory_page_dimensions_: ?*const XPS_SIZE, page_reference_: ?*?*IXpsOMPageReference) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePageReference(@as(*const IXpsOMObjectFactory, @ptrCast(self)), advisory_page_dimensions_, page_reference_);
            }
            pub inline fn createPage(self: *const T, page_dimensions_: ?*const XPS_SIZE, language_: ?[*:0]const u16, part_uri_: ?*IOpcPartUri, page_: ?*?*IXpsOMPage) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePage(@as(*const IXpsOMObjectFactory, @ptrCast(self)), page_dimensions_, language_, part_uri_, page_);
            }
            pub inline fn createPageFromStream(self: *const T, page_markup_stream_: ?*IStream, part_uri_: ?*IOpcPartUri, resources_: ?*IXpsOMPartResources, reuse_objects_: BOOL, page_: ?*?*IXpsOMPage) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePageFromStream(@as(*const IXpsOMObjectFactory, @ptrCast(self)), page_markup_stream_, part_uri_, resources_, reuse_objects_, page_);
            }
            pub inline fn createCanvas(self: *const T, canvas_: ?*?*IXpsOMCanvas) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateCanvas(@as(*const IXpsOMObjectFactory, @ptrCast(self)), canvas_);
            }
            pub inline fn createGlyphs(self: *const T, font_resource_: ?*IXpsOMFontResource, glyphs_: ?*?*IXpsOMGlyphs) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateGlyphs(@as(*const IXpsOMObjectFactory, @ptrCast(self)), font_resource_, glyphs_);
            }
            pub inline fn createPath(self: *const T, path_: ?*?*IXpsOMPath) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePath(@as(*const IXpsOMObjectFactory, @ptrCast(self)), path_);
            }
            pub inline fn createGeometry(self: *const T, geometry_: ?*?*IXpsOMGeometry) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateGeometry(@as(*const IXpsOMObjectFactory, @ptrCast(self)), geometry_);
            }
            pub inline fn createGeometryFigure(self: *const T, start_point_: ?*const XPS_POINT, figure_: ?*?*IXpsOMGeometryFigure) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateGeometryFigure(@as(*const IXpsOMObjectFactory, @ptrCast(self)), start_point_, figure_);
            }
            pub inline fn createMatrixTransform(self: *const T, matrix_: ?*const XPS_MATRIX, transform_: ?*?*IXpsOMMatrixTransform) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateMatrixTransform(@as(*const IXpsOMObjectFactory, @ptrCast(self)), matrix_, transform_);
            }
            pub inline fn createSolidColorBrush(self: *const T, color_: ?*const XPS_COLOR, color_profile_: ?*IXpsOMColorProfileResource, solid_color_brush_: ?*?*IXpsOMSolidColorBrush) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateSolidColorBrush(@as(*const IXpsOMObjectFactory, @ptrCast(self)), color_, color_profile_, solid_color_brush_);
            }
            pub inline fn createColorProfileResource(self: *const T, acquired_stream_: ?*IStream, part_uri_: ?*IOpcPartUri, color_profile_resource_: ?*?*IXpsOMColorProfileResource) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateColorProfileResource(@as(*const IXpsOMObjectFactory, @ptrCast(self)), acquired_stream_, part_uri_, color_profile_resource_);
            }
            pub inline fn createImageBrush(self: *const T, image_: ?*IXpsOMImageResource, view_box_: ?*const XPS_RECT, view_port_: ?*const XPS_RECT, image_brush_: ?*?*IXpsOMImageBrush) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateImageBrush(@as(*const IXpsOMObjectFactory, @ptrCast(self)), image_, view_box_, view_port_, image_brush_);
            }
            pub inline fn createVisualBrush(self: *const T, view_box_: ?*const XPS_RECT, view_port_: ?*const XPS_RECT, visual_brush_: ?*?*IXpsOMVisualBrush) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateVisualBrush(@as(*const IXpsOMObjectFactory, @ptrCast(self)), view_box_, view_port_, visual_brush_);
            }
            pub inline fn createImageResource(self: *const T, acquired_stream_: ?*IStream, content_type_: XPS_IMAGE_TYPE, part_uri_: ?*IOpcPartUri, image_resource_: ?*?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateImageResource(@as(*const IXpsOMObjectFactory, @ptrCast(self)), acquired_stream_, content_type_, part_uri_, image_resource_);
            }
            pub inline fn createPrintTicketResource(self: *const T, acquired_stream_: ?*IStream, part_uri_: ?*IOpcPartUri, print_ticket_resource_: ?*?*IXpsOMPrintTicketResource) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePrintTicketResource(@as(*const IXpsOMObjectFactory, @ptrCast(self)), acquired_stream_, part_uri_, print_ticket_resource_);
            }
            pub inline fn createFontResource(self: *const T, acquired_stream_: ?*IStream, font_embedding_: XPS_FONT_EMBEDDING, part_uri_: ?*IOpcPartUri, is_obf_source_stream_: BOOL, font_resource_: ?*?*IXpsOMFontResource) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateFontResource(@as(*const IXpsOMObjectFactory, @ptrCast(self)), acquired_stream_, font_embedding_, part_uri_, is_obf_source_stream_, font_resource_);
            }
            pub inline fn createGradientStop(self: *const T, color_: ?*const XPS_COLOR, color_profile_: ?*IXpsOMColorProfileResource, offset_: f32, gradient_stop_: ?*?*IXpsOMGradientStop) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateGradientStop(@as(*const IXpsOMObjectFactory, @ptrCast(self)), color_, color_profile_, offset_, gradient_stop_);
            }
            pub inline fn createLinearGradientBrush(self: *const T, grad_stop1_: ?*IXpsOMGradientStop, grad_stop2_: ?*IXpsOMGradientStop, start_point_: ?*const XPS_POINT, end_point_: ?*const XPS_POINT, linear_gradient_brush_: ?*?*IXpsOMLinearGradientBrush) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateLinearGradientBrush(@as(*const IXpsOMObjectFactory, @ptrCast(self)), grad_stop1_, grad_stop2_, start_point_, end_point_, linear_gradient_brush_);
            }
            pub inline fn createRadialGradientBrush(self: *const T, grad_stop1_: ?*IXpsOMGradientStop, grad_stop2_: ?*IXpsOMGradientStop, center_point_: ?*const XPS_POINT, gradient_origin_: ?*const XPS_POINT, radii_sizes_: ?*const XPS_SIZE, radial_gradient_brush_: ?*?*IXpsOMRadialGradientBrush) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateRadialGradientBrush(@as(*const IXpsOMObjectFactory, @ptrCast(self)), grad_stop1_, grad_stop2_, center_point_, gradient_origin_, radii_sizes_, radial_gradient_brush_);
            }
            pub inline fn createCoreProperties(self: *const T, part_uri_: ?*IOpcPartUri, core_properties_: ?*?*IXpsOMCoreProperties) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateCoreProperties(@as(*const IXpsOMObjectFactory, @ptrCast(self)), part_uri_, core_properties_);
            }
            pub inline fn createDictionary(self: *const T, dictionary_: ?*?*IXpsOMDictionary) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateDictionary(@as(*const IXpsOMObjectFactory, @ptrCast(self)), dictionary_);
            }
            pub inline fn createPartUriCollection(self: *const T, part_uri_collection_: ?*?*IXpsOMPartUriCollection) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePartUriCollection(@as(*const IXpsOMObjectFactory, @ptrCast(self)), part_uri_collection_);
            }
            pub inline fn createPackageWriterOnFile(self: *const T, file_name_: ?[*:0]const u16, security_attributes_: ?*SECURITY_ATTRIBUTES, flags_and_attributes_: u32, optimize_markup_size_: BOOL, interleaving_: XPS_INTERLEAVING, document_sequence_part_name_: ?*IOpcPartUri, core_properties_: ?*IXpsOMCoreProperties, package_thumbnail_: ?*IXpsOMImageResource, document_sequence_print_ticket_: ?*IXpsOMPrintTicketResource, discard_control_part_name_: ?*IOpcPartUri, package_writer_: ?*?*IXpsOMPackageWriter) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePackageWriterOnFile(@as(*const IXpsOMObjectFactory, @ptrCast(self)), file_name_, security_attributes_, flags_and_attributes_, optimize_markup_size_, interleaving_, document_sequence_part_name_, core_properties_, package_thumbnail_, document_sequence_print_ticket_, discard_control_part_name_, package_writer_);
            }
            pub inline fn createPackageWriterOnStream(self: *const T, output_stream_: ?*ISequentialStream, optimize_markup_size_: BOOL, interleaving_: XPS_INTERLEAVING, document_sequence_part_name_: ?*IOpcPartUri, core_properties_: ?*IXpsOMCoreProperties, package_thumbnail_: ?*IXpsOMImageResource, document_sequence_print_ticket_: ?*IXpsOMPrintTicketResource, discard_control_part_name_: ?*IOpcPartUri, package_writer_: ?*?*IXpsOMPackageWriter) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePackageWriterOnStream(@as(*const IXpsOMObjectFactory, @ptrCast(self)), output_stream_, optimize_markup_size_, interleaving_, document_sequence_part_name_, core_properties_, package_thumbnail_, document_sequence_print_ticket_, discard_control_part_name_, package_writer_);
            }
            pub inline fn createPartUri(self: *const T, uri_: ?[*:0]const u16, part_uri_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreatePartUri(@as(*const IXpsOMObjectFactory, @ptrCast(self)), uri_, part_uri_);
            }
            pub inline fn createReadOnlyStreamOnFile(self: *const T, filename_: ?[*:0]const u16, stream_: ?*?*IStream) HRESULT {
                return @as(*const IXpsOMObjectFactory.VTable, @ptrCast(self.vtable)).CreateReadOnlyStreamOnFile(@as(*const IXpsOMObjectFactory, @ptrCast(self)), filename_, stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMNameCollection_Value = Guid.initString("4bddf8ec-c915-421b-a166-d173d25653d2");
pub const IID_IXpsOMNameCollection = &IID_IXpsOMNameCollection_Value;
pub const IXpsOMNameCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMNameCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMNameCollection,
            index: u32,
            name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMNameCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMNameCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, name_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsOMNameCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMNameCollection, @ptrCast(self)), index_, name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPartUriCollection_Value = Guid.initString("57c650d4-067c-4893-8c33-f62a0633730f");
pub const IID_IXpsOMPartUriCollection = &IID_IXpsOMPartUriCollection_Value;
pub const IXpsOMPartUriCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsOMPartUriCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsOMPartUriCollection,
            index: u32,
            part_uri: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IXpsOMPartUriCollection,
            index: u32,
            part_uri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsOMPartUriCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAt: *const fn (
            self: *const IXpsOMPartUriCollection,
            index: u32,
            part_uri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IXpsOMPartUriCollection,
            part_uri: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsOMPartUriCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsOMPartUriCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, part_uri_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMPartUriCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsOMPartUriCollection, @ptrCast(self)), index_, part_uri_);
            }
            pub inline fn insertAt(self: *const T, index_: u32, part_uri_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMPartUriCollection.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IXpsOMPartUriCollection, @ptrCast(self)), index_, part_uri_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsOMPartUriCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsOMPartUriCollection, @ptrCast(self)), index_);
            }
            pub inline fn setAt(self: *const T, index_: u32, part_uri_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMPartUriCollection.VTable, @ptrCast(self.vtable)).SetAt(@as(*const IXpsOMPartUriCollection, @ptrCast(self)), index_, part_uri_);
            }
            pub inline fn append(self: *const T, part_uri_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsOMPartUriCollection.VTable, @ptrCast(self.vtable)).Append(@as(*const IXpsOMPartUriCollection, @ptrCast(self)), part_uri_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPackageWriter_Value = Guid.initString("4e2aa182-a443-42c6-b41b-4f8e9de73ff9");
pub const IID_IXpsOMPackageWriter = &IID_IXpsOMPackageWriter_Value;
pub const IXpsOMPackageWriter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartNewDocument: *const fn (
            self: *const IXpsOMPackageWriter,
            document_part_name: ?*IOpcPartUri,
            document_print_ticket: ?*IXpsOMPrintTicketResource,
            document_structure: ?*IXpsOMDocumentStructureResource,
            signature_block_resources: ?*IXpsOMSignatureBlockResourceCollection,
            restricted_fonts: ?*IXpsOMPartUriCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPage: *const fn (
            self: *const IXpsOMPackageWriter,
            page: ?*IXpsOMPage,
            advisory_page_dimensions: ?*const XPS_SIZE,
            discardable_resource_parts: ?*IXpsOMPartUriCollection,
            story_fragments: ?*IXpsOMStoryFragmentsResource,
            page_print_ticket: ?*IXpsOMPrintTicketResource,
            page_thumbnail: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddResource: *const fn (
            self: *const IXpsOMPackageWriter,
            resource: ?*IXpsOMResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsClosed: *const fn (
            self: *const IXpsOMPackageWriter,
            is_closed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startNewDocument(self: *const T, document_part_name_: ?*IOpcPartUri, document_print_ticket_: ?*IXpsOMPrintTicketResource, document_structure_: ?*IXpsOMDocumentStructureResource, signature_block_resources_: ?*IXpsOMSignatureBlockResourceCollection, restricted_fonts_: ?*IXpsOMPartUriCollection) HRESULT {
                return @as(*const IXpsOMPackageWriter.VTable, @ptrCast(self.vtable)).StartNewDocument(@as(*const IXpsOMPackageWriter, @ptrCast(self)), document_part_name_, document_print_ticket_, document_structure_, signature_block_resources_, restricted_fonts_);
            }
            pub inline fn addPage(self: *const T, page_: ?*IXpsOMPage, advisory_page_dimensions_: ?*const XPS_SIZE, discardable_resource_parts_: ?*IXpsOMPartUriCollection, story_fragments_: ?*IXpsOMStoryFragmentsResource, page_print_ticket_: ?*IXpsOMPrintTicketResource, page_thumbnail_: ?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMPackageWriter.VTable, @ptrCast(self.vtable)).AddPage(@as(*const IXpsOMPackageWriter, @ptrCast(self)), page_, advisory_page_dimensions_, discardable_resource_parts_, story_fragments_, page_print_ticket_, page_thumbnail_);
            }
            pub inline fn addResource(self: *const T, resource_: ?*IXpsOMResource) HRESULT {
                return @as(*const IXpsOMPackageWriter.VTable, @ptrCast(self.vtable)).AddResource(@as(*const IXpsOMPackageWriter, @ptrCast(self)), resource_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IXpsOMPackageWriter.VTable, @ptrCast(self.vtable)).Close(@as(*const IXpsOMPackageWriter, @ptrCast(self)));
            }
            pub inline fn isClosed(self: *const T, is_closed_: ?*BOOL) HRESULT {
                return @as(*const IXpsOMPackageWriter.VTable, @ptrCast(self.vtable)).IsClosed(@as(*const IXpsOMPackageWriter, @ptrCast(self)), is_closed_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMPackageTarget_Value = Guid.initString("219a9db0-4959-47d0-8034-b1ce84f41a4d");
pub const IID_IXpsOMPackageTarget = &IID_IXpsOMPackageTarget_Value;
pub const IXpsOMPackageTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateXpsOMPackageWriter: *const fn (
            self: *const IXpsOMPackageTarget,
            document_sequence_part_name: ?*IOpcPartUri,
            document_sequence_print_ticket: ?*IXpsOMPrintTicketResource,
            discard_control_part_name: ?*IOpcPartUri,
            package_writer: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createXpsOMPackageWriter(self: *const T, document_sequence_part_name_: ?*IOpcPartUri, document_sequence_print_ticket_: ?*IXpsOMPrintTicketResource, discard_control_part_name_: ?*IOpcPartUri, package_writer_: ?*?*IXpsOMPackageWriter) HRESULT {
                return @as(*const IXpsOMPackageTarget.VTable, @ptrCast(self.vtable)).CreateXpsOMPackageWriter(@as(*const IXpsOMPackageTarget, @ptrCast(self)), document_sequence_part_name_, document_sequence_print_ticket_, discard_control_part_name_, package_writer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsOMThumbnailGenerator_Value = Guid.initString("15b873d5-1971-41e8-83a3-6578403064c7");
pub const IID_IXpsOMThumbnailGenerator = &IID_IXpsOMThumbnailGenerator_Value;
pub const IXpsOMThumbnailGenerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GenerateThumbnail: *const fn (
            self: *const IXpsOMThumbnailGenerator,
            page: ?*IXpsOMPage,
            thumbnail_type: XPS_IMAGE_TYPE,
            thumbnail_size: XPS_THUMBNAIL_SIZE,
            image_resource_part_name: ?*IOpcPartUri,
            image_resource: ?*?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn generateThumbnail(self: *const T, page_: ?*IXpsOMPage, thumbnail_type_: XPS_IMAGE_TYPE, thumbnail_size_: XPS_THUMBNAIL_SIZE, image_resource_part_name_: ?*IOpcPartUri, image_resource_: ?*?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMThumbnailGenerator.VTable, @ptrCast(self.vtable)).GenerateThumbnail(@as(*const IXpsOMThumbnailGenerator, @ptrCast(self)), page_, thumbnail_type_, thumbnail_size_, image_resource_part_name_, image_resource_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const XPS_DOCUMENT_TYPE = enum(i32) {
    UNSPECIFIED = 1,
    XPS = 2,
    OPENXPS = 3,
};
pub const XPS_DOCUMENT_TYPE_UNSPECIFIED = XPS_DOCUMENT_TYPE.UNSPECIFIED;
pub const XPS_DOCUMENT_TYPE_XPS = XPS_DOCUMENT_TYPE.XPS;
pub const XPS_DOCUMENT_TYPE_OPENXPS = XPS_DOCUMENT_TYPE.OPENXPS;

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsOMObjectFactory1_Value = Guid.initString("0a91b617-d612-4181-bf7c-be5824e9cc8f");
pub const IID_IXpsOMObjectFactory1 = &IID_IXpsOMObjectFactory1_Value;
pub const IXpsOMObjectFactory1 = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMObjectFactory.VTable,
        GetDocumentTypeFromFile: *const fn (
            self: *const IXpsOMObjectFactory1,
            filename: ?[*:0]const u16,
            document_type: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentTypeFromStream: *const fn (
            self: *const IXpsOMObjectFactory1,
            xps_document_stream: ?*IStream,
            document_type: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertHDPhotoToJpegXR: *const fn (
            self: *const IXpsOMObjectFactory1,
            image_resource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertJpegXRToHDPhoto: *const fn (
            self: *const IXpsOMObjectFactory1,
            image_resource: ?*IXpsOMImageResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageWriterOnFile1: *const fn (
            self: *const IXpsOMObjectFactory1,
            file_name: ?[*:0]const u16,
            security_attributes: ?*SECURITY_ATTRIBUTES,
            flags_and_attributes: u32,
            optimize_markup_size: BOOL,
            interleaving: XPS_INTERLEAVING,
            document_sequence_part_name: ?*IOpcPartUri,
            core_properties: ?*IXpsOMCoreProperties,
            package_thumbnail: ?*IXpsOMImageResource,
            document_sequence_print_ticket: ?*IXpsOMPrintTicketResource,
            discard_control_part_name: ?*IOpcPartUri,
            document_type: XPS_DOCUMENT_TYPE,
            package_writer: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageWriterOnStream1: *const fn (
            self: *const IXpsOMObjectFactory1,
            output_stream: ?*ISequentialStream,
            optimize_markup_size: BOOL,
            interleaving: XPS_INTERLEAVING,
            document_sequence_part_name: ?*IOpcPartUri,
            core_properties: ?*IXpsOMCoreProperties,
            package_thumbnail: ?*IXpsOMImageResource,
            document_sequence_print_ticket: ?*IXpsOMPrintTicketResource,
            discard_control_part_name: ?*IOpcPartUri,
            document_type: XPS_DOCUMENT_TYPE,
            package_writer: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackage1: *const fn (
            self: *const IXpsOMObjectFactory1,
            package: ?*?*IXpsOMPackage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageFromStream1: *const fn (
            self: *const IXpsOMObjectFactory1,
            stream: ?*IStream,
            reuse_objects: BOOL,
            package: ?*?*IXpsOMPackage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePackageFromFile1: *const fn (
            self: *const IXpsOMObjectFactory1,
            filename: ?[*:0]const u16,
            reuse_objects: BOOL,
            package: ?*?*IXpsOMPackage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePage1: *const fn (
            self: *const IXpsOMObjectFactory1,
            page_dimensions: ?*const XPS_SIZE,
            language: ?[*:0]const u16,
            part_uri: ?*IOpcPartUri,
            page: ?*?*IXpsOMPage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePageFromStream1: *const fn (
            self: *const IXpsOMObjectFactory1,
            page_markup_stream: ?*IStream,
            part_uri: ?*IOpcPartUri,
            resources: ?*IXpsOMPartResources,
            reuse_objects: BOOL,
            page: ?*?*IXpsOMPage1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRemoteDictionaryResourceFromStream1: *const fn (
            self: *const IXpsOMObjectFactory1,
            dictionary_markup_stream: ?*IStream,
            part_uri: ?*IOpcPartUri,
            resources: ?*IXpsOMPartResources,
            dictionary_resource: ?*?*IXpsOMRemoteDictionaryResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMObjectFactory.MethodMixin(T);
            pub inline fn getDocumentTypeFromFile(self: *const T, filename_: ?[*:0]const u16, document_type_: ?*XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).GetDocumentTypeFromFile(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), filename_, document_type_);
            }
            pub inline fn getDocumentTypeFromStream(self: *const T, xps_document_stream_: ?*IStream, document_type_: ?*XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).GetDocumentTypeFromStream(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), xps_document_stream_, document_type_);
            }
            pub inline fn convertHDPhotoToJpegXR(self: *const T, image_resource_: ?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).ConvertHDPhotoToJpegXR(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), image_resource_);
            }
            pub inline fn convertJpegXRToHDPhoto(self: *const T, image_resource_: ?*IXpsOMImageResource) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).ConvertJpegXRToHDPhoto(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), image_resource_);
            }
            pub inline fn createPackageWriterOnFile1(self: *const T, file_name_: ?[*:0]const u16, security_attributes_: ?*SECURITY_ATTRIBUTES, flags_and_attributes_: u32, optimize_markup_size_: BOOL, interleaving_: XPS_INTERLEAVING, document_sequence_part_name_: ?*IOpcPartUri, core_properties_: ?*IXpsOMCoreProperties, package_thumbnail_: ?*IXpsOMImageResource, document_sequence_print_ticket_: ?*IXpsOMPrintTicketResource, discard_control_part_name_: ?*IOpcPartUri, document_type_: XPS_DOCUMENT_TYPE, package_writer_: ?*?*IXpsOMPackageWriter) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).CreatePackageWriterOnFile1(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), file_name_, security_attributes_, flags_and_attributes_, optimize_markup_size_, interleaving_, document_sequence_part_name_, core_properties_, package_thumbnail_, document_sequence_print_ticket_, discard_control_part_name_, document_type_, package_writer_);
            }
            pub inline fn createPackageWriterOnStream1(self: *const T, output_stream_: ?*ISequentialStream, optimize_markup_size_: BOOL, interleaving_: XPS_INTERLEAVING, document_sequence_part_name_: ?*IOpcPartUri, core_properties_: ?*IXpsOMCoreProperties, package_thumbnail_: ?*IXpsOMImageResource, document_sequence_print_ticket_: ?*IXpsOMPrintTicketResource, discard_control_part_name_: ?*IOpcPartUri, document_type_: XPS_DOCUMENT_TYPE, package_writer_: ?*?*IXpsOMPackageWriter) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).CreatePackageWriterOnStream1(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), output_stream_, optimize_markup_size_, interleaving_, document_sequence_part_name_, core_properties_, package_thumbnail_, document_sequence_print_ticket_, discard_control_part_name_, document_type_, package_writer_);
            }
            pub inline fn createPackage1(self: *const T, package_: ?*?*IXpsOMPackage1) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).CreatePackage1(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), package_);
            }
            pub inline fn createPackageFromStream1(self: *const T, stream_: ?*IStream, reuse_objects_: BOOL, package_: ?*?*IXpsOMPackage1) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).CreatePackageFromStream1(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), stream_, reuse_objects_, package_);
            }
            pub inline fn createPackageFromFile1(self: *const T, filename_: ?[*:0]const u16, reuse_objects_: BOOL, package_: ?*?*IXpsOMPackage1) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).CreatePackageFromFile1(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), filename_, reuse_objects_, package_);
            }
            pub inline fn createPage1(self: *const T, page_dimensions_: ?*const XPS_SIZE, language_: ?[*:0]const u16, part_uri_: ?*IOpcPartUri, page_: ?*?*IXpsOMPage1) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).CreatePage1(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), page_dimensions_, language_, part_uri_, page_);
            }
            pub inline fn createPageFromStream1(self: *const T, page_markup_stream_: ?*IStream, part_uri_: ?*IOpcPartUri, resources_: ?*IXpsOMPartResources, reuse_objects_: BOOL, page_: ?*?*IXpsOMPage1) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).CreatePageFromStream1(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), page_markup_stream_, part_uri_, resources_, reuse_objects_, page_);
            }
            pub inline fn createRemoteDictionaryResourceFromStream1(self: *const T, dictionary_markup_stream_: ?*IStream, part_uri_: ?*IOpcPartUri, resources_: ?*IXpsOMPartResources, dictionary_resource_: ?*?*IXpsOMRemoteDictionaryResource) HRESULT {
                return @as(*const IXpsOMObjectFactory1.VTable, @ptrCast(self.vtable)).CreateRemoteDictionaryResourceFromStream1(@as(*const IXpsOMObjectFactory1, @ptrCast(self)), dictionary_markup_stream_, part_uri_, resources_, dictionary_resource_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsOMPackage1_Value = Guid.initString("95a9435e-12bb-461b-8e7f-c6adb04cd96a");
pub const IID_IXpsOMPackage1 = &IID_IXpsOMPackage1_Value;
pub const IXpsOMPackage1 = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPackage.VTable,
        GetDocumentType: *const fn (
            self: *const IXpsOMPackage1,
            document_type: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToFile1: *const fn (
            self: *const IXpsOMPackage1,
            file_name: ?[*:0]const u16,
            security_attributes: ?*SECURITY_ATTRIBUTES,
            flags_and_attributes: u32,
            optimize_markup_size: BOOL,
            document_type: XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToStream1: *const fn (
            self: *const IXpsOMPackage1,
            output_stream: ?*ISequentialStream,
            optimize_markup_size: BOOL,
            document_type: XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMPackage.MethodMixin(T);
            pub inline fn getDocumentType(self: *const T, document_type_: ?*XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsOMPackage1.VTable, @ptrCast(self.vtable)).GetDocumentType(@as(*const IXpsOMPackage1, @ptrCast(self)), document_type_);
            }
            pub inline fn writeToFile1(self: *const T, file_name_: ?[*:0]const u16, security_attributes_: ?*SECURITY_ATTRIBUTES, flags_and_attributes_: u32, optimize_markup_size_: BOOL, document_type_: XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsOMPackage1.VTable, @ptrCast(self.vtable)).WriteToFile1(@as(*const IXpsOMPackage1, @ptrCast(self)), file_name_, security_attributes_, flags_and_attributes_, optimize_markup_size_, document_type_);
            }
            pub inline fn writeToStream1(self: *const T, output_stream_: ?*ISequentialStream, optimize_markup_size_: BOOL, document_type_: XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsOMPackage1.VTable, @ptrCast(self.vtable)).WriteToStream1(@as(*const IXpsOMPackage1, @ptrCast(self)), output_stream_, optimize_markup_size_, document_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsOMPage1_Value = Guid.initString("305b60ef-6892-4dda-9cbb-3aa65974508a");
pub const IID_IXpsOMPage1 = &IID_IXpsOMPage1_Value;
pub const IXpsOMPage1 = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPage.VTable,
        GetDocumentType: *const fn (
            self: *const IXpsOMPage1,
            document_type: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write1: *const fn (
            self: *const IXpsOMPage1,
            stream: ?*ISequentialStream,
            optimize_markup_size: BOOL,
            document_type: XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMPage.MethodMixin(T);
            pub inline fn getDocumentType(self: *const T, document_type_: ?*XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsOMPage1.VTable, @ptrCast(self.vtable)).GetDocumentType(@as(*const IXpsOMPage1, @ptrCast(self)), document_type_);
            }
            pub inline fn write1(self: *const T, stream_: ?*ISequentialStream, optimize_markup_size_: BOOL, document_type_: XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsOMPage1.VTable, @ptrCast(self.vtable)).Write1(@as(*const IXpsOMPage1, @ptrCast(self)), stream_, optimize_markup_size_, document_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsDocumentPackageTarget_Value = Guid.initString("3b0b6d38-53ad-41da-b212-d37637a6714e");
pub const IID_IXpsDocumentPackageTarget = &IID_IXpsDocumentPackageTarget_Value;
pub const IXpsDocumentPackageTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetXpsOMPackageWriter: *const fn (
            self: *const IXpsDocumentPackageTarget,
            document_sequence_part_name: ?*IOpcPartUri,
            discard_control_part_name: ?*IOpcPartUri,
            package_writer: ?*?*IXpsOMPackageWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXpsOMFactory: *const fn (
            self: *const IXpsDocumentPackageTarget,
            xps_factory: ?*?*IXpsOMObjectFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXpsType: *const fn (
            self: *const IXpsDocumentPackageTarget,
            document_type: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getXpsOMPackageWriter(self: *const T, document_sequence_part_name_: ?*IOpcPartUri, discard_control_part_name_: ?*IOpcPartUri, package_writer_: ?*?*IXpsOMPackageWriter) HRESULT {
                return @as(*const IXpsDocumentPackageTarget.VTable, @ptrCast(self.vtable)).GetXpsOMPackageWriter(@as(*const IXpsDocumentPackageTarget, @ptrCast(self)), document_sequence_part_name_, discard_control_part_name_, package_writer_);
            }
            pub inline fn getXpsOMFactory(self: *const T, xps_factory_: ?*?*IXpsOMObjectFactory) HRESULT {
                return @as(*const IXpsDocumentPackageTarget.VTable, @ptrCast(self.vtable)).GetXpsOMFactory(@as(*const IXpsDocumentPackageTarget, @ptrCast(self)), xps_factory_);
            }
            pub inline fn getXpsType(self: *const T, document_type_: ?*XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsDocumentPackageTarget.VTable, @ptrCast(self.vtable)).GetXpsType(@as(*const IXpsDocumentPackageTarget, @ptrCast(self)), document_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IXpsOMRemoteDictionaryResource1_Value = Guid.initString("bf8fc1d4-9d46-4141-ba5f-94bb9250d041");
pub const IID_IXpsOMRemoteDictionaryResource1 = &IID_IXpsOMRemoteDictionaryResource1_Value;
pub const IXpsOMRemoteDictionaryResource1 = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMRemoteDictionaryResource.VTable,
        GetDocumentType: *const fn (
            self: *const IXpsOMRemoteDictionaryResource1,
            document_type: ?*XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write1: *const fn (
            self: *const IXpsOMRemoteDictionaryResource1,
            stream: ?*ISequentialStream,
            document_type: XPS_DOCUMENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMRemoteDictionaryResource.MethodMixin(T);
            pub inline fn getDocumentType(self: *const T, document_type_: ?*XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResource1.VTable, @ptrCast(self.vtable)).GetDocumentType(@as(*const IXpsOMRemoteDictionaryResource1, @ptrCast(self)), document_type_);
            }
            pub inline fn write1(self: *const T, stream_: ?*ISequentialStream, document_type_: XPS_DOCUMENT_TYPE) HRESULT {
                return @as(*const IXpsOMRemoteDictionaryResource1.VTable, @ptrCast(self.vtable)).Write1(@as(*const IXpsOMRemoteDictionaryResource1, @ptrCast(self)), stream_, document_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IXpsOMPackageWriter3D_Value = Guid.initString("e8a45033-640e-43fa-9bdf-fddeaa31c6a0");
pub const IID_IXpsOMPackageWriter3D = &IID_IXpsOMPackageWriter3D_Value;
pub const IXpsOMPackageWriter3D = extern struct {
    pub const VTable = extern struct {
        base: IXpsOMPackageWriter.VTable,
        AddModelTexture: *const fn (
            self: *const IXpsOMPackageWriter3D,
            texture_part_name: ?*IOpcPartUri,
            texture_data: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModelPrintTicket: *const fn (
            self: *const IXpsOMPackageWriter3D,
            print_ticket_part_name: ?*IOpcPartUri,
            print_ticket_data: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXpsOMPackageWriter.MethodMixin(T);
            pub inline fn addModelTexture(self: *const T, texture_part_name_: ?*IOpcPartUri, texture_data_: ?*IStream) HRESULT {
                return @as(*const IXpsOMPackageWriter3D.VTable, @ptrCast(self.vtable)).AddModelTexture(@as(*const IXpsOMPackageWriter3D, @ptrCast(self)), texture_part_name_, texture_data_);
            }
            pub inline fn setModelPrintTicket(self: *const T, print_ticket_part_name_: ?*IOpcPartUri, print_ticket_data_: ?*IStream) HRESULT {
                return @as(*const IXpsOMPackageWriter3D.VTable, @ptrCast(self.vtable)).SetModelPrintTicket(@as(*const IXpsOMPackageWriter3D, @ptrCast(self)), print_ticket_part_name_, print_ticket_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IXpsDocumentPackageTarget3D_Value = Guid.initString("60ba71b8-3101-4984-9199-f4ea775ff01d");
pub const IID_IXpsDocumentPackageTarget3D = &IID_IXpsDocumentPackageTarget3D_Value;
pub const IXpsDocumentPackageTarget3D = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetXpsOMPackageWriter3D: *const fn (
            self: *const IXpsDocumentPackageTarget3D,
            document_sequence_part_name: ?*IOpcPartUri,
            discard_control_part_name: ?*IOpcPartUri,
            model_part_name: ?*IOpcPartUri,
            model_data: ?*IStream,
            package_writer: ?*?*IXpsOMPackageWriter3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXpsOMFactory: *const fn (
            self: *const IXpsDocumentPackageTarget3D,
            xps_factory: ?*?*IXpsOMObjectFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getXpsOMPackageWriter3D(self: *const T, document_sequence_part_name_: ?*IOpcPartUri, discard_control_part_name_: ?*IOpcPartUri, model_part_name_: ?*IOpcPartUri, model_data_: ?*IStream, package_writer_: ?*?*IXpsOMPackageWriter3D) HRESULT {
                return @as(*const IXpsDocumentPackageTarget3D.VTable, @ptrCast(self.vtable)).GetXpsOMPackageWriter3D(@as(*const IXpsDocumentPackageTarget3D, @ptrCast(self)), document_sequence_part_name_, discard_control_part_name_, model_part_name_, model_data_, package_writer_);
            }
            pub inline fn getXpsOMFactory(self: *const T, xps_factory_: ?*?*IXpsOMObjectFactory) HRESULT {
                return @as(*const IXpsDocumentPackageTarget3D.VTable, @ptrCast(self.vtable)).GetXpsOMFactory(@as(*const IXpsDocumentPackageTarget3D, @ptrCast(self)), xps_factory_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_XpsSignatureManager_Value = Guid.initString("b0c43320-2315-44a2-b70a-0943a140a8ee");
pub const CLSID_XpsSignatureManager = &CLSID_XpsSignatureManager_Value;

pub const XPS_SIGNATURE_STATUS = enum(i32) {
    INCOMPLIANT = 1,
    INCOMPLETE = 2,
    BROKEN = 3,
    QUESTIONABLE = 4,
    VALID = 5,
};
pub const XPS_SIGNATURE_STATUS_INCOMPLIANT = XPS_SIGNATURE_STATUS.INCOMPLIANT;
pub const XPS_SIGNATURE_STATUS_INCOMPLETE = XPS_SIGNATURE_STATUS.INCOMPLETE;
pub const XPS_SIGNATURE_STATUS_BROKEN = XPS_SIGNATURE_STATUS.BROKEN;
pub const XPS_SIGNATURE_STATUS_QUESTIONABLE = XPS_SIGNATURE_STATUS.QUESTIONABLE;
pub const XPS_SIGNATURE_STATUS_VALID = XPS_SIGNATURE_STATUS.VALID;

pub const XPS_SIGN_POLICY = enum(i32) {
    NONE = 0,
    CORE_PROPERTIES = 1,
    SIGNATURE_RELATIONSHIPS = 2,
    PRINT_TICKET = 4,
    DISCARD_CONTROL = 8,
    ALL = 15,
};
pub const XPS_SIGN_POLICY_NONE = XPS_SIGN_POLICY.NONE;
pub const XPS_SIGN_POLICY_CORE_PROPERTIES = XPS_SIGN_POLICY.CORE_PROPERTIES;
pub const XPS_SIGN_POLICY_SIGNATURE_RELATIONSHIPS = XPS_SIGN_POLICY.SIGNATURE_RELATIONSHIPS;
pub const XPS_SIGN_POLICY_PRINT_TICKET = XPS_SIGN_POLICY.PRINT_TICKET;
pub const XPS_SIGN_POLICY_DISCARD_CONTROL = XPS_SIGN_POLICY.DISCARD_CONTROL;
pub const XPS_SIGN_POLICY_ALL = XPS_SIGN_POLICY.ALL;

pub const XPS_SIGN_FLAGS = enum(i32) {
    NONE = 0,
    IGNORE_MARKUP_COMPATIBILITY = 1,
};
pub const XPS_SIGN_FLAGS_NONE = XPS_SIGN_FLAGS.NONE;
pub const XPS_SIGN_FLAGS_IGNORE_MARKUP_COMPATIBILITY = XPS_SIGN_FLAGS.IGNORE_MARKUP_COMPATIBILITY;

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSigningOptions_Value = Guid.initString("7718eae4-3215-49be-af5b-594fef7fcfa6");
pub const IID_IXpsSigningOptions = &IID_IXpsSigningOptions_Value;
pub const IXpsSigningOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSignatureId: *const fn (
            self: *const IXpsSigningOptions,
            signature_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureId: *const fn (
            self: *const IXpsSigningOptions,
            signature_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureMethod: *const fn (
            self: *const IXpsSigningOptions,
            signature_method: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureMethod: *const fn (
            self: *const IXpsSigningOptions,
            signature_method: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDigestMethod: *const fn (
            self: *const IXpsSigningOptions,
            digest_method: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDigestMethod: *const fn (
            self: *const IXpsSigningOptions,
            digest_method: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignaturePartName: *const fn (
            self: *const IXpsSigningOptions,
            signature_part_name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignaturePartName: *const fn (
            self: *const IXpsSigningOptions,
            signature_part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicy: *const fn (
            self: *const IXpsSigningOptions,
            policy: ?*XPS_SIGN_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPolicy: *const fn (
            self: *const IXpsSigningOptions,
            policy: XPS_SIGN_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningTimeFormat: *const fn (
            self: *const IXpsSigningOptions,
            time_format: ?*OPC_SIGNATURE_TIME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSigningTimeFormat: *const fn (
            self: *const IXpsSigningOptions,
            time_format: OPC_SIGNATURE_TIME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomObjects: *const fn (
            self: *const IXpsSigningOptions,
            custom_object_set: ?*?*IOpcSignatureCustomObjectSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomReferences: *const fn (
            self: *const IXpsSigningOptions,
            custom_reference_set: ?*?*IOpcSignatureReferenceSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateSet: *const fn (
            self: *const IXpsSigningOptions,
            certificate_set: ?*?*IOpcCertificateSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IXpsSigningOptions,
            flags: ?*XPS_SIGN_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn (
            self: *const IXpsSigningOptions,
            flags: XPS_SIGN_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSignatureId(self: *const T, signature_id_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetSignatureId(@as(*const IXpsSigningOptions, @ptrCast(self)), signature_id_);
            }
            pub inline fn setSignatureId(self: *const T, signature_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).SetSignatureId(@as(*const IXpsSigningOptions, @ptrCast(self)), signature_id_);
            }
            pub inline fn getSignatureMethod(self: *const T, signature_method_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetSignatureMethod(@as(*const IXpsSigningOptions, @ptrCast(self)), signature_method_);
            }
            pub inline fn setSignatureMethod(self: *const T, signature_method_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).SetSignatureMethod(@as(*const IXpsSigningOptions, @ptrCast(self)), signature_method_);
            }
            pub inline fn getDigestMethod(self: *const T, digest_method_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetDigestMethod(@as(*const IXpsSigningOptions, @ptrCast(self)), digest_method_);
            }
            pub inline fn setDigestMethod(self: *const T, digest_method_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).SetDigestMethod(@as(*const IXpsSigningOptions, @ptrCast(self)), digest_method_);
            }
            pub inline fn getSignaturePartName(self: *const T, signature_part_name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetSignaturePartName(@as(*const IXpsSigningOptions, @ptrCast(self)), signature_part_name_);
            }
            pub inline fn setSignaturePartName(self: *const T, signature_part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).SetSignaturePartName(@as(*const IXpsSigningOptions, @ptrCast(self)), signature_part_name_);
            }
            pub inline fn getPolicy(self: *const T, policy_: ?*XPS_SIGN_POLICY) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetPolicy(@as(*const IXpsSigningOptions, @ptrCast(self)), policy_);
            }
            pub inline fn setPolicy(self: *const T, policy_: XPS_SIGN_POLICY) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).SetPolicy(@as(*const IXpsSigningOptions, @ptrCast(self)), policy_);
            }
            pub inline fn getSigningTimeFormat(self: *const T, time_format_: ?*OPC_SIGNATURE_TIME_FORMAT) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetSigningTimeFormat(@as(*const IXpsSigningOptions, @ptrCast(self)), time_format_);
            }
            pub inline fn setSigningTimeFormat(self: *const T, time_format_: OPC_SIGNATURE_TIME_FORMAT) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).SetSigningTimeFormat(@as(*const IXpsSigningOptions, @ptrCast(self)), time_format_);
            }
            pub inline fn getCustomObjects(self: *const T, custom_object_set_: ?*?*IOpcSignatureCustomObjectSet) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetCustomObjects(@as(*const IXpsSigningOptions, @ptrCast(self)), custom_object_set_);
            }
            pub inline fn getCustomReferences(self: *const T, custom_reference_set_: ?*?*IOpcSignatureReferenceSet) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetCustomReferences(@as(*const IXpsSigningOptions, @ptrCast(self)), custom_reference_set_);
            }
            pub inline fn getCertificateSet(self: *const T, certificate_set_: ?*?*IOpcCertificateSet) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetCertificateSet(@as(*const IXpsSigningOptions, @ptrCast(self)), certificate_set_);
            }
            pub inline fn getFlags(self: *const T, flags_: ?*XPS_SIGN_FLAGS) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IXpsSigningOptions, @ptrCast(self)), flags_);
            }
            pub inline fn setFlags(self: *const T, flags_: XPS_SIGN_FLAGS) HRESULT {
                return @as(*const IXpsSigningOptions.VTable, @ptrCast(self.vtable)).SetFlags(@as(*const IXpsSigningOptions, @ptrCast(self)), flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureCollection_Value = Guid.initString("a2d1d95d-add2-4dff-ab27-6b9c645ff322");
pub const IID_IXpsSignatureCollection = &IID_IXpsSignatureCollection_Value;
pub const IXpsSignatureCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsSignatureCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsSignatureCollection,
            index: u32,
            signature: ?*?*IXpsSignature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsSignatureCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsSignatureCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsSignatureCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, signature_: ?*?*IXpsSignature) HRESULT {
                return @as(*const IXpsSignatureCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsSignatureCollection, @ptrCast(self)), index_, signature_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsSignatureCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsSignatureCollection, @ptrCast(self)), index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignature_Value = Guid.initString("6ae4c93e-1ade-42fb-898b-3a5658284857");
pub const IID_IXpsSignature = &IID_IXpsSignature_Value;
pub const IXpsSignature = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSignatureId: *const fn (
            self: *const IXpsSignature,
            sig_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureValue: *const fn (
            self: *const IXpsSignature,
            signature_hash_value: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateEnumerator: *const fn (
            self: *const IXpsSignature,
            certificate_enumerator: ?*?*IOpcCertificateEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningTime: *const fn (
            self: *const IXpsSignature,
            sig_date_time_string: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningTimeFormat: *const fn (
            self: *const IXpsSignature,
            time_format: ?*OPC_SIGNATURE_TIME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignaturePartName: *const fn (
            self: *const IXpsSignature,
            signature_part_name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Verify: *const fn (
            self: *const IXpsSignature,
            x509_certificate: ?*const CERT_CONTEXT,
            sig_status: ?*XPS_SIGNATURE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicy: *const fn (
            self: *const IXpsSignature,
            policy: ?*XPS_SIGN_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomObjectEnumerator: *const fn (
            self: *const IXpsSignature,
            custom_object_enumerator: ?*?*IOpcSignatureCustomObjectEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomReferenceEnumerator: *const fn (
            self: *const IXpsSignature,
            custom_reference_enumerator: ?*?*IOpcSignatureReferenceEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureXml: *const fn (
            self: *const IXpsSignature,
            signature_xml: [*]?*u8,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureXml: *const fn (
            self: *const IXpsSignature,
            signature_xml: [*:0]const u8,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSignatureId(self: *const T, sig_id_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetSignatureId(@as(*const IXpsSignature, @ptrCast(self)), sig_id_);
            }
            pub inline fn getSignatureValue(self: *const T, signature_hash_value_: [*]?*u8, count_: ?*u32) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetSignatureValue(@as(*const IXpsSignature, @ptrCast(self)), signature_hash_value_, count_);
            }
            pub inline fn getCertificateEnumerator(self: *const T, certificate_enumerator_: ?*?*IOpcCertificateEnumerator) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetCertificateEnumerator(@as(*const IXpsSignature, @ptrCast(self)), certificate_enumerator_);
            }
            pub inline fn getSigningTime(self: *const T, sig_date_time_string_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetSigningTime(@as(*const IXpsSignature, @ptrCast(self)), sig_date_time_string_);
            }
            pub inline fn getSigningTimeFormat(self: *const T, time_format_: ?*OPC_SIGNATURE_TIME_FORMAT) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetSigningTimeFormat(@as(*const IXpsSignature, @ptrCast(self)), time_format_);
            }
            pub inline fn getSignaturePartName(self: *const T, signature_part_name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetSignaturePartName(@as(*const IXpsSignature, @ptrCast(self)), signature_part_name_);
            }
            pub inline fn verify(self: *const T, x509_certificate_: ?*const CERT_CONTEXT, sig_status_: ?*XPS_SIGNATURE_STATUS) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).Verify(@as(*const IXpsSignature, @ptrCast(self)), x509_certificate_, sig_status_);
            }
            pub inline fn getPolicy(self: *const T, policy_: ?*XPS_SIGN_POLICY) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetPolicy(@as(*const IXpsSignature, @ptrCast(self)), policy_);
            }
            pub inline fn getCustomObjectEnumerator(self: *const T, custom_object_enumerator_: ?*?*IOpcSignatureCustomObjectEnumerator) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetCustomObjectEnumerator(@as(*const IXpsSignature, @ptrCast(self)), custom_object_enumerator_);
            }
            pub inline fn getCustomReferenceEnumerator(self: *const T, custom_reference_enumerator_: ?*?*IOpcSignatureReferenceEnumerator) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetCustomReferenceEnumerator(@as(*const IXpsSignature, @ptrCast(self)), custom_reference_enumerator_);
            }
            pub inline fn getSignatureXml(self: *const T, signature_xml_: [*]?*u8, count_: ?*u32) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).GetSignatureXml(@as(*const IXpsSignature, @ptrCast(self)), signature_xml_, count_);
            }
            pub inline fn setSignatureXml(self: *const T, signature_xml_: [*:0]const u8, count_: u32) HRESULT {
                return @as(*const IXpsSignature.VTable, @ptrCast(self.vtable)).SetSignatureXml(@as(*const IXpsSignature, @ptrCast(self)), signature_xml_, count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureBlockCollection_Value = Guid.initString("23397050-fe99-467a-8dce-9237f074ffe4");
pub const IID_IXpsSignatureBlockCollection = &IID_IXpsSignatureBlockCollection_Value;
pub const IXpsSignatureBlockCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsSignatureBlockCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsSignatureBlockCollection,
            index: u32,
            signature_block: ?*?*IXpsSignatureBlock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsSignatureBlockCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsSignatureBlockCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsSignatureBlockCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, signature_block_: ?*?*IXpsSignatureBlock) HRESULT {
                return @as(*const IXpsSignatureBlockCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsSignatureBlockCollection, @ptrCast(self)), index_, signature_block_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsSignatureBlockCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsSignatureBlockCollection, @ptrCast(self)), index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureBlock_Value = Guid.initString("151fac09-0b97-4ac6-a323-5e4297d4322b");
pub const IID_IXpsSignatureBlock = &IID_IXpsSignatureBlock_Value;
pub const IXpsSignatureBlock = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRequests: *const fn (
            self: *const IXpsSignatureBlock,
            requests: ?*?*IXpsSignatureRequestCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartName: *const fn (
            self: *const IXpsSignatureBlock,
            part_name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentIndex: *const fn (
            self: *const IXpsSignatureBlock,
            fixed_document_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDocumentName: *const fn (
            self: *const IXpsSignatureBlock,
            fixed_document_name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRequest: *const fn (
            self: *const IXpsSignatureBlock,
            request_id: ?[*:0]const u16,
            signature_request: ?*?*IXpsSignatureRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRequests(self: *const T, requests_: ?*?*IXpsSignatureRequestCollection) HRESULT {
                return @as(*const IXpsSignatureBlock.VTable, @ptrCast(self.vtable)).GetRequests(@as(*const IXpsSignatureBlock, @ptrCast(self)), requests_);
            }
            pub inline fn getPartName(self: *const T, part_name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IXpsSignatureBlock.VTable, @ptrCast(self.vtable)).GetPartName(@as(*const IXpsSignatureBlock, @ptrCast(self)), part_name_);
            }
            pub inline fn getDocumentIndex(self: *const T, fixed_document_index_: ?*u32) HRESULT {
                return @as(*const IXpsSignatureBlock.VTable, @ptrCast(self.vtable)).GetDocumentIndex(@as(*const IXpsSignatureBlock, @ptrCast(self)), fixed_document_index_);
            }
            pub inline fn getDocumentName(self: *const T, fixed_document_name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IXpsSignatureBlock.VTable, @ptrCast(self.vtable)).GetDocumentName(@as(*const IXpsSignatureBlock, @ptrCast(self)), fixed_document_name_);
            }
            pub inline fn createRequest(self: *const T, request_id_: ?[*:0]const u16, signature_request_: ?*?*IXpsSignatureRequest) HRESULT {
                return @as(*const IXpsSignatureBlock.VTable, @ptrCast(self.vtable)).CreateRequest(@as(*const IXpsSignatureBlock, @ptrCast(self)), request_id_, signature_request_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureRequestCollection_Value = Guid.initString("f0253e68-9f19-412e-9b4f-54d3b0ac6cd9");
pub const IID_IXpsSignatureRequestCollection = &IID_IXpsSignatureRequestCollection_Value;
pub const IXpsSignatureRequestCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IXpsSignatureRequestCollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IXpsSignatureRequestCollection,
            index: u32,
            signature_request: ?*?*IXpsSignatureRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IXpsSignatureRequestCollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IXpsSignatureRequestCollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IXpsSignatureRequestCollection, @ptrCast(self)), count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, signature_request_: ?*?*IXpsSignatureRequest) HRESULT {
                return @as(*const IXpsSignatureRequestCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IXpsSignatureRequestCollection, @ptrCast(self)), index_, signature_request_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IXpsSignatureRequestCollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IXpsSignatureRequestCollection, @ptrCast(self)), index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureRequest_Value = Guid.initString("ac58950b-7208-4b2d-b2c4-951083d3b8eb");
pub const IID_IXpsSignatureRequest = &IID_IXpsSignatureRequest_Value;
pub const IXpsSignatureRequest = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIntent: *const fn (
            self: *const IXpsSignatureRequest,
            intent: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIntent: *const fn (
            self: *const IXpsSignatureRequest,
            intent: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestedSigner: *const fn (
            self: *const IXpsSignatureRequest,
            signer_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRequestedSigner: *const fn (
            self: *const IXpsSignatureRequest,
            signer_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestSignByDate: *const fn (
            self: *const IXpsSignatureRequest,
            date_string: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRequestSignByDate: *const fn (
            self: *const IXpsSignatureRequest,
            date_string: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningLocale: *const fn (
            self: *const IXpsSignatureRequest,
            place: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSigningLocale: *const fn (
            self: *const IXpsSignatureRequest,
            place: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpotLocation: *const fn (
            self: *const IXpsSignatureRequest,
            page_index: ?*i32,
            page_part_name: ?*?*IOpcPartUri,
            x: ?*f32,
            y: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpotLocation: *const fn (
            self: *const IXpsSignatureRequest,
            page_index: i32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestId: *const fn (
            self: *const IXpsSignatureRequest,
            request_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignature: *const fn (
            self: *const IXpsSignatureRequest,
            signature: ?*?*IXpsSignature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIntent(self: *const T, intent_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).GetIntent(@as(*const IXpsSignatureRequest, @ptrCast(self)), intent_);
            }
            pub inline fn setIntent(self: *const T, intent_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).SetIntent(@as(*const IXpsSignatureRequest, @ptrCast(self)), intent_);
            }
            pub inline fn getRequestedSigner(self: *const T, signer_name_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).GetRequestedSigner(@as(*const IXpsSignatureRequest, @ptrCast(self)), signer_name_);
            }
            pub inline fn setRequestedSigner(self: *const T, signer_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).SetRequestedSigner(@as(*const IXpsSignatureRequest, @ptrCast(self)), signer_name_);
            }
            pub inline fn getRequestSignByDate(self: *const T, date_string_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).GetRequestSignByDate(@as(*const IXpsSignatureRequest, @ptrCast(self)), date_string_);
            }
            pub inline fn setRequestSignByDate(self: *const T, date_string_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).SetRequestSignByDate(@as(*const IXpsSignatureRequest, @ptrCast(self)), date_string_);
            }
            pub inline fn getSigningLocale(self: *const T, place_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).GetSigningLocale(@as(*const IXpsSignatureRequest, @ptrCast(self)), place_);
            }
            pub inline fn setSigningLocale(self: *const T, place_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).SetSigningLocale(@as(*const IXpsSignatureRequest, @ptrCast(self)), place_);
            }
            pub inline fn getSpotLocation(self: *const T, page_index_: ?*i32, page_part_name_: ?*?*IOpcPartUri, x_: ?*f32, y_: ?*f32) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).GetSpotLocation(@as(*const IXpsSignatureRequest, @ptrCast(self)), page_index_, page_part_name_, x_, y_);
            }
            pub inline fn setSpotLocation(self: *const T, page_index_: i32, x_: f32, y_: f32) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).SetSpotLocation(@as(*const IXpsSignatureRequest, @ptrCast(self)), page_index_, x_, y_);
            }
            pub inline fn getRequestId(self: *const T, request_id_: ?*?PWSTR) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).GetRequestId(@as(*const IXpsSignatureRequest, @ptrCast(self)), request_id_);
            }
            pub inline fn getSignature(self: *const T, signature_: ?*?*IXpsSignature) HRESULT {
                return @as(*const IXpsSignatureRequest.VTable, @ptrCast(self.vtable)).GetSignature(@as(*const IXpsSignatureRequest, @ptrCast(self)), signature_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IXpsSignatureManager_Value = Guid.initString("d3e8d338-fdc4-4afc-80b5-d532a1782ee1");
pub const IID_IXpsSignatureManager = &IID_IXpsSignatureManager_Value;
pub const IXpsSignatureManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadPackageFile: *const fn (
            self: *const IXpsSignatureManager,
            file_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadPackageStream: *const fn (
            self: *const IXpsSignatureManager,
            stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Sign: *const fn (
            self: *const IXpsSignatureManager,
            sign_options: ?*IXpsSigningOptions,
            x509_certificate: ?*const CERT_CONTEXT,
            signature: ?*?*IXpsSignature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureOriginPartName: *const fn (
            self: *const IXpsSignatureManager,
            signature_origin_part_name: ?*?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignatureOriginPartName: *const fn (
            self: *const IXpsSignatureManager,
            signature_origin_part_name: ?*IOpcPartUri,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatures: *const fn (
            self: *const IXpsSignatureManager,
            signatures: ?*?*IXpsSignatureCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSignatureBlock: *const fn (
            self: *const IXpsSignatureManager,
            part_name: ?*IOpcPartUri,
            fixed_document_index: u32,
            signature_block: ?*?*IXpsSignatureBlock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureBlocks: *const fn (
            self: *const IXpsSignatureManager,
            signature_blocks: ?*?*IXpsSignatureBlockCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSigningOptions: *const fn (
            self: *const IXpsSignatureManager,
            signing_options: ?*?*IXpsSigningOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SavePackageToFile: *const fn (
            self: *const IXpsSignatureManager,
            file_name: ?[*:0]const u16,
            security_attributes: ?*SECURITY_ATTRIBUTES,
            flags_and_attributes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SavePackageToStream: *const fn (
            self: *const IXpsSignatureManager,
            stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn loadPackageFile(self: *const T, file_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).LoadPackageFile(@as(*const IXpsSignatureManager, @ptrCast(self)), file_name_);
            }
            pub inline fn loadPackageStream(self: *const T, stream_: ?*IStream) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).LoadPackageStream(@as(*const IXpsSignatureManager, @ptrCast(self)), stream_);
            }
            pub inline fn sign(self: *const T, sign_options_: ?*IXpsSigningOptions, x509_certificate_: ?*const CERT_CONTEXT, signature_: ?*?*IXpsSignature) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).Sign(@as(*const IXpsSignatureManager, @ptrCast(self)), sign_options_, x509_certificate_, signature_);
            }
            pub inline fn getSignatureOriginPartName(self: *const T, signature_origin_part_name_: ?*?*IOpcPartUri) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).GetSignatureOriginPartName(@as(*const IXpsSignatureManager, @ptrCast(self)), signature_origin_part_name_);
            }
            pub inline fn setSignatureOriginPartName(self: *const T, signature_origin_part_name_: ?*IOpcPartUri) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).SetSignatureOriginPartName(@as(*const IXpsSignatureManager, @ptrCast(self)), signature_origin_part_name_);
            }
            pub inline fn getSignatures(self: *const T, signatures_: ?*?*IXpsSignatureCollection) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).GetSignatures(@as(*const IXpsSignatureManager, @ptrCast(self)), signatures_);
            }
            pub inline fn addSignatureBlock(self: *const T, part_name_: ?*IOpcPartUri, fixed_document_index_: u32, signature_block_: ?*?*IXpsSignatureBlock) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).AddSignatureBlock(@as(*const IXpsSignatureManager, @ptrCast(self)), part_name_, fixed_document_index_, signature_block_);
            }
            pub inline fn getSignatureBlocks(self: *const T, signature_blocks_: ?*?*IXpsSignatureBlockCollection) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).GetSignatureBlocks(@as(*const IXpsSignatureManager, @ptrCast(self)), signature_blocks_);
            }
            pub inline fn createSigningOptions(self: *const T, signing_options_: ?*?*IXpsSigningOptions) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).CreateSigningOptions(@as(*const IXpsSignatureManager, @ptrCast(self)), signing_options_);
            }
            pub inline fn savePackageToFile(self: *const T, file_name_: ?[*:0]const u16, security_attributes_: ?*SECURITY_ATTRIBUTES, flags_and_attributes_: u32) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).SavePackageToFile(@as(*const IXpsSignatureManager, @ptrCast(self)), file_name_, security_attributes_, flags_and_attributes_);
            }
            pub inline fn savePackageToStream(self: *const T, stream_: ?*IStream) HRESULT {
                return @as(*const IXpsSignatureManager.VTable, @ptrCast(self.vtable)).SavePackageToStream(@as(*const IXpsSignatureManager, @ptrCast(self)), stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (12)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "winspool.drv" fn DeviceCapabilitiesA(
    p_device: ?[*:0]const u8,
    p_port: ?[*:0]const u8,
    fw_capability: DEVICE_CAPABILITIES,
    p_output: ?PSTR,
    p_dev_mode: ?*const DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "winspool.drv" fn DeviceCapabilitiesW(
    p_device: ?[*:0]const u16,
    p_port: ?[*:0]const u16,
    fw_capability: DEVICE_CAPABILITIES,
    p_output: ?PWSTR,
    p_dev_mode: ?*const DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn Escape(
    hdc: ?HDC,
    i_escape: i32,
    cj_in: i32,
    // TODO: what to do with BytesParamIndex 2?
    pv_in: ?[*:0]const u8,
    pv_out: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn ExtEscape(
    hdc: ?HDC,
    i_escape: i32,
    cj_input: i32,
    // TODO: what to do with BytesParamIndex 2?
    lp_in_data: ?[*:0]const u8,
    cj_output: i32,
    // TODO: what to do with BytesParamIndex 4?
    lp_out_data: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn StartDocA(
    hdc: ?HDC,
    lpdi: ?*const DOCINFOA,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn StartDocW(
    hdc: ?HDC,
    lpdi: ?*const DOCINFOW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn EndDoc(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn StartPage(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn EndPage(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn AbortDoc(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn SetAbortProc(
    hdc: ?HDC,
    proc: ?ABORTPROC,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn PrintWindow(
    hwnd: ?HWND,
    hdc_blt: ?HDC,
    n_flags: PRINT_WINDOW_FLAGS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (3)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const DOCINFO = thismodule.DOCINFOA;
        pub const DeviceCapabilities = thismodule.DeviceCapabilitiesA;
        pub const StartDoc = thismodule.StartDocA;
    },
    .wide => struct {
        pub const DOCINFO = thismodule.DOCINFOW;
        pub const DeviceCapabilities = thismodule.DeviceCapabilitiesW;
        pub const StartDoc = thismodule.StartDocW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const DOCINFO = *opaque {};
        pub const DeviceCapabilities = *opaque {};
        pub const StartDoc = *opaque {};
    } else struct {
        pub const DOCINFO = @compileError("'DOCINFO' requires that UNICODE be set to true or false in the root module");
        pub const DeviceCapabilities = @compileError("'DeviceCapabilities' requires that UNICODE be set to true or false in the root module");
        pub const StartDoc = @compileError("'StartDoc' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (25)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const CERT_CONTEXT = @import("../security/cryptography.zig").CERT_CONTEXT;
const DEVMODEA = @import("../graphics/gdi.zig").DEVMODEA;
const DEVMODEW = @import("../graphics/gdi.zig").DEVMODEW;
const HDC = @import("../graphics/gdi.zig").HDC;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IOpcCertificateEnumerator = @import("../storage/packaging/opc.zig").IOpcCertificateEnumerator;
const IOpcCertificateSet = @import("../storage/packaging/opc.zig").IOpcCertificateSet;
const IOpcPartUri = @import("../storage/packaging/opc.zig").IOpcPartUri;
const IOpcSignatureCustomObjectEnumerator = @import("../storage/packaging/opc.zig").IOpcSignatureCustomObjectEnumerator;
const IOpcSignatureCustomObjectSet = @import("../storage/packaging/opc.zig").IOpcSignatureCustomObjectSet;
const IOpcSignatureReferenceEnumerator = @import("../storage/packaging/opc.zig").IOpcSignatureReferenceEnumerator;
const IOpcSignatureReferenceSet = @import("../storage/packaging/opc.zig").IOpcSignatureReferenceSet;
const ISequentialStream = @import("../system/com.zig").ISequentialStream;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const IUri = @import("../system/com.zig").IUri;
const OPC_SIGNATURE_TIME_FORMAT = @import("../storage/packaging/opc.zig").OPC_SIGNATURE_TIME_FORMAT;
const POINT = @import("../foundation.zig").POINT;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "ABORTPROC")) {
        _ = ABORTPROC;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (1)
//--------------------------------------------------------------------------------
pub const printing = @import("xps/printing.zig");
