//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (151)
//--------------------------------------------------------------------------------
pub const FSRM_DISPID_FEATURE_MASK = @as(u32, 251658240);
pub const FSRM_DISPID_INTERFACE_A_MASK = @as(u32, 15728640);
pub const FSRM_DISPID_INTERFACE_B_MASK = @as(u32, 983040);
pub const FSRM_DISPID_INTERFACE_C_MASK = @as(u32, 61440);
pub const FSRM_DISPID_INTERFACE_D_MASK = @as(u32, 3840);
pub const FSRM_DISPID_IS_PROPERTY = @as(u32, 128);
pub const FSRM_DISPID_METHOD_NUM_MASK = @as(u32, 127);
pub const FSRM_DISPID_FEATURE_GENERAL = @as(u32, 16777216);
pub const FSRM_DISPID_FEATURE_QUOTA = @as(u32, 33554432);
pub const FSRM_DISPID_FEATURE_FILESCREEN = @as(u32, 50331648);
pub const FSRM_DISPID_FEATURE_REPORTS = @as(u32, 67108864);
pub const FSRM_DISPID_FEATURE_CLASSIFICATION = @as(u32, 83886080);
pub const FSRM_DISPID_FEATURE_PIPELINE = @as(u32, 100663296);
pub const FsrmMaxNumberThresholds = @as(u32, 16);
pub const FsrmMinThresholdValue = @as(u32, 1);
pub const FsrmMaxThresholdValue = @as(u32, 250);
pub const FsrmMinQuotaLimit = @as(u32, 1024);
pub const FsrmMaxExcludeFolders = @as(u32, 32);
pub const FsrmMaxNumberPropertyDefinitions = @as(u32, 100);
pub const MessageSizeLimit = @as(u32, 4096);
pub const FsrmDaysNotSpecified = @as(i32, -1);
pub const FSRM_S_PARTIAL_BATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, 283396));
pub const FSRM_S_PARTIAL_CLASSIFICATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, 283397));
pub const FSRM_S_CLASSIFICATION_SCAN_FAILURES = @import("../zig.zig").typedConst(HRESULT, @as(i32, 283398));
pub const FSRM_E_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200255));
pub const FSRM_E_INVALID_SCHEDULER_ARGUMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200254));
pub const FSRM_E_ALREADY_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200253));
pub const FSRM_E_PATH_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200252));
pub const FSRM_E_INVALID_USER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200251));
pub const FSRM_E_INVALID_PATH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200250));
pub const FSRM_E_INVALID_LIMIT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200249));
pub const FSRM_E_INVALID_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200248));
pub const FSRM_E_FAIL_BATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200247));
pub const FSRM_E_INVALID_TEXT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200246));
pub const FSRM_E_INVALID_IMPORT_VERSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200245));
pub const FSRM_E_OUT_OF_RANGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200243));
pub const FSRM_E_REQD_PARAM_MISSING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200242));
pub const FSRM_E_INVALID_COMBINATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200241));
pub const FSRM_E_DUPLICATE_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200240));
pub const FSRM_E_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200239));
pub const FSRM_E_DRIVER_NOT_READY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200237));
pub const FSRM_E_INSUFFICIENT_DISK = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200236));
pub const FSRM_E_VOLUME_UNSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200235));
pub const FSRM_E_UNEXPECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200234));
pub const FSRM_E_INSECURE_PATH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200233));
pub const FSRM_E_INVALID_SMTP_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200232));
pub const FSRM_E_AUTO_QUOTA = @import("../zig.zig").typedConst(HRESULT, @as(i32, 283419));
pub const FSRM_E_EMAIL_NOT_SENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200228));
pub const FSRM_E_INVALID_EMAIL_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200226));
pub const FSRM_E_FILE_SYSTEM_CORRUPT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200225));
pub const FSRM_E_LONG_CMDLINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200224));
pub const FSRM_E_INVALID_FILEGROUP_DEFINITION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200223));
pub const FSRM_E_INVALID_DATASCREEN_DEFINITION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200220));
pub const FSRM_E_INVALID_REPORT_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200216));
pub const FSRM_E_INVALID_REPORT_DESC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200215));
pub const FSRM_E_INVALID_FILENAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200214));
pub const FSRM_E_SHADOW_COPY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200212));
pub const FSRM_E_XML_CORRUPTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200211));
pub const FSRM_E_CLUSTER_NOT_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200210));
pub const FSRM_E_STORE_NOT_INSTALLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200209));
pub const FSRM_E_NOT_CLUSTER_VOLUME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200208));
pub const FSRM_E_DIFFERENT_CLUSTER_GROUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200207));
pub const FSRM_E_REPORT_TYPE_ALREADY_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200206));
pub const FSRM_E_REPORT_JOB_ALREADY_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200205));
pub const FSRM_E_REPORT_GENERATION_ERR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200204));
pub const FSRM_E_REPORT_TASK_TRIGGER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200203));
pub const FSRM_E_LOADING_DISABLED_MODULE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200202));
pub const FSRM_E_CANNOT_AGGREGATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200201));
pub const FSRM_E_MESSAGE_LIMIT_EXCEEDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200200));
pub const FSRM_E_OBJECT_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200199));
pub const FSRM_E_CANNOT_RENAME_PROPERTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200198));
pub const FSRM_E_CANNOT_CHANGE_PROPERTY_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200197));
pub const FSRM_E_MAX_PROPERTY_DEFINITIONS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200196));
pub const FSRM_E_CLASSIFICATION_ALREADY_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200195));
pub const FSRM_E_CLASSIFICATION_NOT_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200194));
pub const FSRM_E_FILE_MANAGEMENT_JOB_ALREADY_RUNNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200193));
pub const FSRM_E_FILE_MANAGEMENT_JOB_EXPIRATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200192));
pub const FSRM_E_FILE_MANAGEMENT_JOB_CUSTOM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200191));
pub const FSRM_E_FILE_MANAGEMENT_JOB_NOTIFICATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200190));
pub const FSRM_E_FILE_OPEN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200189));
pub const FSRM_E_UNSECURE_LINK_TO_HOSTED_MODULE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200188));
pub const FSRM_E_CACHE_INVALID = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200187));
pub const FSRM_E_CACHE_MODULE_ALREADY_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200186));
pub const FSRM_E_FILE_MANAGEMENT_EXPIRATION_DIR_IN_SCOPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200185));
pub const FSRM_E_FILE_MANAGEMENT_JOB_ALREADY_EXISTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200184));
pub const FSRM_E_PROPERTY_DELETED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200183));
pub const FSRM_E_LAST_ACCESS_UPDATE_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200176));
pub const FSRM_E_NO_PROPERTY_VALUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200175));
pub const FSRM_E_INPROC_MODULE_BLOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200174));
pub const FSRM_E_ENUM_PROPERTIES_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200173));
pub const FSRM_E_SET_PROPERTY_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200172));
pub const FSRM_E_CANNOT_STORE_PROPERTIES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200171));
pub const FSRM_E_CANNOT_ALLOW_REPARSE_POINT_TAG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200170));
pub const FSRM_E_PARTIAL_CLASSIFICATION_PROPERTY_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200169));
pub const FSRM_E_TEXTREADER_NOT_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200168));
pub const FSRM_E_TEXTREADER_IFILTER_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200167));
pub const FSRM_E_PERSIST_PROPERTIES_FAILED_ENCRYPTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200166));
pub const FSRM_E_TEXTREADER_IFILTER_CLSID_MALFORMED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200160));
pub const FSRM_E_TEXTREADER_STREAM_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200159));
pub const FSRM_E_TEXTREADER_FILENAME_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200158));
pub const FSRM_E_INCOMPATIBLE_FORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200157));
pub const FSRM_E_FILE_ENCRYPTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200156));
pub const FSRM_E_PERSIST_PROPERTIES_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200155));
pub const FSRM_E_VOLUME_OFFLINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200154));
pub const FSRM_E_FILE_MANAGEMENT_ACTION_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200153));
pub const FSRM_E_FILE_MANAGEMENT_ACTION_GET_EXITCODE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200152));
pub const FSRM_E_MODULE_INVALID_PARAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200151));
pub const FSRM_E_MODULE_INITIALIZATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200150));
pub const FSRM_E_MODULE_SESSION_INITIALIZATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200149));
pub const FSRM_E_CLASSIFICATION_SCAN_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200148));
pub const FSRM_E_FILE_MANAGEMENT_JOB_NOT_LEGACY_ACCESSIBLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200147));
pub const FSRM_E_FILE_MANAGEMENT_JOB_MAX_FILE_CONDITIONS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200146));
pub const FSRM_E_CANNOT_USE_DEPRECATED_PROPERTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200145));
pub const FSRM_E_SYNC_TASK_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200144));
pub const FSRM_E_CANNOT_USE_DELETED_PROPERTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200143));
pub const FSRM_E_INVALID_AD_CLAIM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200142));
pub const FSRM_E_CLASSIFICATION_CANCELED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200141));
pub const FSRM_E_INVALID_FOLDER_PROPERTY_STORE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200140));
pub const FSRM_E_REBUILDING_FODLER_TYPE_INDEX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200139));
pub const FSRM_E_PROPERTY_MUST_APPLY_TO_FILES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200138));
pub const FSRM_E_CLASSIFICATION_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200137));
pub const FSRM_E_CLASSIFICATION_PARTIAL_BATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200136));
pub const FSRM_E_CANNOT_DELETE_SYSTEM_PROPERTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200135));
pub const FSRM_E_FILE_IN_USE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200134));
pub const FSRM_E_ERROR_NOT_ENABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200133));
pub const FSRM_E_CANNOT_CREATE_TEMP_COPY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200132));
pub const FSRM_E_NO_EMAIL_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200131));
pub const FSRM_E_ADR_MAX_EMAILS_SENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200130));
pub const FSRM_E_PATH_NOT_IN_NAMESPACE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200129));
pub const FSRM_E_RMS_TEMPLATE_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200128));
pub const FSRM_E_SECURE_PROPERTIES_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200127));
pub const FSRM_E_RMS_NO_PROTECTORS_INSTALLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200126));
pub const FSRM_E_RMS_NO_PROTECTOR_INSTALLED_FOR_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200125));
pub const FSRM_E_PROPERTY_MUST_APPLY_TO_FOLDERS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200124));
pub const FSRM_E_PROPERTY_MUST_BE_SECURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200123));
pub const FSRM_E_PROPERTY_MUST_BE_GLOBAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200122));
pub const FSRM_E_WMI_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200121));
pub const FSRM_E_FILE_MANAGEMENT_JOB_RMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200120));
pub const FSRM_E_SYNC_TASK_HAD_ERRORS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200119));
pub const FSRM_E_ADR_SRV_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200112));
pub const FSRM_E_ADR_PATH_IS_LOCAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200111));
pub const FSRM_E_ADR_NOT_DOMAIN_JOINED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200110));
pub const FSRM_E_CANNOT_REMOVE_READONLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200109));
pub const FSRM_E_FILE_MANAGEMENT_JOB_INVALID_CONTINUOUS_CONFIG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200108));
pub const FSRM_E_LEGACY_SCHEDULE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200107));
pub const FSRM_E_CSC_PATH_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200106));
pub const FSRM_E_EXPIRATION_PATH_NOT_WRITEABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200105));
pub const FSRM_E_EXPIRATION_PATH_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200104));
pub const FSRM_E_EXPIRATION_VOLUME_NOT_NTFS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200103));
pub const FSRM_E_FILE_MANAGEMENT_JOB_DEPRECATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200102));
pub const FSRM_E_MODULE_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147200101));

//--------------------------------------------------------------------------------
// Section: Types (117)
//--------------------------------------------------------------------------------
pub const FsrmQuotaFlags = enum(i32) {
    Enforce = 256,
    Disable = 512,
    StatusIncomplete = 65536,
    StatusRebuilding = 131072,
};
pub const FsrmQuotaFlags_Enforce = FsrmQuotaFlags.Enforce;
pub const FsrmQuotaFlags_Disable = FsrmQuotaFlags.Disable;
pub const FsrmQuotaFlags_StatusIncomplete = FsrmQuotaFlags.StatusIncomplete;
pub const FsrmQuotaFlags_StatusRebuilding = FsrmQuotaFlags.StatusRebuilding;

pub const FsrmFileScreenFlags = enum(i32) {
    e = 1,
};
pub const FsrmFileScreenFlags_Enforce = FsrmFileScreenFlags.e;

pub const FsrmCollectionState = enum(i32) {
    Fetching = 1,
    Committing = 2,
    Complete = 3,
    Cancelled = 4,
};
pub const FsrmCollectionState_Fetching = FsrmCollectionState.Fetching;
pub const FsrmCollectionState_Committing = FsrmCollectionState.Committing;
pub const FsrmCollectionState_Complete = FsrmCollectionState.Complete;
pub const FsrmCollectionState_Cancelled = FsrmCollectionState.Cancelled;

pub const FsrmEnumOptions = enum(i32) {
    None = 0,
    Asynchronous = 1,
    CheckRecycleBin = 2,
    IncludeClusterNodes = 4,
    IncludeDeprecatedObjects = 8,
};
pub const FsrmEnumOptions_None = FsrmEnumOptions.None;
pub const FsrmEnumOptions_Asynchronous = FsrmEnumOptions.Asynchronous;
pub const FsrmEnumOptions_CheckRecycleBin = FsrmEnumOptions.CheckRecycleBin;
pub const FsrmEnumOptions_IncludeClusterNodes = FsrmEnumOptions.IncludeClusterNodes;
pub const FsrmEnumOptions_IncludeDeprecatedObjects = FsrmEnumOptions.IncludeDeprecatedObjects;

pub const FsrmCommitOptions = enum(i32) {
    None = 0,
    Asynchronous = 1,
};
pub const FsrmCommitOptions_None = FsrmCommitOptions.None;
pub const FsrmCommitOptions_Asynchronous = FsrmCommitOptions.Asynchronous;

pub const FsrmTemplateApplyOptions = enum(i32) {
    Matching = 1,
    All = 2,
};
pub const FsrmTemplateApplyOptions_ApplyToDerivedMatching = FsrmTemplateApplyOptions.Matching;
pub const FsrmTemplateApplyOptions_ApplyToDerivedAll = FsrmTemplateApplyOptions.All;

pub const FsrmActionType = enum(i32) {
    Unknown = 0,
    EventLog = 1,
    Email = 2,
    Command = 3,
    Report = 4,
};
pub const FsrmActionType_Unknown = FsrmActionType.Unknown;
pub const FsrmActionType_EventLog = FsrmActionType.EventLog;
pub const FsrmActionType_Email = FsrmActionType.Email;
pub const FsrmActionType_Command = FsrmActionType.Command;
pub const FsrmActionType_Report = FsrmActionType.Report;

pub const FsrmEventType = enum(i32) {
    Unknown = 0,
    Information = 1,
    Warning = 2,
    Error = 3,
};
pub const FsrmEventType_Unknown = FsrmEventType.Unknown;
pub const FsrmEventType_Information = FsrmEventType.Information;
pub const FsrmEventType_Warning = FsrmEventType.Warning;
pub const FsrmEventType_Error = FsrmEventType.Error;

pub const FsrmAccountType = enum(i32) {
    Unknown = 0,
    NetworkService = 1,
    LocalService = 2,
    LocalSystem = 3,
    InProc = 4,
    External = 5,
    Automatic = 500,
};
pub const FsrmAccountType_Unknown = FsrmAccountType.Unknown;
pub const FsrmAccountType_NetworkService = FsrmAccountType.NetworkService;
pub const FsrmAccountType_LocalService = FsrmAccountType.LocalService;
pub const FsrmAccountType_LocalSystem = FsrmAccountType.LocalSystem;
pub const FsrmAccountType_InProc = FsrmAccountType.InProc;
pub const FsrmAccountType_External = FsrmAccountType.External;
pub const FsrmAccountType_Automatic = FsrmAccountType.Automatic;

pub const FsrmReportType = enum(i32) {
    Unknown = 0,
    LargeFiles = 1,
    FilesByType = 2,
    LeastRecentlyAccessed = 3,
    MostRecentlyAccessed = 4,
    QuotaUsage = 5,
    FilesByOwner = 6,
    ExportReport = 7,
    DuplicateFiles = 8,
    FileScreenAudit = 9,
    FilesByProperty = 10,
    AutomaticClassification = 11,
    Expiration = 12,
    FoldersByProperty = 13,
};
pub const FsrmReportType_Unknown = FsrmReportType.Unknown;
pub const FsrmReportType_LargeFiles = FsrmReportType.LargeFiles;
pub const FsrmReportType_FilesByType = FsrmReportType.FilesByType;
pub const FsrmReportType_LeastRecentlyAccessed = FsrmReportType.LeastRecentlyAccessed;
pub const FsrmReportType_MostRecentlyAccessed = FsrmReportType.MostRecentlyAccessed;
pub const FsrmReportType_QuotaUsage = FsrmReportType.QuotaUsage;
pub const FsrmReportType_FilesByOwner = FsrmReportType.FilesByOwner;
pub const FsrmReportType_ExportReport = FsrmReportType.ExportReport;
pub const FsrmReportType_DuplicateFiles = FsrmReportType.DuplicateFiles;
pub const FsrmReportType_FileScreenAudit = FsrmReportType.FileScreenAudit;
pub const FsrmReportType_FilesByProperty = FsrmReportType.FilesByProperty;
pub const FsrmReportType_AutomaticClassification = FsrmReportType.AutomaticClassification;
pub const FsrmReportType_Expiration = FsrmReportType.Expiration;
pub const FsrmReportType_FoldersByProperty = FsrmReportType.FoldersByProperty;

pub const FsrmReportFormat = enum(i32) {
    Unknown = 0,
    DHtml = 1,
    Html = 2,
    Txt = 3,
    Csv = 4,
    Xml = 5,
};
pub const FsrmReportFormat_Unknown = FsrmReportFormat.Unknown;
pub const FsrmReportFormat_DHtml = FsrmReportFormat.DHtml;
pub const FsrmReportFormat_Html = FsrmReportFormat.Html;
pub const FsrmReportFormat_Txt = FsrmReportFormat.Txt;
pub const FsrmReportFormat_Csv = FsrmReportFormat.Csv;
pub const FsrmReportFormat_Xml = FsrmReportFormat.Xml;

pub const FsrmReportRunningStatus = enum(i32) {
    Unknown = 0,
    NotRunning = 1,
    Queued = 2,
    Running = 3,
};
pub const FsrmReportRunningStatus_Unknown = FsrmReportRunningStatus.Unknown;
pub const FsrmReportRunningStatus_NotRunning = FsrmReportRunningStatus.NotRunning;
pub const FsrmReportRunningStatus_Queued = FsrmReportRunningStatus.Queued;
pub const FsrmReportRunningStatus_Running = FsrmReportRunningStatus.Running;

pub const FsrmReportGenerationContext = enum(i32) {
    Undefined = 1,
    ScheduledReport = 2,
    InteractiveReport = 3,
    IncidentReport = 4,
};
pub const FsrmReportGenerationContext_Undefined = FsrmReportGenerationContext.Undefined;
pub const FsrmReportGenerationContext_ScheduledReport = FsrmReportGenerationContext.ScheduledReport;
pub const FsrmReportGenerationContext_InteractiveReport = FsrmReportGenerationContext.InteractiveReport;
pub const FsrmReportGenerationContext_IncidentReport = FsrmReportGenerationContext.IncidentReport;

pub const FsrmReportFilter = enum(i32) {
    MinSize = 1,
    MinAgeDays = 2,
    MaxAgeDays = 3,
    MinQuotaUsage = 4,
    FileGroups = 5,
    Owners = 6,
    NamePattern = 7,
    Property = 8,
};
pub const FsrmReportFilter_MinSize = FsrmReportFilter.MinSize;
pub const FsrmReportFilter_MinAgeDays = FsrmReportFilter.MinAgeDays;
pub const FsrmReportFilter_MaxAgeDays = FsrmReportFilter.MaxAgeDays;
pub const FsrmReportFilter_MinQuotaUsage = FsrmReportFilter.MinQuotaUsage;
pub const FsrmReportFilter_FileGroups = FsrmReportFilter.FileGroups;
pub const FsrmReportFilter_Owners = FsrmReportFilter.Owners;
pub const FsrmReportFilter_NamePattern = FsrmReportFilter.NamePattern;
pub const FsrmReportFilter_Property = FsrmReportFilter.Property;

pub const FsrmReportLimit = enum(i32) {
    Files = 1,
    FileGroups = 2,
    Owners = 3,
    FilesPerFileGroup = 4,
    FilesPerOwner = 5,
    FilesPerDuplGroup = 6,
    DuplicateGroups = 7,
    Quotas = 8,
    FileScreenEvents = 9,
    PropertyValues = 10,
    FilesPerPropertyValue = 11,
    Folders = 12,
};
pub const FsrmReportLimit_MaxFiles = FsrmReportLimit.Files;
pub const FsrmReportLimit_MaxFileGroups = FsrmReportLimit.FileGroups;
pub const FsrmReportLimit_MaxOwners = FsrmReportLimit.Owners;
pub const FsrmReportLimit_MaxFilesPerFileGroup = FsrmReportLimit.FilesPerFileGroup;
pub const FsrmReportLimit_MaxFilesPerOwner = FsrmReportLimit.FilesPerOwner;
pub const FsrmReportLimit_MaxFilesPerDuplGroup = FsrmReportLimit.FilesPerDuplGroup;
pub const FsrmReportLimit_MaxDuplicateGroups = FsrmReportLimit.DuplicateGroups;
pub const FsrmReportLimit_MaxQuotas = FsrmReportLimit.Quotas;
pub const FsrmReportLimit_MaxFileScreenEvents = FsrmReportLimit.FileScreenEvents;
pub const FsrmReportLimit_MaxPropertyValues = FsrmReportLimit.PropertyValues;
pub const FsrmReportLimit_MaxFilesPerPropertyValue = FsrmReportLimit.FilesPerPropertyValue;
pub const FsrmReportLimit_MaxFolders = FsrmReportLimit.Folders;

pub const FsrmPropertyDefinitionType = enum(i32) {
    Unknown = 0,
    OrderedList = 1,
    MultiChoiceList = 2,
    SingleChoiceList = 3,
    String = 4,
    MultiString = 5,
    Int = 6,
    Bool = 7,
    Date = 8,
};
pub const FsrmPropertyDefinitionType_Unknown = FsrmPropertyDefinitionType.Unknown;
pub const FsrmPropertyDefinitionType_OrderedList = FsrmPropertyDefinitionType.OrderedList;
pub const FsrmPropertyDefinitionType_MultiChoiceList = FsrmPropertyDefinitionType.MultiChoiceList;
pub const FsrmPropertyDefinitionType_SingleChoiceList = FsrmPropertyDefinitionType.SingleChoiceList;
pub const FsrmPropertyDefinitionType_String = FsrmPropertyDefinitionType.String;
pub const FsrmPropertyDefinitionType_MultiString = FsrmPropertyDefinitionType.MultiString;
pub const FsrmPropertyDefinitionType_Int = FsrmPropertyDefinitionType.Int;
pub const FsrmPropertyDefinitionType_Bool = FsrmPropertyDefinitionType.Bool;
pub const FsrmPropertyDefinitionType_Date = FsrmPropertyDefinitionType.Date;

pub const FsrmPropertyDefinitionFlags = enum(i32) {
    Global = 1,
    Deprecated = 2,
    Secure = 4,
};
pub const FsrmPropertyDefinitionFlags_Global = FsrmPropertyDefinitionFlags.Global;
pub const FsrmPropertyDefinitionFlags_Deprecated = FsrmPropertyDefinitionFlags.Deprecated;
pub const FsrmPropertyDefinitionFlags_Secure = FsrmPropertyDefinitionFlags.Secure;

pub const FsrmPropertyDefinitionAppliesTo = enum(i32) {
    iles = 1,
    olders = 2,
};
pub const FsrmPropertyDefinitionAppliesTo_Files = FsrmPropertyDefinitionAppliesTo.iles;
pub const FsrmPropertyDefinitionAppliesTo_Folders = FsrmPropertyDefinitionAppliesTo.olders;

pub const FsrmRuleType = enum(i32) {
    Unknown = 0,
    Classification = 1,
    Generic = 2,
};
pub const FsrmRuleType_Unknown = FsrmRuleType.Unknown;
pub const FsrmRuleType_Classification = FsrmRuleType.Classification;
pub const FsrmRuleType_Generic = FsrmRuleType.Generic;

pub const FsrmRuleFlags = enum(i32) {
    Disabled = 256,
    ClearAutomaticallyClassifiedProperty = 1024,
    ClearManuallyClassifiedProperty = 2048,
    Invalid = 4096,
};
pub const FsrmRuleFlags_Disabled = FsrmRuleFlags.Disabled;
pub const FsrmRuleFlags_ClearAutomaticallyClassifiedProperty = FsrmRuleFlags.ClearAutomaticallyClassifiedProperty;
pub const FsrmRuleFlags_ClearManuallyClassifiedProperty = FsrmRuleFlags.ClearManuallyClassifiedProperty;
pub const FsrmRuleFlags_Invalid = FsrmRuleFlags.Invalid;

pub const FsrmClassificationLoggingFlags = enum(i32) {
    None = 0,
    ClassificationsInLogFile = 1,
    ErrorsInLogFile = 2,
    ClassificationsInSystemLog = 4,
    ErrorsInSystemLog = 8,
};
pub const FsrmClassificationLoggingFlags_None = FsrmClassificationLoggingFlags.None;
pub const FsrmClassificationLoggingFlags_ClassificationsInLogFile = FsrmClassificationLoggingFlags.ClassificationsInLogFile;
pub const FsrmClassificationLoggingFlags_ErrorsInLogFile = FsrmClassificationLoggingFlags.ErrorsInLogFile;
pub const FsrmClassificationLoggingFlags_ClassificationsInSystemLog = FsrmClassificationLoggingFlags.ClassificationsInSystemLog;
pub const FsrmClassificationLoggingFlags_ErrorsInSystemLog = FsrmClassificationLoggingFlags.ErrorsInSystemLog;

pub const FsrmExecutionOption = enum(i32) {
    Unknown = 0,
    EvaluateUnset = 1,
    ReEvaluate_ConsiderExistingValue = 2,
    ReEvaluate_IgnoreExistingValue = 3,
};
pub const FsrmExecutionOption_Unknown = FsrmExecutionOption.Unknown;
pub const FsrmExecutionOption_EvaluateUnset = FsrmExecutionOption.EvaluateUnset;
pub const FsrmExecutionOption_ReEvaluate_ConsiderExistingValue = FsrmExecutionOption.ReEvaluate_ConsiderExistingValue;
pub const FsrmExecutionOption_ReEvaluate_IgnoreExistingValue = FsrmExecutionOption.ReEvaluate_IgnoreExistingValue;

pub const FsrmStorageModuleCaps = enum(i32) {
    Unknown = 0,
    CanGet = 1,
    CanSet = 2,
    CanHandleDirectories = 4,
    CanHandleFiles = 8,
};
pub const FsrmStorageModuleCaps_Unknown = FsrmStorageModuleCaps.Unknown;
pub const FsrmStorageModuleCaps_CanGet = FsrmStorageModuleCaps.CanGet;
pub const FsrmStorageModuleCaps_CanSet = FsrmStorageModuleCaps.CanSet;
pub const FsrmStorageModuleCaps_CanHandleDirectories = FsrmStorageModuleCaps.CanHandleDirectories;
pub const FsrmStorageModuleCaps_CanHandleFiles = FsrmStorageModuleCaps.CanHandleFiles;

pub const FsrmStorageModuleType = enum(i32) {
    Unknown = 0,
    Cache = 1,
    InFile = 2,
    Database = 3,
    System = 100,
};
pub const FsrmStorageModuleType_Unknown = FsrmStorageModuleType.Unknown;
pub const FsrmStorageModuleType_Cache = FsrmStorageModuleType.Cache;
pub const FsrmStorageModuleType_InFile = FsrmStorageModuleType.InFile;
pub const FsrmStorageModuleType_Database = FsrmStorageModuleType.Database;
pub const FsrmStorageModuleType_System = FsrmStorageModuleType.System;

pub const FsrmPropertyBagFlags = enum(i32) {
    UpdatedByClassifier = 1,
    FailedLoadingProperties = 2,
    FailedSavingProperties = 4,
    FailedClassifyingProperties = 8,
};
pub const FsrmPropertyBagFlags_UpdatedByClassifier = FsrmPropertyBagFlags.UpdatedByClassifier;
pub const FsrmPropertyBagFlags_FailedLoadingProperties = FsrmPropertyBagFlags.FailedLoadingProperties;
pub const FsrmPropertyBagFlags_FailedSavingProperties = FsrmPropertyBagFlags.FailedSavingProperties;
pub const FsrmPropertyBagFlags_FailedClassifyingProperties = FsrmPropertyBagFlags.FailedClassifyingProperties;

pub const FsrmPropertyBagField = enum(i32) {
    AccessVolume = 0,
    VolumeGuidName = 1,
};
pub const FsrmPropertyBagField_AccessVolume = FsrmPropertyBagField.AccessVolume;
pub const FsrmPropertyBagField_VolumeGuidName = FsrmPropertyBagField.VolumeGuidName;

pub const FsrmPropertyFlags = enum(i32) {
    None = 0,
    Orphaned = 1,
    RetrievedFromCache = 2,
    RetrievedFromStorage = 4,
    SetByClassifier = 8,
    Deleted = 16,
    Reclassified = 32,
    AggregationFailed = 64,
    Existing = 128,
    FailedLoadingProperties = 256,
    FailedClassifyingProperties = 512,
    FailedSavingProperties = 1024,
    Secure = 2048,
    PolicyDerived = 4096,
    Inherited = 8192,
    Manual = 16384,
    ExplicitValueDeleted = 32768,
    PropertyDeletedFromClear = 65536,
    PropertySourceMask = 14,
    PersistentMask = 20480,
};
pub const FsrmPropertyFlags_None = FsrmPropertyFlags.None;
pub const FsrmPropertyFlags_Orphaned = FsrmPropertyFlags.Orphaned;
pub const FsrmPropertyFlags_RetrievedFromCache = FsrmPropertyFlags.RetrievedFromCache;
pub const FsrmPropertyFlags_RetrievedFromStorage = FsrmPropertyFlags.RetrievedFromStorage;
pub const FsrmPropertyFlags_SetByClassifier = FsrmPropertyFlags.SetByClassifier;
pub const FsrmPropertyFlags_Deleted = FsrmPropertyFlags.Deleted;
pub const FsrmPropertyFlags_Reclassified = FsrmPropertyFlags.Reclassified;
pub const FsrmPropertyFlags_AggregationFailed = FsrmPropertyFlags.AggregationFailed;
pub const FsrmPropertyFlags_Existing = FsrmPropertyFlags.Existing;
pub const FsrmPropertyFlags_FailedLoadingProperties = FsrmPropertyFlags.FailedLoadingProperties;
pub const FsrmPropertyFlags_FailedClassifyingProperties = FsrmPropertyFlags.FailedClassifyingProperties;
pub const FsrmPropertyFlags_FailedSavingProperties = FsrmPropertyFlags.FailedSavingProperties;
pub const FsrmPropertyFlags_Secure = FsrmPropertyFlags.Secure;
pub const FsrmPropertyFlags_PolicyDerived = FsrmPropertyFlags.PolicyDerived;
pub const FsrmPropertyFlags_Inherited = FsrmPropertyFlags.Inherited;
pub const FsrmPropertyFlags_Manual = FsrmPropertyFlags.Manual;
pub const FsrmPropertyFlags_ExplicitValueDeleted = FsrmPropertyFlags.ExplicitValueDeleted;
pub const FsrmPropertyFlags_PropertyDeletedFromClear = FsrmPropertyFlags.PropertyDeletedFromClear;
pub const FsrmPropertyFlags_PropertySourceMask = FsrmPropertyFlags.PropertySourceMask;
pub const FsrmPropertyFlags_PersistentMask = FsrmPropertyFlags.PersistentMask;

pub const FsrmPipelineModuleType = enum(i32) {
    Unknown = 0,
    Storage = 1,
    Classifier = 2,
};
pub const FsrmPipelineModuleType_Unknown = FsrmPipelineModuleType.Unknown;
pub const FsrmPipelineModuleType_Storage = FsrmPipelineModuleType.Storage;
pub const FsrmPipelineModuleType_Classifier = FsrmPipelineModuleType.Classifier;

pub const FsrmGetFilePropertyOptions = enum(i32) {
    None = 0,
    NoRuleEvaluation = 1,
    Persistent = 2,
    FailOnPersistErrors = 4,
    SkipOrphaned = 8,
};
pub const FsrmGetFilePropertyOptions_None = FsrmGetFilePropertyOptions.None;
pub const FsrmGetFilePropertyOptions_NoRuleEvaluation = FsrmGetFilePropertyOptions.NoRuleEvaluation;
pub const FsrmGetFilePropertyOptions_Persistent = FsrmGetFilePropertyOptions.Persistent;
pub const FsrmGetFilePropertyOptions_FailOnPersistErrors = FsrmGetFilePropertyOptions.FailOnPersistErrors;
pub const FsrmGetFilePropertyOptions_SkipOrphaned = FsrmGetFilePropertyOptions.SkipOrphaned;

pub const FsrmFileManagementType = enum(i32) {
    Unknown = 0,
    Expiration = 1,
    Custom = 2,
    Rms = 3,
};
pub const FsrmFileManagementType_Unknown = FsrmFileManagementType.Unknown;
pub const FsrmFileManagementType_Expiration = FsrmFileManagementType.Expiration;
pub const FsrmFileManagementType_Custom = FsrmFileManagementType.Custom;
pub const FsrmFileManagementType_Rms = FsrmFileManagementType.Rms;

pub const FsrmFileManagementLoggingFlags = enum(i32) {
    None = 0,
    Error = 1,
    Information = 2,
    Audit = 4,
};
pub const FsrmFileManagementLoggingFlags_None = FsrmFileManagementLoggingFlags.None;
pub const FsrmFileManagementLoggingFlags_Error = FsrmFileManagementLoggingFlags.Error;
pub const FsrmFileManagementLoggingFlags_Information = FsrmFileManagementLoggingFlags.Information;
pub const FsrmFileManagementLoggingFlags_Audit = FsrmFileManagementLoggingFlags.Audit;

pub const FsrmPropertyConditionType = enum(i32) {
    Unknown = 0,
    Equal = 1,
    NotEqual = 2,
    GreaterThan = 3,
    LessThan = 4,
    Contain = 5,
    Exist = 6,
    NotExist = 7,
    StartWith = 8,
    EndWith = 9,
    ContainedIn = 10,
    PrefixOf = 11,
    SuffixOf = 12,
    MatchesPattern = 13,
};
pub const FsrmPropertyConditionType_Unknown = FsrmPropertyConditionType.Unknown;
pub const FsrmPropertyConditionType_Equal = FsrmPropertyConditionType.Equal;
pub const FsrmPropertyConditionType_NotEqual = FsrmPropertyConditionType.NotEqual;
pub const FsrmPropertyConditionType_GreaterThan = FsrmPropertyConditionType.GreaterThan;
pub const FsrmPropertyConditionType_LessThan = FsrmPropertyConditionType.LessThan;
pub const FsrmPropertyConditionType_Contain = FsrmPropertyConditionType.Contain;
pub const FsrmPropertyConditionType_Exist = FsrmPropertyConditionType.Exist;
pub const FsrmPropertyConditionType_NotExist = FsrmPropertyConditionType.NotExist;
pub const FsrmPropertyConditionType_StartWith = FsrmPropertyConditionType.StartWith;
pub const FsrmPropertyConditionType_EndWith = FsrmPropertyConditionType.EndWith;
pub const FsrmPropertyConditionType_ContainedIn = FsrmPropertyConditionType.ContainedIn;
pub const FsrmPropertyConditionType_PrefixOf = FsrmPropertyConditionType.PrefixOf;
pub const FsrmPropertyConditionType_SuffixOf = FsrmPropertyConditionType.SuffixOf;
pub const FsrmPropertyConditionType_MatchesPattern = FsrmPropertyConditionType.MatchesPattern;

pub const FsrmFileStreamingMode = enum(i32) {
    Unknown = 0,
    Read = 1,
    Write = 2,
};
pub const FsrmFileStreamingMode_Unknown = FsrmFileStreamingMode.Unknown;
pub const FsrmFileStreamingMode_Read = FsrmFileStreamingMode.Read;
pub const FsrmFileStreamingMode_Write = FsrmFileStreamingMode.Write;

pub const FsrmFileStreamingInterfaceType = enum(i32) {
    Unknown = 0,
    ILockBytes = 1,
    IStream = 2,
};
pub const FsrmFileStreamingInterfaceType_Unknown = FsrmFileStreamingInterfaceType.Unknown;
pub const FsrmFileStreamingInterfaceType_ILockBytes = FsrmFileStreamingInterfaceType.ILockBytes;
pub const FsrmFileStreamingInterfaceType_IStream = FsrmFileStreamingInterfaceType.IStream;

pub const FsrmFileConditionType = enum(i32) {
    Unknown = 0,
    Property = 1,
};
pub const FsrmFileConditionType_Unknown = FsrmFileConditionType.Unknown;
pub const FsrmFileConditionType_Property = FsrmFileConditionType.Property;

pub const FsrmFileSystemPropertyId = enum(i32) {
    Undefined = 0,
    FileName = 1,
    DateCreated = 2,
    DateLastAccessed = 3,
    DateLastModified = 4,
    DateNow = 5,
};
pub const FsrmFileSystemPropertyId_Undefined = FsrmFileSystemPropertyId.Undefined;
pub const FsrmFileSystemPropertyId_FileName = FsrmFileSystemPropertyId.FileName;
pub const FsrmFileSystemPropertyId_DateCreated = FsrmFileSystemPropertyId.DateCreated;
pub const FsrmFileSystemPropertyId_DateLastAccessed = FsrmFileSystemPropertyId.DateLastAccessed;
pub const FsrmFileSystemPropertyId_DateLastModified = FsrmFileSystemPropertyId.DateLastModified;
pub const FsrmFileSystemPropertyId_DateNow = FsrmFileSystemPropertyId.DateNow;

pub const FsrmPropertyValueType = enum(i32) {
    Undefined = 0,
    Literal = 1,
    DateOffset = 2,
};
pub const FsrmPropertyValueType_Undefined = FsrmPropertyValueType.Undefined;
pub const FsrmPropertyValueType_Literal = FsrmPropertyValueType.Literal;
pub const FsrmPropertyValueType_DateOffset = FsrmPropertyValueType.DateOffset;

pub const AdrClientDisplayFlags = enum(i32) {
    AllowEmailRequests = 1,
    ShowDeviceTroubleshooting = 2,
};
pub const AdrClientDisplayFlags_AllowEmailRequests = AdrClientDisplayFlags.AllowEmailRequests;
pub const AdrClientDisplayFlags_ShowDeviceTroubleshooting = AdrClientDisplayFlags.ShowDeviceTroubleshooting;

pub const AdrEmailFlags = enum(i32) {
    PutDataOwnerOnToLine = 1,
    PutAdminOnToLine = 2,
    IncludeDeviceClaims = 4,
    IncludeUserInfo = 8,
    GenerateEventLog = 16,
};
pub const AdrEmailFlags_PutDataOwnerOnToLine = AdrEmailFlags.PutDataOwnerOnToLine;
pub const AdrEmailFlags_PutAdminOnToLine = AdrEmailFlags.PutAdminOnToLine;
pub const AdrEmailFlags_IncludeDeviceClaims = AdrEmailFlags.IncludeDeviceClaims;
pub const AdrEmailFlags_IncludeUserInfo = AdrEmailFlags.IncludeUserInfo;
pub const AdrEmailFlags_GenerateEventLog = AdrEmailFlags.GenerateEventLog;

pub const AdrClientErrorType = enum(i32) {
    Unknown = 0,
    AccessDenied = 1,
    FileNotFound = 2,
};
pub const AdrClientErrorType_Unknown = AdrClientErrorType.Unknown;
pub const AdrClientErrorType_AccessDenied = AdrClientErrorType.AccessDenied;
pub const AdrClientErrorType_FileNotFound = AdrClientErrorType.FileNotFound;

pub const AdrClientFlags = enum(i32) {
    None = 0,
    FailForLocalPaths = 1,
    FailIfNotSupportedByServer = 2,
    FailIfNotDomainJoined = 4,
};
pub const AdrClientFlags_None = AdrClientFlags.None;
pub const AdrClientFlags_FailForLocalPaths = AdrClientFlags.FailForLocalPaths;
pub const AdrClientFlags_FailIfNotSupportedByServer = AdrClientFlags.FailIfNotSupportedByServer;
pub const AdrClientFlags_FailIfNotDomainJoined = AdrClientFlags.FailIfNotDomainJoined;

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmObject_Value = Guid.initString("22bcef93-4a3f-4183-89f9-2f8b8a628aee");
pub const IID_IFsrmObject = &IID_IFsrmObject_Value;
pub const IFsrmObject = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmObject,
            id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmObject,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmObject,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFsrmObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IFsrmObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, id_: ?*Guid) HRESULT {
                return @as(*const IFsrmObject.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IFsrmObject, @ptrCast(self)), id_);
            }
            pub inline fn getDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmObject.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IFsrmObject, @ptrCast(self)), description_);
            }
            pub inline fn putDescription(self: *const T, description_: ?BSTR) HRESULT {
                return @as(*const IFsrmObject.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IFsrmObject, @ptrCast(self)), description_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFsrmObject.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFsrmObject, @ptrCast(self)));
            }
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IFsrmObject.VTable, @ptrCast(self.vtable)).Commit(@as(*const IFsrmObject, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmCollection_Value = Guid.initString("f76fbf3b-8ddd-4b42-b05a-cb1c3ff1fee8");
pub const IID_IFsrmCollection = &IID_IFsrmCollection_Value;
pub const IFsrmCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmCollection,
            unknown: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmCollection,
            index: i32,
            item: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmCollection,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmCollection,
            state: ?*FsrmCollectionState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForCompletion: *const fn (
            self: *const IFsrmCollection,
            wait_seconds: i32,
            completed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetById: *const fn (
            self: *const IFsrmCollection,
            id: Guid,
            entry: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, unknown_: ?*?*IUnknown) HRESULT {
                return @as(*const IFsrmCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFsrmCollection, @ptrCast(self)), unknown_);
            }
            pub inline fn getItem(self: *const T, index_: i32, item_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IFsrmCollection, @ptrCast(self)), index_, item_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IFsrmCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFsrmCollection, @ptrCast(self)), count_);
            }
            pub inline fn getState(self: *const T, state_: ?*FsrmCollectionState) HRESULT {
                return @as(*const IFsrmCollection.VTable, @ptrCast(self.vtable)).get_State(@as(*const IFsrmCollection, @ptrCast(self)), state_);
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IFsrmCollection.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IFsrmCollection, @ptrCast(self)));
            }
            pub inline fn waitForCompletion(self: *const T, wait_seconds_: i32, completed_: ?*i16) HRESULT {
                return @as(*const IFsrmCollection.VTable, @ptrCast(self.vtable)).WaitForCompletion(@as(*const IFsrmCollection, @ptrCast(self)), wait_seconds_, completed_);
            }
            pub inline fn getById(self: *const T, id_: Guid, entry_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmCollection.VTable, @ptrCast(self.vtable)).GetById(@as(*const IFsrmCollection, @ptrCast(self)), id_, entry_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmMutableCollection_Value = Guid.initString("1bb617b8-3886-49dc-af82-a6c90fa35dda");
pub const IID_IFsrmMutableCollection = &IID_IFsrmMutableCollection_Value;
pub const IFsrmMutableCollection = extern struct {
    pub const VTable = extern struct {
        base: IFsrmCollection.VTable,
        Add: *const fn (
            self: *const IFsrmMutableCollection,
            item: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IFsrmMutableCollection,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveById: *const fn (
            self: *const IFsrmMutableCollection,
            id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IFsrmMutableCollection,
            collection: ?*?*IFsrmMutableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmCollection.MethodMixin(T);
            pub inline fn add(self: *const T, item_: VARIANT) HRESULT {
                return @as(*const IFsrmMutableCollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IFsrmMutableCollection, @ptrCast(self)), item_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IFsrmMutableCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IFsrmMutableCollection, @ptrCast(self)), index_);
            }
            pub inline fn removeById(self: *const T, id_: Guid) HRESULT {
                return @as(*const IFsrmMutableCollection.VTable, @ptrCast(self.vtable)).RemoveById(@as(*const IFsrmMutableCollection, @ptrCast(self)), id_);
            }
            pub inline fn clone(self: *const T, collection_: ?*?*IFsrmMutableCollection) HRESULT {
                return @as(*const IFsrmMutableCollection.VTable, @ptrCast(self.vtable)).Clone(@as(*const IFsrmMutableCollection, @ptrCast(self)), collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmCommittableCollection_Value = Guid.initString("96deb3b5-8b91-4a2a-9d93-80a35d8aa847");
pub const IID_IFsrmCommittableCollection = &IID_IFsrmCommittableCollection_Value;
pub const IFsrmCommittableCollection = extern struct {
    pub const VTable = extern struct {
        base: IFsrmMutableCollection.VTable,
        Commit: *const fn (
            self: *const IFsrmCommittableCollection,
            options: FsrmCommitOptions,
            results: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmMutableCollection.MethodMixin(T);
            pub inline fn commit(self: *const T, options_: FsrmCommitOptions, results_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmCommittableCollection.VTable, @ptrCast(self.vtable)).Commit(@as(*const IFsrmCommittableCollection, @ptrCast(self)), options_, results_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmAction_Value = Guid.initString("6cd6408a-ae60-463b-9ef1-e117534d69dc");
pub const IID_IFsrmAction = &IID_IFsrmAction_Value;
pub const IFsrmAction = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmAction,
            id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActionType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmAction,
            action_type: ?*FsrmActionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunLimitInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmAction,
            minutes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunLimitInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmAction,
            minutes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFsrmAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, id_: ?*Guid) HRESULT {
                return @as(*const IFsrmAction.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IFsrmAction, @ptrCast(self)), id_);
            }
            pub inline fn getActionType(self: *const T, action_type_: ?*FsrmActionType) HRESULT {
                return @as(*const IFsrmAction.VTable, @ptrCast(self.vtable)).get_ActionType(@as(*const IFsrmAction, @ptrCast(self)), action_type_);
            }
            pub inline fn getRunLimitInterval(self: *const T, minutes_: ?*i32) HRESULT {
                return @as(*const IFsrmAction.VTable, @ptrCast(self.vtable)).get_RunLimitInterval(@as(*const IFsrmAction, @ptrCast(self)), minutes_);
            }
            pub inline fn putRunLimitInterval(self: *const T, minutes_: i32) HRESULT {
                return @as(*const IFsrmAction.VTable, @ptrCast(self.vtable)).put_RunLimitInterval(@as(*const IFsrmAction, @ptrCast(self)), minutes_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFsrmAction.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFsrmAction, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmActionEmail_Value = Guid.initString("d646567d-26ae-4caa-9f84-4e0aad207fca");
pub const IID_IFsrmActionEmail = &IID_IFsrmActionEmail_Value;
pub const IFsrmActionEmail = extern struct {
    pub const VTable = extern struct {
        base: IFsrmAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailFrom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_from: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailFrom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_from: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailReplyTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_reply_to: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailReplyTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_reply_to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_to: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailCc: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_cc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailCc: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_cc: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailBcc: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_bcc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailBcc: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_bcc: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailSubject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_subject: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailSubject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            mail_subject: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MessageText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            message_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MessageText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail,
            message_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmAction.MethodMixin(T);
            pub inline fn getMailFrom(self: *const T, mail_from_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).get_MailFrom(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_from_);
            }
            pub inline fn putMailFrom(self: *const T, mail_from_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).put_MailFrom(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_from_);
            }
            pub inline fn getMailReplyTo(self: *const T, mail_reply_to_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).get_MailReplyTo(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_reply_to_);
            }
            pub inline fn putMailReplyTo(self: *const T, mail_reply_to_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).put_MailReplyTo(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_reply_to_);
            }
            pub inline fn getMailTo(self: *const T, mail_to_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).get_MailTo(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_to_);
            }
            pub inline fn putMailTo(self: *const T, mail_to_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).put_MailTo(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_to_);
            }
            pub inline fn getMailCc(self: *const T, mail_cc_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).get_MailCc(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_cc_);
            }
            pub inline fn putMailCc(self: *const T, mail_cc_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).put_MailCc(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_cc_);
            }
            pub inline fn getMailBcc(self: *const T, mail_bcc_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).get_MailBcc(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_bcc_);
            }
            pub inline fn putMailBcc(self: *const T, mail_bcc_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).put_MailBcc(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_bcc_);
            }
            pub inline fn getMailSubject(self: *const T, mail_subject_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).get_MailSubject(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_subject_);
            }
            pub inline fn putMailSubject(self: *const T, mail_subject_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).put_MailSubject(@as(*const IFsrmActionEmail, @ptrCast(self)), mail_subject_);
            }
            pub inline fn getMessageText(self: *const T, message_text_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).get_MessageText(@as(*const IFsrmActionEmail, @ptrCast(self)), message_text_);
            }
            pub inline fn putMessageText(self: *const T, message_text_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionEmail.VTable, @ptrCast(self.vtable)).put_MessageText(@as(*const IFsrmActionEmail, @ptrCast(self)), message_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmActionEmail2_Value = Guid.initString("8276702f-2532-4839-89bf-4872609a2ea4");
pub const IID_IFsrmActionEmail2 = &IID_IFsrmActionEmail2_Value;
pub const IFsrmActionEmail2 = extern struct {
    pub const VTable = extern struct {
        base: IFsrmActionEmail.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttachmentFileListSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail2,
            attachment_file_list_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttachmentFileListSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEmail2,
            attachment_file_list_size: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmActionEmail.MethodMixin(T);
            pub inline fn getAttachmentFileListSize(self: *const T, attachment_file_list_size_: ?*i32) HRESULT {
                return @as(*const IFsrmActionEmail2.VTable, @ptrCast(self.vtable)).get_AttachmentFileListSize(@as(*const IFsrmActionEmail2, @ptrCast(self)), attachment_file_list_size_);
            }
            pub inline fn putAttachmentFileListSize(self: *const T, attachment_file_list_size_: i32) HRESULT {
                return @as(*const IFsrmActionEmail2.VTable, @ptrCast(self.vtable)).put_AttachmentFileListSize(@as(*const IFsrmActionEmail2, @ptrCast(self)), attachment_file_list_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmActionReport_Value = Guid.initString("2dbe63c4-b340-48a0-a5b0-158e07fc567e");
pub const IID_IFsrmActionReport = &IID_IFsrmActionReport_Value;
pub const IFsrmActionReport = extern struct {
    pub const VTable = extern struct {
        base: IFsrmAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionReport,
            report_types: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionReport,
            report_types: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionReport,
            mail_to: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionReport,
            mail_to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmAction.MethodMixin(T);
            pub inline fn getReportTypes(self: *const T, report_types_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmActionReport.VTable, @ptrCast(self.vtable)).get_ReportTypes(@as(*const IFsrmActionReport, @ptrCast(self)), report_types_);
            }
            pub inline fn putReportTypes(self: *const T, report_types_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmActionReport.VTable, @ptrCast(self.vtable)).put_ReportTypes(@as(*const IFsrmActionReport, @ptrCast(self)), report_types_);
            }
            pub inline fn getMailTo(self: *const T, mail_to_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionReport.VTable, @ptrCast(self.vtable)).get_MailTo(@as(*const IFsrmActionReport, @ptrCast(self)), mail_to_);
            }
            pub inline fn putMailTo(self: *const T, mail_to_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionReport.VTable, @ptrCast(self.vtable)).put_MailTo(@as(*const IFsrmActionReport, @ptrCast(self)), mail_to_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmActionEventLog_Value = Guid.initString("4c8f96c3-5d94-4f37-a4f4-f56ab463546f");
pub const IID_IFsrmActionEventLog = &IID_IFsrmActionEventLog_Value;
pub const IFsrmActionEventLog = extern struct {
    pub const VTable = extern struct {
        base: IFsrmAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEventLog,
            event_type: ?*FsrmEventType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEventLog,
            event_type: FsrmEventType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MessageText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEventLog,
            message_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MessageText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionEventLog,
            message_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmAction.MethodMixin(T);
            pub inline fn getEventType(self: *const T, event_type_: ?*FsrmEventType) HRESULT {
                return @as(*const IFsrmActionEventLog.VTable, @ptrCast(self.vtable)).get_EventType(@as(*const IFsrmActionEventLog, @ptrCast(self)), event_type_);
            }
            pub inline fn putEventType(self: *const T, event_type_: FsrmEventType) HRESULT {
                return @as(*const IFsrmActionEventLog.VTable, @ptrCast(self.vtable)).put_EventType(@as(*const IFsrmActionEventLog, @ptrCast(self)), event_type_);
            }
            pub inline fn getMessageText(self: *const T, message_text_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionEventLog.VTable, @ptrCast(self.vtable)).get_MessageText(@as(*const IFsrmActionEventLog, @ptrCast(self)), message_text_);
            }
            pub inline fn putMessageText(self: *const T, message_text_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionEventLog.VTable, @ptrCast(self.vtable)).put_MessageText(@as(*const IFsrmActionEventLog, @ptrCast(self)), message_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmActionCommand_Value = Guid.initString("12937789-e247-4917-9c20-f3ee9c7ee783");
pub const IID_IFsrmActionCommand = &IID_IFsrmActionCommand_Value;
pub const IFsrmActionCommand = extern struct {
    pub const VTable = extern struct {
        base: IFsrmAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExecutablePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            executable_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExecutablePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            executable_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Arguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            arguments: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Arguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            arguments: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Account: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            account: ?*FsrmAccountType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Account: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            account: FsrmAccountType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WorkingDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            working_directory: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WorkingDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            working_directory: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonitorCommand: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            monitor_command: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonitorCommand: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            monitor_command: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KillTimeOut: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            minutes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KillTimeOut: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            minutes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogResult: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            log_results: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogResult: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmActionCommand,
            log_results: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmAction.MethodMixin(T);
            pub inline fn getExecutablePath(self: *const T, executable_path_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).get_ExecutablePath(@as(*const IFsrmActionCommand, @ptrCast(self)), executable_path_);
            }
            pub inline fn putExecutablePath(self: *const T, executable_path_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).put_ExecutablePath(@as(*const IFsrmActionCommand, @ptrCast(self)), executable_path_);
            }
            pub inline fn getArguments(self: *const T, arguments_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).get_Arguments(@as(*const IFsrmActionCommand, @ptrCast(self)), arguments_);
            }
            pub inline fn putArguments(self: *const T, arguments_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).put_Arguments(@as(*const IFsrmActionCommand, @ptrCast(self)), arguments_);
            }
            pub inline fn getAccount(self: *const T, account_: ?*FsrmAccountType) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).get_Account(@as(*const IFsrmActionCommand, @ptrCast(self)), account_);
            }
            pub inline fn putAccount(self: *const T, account_: FsrmAccountType) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).put_Account(@as(*const IFsrmActionCommand, @ptrCast(self)), account_);
            }
            pub inline fn getWorkingDirectory(self: *const T, working_directory_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).get_WorkingDirectory(@as(*const IFsrmActionCommand, @ptrCast(self)), working_directory_);
            }
            pub inline fn putWorkingDirectory(self: *const T, working_directory_: ?BSTR) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).put_WorkingDirectory(@as(*const IFsrmActionCommand, @ptrCast(self)), working_directory_);
            }
            pub inline fn getMonitorCommand(self: *const T, monitor_command_: ?*i16) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).get_MonitorCommand(@as(*const IFsrmActionCommand, @ptrCast(self)), monitor_command_);
            }
            pub inline fn putMonitorCommand(self: *const T, monitor_command_: i16) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).put_MonitorCommand(@as(*const IFsrmActionCommand, @ptrCast(self)), monitor_command_);
            }
            pub inline fn getKillTimeOut(self: *const T, minutes_: ?*i32) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).get_KillTimeOut(@as(*const IFsrmActionCommand, @ptrCast(self)), minutes_);
            }
            pub inline fn putKillTimeOut(self: *const T, minutes_: i32) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).put_KillTimeOut(@as(*const IFsrmActionCommand, @ptrCast(self)), minutes_);
            }
            pub inline fn getLogResult(self: *const T, log_results_: ?*i16) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).get_LogResult(@as(*const IFsrmActionCommand, @ptrCast(self)), log_results_);
            }
            pub inline fn putLogResult(self: *const T, log_results_: i16) HRESULT {
                return @as(*const IFsrmActionCommand.VTable, @ptrCast(self.vtable)).put_LogResult(@as(*const IFsrmActionCommand, @ptrCast(self)), log_results_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmSetting_Value = Guid.initString("f411d4fd-14be-4260-8c40-03b7c95e608a");
pub const IID_IFsrmSetting = &IID_IFsrmSetting_Value;
pub const IFsrmSetting = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SmtpServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            smtp_server: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SmtpServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            smtp_server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailFrom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            mail_from: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailFrom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            mail_from: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AdminEmail: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            admin_email: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AdminEmail: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            admin_email: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisableCommandLine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            disable_command_line: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisableCommandLine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            disable_command_line: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableScreeningAudit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            enable_screening_audit: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableScreeningAudit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmSetting,
            enable_screening_audit: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EmailTest: *const fn (
            self: *const IFsrmSetting,
            mail_to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActionRunLimitInterval: *const fn (
            self: *const IFsrmSetting,
            action_type: FsrmActionType,
            delay_time_minutes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActionRunLimitInterval: *const fn (
            self: *const IFsrmSetting,
            action_type: FsrmActionType,
            delay_time_minutes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSmtpServer(self: *const T, smtp_server_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).get_SmtpServer(@as(*const IFsrmSetting, @ptrCast(self)), smtp_server_);
            }
            pub inline fn putSmtpServer(self: *const T, smtp_server_: ?BSTR) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).put_SmtpServer(@as(*const IFsrmSetting, @ptrCast(self)), smtp_server_);
            }
            pub inline fn getMailFrom(self: *const T, mail_from_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).get_MailFrom(@as(*const IFsrmSetting, @ptrCast(self)), mail_from_);
            }
            pub inline fn putMailFrom(self: *const T, mail_from_: ?BSTR) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).put_MailFrom(@as(*const IFsrmSetting, @ptrCast(self)), mail_from_);
            }
            pub inline fn getAdminEmail(self: *const T, admin_email_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).get_AdminEmail(@as(*const IFsrmSetting, @ptrCast(self)), admin_email_);
            }
            pub inline fn putAdminEmail(self: *const T, admin_email_: ?BSTR) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).put_AdminEmail(@as(*const IFsrmSetting, @ptrCast(self)), admin_email_);
            }
            pub inline fn getDisableCommandLine(self: *const T, disable_command_line_: ?*i16) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).get_DisableCommandLine(@as(*const IFsrmSetting, @ptrCast(self)), disable_command_line_);
            }
            pub inline fn putDisableCommandLine(self: *const T, disable_command_line_: i16) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).put_DisableCommandLine(@as(*const IFsrmSetting, @ptrCast(self)), disable_command_line_);
            }
            pub inline fn getEnableScreeningAudit(self: *const T, enable_screening_audit_: ?*i16) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).get_EnableScreeningAudit(@as(*const IFsrmSetting, @ptrCast(self)), enable_screening_audit_);
            }
            pub inline fn putEnableScreeningAudit(self: *const T, enable_screening_audit_: i16) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).put_EnableScreeningAudit(@as(*const IFsrmSetting, @ptrCast(self)), enable_screening_audit_);
            }
            pub inline fn emailTest(self: *const T, mail_to_: ?BSTR) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).EmailTest(@as(*const IFsrmSetting, @ptrCast(self)), mail_to_);
            }
            pub inline fn setActionRunLimitInterval(self: *const T, action_type_: FsrmActionType, delay_time_minutes_: i32) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).SetActionRunLimitInterval(@as(*const IFsrmSetting, @ptrCast(self)), action_type_, delay_time_minutes_);
            }
            pub inline fn getActionRunLimitInterval(self: *const T, action_type_: FsrmActionType, delay_time_minutes_: ?*i32) HRESULT {
                return @as(*const IFsrmSetting.VTable, @ptrCast(self.vtable)).GetActionRunLimitInterval(@as(*const IFsrmSetting, @ptrCast(self)), action_type_, delay_time_minutes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmPathMapper_Value = Guid.initString("6f4dbfff-6920-4821-a6c3-b7e94c1fd60c");
pub const IID_IFsrmPathMapper = &IID_IFsrmPathMapper_Value;
pub const IFsrmPathMapper = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetSharePathsForLocalPath: *const fn (
            self: *const IFsrmPathMapper,
            local_path: ?BSTR,
            share_paths: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSharePathsForLocalPath(self: *const T, local_path_: ?BSTR, share_paths_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPathMapper.VTable, @ptrCast(self.vtable)).GetSharePathsForLocalPath(@as(*const IFsrmPathMapper, @ptrCast(self)), local_path_, share_paths_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmExportImport_Value = Guid.initString("efcb0ab1-16c4-4a79-812c-725614c3306b");
pub const IID_IFsrmExportImport = &IID_IFsrmExportImport_Value;
pub const IFsrmExportImport = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ExportFileGroups: *const fn (
            self: *const IFsrmExportImport,
            file_path: ?BSTR,
            file_group_names_safe_array: ?*VARIANT,
            remote_host: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportFileGroups: *const fn (
            self: *const IFsrmExportImport,
            file_path: ?BSTR,
            file_group_names_safe_array: ?*VARIANT,
            remote_host: ?BSTR,
            file_groups: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportFileScreenTemplates: *const fn (
            self: *const IFsrmExportImport,
            file_path: ?BSTR,
            template_names_safe_array: ?*VARIANT,
            remote_host: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportFileScreenTemplates: *const fn (
            self: *const IFsrmExportImport,
            file_path: ?BSTR,
            template_names_safe_array: ?*VARIANT,
            remote_host: ?BSTR,
            templates: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportQuotaTemplates: *const fn (
            self: *const IFsrmExportImport,
            file_path: ?BSTR,
            template_names_safe_array: ?*VARIANT,
            remote_host: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportQuotaTemplates: *const fn (
            self: *const IFsrmExportImport,
            file_path: ?BSTR,
            template_names_safe_array: ?*VARIANT,
            remote_host: ?BSTR,
            templates: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn exportFileGroups(self: *const T, file_path_: ?BSTR, file_group_names_safe_array_: ?*VARIANT, remote_host_: ?BSTR) HRESULT {
                return @as(*const IFsrmExportImport.VTable, @ptrCast(self.vtable)).ExportFileGroups(@as(*const IFsrmExportImport, @ptrCast(self)), file_path_, file_group_names_safe_array_, remote_host_);
            }
            pub inline fn importFileGroups(self: *const T, file_path_: ?BSTR, file_group_names_safe_array_: ?*VARIANT, remote_host_: ?BSTR, file_groups_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmExportImport.VTable, @ptrCast(self.vtable)).ImportFileGroups(@as(*const IFsrmExportImport, @ptrCast(self)), file_path_, file_group_names_safe_array_, remote_host_, file_groups_);
            }
            pub inline fn exportFileScreenTemplates(self: *const T, file_path_: ?BSTR, template_names_safe_array_: ?*VARIANT, remote_host_: ?BSTR) HRESULT {
                return @as(*const IFsrmExportImport.VTable, @ptrCast(self.vtable)).ExportFileScreenTemplates(@as(*const IFsrmExportImport, @ptrCast(self)), file_path_, template_names_safe_array_, remote_host_);
            }
            pub inline fn importFileScreenTemplates(self: *const T, file_path_: ?BSTR, template_names_safe_array_: ?*VARIANT, remote_host_: ?BSTR, templates_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmExportImport.VTable, @ptrCast(self.vtable)).ImportFileScreenTemplates(@as(*const IFsrmExportImport, @ptrCast(self)), file_path_, template_names_safe_array_, remote_host_, templates_);
            }
            pub inline fn exportQuotaTemplates(self: *const T, file_path_: ?BSTR, template_names_safe_array_: ?*VARIANT, remote_host_: ?BSTR) HRESULT {
                return @as(*const IFsrmExportImport.VTable, @ptrCast(self.vtable)).ExportQuotaTemplates(@as(*const IFsrmExportImport, @ptrCast(self)), file_path_, template_names_safe_array_, remote_host_);
            }
            pub inline fn importQuotaTemplates(self: *const T, file_path_: ?BSTR, template_names_safe_array_: ?*VARIANT, remote_host_: ?BSTR, templates_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmExportImport.VTable, @ptrCast(self.vtable)).ImportQuotaTemplates(@as(*const IFsrmExportImport, @ptrCast(self)), file_path_, template_names_safe_array_, remote_host_, templates_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmDerivedObjectsResult_Value = Guid.initString("39322a2d-38ee-4d0d-8095-421a80849a82");
pub const IID_IFsrmDerivedObjectsResult = &IID_IFsrmDerivedObjectsResult_Value;
pub const IFsrmDerivedObjectsResult = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DerivedObjects: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmDerivedObjectsResult,
            derived_objects: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Results: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmDerivedObjectsResult,
            results: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDerivedObjects(self: *const T, derived_objects_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmDerivedObjectsResult.VTable, @ptrCast(self.vtable)).get_DerivedObjects(@as(*const IFsrmDerivedObjectsResult, @ptrCast(self)), derived_objects_);
            }
            pub inline fn getResults(self: *const T, results_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmDerivedObjectsResult.VTable, @ptrCast(self.vtable)).get_Results(@as(*const IFsrmDerivedObjectsResult, @ptrCast(self)), results_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IFsrmAccessDeniedRemediationClient_Value = Guid.initString("40002314-590b-45a5-8e1b-8c05da527e52");
pub const IID_IFsrmAccessDeniedRemediationClient = &IID_IFsrmAccessDeniedRemediationClient_Value;
pub const IFsrmAccessDeniedRemediationClient = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Show: *const fn (
            self: *const IFsrmAccessDeniedRemediationClient,
            parent_wnd: usize,
            access_path: ?BSTR,
            error_type: AdrClientErrorType,
            flags: i32,
            window_title: ?BSTR,
            window_message: ?BSTR,
            result: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn show(self: *const T, parent_wnd_: usize, access_path_: ?BSTR, error_type_: AdrClientErrorType, flags_: i32, window_title_: ?BSTR, window_message_: ?BSTR, result_: ?*i32) HRESULT {
                return @as(*const IFsrmAccessDeniedRemediationClient.VTable, @ptrCast(self.vtable)).Show(@as(*const IFsrmAccessDeniedRemediationClient, @ptrCast(self)), parent_wnd_, access_path_, error_type_, flags_, window_title_, window_message_, result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_FsrmSetting_Value = Guid.initString("f556d708-6d4d-4594-9c61-7dbb0dae2a46");
pub const CLSID_FsrmSetting = &CLSID_FsrmSetting_Value;

const CLSID_FsrmPathMapper_Value = Guid.initString("f3be42bd-8ac2-409e-bbd8-faf9b6b41feb");
pub const CLSID_FsrmPathMapper = &CLSID_FsrmPathMapper_Value;

const CLSID_FsrmExportImport_Value = Guid.initString("1482dc37-fae9-4787-9025-8ce4e024ab56");
pub const CLSID_FsrmExportImport = &CLSID_FsrmExportImport_Value;

const CLSID_FsrmQuotaManager_Value = Guid.initString("90dcab7f-347c-4bfc-b543-540326305fbe");
pub const CLSID_FsrmQuotaManager = &CLSID_FsrmQuotaManager_Value;

const CLSID_FsrmQuotaTemplateManager_Value = Guid.initString("97d3d443-251c-4337-81e7-b32e8f4ee65e");
pub const CLSID_FsrmQuotaTemplateManager = &CLSID_FsrmQuotaTemplateManager_Value;

const CLSID_FsrmFileGroupManager_Value = Guid.initString("8f1363f6-656f-4496-9226-13aecbd7718f");
pub const CLSID_FsrmFileGroupManager = &CLSID_FsrmFileGroupManager_Value;

const CLSID_FsrmFileScreenManager_Value = Guid.initString("95941183-db53-4c5f-b37b-7d0921cf9dc7");
pub const CLSID_FsrmFileScreenManager = &CLSID_FsrmFileScreenManager_Value;

const CLSID_FsrmFileScreenTemplateManager_Value = Guid.initString("243111df-e474-46aa-a054-eaa33edc292a");
pub const CLSID_FsrmFileScreenTemplateManager = &CLSID_FsrmFileScreenTemplateManager_Value;

const CLSID_FsrmReportManager_Value = Guid.initString("0058ef37-aa66-4c48-bd5b-2fce432ab0c8");
pub const CLSID_FsrmReportManager = &CLSID_FsrmReportManager_Value;

const CLSID_FsrmReportScheduler_Value = Guid.initString("ea25f1b8-1b8d-4290-8ee8-e17c12c2fe20");
pub const CLSID_FsrmReportScheduler = &CLSID_FsrmReportScheduler_Value;

const CLSID_FsrmFileManagementJobManager_Value = Guid.initString("eb18f9b2-4c3a-4321-b203-205120cff614");
pub const CLSID_FsrmFileManagementJobManager = &CLSID_FsrmFileManagementJobManager_Value;

const CLSID_FsrmClassificationManager_Value = Guid.initString("b15c0e47-c391-45b9-95c8-eb596c853f3a");
pub const CLSID_FsrmClassificationManager = &CLSID_FsrmClassificationManager_Value;

const CLSID_FsrmPipelineModuleConnector_Value = Guid.initString("c7643375-1eb5-44de-a062-623547d933bc");
pub const CLSID_FsrmPipelineModuleConnector = &CLSID_FsrmPipelineModuleConnector_Value;

const CLSID_AdSyncTask_Value = Guid.initString("2ae64751-b728-4d6b-97a0-b2da2e7d2a3b");
pub const CLSID_AdSyncTask = &CLSID_AdSyncTask_Value;

const CLSID_FsrmAccessDeniedRemediationClient_Value = Guid.initString("100b4fc8-74c1-470f-b1b7-dd7b6bae79bd");
pub const CLSID_FsrmAccessDeniedRemediationClient = &CLSID_FsrmAccessDeniedRemediationClient_Value;

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmQuotaBase_Value = Guid.initString("1568a795-3924-4118-b74b-68d8f0fa5daf");
pub const IID_IFsrmQuotaBase = &IID_IFsrmQuotaBase_Value;
pub const IFsrmQuotaBase = extern struct {
    pub const VTable = extern struct {
        base: IFsrmObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QuotaLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaBase,
            quota_limit: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_QuotaLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaBase,
            quota_limit: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QuotaFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaBase,
            quota_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_QuotaFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaBase,
            quota_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Thresholds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaBase,
            thresholds: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddThreshold: *const fn (
            self: *const IFsrmQuotaBase,
            threshold: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteThreshold: *const fn (
            self: *const IFsrmQuotaBase,
            threshold: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyThreshold: *const fn (
            self: *const IFsrmQuotaBase,
            threshold: i32,
            new_threshold: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateThresholdAction: *const fn (
            self: *const IFsrmQuotaBase,
            threshold: i32,
            action_type: FsrmActionType,
            action: ?*?*IFsrmAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumThresholdActions: *const fn (
            self: *const IFsrmQuotaBase,
            threshold: i32,
            actions: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmObject.MethodMixin(T);
            pub inline fn getQuotaLimit(self: *const T, quota_limit_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).get_QuotaLimit(@as(*const IFsrmQuotaBase, @ptrCast(self)), quota_limit_);
            }
            pub inline fn putQuotaLimit(self: *const T, quota_limit_: VARIANT) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).put_QuotaLimit(@as(*const IFsrmQuotaBase, @ptrCast(self)), quota_limit_);
            }
            pub inline fn getQuotaFlags(self: *const T, quota_flags_: ?*i32) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).get_QuotaFlags(@as(*const IFsrmQuotaBase, @ptrCast(self)), quota_flags_);
            }
            pub inline fn putQuotaFlags(self: *const T, quota_flags_: i32) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).put_QuotaFlags(@as(*const IFsrmQuotaBase, @ptrCast(self)), quota_flags_);
            }
            pub inline fn getThresholds(self: *const T, thresholds_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).get_Thresholds(@as(*const IFsrmQuotaBase, @ptrCast(self)), thresholds_);
            }
            pub inline fn addThreshold(self: *const T, threshold_: i32) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).AddThreshold(@as(*const IFsrmQuotaBase, @ptrCast(self)), threshold_);
            }
            pub inline fn deleteThreshold(self: *const T, threshold_: i32) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).DeleteThreshold(@as(*const IFsrmQuotaBase, @ptrCast(self)), threshold_);
            }
            pub inline fn modifyThreshold(self: *const T, threshold_: i32, new_threshold_: i32) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).ModifyThreshold(@as(*const IFsrmQuotaBase, @ptrCast(self)), threshold_, new_threshold_);
            }
            pub inline fn createThresholdAction(self: *const T, threshold_: i32, action_type_: FsrmActionType, action_: ?*?*IFsrmAction) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).CreateThresholdAction(@as(*const IFsrmQuotaBase, @ptrCast(self)), threshold_, action_type_, action_);
            }
            pub inline fn enumThresholdActions(self: *const T, threshold_: i32, actions_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmQuotaBase.VTable, @ptrCast(self.vtable)).EnumThresholdActions(@as(*const IFsrmQuotaBase, @ptrCast(self)), threshold_, actions_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmQuotaObject_Value = Guid.initString("42dc3511-61d5-48ae-b6dc-59fc00c0a8d6");
pub const IID_IFsrmQuotaObject = &IID_IFsrmQuotaObject_Value;
pub const IFsrmQuotaObject = extern struct {
    pub const VTable = extern struct {
        base: IFsrmQuotaBase.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaObject,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserSid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaObject,
            user_sid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserAccount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaObject,
            user_account: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceTemplateName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaObject,
            quota_template_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MatchesSourceTemplate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaObject,
            matches: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyTemplate: *const fn (
            self: *const IFsrmQuotaObject,
            quota_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmQuotaBase.MethodMixin(T);
            pub inline fn getPath(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmQuotaObject.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IFsrmQuotaObject, @ptrCast(self)), path_);
            }
            pub inline fn getUserSid(self: *const T, user_sid_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmQuotaObject.VTable, @ptrCast(self.vtable)).get_UserSid(@as(*const IFsrmQuotaObject, @ptrCast(self)), user_sid_);
            }
            pub inline fn getUserAccount(self: *const T, user_account_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmQuotaObject.VTable, @ptrCast(self.vtable)).get_UserAccount(@as(*const IFsrmQuotaObject, @ptrCast(self)), user_account_);
            }
            pub inline fn getSourceTemplateName(self: *const T, quota_template_name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmQuotaObject.VTable, @ptrCast(self.vtable)).get_SourceTemplateName(@as(*const IFsrmQuotaObject, @ptrCast(self)), quota_template_name_);
            }
            pub inline fn getMatchesSourceTemplate(self: *const T, matches_: ?*i16) HRESULT {
                return @as(*const IFsrmQuotaObject.VTable, @ptrCast(self.vtable)).get_MatchesSourceTemplate(@as(*const IFsrmQuotaObject, @ptrCast(self)), matches_);
            }
            pub inline fn applyTemplate(self: *const T, quota_template_name_: ?BSTR) HRESULT {
                return @as(*const IFsrmQuotaObject.VTable, @ptrCast(self.vtable)).ApplyTemplate(@as(*const IFsrmQuotaObject, @ptrCast(self)), quota_template_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmQuota_Value = Guid.initString("377f739d-9647-4b8e-97d2-5ffce6d759cd");
pub const IID_IFsrmQuota = &IID_IFsrmQuota_Value;
pub const IFsrmQuota = extern struct {
    pub const VTable = extern struct {
        base: IFsrmQuotaObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QuotaUsed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuota,
            used: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QuotaPeakUsage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuota,
            peak_usage: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QuotaPeakUsageTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuota,
            peak_usage_date_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetPeakUsage: *const fn (
            self: *const IFsrmQuota,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshUsageProperties: *const fn (
            self: *const IFsrmQuota,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmQuotaObject.MethodMixin(T);
            pub inline fn getQuotaUsed(self: *const T, used_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmQuota.VTable, @ptrCast(self.vtable)).get_QuotaUsed(@as(*const IFsrmQuota, @ptrCast(self)), used_);
            }
            pub inline fn getQuotaPeakUsage(self: *const T, peak_usage_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmQuota.VTable, @ptrCast(self.vtable)).get_QuotaPeakUsage(@as(*const IFsrmQuota, @ptrCast(self)), peak_usage_);
            }
            pub inline fn getQuotaPeakUsageTime(self: *const T, peak_usage_date_time_: ?*f64) HRESULT {
                return @as(*const IFsrmQuota.VTable, @ptrCast(self.vtable)).get_QuotaPeakUsageTime(@as(*const IFsrmQuota, @ptrCast(self)), peak_usage_date_time_);
            }
            pub inline fn resetPeakUsage(self: *const T) HRESULT {
                return @as(*const IFsrmQuota.VTable, @ptrCast(self.vtable)).ResetPeakUsage(@as(*const IFsrmQuota, @ptrCast(self)));
            }
            pub inline fn refreshUsageProperties(self: *const T) HRESULT {
                return @as(*const IFsrmQuota.VTable, @ptrCast(self.vtable)).RefreshUsageProperties(@as(*const IFsrmQuota, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmAutoApplyQuota_Value = Guid.initString("f82e5729-6aba-4740-bfc7-c7f58f75fb7b");
pub const IID_IFsrmAutoApplyQuota = &IID_IFsrmAutoApplyQuota_Value;
pub const IFsrmAutoApplyQuota = extern struct {
    pub const VTable = extern struct {
        base: IFsrmQuotaObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExcludeFolders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmAutoApplyQuota,
            folders: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExcludeFolders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmAutoApplyQuota,
            folders: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitAndUpdateDerived: *const fn (
            self: *const IFsrmAutoApplyQuota,
            commit_options: FsrmCommitOptions,
            apply_options: FsrmTemplateApplyOptions,
            derived_objects_result: ?*?*IFsrmDerivedObjectsResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmQuotaObject.MethodMixin(T);
            pub inline fn getExcludeFolders(self: *const T, folders_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmAutoApplyQuota.VTable, @ptrCast(self.vtable)).get_ExcludeFolders(@as(*const IFsrmAutoApplyQuota, @ptrCast(self)), folders_);
            }
            pub inline fn putExcludeFolders(self: *const T, folders_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmAutoApplyQuota.VTable, @ptrCast(self.vtable)).put_ExcludeFolders(@as(*const IFsrmAutoApplyQuota, @ptrCast(self)), folders_);
            }
            pub inline fn commitAndUpdateDerived(self: *const T, commit_options_: FsrmCommitOptions, apply_options_: FsrmTemplateApplyOptions, derived_objects_result_: ?*?*IFsrmDerivedObjectsResult) HRESULT {
                return @as(*const IFsrmAutoApplyQuota.VTable, @ptrCast(self.vtable)).CommitAndUpdateDerived(@as(*const IFsrmAutoApplyQuota, @ptrCast(self)), commit_options_, apply_options_, derived_objects_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmQuotaManager_Value = Guid.initString("8bb68c7d-19d8-4ffb-809e-be4fc1734014");
pub const IID_IFsrmQuotaManager = &IID_IFsrmQuotaManager_Value;
pub const IFsrmQuotaManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActionVariables: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaManager,
            variables: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActionVariableDescriptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaManager,
            descriptions: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQuota: *const fn (
            self: *const IFsrmQuotaManager,
            path: ?BSTR,
            quota: ?*?*IFsrmQuota,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAutoApplyQuota: *const fn (
            self: *const IFsrmQuotaManager,
            quota_template_name: ?BSTR,
            path: ?BSTR,
            quota: ?*?*IFsrmAutoApplyQuota,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQuota: *const fn (
            self: *const IFsrmQuotaManager,
            path: ?BSTR,
            quota: ?*?*IFsrmQuota,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoApplyQuota: *const fn (
            self: *const IFsrmQuotaManager,
            path: ?BSTR,
            quota: ?*?*IFsrmAutoApplyQuota,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRestrictiveQuota: *const fn (
            self: *const IFsrmQuotaManager,
            path: ?BSTR,
            quota: ?*?*IFsrmQuota,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumQuotas: *const fn (
            self: *const IFsrmQuotaManager,
            path: ?BSTR,
            options: FsrmEnumOptions,
            quotas: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAutoApplyQuotas: *const fn (
            self: *const IFsrmQuotaManager,
            path: ?BSTR,
            options: FsrmEnumOptions,
            quotas: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEffectiveQuotas: *const fn (
            self: *const IFsrmQuotaManager,
            path: ?BSTR,
            options: FsrmEnumOptions,
            quotas: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scan: *const fn (
            self: *const IFsrmQuotaManager,
            str_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQuotaCollection: *const fn (
            self: *const IFsrmQuotaManager,
            collection: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getActionVariables(self: *const T, variables_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).get_ActionVariables(@as(*const IFsrmQuotaManager, @ptrCast(self)), variables_);
            }
            pub inline fn getActionVariableDescriptions(self: *const T, descriptions_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).get_ActionVariableDescriptions(@as(*const IFsrmQuotaManager, @ptrCast(self)), descriptions_);
            }
            pub inline fn createQuota(self: *const T, path_: ?BSTR, quota_: ?*?*IFsrmQuota) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).CreateQuota(@as(*const IFsrmQuotaManager, @ptrCast(self)), path_, quota_);
            }
            pub inline fn createAutoApplyQuota(self: *const T, quota_template_name_: ?BSTR, path_: ?BSTR, quota_: ?*?*IFsrmAutoApplyQuota) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).CreateAutoApplyQuota(@as(*const IFsrmQuotaManager, @ptrCast(self)), quota_template_name_, path_, quota_);
            }
            pub inline fn getQuota(self: *const T, path_: ?BSTR, quota_: ?*?*IFsrmQuota) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).GetQuota(@as(*const IFsrmQuotaManager, @ptrCast(self)), path_, quota_);
            }
            pub inline fn getAutoApplyQuota(self: *const T, path_: ?BSTR, quota_: ?*?*IFsrmAutoApplyQuota) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).GetAutoApplyQuota(@as(*const IFsrmQuotaManager, @ptrCast(self)), path_, quota_);
            }
            pub inline fn getRestrictiveQuota(self: *const T, path_: ?BSTR, quota_: ?*?*IFsrmQuota) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).GetRestrictiveQuota(@as(*const IFsrmQuotaManager, @ptrCast(self)), path_, quota_);
            }
            pub inline fn enumQuotas(self: *const T, path_: ?BSTR, options_: FsrmEnumOptions, quotas_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).EnumQuotas(@as(*const IFsrmQuotaManager, @ptrCast(self)), path_, options_, quotas_);
            }
            pub inline fn enumAutoApplyQuotas(self: *const T, path_: ?BSTR, options_: FsrmEnumOptions, quotas_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).EnumAutoApplyQuotas(@as(*const IFsrmQuotaManager, @ptrCast(self)), path_, options_, quotas_);
            }
            pub inline fn enumEffectiveQuotas(self: *const T, path_: ?BSTR, options_: FsrmEnumOptions, quotas_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).EnumEffectiveQuotas(@as(*const IFsrmQuotaManager, @ptrCast(self)), path_, options_, quotas_);
            }
            pub inline fn scan(self: *const T, str_path_: ?BSTR) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).Scan(@as(*const IFsrmQuotaManager, @ptrCast(self)), str_path_);
            }
            pub inline fn createQuotaCollection(self: *const T, collection_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmQuotaManager.VTable, @ptrCast(self.vtable)).CreateQuotaCollection(@as(*const IFsrmQuotaManager, @ptrCast(self)), collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmQuotaManagerEx_Value = Guid.initString("4846cb01-d430-494f-abb4-b1054999fb09");
pub const IID_IFsrmQuotaManagerEx = &IID_IFsrmQuotaManagerEx_Value;
pub const IFsrmQuotaManagerEx = extern struct {
    pub const VTable = extern struct {
        base: IFsrmQuotaManager.VTable,
        IsAffectedByQuota: *const fn (
            self: *const IFsrmQuotaManagerEx,
            path: ?BSTR,
            options: FsrmEnumOptions,
            affected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmQuotaManager.MethodMixin(T);
            pub inline fn isAffectedByQuota(self: *const T, path_: ?BSTR, options_: FsrmEnumOptions, affected_: ?*i16) HRESULT {
                return @as(*const IFsrmQuotaManagerEx.VTable, @ptrCast(self.vtable)).IsAffectedByQuota(@as(*const IFsrmQuotaManagerEx, @ptrCast(self)), path_, options_, affected_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmQuotaTemplate_Value = Guid.initString("a2efab31-295e-46bb-b976-e86d58b52e8b");
pub const IID_IFsrmQuotaTemplate = &IID_IFsrmQuotaTemplate_Value;
pub const IFsrmQuotaTemplate = extern struct {
    pub const VTable = extern struct {
        base: IFsrmQuotaBase.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaTemplate,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaTemplate,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTemplate: *const fn (
            self: *const IFsrmQuotaTemplate,
            quota_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitAndUpdateDerived: *const fn (
            self: *const IFsrmQuotaTemplate,
            commit_options: FsrmCommitOptions,
            apply_options: FsrmTemplateApplyOptions,
            derived_objects_result: ?*?*IFsrmDerivedObjectsResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmQuotaBase.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmQuotaTemplate.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmQuotaTemplate, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmQuotaTemplate.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFsrmQuotaTemplate, @ptrCast(self)), name_);
            }
            pub inline fn copyTemplate(self: *const T, quota_template_name_: ?BSTR) HRESULT {
                return @as(*const IFsrmQuotaTemplate.VTable, @ptrCast(self.vtable)).CopyTemplate(@as(*const IFsrmQuotaTemplate, @ptrCast(self)), quota_template_name_);
            }
            pub inline fn commitAndUpdateDerived(self: *const T, commit_options_: FsrmCommitOptions, apply_options_: FsrmTemplateApplyOptions, derived_objects_result_: ?*?*IFsrmDerivedObjectsResult) HRESULT {
                return @as(*const IFsrmQuotaTemplate.VTable, @ptrCast(self.vtable)).CommitAndUpdateDerived(@as(*const IFsrmQuotaTemplate, @ptrCast(self)), commit_options_, apply_options_, derived_objects_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmQuotaTemplateImported_Value = Guid.initString("9a2bf113-a329-44cc-809a-5c00fce8da40");
pub const IID_IFsrmQuotaTemplateImported = &IID_IFsrmQuotaTemplateImported_Value;
pub const IFsrmQuotaTemplateImported = extern struct {
    pub const VTable = extern struct {
        base: IFsrmQuotaTemplate.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OverwriteOnCommit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaTemplateImported,
            overwrite: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OverwriteOnCommit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmQuotaTemplateImported,
            overwrite: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmQuotaTemplate.MethodMixin(T);
            pub inline fn getOverwriteOnCommit(self: *const T, overwrite_: ?*i16) HRESULT {
                return @as(*const IFsrmQuotaTemplateImported.VTable, @ptrCast(self.vtable)).get_OverwriteOnCommit(@as(*const IFsrmQuotaTemplateImported, @ptrCast(self)), overwrite_);
            }
            pub inline fn putOverwriteOnCommit(self: *const T, overwrite_: i16) HRESULT {
                return @as(*const IFsrmQuotaTemplateImported.VTable, @ptrCast(self.vtable)).put_OverwriteOnCommit(@as(*const IFsrmQuotaTemplateImported, @ptrCast(self)), overwrite_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmQuotaTemplateManager_Value = Guid.initString("4173ac41-172d-4d52-963c-fdc7e415f717");
pub const IID_IFsrmQuotaTemplateManager = &IID_IFsrmQuotaTemplateManager_Value;
pub const IFsrmQuotaTemplateManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateTemplate: *const fn (
            self: *const IFsrmQuotaTemplateManager,
            quota_template: ?*?*IFsrmQuotaTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTemplate: *const fn (
            self: *const IFsrmQuotaTemplateManager,
            name: ?BSTR,
            quota_template: ?*?*IFsrmQuotaTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumTemplates: *const fn (
            self: *const IFsrmQuotaTemplateManager,
            options: FsrmEnumOptions,
            quota_templates: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportTemplates: *const fn (
            self: *const IFsrmQuotaTemplateManager,
            quota_template_names_array: ?*VARIANT,
            serialized_quota_templates: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportTemplates: *const fn (
            self: *const IFsrmQuotaTemplateManager,
            serialized_quota_templates: ?BSTR,
            quota_template_names_array: ?*VARIANT,
            quota_templates: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createTemplate(self: *const T, quota_template_: ?*?*IFsrmQuotaTemplate) HRESULT {
                return @as(*const IFsrmQuotaTemplateManager.VTable, @ptrCast(self.vtable)).CreateTemplate(@as(*const IFsrmQuotaTemplateManager, @ptrCast(self)), quota_template_);
            }
            pub inline fn getTemplate(self: *const T, name_: ?BSTR, quota_template_: ?*?*IFsrmQuotaTemplate) HRESULT {
                return @as(*const IFsrmQuotaTemplateManager.VTable, @ptrCast(self.vtable)).GetTemplate(@as(*const IFsrmQuotaTemplateManager, @ptrCast(self)), name_, quota_template_);
            }
            pub inline fn enumTemplates(self: *const T, options_: FsrmEnumOptions, quota_templates_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmQuotaTemplateManager.VTable, @ptrCast(self.vtable)).EnumTemplates(@as(*const IFsrmQuotaTemplateManager, @ptrCast(self)), options_, quota_templates_);
            }
            pub inline fn exportTemplates(self: *const T, quota_template_names_array_: ?*VARIANT, serialized_quota_templates_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmQuotaTemplateManager.VTable, @ptrCast(self.vtable)).ExportTemplates(@as(*const IFsrmQuotaTemplateManager, @ptrCast(self)), quota_template_names_array_, serialized_quota_templates_);
            }
            pub inline fn importTemplates(self: *const T, serialized_quota_templates_: ?BSTR, quota_template_names_array_: ?*VARIANT, quota_templates_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmQuotaTemplateManager.VTable, @ptrCast(self.vtable)).ImportTemplates(@as(*const IFsrmQuotaTemplateManager, @ptrCast(self)), serialized_quota_templates_, quota_template_names_array_, quota_templates_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileGroup_Value = Guid.initString("8dd04909-0e34-4d55-afaa-89e1f1a1bbb9");
pub const IID_IFsrmFileGroup = &IID_IFsrmFileGroup_Value;
pub const IFsrmFileGroup = extern struct {
    pub const VTable = extern struct {
        base: IFsrmObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileGroup,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileGroup,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Members: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileGroup,
            members: ?*?*IFsrmMutableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Members: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileGroup,
            members: ?*IFsrmMutableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NonMembers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileGroup,
            non_members: ?*?*IFsrmMutableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NonMembers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileGroup,
            non_members: ?*IFsrmMutableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmObject.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileGroup.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmFileGroup, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileGroup.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFsrmFileGroup, @ptrCast(self)), name_);
            }
            pub inline fn getMembers(self: *const T, members_: ?*?*IFsrmMutableCollection) HRESULT {
                return @as(*const IFsrmFileGroup.VTable, @ptrCast(self.vtable)).get_Members(@as(*const IFsrmFileGroup, @ptrCast(self)), members_);
            }
            pub inline fn putMembers(self: *const T, members_: ?*IFsrmMutableCollection) HRESULT {
                return @as(*const IFsrmFileGroup.VTable, @ptrCast(self.vtable)).put_Members(@as(*const IFsrmFileGroup, @ptrCast(self)), members_);
            }
            pub inline fn getNonMembers(self: *const T, non_members_: ?*?*IFsrmMutableCollection) HRESULT {
                return @as(*const IFsrmFileGroup.VTable, @ptrCast(self.vtable)).get_NonMembers(@as(*const IFsrmFileGroup, @ptrCast(self)), non_members_);
            }
            pub inline fn putNonMembers(self: *const T, non_members_: ?*IFsrmMutableCollection) HRESULT {
                return @as(*const IFsrmFileGroup.VTable, @ptrCast(self.vtable)).put_NonMembers(@as(*const IFsrmFileGroup, @ptrCast(self)), non_members_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileGroupImported_Value = Guid.initString("ad55f10b-5f11-4be7-94ef-d9ee2e470ded");
pub const IID_IFsrmFileGroupImported = &IID_IFsrmFileGroupImported_Value;
pub const IFsrmFileGroupImported = extern struct {
    pub const VTable = extern struct {
        base: IFsrmFileGroup.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OverwriteOnCommit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileGroupImported,
            overwrite: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OverwriteOnCommit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileGroupImported,
            overwrite: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmFileGroup.MethodMixin(T);
            pub inline fn getOverwriteOnCommit(self: *const T, overwrite_: ?*i16) HRESULT {
                return @as(*const IFsrmFileGroupImported.VTable, @ptrCast(self.vtable)).get_OverwriteOnCommit(@as(*const IFsrmFileGroupImported, @ptrCast(self)), overwrite_);
            }
            pub inline fn putOverwriteOnCommit(self: *const T, overwrite_: i16) HRESULT {
                return @as(*const IFsrmFileGroupImported.VTable, @ptrCast(self.vtable)).put_OverwriteOnCommit(@as(*const IFsrmFileGroupImported, @ptrCast(self)), overwrite_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileGroupManager_Value = Guid.initString("426677d5-018c-485c-8a51-20b86d00bdc4");
pub const IID_IFsrmFileGroupManager = &IID_IFsrmFileGroupManager_Value;
pub const IFsrmFileGroupManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateFileGroup: *const fn (
            self: *const IFsrmFileGroupManager,
            file_group: ?*?*IFsrmFileGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileGroup: *const fn (
            self: *const IFsrmFileGroupManager,
            name: ?BSTR,
            file_group: ?*?*IFsrmFileGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumFileGroups: *const fn (
            self: *const IFsrmFileGroupManager,
            options: FsrmEnumOptions,
            file_groups: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportFileGroups: *const fn (
            self: *const IFsrmFileGroupManager,
            file_group_names_array: ?*VARIANT,
            serialized_file_groups: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportFileGroups: *const fn (
            self: *const IFsrmFileGroupManager,
            serialized_file_groups: ?BSTR,
            file_group_names_array: ?*VARIANT,
            file_groups: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createFileGroup(self: *const T, file_group_: ?*?*IFsrmFileGroup) HRESULT {
                return @as(*const IFsrmFileGroupManager.VTable, @ptrCast(self.vtable)).CreateFileGroup(@as(*const IFsrmFileGroupManager, @ptrCast(self)), file_group_);
            }
            pub inline fn getFileGroup(self: *const T, name_: ?BSTR, file_group_: ?*?*IFsrmFileGroup) HRESULT {
                return @as(*const IFsrmFileGroupManager.VTable, @ptrCast(self.vtable)).GetFileGroup(@as(*const IFsrmFileGroupManager, @ptrCast(self)), name_, file_group_);
            }
            pub inline fn enumFileGroups(self: *const T, options_: FsrmEnumOptions, file_groups_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmFileGroupManager.VTable, @ptrCast(self.vtable)).EnumFileGroups(@as(*const IFsrmFileGroupManager, @ptrCast(self)), options_, file_groups_);
            }
            pub inline fn exportFileGroups(self: *const T, file_group_names_array_: ?*VARIANT, serialized_file_groups_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileGroupManager.VTable, @ptrCast(self.vtable)).ExportFileGroups(@as(*const IFsrmFileGroupManager, @ptrCast(self)), file_group_names_array_, serialized_file_groups_);
            }
            pub inline fn importFileGroups(self: *const T, serialized_file_groups_: ?BSTR, file_group_names_array_: ?*VARIANT, file_groups_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmFileGroupManager.VTable, @ptrCast(self.vtable)).ImportFileGroups(@as(*const IFsrmFileGroupManager, @ptrCast(self)), serialized_file_groups_, file_group_names_array_, file_groups_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileScreenBase_Value = Guid.initString("f3637e80-5b22-4a2b-a637-bbb642b41cfc");
pub const IID_IFsrmFileScreenBase = &IID_IFsrmFileScreenBase_Value;
pub const IFsrmFileScreenBase = extern struct {
    pub const VTable = extern struct {
        base: IFsrmObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BlockedFileGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenBase,
            block_list: ?*?*IFsrmMutableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BlockedFileGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenBase,
            block_list: ?*IFsrmMutableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileScreenFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenBase,
            file_screen_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileScreenFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenBase,
            file_screen_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAction: *const fn (
            self: *const IFsrmFileScreenBase,
            action_type: FsrmActionType,
            action: ?*?*IFsrmAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumActions: *const fn (
            self: *const IFsrmFileScreenBase,
            actions: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmObject.MethodMixin(T);
            pub inline fn getBlockedFileGroups(self: *const T, block_list_: ?*?*IFsrmMutableCollection) HRESULT {
                return @as(*const IFsrmFileScreenBase.VTable, @ptrCast(self.vtable)).get_BlockedFileGroups(@as(*const IFsrmFileScreenBase, @ptrCast(self)), block_list_);
            }
            pub inline fn putBlockedFileGroups(self: *const T, block_list_: ?*IFsrmMutableCollection) HRESULT {
                return @as(*const IFsrmFileScreenBase.VTable, @ptrCast(self.vtable)).put_BlockedFileGroups(@as(*const IFsrmFileScreenBase, @ptrCast(self)), block_list_);
            }
            pub inline fn getFileScreenFlags(self: *const T, file_screen_flags_: ?*i32) HRESULT {
                return @as(*const IFsrmFileScreenBase.VTable, @ptrCast(self.vtable)).get_FileScreenFlags(@as(*const IFsrmFileScreenBase, @ptrCast(self)), file_screen_flags_);
            }
            pub inline fn putFileScreenFlags(self: *const T, file_screen_flags_: i32) HRESULT {
                return @as(*const IFsrmFileScreenBase.VTable, @ptrCast(self.vtable)).put_FileScreenFlags(@as(*const IFsrmFileScreenBase, @ptrCast(self)), file_screen_flags_);
            }
            pub inline fn createAction(self: *const T, action_type_: FsrmActionType, action_: ?*?*IFsrmAction) HRESULT {
                return @as(*const IFsrmFileScreenBase.VTable, @ptrCast(self.vtable)).CreateAction(@as(*const IFsrmFileScreenBase, @ptrCast(self)), action_type_, action_);
            }
            pub inline fn enumActions(self: *const T, actions_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmFileScreenBase.VTable, @ptrCast(self.vtable)).EnumActions(@as(*const IFsrmFileScreenBase, @ptrCast(self)), actions_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileScreen_Value = Guid.initString("5f6325d3-ce88-4733-84c1-2d6aefc5ea07");
pub const IID_IFsrmFileScreen = &IID_IFsrmFileScreen_Value;
pub const IFsrmFileScreen = extern struct {
    pub const VTable = extern struct {
        base: IFsrmFileScreenBase.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreen,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceTemplateName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreen,
            file_screen_template_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MatchesSourceTemplate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreen,
            matches: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserSid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreen,
            user_sid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserAccount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreen,
            user_account: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyTemplate: *const fn (
            self: *const IFsrmFileScreen,
            file_screen_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmFileScreenBase.MethodMixin(T);
            pub inline fn getPath(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileScreen.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IFsrmFileScreen, @ptrCast(self)), path_);
            }
            pub inline fn getSourceTemplateName(self: *const T, file_screen_template_name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileScreen.VTable, @ptrCast(self.vtable)).get_SourceTemplateName(@as(*const IFsrmFileScreen, @ptrCast(self)), file_screen_template_name_);
            }
            pub inline fn getMatchesSourceTemplate(self: *const T, matches_: ?*i16) HRESULT {
                return @as(*const IFsrmFileScreen.VTable, @ptrCast(self.vtable)).get_MatchesSourceTemplate(@as(*const IFsrmFileScreen, @ptrCast(self)), matches_);
            }
            pub inline fn getUserSid(self: *const T, user_sid_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileScreen.VTable, @ptrCast(self.vtable)).get_UserSid(@as(*const IFsrmFileScreen, @ptrCast(self)), user_sid_);
            }
            pub inline fn getUserAccount(self: *const T, user_account_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileScreen.VTable, @ptrCast(self.vtable)).get_UserAccount(@as(*const IFsrmFileScreen, @ptrCast(self)), user_account_);
            }
            pub inline fn applyTemplate(self: *const T, file_screen_template_name_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileScreen.VTable, @ptrCast(self.vtable)).ApplyTemplate(@as(*const IFsrmFileScreen, @ptrCast(self)), file_screen_template_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileScreenException_Value = Guid.initString("bee7ce02-df77-4515-9389-78f01c5afc1a");
pub const IID_IFsrmFileScreenException = &IID_IFsrmFileScreenException_Value;
pub const IFsrmFileScreenException = extern struct {
    pub const VTable = extern struct {
        base: IFsrmObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenException,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowedFileGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenException,
            allow_list: ?*?*IFsrmMutableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowedFileGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenException,
            allow_list: ?*IFsrmMutableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmObject.MethodMixin(T);
            pub inline fn getPath(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileScreenException.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IFsrmFileScreenException, @ptrCast(self)), path_);
            }
            pub inline fn getAllowedFileGroups(self: *const T, allow_list_: ?*?*IFsrmMutableCollection) HRESULT {
                return @as(*const IFsrmFileScreenException.VTable, @ptrCast(self.vtable)).get_AllowedFileGroups(@as(*const IFsrmFileScreenException, @ptrCast(self)), allow_list_);
            }
            pub inline fn putAllowedFileGroups(self: *const T, allow_list_: ?*IFsrmMutableCollection) HRESULT {
                return @as(*const IFsrmFileScreenException.VTable, @ptrCast(self.vtable)).put_AllowedFileGroups(@as(*const IFsrmFileScreenException, @ptrCast(self)), allow_list_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileScreenManager_Value = Guid.initString("ff4fa04e-5a94-4bda-a3a0-d5b4d3c52eba");
pub const IID_IFsrmFileScreenManager = &IID_IFsrmFileScreenManager_Value;
pub const IFsrmFileScreenManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActionVariables: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenManager,
            variables: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActionVariableDescriptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenManager,
            descriptions: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFileScreen: *const fn (
            self: *const IFsrmFileScreenManager,
            path: ?BSTR,
            file_screen: ?*?*IFsrmFileScreen,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileScreen: *const fn (
            self: *const IFsrmFileScreenManager,
            path: ?BSTR,
            file_screen: ?*?*IFsrmFileScreen,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumFileScreens: *const fn (
            self: *const IFsrmFileScreenManager,
            path: ?BSTR,
            options: FsrmEnumOptions,
            file_screens: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFileScreenException: *const fn (
            self: *const IFsrmFileScreenManager,
            path: ?BSTR,
            file_screen_exception: ?*?*IFsrmFileScreenException,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileScreenException: *const fn (
            self: *const IFsrmFileScreenManager,
            path: ?BSTR,
            file_screen_exception: ?*?*IFsrmFileScreenException,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumFileScreenExceptions: *const fn (
            self: *const IFsrmFileScreenManager,
            path: ?BSTR,
            options: FsrmEnumOptions,
            file_screen_exceptions: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFileScreenCollection: *const fn (
            self: *const IFsrmFileScreenManager,
            collection: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getActionVariables(self: *const T, variables_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileScreenManager.VTable, @ptrCast(self.vtable)).get_ActionVariables(@as(*const IFsrmFileScreenManager, @ptrCast(self)), variables_);
            }
            pub inline fn getActionVariableDescriptions(self: *const T, descriptions_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileScreenManager.VTable, @ptrCast(self.vtable)).get_ActionVariableDescriptions(@as(*const IFsrmFileScreenManager, @ptrCast(self)), descriptions_);
            }
            pub inline fn createFileScreen(self: *const T, path_: ?BSTR, file_screen_: ?*?*IFsrmFileScreen) HRESULT {
                return @as(*const IFsrmFileScreenManager.VTable, @ptrCast(self.vtable)).CreateFileScreen(@as(*const IFsrmFileScreenManager, @ptrCast(self)), path_, file_screen_);
            }
            pub inline fn getFileScreen(self: *const T, path_: ?BSTR, file_screen_: ?*?*IFsrmFileScreen) HRESULT {
                return @as(*const IFsrmFileScreenManager.VTable, @ptrCast(self.vtable)).GetFileScreen(@as(*const IFsrmFileScreenManager, @ptrCast(self)), path_, file_screen_);
            }
            pub inline fn enumFileScreens(self: *const T, path_: ?BSTR, options_: FsrmEnumOptions, file_screens_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmFileScreenManager.VTable, @ptrCast(self.vtable)).EnumFileScreens(@as(*const IFsrmFileScreenManager, @ptrCast(self)), path_, options_, file_screens_);
            }
            pub inline fn createFileScreenException(self: *const T, path_: ?BSTR, file_screen_exception_: ?*?*IFsrmFileScreenException) HRESULT {
                return @as(*const IFsrmFileScreenManager.VTable, @ptrCast(self.vtable)).CreateFileScreenException(@as(*const IFsrmFileScreenManager, @ptrCast(self)), path_, file_screen_exception_);
            }
            pub inline fn getFileScreenException(self: *const T, path_: ?BSTR, file_screen_exception_: ?*?*IFsrmFileScreenException) HRESULT {
                return @as(*const IFsrmFileScreenManager.VTable, @ptrCast(self.vtable)).GetFileScreenException(@as(*const IFsrmFileScreenManager, @ptrCast(self)), path_, file_screen_exception_);
            }
            pub inline fn enumFileScreenExceptions(self: *const T, path_: ?BSTR, options_: FsrmEnumOptions, file_screen_exceptions_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmFileScreenManager.VTable, @ptrCast(self.vtable)).EnumFileScreenExceptions(@as(*const IFsrmFileScreenManager, @ptrCast(self)), path_, options_, file_screen_exceptions_);
            }
            pub inline fn createFileScreenCollection(self: *const T, collection_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmFileScreenManager.VTable, @ptrCast(self.vtable)).CreateFileScreenCollection(@as(*const IFsrmFileScreenManager, @ptrCast(self)), collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileScreenTemplate_Value = Guid.initString("205bebf8-dd93-452a-95a6-32b566b35828");
pub const IID_IFsrmFileScreenTemplate = &IID_IFsrmFileScreenTemplate_Value;
pub const IFsrmFileScreenTemplate = extern struct {
    pub const VTable = extern struct {
        base: IFsrmFileScreenBase.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenTemplate,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenTemplate,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTemplate: *const fn (
            self: *const IFsrmFileScreenTemplate,
            file_screen_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitAndUpdateDerived: *const fn (
            self: *const IFsrmFileScreenTemplate,
            commit_options: FsrmCommitOptions,
            apply_options: FsrmTemplateApplyOptions,
            derived_objects_result: ?*?*IFsrmDerivedObjectsResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmFileScreenBase.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileScreenTemplate.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmFileScreenTemplate, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileScreenTemplate.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFsrmFileScreenTemplate, @ptrCast(self)), name_);
            }
            pub inline fn copyTemplate(self: *const T, file_screen_template_name_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileScreenTemplate.VTable, @ptrCast(self.vtable)).CopyTemplate(@as(*const IFsrmFileScreenTemplate, @ptrCast(self)), file_screen_template_name_);
            }
            pub inline fn commitAndUpdateDerived(self: *const T, commit_options_: FsrmCommitOptions, apply_options_: FsrmTemplateApplyOptions, derived_objects_result_: ?*?*IFsrmDerivedObjectsResult) HRESULT {
                return @as(*const IFsrmFileScreenTemplate.VTable, @ptrCast(self.vtable)).CommitAndUpdateDerived(@as(*const IFsrmFileScreenTemplate, @ptrCast(self)), commit_options_, apply_options_, derived_objects_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileScreenTemplateImported_Value = Guid.initString("e1010359-3e5d-4ecd-9fe4-ef48622fdf30");
pub const IID_IFsrmFileScreenTemplateImported = &IID_IFsrmFileScreenTemplateImported_Value;
pub const IFsrmFileScreenTemplateImported = extern struct {
    pub const VTable = extern struct {
        base: IFsrmFileScreenTemplate.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OverwriteOnCommit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenTemplateImported,
            overwrite: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OverwriteOnCommit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileScreenTemplateImported,
            overwrite: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmFileScreenTemplate.MethodMixin(T);
            pub inline fn getOverwriteOnCommit(self: *const T, overwrite_: ?*i16) HRESULT {
                return @as(*const IFsrmFileScreenTemplateImported.VTable, @ptrCast(self.vtable)).get_OverwriteOnCommit(@as(*const IFsrmFileScreenTemplateImported, @ptrCast(self)), overwrite_);
            }
            pub inline fn putOverwriteOnCommit(self: *const T, overwrite_: i16) HRESULT {
                return @as(*const IFsrmFileScreenTemplateImported.VTable, @ptrCast(self.vtable)).put_OverwriteOnCommit(@as(*const IFsrmFileScreenTemplateImported, @ptrCast(self)), overwrite_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileScreenTemplateManager_Value = Guid.initString("cfe36cba-1949-4e74-a14f-f1d580ceaf13");
pub const IID_IFsrmFileScreenTemplateManager = &IID_IFsrmFileScreenTemplateManager_Value;
pub const IFsrmFileScreenTemplateManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateTemplate: *const fn (
            self: *const IFsrmFileScreenTemplateManager,
            file_screen_template: ?*?*IFsrmFileScreenTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTemplate: *const fn (
            self: *const IFsrmFileScreenTemplateManager,
            name: ?BSTR,
            file_screen_template: ?*?*IFsrmFileScreenTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumTemplates: *const fn (
            self: *const IFsrmFileScreenTemplateManager,
            options: FsrmEnumOptions,
            file_screen_templates: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportTemplates: *const fn (
            self: *const IFsrmFileScreenTemplateManager,
            file_screen_template_names_array: ?*VARIANT,
            serialized_file_screen_templates: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportTemplates: *const fn (
            self: *const IFsrmFileScreenTemplateManager,
            serialized_file_screen_templates: ?BSTR,
            file_screen_template_names_array: ?*VARIANT,
            file_screen_templates: ?*?*IFsrmCommittableCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createTemplate(self: *const T, file_screen_template_: ?*?*IFsrmFileScreenTemplate) HRESULT {
                return @as(*const IFsrmFileScreenTemplateManager.VTable, @ptrCast(self.vtable)).CreateTemplate(@as(*const IFsrmFileScreenTemplateManager, @ptrCast(self)), file_screen_template_);
            }
            pub inline fn getTemplate(self: *const T, name_: ?BSTR, file_screen_template_: ?*?*IFsrmFileScreenTemplate) HRESULT {
                return @as(*const IFsrmFileScreenTemplateManager.VTable, @ptrCast(self.vtable)).GetTemplate(@as(*const IFsrmFileScreenTemplateManager, @ptrCast(self)), name_, file_screen_template_);
            }
            pub inline fn enumTemplates(self: *const T, options_: FsrmEnumOptions, file_screen_templates_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmFileScreenTemplateManager.VTable, @ptrCast(self.vtable)).EnumTemplates(@as(*const IFsrmFileScreenTemplateManager, @ptrCast(self)), options_, file_screen_templates_);
            }
            pub inline fn exportTemplates(self: *const T, file_screen_template_names_array_: ?*VARIANT, serialized_file_screen_templates_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileScreenTemplateManager.VTable, @ptrCast(self.vtable)).ExportTemplates(@as(*const IFsrmFileScreenTemplateManager, @ptrCast(self)), file_screen_template_names_array_, serialized_file_screen_templates_);
            }
            pub inline fn importTemplates(self: *const T, serialized_file_screen_templates_: ?BSTR, file_screen_template_names_array_: ?*VARIANT, file_screen_templates_: ?*?*IFsrmCommittableCollection) HRESULT {
                return @as(*const IFsrmFileScreenTemplateManager.VTable, @ptrCast(self.vtable)).ImportTemplates(@as(*const IFsrmFileScreenTemplateManager, @ptrCast(self)), serialized_file_screen_templates_, file_screen_template_names_array_, file_screen_templates_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmReportManager_Value = Guid.initString("27b899fe-6ffa-4481-a184-d3daade8a02b");
pub const IID_IFsrmReportManager = &IID_IFsrmReportManager_Value;
pub const IFsrmReportManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        EnumReportJobs: *const fn (
            self: *const IFsrmReportManager,
            options: FsrmEnumOptions,
            report_jobs: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateReportJob: *const fn (
            self: *const IFsrmReportManager,
            report_job: ?*?*IFsrmReportJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReportJob: *const fn (
            self: *const IFsrmReportManager,
            task_name: ?BSTR,
            report_job: ?*?*IFsrmReportJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputDirectory: *const fn (
            self: *const IFsrmReportManager,
            context: FsrmReportGenerationContext,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputDirectory: *const fn (
            self: *const IFsrmReportManager,
            context: FsrmReportGenerationContext,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsFilterValidForReportType: *const fn (
            self: *const IFsrmReportManager,
            report_type: FsrmReportType,
            filter: FsrmReportFilter,
            valid: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultFilter: *const fn (
            self: *const IFsrmReportManager,
            report_type: FsrmReportType,
            filter: FsrmReportFilter,
            filter_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultFilter: *const fn (
            self: *const IFsrmReportManager,
            report_type: FsrmReportType,
            filter: FsrmReportFilter,
            filter_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReportSizeLimit: *const fn (
            self: *const IFsrmReportManager,
            limit: FsrmReportLimit,
            limit_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReportSizeLimit: *const fn (
            self: *const IFsrmReportManager,
            limit: FsrmReportLimit,
            limit_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn enumReportJobs(self: *const T, options_: FsrmEnumOptions, report_jobs_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).EnumReportJobs(@as(*const IFsrmReportManager, @ptrCast(self)), options_, report_jobs_);
            }
            pub inline fn createReportJob(self: *const T, report_job_: ?*?*IFsrmReportJob) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).CreateReportJob(@as(*const IFsrmReportManager, @ptrCast(self)), report_job_);
            }
            pub inline fn getReportJob(self: *const T, task_name_: ?BSTR, report_job_: ?*?*IFsrmReportJob) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).GetReportJob(@as(*const IFsrmReportManager, @ptrCast(self)), task_name_, report_job_);
            }
            pub inline fn getOutputDirectory(self: *const T, context_: FsrmReportGenerationContext, path_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).GetOutputDirectory(@as(*const IFsrmReportManager, @ptrCast(self)), context_, path_);
            }
            pub inline fn setOutputDirectory(self: *const T, context_: FsrmReportGenerationContext, path_: ?BSTR) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).SetOutputDirectory(@as(*const IFsrmReportManager, @ptrCast(self)), context_, path_);
            }
            pub inline fn isFilterValidForReportType(self: *const T, report_type_: FsrmReportType, filter_: FsrmReportFilter, valid_: ?*i16) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).IsFilterValidForReportType(@as(*const IFsrmReportManager, @ptrCast(self)), report_type_, filter_, valid_);
            }
            pub inline fn getDefaultFilter(self: *const T, report_type_: FsrmReportType, filter_: FsrmReportFilter, filter_value_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).GetDefaultFilter(@as(*const IFsrmReportManager, @ptrCast(self)), report_type_, filter_, filter_value_);
            }
            pub inline fn setDefaultFilter(self: *const T, report_type_: FsrmReportType, filter_: FsrmReportFilter, filter_value_: VARIANT) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).SetDefaultFilter(@as(*const IFsrmReportManager, @ptrCast(self)), report_type_, filter_, filter_value_);
            }
            pub inline fn getReportSizeLimit(self: *const T, limit_: FsrmReportLimit, limit_value_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).GetReportSizeLimit(@as(*const IFsrmReportManager, @ptrCast(self)), limit_, limit_value_);
            }
            pub inline fn setReportSizeLimit(self: *const T, limit_: FsrmReportLimit, limit_value_: VARIANT) HRESULT {
                return @as(*const IFsrmReportManager.VTable, @ptrCast(self.vtable)).SetReportSizeLimit(@as(*const IFsrmReportManager, @ptrCast(self)), limit_, limit_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmReportJob_Value = Guid.initString("38e87280-715c-4c7d-a280-ea1651a19fef");
pub const IID_IFsrmReportJob = &IID_IFsrmReportJob_Value;
pub const IFsrmReportJob = extern struct {
    pub const VTable = extern struct {
        base: IFsrmObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Task: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            task_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Task: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            task_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NamespaceRoots: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            namespace_roots: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NamespaceRoots: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            namespace_roots: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Formats: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            formats: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Formats: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            formats: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            mail_to: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            mail_to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunningStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            running_status: ?*FsrmReportRunningStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastRun: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            last_run: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastError: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            last_error: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastGeneratedInDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReportJob,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumReports: *const fn (
            self: *const IFsrmReportJob,
            reports: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateReport: *const fn (
            self: *const IFsrmReportJob,
            report_type: FsrmReportType,
            report: ?*?*IFsrmReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Run: *const fn (
            self: *const IFsrmReportJob,
            context: FsrmReportGenerationContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForCompletion: *const fn (
            self: *const IFsrmReportJob,
            wait_seconds: i32,
            completed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IFsrmReportJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmObject.MethodMixin(T);
            pub inline fn getTask(self: *const T, task_name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).get_Task(@as(*const IFsrmReportJob, @ptrCast(self)), task_name_);
            }
            pub inline fn putTask(self: *const T, task_name_: ?BSTR) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).put_Task(@as(*const IFsrmReportJob, @ptrCast(self)), task_name_);
            }
            pub inline fn getNamespaceRoots(self: *const T, namespace_roots_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).get_NamespaceRoots(@as(*const IFsrmReportJob, @ptrCast(self)), namespace_roots_);
            }
            pub inline fn putNamespaceRoots(self: *const T, namespace_roots_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).put_NamespaceRoots(@as(*const IFsrmReportJob, @ptrCast(self)), namespace_roots_);
            }
            pub inline fn getFormats(self: *const T, formats_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).get_Formats(@as(*const IFsrmReportJob, @ptrCast(self)), formats_);
            }
            pub inline fn putFormats(self: *const T, formats_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).put_Formats(@as(*const IFsrmReportJob, @ptrCast(self)), formats_);
            }
            pub inline fn getMailTo(self: *const T, mail_to_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).get_MailTo(@as(*const IFsrmReportJob, @ptrCast(self)), mail_to_);
            }
            pub inline fn putMailTo(self: *const T, mail_to_: ?BSTR) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).put_MailTo(@as(*const IFsrmReportJob, @ptrCast(self)), mail_to_);
            }
            pub inline fn getRunningStatus(self: *const T, running_status_: ?*FsrmReportRunningStatus) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).get_RunningStatus(@as(*const IFsrmReportJob, @ptrCast(self)), running_status_);
            }
            pub inline fn getLastRun(self: *const T, last_run_: ?*f64) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).get_LastRun(@as(*const IFsrmReportJob, @ptrCast(self)), last_run_);
            }
            pub inline fn getLastError(self: *const T, last_error_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).get_LastError(@as(*const IFsrmReportJob, @ptrCast(self)), last_error_);
            }
            pub inline fn getLastGeneratedInDirectory(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).get_LastGeneratedInDirectory(@as(*const IFsrmReportJob, @ptrCast(self)), path_);
            }
            pub inline fn enumReports(self: *const T, reports_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).EnumReports(@as(*const IFsrmReportJob, @ptrCast(self)), reports_);
            }
            pub inline fn createReport(self: *const T, report_type_: FsrmReportType, report_: ?*?*IFsrmReport) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).CreateReport(@as(*const IFsrmReportJob, @ptrCast(self)), report_type_, report_);
            }
            pub inline fn run(self: *const T, context_: FsrmReportGenerationContext) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).Run(@as(*const IFsrmReportJob, @ptrCast(self)), context_);
            }
            pub inline fn waitForCompletion(self: *const T, wait_seconds_: i32, completed_: ?*i16) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).WaitForCompletion(@as(*const IFsrmReportJob, @ptrCast(self)), wait_seconds_, completed_);
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IFsrmReportJob.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IFsrmReportJob, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmReport_Value = Guid.initString("d8cc81d9-46b8-4fa4-bfa5-4aa9dec9b638");
pub const IID_IFsrmReport = &IID_IFsrmReport_Value;
pub const IFsrmReport = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReport,
            report_type: ?*FsrmReportType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReport,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReport,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReport,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReport,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastGeneratedFileNamePrefix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmReport,
            prefix: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilter: *const fn (
            self: *const IFsrmReport,
            filter: FsrmReportFilter,
            filter_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFilter: *const fn (
            self: *const IFsrmReport,
            filter: FsrmReportFilter,
            filter_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFsrmReport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getType(self: *const T, report_type_: ?*FsrmReportType) HRESULT {
                return @as(*const IFsrmReport.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IFsrmReport, @ptrCast(self)), report_type_);
            }
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmReport.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmReport, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmReport.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFsrmReport, @ptrCast(self)), name_);
            }
            pub inline fn getDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmReport.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IFsrmReport, @ptrCast(self)), description_);
            }
            pub inline fn putDescription(self: *const T, description_: ?BSTR) HRESULT {
                return @as(*const IFsrmReport.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IFsrmReport, @ptrCast(self)), description_);
            }
            pub inline fn getLastGeneratedFileNamePrefix(self: *const T, prefix_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmReport.VTable, @ptrCast(self.vtable)).get_LastGeneratedFileNamePrefix(@as(*const IFsrmReport, @ptrCast(self)), prefix_);
            }
            pub inline fn getFilter(self: *const T, filter_: FsrmReportFilter, filter_value_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmReport.VTable, @ptrCast(self.vtable)).GetFilter(@as(*const IFsrmReport, @ptrCast(self)), filter_, filter_value_);
            }
            pub inline fn setFilter(self: *const T, filter_: FsrmReportFilter, filter_value_: VARIANT) HRESULT {
                return @as(*const IFsrmReport.VTable, @ptrCast(self.vtable)).SetFilter(@as(*const IFsrmReport, @ptrCast(self)), filter_, filter_value_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFsrmReport.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFsrmReport, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmReportScheduler_Value = Guid.initString("6879caf9-6617-4484-8719-71c3d8645f94");
pub const IID_IFsrmReportScheduler = &IID_IFsrmReportScheduler_Value;
pub const IFsrmReportScheduler = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        VerifyNamespaces: *const fn (
            self: *const IFsrmReportScheduler,
            namespaces_safe_array: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScheduleTask: *const fn (
            self: *const IFsrmReportScheduler,
            task_name: ?BSTR,
            namespaces_safe_array: ?*VARIANT,
            serialized_task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyScheduleTask: *const fn (
            self: *const IFsrmReportScheduler,
            task_name: ?BSTR,
            namespaces_safe_array: ?*VARIANT,
            serialized_task: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteScheduleTask: *const fn (
            self: *const IFsrmReportScheduler,
            task_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn verifyNamespaces(self: *const T, namespaces_safe_array_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmReportScheduler.VTable, @ptrCast(self.vtable)).VerifyNamespaces(@as(*const IFsrmReportScheduler, @ptrCast(self)), namespaces_safe_array_);
            }
            pub inline fn createScheduleTask(self: *const T, task_name_: ?BSTR, namespaces_safe_array_: ?*VARIANT, serialized_task_: ?BSTR) HRESULT {
                return @as(*const IFsrmReportScheduler.VTable, @ptrCast(self.vtable)).CreateScheduleTask(@as(*const IFsrmReportScheduler, @ptrCast(self)), task_name_, namespaces_safe_array_, serialized_task_);
            }
            pub inline fn modifyScheduleTask(self: *const T, task_name_: ?BSTR, namespaces_safe_array_: ?*VARIANT, serialized_task_: ?BSTR) HRESULT {
                return @as(*const IFsrmReportScheduler.VTable, @ptrCast(self.vtable)).ModifyScheduleTask(@as(*const IFsrmReportScheduler, @ptrCast(self)), task_name_, namespaces_safe_array_, serialized_task_);
            }
            pub inline fn deleteScheduleTask(self: *const T, task_name_: ?BSTR) HRESULT {
                return @as(*const IFsrmReportScheduler.VTable, @ptrCast(self.vtable)).DeleteScheduleTask(@as(*const IFsrmReportScheduler, @ptrCast(self)), task_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileManagementJobManager_Value = Guid.initString("ee321ecb-d95e-48e9-907c-c7685a013235");
pub const IID_IFsrmFileManagementJobManager = &IID_IFsrmFileManagementJobManager_Value;
pub const IFsrmFileManagementJobManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActionVariables: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJobManager,
            variables: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActionVariableDescriptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJobManager,
            descriptions: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumFileManagementJobs: *const fn (
            self: *const IFsrmFileManagementJobManager,
            options: FsrmEnumOptions,
            file_management_jobs: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFileManagementJob: *const fn (
            self: *const IFsrmFileManagementJobManager,
            file_management_job: ?*?*IFsrmFileManagementJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileManagementJob: *const fn (
            self: *const IFsrmFileManagementJobManager,
            name: ?BSTR,
            file_management_job: ?*?*IFsrmFileManagementJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getActionVariables(self: *const T, variables_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileManagementJobManager.VTable, @ptrCast(self.vtable)).get_ActionVariables(@as(*const IFsrmFileManagementJobManager, @ptrCast(self)), variables_);
            }
            pub inline fn getActionVariableDescriptions(self: *const T, descriptions_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileManagementJobManager.VTable, @ptrCast(self.vtable)).get_ActionVariableDescriptions(@as(*const IFsrmFileManagementJobManager, @ptrCast(self)), descriptions_);
            }
            pub inline fn enumFileManagementJobs(self: *const T, options_: FsrmEnumOptions, file_management_jobs_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmFileManagementJobManager.VTable, @ptrCast(self.vtable)).EnumFileManagementJobs(@as(*const IFsrmFileManagementJobManager, @ptrCast(self)), options_, file_management_jobs_);
            }
            pub inline fn createFileManagementJob(self: *const T, file_management_job_: ?*?*IFsrmFileManagementJob) HRESULT {
                return @as(*const IFsrmFileManagementJobManager.VTable, @ptrCast(self.vtable)).CreateFileManagementJob(@as(*const IFsrmFileManagementJobManager, @ptrCast(self)), file_management_job_);
            }
            pub inline fn getFileManagementJob(self: *const T, name_: ?BSTR, file_management_job_: ?*?*IFsrmFileManagementJob) HRESULT {
                return @as(*const IFsrmFileManagementJobManager.VTable, @ptrCast(self.vtable)).GetFileManagementJob(@as(*const IFsrmFileManagementJobManager, @ptrCast(self)), name_, file_management_job_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmFileManagementJob_Value = Guid.initString("0770687e-9f36-4d6f-8778-599d188461c9");
pub const IID_IFsrmFileManagementJob = &IID_IFsrmFileManagementJob_Value;
pub const IFsrmFileManagementJob = extern struct {
    pub const VTable = extern struct {
        base: IFsrmObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NamespaceRoots: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            namespace_roots: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NamespaceRoots: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            namespace_roots: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OperationType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            operation_type: ?*FsrmFileManagementType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OperationType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            operation_type: FsrmFileManagementType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExpirationDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            expiration_directory: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExpirationDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            expiration_directory: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CustomAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            action: ?*?*IFsrmActionCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Notifications: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            notifications: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Logging: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            logging_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Logging: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            logging_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReportEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            report_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReportEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            report_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Formats: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            formats: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Formats: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            formats: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            mail_to: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            mail_to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysSinceFileCreated: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            days_since_creation: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysSinceFileCreated: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            days_since_creation: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysSinceFileLastAccessed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            days_since_access: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysSinceFileLastAccessed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            days_since_access: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysSinceFileLastModified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            days_since_modify: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysSinceFileLastModified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            days_since_modify: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyConditions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            property_conditions: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FromDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            from_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FromDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            from_date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Task: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            task_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Task: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            task_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            parameters: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            parameters: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunningStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            running_status: ?*FsrmReportRunningStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastError: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            last_error: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastReportPathWithoutExtension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastRun: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            last_run: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileNamePattern: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            file_name_pattern: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FileNamePattern: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileManagementJob,
            file_name_pattern: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Run: *const fn (
            self: *const IFsrmFileManagementJob,
            context: FsrmReportGenerationContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForCompletion: *const fn (
            self: *const IFsrmFileManagementJob,
            wait_seconds: i32,
            completed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IFsrmFileManagementJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNotification: *const fn (
            self: *const IFsrmFileManagementJob,
            days: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteNotification: *const fn (
            self: *const IFsrmFileManagementJob,
            days: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyNotification: *const fn (
            self: *const IFsrmFileManagementJob,
            days: i32,
            new_days: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNotificationAction: *const fn (
            self: *const IFsrmFileManagementJob,
            days: i32,
            action_type: FsrmActionType,
            action: ?*?*IFsrmAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumNotificationActions: *const fn (
            self: *const IFsrmFileManagementJob,
            days: i32,
            actions: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePropertyCondition: *const fn (
            self: *const IFsrmFileManagementJob,
            name: ?BSTR,
            property_condition: ?*?*IFsrmPropertyCondition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomAction: *const fn (
            self: *const IFsrmFileManagementJob,
            custom_action: ?*?*IFsrmActionCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmObject.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmFileManagementJob, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFsrmFileManagementJob, @ptrCast(self)), name_);
            }
            pub inline fn getNamespaceRoots(self: *const T, namespace_roots_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_NamespaceRoots(@as(*const IFsrmFileManagementJob, @ptrCast(self)), namespace_roots_);
            }
            pub inline fn putNamespaceRoots(self: *const T, namespace_roots_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_NamespaceRoots(@as(*const IFsrmFileManagementJob, @ptrCast(self)), namespace_roots_);
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IFsrmFileManagementJob, @ptrCast(self)), enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IFsrmFileManagementJob, @ptrCast(self)), enabled_);
            }
            pub inline fn getOperationType(self: *const T, operation_type_: ?*FsrmFileManagementType) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_OperationType(@as(*const IFsrmFileManagementJob, @ptrCast(self)), operation_type_);
            }
            pub inline fn putOperationType(self: *const T, operation_type_: FsrmFileManagementType) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_OperationType(@as(*const IFsrmFileManagementJob, @ptrCast(self)), operation_type_);
            }
            pub inline fn getExpirationDirectory(self: *const T, expiration_directory_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_ExpirationDirectory(@as(*const IFsrmFileManagementJob, @ptrCast(self)), expiration_directory_);
            }
            pub inline fn putExpirationDirectory(self: *const T, expiration_directory_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_ExpirationDirectory(@as(*const IFsrmFileManagementJob, @ptrCast(self)), expiration_directory_);
            }
            pub inline fn getCustomAction(self: *const T, action_: ?*?*IFsrmActionCommand) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_CustomAction(@as(*const IFsrmFileManagementJob, @ptrCast(self)), action_);
            }
            pub inline fn getNotifications(self: *const T, notifications_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_Notifications(@as(*const IFsrmFileManagementJob, @ptrCast(self)), notifications_);
            }
            pub inline fn getLogging(self: *const T, logging_flags_: ?*i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_Logging(@as(*const IFsrmFileManagementJob, @ptrCast(self)), logging_flags_);
            }
            pub inline fn putLogging(self: *const T, logging_flags_: i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_Logging(@as(*const IFsrmFileManagementJob, @ptrCast(self)), logging_flags_);
            }
            pub inline fn getReportEnabled(self: *const T, report_enabled_: ?*i16) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_ReportEnabled(@as(*const IFsrmFileManagementJob, @ptrCast(self)), report_enabled_);
            }
            pub inline fn putReportEnabled(self: *const T, report_enabled_: i16) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_ReportEnabled(@as(*const IFsrmFileManagementJob, @ptrCast(self)), report_enabled_);
            }
            pub inline fn getFormats(self: *const T, formats_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_Formats(@as(*const IFsrmFileManagementJob, @ptrCast(self)), formats_);
            }
            pub inline fn putFormats(self: *const T, formats_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_Formats(@as(*const IFsrmFileManagementJob, @ptrCast(self)), formats_);
            }
            pub inline fn getMailTo(self: *const T, mail_to_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_MailTo(@as(*const IFsrmFileManagementJob, @ptrCast(self)), mail_to_);
            }
            pub inline fn putMailTo(self: *const T, mail_to_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_MailTo(@as(*const IFsrmFileManagementJob, @ptrCast(self)), mail_to_);
            }
            pub inline fn getDaysSinceFileCreated(self: *const T, days_since_creation_: ?*i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_DaysSinceFileCreated(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_since_creation_);
            }
            pub inline fn putDaysSinceFileCreated(self: *const T, days_since_creation_: i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_DaysSinceFileCreated(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_since_creation_);
            }
            pub inline fn getDaysSinceFileLastAccessed(self: *const T, days_since_access_: ?*i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_DaysSinceFileLastAccessed(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_since_access_);
            }
            pub inline fn putDaysSinceFileLastAccessed(self: *const T, days_since_access_: i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_DaysSinceFileLastAccessed(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_since_access_);
            }
            pub inline fn getDaysSinceFileLastModified(self: *const T, days_since_modify_: ?*i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_DaysSinceFileLastModified(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_since_modify_);
            }
            pub inline fn putDaysSinceFileLastModified(self: *const T, days_since_modify_: i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_DaysSinceFileLastModified(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_since_modify_);
            }
            pub inline fn getPropertyConditions(self: *const T, property_conditions_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_PropertyConditions(@as(*const IFsrmFileManagementJob, @ptrCast(self)), property_conditions_);
            }
            pub inline fn getFromDate(self: *const T, from_date_: ?*f64) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_FromDate(@as(*const IFsrmFileManagementJob, @ptrCast(self)), from_date_);
            }
            pub inline fn putFromDate(self: *const T, from_date_: f64) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_FromDate(@as(*const IFsrmFileManagementJob, @ptrCast(self)), from_date_);
            }
            pub inline fn getTask(self: *const T, task_name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_Task(@as(*const IFsrmFileManagementJob, @ptrCast(self)), task_name_);
            }
            pub inline fn putTask(self: *const T, task_name_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_Task(@as(*const IFsrmFileManagementJob, @ptrCast(self)), task_name_);
            }
            pub inline fn getParameters(self: *const T, parameters_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_Parameters(@as(*const IFsrmFileManagementJob, @ptrCast(self)), parameters_);
            }
            pub inline fn putParameters(self: *const T, parameters_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_Parameters(@as(*const IFsrmFileManagementJob, @ptrCast(self)), parameters_);
            }
            pub inline fn getRunningStatus(self: *const T, running_status_: ?*FsrmReportRunningStatus) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_RunningStatus(@as(*const IFsrmFileManagementJob, @ptrCast(self)), running_status_);
            }
            pub inline fn getLastError(self: *const T, last_error_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_LastError(@as(*const IFsrmFileManagementJob, @ptrCast(self)), last_error_);
            }
            pub inline fn getLastReportPathWithoutExtension(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_LastReportPathWithoutExtension(@as(*const IFsrmFileManagementJob, @ptrCast(self)), path_);
            }
            pub inline fn getLastRun(self: *const T, last_run_: ?*f64) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_LastRun(@as(*const IFsrmFileManagementJob, @ptrCast(self)), last_run_);
            }
            pub inline fn getFileNamePattern(self: *const T, file_name_pattern_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).get_FileNamePattern(@as(*const IFsrmFileManagementJob, @ptrCast(self)), file_name_pattern_);
            }
            pub inline fn putFileNamePattern(self: *const T, file_name_pattern_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).put_FileNamePattern(@as(*const IFsrmFileManagementJob, @ptrCast(self)), file_name_pattern_);
            }
            pub inline fn run(self: *const T, context_: FsrmReportGenerationContext) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).Run(@as(*const IFsrmFileManagementJob, @ptrCast(self)), context_);
            }
            pub inline fn waitForCompletion(self: *const T, wait_seconds_: i32, completed_: ?*i16) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).WaitForCompletion(@as(*const IFsrmFileManagementJob, @ptrCast(self)), wait_seconds_, completed_);
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IFsrmFileManagementJob, @ptrCast(self)));
            }
            pub inline fn addNotification(self: *const T, days_: i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).AddNotification(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_);
            }
            pub inline fn deleteNotification(self: *const T, days_: i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).DeleteNotification(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_);
            }
            pub inline fn modifyNotification(self: *const T, days_: i32, new_days_: i32) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).ModifyNotification(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_, new_days_);
            }
            pub inline fn createNotificationAction(self: *const T, days_: i32, action_type_: FsrmActionType, action_: ?*?*IFsrmAction) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).CreateNotificationAction(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_, action_type_, action_);
            }
            pub inline fn enumNotificationActions(self: *const T, days_: i32, actions_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).EnumNotificationActions(@as(*const IFsrmFileManagementJob, @ptrCast(self)), days_, actions_);
            }
            pub inline fn createPropertyCondition(self: *const T, name_: ?BSTR, property_condition_: ?*?*IFsrmPropertyCondition) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).CreatePropertyCondition(@as(*const IFsrmFileManagementJob, @ptrCast(self)), name_, property_condition_);
            }
            pub inline fn createCustomAction(self: *const T, custom_action_: ?*?*IFsrmActionCommand) HRESULT {
                return @as(*const IFsrmFileManagementJob.VTable, @ptrCast(self.vtable)).CreateCustomAction(@as(*const IFsrmFileManagementJob, @ptrCast(self)), custom_action_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmPropertyCondition_Value = Guid.initString("326af66f-2ac0-4f68-bf8c-4759f054fa29");
pub const IID_IFsrmPropertyCondition = &IID_IFsrmPropertyCondition_Value;
pub const IFsrmPropertyCondition = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyCondition,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyCondition,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyCondition,
            type: ?*FsrmPropertyConditionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyCondition,
            type: FsrmPropertyConditionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyCondition,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyCondition,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFsrmPropertyCondition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyCondition.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmPropertyCondition, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmPropertyCondition.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFsrmPropertyCondition, @ptrCast(self)), name_);
            }
            pub inline fn getType(self: *const T, type_: ?*FsrmPropertyConditionType) HRESULT {
                return @as(*const IFsrmPropertyCondition.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IFsrmPropertyCondition, @ptrCast(self)), type_);
            }
            pub inline fn putType(self: *const T, type_: FsrmPropertyConditionType) HRESULT {
                return @as(*const IFsrmPropertyCondition.VTable, @ptrCast(self.vtable)).put_Type(@as(*const IFsrmPropertyCondition, @ptrCast(self)), type_);
            }
            pub inline fn getValue(self: *const T, value_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyCondition.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IFsrmPropertyCondition, @ptrCast(self)), value_);
            }
            pub inline fn putValue(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IFsrmPropertyCondition.VTable, @ptrCast(self.vtable)).put_Value(@as(*const IFsrmPropertyCondition, @ptrCast(self)), value_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFsrmPropertyCondition.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFsrmPropertyCondition, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFsrmFileCondition_Value = Guid.initString("70684ffc-691a-4a1a-b922-97752e138cc1");
pub const IID_IFsrmFileCondition = &IID_IFsrmFileCondition_Value;
pub const IFsrmFileCondition = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileCondition,
            p_val: ?*FsrmFileConditionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFsrmFileCondition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getType(self: *const T, p_val_: ?*FsrmFileConditionType) HRESULT {
                return @as(*const IFsrmFileCondition.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IFsrmFileCondition, @ptrCast(self)), p_val_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFsrmFileCondition.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFsrmFileCondition, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IFsrmFileConditionProperty_Value = Guid.initString("81926775-b981-4479-988f-da171d627360");
pub const IID_IFsrmFileConditionProperty = &IID_IFsrmFileConditionProperty_Value;
pub const IFsrmFileConditionProperty = extern struct {
    pub const VTable = extern struct {
        base: IFsrmFileCondition.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PropertyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            p_val: ?*FsrmFileSystemPropertyId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PropertyId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            new_val: FsrmFileSystemPropertyId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Operator: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            p_val: ?*FsrmPropertyConditionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Operator: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            new_val: FsrmPropertyConditionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ValueType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            p_val: ?*FsrmPropertyValueType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ValueType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            new_val: FsrmPropertyValueType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmFileConditionProperty,
            new_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmFileCondition.MethodMixin(T);
            pub inline fn getPropertyName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).get_PropertyName(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), p_val_);
            }
            pub inline fn putPropertyName(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).put_PropertyName(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), new_val_);
            }
            pub inline fn getPropertyId(self: *const T, p_val_: ?*FsrmFileSystemPropertyId) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).get_PropertyId(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), p_val_);
            }
            pub inline fn putPropertyId(self: *const T, new_val_: FsrmFileSystemPropertyId) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).put_PropertyId(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), new_val_);
            }
            pub inline fn getOperator(self: *const T, p_val_: ?*FsrmPropertyConditionType) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).get_Operator(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), p_val_);
            }
            pub inline fn putOperator(self: *const T, new_val_: FsrmPropertyConditionType) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).put_Operator(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), new_val_);
            }
            pub inline fn getValueType(self: *const T, p_val_: ?*FsrmPropertyValueType) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).get_ValueType(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), p_val_);
            }
            pub inline fn putValueType(self: *const T, new_val_: FsrmPropertyValueType) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).put_ValueType(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), new_val_);
            }
            pub inline fn getValue(self: *const T, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), p_val_);
            }
            pub inline fn putValue(self: *const T, new_val_: VARIANT) HRESULT {
                return @as(*const IFsrmFileConditionProperty.VTable, @ptrCast(self.vtable)).put_Value(@as(*const IFsrmFileConditionProperty, @ptrCast(self)), new_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmPropertyDefinition_Value = Guid.initString("ede0150f-e9a3-419c-877c-01fe5d24c5d3");
pub const IID_IFsrmPropertyDefinition = &IID_IFsrmPropertyDefinition_Value;
pub const IFsrmPropertyDefinition = extern struct {
    pub const VTable = extern struct {
        base: IFsrmObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            type: ?*FsrmPropertyDefinitionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            type: FsrmPropertyDefinitionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PossibleValues: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            possible_values: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PossibleValues: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            possible_values: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ValueDescriptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            value_descriptions: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ValueDescriptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            value_descriptions: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            parameters: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition,
            parameters: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmObject.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), name_);
            }
            pub inline fn getType(self: *const T, type_: ?*FsrmPropertyDefinitionType) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), type_);
            }
            pub inline fn putType(self: *const T, type_: FsrmPropertyDefinitionType) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).put_Type(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), type_);
            }
            pub inline fn getPossibleValues(self: *const T, possible_values_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).get_PossibleValues(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), possible_values_);
            }
            pub inline fn putPossibleValues(self: *const T, possible_values_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).put_PossibleValues(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), possible_values_);
            }
            pub inline fn getValueDescriptions(self: *const T, value_descriptions_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).get_ValueDescriptions(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), value_descriptions_);
            }
            pub inline fn putValueDescriptions(self: *const T, value_descriptions_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).put_ValueDescriptions(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), value_descriptions_);
            }
            pub inline fn getParameters(self: *const T, parameters_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).get_Parameters(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), parameters_);
            }
            pub inline fn putParameters(self: *const T, parameters_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPropertyDefinition.VTable, @ptrCast(self.vtable)).put_Parameters(@as(*const IFsrmPropertyDefinition, @ptrCast(self)), parameters_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IFsrmPropertyDefinition2_Value = Guid.initString("47782152-d16c-4229-b4e1-0ddfe308b9f6");
pub const IID_IFsrmPropertyDefinition2 = &IID_IFsrmPropertyDefinition2_Value;
pub const IFsrmPropertyDefinition2 = extern struct {
    pub const VTable = extern struct {
        base: IFsrmPropertyDefinition.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyDefinitionFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition2,
            property_definition_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition2,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition2,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppliesTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition2,
            applies_to: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ValueDefinitions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinition2,
            value_definitions: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmPropertyDefinition.MethodMixin(T);
            pub inline fn getPropertyDefinitionFlags(self: *const T, property_definition_flags_: ?*i32) HRESULT {
                return @as(*const IFsrmPropertyDefinition2.VTable, @ptrCast(self.vtable)).get_PropertyDefinitionFlags(@as(*const IFsrmPropertyDefinition2, @ptrCast(self)), property_definition_flags_);
            }
            pub inline fn getDisplayName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyDefinition2.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IFsrmPropertyDefinition2, @ptrCast(self)), name_);
            }
            pub inline fn putDisplayName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmPropertyDefinition2.VTable, @ptrCast(self.vtable)).put_DisplayName(@as(*const IFsrmPropertyDefinition2, @ptrCast(self)), name_);
            }
            pub inline fn getAppliesTo(self: *const T, applies_to_: ?*i32) HRESULT {
                return @as(*const IFsrmPropertyDefinition2.VTable, @ptrCast(self.vtable)).get_AppliesTo(@as(*const IFsrmPropertyDefinition2, @ptrCast(self)), applies_to_);
            }
            pub inline fn getValueDefinitions(self: *const T, value_definitions_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmPropertyDefinition2.VTable, @ptrCast(self.vtable)).get_ValueDefinitions(@as(*const IFsrmPropertyDefinition2, @ptrCast(self)), value_definitions_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IFsrmPropertyDefinitionValue_Value = Guid.initString("e946d148-bd67-4178-8e22-1c44925ed710");
pub const IID_IFsrmPropertyDefinitionValue = &IID_IFsrmPropertyDefinitionValue_Value;
pub const IFsrmPropertyDefinitionValue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinitionValue,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinitionValue,
            display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinitionValue,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UniqueID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyDefinitionValue,
            unique_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyDefinitionValue.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmPropertyDefinitionValue, @ptrCast(self)), name_);
            }
            pub inline fn getDisplayName(self: *const T, display_name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyDefinitionValue.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IFsrmPropertyDefinitionValue, @ptrCast(self)), display_name_);
            }
            pub inline fn getDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyDefinitionValue.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IFsrmPropertyDefinitionValue, @ptrCast(self)), description_);
            }
            pub inline fn getUniqueID(self: *const T, unique_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyDefinitionValue.VTable, @ptrCast(self.vtable)).get_UniqueID(@as(*const IFsrmPropertyDefinitionValue, @ptrCast(self)), unique_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmProperty_Value = Guid.initString("4a73fee4-4102-4fcc-9ffb-38614f9ee768");
pub const IID_IFsrmProperty = &IID_IFsrmProperty_Value;
pub const IFsrmProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmProperty,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmProperty,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Sources: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmProperty,
            sources: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmProperty,
            flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmProperty.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmProperty, @ptrCast(self)), name_);
            }
            pub inline fn getValue(self: *const T, value_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmProperty.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IFsrmProperty, @ptrCast(self)), value_);
            }
            pub inline fn getSources(self: *const T, sources_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmProperty.VTable, @ptrCast(self.vtable)).get_Sources(@as(*const IFsrmProperty, @ptrCast(self)), sources_);
            }
            pub inline fn getPropertyFlags(self: *const T, flags_: ?*i32) HRESULT {
                return @as(*const IFsrmProperty.VTable, @ptrCast(self.vtable)).get_PropertyFlags(@as(*const IFsrmProperty, @ptrCast(self)), flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmRule_Value = Guid.initString("cb0df960-16f5-4495-9079-3f9360d831df");
pub const IID_IFsrmRule = &IID_IFsrmRule_Value;
pub const IFsrmRule = extern struct {
    pub const VTable = extern struct {
        base: IFsrmObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RuleType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            rule_type: ?*FsrmRuleType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModuleDefinitionName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            module_definition_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ModuleDefinitionName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            module_definition_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NamespaceRoots: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            namespace_roots: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NamespaceRoots: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            namespace_roots: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RuleFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            rule_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RuleFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            rule_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            parameters: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            parameters: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastModified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmRule,
            last_modified: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmObject.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmRule, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFsrmRule, @ptrCast(self)), name_);
            }
            pub inline fn getRuleType(self: *const T, rule_type_: ?*FsrmRuleType) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).get_RuleType(@as(*const IFsrmRule, @ptrCast(self)), rule_type_);
            }
            pub inline fn getModuleDefinitionName(self: *const T, module_definition_name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).get_ModuleDefinitionName(@as(*const IFsrmRule, @ptrCast(self)), module_definition_name_);
            }
            pub inline fn putModuleDefinitionName(self: *const T, module_definition_name_: ?BSTR) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).put_ModuleDefinitionName(@as(*const IFsrmRule, @ptrCast(self)), module_definition_name_);
            }
            pub inline fn getNamespaceRoots(self: *const T, namespace_roots_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).get_NamespaceRoots(@as(*const IFsrmRule, @ptrCast(self)), namespace_roots_);
            }
            pub inline fn putNamespaceRoots(self: *const T, namespace_roots_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).put_NamespaceRoots(@as(*const IFsrmRule, @ptrCast(self)), namespace_roots_);
            }
            pub inline fn getRuleFlags(self: *const T, rule_flags_: ?*i32) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).get_RuleFlags(@as(*const IFsrmRule, @ptrCast(self)), rule_flags_);
            }
            pub inline fn putRuleFlags(self: *const T, rule_flags_: i32) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).put_RuleFlags(@as(*const IFsrmRule, @ptrCast(self)), rule_flags_);
            }
            pub inline fn getParameters(self: *const T, parameters_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).get_Parameters(@as(*const IFsrmRule, @ptrCast(self)), parameters_);
            }
            pub inline fn putParameters(self: *const T, parameters_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).put_Parameters(@as(*const IFsrmRule, @ptrCast(self)), parameters_);
            }
            pub inline fn getLastModified(self: *const T, last_modified_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmRule.VTable, @ptrCast(self.vtable)).get_LastModified(@as(*const IFsrmRule, @ptrCast(self)), last_modified_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmClassificationRule_Value = Guid.initString("afc052c2-5315-45ab-841b-c6db0e120148");
pub const IID_IFsrmClassificationRule = &IID_IFsrmClassificationRule_Value;
pub const IFsrmClassificationRule = extern struct {
    pub const VTable = extern struct {
        base: IFsrmRule.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExecutionOption: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationRule,
            execution_option: ?*FsrmExecutionOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExecutionOption: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationRule,
            execution_option: FsrmExecutionOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyAffected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationRule,
            property: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PropertyAffected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationRule,
            property: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationRule,
            value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationRule,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmRule.MethodMixin(T);
            pub inline fn getExecutionOption(self: *const T, execution_option_: ?*FsrmExecutionOption) HRESULT {
                return @as(*const IFsrmClassificationRule.VTable, @ptrCast(self.vtable)).get_ExecutionOption(@as(*const IFsrmClassificationRule, @ptrCast(self)), execution_option_);
            }
            pub inline fn putExecutionOption(self: *const T, execution_option_: FsrmExecutionOption) HRESULT {
                return @as(*const IFsrmClassificationRule.VTable, @ptrCast(self.vtable)).put_ExecutionOption(@as(*const IFsrmClassificationRule, @ptrCast(self)), execution_option_);
            }
            pub inline fn getPropertyAffected(self: *const T, property_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmClassificationRule.VTable, @ptrCast(self.vtable)).get_PropertyAffected(@as(*const IFsrmClassificationRule, @ptrCast(self)), property_);
            }
            pub inline fn putPropertyAffected(self: *const T, property_: ?BSTR) HRESULT {
                return @as(*const IFsrmClassificationRule.VTable, @ptrCast(self.vtable)).put_PropertyAffected(@as(*const IFsrmClassificationRule, @ptrCast(self)), property_);
            }
            pub inline fn getValue(self: *const T, value_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmClassificationRule.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IFsrmClassificationRule, @ptrCast(self)), value_);
            }
            pub inline fn putValue(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IFsrmClassificationRule.VTable, @ptrCast(self.vtable)).put_Value(@as(*const IFsrmClassificationRule, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmPipelineModuleDefinition_Value = Guid.initString("515c1277-2c81-440e-8fcf-367921ed4f59");
pub const IID_IFsrmPipelineModuleDefinition = &IID_IFsrmPipelineModuleDefinition_Value;
pub const IFsrmPipelineModuleDefinition = extern struct {
    pub const VTable = extern struct {
        base: IFsrmObject.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModuleClsid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            module_clsid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ModuleClsid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            module_clsid: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Company: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            company: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Company: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            company: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            version: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            version: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModuleType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            module_type: ?*FsrmPipelineModuleType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NeedsFileContent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            needs_file_content: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NeedsFileContent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            needs_file_content: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Account: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            retrieval_account: ?*FsrmAccountType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Account: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            retrieval_account: FsrmAccountType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedExtensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            supported_extensions: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SupportedExtensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            supported_extensions: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            parameters: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleDefinition,
            parameters: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmObject.MethodMixin(T);
            pub inline fn getModuleClsid(self: *const T, module_clsid_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_ModuleClsid(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), module_clsid_);
            }
            pub inline fn putModuleClsid(self: *const T, module_clsid_: ?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).put_ModuleClsid(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), module_clsid_);
            }
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), name_);
            }
            pub inline fn getCompany(self: *const T, company_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_Company(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), company_);
            }
            pub inline fn putCompany(self: *const T, company_: ?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).put_Company(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), company_);
            }
            pub inline fn getVersion(self: *const T, version_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_Version(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), version_);
            }
            pub inline fn putVersion(self: *const T, version_: ?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).put_Version(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), version_);
            }
            pub inline fn getModuleType(self: *const T, module_type_: ?*FsrmPipelineModuleType) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_ModuleType(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), module_type_);
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), enabled_);
            }
            pub inline fn getNeedsFileContent(self: *const T, needs_file_content_: ?*i16) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_NeedsFileContent(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), needs_file_content_);
            }
            pub inline fn putNeedsFileContent(self: *const T, needs_file_content_: i16) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).put_NeedsFileContent(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), needs_file_content_);
            }
            pub inline fn getAccount(self: *const T, retrieval_account_: ?*FsrmAccountType) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_Account(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), retrieval_account_);
            }
            pub inline fn putAccount(self: *const T, retrieval_account_: FsrmAccountType) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).put_Account(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), retrieval_account_);
            }
            pub inline fn getSupportedExtensions(self: *const T, supported_extensions_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_SupportedExtensions(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), supported_extensions_);
            }
            pub inline fn putSupportedExtensions(self: *const T, supported_extensions_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).put_SupportedExtensions(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), supported_extensions_);
            }
            pub inline fn getParameters(self: *const T, parameters_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).get_Parameters(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), parameters_);
            }
            pub inline fn putParameters(self: *const T, parameters_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPipelineModuleDefinition.VTable, @ptrCast(self.vtable)).put_Parameters(@as(*const IFsrmPipelineModuleDefinition, @ptrCast(self)), parameters_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmClassifierModuleDefinition_Value = Guid.initString("bb36ea26-6318-4b8c-8592-f72dd602e7a5");
pub const IID_IFsrmClassifierModuleDefinition = &IID_IFsrmClassifierModuleDefinition_Value;
pub const IFsrmClassifierModuleDefinition = extern struct {
    pub const VTable = extern struct {
        base: IFsrmPipelineModuleDefinition.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertiesAffected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassifierModuleDefinition,
            properties_affected: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PropertiesAffected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassifierModuleDefinition,
            properties_affected: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertiesUsed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassifierModuleDefinition,
            properties_used: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PropertiesUsed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassifierModuleDefinition,
            properties_used: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NeedsExplicitValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassifierModuleDefinition,
            needs_explicit_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NeedsExplicitValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassifierModuleDefinition,
            needs_explicit_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmPipelineModuleDefinition.MethodMixin(T);
            pub inline fn getPropertiesAffected(self: *const T, properties_affected_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmClassifierModuleDefinition.VTable, @ptrCast(self.vtable)).get_PropertiesAffected(@as(*const IFsrmClassifierModuleDefinition, @ptrCast(self)), properties_affected_);
            }
            pub inline fn putPropertiesAffected(self: *const T, properties_affected_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmClassifierModuleDefinition.VTable, @ptrCast(self.vtable)).put_PropertiesAffected(@as(*const IFsrmClassifierModuleDefinition, @ptrCast(self)), properties_affected_);
            }
            pub inline fn getPropertiesUsed(self: *const T, properties_used_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmClassifierModuleDefinition.VTable, @ptrCast(self.vtable)).get_PropertiesUsed(@as(*const IFsrmClassifierModuleDefinition, @ptrCast(self)), properties_used_);
            }
            pub inline fn putPropertiesUsed(self: *const T, properties_used_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmClassifierModuleDefinition.VTable, @ptrCast(self.vtable)).put_PropertiesUsed(@as(*const IFsrmClassifierModuleDefinition, @ptrCast(self)), properties_used_);
            }
            pub inline fn getNeedsExplicitValue(self: *const T, needs_explicit_value_: ?*i16) HRESULT {
                return @as(*const IFsrmClassifierModuleDefinition.VTable, @ptrCast(self.vtable)).get_NeedsExplicitValue(@as(*const IFsrmClassifierModuleDefinition, @ptrCast(self)), needs_explicit_value_);
            }
            pub inline fn putNeedsExplicitValue(self: *const T, needs_explicit_value_: i16) HRESULT {
                return @as(*const IFsrmClassifierModuleDefinition.VTable, @ptrCast(self.vtable)).put_NeedsExplicitValue(@as(*const IFsrmClassifierModuleDefinition, @ptrCast(self)), needs_explicit_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmStorageModuleDefinition_Value = Guid.initString("15a81350-497d-4aba-80e9-d4dbcc5521fe");
pub const IID_IFsrmStorageModuleDefinition = &IID_IFsrmStorageModuleDefinition_Value;
pub const IFsrmStorageModuleDefinition = extern struct {
    pub const VTable = extern struct {
        base: IFsrmPipelineModuleDefinition.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Capabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmStorageModuleDefinition,
            capabilities: ?*FsrmStorageModuleCaps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Capabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmStorageModuleDefinition,
            capabilities: FsrmStorageModuleCaps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StorageType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmStorageModuleDefinition,
            storage_type: ?*FsrmStorageModuleType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StorageType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmStorageModuleDefinition,
            storage_type: FsrmStorageModuleType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UpdatesFileContent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmStorageModuleDefinition,
            updates_file_content: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UpdatesFileContent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmStorageModuleDefinition,
            updates_file_content: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmPipelineModuleDefinition.MethodMixin(T);
            pub inline fn getCapabilities(self: *const T, capabilities_: ?*FsrmStorageModuleCaps) HRESULT {
                return @as(*const IFsrmStorageModuleDefinition.VTable, @ptrCast(self.vtable)).get_Capabilities(@as(*const IFsrmStorageModuleDefinition, @ptrCast(self)), capabilities_);
            }
            pub inline fn putCapabilities(self: *const T, capabilities_: FsrmStorageModuleCaps) HRESULT {
                return @as(*const IFsrmStorageModuleDefinition.VTable, @ptrCast(self.vtable)).put_Capabilities(@as(*const IFsrmStorageModuleDefinition, @ptrCast(self)), capabilities_);
            }
            pub inline fn getStorageType(self: *const T, storage_type_: ?*FsrmStorageModuleType) HRESULT {
                return @as(*const IFsrmStorageModuleDefinition.VTable, @ptrCast(self.vtable)).get_StorageType(@as(*const IFsrmStorageModuleDefinition, @ptrCast(self)), storage_type_);
            }
            pub inline fn putStorageType(self: *const T, storage_type_: FsrmStorageModuleType) HRESULT {
                return @as(*const IFsrmStorageModuleDefinition.VTable, @ptrCast(self.vtable)).put_StorageType(@as(*const IFsrmStorageModuleDefinition, @ptrCast(self)), storage_type_);
            }
            pub inline fn getUpdatesFileContent(self: *const T, updates_file_content_: ?*i16) HRESULT {
                return @as(*const IFsrmStorageModuleDefinition.VTable, @ptrCast(self.vtable)).get_UpdatesFileContent(@as(*const IFsrmStorageModuleDefinition, @ptrCast(self)), updates_file_content_);
            }
            pub inline fn putUpdatesFileContent(self: *const T, updates_file_content_: i16) HRESULT {
                return @as(*const IFsrmStorageModuleDefinition.VTable, @ptrCast(self.vtable)).put_UpdatesFileContent(@as(*const IFsrmStorageModuleDefinition, @ptrCast(self)), updates_file_content_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IFsrmClassificationManager_Value = Guid.initString("d2dc89da-ee91-48a0-85d8-cc72a56f7d04");
pub const IID_IFsrmClassificationManager = &IID_IFsrmClassificationManager_Value;
pub const IFsrmClassificationManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClassificationReportFormats: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            formats: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClassificationReportFormats: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            formats: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Logging: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            logging: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Logging: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            logging: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClassificationReportMailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            mail_to: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClassificationReportMailTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            mail_to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClassificationReportEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            report_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClassificationReportEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            report_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClassificationLastReportPathWithoutExtension: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            last_report_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClassificationLastError: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            last_error: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClassificationRunningStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassificationManager,
            running_status: ?*FsrmReportRunningStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumPropertyDefinitions: *const fn (
            self: *const IFsrmClassificationManager,
            options: FsrmEnumOptions,
            property_definitions: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePropertyDefinition: *const fn (
            self: *const IFsrmClassificationManager,
            property_definition: ?*?*IFsrmPropertyDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDefinition: *const fn (
            self: *const IFsrmClassificationManager,
            property_name: ?BSTR,
            property_definition: ?*?*IFsrmPropertyDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumRules: *const fn (
            self: *const IFsrmClassificationManager,
            rule_type: FsrmRuleType,
            options: FsrmEnumOptions,
            rules: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRule: *const fn (
            self: *const IFsrmClassificationManager,
            rule_type: FsrmRuleType,
            rule: ?*?*IFsrmRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRule: *const fn (
            self: *const IFsrmClassificationManager,
            rule_name: ?BSTR,
            rule_type: FsrmRuleType,
            rule: ?*?*IFsrmRule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumModuleDefinitions: *const fn (
            self: *const IFsrmClassificationManager,
            module_type: FsrmPipelineModuleType,
            options: FsrmEnumOptions,
            module_definitions: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateModuleDefinition: *const fn (
            self: *const IFsrmClassificationManager,
            module_type: FsrmPipelineModuleType,
            module_definition: ?*?*IFsrmPipelineModuleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetModuleDefinition: *const fn (
            self: *const IFsrmClassificationManager,
            module_name: ?BSTR,
            module_type: FsrmPipelineModuleType,
            module_definition: ?*?*IFsrmPipelineModuleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunClassification: *const fn (
            self: *const IFsrmClassificationManager,
            context: FsrmReportGenerationContext,
            reserved: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForClassificationCompletion: *const fn (
            self: *const IFsrmClassificationManager,
            wait_seconds: i32,
            completed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelClassification: *const fn (
            self: *const IFsrmClassificationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumFileProperties: *const fn (
            self: *const IFsrmClassificationManager,
            file_path: ?BSTR,
            options: FsrmGetFilePropertyOptions,
            file_properties: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileProperty: *const fn (
            self: *const IFsrmClassificationManager,
            file_path: ?BSTR,
            property_name: ?BSTR,
            options: FsrmGetFilePropertyOptions,
            property: ?*?*IFsrmProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileProperty: *const fn (
            self: *const IFsrmClassificationManager,
            file_path: ?BSTR,
            property_name: ?BSTR,
            property_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearFileProperty: *const fn (
            self: *const IFsrmClassificationManager,
            file_path: ?BSTR,
            property: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getClassificationReportFormats(self: *const T, formats_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).get_ClassificationReportFormats(@as(*const IFsrmClassificationManager, @ptrCast(self)), formats_);
            }
            pub inline fn putClassificationReportFormats(self: *const T, formats_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).put_ClassificationReportFormats(@as(*const IFsrmClassificationManager, @ptrCast(self)), formats_);
            }
            pub inline fn getLogging(self: *const T, logging_: ?*i32) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).get_Logging(@as(*const IFsrmClassificationManager, @ptrCast(self)), logging_);
            }
            pub inline fn putLogging(self: *const T, logging_: i32) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).put_Logging(@as(*const IFsrmClassificationManager, @ptrCast(self)), logging_);
            }
            pub inline fn getClassificationReportMailTo(self: *const T, mail_to_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).get_ClassificationReportMailTo(@as(*const IFsrmClassificationManager, @ptrCast(self)), mail_to_);
            }
            pub inline fn putClassificationReportMailTo(self: *const T, mail_to_: ?BSTR) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).put_ClassificationReportMailTo(@as(*const IFsrmClassificationManager, @ptrCast(self)), mail_to_);
            }
            pub inline fn getClassificationReportEnabled(self: *const T, report_enabled_: ?*i16) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).get_ClassificationReportEnabled(@as(*const IFsrmClassificationManager, @ptrCast(self)), report_enabled_);
            }
            pub inline fn putClassificationReportEnabled(self: *const T, report_enabled_: i16) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).put_ClassificationReportEnabled(@as(*const IFsrmClassificationManager, @ptrCast(self)), report_enabled_);
            }
            pub inline fn getClassificationLastReportPathWithoutExtension(self: *const T, last_report_path_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).get_ClassificationLastReportPathWithoutExtension(@as(*const IFsrmClassificationManager, @ptrCast(self)), last_report_path_);
            }
            pub inline fn getClassificationLastError(self: *const T, last_error_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).get_ClassificationLastError(@as(*const IFsrmClassificationManager, @ptrCast(self)), last_error_);
            }
            pub inline fn getClassificationRunningStatus(self: *const T, running_status_: ?*FsrmReportRunningStatus) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).get_ClassificationRunningStatus(@as(*const IFsrmClassificationManager, @ptrCast(self)), running_status_);
            }
            pub inline fn enumPropertyDefinitions(self: *const T, options_: FsrmEnumOptions, property_definitions_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).EnumPropertyDefinitions(@as(*const IFsrmClassificationManager, @ptrCast(self)), options_, property_definitions_);
            }
            pub inline fn createPropertyDefinition(self: *const T, property_definition_: ?*?*IFsrmPropertyDefinition) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).CreatePropertyDefinition(@as(*const IFsrmClassificationManager, @ptrCast(self)), property_definition_);
            }
            pub inline fn getPropertyDefinition(self: *const T, property_name_: ?BSTR, property_definition_: ?*?*IFsrmPropertyDefinition) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).GetPropertyDefinition(@as(*const IFsrmClassificationManager, @ptrCast(self)), property_name_, property_definition_);
            }
            pub inline fn enumRules(self: *const T, rule_type_: FsrmRuleType, options_: FsrmEnumOptions, rules_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).EnumRules(@as(*const IFsrmClassificationManager, @ptrCast(self)), rule_type_, options_, rules_);
            }
            pub inline fn createRule(self: *const T, rule_type_: FsrmRuleType, rule_: ?*?*IFsrmRule) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).CreateRule(@as(*const IFsrmClassificationManager, @ptrCast(self)), rule_type_, rule_);
            }
            pub inline fn getRule(self: *const T, rule_name_: ?BSTR, rule_type_: FsrmRuleType, rule_: ?*?*IFsrmRule) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).GetRule(@as(*const IFsrmClassificationManager, @ptrCast(self)), rule_name_, rule_type_, rule_);
            }
            pub inline fn enumModuleDefinitions(self: *const T, module_type_: FsrmPipelineModuleType, options_: FsrmEnumOptions, module_definitions_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).EnumModuleDefinitions(@as(*const IFsrmClassificationManager, @ptrCast(self)), module_type_, options_, module_definitions_);
            }
            pub inline fn createModuleDefinition(self: *const T, module_type_: FsrmPipelineModuleType, module_definition_: ?*?*IFsrmPipelineModuleDefinition) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).CreateModuleDefinition(@as(*const IFsrmClassificationManager, @ptrCast(self)), module_type_, module_definition_);
            }
            pub inline fn getModuleDefinition(self: *const T, module_name_: ?BSTR, module_type_: FsrmPipelineModuleType, module_definition_: ?*?*IFsrmPipelineModuleDefinition) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).GetModuleDefinition(@as(*const IFsrmClassificationManager, @ptrCast(self)), module_name_, module_type_, module_definition_);
            }
            pub inline fn runClassification(self: *const T, context_: FsrmReportGenerationContext, reserved_: ?BSTR) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).RunClassification(@as(*const IFsrmClassificationManager, @ptrCast(self)), context_, reserved_);
            }
            pub inline fn waitForClassificationCompletion(self: *const T, wait_seconds_: i32, completed_: ?*i16) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).WaitForClassificationCompletion(@as(*const IFsrmClassificationManager, @ptrCast(self)), wait_seconds_, completed_);
            }
            pub inline fn cancelClassification(self: *const T) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).CancelClassification(@as(*const IFsrmClassificationManager, @ptrCast(self)));
            }
            pub inline fn enumFileProperties(self: *const T, file_path_: ?BSTR, options_: FsrmGetFilePropertyOptions, file_properties_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).EnumFileProperties(@as(*const IFsrmClassificationManager, @ptrCast(self)), file_path_, options_, file_properties_);
            }
            pub inline fn getFileProperty(self: *const T, file_path_: ?BSTR, property_name_: ?BSTR, options_: FsrmGetFilePropertyOptions, property_: ?*?*IFsrmProperty) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).GetFileProperty(@as(*const IFsrmClassificationManager, @ptrCast(self)), file_path_, property_name_, options_, property_);
            }
            pub inline fn setFileProperty(self: *const T, file_path_: ?BSTR, property_name_: ?BSTR, property_value_: ?BSTR) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).SetFileProperty(@as(*const IFsrmClassificationManager, @ptrCast(self)), file_path_, property_name_, property_value_);
            }
            pub inline fn clearFileProperty(self: *const T, file_path_: ?BSTR, property_: ?BSTR) HRESULT {
                return @as(*const IFsrmClassificationManager.VTable, @ptrCast(self.vtable)).ClearFileProperty(@as(*const IFsrmClassificationManager, @ptrCast(self)), file_path_, property_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IFsrmClassificationManager2_Value = Guid.initString("0004c1c9-127e-4765-ba07-6a3147bca112");
pub const IID_IFsrmClassificationManager2 = &IID_IFsrmClassificationManager2_Value;
pub const IFsrmClassificationManager2 = extern struct {
    pub const VTable = extern struct {
        base: IFsrmClassificationManager.VTable,
        ClassifyFiles: *const fn (
            self: *const IFsrmClassificationManager2,
            file_paths: ?*SAFEARRAY,
            property_names: ?*SAFEARRAY,
            property_values: ?*SAFEARRAY,
            options: FsrmGetFilePropertyOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmClassificationManager.MethodMixin(T);
            pub inline fn classifyFiles(self: *const T, file_paths_: ?*SAFEARRAY, property_names_: ?*SAFEARRAY, property_values_: ?*SAFEARRAY, options_: FsrmGetFilePropertyOptions) HRESULT {
                return @as(*const IFsrmClassificationManager2.VTable, @ptrCast(self.vtable)).ClassifyFiles(@as(*const IFsrmClassificationManager2, @ptrCast(self)), file_paths_, property_names_, property_values_, options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmPropertyBag_Value = Guid.initString("774589d1-d300-4f7a-9a24-f7b766800250");
pub const IID_IFsrmPropertyBag = &IID_IFsrmPropertyBag_Value;
pub const IFsrmPropertyBag = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RelativePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VolumeName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            volume_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RelativeNamespaceRoot: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            relative_namespace_root: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VolumeIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            volume_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FileId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            file_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentDirectoryId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            parent_directory_id: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            size: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeAllocated: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            size_allocated: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreationTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            creation_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastAccessTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            last_access_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastModificationTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            last_modification_time: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Attributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            attributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OwnerSid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            owner_sid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FilePropertyNames: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            file_property_names: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Messages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            messages: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyBagFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPropertyBag,
            flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileProperty: *const fn (
            self: *const IFsrmPropertyBag,
            name: ?BSTR,
            file_property: ?*?*IFsrmProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileProperty: *const fn (
            self: *const IFsrmPropertyBag,
            name: ?BSTR,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMessage: *const fn (
            self: *const IFsrmPropertyBag,
            message: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileStreamInterface: *const fn (
            self: *const IFsrmPropertyBag,
            access_mode: FsrmFileStreamingMode,
            interface_type: FsrmFileStreamingInterfaceType,
            p_stream_interface: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFsrmPropertyBag, @ptrCast(self)), name_);
            }
            pub inline fn getRelativePath(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_RelativePath(@as(*const IFsrmPropertyBag, @ptrCast(self)), path_);
            }
            pub inline fn getVolumeName(self: *const T, volume_name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_VolumeName(@as(*const IFsrmPropertyBag, @ptrCast(self)), volume_name_);
            }
            pub inline fn getRelativeNamespaceRoot(self: *const T, relative_namespace_root_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_RelativeNamespaceRoot(@as(*const IFsrmPropertyBag, @ptrCast(self)), relative_namespace_root_);
            }
            pub inline fn getVolumeIndex(self: *const T, volume_id_: ?*u32) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_VolumeIndex(@as(*const IFsrmPropertyBag, @ptrCast(self)), volume_id_);
            }
            pub inline fn getFileId(self: *const T, file_id_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_FileId(@as(*const IFsrmPropertyBag, @ptrCast(self)), file_id_);
            }
            pub inline fn getParentDirectoryId(self: *const T, parent_directory_id_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_ParentDirectoryId(@as(*const IFsrmPropertyBag, @ptrCast(self)), parent_directory_id_);
            }
            pub inline fn getSize(self: *const T, size_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_Size(@as(*const IFsrmPropertyBag, @ptrCast(self)), size_);
            }
            pub inline fn getSizeAllocated(self: *const T, size_allocated_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_SizeAllocated(@as(*const IFsrmPropertyBag, @ptrCast(self)), size_allocated_);
            }
            pub inline fn getCreationTime(self: *const T, creation_time_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_CreationTime(@as(*const IFsrmPropertyBag, @ptrCast(self)), creation_time_);
            }
            pub inline fn getLastAccessTime(self: *const T, last_access_time_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_LastAccessTime(@as(*const IFsrmPropertyBag, @ptrCast(self)), last_access_time_);
            }
            pub inline fn getLastModificationTime(self: *const T, last_modification_time_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_LastModificationTime(@as(*const IFsrmPropertyBag, @ptrCast(self)), last_modification_time_);
            }
            pub inline fn getAttributes(self: *const T, attributes_: ?*u32) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_Attributes(@as(*const IFsrmPropertyBag, @ptrCast(self)), attributes_);
            }
            pub inline fn getOwnerSid(self: *const T, owner_sid_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_OwnerSid(@as(*const IFsrmPropertyBag, @ptrCast(self)), owner_sid_);
            }
            pub inline fn getFilePropertyNames(self: *const T, file_property_names_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_FilePropertyNames(@as(*const IFsrmPropertyBag, @ptrCast(self)), file_property_names_);
            }
            pub inline fn getMessages(self: *const T, messages_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_Messages(@as(*const IFsrmPropertyBag, @ptrCast(self)), messages_);
            }
            pub inline fn getPropertyBagFlags(self: *const T, flags_: ?*u32) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).get_PropertyBagFlags(@as(*const IFsrmPropertyBag, @ptrCast(self)), flags_);
            }
            pub inline fn getFileProperty(self: *const T, name_: ?BSTR, file_property_: ?*?*IFsrmProperty) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).GetFileProperty(@as(*const IFsrmPropertyBag, @ptrCast(self)), name_, file_property_);
            }
            pub inline fn setFileProperty(self: *const T, name_: ?BSTR, value_: ?BSTR) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).SetFileProperty(@as(*const IFsrmPropertyBag, @ptrCast(self)), name_, value_);
            }
            pub inline fn addMessage(self: *const T, message_: ?BSTR) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).AddMessage(@as(*const IFsrmPropertyBag, @ptrCast(self)), message_);
            }
            pub inline fn getFileStreamInterface(self: *const T, access_mode_: FsrmFileStreamingMode, interface_type_: FsrmFileStreamingInterfaceType, p_stream_interface_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmPropertyBag.VTable, @ptrCast(self.vtable)).GetFileStreamInterface(@as(*const IFsrmPropertyBag, @ptrCast(self)), access_mode_, interface_type_, p_stream_interface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IFsrmPropertyBag2_Value = Guid.initString("0e46bdbd-2402-4fed-9c30-9266e6eb2cc9");
pub const IID_IFsrmPropertyBag2 = &IID_IFsrmPropertyBag2_Value;
pub const IFsrmPropertyBag2 = extern struct {
    pub const VTable = extern struct {
        base: IFsrmPropertyBag.VTable,
        GetFieldValue: *const fn (
            self: *const IFsrmPropertyBag2,
            field: FsrmPropertyBagField,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUntrustedInFileProperties: *const fn (
            self: *const IFsrmPropertyBag2,
            props: ?*?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmPropertyBag.MethodMixin(T);
            pub inline fn getFieldValue(self: *const T, field_: FsrmPropertyBagField, value_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmPropertyBag2.VTable, @ptrCast(self.vtable)).GetFieldValue(@as(*const IFsrmPropertyBag2, @ptrCast(self)), field_, value_);
            }
            pub inline fn getUntrustedInFileProperties(self: *const T, props_: ?*?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmPropertyBag2.VTable, @ptrCast(self.vtable)).GetUntrustedInFileProperties(@as(*const IFsrmPropertyBag2, @ptrCast(self)), props_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmPipelineModuleImplementation_Value = Guid.initString("b7907906-2b02-4cb5-84a9-fdf54613d6cd");
pub const IID_IFsrmPipelineModuleImplementation = &IID_IFsrmPipelineModuleImplementation_Value;
pub const IFsrmPipelineModuleImplementation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OnLoad: *const fn (
            self: *const IFsrmPipelineModuleImplementation,
            module_definition: ?*IFsrmPipelineModuleDefinition,
            module_connector: ?*?*IFsrmPipelineModuleConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnUnload: *const fn (
            self: *const IFsrmPipelineModuleImplementation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn onLoad(self: *const T, module_definition_: ?*IFsrmPipelineModuleDefinition, module_connector_: ?*?*IFsrmPipelineModuleConnector) HRESULT {
                return @as(*const IFsrmPipelineModuleImplementation.VTable, @ptrCast(self.vtable)).OnLoad(@as(*const IFsrmPipelineModuleImplementation, @ptrCast(self)), module_definition_, module_connector_);
            }
            pub inline fn onUnload(self: *const T) HRESULT {
                return @as(*const IFsrmPipelineModuleImplementation.VTable, @ptrCast(self.vtable)).OnUnload(@as(*const IFsrmPipelineModuleImplementation, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmClassifierModuleImplementation_Value = Guid.initString("4c968fc6-6edb-4051-9c18-73b7291ae106");
pub const IID_IFsrmClassifierModuleImplementation = &IID_IFsrmClassifierModuleImplementation_Value;
pub const IFsrmClassifierModuleImplementation = extern struct {
    pub const VTable = extern struct {
        base: IFsrmPipelineModuleImplementation.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastModified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmClassifierModuleImplementation,
            last_modified: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UseRulesAndDefinitions: *const fn (
            self: *const IFsrmClassifierModuleImplementation,
            rules: ?*IFsrmCollection,
            property_definitions: ?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeginFile: *const fn (
            self: *const IFsrmClassifierModuleImplementation,
            property_bag: ?*IFsrmPropertyBag,
            array_rule_ids: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesPropertyValueApply: *const fn (
            self: *const IFsrmClassifierModuleImplementation,
            property: ?BSTR,
            value: ?BSTR,
            apply_value: ?*i16,
            id_rule: Guid,
            id_prop_def: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValueToApply: *const fn (
            self: *const IFsrmClassifierModuleImplementation,
            property: ?BSTR,
            value: ?*?BSTR,
            id_rule: Guid,
            id_prop_def: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEndFile: *const fn (
            self: *const IFsrmClassifierModuleImplementation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmPipelineModuleImplementation.MethodMixin(T);
            pub inline fn getLastModified(self: *const T, last_modified_: ?*VARIANT) HRESULT {
                return @as(*const IFsrmClassifierModuleImplementation.VTable, @ptrCast(self.vtable)).get_LastModified(@as(*const IFsrmClassifierModuleImplementation, @ptrCast(self)), last_modified_);
            }
            pub inline fn useRulesAndDefinitions(self: *const T, rules_: ?*IFsrmCollection, property_definitions_: ?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmClassifierModuleImplementation.VTable, @ptrCast(self.vtable)).UseRulesAndDefinitions(@as(*const IFsrmClassifierModuleImplementation, @ptrCast(self)), rules_, property_definitions_);
            }
            pub inline fn onBeginFile(self: *const T, property_bag_: ?*IFsrmPropertyBag, array_rule_ids_: ?*SAFEARRAY) HRESULT {
                return @as(*const IFsrmClassifierModuleImplementation.VTable, @ptrCast(self.vtable)).OnBeginFile(@as(*const IFsrmClassifierModuleImplementation, @ptrCast(self)), property_bag_, array_rule_ids_);
            }
            pub inline fn doesPropertyValueApply(self: *const T, property_: ?BSTR, value_: ?BSTR, apply_value_: ?*i16, id_rule_: Guid, id_prop_def_: Guid) HRESULT {
                return @as(*const IFsrmClassifierModuleImplementation.VTable, @ptrCast(self.vtable)).DoesPropertyValueApply(@as(*const IFsrmClassifierModuleImplementation, @ptrCast(self)), property_, value_, apply_value_, id_rule_, id_prop_def_);
            }
            pub inline fn getPropertyValueToApply(self: *const T, property_: ?BSTR, value_: ?*?BSTR, id_rule_: Guid, id_prop_def_: Guid) HRESULT {
                return @as(*const IFsrmClassifierModuleImplementation.VTable, @ptrCast(self.vtable)).GetPropertyValueToApply(@as(*const IFsrmClassifierModuleImplementation, @ptrCast(self)), property_, value_, id_rule_, id_prop_def_);
            }
            pub inline fn onEndFile(self: *const T) HRESULT {
                return @as(*const IFsrmClassifierModuleImplementation.VTable, @ptrCast(self.vtable)).OnEndFile(@as(*const IFsrmClassifierModuleImplementation, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmStorageModuleImplementation_Value = Guid.initString("0af4a0da-895a-4e50-8712-a96724bcec64");
pub const IID_IFsrmStorageModuleImplementation = &IID_IFsrmStorageModuleImplementation_Value;
pub const IFsrmStorageModuleImplementation = extern struct {
    pub const VTable = extern struct {
        base: IFsrmPipelineModuleImplementation.VTable,
        UseDefinitions: *const fn (
            self: *const IFsrmStorageModuleImplementation,
            property_definitions: ?*IFsrmCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadProperties: *const fn (
            self: *const IFsrmStorageModuleImplementation,
            property_bag: ?*IFsrmPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveProperties: *const fn (
            self: *const IFsrmStorageModuleImplementation,
            property_bag: ?*IFsrmPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFsrmPipelineModuleImplementation.MethodMixin(T);
            pub inline fn useDefinitions(self: *const T, property_definitions_: ?*IFsrmCollection) HRESULT {
                return @as(*const IFsrmStorageModuleImplementation.VTable, @ptrCast(self.vtable)).UseDefinitions(@as(*const IFsrmStorageModuleImplementation, @ptrCast(self)), property_definitions_);
            }
            pub inline fn loadProperties(self: *const T, property_bag_: ?*IFsrmPropertyBag) HRESULT {
                return @as(*const IFsrmStorageModuleImplementation.VTable, @ptrCast(self.vtable)).LoadProperties(@as(*const IFsrmStorageModuleImplementation, @ptrCast(self)), property_bag_);
            }
            pub inline fn saveProperties(self: *const T, property_bag_: ?*IFsrmPropertyBag) HRESULT {
                return @as(*const IFsrmStorageModuleImplementation.VTable, @ptrCast(self.vtable)).SaveProperties(@as(*const IFsrmStorageModuleImplementation, @ptrCast(self)), property_bag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IFsrmPipelineModuleConnector_Value = Guid.initString("c16014f3-9aa1-46b3-b0a7-ab146eb205f2");
pub const IID_IFsrmPipelineModuleConnector = &IID_IFsrmPipelineModuleConnector_Value;
pub const IFsrmPipelineModuleConnector = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModuleImplementation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleConnector,
            pipeline_module_implementation: ?*?*IFsrmPipelineModuleImplementation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModuleName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleConnector,
            user_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HostingUserAccount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleConnector,
            user_account: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HostingProcessPid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFsrmPipelineModuleConnector,
            pid: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Bind: *const fn (
            self: *const IFsrmPipelineModuleConnector,
            module_definition: ?*IFsrmPipelineModuleDefinition,
            module_implementation: ?*IFsrmPipelineModuleImplementation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getModuleImplementation(self: *const T, pipeline_module_implementation_: ?*?*IFsrmPipelineModuleImplementation) HRESULT {
                return @as(*const IFsrmPipelineModuleConnector.VTable, @ptrCast(self.vtable)).get_ModuleImplementation(@as(*const IFsrmPipelineModuleConnector, @ptrCast(self)), pipeline_module_implementation_);
            }
            pub inline fn getModuleName(self: *const T, user_name_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleConnector.VTable, @ptrCast(self.vtable)).get_ModuleName(@as(*const IFsrmPipelineModuleConnector, @ptrCast(self)), user_name_);
            }
            pub inline fn getHostingUserAccount(self: *const T, user_account_: ?*?BSTR) HRESULT {
                return @as(*const IFsrmPipelineModuleConnector.VTable, @ptrCast(self.vtable)).get_HostingUserAccount(@as(*const IFsrmPipelineModuleConnector, @ptrCast(self)), user_account_);
            }
            pub inline fn getHostingProcessPid(self: *const T, pid_: ?*i32) HRESULT {
                return @as(*const IFsrmPipelineModuleConnector.VTable, @ptrCast(self.vtable)).get_HostingProcessPid(@as(*const IFsrmPipelineModuleConnector, @ptrCast(self)), pid_);
            }
            pub inline fn bind(self: *const T, module_definition_: ?*IFsrmPipelineModuleDefinition, module_implementation_: ?*IFsrmPipelineModuleImplementation) HRESULT {
                return @as(*const IFsrmPipelineModuleConnector.VTable, @ptrCast(self.vtable)).Bind(@as(*const IFsrmPipelineModuleConnector, @ptrCast(self)), module_definition_, module_implementation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_DIFsrmClassificationEvents_Value = Guid.initString("26942db0-dabf-41d8-bbdd-b129a9f70424");
pub const IID_DIFsrmClassificationEvents = &IID_DIFsrmClassificationEvents_Value;
pub const DIFsrmClassificationEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
