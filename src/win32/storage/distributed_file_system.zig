//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (33)
//--------------------------------------------------------------------------------
pub const FSCTL_DFS_BASE = @as(u32, 6);
pub const DFS_VOLUME_STATES = @as(u32, 15);
pub const DFS_VOLUME_STATE_OK = @as(u32, 1);
pub const DFS_VOLUME_STATE_INCONSISTENT = @as(u32, 2);
pub const DFS_VOLUME_STATE_OFFLINE = @as(u32, 3);
pub const DFS_VOLUME_STATE_ONLINE = @as(u32, 4);
pub const DFS_VOLUME_STATE_RESYNCHRONIZE = @as(u32, 16);
pub const DFS_VOLUME_STATE_STANDBY = @as(u32, 32);
pub const DFS_VOLUME_STATE_FORCE_SYNC = @as(u32, 64);
pub const DFS_VOLUME_FLAVORS = @as(u32, 768);
pub const DFS_VOLUME_FLAVOR_UNUSED1 = @as(u32, 0);
pub const DFS_VOLUME_FLAVOR_STANDALONE = @as(u32, 256);
pub const DFS_VOLUME_FLAVOR_AD_BLOB = @as(u32, 512);
pub const DFS_STORAGE_FLAVOR_UNUSED2 = @as(u32, 768);
pub const DFS_STORAGE_STATES = @as(u32, 15);
pub const DFS_STORAGE_STATE_OFFLINE = @as(u32, 1);
pub const DFS_STORAGE_STATE_ONLINE = @as(u32, 2);
pub const DFS_STORAGE_STATE_ACTIVE = @as(u32, 4);
pub const DFS_PROPERTY_FLAG_INSITE_REFERRALS = @as(u32, 1);
pub const DFS_PROPERTY_FLAG_ROOT_SCALABILITY = @as(u32, 2);
pub const DFS_PROPERTY_FLAG_SITE_COSTING = @as(u32, 4);
pub const DFS_PROPERTY_FLAG_TARGET_FAILBACK = @as(u32, 8);
pub const DFS_PROPERTY_FLAG_CLUSTER_ENABLED = @as(u32, 16);
pub const DFS_PROPERTY_FLAG_ABDE = @as(u32, 32);
pub const DFS_ADD_VOLUME = @as(u32, 1);
pub const DFS_RESTORE_VOLUME = @as(u32, 2);
pub const NET_DFS_SETDC_FLAGS = @as(u32, 0);
pub const NET_DFS_SETDC_TIMEOUT = @as(u32, 1);
pub const NET_DFS_SETDC_INITPKT = @as(u32, 2);
pub const DFS_SITE_PRIMARY = @as(u32, 1);
pub const DFS_MOVE_FLAG_REPLACE_IF_EXISTS = @as(u32, 1);
pub const DFS_FORCE_REMOVE = @as(u32, 2147483648);
pub const FSCTL_DFS_GET_PKT_ENTRY_STATE = @as(u32, 401340);

//--------------------------------------------------------------------------------
// Section: Types (35)
//--------------------------------------------------------------------------------
pub const DFS_TARGET_PRIORITY_CLASS = enum(i32) {
    InvalidPriorityClass = -1,
    SiteCostNormalPriorityClass = 0,
    GlobalHighPriorityClass = 1,
    SiteCostHighPriorityClass = 2,
    SiteCostLowPriorityClass = 3,
    GlobalLowPriorityClass = 4,
};
pub const DfsInvalidPriorityClass = DFS_TARGET_PRIORITY_CLASS.InvalidPriorityClass;
pub const DfsSiteCostNormalPriorityClass = DFS_TARGET_PRIORITY_CLASS.SiteCostNormalPriorityClass;
pub const DfsGlobalHighPriorityClass = DFS_TARGET_PRIORITY_CLASS.GlobalHighPriorityClass;
pub const DfsSiteCostHighPriorityClass = DFS_TARGET_PRIORITY_CLASS.SiteCostHighPriorityClass;
pub const DfsSiteCostLowPriorityClass = DFS_TARGET_PRIORITY_CLASS.SiteCostLowPriorityClass;
pub const DfsGlobalLowPriorityClass = DFS_TARGET_PRIORITY_CLASS.GlobalLowPriorityClass;

pub const DFS_TARGET_PRIORITY = extern struct {
    TargetPriorityClass: DFS_TARGET_PRIORITY_CLASS,
    TargetPriorityRank: u16,
    Reserved: u16,
};

pub const DFS_INFO_1 = extern struct {
    EntryPath: ?PWSTR,
};

pub const DFS_INFO_2 = extern struct {
    EntryPath: ?PWSTR,
    Comment: ?PWSTR,
    State: u32,
    NumberOfStorages: u32,
};

pub const DFS_STORAGE_INFO = extern struct {
    State: u32,
    ServerName: ?PWSTR,
    ShareName: ?PWSTR,
};

pub const DFS_STORAGE_INFO_1 = extern struct {
    State: u32,
    ServerName: ?PWSTR,
    ShareName: ?PWSTR,
    TargetPriority: DFS_TARGET_PRIORITY,
};

pub const DFS_INFO_3 = extern struct {
    EntryPath: ?PWSTR,
    Comment: ?PWSTR,
    State: u32,
    NumberOfStorages: u32,
    Storage: ?*DFS_STORAGE_INFO,
};

pub const DFS_INFO_4 = extern struct {
    EntryPath: ?PWSTR,
    Comment: ?PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    NumberOfStorages: u32,
    Storage: ?*DFS_STORAGE_INFO,
};

pub const DFS_INFO_5 = extern struct {
    EntryPath: ?PWSTR,
    Comment: ?PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    NumberOfStorages: u32,
};

pub const DFS_INFO_6 = extern struct {
    EntryPath: ?PWSTR,
    Comment: ?PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    NumberOfStorages: u32,
    Storage: ?*DFS_STORAGE_INFO_1,
};

pub const DFS_INFO_7 = extern struct {
    GenerationGuid: Guid,
};

pub const DFS_INFO_8 = extern struct {
    EntryPath: ?PWSTR,
    Comment: ?PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    SdLengthReserved: u32,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
    NumberOfStorages: u32,
};

pub const DFS_INFO_9 = extern struct {
    EntryPath: ?PWSTR,
    Comment: ?PWSTR,
    State: u32,
    Timeout: u32,
    Guid: Guid,
    PropertyFlags: u32,
    MetadataSize: u32,
    SdLengthReserved: u32,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
    NumberOfStorages: u32,
    Storage: ?*DFS_STORAGE_INFO_1,
};

pub const DFS_INFO_50 = extern struct {
    NamespaceMajorVersion: u32,
    NamespaceMinorVersion: u32,
    NamespaceCapabilities: u64,
};

pub const DFS_INFO_100 = extern struct {
    Comment: ?PWSTR,
};

pub const DFS_INFO_101 = extern struct {
    State: u32,
};

pub const DFS_INFO_102 = extern struct {
    Timeout: u32,
};

pub const DFS_INFO_103 = extern struct {
    PropertyFlagMask: u32,
    PropertyFlags: u32,
};

pub const DFS_INFO_104 = extern struct {
    TargetPriority: DFS_TARGET_PRIORITY,
};

pub const DFS_INFO_105 = extern struct {
    Comment: ?PWSTR,
    State: u32,
    Timeout: u32,
    PropertyFlagMask: u32,
    PropertyFlags: u32,
};

pub const DFS_INFO_106 = extern struct {
    State: u32,
    TargetPriority: DFS_TARGET_PRIORITY,
};

pub const DFS_INFO_107 = extern struct {
    Comment: ?PWSTR,
    State: u32,
    Timeout: u32,
    PropertyFlagMask: u32,
    PropertyFlags: u32,
    SdLengthReserved: u32,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
};

pub const DFS_INFO_150 = extern struct {
    SdLengthReserved: u32,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
};

pub const DFS_INFO_200 = extern struct {
    FtDfsName: ?PWSTR,
};

pub const DFS_INFO_300 = extern struct {
    Flags: u32,
    DfsName: ?PWSTR,
};

pub const DFS_SITENAME_INFO = extern struct {
    SiteFlags: u32,
    SiteName: ?PWSTR,
};

pub const DFS_SITELIST_INFO = extern struct {
    cSites: u32,
    Site: [1]DFS_SITENAME_INFO,
};

pub const DFS_NAMESPACE_VERSION_ORIGIN = enum(i32) {
    COMBINED = 0,
    SERVER = 1,
    DOMAIN = 2,
};
pub const DFS_NAMESPACE_VERSION_ORIGIN_COMBINED = DFS_NAMESPACE_VERSION_ORIGIN.COMBINED;
pub const DFS_NAMESPACE_VERSION_ORIGIN_SERVER = DFS_NAMESPACE_VERSION_ORIGIN.SERVER;
pub const DFS_NAMESPACE_VERSION_ORIGIN_DOMAIN = DFS_NAMESPACE_VERSION_ORIGIN.DOMAIN;

pub const DFS_SUPPORTED_NAMESPACE_VERSION_INFO = extern struct {
    DomainDfsMajorVersion: u32,
    DomainDfsMinorVersion: u32,
    DomainDfsCapabilities: u64,
    StandaloneDfsMajorVersion: u32,
    StandaloneDfsMinorVersion: u32,
    StandaloneDfsCapabilities: u64,
};

pub const DFS_GET_PKT_ENTRY_STATE_ARG = extern struct {
    DfsEntryPathLen: u16,
    ServerNameLen: u16,
    ShareNameLen: u16,
    Level: u32,
    Buffer: [1]u16,
};

pub const DFS_INFO_1_32 = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        EntryPath: u32,
    },
    else => usize, // NOTE: this should be a @compileError but can't because of https://github.com/ziglang/zig/issues/9682
};
pub const DFS_INFO_2_32 = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        EntryPath: u32,
        Comment: u32,
        State: u32,
        NumberOfStorages: u32,
    },
    else => usize, // NOTE: this should be a @compileError but can't because of https://github.com/ziglang/zig/issues/9682
};
pub const DFS_STORAGE_INFO_0_32 = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        State: u32,
        ServerName: u32,
        ShareName: u32,
    },
    else => usize, // NOTE: this should be a @compileError but can't because of https://github.com/ziglang/zig/issues/9682
};
pub const DFS_INFO_3_32 = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        EntryPath: u32,
        Comment: u32,
        State: u32,
        NumberOfStorages: u32,
        Storage: u32,
    },
    else => usize, // NOTE: this should be a @compileError but can't because of https://github.com/ziglang/zig/issues/9682
};
pub const DFS_INFO_4_32 = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        EntryPath: u32,
        Comment: u32,
        State: u32,
        Timeout: u32,
        Guid: Guid,
        NumberOfStorages: u32,
        Storage: u32,
    },
    else => usize, // NOTE: this should be a @compileError but can't because of https://github.com/ziglang/zig/issues/9682
};

//--------------------------------------------------------------------------------
// Section: Functions (22)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsAdd(
    dfs_entry_path: ?PWSTR,
    server_name: ?PWSTR,
    share_name: ?PWSTR,
    comment: ?PWSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsAddStdRoot(
    server_name: ?PWSTR,
    root_share: ?PWSTR,
    comment: ?PWSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsRemoveStdRoot(
    server_name: ?PWSTR,
    root_share: ?PWSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsAddFtRoot(
    server_name: ?PWSTR,
    root_share: ?PWSTR,
    ft_dfs_name: ?PWSTR,
    comment: ?PWSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsRemoveFtRoot(
    server_name: ?PWSTR,
    root_share: ?PWSTR,
    ft_dfs_name: ?PWSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsRemoveFtRootForced(
    domain_name: ?PWSTR,
    server_name: ?PWSTR,
    root_share: ?PWSTR,
    ft_dfs_name: ?PWSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsRemove(
    dfs_entry_path: ?PWSTR,
    server_name: ?PWSTR,
    share_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsEnum(
    dfs_name: ?PWSTR,
    level: u32,
    pref_max_len: u32,
    buffer: ?*?*u8,
    entries_read: ?*u32,
    resume_handle: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsGetInfo(
    dfs_entry_path: ?PWSTR,
    server_name: ?PWSTR,
    share_name: ?PWSTR,
    level: u32,
    buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsSetInfo(
    dfs_entry_path: ?PWSTR,
    server_name: ?PWSTR,
    share_name: ?PWSTR,
    level: u32,
    buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsGetClientInfo(
    dfs_entry_path: ?PWSTR,
    server_name: ?PWSTR,
    share_name: ?PWSTR,
    level: u32,
    buffer: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsSetClientInfo(
    dfs_entry_path: ?PWSTR,
    server_name: ?PWSTR,
    share_name: ?PWSTR,
    level: u32,
    buffer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsMove(
    old_dfs_entry_path: ?PWSTR,
    new_dfs_entry_path: ?PWSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsAddRootTarget(
    p_dfs_path: ?PWSTR,
    p_target_path: ?PWSTR,
    major_version: u32,
    p_comment: ?PWSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsRemoveRootTarget(
    p_dfs_path: ?PWSTR,
    p_target_path: ?PWSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsGetSecurity(
    dfs_entry_path: ?PWSTR,
    security_information: u32,
    pp_security_descriptor: ?*?PSECURITY_DESCRIPTOR,
    lpcb_security_descriptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsSetSecurity(
    dfs_entry_path: ?PWSTR,
    security_information: u32,
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsGetStdContainerSecurity(
    machine_name: ?PWSTR,
    security_information: u32,
    pp_security_descriptor: ?*?PSECURITY_DESCRIPTOR,
    lpcb_security_descriptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsSetStdContainerSecurity(
    machine_name: ?PWSTR,
    security_information: u32,
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsGetFtContainerSecurity(
    domain_name: ?PWSTR,
    security_information: u32,
    pp_security_descriptor: ?*?PSECURITY_DESCRIPTOR,
    lpcb_security_descriptor: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsSetFtContainerSecurity(
    domain_name: ?PWSTR,
    security_information: u32,
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "netapi32" fn NetDfsGetSupportedNamespaceVersion(
    origin: DFS_NAMESPACE_VERSION_ORIGIN,
    p_name: ?PWSTR,
    pp_version_info: ?*?*DFS_SUPPORTED_NAMESPACE_VERSION_INFO,
) callconv(@import("std").os.windows.WINAPI) u32;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const PSECURITY_DESCRIPTOR = @import("../security.zig").PSECURITY_DESCRIPTOR;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
