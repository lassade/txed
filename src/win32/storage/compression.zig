//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const COMPRESS_ALGORITHM_INVALID = @as(u32, 0);
pub const COMPRESS_ALGORITHM_NULL = @as(u32, 1);
pub const COMPRESS_ALGORITHM_MAX = @as(u32, 6);
pub const COMPRESS_RAW = @as(u32, 536870912);

//--------------------------------------------------------------------------------
// Section: Types (6)
//--------------------------------------------------------------------------------
pub const COMPRESS_ALGORITHM = enum(u32) {
    MSZIP = 2,
    XPRESS = 3,
    XPRESS_HUFF = 4,
    LZMS = 5,
};
pub const COMPRESS_ALGORITHM_MSZIP = COMPRESS_ALGORITHM.MSZIP;
pub const COMPRESS_ALGORITHM_XPRESS = COMPRESS_ALGORITHM.XPRESS;
pub const COMPRESS_ALGORITHM_XPRESS_HUFF = COMPRESS_ALGORITHM.XPRESS_HUFF;
pub const COMPRESS_ALGORITHM_LZMS = COMPRESS_ALGORITHM.LZMS;

// TODO: this type has a FreeFunc 'CloseDecompressor', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const COMPRESSOR_HANDLE = isize;

pub const PFN_COMPRESS_ALLOCATE = *const fn (
    user_context: ?*anyopaque,
    size: usize,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

pub const PFN_COMPRESS_FREE = *const fn (
    user_context: ?*anyopaque,
    memory: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const COMPRESS_ALLOCATION_ROUTINES = extern struct {
    Allocate: ?PFN_COMPRESS_ALLOCATE,
    Free: ?PFN_COMPRESS_FREE,
    UserContext: ?*anyopaque,
};

pub const COMPRESS_INFORMATION_CLASS = enum(i32) {
    INVALID = 0,
    BLOCK_SIZE = 1,
    LEVEL = 2,
};
pub const COMPRESS_INFORMATION_CLASS_INVALID = COMPRESS_INFORMATION_CLASS.INVALID;
pub const COMPRESS_INFORMATION_CLASS_BLOCK_SIZE = COMPRESS_INFORMATION_CLASS.BLOCK_SIZE;
pub const COMPRESS_INFORMATION_CLASS_LEVEL = COMPRESS_INFORMATION_CLASS.LEVEL;

//--------------------------------------------------------------------------------
// Section: Functions (12)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn CreateCompressor(
    algorithm: COMPRESS_ALGORITHM,
    allocation_routines: ?*COMPRESS_ALLOCATION_ROUTINES,
    compressor_handle: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn SetCompressorInformation(
    compressor_handle: COMPRESSOR_HANDLE,
    compress_information_class: COMPRESS_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    compress_information: ?*const anyopaque,
    compress_information_size: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn QueryCompressorInformation(
    compressor_handle: COMPRESSOR_HANDLE,
    compress_information_class: COMPRESS_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    compress_information: ?*anyopaque,
    compress_information_size: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn Compress(
    compressor_handle: COMPRESSOR_HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    uncompressed_data: ?*const anyopaque,
    uncompressed_data_size: usize,
    // TODO: what to do with BytesParamIndex 4?
    compressed_buffer: ?*anyopaque,
    compressed_buffer_size: usize,
    compressed_data_size: ?*usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn ResetCompressor(
    compressor_handle: COMPRESSOR_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn CloseCompressor(
    compressor_handle: COMPRESSOR_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn CreateDecompressor(
    algorithm: COMPRESS_ALGORITHM,
    allocation_routines: ?*COMPRESS_ALLOCATION_ROUTINES,
    decompressor_handle: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn SetDecompressorInformation(
    decompressor_handle: isize,
    compress_information_class: COMPRESS_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    compress_information: ?*const anyopaque,
    compress_information_size: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn QueryDecompressorInformation(
    decompressor_handle: isize,
    compress_information_class: COMPRESS_INFORMATION_CLASS,
    // TODO: what to do with BytesParamIndex 3?
    compress_information: ?*anyopaque,
    compress_information_size: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn Decompress(
    decompressor_handle: isize,
    // TODO: what to do with BytesParamIndex 2?
    compressed_data: ?*const anyopaque,
    compressed_data_size: usize,
    // TODO: what to do with BytesParamIndex 4?
    uncompressed_buffer: ?*anyopaque,
    uncompressed_buffer_size: usize,
    uncompressed_data_size: ?*usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn ResetDecompressor(
    decompressor_handle: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cabinet" fn CloseDecompressor(
    decompressor_handle: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (1)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFN_COMPRESS_ALLOCATE")) {
        _ = PFN_COMPRESS_ALLOCATE;
    }
    if (@hasDecl(@This(), "PFN_COMPRESS_FREE")) {
        _ = PFN_COMPRESS_FREE;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
