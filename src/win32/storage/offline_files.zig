//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (98)
//--------------------------------------------------------------------------------
pub const OFFLINEFILES_SYNC_STATE_LOCAL_KNOWN = @as(u32, 1);
pub const OFFLINEFILES_SYNC_STATE_REMOTE_KNOWN = @as(u32, 2);
pub const OFFLINEFILES_CHANGES_NONE = @as(u32, 0);
pub const OFFLINEFILES_CHANGES_LOCAL_SIZE = @as(u32, 1);
pub const OFFLINEFILES_CHANGES_LOCAL_ATTRIBUTES = @as(u32, 2);
pub const OFFLINEFILES_CHANGES_LOCAL_TIME = @as(u32, 4);
pub const OFFLINEFILES_CHANGES_REMOTE_SIZE = @as(u32, 8);
pub const OFFLINEFILES_CHANGES_REMOTE_ATTRIBUTES = @as(u32, 16);
pub const OFFLINEFILES_CHANGES_REMOTE_TIME = @as(u32, 32);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_MODIFIED_DATA = @as(u32, 1);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_MODIFIED_ATTRIBUTES = @as(u32, 2);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_MODIFIED = @as(u32, 4);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_CREATED = @as(u32, 8);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_DELETED = @as(u32, 16);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_DIRTY = @as(u32, 32);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_SPARSE = @as(u32, 64);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_FILE = @as(u32, 128);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_DIRECTORY = @as(u32, 256);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_PINNED_USER = @as(u32, 512);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_PINNED_OTHERS = @as(u32, 1024);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_PINNED_COMPUTER = @as(u32, 2048);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_PINNED = @as(u32, 4096);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_GHOST = @as(u32, 8192);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_SUSPENDED = @as(u32, 16384);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_OFFLINE = @as(u32, 32768);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_ONLINE = @as(u32, 65536);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_USER_WRITE = @as(u32, 131072);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_USER_READ = @as(u32, 262144);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_USER_ANYACCESS = @as(u32, 524288);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_OTHER_WRITE = @as(u32, 1048576);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_OTHER_READ = @as(u32, 2097152);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_OTHER_ANYACCESS = @as(u32, 4194304);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_GUEST_WRITE = @as(u32, 8388608);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_GUEST_READ = @as(u32, 16777216);
pub const OFFLINEFILES_ITEM_FILTER_FLAG_GUEST_ANYACCESS = @as(u32, 33554432);
pub const OFFLINEFILES_ITEM_QUERY_REMOTEINFO = @as(u32, 1);
pub const OFFLINEFILES_ITEM_QUERY_CONNECTIONSTATE = @as(u32, 2);
pub const OFFLINEFILES_ITEM_QUERY_LOCALDIRTYBYTECOUNT = @as(u32, 4);
pub const OFFLINEFILES_ITEM_QUERY_REMOTEDIRTYBYTECOUNT = @as(u32, 8);
pub const OFFLINEFILES_ITEM_QUERY_INCLUDETRANSPARENTCACHE = @as(u32, 16);
pub const OFFLINEFILES_ITEM_QUERY_ATTEMPT_TRANSITIONONLINE = @as(u32, 32);
pub const OFFLINEFILES_ITEM_QUERY_ADMIN = @as(u32, 2147483648);
pub const OFFLINEFILES_ENUM_FLAT = @as(u32, 1);
pub const OFFLINEFILES_ENUM_FLAT_FILESONLY = @as(u32, 2);
pub const OFFLINEFILES_SETTING_SCOPE_USER = @as(u32, 1);
pub const OFFLINEFILES_SETTING_SCOPE_COMPUTER = @as(u32, 2);
pub const OFFLINEFILES_SETTING_PinLinkTargets = "LinkTargetCaching";
pub const OFFLINEFILES_PINLINKTARGETS_NEVER = @as(u32, 0);
pub const OFFLINEFILES_PINLINKTARGETS_EXPLICIT = @as(u32, 1);
pub const OFFLINEFILES_PINLINKTARGETS_ALWAYS = @as(u32, 2);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_FILLSPARSE = @as(u32, 1);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_SYNCIN = @as(u32, 2);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_SYNCOUT = @as(u32, 4);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_PINNEWFILES = @as(u32, 8);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_PINLINKTARGETS = @as(u32, 16);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_PINFORUSER = @as(u32, 32);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_PINFORUSER_POLICY = @as(u32, 64);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_PINFORALL = @as(u32, 128);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_PINFORREDIR = @as(u32, 256);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_LOWPRIORITY = @as(u32, 512);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_ASYNCPROGRESS = @as(u32, 1024);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_INTERACTIVE = @as(u32, 2048);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_CONSOLE = @as(u32, 4096);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_SKIPSUSPENDEDDIRS = @as(u32, 8192);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_BACKGROUND = @as(u32, 65536);
pub const OFFLINEFILES_SYNC_CONTROL_FLAG_NONEWFILESOUT = @as(u32, 131072);
pub const OFFLINEFILES_SYNC_CONTROL_CR_MASK = @as(u32, 4026531840);
pub const OFFLINEFILES_SYNC_CONTROL_CR_DEFAULT = @as(u32, 0);
pub const OFFLINEFILES_SYNC_CONTROL_CR_KEEPLOCAL = @as(u32, 268435456);
pub const OFFLINEFILES_SYNC_CONTROL_CR_KEEPREMOTE = @as(u32, 536870912);
pub const OFFLINEFILES_SYNC_CONTROL_CR_KEEPLATEST = @as(u32, 805306368);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_FORUSER = @as(u32, 32);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_FORUSER_POLICY = @as(u32, 64);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_FORALL = @as(u32, 128);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_FORREDIR = @as(u32, 256);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_FILL = @as(u32, 1);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_LOWPRIORITY = @as(u32, 512);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_ASYNCPROGRESS = @as(u32, 1024);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_INTERACTIVE = @as(u32, 2048);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_CONSOLE = @as(u32, 4096);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_PINLINKTARGETS = @as(u32, 16);
pub const OFFLINEFILES_PIN_CONTROL_FLAG_BACKGROUND = @as(u32, 65536);
pub const OFFLINEFILES_ENCRYPTION_CONTROL_FLAG_LOWPRIORITY = @as(u32, 512);
pub const OFFLINEFILES_ENCRYPTION_CONTROL_FLAG_ASYNCPROGRESS = @as(u32, 1024);
pub const OFFLINEFILES_ENCRYPTION_CONTROL_FLAG_INTERACTIVE = @as(u32, 2048);
pub const OFFLINEFILES_ENCRYPTION_CONTROL_FLAG_CONSOLE = @as(u32, 4096);
pub const OFFLINEFILES_ENCRYPTION_CONTROL_FLAG_BACKGROUND = @as(u32, 65536);
pub const OFFLINEFILES_DELETE_FLAG_NOAUTOCACHED = @as(u32, 1);
pub const OFFLINEFILES_DELETE_FLAG_NOPINNED = @as(u32, 2);
pub const OFFLINEFILES_DELETE_FLAG_DELMODIFIED = @as(u32, 4);
pub const OFFLINEFILES_DELETE_FLAG_ADMIN = @as(u32, 2147483648);
pub const OFFLINEFILES_TRANSITION_FLAG_INTERACTIVE = @as(u32, 1);
pub const OFFLINEFILES_TRANSITION_FLAG_CONSOLE = @as(u32, 2);
pub const OFFLINEFILES_SYNC_ITEM_CHANGE_NONE = @as(u32, 0);
pub const OFFLINEFILES_SYNC_ITEM_CHANGE_CHANGETIME = @as(u32, 1);
pub const OFFLINEFILES_SYNC_ITEM_CHANGE_WRITETIME = @as(u32, 2);
pub const OFFLINEFILES_SYNC_ITEM_CHANGE_FILESIZE = @as(u32, 4);
pub const OFFLINEFILES_SYNC_ITEM_CHANGE_ATTRIBUTES = @as(u32, 8);

//--------------------------------------------------------------------------------
// Section: Types (51)
//--------------------------------------------------------------------------------
const CLSID_OfflineFilesSetting_Value = Guid.initString("fd3659e9-a920-4123-ad64-7fc76c7aacdf");
pub const CLSID_OfflineFilesSetting = &CLSID_OfflineFilesSetting_Value;

const CLSID_OfflineFilesCache_Value = Guid.initString("48c6be7c-3871-43cc-b46f-1449a1bb2ff3");
pub const CLSID_OfflineFilesCache = &CLSID_OfflineFilesCache_Value;

pub const OFFLINEFILES_ITEM_TYPE = enum(i32) {
    FILE = 0,
    DIRECTORY = 1,
    SHARE = 2,
    SERVER = 3,
};
pub const OFFLINEFILES_ITEM_TYPE_FILE = OFFLINEFILES_ITEM_TYPE.FILE;
pub const OFFLINEFILES_ITEM_TYPE_DIRECTORY = OFFLINEFILES_ITEM_TYPE.DIRECTORY;
pub const OFFLINEFILES_ITEM_TYPE_SHARE = OFFLINEFILES_ITEM_TYPE.SHARE;
pub const OFFLINEFILES_ITEM_TYPE_SERVER = OFFLINEFILES_ITEM_TYPE.SERVER;

pub const OFFLINEFILES_ITEM_COPY = enum(i32) {
    LOCAL = 0,
    REMOTE = 1,
    ORIGINAL = 2,
};
pub const OFFLINEFILES_ITEM_COPY_LOCAL = OFFLINEFILES_ITEM_COPY.LOCAL;
pub const OFFLINEFILES_ITEM_COPY_REMOTE = OFFLINEFILES_ITEM_COPY.REMOTE;
pub const OFFLINEFILES_ITEM_COPY_ORIGINAL = OFFLINEFILES_ITEM_COPY.ORIGINAL;

pub const OFFLINEFILES_CONNECT_STATE = enum(i32) {
    UNKNOWN = 0,
    OFFLINE = 1,
    ONLINE = 2,
    TRANSPARENTLY_CACHED = 3,
    PARTLY_TRANSPARENTLY_CACHED = 4,
};
pub const OFFLINEFILES_CONNECT_STATE_UNKNOWN = OFFLINEFILES_CONNECT_STATE.UNKNOWN;
pub const OFFLINEFILES_CONNECT_STATE_OFFLINE = OFFLINEFILES_CONNECT_STATE.OFFLINE;
pub const OFFLINEFILES_CONNECT_STATE_ONLINE = OFFLINEFILES_CONNECT_STATE.ONLINE;
pub const OFFLINEFILES_CONNECT_STATE_TRANSPARENTLY_CACHED = OFFLINEFILES_CONNECT_STATE.TRANSPARENTLY_CACHED;
pub const OFFLINEFILES_CONNECT_STATE_PARTLY_TRANSPARENTLY_CACHED = OFFLINEFILES_CONNECT_STATE.PARTLY_TRANSPARENTLY_CACHED;

pub const OFFLINEFILES_OFFLINE_REASON = enum(i32) {
    UNKNOWN = 0,
    NOT_APPLICABLE = 1,
    CONNECTION_FORCED = 2,
    CONNECTION_SLOW = 3,
    CONNECTION_ERROR = 4,
    ITEM_VERSION_CONFLICT = 5,
    ITEM_SUSPENDED = 6,
};
pub const OFFLINEFILES_OFFLINE_REASON_UNKNOWN = OFFLINEFILES_OFFLINE_REASON.UNKNOWN;
pub const OFFLINEFILES_OFFLINE_REASON_NOT_APPLICABLE = OFFLINEFILES_OFFLINE_REASON.NOT_APPLICABLE;
pub const OFFLINEFILES_OFFLINE_REASON_CONNECTION_FORCED = OFFLINEFILES_OFFLINE_REASON.CONNECTION_FORCED;
pub const OFFLINEFILES_OFFLINE_REASON_CONNECTION_SLOW = OFFLINEFILES_OFFLINE_REASON.CONNECTION_SLOW;
pub const OFFLINEFILES_OFFLINE_REASON_CONNECTION_ERROR = OFFLINEFILES_OFFLINE_REASON.CONNECTION_ERROR;
pub const OFFLINEFILES_OFFLINE_REASON_ITEM_VERSION_CONFLICT = OFFLINEFILES_OFFLINE_REASON.ITEM_VERSION_CONFLICT;
pub const OFFLINEFILES_OFFLINE_REASON_ITEM_SUSPENDED = OFFLINEFILES_OFFLINE_REASON.ITEM_SUSPENDED;

pub const OFFLINEFILES_CACHING_MODE = enum(i32) {
    NONE = 0,
    NOCACHING = 1,
    MANUAL = 2,
    AUTO_DOC = 3,
    AUTO_PROGANDDOC = 4,
};
pub const OFFLINEFILES_CACHING_MODE_NONE = OFFLINEFILES_CACHING_MODE.NONE;
pub const OFFLINEFILES_CACHING_MODE_NOCACHING = OFFLINEFILES_CACHING_MODE.NOCACHING;
pub const OFFLINEFILES_CACHING_MODE_MANUAL = OFFLINEFILES_CACHING_MODE.MANUAL;
pub const OFFLINEFILES_CACHING_MODE_AUTO_DOC = OFFLINEFILES_CACHING_MODE.AUTO_DOC;
pub const OFFLINEFILES_CACHING_MODE_AUTO_PROGANDDOC = OFFLINEFILES_CACHING_MODE.AUTO_PROGANDDOC;

pub const OFFLINEFILES_OP_RESPONSE = enum(i32) {
    CONTINUE = 0,
    RETRY = 1,
    ABORT = 2,
};
pub const OFFLINEFILES_OP_CONTINUE = OFFLINEFILES_OP_RESPONSE.CONTINUE;
pub const OFFLINEFILES_OP_RETRY = OFFLINEFILES_OP_RESPONSE.RETRY;
pub const OFFLINEFILES_OP_ABORT = OFFLINEFILES_OP_RESPONSE.ABORT;

pub const OFFLINEFILES_EVENTS = enum(i32) {
    EVENT_CACHEMOVED = 0,
    EVENT_CACHEISFULL = 1,
    EVENT_CACHEISCORRUPTED = 2,
    EVENT_ENABLED = 3,
    EVENT_ENCRYPTIONCHANGED = 4,
    EVENT_SYNCBEGIN = 5,
    EVENT_SYNCFILERESULT = 6,
    EVENT_SYNCCONFLICTRECADDED = 7,
    EVENT_SYNCCONFLICTRECUPDATED = 8,
    EVENT_SYNCCONFLICTRECREMOVED = 9,
    EVENT_SYNCEND = 10,
    EVENT_BACKGROUNDSYNCBEGIN = 11,
    EVENT_BACKGROUNDSYNCEND = 12,
    EVENT_NETTRANSPORTARRIVED = 13,
    EVENT_NONETTRANSPORTS = 14,
    EVENT_ITEMDISCONNECTED = 15,
    EVENT_ITEMRECONNECTED = 16,
    EVENT_ITEMAVAILABLEOFFLINE = 17,
    EVENT_ITEMNOTAVAILABLEOFFLINE = 18,
    EVENT_ITEMPINNED = 19,
    EVENT_ITEMNOTPINNED = 20,
    EVENT_ITEMMODIFIED = 21,
    EVENT_ITEMADDEDTOCACHE = 22,
    EVENT_ITEMDELETEDFROMCACHE = 23,
    EVENT_ITEMRENAMED = 24,
    EVENT_DATALOST = 25,
    EVENT_PING = 26,
    EVENT_ITEMRECONNECTBEGIN = 27,
    EVENT_ITEMRECONNECTEND = 28,
    EVENT_CACHEEVICTBEGIN = 29,
    EVENT_CACHEEVICTEND = 30,
    EVENT_POLICYCHANGEDETECTED = 31,
    EVENT_PREFERENCECHANGEDETECTED = 32,
    EVENT_SETTINGSCHANGESAPPLIED = 33,
    EVENT_TRANSPARENTCACHEITEMNOTIFY = 34,
    EVENT_PREFETCHFILEBEGIN = 35,
    EVENT_PREFETCHFILEEND = 36,
    EVENT_PREFETCHCLOSEHANDLEBEGIN = 37,
    EVENT_PREFETCHCLOSEHANDLEEND = 38,
    NUM_EVENTS = 39,
};
pub const OFFLINEFILES_EVENT_CACHEMOVED = OFFLINEFILES_EVENTS.EVENT_CACHEMOVED;
pub const OFFLINEFILES_EVENT_CACHEISFULL = OFFLINEFILES_EVENTS.EVENT_CACHEISFULL;
pub const OFFLINEFILES_EVENT_CACHEISCORRUPTED = OFFLINEFILES_EVENTS.EVENT_CACHEISCORRUPTED;
pub const OFFLINEFILES_EVENT_ENABLED = OFFLINEFILES_EVENTS.EVENT_ENABLED;
pub const OFFLINEFILES_EVENT_ENCRYPTIONCHANGED = OFFLINEFILES_EVENTS.EVENT_ENCRYPTIONCHANGED;
pub const OFFLINEFILES_EVENT_SYNCBEGIN = OFFLINEFILES_EVENTS.EVENT_SYNCBEGIN;
pub const OFFLINEFILES_EVENT_SYNCFILERESULT = OFFLINEFILES_EVENTS.EVENT_SYNCFILERESULT;
pub const OFFLINEFILES_EVENT_SYNCCONFLICTRECADDED = OFFLINEFILES_EVENTS.EVENT_SYNCCONFLICTRECADDED;
pub const OFFLINEFILES_EVENT_SYNCCONFLICTRECUPDATED = OFFLINEFILES_EVENTS.EVENT_SYNCCONFLICTRECUPDATED;
pub const OFFLINEFILES_EVENT_SYNCCONFLICTRECREMOVED = OFFLINEFILES_EVENTS.EVENT_SYNCCONFLICTRECREMOVED;
pub const OFFLINEFILES_EVENT_SYNCEND = OFFLINEFILES_EVENTS.EVENT_SYNCEND;
pub const OFFLINEFILES_EVENT_BACKGROUNDSYNCBEGIN = OFFLINEFILES_EVENTS.EVENT_BACKGROUNDSYNCBEGIN;
pub const OFFLINEFILES_EVENT_BACKGROUNDSYNCEND = OFFLINEFILES_EVENTS.EVENT_BACKGROUNDSYNCEND;
pub const OFFLINEFILES_EVENT_NETTRANSPORTARRIVED = OFFLINEFILES_EVENTS.EVENT_NETTRANSPORTARRIVED;
pub const OFFLINEFILES_EVENT_NONETTRANSPORTS = OFFLINEFILES_EVENTS.EVENT_NONETTRANSPORTS;
pub const OFFLINEFILES_EVENT_ITEMDISCONNECTED = OFFLINEFILES_EVENTS.EVENT_ITEMDISCONNECTED;
pub const OFFLINEFILES_EVENT_ITEMRECONNECTED = OFFLINEFILES_EVENTS.EVENT_ITEMRECONNECTED;
pub const OFFLINEFILES_EVENT_ITEMAVAILABLEOFFLINE = OFFLINEFILES_EVENTS.EVENT_ITEMAVAILABLEOFFLINE;
pub const OFFLINEFILES_EVENT_ITEMNOTAVAILABLEOFFLINE = OFFLINEFILES_EVENTS.EVENT_ITEMNOTAVAILABLEOFFLINE;
pub const OFFLINEFILES_EVENT_ITEMPINNED = OFFLINEFILES_EVENTS.EVENT_ITEMPINNED;
pub const OFFLINEFILES_EVENT_ITEMNOTPINNED = OFFLINEFILES_EVENTS.EVENT_ITEMNOTPINNED;
pub const OFFLINEFILES_EVENT_ITEMMODIFIED = OFFLINEFILES_EVENTS.EVENT_ITEMMODIFIED;
pub const OFFLINEFILES_EVENT_ITEMADDEDTOCACHE = OFFLINEFILES_EVENTS.EVENT_ITEMADDEDTOCACHE;
pub const OFFLINEFILES_EVENT_ITEMDELETEDFROMCACHE = OFFLINEFILES_EVENTS.EVENT_ITEMDELETEDFROMCACHE;
pub const OFFLINEFILES_EVENT_ITEMRENAMED = OFFLINEFILES_EVENTS.EVENT_ITEMRENAMED;
pub const OFFLINEFILES_EVENT_DATALOST = OFFLINEFILES_EVENTS.EVENT_DATALOST;
pub const OFFLINEFILES_EVENT_PING = OFFLINEFILES_EVENTS.EVENT_PING;
pub const OFFLINEFILES_EVENT_ITEMRECONNECTBEGIN = OFFLINEFILES_EVENTS.EVENT_ITEMRECONNECTBEGIN;
pub const OFFLINEFILES_EVENT_ITEMRECONNECTEND = OFFLINEFILES_EVENTS.EVENT_ITEMRECONNECTEND;
pub const OFFLINEFILES_EVENT_CACHEEVICTBEGIN = OFFLINEFILES_EVENTS.EVENT_CACHEEVICTBEGIN;
pub const OFFLINEFILES_EVENT_CACHEEVICTEND = OFFLINEFILES_EVENTS.EVENT_CACHEEVICTEND;
pub const OFFLINEFILES_EVENT_POLICYCHANGEDETECTED = OFFLINEFILES_EVENTS.EVENT_POLICYCHANGEDETECTED;
pub const OFFLINEFILES_EVENT_PREFERENCECHANGEDETECTED = OFFLINEFILES_EVENTS.EVENT_PREFERENCECHANGEDETECTED;
pub const OFFLINEFILES_EVENT_SETTINGSCHANGESAPPLIED = OFFLINEFILES_EVENTS.EVENT_SETTINGSCHANGESAPPLIED;
pub const OFFLINEFILES_EVENT_TRANSPARENTCACHEITEMNOTIFY = OFFLINEFILES_EVENTS.EVENT_TRANSPARENTCACHEITEMNOTIFY;
pub const OFFLINEFILES_EVENT_PREFETCHFILEBEGIN = OFFLINEFILES_EVENTS.EVENT_PREFETCHFILEBEGIN;
pub const OFFLINEFILES_EVENT_PREFETCHFILEEND = OFFLINEFILES_EVENTS.EVENT_PREFETCHFILEEND;
pub const OFFLINEFILES_EVENT_PREFETCHCLOSEHANDLEBEGIN = OFFLINEFILES_EVENTS.EVENT_PREFETCHCLOSEHANDLEBEGIN;
pub const OFFLINEFILES_EVENT_PREFETCHCLOSEHANDLEEND = OFFLINEFILES_EVENTS.EVENT_PREFETCHCLOSEHANDLEEND;
pub const OFFLINEFILES_NUM_EVENTS = OFFLINEFILES_EVENTS.NUM_EVENTS;

pub const OFFLINEFILES_PATHFILTER_MATCH = enum(i32) {
    SELF = 0,
    CHILD = 1,
    DESCENDENT = 2,
    SELFORCHILD = 3,
    SELFORDESCENDENT = 4,
};
pub const OFFLINEFILES_PATHFILTER_SELF = OFFLINEFILES_PATHFILTER_MATCH.SELF;
pub const OFFLINEFILES_PATHFILTER_CHILD = OFFLINEFILES_PATHFILTER_MATCH.CHILD;
pub const OFFLINEFILES_PATHFILTER_DESCENDENT = OFFLINEFILES_PATHFILTER_MATCH.DESCENDENT;
pub const OFFLINEFILES_PATHFILTER_SELFORCHILD = OFFLINEFILES_PATHFILTER_MATCH.SELFORCHILD;
pub const OFFLINEFILES_PATHFILTER_SELFORDESCENDENT = OFFLINEFILES_PATHFILTER_MATCH.SELFORDESCENDENT;

pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE = enum(i32) {
    RESOLVE_NONE = 0,
    RESOLVE_KEEPLOCAL = 1,
    RESOLVE_KEEPREMOTE = 2,
    RESOLVE_KEEPALLCHANGES = 3,
    RESOLVE_KEEPLATEST = 4,
    RESOLVE_LOG = 5,
    RESOLVE_SKIP = 6,
    ABORT = 7,
    RESOLVE_NUMCODES = 8,
};
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_NONE = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.RESOLVE_NONE;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_KEEPLOCAL = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.RESOLVE_KEEPLOCAL;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_KEEPREMOTE = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.RESOLVE_KEEPREMOTE;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_KEEPALLCHANGES = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.RESOLVE_KEEPALLCHANGES;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_KEEPLATEST = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.RESOLVE_KEEPLATEST;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_LOG = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.RESOLVE_LOG;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_SKIP = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.RESOLVE_SKIP;
pub const OFFLINEFILES_SYNC_CONFLICT_ABORT = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.ABORT;
pub const OFFLINEFILES_SYNC_CONFLICT_RESOLVE_NUMCODES = OFFLINEFILES_SYNC_CONFLICT_RESOLVE.RESOLVE_NUMCODES;

pub const OFFLINEFILES_ITEM_TIME = enum(i32) {
    CREATION = 0,
    LASTACCESS = 1,
    LASTWRITE = 2,
};
pub const OFFLINEFILES_ITEM_TIME_CREATION = OFFLINEFILES_ITEM_TIME.CREATION;
pub const OFFLINEFILES_ITEM_TIME_LASTACCESS = OFFLINEFILES_ITEM_TIME.LASTACCESS;
pub const OFFLINEFILES_ITEM_TIME_LASTWRITE = OFFLINEFILES_ITEM_TIME.LASTWRITE;

pub const OFFLINEFILES_COMPARE = enum(i32) {
    EQ = 0,
    NEQ = 1,
    LT = 2,
    GT = 3,
    LTE = 4,
    GTE = 5,
};
pub const OFFLINEFILES_COMPARE_EQ = OFFLINEFILES_COMPARE.EQ;
pub const OFFLINEFILES_COMPARE_NEQ = OFFLINEFILES_COMPARE.NEQ;
pub const OFFLINEFILES_COMPARE_LT = OFFLINEFILES_COMPARE.LT;
pub const OFFLINEFILES_COMPARE_GT = OFFLINEFILES_COMPARE.GT;
pub const OFFLINEFILES_COMPARE_LTE = OFFLINEFILES_COMPARE.LTE;
pub const OFFLINEFILES_COMPARE_GTE = OFFLINEFILES_COMPARE.GTE;

pub const OFFLINEFILES_SETTING_VALUE_TYPE = enum(i32) {
    UI4 = 0,
    BSTR = 1,
    BSTR_DBLNULTERM = 2,
    @"2DIM_ARRAY_BSTR_UI4" = 3,
    @"2DIM_ARRAY_BSTR_BSTR" = 4,
};
pub const OFFLINEFILES_SETTING_VALUE_UI4 = OFFLINEFILES_SETTING_VALUE_TYPE.UI4;
pub const OFFLINEFILES_SETTING_VALUE_BSTR = OFFLINEFILES_SETTING_VALUE_TYPE.BSTR;
pub const OFFLINEFILES_SETTING_VALUE_BSTR_DBLNULTERM = OFFLINEFILES_SETTING_VALUE_TYPE.BSTR_DBLNULTERM;
pub const OFFLINEFILES_SETTING_VALUE_2DIM_ARRAY_BSTR_UI4 = OFFLINEFILES_SETTING_VALUE_TYPE.@"2DIM_ARRAY_BSTR_UI4";
pub const OFFLINEFILES_SETTING_VALUE_2DIM_ARRAY_BSTR_BSTR = OFFLINEFILES_SETTING_VALUE_TYPE.@"2DIM_ARRAY_BSTR_BSTR";

pub const OFFLINEFILES_SYNC_OPERATION = enum(i32) {
    CREATE_COPY_ON_SERVER = 0,
    CREATE_COPY_ON_CLIENT = 1,
    SYNC_TO_SERVER = 2,
    SYNC_TO_CLIENT = 3,
    DELETE_SERVER_COPY = 4,
    DELETE_CLIENT_COPY = 5,
    PIN = 6,
    PREPARE = 7,
};
pub const OFFLINEFILES_SYNC_OPERATION_CREATE_COPY_ON_SERVER = OFFLINEFILES_SYNC_OPERATION.CREATE_COPY_ON_SERVER;
pub const OFFLINEFILES_SYNC_OPERATION_CREATE_COPY_ON_CLIENT = OFFLINEFILES_SYNC_OPERATION.CREATE_COPY_ON_CLIENT;
pub const OFFLINEFILES_SYNC_OPERATION_SYNC_TO_SERVER = OFFLINEFILES_SYNC_OPERATION.SYNC_TO_SERVER;
pub const OFFLINEFILES_SYNC_OPERATION_SYNC_TO_CLIENT = OFFLINEFILES_SYNC_OPERATION.SYNC_TO_CLIENT;
pub const OFFLINEFILES_SYNC_OPERATION_DELETE_SERVER_COPY = OFFLINEFILES_SYNC_OPERATION.DELETE_SERVER_COPY;
pub const OFFLINEFILES_SYNC_OPERATION_DELETE_CLIENT_COPY = OFFLINEFILES_SYNC_OPERATION.DELETE_CLIENT_COPY;
pub const OFFLINEFILES_SYNC_OPERATION_PIN = OFFLINEFILES_SYNC_OPERATION.PIN;
pub const OFFLINEFILES_SYNC_OPERATION_PREPARE = OFFLINEFILES_SYNC_OPERATION.PREPARE;

pub const OFFLINEFILES_SYNC_STATE = enum(i32) {
    Stable = 0,
    FileOnClient_DirOnServer = 1,
    FileOnClient_NoServerCopy = 2,
    DirOnClient_FileOnServer = 3,
    DirOnClient_FileChangedOnServer = 4,
    DirOnClient_NoServerCopy = 5,
    FileCreatedOnClient_NoServerCopy = 6,
    FileCreatedOnClient_FileChangedOnServer = 7,
    FileCreatedOnClient_DirChangedOnServer = 8,
    FileCreatedOnClient_FileOnServer = 9,
    FileCreatedOnClient_DirOnServer = 10,
    FileCreatedOnClient_DeletedOnServer = 11,
    FileChangedOnClient_ChangedOnServer = 12,
    FileChangedOnClient_DirOnServer = 13,
    FileChangedOnClient_DirChangedOnServer = 14,
    FileChangedOnClient_DeletedOnServer = 15,
    FileSparseOnClient_ChangedOnServer = 16,
    FileSparseOnClient_DeletedOnServer = 17,
    FileSparseOnClient_DirOnServer = 18,
    FileSparseOnClient_DirChangedOnServer = 19,
    DirCreatedOnClient_NoServerCopy = 20,
    DirCreatedOnClient_DirOnServer = 21,
    DirCreatedOnClient_FileOnServer = 22,
    DirCreatedOnClient_FileChangedOnServer = 23,
    DirCreatedOnClient_DirChangedOnServer = 24,
    DirCreatedOnClient_DeletedOnServer = 25,
    DirChangedOnClient_FileOnServer = 26,
    DirChangedOnClient_FileChangedOnServer = 27,
    DirChangedOnClient_ChangedOnServer = 28,
    DirChangedOnClient_DeletedOnServer = 29,
    NoClientCopy_FileOnServer = 30,
    NoClientCopy_DirOnServer = 31,
    NoClientCopy_FileChangedOnServer = 32,
    NoClientCopy_DirChangedOnServer = 33,
    DeletedOnClient_FileOnServer = 34,
    DeletedOnClient_DirOnServer = 35,
    DeletedOnClient_FileChangedOnServer = 36,
    DeletedOnClient_DirChangedOnServer = 37,
    FileSparseOnClient = 38,
    FileChangedOnClient = 39,
    FileRenamedOnClient = 40,
    DirSparseOnClient = 41,
    DirChangedOnClient = 42,
    DirRenamedOnClient = 43,
    FileChangedOnServer = 44,
    FileRenamedOnServer = 45,
    FileDeletedOnServer = 46,
    DirChangedOnServer = 47,
    DirRenamedOnServer = 48,
    DirDeletedOnServer = 49,
    FileReplacedAndDeletedOnClient_FileOnServer = 50,
    FileReplacedAndDeletedOnClient_FileChangedOnServer = 51,
    FileReplacedAndDeletedOnClient_DirOnServer = 52,
    FileReplacedAndDeletedOnClient_DirChangedOnServer = 53,
    NUMSTATES = 54,
};
pub const OFFLINEFILES_SYNC_STATE_Stable = OFFLINEFILES_SYNC_STATE.Stable;
pub const OFFLINEFILES_SYNC_STATE_FileOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileOnClient_NoServerCopy = OFFLINEFILES_SYNC_STATE.FileOnClient_NoServerCopy;
pub const OFFLINEFILES_SYNC_STATE_DirOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.DirOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.DirOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirOnClient_NoServerCopy = OFFLINEFILES_SYNC_STATE.DirOnClient_NoServerCopy;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_NoServerCopy = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_NoServerCopy;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileCreatedOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.FileCreatedOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient_ChangedOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnClient_ChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient_ChangedOnServer = OFFLINEFILES_SYNC_STATE.FileSparseOnClient_ChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.FileSparseOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileSparseOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.FileSparseOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_NoServerCopy = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_NoServerCopy;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirCreatedOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.DirCreatedOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient_ChangedOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnClient_ChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient_DeletedOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnClient_DeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_NoClientCopy_FileOnServer = OFFLINEFILES_SYNC_STATE.NoClientCopy_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_NoClientCopy_DirOnServer = OFFLINEFILES_SYNC_STATE.NoClientCopy_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_NoClientCopy_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.NoClientCopy_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_NoClientCopy_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.NoClientCopy_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DeletedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.DeletedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_DeletedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.DeletedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_DeletedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.DeletedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DeletedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.DeletedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileSparseOnClient = OFFLINEFILES_SYNC_STATE.FileSparseOnClient;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnClient = OFFLINEFILES_SYNC_STATE.FileChangedOnClient;
pub const OFFLINEFILES_SYNC_STATE_FileRenamedOnClient = OFFLINEFILES_SYNC_STATE.FileRenamedOnClient;
pub const OFFLINEFILES_SYNC_STATE_DirSparseOnClient = OFFLINEFILES_SYNC_STATE.DirSparseOnClient;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnClient = OFFLINEFILES_SYNC_STATE.DirChangedOnClient;
pub const OFFLINEFILES_SYNC_STATE_DirRenamedOnClient = OFFLINEFILES_SYNC_STATE.DirRenamedOnClient;
pub const OFFLINEFILES_SYNC_STATE_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileRenamedOnServer = OFFLINEFILES_SYNC_STATE.FileRenamedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileDeletedOnServer = OFFLINEFILES_SYNC_STATE.FileDeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirRenamedOnServer = OFFLINEFILES_SYNC_STATE.DirRenamedOnServer;
pub const OFFLINEFILES_SYNC_STATE_DirDeletedOnServer = OFFLINEFILES_SYNC_STATE.DirDeletedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileReplacedAndDeletedOnClient_FileOnServer = OFFLINEFILES_SYNC_STATE.FileReplacedAndDeletedOnClient_FileOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileReplacedAndDeletedOnClient_FileChangedOnServer = OFFLINEFILES_SYNC_STATE.FileReplacedAndDeletedOnClient_FileChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileReplacedAndDeletedOnClient_DirOnServer = OFFLINEFILES_SYNC_STATE.FileReplacedAndDeletedOnClient_DirOnServer;
pub const OFFLINEFILES_SYNC_STATE_FileReplacedAndDeletedOnClient_DirChangedOnServer = OFFLINEFILES_SYNC_STATE.FileReplacedAndDeletedOnClient_DirChangedOnServer;
pub const OFFLINEFILES_SYNC_STATE_NUMSTATES = OFFLINEFILES_SYNC_STATE.NUMSTATES;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesEvents_Value = Guid.initString("e25585c1-0caa-4eb1-873b-1cae5b77c314");
pub const IID_IOfflineFilesEvents = &IID_IOfflineFilesEvents_Value;
pub const IOfflineFilesEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CacheMoved: *const fn (
            self: *const IOfflineFilesEvents,
            psz_old_path: ?[*:0]const u16,
            psz_new_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheIsFull: *const fn (
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheIsCorrupted: *const fn (
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enabled: *const fn (
            self: *const IOfflineFilesEvents,
            b_enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncryptionChanged: *const fn (
            self: *const IOfflineFilesEvents,
            b_was_encrypted: BOOL,
            b_was_partial: BOOL,
            b_is_encrypted: BOOL,
            b_is_partial: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncBegin: *const fn (
            self: *const IOfflineFilesEvents,
            r_sync_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncFileResult: *const fn (
            self: *const IOfflineFilesEvents,
            r_sync_id: ?*const Guid,
            psz_file: ?[*:0]const u16,
            hr_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncConflictRecAdded: *const fn (
            self: *const IOfflineFilesEvents,
            psz_conflict_path: ?[*:0]const u16,
            pft_conflict_date_time: ?*const FILETIME,
            conflict_sync_state: OFFLINEFILES_SYNC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncConflictRecUpdated: *const fn (
            self: *const IOfflineFilesEvents,
            psz_conflict_path: ?[*:0]const u16,
            pft_conflict_date_time: ?*const FILETIME,
            conflict_sync_state: OFFLINEFILES_SYNC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncConflictRecRemoved: *const fn (
            self: *const IOfflineFilesEvents,
            psz_conflict_path: ?[*:0]const u16,
            pft_conflict_date_time: ?*const FILETIME,
            conflict_sync_state: OFFLINEFILES_SYNC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncEnd: *const fn (
            self: *const IOfflineFilesEvents,
            r_sync_id: ?*const Guid,
            hr_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NetTransportArrived: *const fn (
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NoNetTransports: *const fn (
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemDisconnected: *const fn (
            self: *const IOfflineFilesEvents,
            psz_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemReconnected: *const fn (
            self: *const IOfflineFilesEvents,
            psz_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemAvailableOffline: *const fn (
            self: *const IOfflineFilesEvents,
            psz_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemNotAvailableOffline: *const fn (
            self: *const IOfflineFilesEvents,
            psz_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemPinned: *const fn (
            self: *const IOfflineFilesEvents,
            psz_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemNotPinned: *const fn (
            self: *const IOfflineFilesEvents,
            psz_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemModified: *const fn (
            self: *const IOfflineFilesEvents,
            psz_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
            b_modified_data: BOOL,
            b_modified_attributes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemAddedToCache: *const fn (
            self: *const IOfflineFilesEvents,
            psz_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemDeletedFromCache: *const fn (
            self: *const IOfflineFilesEvents,
            psz_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemRenamed: *const fn (
            self: *const IOfflineFilesEvents,
            psz_old_path: ?[*:0]const u16,
            psz_new_path: ?[*:0]const u16,
            item_type: OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DataLost: *const fn (
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ping: *const fn (
            self: *const IOfflineFilesEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn cacheMoved(self: *const T, psz_old_path_: ?[*:0]const u16, psz_new_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).CacheMoved(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_old_path_, psz_new_path_);
            }
            pub inline fn cacheIsFull(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).CacheIsFull(@as(*const IOfflineFilesEvents, @ptrCast(self)));
            }
            pub inline fn cacheIsCorrupted(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).CacheIsCorrupted(@as(*const IOfflineFilesEvents, @ptrCast(self)));
            }
            pub inline fn enabled(self: *const T, b_enabled_: BOOL) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).Enabled(@as(*const IOfflineFilesEvents, @ptrCast(self)), b_enabled_);
            }
            pub inline fn encryptionChanged(self: *const T, b_was_encrypted_: BOOL, b_was_partial_: BOOL, b_is_encrypted_: BOOL, b_is_partial_: BOOL) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).EncryptionChanged(@as(*const IOfflineFilesEvents, @ptrCast(self)), b_was_encrypted_, b_was_partial_, b_is_encrypted_, b_is_partial_);
            }
            pub inline fn syncBegin(self: *const T, r_sync_id_: ?*const Guid) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).SyncBegin(@as(*const IOfflineFilesEvents, @ptrCast(self)), r_sync_id_);
            }
            pub inline fn syncFileResult(self: *const T, r_sync_id_: ?*const Guid, psz_file_: ?[*:0]const u16, hr_result_: HRESULT) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).SyncFileResult(@as(*const IOfflineFilesEvents, @ptrCast(self)), r_sync_id_, psz_file_, hr_result_);
            }
            pub inline fn syncConflictRecAdded(self: *const T, psz_conflict_path_: ?[*:0]const u16, pft_conflict_date_time_: ?*const FILETIME, conflict_sync_state_: OFFLINEFILES_SYNC_STATE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).SyncConflictRecAdded(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_conflict_path_, pft_conflict_date_time_, conflict_sync_state_);
            }
            pub inline fn syncConflictRecUpdated(self: *const T, psz_conflict_path_: ?[*:0]const u16, pft_conflict_date_time_: ?*const FILETIME, conflict_sync_state_: OFFLINEFILES_SYNC_STATE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).SyncConflictRecUpdated(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_conflict_path_, pft_conflict_date_time_, conflict_sync_state_);
            }
            pub inline fn syncConflictRecRemoved(self: *const T, psz_conflict_path_: ?[*:0]const u16, pft_conflict_date_time_: ?*const FILETIME, conflict_sync_state_: OFFLINEFILES_SYNC_STATE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).SyncConflictRecRemoved(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_conflict_path_, pft_conflict_date_time_, conflict_sync_state_);
            }
            pub inline fn syncEnd(self: *const T, r_sync_id_: ?*const Guid, hr_result_: HRESULT) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).SyncEnd(@as(*const IOfflineFilesEvents, @ptrCast(self)), r_sync_id_, hr_result_);
            }
            pub inline fn netTransportArrived(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).NetTransportArrived(@as(*const IOfflineFilesEvents, @ptrCast(self)));
            }
            pub inline fn noNetTransports(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).NoNetTransports(@as(*const IOfflineFilesEvents, @ptrCast(self)));
            }
            pub inline fn itemDisconnected(self: *const T, psz_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemDisconnected(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_path_, item_type_);
            }
            pub inline fn itemReconnected(self: *const T, psz_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemReconnected(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_path_, item_type_);
            }
            pub inline fn itemAvailableOffline(self: *const T, psz_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemAvailableOffline(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_path_, item_type_);
            }
            pub inline fn itemNotAvailableOffline(self: *const T, psz_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemNotAvailableOffline(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_path_, item_type_);
            }
            pub inline fn itemPinned(self: *const T, psz_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemPinned(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_path_, item_type_);
            }
            pub inline fn itemNotPinned(self: *const T, psz_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemNotPinned(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_path_, item_type_);
            }
            pub inline fn itemModified(self: *const T, psz_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE, b_modified_data_: BOOL, b_modified_attributes_: BOOL) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemModified(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_path_, item_type_, b_modified_data_, b_modified_attributes_);
            }
            pub inline fn itemAddedToCache(self: *const T, psz_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemAddedToCache(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_path_, item_type_);
            }
            pub inline fn itemDeletedFromCache(self: *const T, psz_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemDeletedFromCache(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_path_, item_type_);
            }
            pub inline fn itemRenamed(self: *const T, psz_old_path_: ?[*:0]const u16, psz_new_path_: ?[*:0]const u16, item_type_: OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).ItemRenamed(@as(*const IOfflineFilesEvents, @ptrCast(self)), psz_old_path_, psz_new_path_, item_type_);
            }
            pub inline fn dataLost(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).DataLost(@as(*const IOfflineFilesEvents, @ptrCast(self)));
            }
            pub inline fn ping(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents.VTable, @ptrCast(self.vtable)).Ping(@as(*const IOfflineFilesEvents, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesEvents2_Value = Guid.initString("1ead8f56-ff76-4faa-a795-6f6ef792498b");
pub const IID_IOfflineFilesEvents2 = &IID_IOfflineFilesEvents2_Value;
pub const IOfflineFilesEvents2 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesEvents.VTable,
        ItemReconnectBegin: *const fn (
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemReconnectEnd: *const fn (
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheEvictBegin: *const fn (
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheEvictEnd: *const fn (
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundSyncBegin: *const fn (
            self: *const IOfflineFilesEvents2,
            dw_sync_control_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundSyncEnd: *const fn (
            self: *const IOfflineFilesEvents2,
            dw_sync_control_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PolicyChangeDetected: *const fn (
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreferenceChangeDetected: *const fn (
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SettingsChangesApplied: *const fn (
            self: *const IOfflineFilesEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesEvents.MethodMixin(T);
            pub inline fn itemReconnectBegin(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents2.VTable, @ptrCast(self.vtable)).ItemReconnectBegin(@as(*const IOfflineFilesEvents2, @ptrCast(self)));
            }
            pub inline fn itemReconnectEnd(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents2.VTable, @ptrCast(self.vtable)).ItemReconnectEnd(@as(*const IOfflineFilesEvents2, @ptrCast(self)));
            }
            pub inline fn cacheEvictBegin(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents2.VTable, @ptrCast(self.vtable)).CacheEvictBegin(@as(*const IOfflineFilesEvents2, @ptrCast(self)));
            }
            pub inline fn cacheEvictEnd(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents2.VTable, @ptrCast(self.vtable)).CacheEvictEnd(@as(*const IOfflineFilesEvents2, @ptrCast(self)));
            }
            pub inline fn backgroundSyncBegin(self: *const T, dw_sync_control_flags_: u32) HRESULT {
                return @as(*const IOfflineFilesEvents2.VTable, @ptrCast(self.vtable)).BackgroundSyncBegin(@as(*const IOfflineFilesEvents2, @ptrCast(self)), dw_sync_control_flags_);
            }
            pub inline fn backgroundSyncEnd(self: *const T, dw_sync_control_flags_: u32) HRESULT {
                return @as(*const IOfflineFilesEvents2.VTable, @ptrCast(self.vtable)).BackgroundSyncEnd(@as(*const IOfflineFilesEvents2, @ptrCast(self)), dw_sync_control_flags_);
            }
            pub inline fn policyChangeDetected(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents2.VTable, @ptrCast(self.vtable)).PolicyChangeDetected(@as(*const IOfflineFilesEvents2, @ptrCast(self)));
            }
            pub inline fn preferenceChangeDetected(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents2.VTable, @ptrCast(self.vtable)).PreferenceChangeDetected(@as(*const IOfflineFilesEvents2, @ptrCast(self)));
            }
            pub inline fn settingsChangesApplied(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents2.VTable, @ptrCast(self.vtable)).SettingsChangesApplied(@as(*const IOfflineFilesEvents2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOfflineFilesEvents3_Value = Guid.initString("9ba04a45-ee69-42f0-9ab1-7db5c8805808");
pub const IID_IOfflineFilesEvents3 = &IID_IOfflineFilesEvents3_Value;
pub const IOfflineFilesEvents3 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesEvents2.VTable,
        TransparentCacheItemNotify: *const fn (
            self: *const IOfflineFilesEvents3,
            psz_path: ?[*:0]const u16,
            event_type: OFFLINEFILES_EVENTS,
            item_type: OFFLINEFILES_ITEM_TYPE,
            b_modified_data: BOOL,
            b_modified_attributes: BOOL,
            pzs_old_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrefetchFileBegin: *const fn (
            self: *const IOfflineFilesEvents3,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrefetchFileEnd: *const fn (
            self: *const IOfflineFilesEvents3,
            psz_path: ?[*:0]const u16,
            hr_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesEvents2.MethodMixin(T);
            pub inline fn transparentCacheItemNotify(self: *const T, psz_path_: ?[*:0]const u16, event_type_: OFFLINEFILES_EVENTS, item_type_: OFFLINEFILES_ITEM_TYPE, b_modified_data_: BOOL, b_modified_attributes_: BOOL, pzs_old_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IOfflineFilesEvents3.VTable, @ptrCast(self.vtable)).TransparentCacheItemNotify(@as(*const IOfflineFilesEvents3, @ptrCast(self)), psz_path_, event_type_, item_type_, b_modified_data_, b_modified_attributes_, pzs_old_path_);
            }
            pub inline fn prefetchFileBegin(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IOfflineFilesEvents3.VTable, @ptrCast(self.vtable)).PrefetchFileBegin(@as(*const IOfflineFilesEvents3, @ptrCast(self)), psz_path_);
            }
            pub inline fn prefetchFileEnd(self: *const T, psz_path_: ?[*:0]const u16, hr_result_: HRESULT) HRESULT {
                return @as(*const IOfflineFilesEvents3.VTable, @ptrCast(self.vtable)).PrefetchFileEnd(@as(*const IOfflineFilesEvents3, @ptrCast(self)), psz_path_, hr_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IOfflineFilesEvents4_Value = Guid.initString("dbd69b1e-c7d2-473e-b35f-9d8c24c0c484");
pub const IID_IOfflineFilesEvents4 = &IID_IOfflineFilesEvents4_Value;
pub const IOfflineFilesEvents4 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesEvents3.VTable,
        PrefetchCloseHandleBegin: *const fn (
            self: *const IOfflineFilesEvents4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrefetchCloseHandleEnd: *const fn (
            self: *const IOfflineFilesEvents4,
            dw_closed_handle_count: u32,
            dw_open_handle_count: u32,
            hr_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesEvents3.MethodMixin(T);
            pub inline fn prefetchCloseHandleBegin(self: *const T) HRESULT {
                return @as(*const IOfflineFilesEvents4.VTable, @ptrCast(self.vtable)).PrefetchCloseHandleBegin(@as(*const IOfflineFilesEvents4, @ptrCast(self)));
            }
            pub inline fn prefetchCloseHandleEnd(self: *const T, dw_closed_handle_count_: u32, dw_open_handle_count_: u32, hr_result_: HRESULT) HRESULT {
                return @as(*const IOfflineFilesEvents4.VTable, @ptrCast(self.vtable)).PrefetchCloseHandleEnd(@as(*const IOfflineFilesEvents4, @ptrCast(self)), dw_closed_handle_count_, dw_open_handle_count_, hr_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesEventsFilter_Value = Guid.initString("33fc4e1b-0716-40fa-ba65-6e62a84a846f");
pub const IID_IOfflineFilesEventsFilter = &IID_IOfflineFilesEventsFilter_Value;
pub const IOfflineFilesEventsFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPathFilter: *const fn (
            self: *const IOfflineFilesEventsFilter,
            ppsz_filter: ?*?PWSTR,
            p_match: ?*OFFLINEFILES_PATHFILTER_MATCH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIncludedEvents: *const fn (
            self: *const IOfflineFilesEventsFilter,
            c_elements: u32,
            prg_events: [*]OFFLINEFILES_EVENTS,
            pc_events: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExcludedEvents: *const fn (
            self: *const IOfflineFilesEventsFilter,
            c_elements: u32,
            prg_events: [*]OFFLINEFILES_EVENTS,
            pc_events: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPathFilter(self: *const T, ppsz_filter_: ?*?PWSTR, p_match_: ?*OFFLINEFILES_PATHFILTER_MATCH) HRESULT {
                return @as(*const IOfflineFilesEventsFilter.VTable, @ptrCast(self.vtable)).GetPathFilter(@as(*const IOfflineFilesEventsFilter, @ptrCast(self)), ppsz_filter_, p_match_);
            }
            pub inline fn getIncludedEvents(self: *const T, c_elements_: u32, prg_events_: [*]OFFLINEFILES_EVENTS, pc_events_: ?*u32) HRESULT {
                return @as(*const IOfflineFilesEventsFilter.VTable, @ptrCast(self.vtable)).GetIncludedEvents(@as(*const IOfflineFilesEventsFilter, @ptrCast(self)), c_elements_, prg_events_, pc_events_);
            }
            pub inline fn getExcludedEvents(self: *const T, c_elements_: u32, prg_events_: [*]OFFLINEFILES_EVENTS, pc_events_: ?*u32) HRESULT {
                return @as(*const IOfflineFilesEventsFilter.VTable, @ptrCast(self.vtable)).GetExcludedEvents(@as(*const IOfflineFilesEventsFilter, @ptrCast(self)), c_elements_, prg_events_, pc_events_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesErrorInfo_Value = Guid.initString("7112fa5f-7571-435a-8eb7-195c7c1429bc");
pub const IID_IOfflineFilesErrorInfo = &IID_IOfflineFilesErrorInfo_Value;
pub const IOfflineFilesErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRawData: *const fn (
            self: *const IOfflineFilesErrorInfo,
            pp_blob: ?*?*BYTE_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const IOfflineFilesErrorInfo,
            ppsz_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRawData(self: *const T, pp_blob_: ?*?*BYTE_BLOB) HRESULT {
                return @as(*const IOfflineFilesErrorInfo.VTable, @ptrCast(self.vtable)).GetRawData(@as(*const IOfflineFilesErrorInfo, @ptrCast(self)), pp_blob_);
            }
            pub inline fn getDescription(self: *const T, ppsz_description_: ?*?PWSTR) HRESULT {
                return @as(*const IOfflineFilesErrorInfo.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const IOfflineFilesErrorInfo, @ptrCast(self)), ppsz_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesSyncErrorItemInfo_Value = Guid.initString("ecdbaf0d-6a18-4d55-8017-108f7660ba44");
pub const IID_IOfflineFilesSyncErrorItemInfo = &IID_IOfflineFilesSyncErrorItemInfo_Value;
pub const IOfflineFilesSyncErrorItemInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFileAttributes: *const fn (
            self: *const IOfflineFilesSyncErrorItemInfo,
            pdw_attributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTimes: *const fn (
            self: *const IOfflineFilesSyncErrorItemInfo,
            pft_last_write: ?*FILETIME,
            pft_change: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSize: *const fn (
            self: *const IOfflineFilesSyncErrorItemInfo,
            p_size: ?*LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFileAttributes(self: *const T, pdw_attributes_: ?*u32) HRESULT {
                return @as(*const IOfflineFilesSyncErrorItemInfo.VTable, @ptrCast(self.vtable)).GetFileAttributes(@as(*const IOfflineFilesSyncErrorItemInfo, @ptrCast(self)), pdw_attributes_);
            }
            pub inline fn getFileTimes(self: *const T, pft_last_write_: ?*FILETIME, pft_change_: ?*FILETIME) HRESULT {
                return @as(*const IOfflineFilesSyncErrorItemInfo.VTable, @ptrCast(self.vtable)).GetFileTimes(@as(*const IOfflineFilesSyncErrorItemInfo, @ptrCast(self)), pft_last_write_, pft_change_);
            }
            pub inline fn getFileSize(self: *const T, p_size_: ?*LARGE_INTEGER) HRESULT {
                return @as(*const IOfflineFilesSyncErrorItemInfo.VTable, @ptrCast(self.vtable)).GetFileSize(@as(*const IOfflineFilesSyncErrorItemInfo, @ptrCast(self)), p_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesSyncErrorInfo_Value = Guid.initString("59f95e46-eb54-49d1-be76-de95458d01b0");
pub const IID_IOfflineFilesSyncErrorInfo = &IID_IOfflineFilesSyncErrorInfo_Value;
pub const IOfflineFilesSyncErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesErrorInfo.VTable,
        GetSyncOperation: *const fn (
            self: *const IOfflineFilesSyncErrorInfo,
            p_sync_op: ?*OFFLINEFILES_SYNC_OPERATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemChangeFlags: *const fn (
            self: *const IOfflineFilesSyncErrorInfo,
            pdw_item_change_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InfoEnumerated: *const fn (
            self: *const IOfflineFilesSyncErrorInfo,
            pb_local_enumerated: ?*BOOL,
            pb_remote_enumerated: ?*BOOL,
            pb_original_enumerated: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InfoAvailable: *const fn (
            self: *const IOfflineFilesSyncErrorInfo,
            pb_local_info: ?*BOOL,
            pb_remote_info: ?*BOOL,
            pb_original_info: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalInfo: *const fn (
            self: *const IOfflineFilesSyncErrorInfo,
            pp_info: ?*?*IOfflineFilesSyncErrorItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemoteInfo: *const fn (
            self: *const IOfflineFilesSyncErrorInfo,
            pp_info: ?*?*IOfflineFilesSyncErrorItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalInfo: *const fn (
            self: *const IOfflineFilesSyncErrorInfo,
            pp_info: ?*?*IOfflineFilesSyncErrorItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesErrorInfo.MethodMixin(T);
            pub inline fn getSyncOperation(self: *const T, p_sync_op_: ?*OFFLINEFILES_SYNC_OPERATION) HRESULT {
                return @as(*const IOfflineFilesSyncErrorInfo.VTable, @ptrCast(self.vtable)).GetSyncOperation(@as(*const IOfflineFilesSyncErrorInfo, @ptrCast(self)), p_sync_op_);
            }
            pub inline fn getItemChangeFlags(self: *const T, pdw_item_change_flags_: ?*u32) HRESULT {
                return @as(*const IOfflineFilesSyncErrorInfo.VTable, @ptrCast(self.vtable)).GetItemChangeFlags(@as(*const IOfflineFilesSyncErrorInfo, @ptrCast(self)), pdw_item_change_flags_);
            }
            pub inline fn infoEnumerated(self: *const T, pb_local_enumerated_: ?*BOOL, pb_remote_enumerated_: ?*BOOL, pb_original_enumerated_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesSyncErrorInfo.VTable, @ptrCast(self.vtable)).InfoEnumerated(@as(*const IOfflineFilesSyncErrorInfo, @ptrCast(self)), pb_local_enumerated_, pb_remote_enumerated_, pb_original_enumerated_);
            }
            pub inline fn infoAvailable(self: *const T, pb_local_info_: ?*BOOL, pb_remote_info_: ?*BOOL, pb_original_info_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesSyncErrorInfo.VTable, @ptrCast(self.vtable)).InfoAvailable(@as(*const IOfflineFilesSyncErrorInfo, @ptrCast(self)), pb_local_info_, pb_remote_info_, pb_original_info_);
            }
            pub inline fn getLocalInfo(self: *const T, pp_info_: ?*?*IOfflineFilesSyncErrorItemInfo) HRESULT {
                return @as(*const IOfflineFilesSyncErrorInfo.VTable, @ptrCast(self.vtable)).GetLocalInfo(@as(*const IOfflineFilesSyncErrorInfo, @ptrCast(self)), pp_info_);
            }
            pub inline fn getRemoteInfo(self: *const T, pp_info_: ?*?*IOfflineFilesSyncErrorItemInfo) HRESULT {
                return @as(*const IOfflineFilesSyncErrorInfo.VTable, @ptrCast(self.vtable)).GetRemoteInfo(@as(*const IOfflineFilesSyncErrorInfo, @ptrCast(self)), pp_info_);
            }
            pub inline fn getOriginalInfo(self: *const T, pp_info_: ?*?*IOfflineFilesSyncErrorItemInfo) HRESULT {
                return @as(*const IOfflineFilesSyncErrorInfo.VTable, @ptrCast(self.vtable)).GetOriginalInfo(@as(*const IOfflineFilesSyncErrorInfo, @ptrCast(self)), pp_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesProgress_Value = Guid.initString("fad63237-c55b-4911-9850-bcf96d4c979e");
pub const IID_IOfflineFilesProgress = &IID_IOfflineFilesProgress_Value;
pub const IOfflineFilesProgress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin: *const fn (
            self: *const IOfflineFilesProgress,
            pb_abort: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAbort: *const fn (
            self: *const IOfflineFilesProgress,
            pb_abort: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn (
            self: *const IOfflineFilesProgress,
            hr_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn begin(self: *const T, pb_abort_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesProgress.VTable, @ptrCast(self.vtable)).Begin(@as(*const IOfflineFilesProgress, @ptrCast(self)), pb_abort_);
            }
            pub inline fn queryAbort(self: *const T, pb_abort_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesProgress.VTable, @ptrCast(self.vtable)).QueryAbort(@as(*const IOfflineFilesProgress, @ptrCast(self)), pb_abort_);
            }
            pub inline fn end(self: *const T, hr_result_: HRESULT) HRESULT {
                return @as(*const IOfflineFilesProgress.VTable, @ptrCast(self.vtable)).End(@as(*const IOfflineFilesProgress, @ptrCast(self)), hr_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesSimpleProgress_Value = Guid.initString("c34f7f9b-c43d-4f9d-a776-c0eb6de5d401");
pub const IID_IOfflineFilesSimpleProgress = &IID_IOfflineFilesSimpleProgress_Value;
pub const IOfflineFilesSimpleProgress = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesProgress.VTable,
        ItemBegin: *const fn (
            self: *const IOfflineFilesSimpleProgress,
            psz_file: ?[*:0]const u16,
            p_response: ?*OFFLINEFILES_OP_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemResult: *const fn (
            self: *const IOfflineFilesSimpleProgress,
            psz_file: ?[*:0]const u16,
            hr_result: HRESULT,
            p_response: ?*OFFLINEFILES_OP_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesProgress.MethodMixin(T);
            pub inline fn itemBegin(self: *const T, psz_file_: ?[*:0]const u16, p_response_: ?*OFFLINEFILES_OP_RESPONSE) HRESULT {
                return @as(*const IOfflineFilesSimpleProgress.VTable, @ptrCast(self.vtable)).ItemBegin(@as(*const IOfflineFilesSimpleProgress, @ptrCast(self)), psz_file_, p_response_);
            }
            pub inline fn itemResult(self: *const T, psz_file_: ?[*:0]const u16, hr_result_: HRESULT, p_response_: ?*OFFLINEFILES_OP_RESPONSE) HRESULT {
                return @as(*const IOfflineFilesSimpleProgress.VTable, @ptrCast(self.vtable)).ItemResult(@as(*const IOfflineFilesSimpleProgress, @ptrCast(self)), psz_file_, hr_result_, p_response_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesSyncProgress_Value = Guid.initString("6931f49a-6fc7-4c1b-b265-56793fc451b7");
pub const IID_IOfflineFilesSyncProgress = &IID_IOfflineFilesSyncProgress_Value;
pub const IOfflineFilesSyncProgress = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesProgress.VTable,
        SyncItemBegin: *const fn (
            self: *const IOfflineFilesSyncProgress,
            psz_file: ?[*:0]const u16,
            p_response: ?*OFFLINEFILES_OP_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncItemResult: *const fn (
            self: *const IOfflineFilesSyncProgress,
            psz_file: ?[*:0]const u16,
            hr_result: HRESULT,
            p_error_info: ?*IOfflineFilesSyncErrorInfo,
            p_response: ?*OFFLINEFILES_OP_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesProgress.MethodMixin(T);
            pub inline fn syncItemBegin(self: *const T, psz_file_: ?[*:0]const u16, p_response_: ?*OFFLINEFILES_OP_RESPONSE) HRESULT {
                return @as(*const IOfflineFilesSyncProgress.VTable, @ptrCast(self.vtable)).SyncItemBegin(@as(*const IOfflineFilesSyncProgress, @ptrCast(self)), psz_file_, p_response_);
            }
            pub inline fn syncItemResult(self: *const T, psz_file_: ?[*:0]const u16, hr_result_: HRESULT, p_error_info_: ?*IOfflineFilesSyncErrorInfo, p_response_: ?*OFFLINEFILES_OP_RESPONSE) HRESULT {
                return @as(*const IOfflineFilesSyncProgress.VTable, @ptrCast(self.vtable)).SyncItemResult(@as(*const IOfflineFilesSyncProgress, @ptrCast(self)), psz_file_, hr_result_, p_error_info_, p_response_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesSyncConflictHandler_Value = Guid.initString("b6dd5092-c65c-46b6-97b8-fadd08e7e1be");
pub const IID_IOfflineFilesSyncConflictHandler = &IID_IOfflineFilesSyncConflictHandler_Value;
pub const IOfflineFilesSyncConflictHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ResolveConflict: *const fn (
            self: *const IOfflineFilesSyncConflictHandler,
            psz_path: ?[*:0]const u16,
            f_state_known: u32,
            state: OFFLINEFILES_SYNC_STATE,
            f_change_details: u32,
            p_conflict_resolution: ?*OFFLINEFILES_SYNC_CONFLICT_RESOLVE,
            ppsz_new_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn resolveConflict(self: *const T, psz_path_: ?[*:0]const u16, f_state_known_: u32, state_: OFFLINEFILES_SYNC_STATE, f_change_details_: u32, p_conflict_resolution_: ?*OFFLINEFILES_SYNC_CONFLICT_RESOLVE, ppsz_new_name_: ?*?PWSTR) HRESULT {
                return @as(*const IOfflineFilesSyncConflictHandler.VTable, @ptrCast(self.vtable)).ResolveConflict(@as(*const IOfflineFilesSyncConflictHandler, @ptrCast(self)), psz_path_, f_state_known_, state_, f_change_details_, p_conflict_resolution_, ppsz_new_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesItemFilter_Value = Guid.initString("f4b5a26c-dc05-4f20-ada4-551f1077be5c");
pub const IID_IOfflineFilesItemFilter = &IID_IOfflineFilesItemFilter_Value;
pub const IOfflineFilesItemFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFilterFlags: *const fn (
            self: *const IOfflineFilesItemFilter,
            pull_flags: ?*u64,
            pull_mask: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimeFilter: *const fn (
            self: *const IOfflineFilesItemFilter,
            pft_time: ?*FILETIME,
            pb_eval_time_of_day: ?*BOOL,
            p_time_type: ?*OFFLINEFILES_ITEM_TIME,
            p_compare: ?*OFFLINEFILES_COMPARE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPatternFilter: *const fn (
            self: *const IOfflineFilesItemFilter,
            psz_pattern: [*:0]u16,
            cch_pattern: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFilterFlags(self: *const T, pull_flags_: ?*u64, pull_mask_: ?*u64) HRESULT {
                return @as(*const IOfflineFilesItemFilter.VTable, @ptrCast(self.vtable)).GetFilterFlags(@as(*const IOfflineFilesItemFilter, @ptrCast(self)), pull_flags_, pull_mask_);
            }
            pub inline fn getTimeFilter(self: *const T, pft_time_: ?*FILETIME, pb_eval_time_of_day_: ?*BOOL, p_time_type_: ?*OFFLINEFILES_ITEM_TIME, p_compare_: ?*OFFLINEFILES_COMPARE) HRESULT {
                return @as(*const IOfflineFilesItemFilter.VTable, @ptrCast(self.vtable)).GetTimeFilter(@as(*const IOfflineFilesItemFilter, @ptrCast(self)), pft_time_, pb_eval_time_of_day_, p_time_type_, p_compare_);
            }
            pub inline fn getPatternFilter(self: *const T, psz_pattern_: [*:0]u16, cch_pattern_: u32) HRESULT {
                return @as(*const IOfflineFilesItemFilter.VTable, @ptrCast(self.vtable)).GetPatternFilter(@as(*const IOfflineFilesItemFilter, @ptrCast(self)), psz_pattern_, cch_pattern_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesItem_Value = Guid.initString("4a753da6-e044-4f12-a718-5d14d079a906");
pub const IID_IOfflineFilesItem = &IID_IOfflineFilesItem_Value;
pub const IOfflineFilesItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemType: *const fn (
            self: *const IOfflineFilesItem,
            p_item_type: ?*OFFLINEFILES_ITEM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn (
            self: *const IOfflineFilesItem,
            ppsz_path: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentItem: *const fn (
            self: *const IOfflineFilesItem,
            pp_item: ?*?*IOfflineFilesItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IOfflineFilesItem,
            dw_query_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMarkedForDeletion: *const fn (
            self: *const IOfflineFilesItem,
            pb_marked_for_deletion: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getItemType(self: *const T, p_item_type_: ?*OFFLINEFILES_ITEM_TYPE) HRESULT {
                return @as(*const IOfflineFilesItem.VTable, @ptrCast(self.vtable)).GetItemType(@as(*const IOfflineFilesItem, @ptrCast(self)), p_item_type_);
            }
            pub inline fn getPath(self: *const T, ppsz_path_: ?*?PWSTR) HRESULT {
                return @as(*const IOfflineFilesItem.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IOfflineFilesItem, @ptrCast(self)), ppsz_path_);
            }
            pub inline fn getParentItem(self: *const T, pp_item_: ?*?*IOfflineFilesItem) HRESULT {
                return @as(*const IOfflineFilesItem.VTable, @ptrCast(self.vtable)).GetParentItem(@as(*const IOfflineFilesItem, @ptrCast(self)), pp_item_);
            }
            pub inline fn refresh(self: *const T, dw_query_flags_: u32) HRESULT {
                return @as(*const IOfflineFilesItem.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IOfflineFilesItem, @ptrCast(self)), dw_query_flags_);
            }
            pub inline fn isMarkedForDeletion(self: *const T, pb_marked_for_deletion_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesItem.VTable, @ptrCast(self.vtable)).IsMarkedForDeletion(@as(*const IOfflineFilesItem, @ptrCast(self)), pb_marked_for_deletion_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesServerItem_Value = Guid.initString("9b1c9576-a92b-4151-8e9e-7c7b3ec2e016");
pub const IID_IOfflineFilesServerItem = &IID_IOfflineFilesServerItem_Value;
pub const IOfflineFilesServerItem = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesShareItem_Value = Guid.initString("bab7e48d-4804-41b5-a44d-0f199b06b145");
pub const IID_IOfflineFilesShareItem = &IID_IOfflineFilesShareItem_Value;
pub const IOfflineFilesShareItem = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesDirectoryItem_Value = Guid.initString("2273597a-a08c-4a00-a37a-c1ae4e9a1cfd");
pub const IID_IOfflineFilesDirectoryItem = &IID_IOfflineFilesDirectoryItem_Value;
pub const IOfflineFilesDirectoryItem = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesFileItem_Value = Guid.initString("8dfadead-26c2-4eff-8a72-6b50723d9a00");
pub const IID_IOfflineFilesFileItem = &IID_IOfflineFilesFileItem_Value;
pub const IOfflineFilesFileItem = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesItem.VTable,
        IsSparse: *const fn (
            self: *const IOfflineFilesFileItem,
            pb_is_sparse: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEncrypted: *const fn (
            self: *const IOfflineFilesFileItem,
            pb_is_encrypted: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesItem.MethodMixin(T);
            pub inline fn isSparse(self: *const T, pb_is_sparse_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesFileItem.VTable, @ptrCast(self.vtable)).IsSparse(@as(*const IOfflineFilesFileItem, @ptrCast(self)), pb_is_sparse_);
            }
            pub inline fn isEncrypted(self: *const T, pb_is_encrypted_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesFileItem.VTable, @ptrCast(self.vtable)).IsEncrypted(@as(*const IOfflineFilesFileItem, @ptrCast(self)), pb_is_encrypted_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumOfflineFilesItems_Value = Guid.initString("da70e815-c361-4407-bc0b-0d7046e5f2cd");
pub const IID_IEnumOfflineFilesItems = &IID_IEnumOfflineFilesItems_Value;
pub const IEnumOfflineFilesItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumOfflineFilesItems,
            celt: u32,
            rgelt: [*]?*IOfflineFilesItem,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumOfflineFilesItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumOfflineFilesItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumOfflineFilesItems,
            ppenum: ?*?*IEnumOfflineFilesItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*IOfflineFilesItem, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumOfflineFilesItems.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumOfflineFilesItems, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumOfflineFilesItems.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumOfflineFilesItems, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumOfflineFilesItems.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumOfflineFilesItems, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumOfflineFilesItems) HRESULT {
                return @as(*const IEnumOfflineFilesItems.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumOfflineFilesItems, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesItemContainer_Value = Guid.initString("3836f049-9413-45dd-bf46-b5aaa82dc310");
pub const IID_IOfflineFilesItemContainer = &IID_IOfflineFilesItemContainer_Value;
pub const IOfflineFilesItemContainer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumItems: *const fn (
            self: *const IOfflineFilesItemContainer,
            dw_query_flags: u32,
            ppenum: ?*?*IEnumOfflineFilesItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumItemsEx: *const fn (
            self: *const IOfflineFilesItemContainer,
            p_include_file_filter: ?*IOfflineFilesItemFilter,
            p_include_dir_filter: ?*IOfflineFilesItemFilter,
            p_exclude_file_filter: ?*IOfflineFilesItemFilter,
            p_exclude_dir_filter: ?*IOfflineFilesItemFilter,
            dw_enum_flags: u32,
            dw_query_flags: u32,
            ppenum: ?*?*IEnumOfflineFilesItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enumItems(self: *const T, dw_query_flags_: u32, ppenum_: ?*?*IEnumOfflineFilesItems) HRESULT {
                return @as(*const IOfflineFilesItemContainer.VTable, @ptrCast(self.vtable)).EnumItems(@as(*const IOfflineFilesItemContainer, @ptrCast(self)), dw_query_flags_, ppenum_);
            }
            pub inline fn enumItemsEx(self: *const T, p_include_file_filter_: ?*IOfflineFilesItemFilter, p_include_dir_filter_: ?*IOfflineFilesItemFilter, p_exclude_file_filter_: ?*IOfflineFilesItemFilter, p_exclude_dir_filter_: ?*IOfflineFilesItemFilter, dw_enum_flags_: u32, dw_query_flags_: u32, ppenum_: ?*?*IEnumOfflineFilesItems) HRESULT {
                return @as(*const IOfflineFilesItemContainer.VTable, @ptrCast(self.vtable)).EnumItemsEx(@as(*const IOfflineFilesItemContainer, @ptrCast(self)), p_include_file_filter_, p_include_dir_filter_, p_exclude_file_filter_, p_exclude_dir_filter_, dw_enum_flags_, dw_query_flags_, ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesChangeInfo_Value = Guid.initString("a96e6fa4-e0d1-4c29-960b-ee508fe68c72");
pub const IID_IOfflineFilesChangeInfo = &IID_IOfflineFilesChangeInfo_Value;
pub const IOfflineFilesChangeInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsDirty: *const fn (
            self: *const IOfflineFilesChangeInfo,
            pb_dirty: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDeletedOffline: *const fn (
            self: *const IOfflineFilesChangeInfo,
            pb_deleted_offline: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCreatedOffline: *const fn (
            self: *const IOfflineFilesChangeInfo,
            pb_created_offline: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLocallyModifiedData: *const fn (
            self: *const IOfflineFilesChangeInfo,
            pb_locally_modified_data: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLocallyModifiedAttributes: *const fn (
            self: *const IOfflineFilesChangeInfo,
            pb_locally_modified_attributes: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLocallyModifiedTime: *const fn (
            self: *const IOfflineFilesChangeInfo,
            pb_locally_modified_time: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isDirty(self: *const T, pb_dirty_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesChangeInfo.VTable, @ptrCast(self.vtable)).IsDirty(@as(*const IOfflineFilesChangeInfo, @ptrCast(self)), pb_dirty_);
            }
            pub inline fn isDeletedOffline(self: *const T, pb_deleted_offline_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesChangeInfo.VTable, @ptrCast(self.vtable)).IsDeletedOffline(@as(*const IOfflineFilesChangeInfo, @ptrCast(self)), pb_deleted_offline_);
            }
            pub inline fn isCreatedOffline(self: *const T, pb_created_offline_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesChangeInfo.VTable, @ptrCast(self.vtable)).IsCreatedOffline(@as(*const IOfflineFilesChangeInfo, @ptrCast(self)), pb_created_offline_);
            }
            pub inline fn isLocallyModifiedData(self: *const T, pb_locally_modified_data_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesChangeInfo.VTable, @ptrCast(self.vtable)).IsLocallyModifiedData(@as(*const IOfflineFilesChangeInfo, @ptrCast(self)), pb_locally_modified_data_);
            }
            pub inline fn isLocallyModifiedAttributes(self: *const T, pb_locally_modified_attributes_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesChangeInfo.VTable, @ptrCast(self.vtable)).IsLocallyModifiedAttributes(@as(*const IOfflineFilesChangeInfo, @ptrCast(self)), pb_locally_modified_attributes_);
            }
            pub inline fn isLocallyModifiedTime(self: *const T, pb_locally_modified_time_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesChangeInfo.VTable, @ptrCast(self.vtable)).IsLocallyModifiedTime(@as(*const IOfflineFilesChangeInfo, @ptrCast(self)), pb_locally_modified_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesDirtyInfo_Value = Guid.initString("0f50ce33-bac9-4eaa-a11d-da0e527d047d");
pub const IID_IOfflineFilesDirtyInfo = &IID_IOfflineFilesDirtyInfo_Value;
pub const IOfflineFilesDirtyInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LocalDirtyByteCount: *const fn (
            self: *const IOfflineFilesDirtyInfo,
            p_dirty_byte_count: ?*LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoteDirtyByteCount: *const fn (
            self: *const IOfflineFilesDirtyInfo,
            p_dirty_byte_count: ?*LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn localDirtyByteCount(self: *const T, p_dirty_byte_count_: ?*LARGE_INTEGER) HRESULT {
                return @as(*const IOfflineFilesDirtyInfo.VTable, @ptrCast(self.vtable)).LocalDirtyByteCount(@as(*const IOfflineFilesDirtyInfo, @ptrCast(self)), p_dirty_byte_count_);
            }
            pub inline fn remoteDirtyByteCount(self: *const T, p_dirty_byte_count_: ?*LARGE_INTEGER) HRESULT {
                return @as(*const IOfflineFilesDirtyInfo.VTable, @ptrCast(self.vtable)).RemoteDirtyByteCount(@as(*const IOfflineFilesDirtyInfo, @ptrCast(self)), p_dirty_byte_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesFileSysInfo_Value = Guid.initString("bc1a163f-7bfd-4d88-9c66-96ea9a6a3d6b");
pub const IID_IOfflineFilesFileSysInfo = &IID_IOfflineFilesFileSysInfo_Value;
pub const IOfflineFilesFileSysInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttributes: *const fn (
            self: *const IOfflineFilesFileSysInfo,
            copy: OFFLINEFILES_ITEM_COPY,
            pdw_attributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimes: *const fn (
            self: *const IOfflineFilesFileSysInfo,
            copy: OFFLINEFILES_ITEM_COPY,
            pft_creation_time: ?*FILETIME,
            pft_last_write_time: ?*FILETIME,
            pft_change_time: ?*FILETIME,
            pft_last_access_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSize: *const fn (
            self: *const IOfflineFilesFileSysInfo,
            copy: OFFLINEFILES_ITEM_COPY,
            p_size: ?*LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAttributes(self: *const T, copy_: OFFLINEFILES_ITEM_COPY, pdw_attributes_: ?*u32) HRESULT {
                return @as(*const IOfflineFilesFileSysInfo.VTable, @ptrCast(self.vtable)).GetAttributes(@as(*const IOfflineFilesFileSysInfo, @ptrCast(self)), copy_, pdw_attributes_);
            }
            pub inline fn getTimes(self: *const T, copy_: OFFLINEFILES_ITEM_COPY, pft_creation_time_: ?*FILETIME, pft_last_write_time_: ?*FILETIME, pft_change_time_: ?*FILETIME, pft_last_access_time_: ?*FILETIME) HRESULT {
                return @as(*const IOfflineFilesFileSysInfo.VTable, @ptrCast(self.vtable)).GetTimes(@as(*const IOfflineFilesFileSysInfo, @ptrCast(self)), copy_, pft_creation_time_, pft_last_write_time_, pft_change_time_, pft_last_access_time_);
            }
            pub inline fn getFileSize(self: *const T, copy_: OFFLINEFILES_ITEM_COPY, p_size_: ?*LARGE_INTEGER) HRESULT {
                return @as(*const IOfflineFilesFileSysInfo.VTable, @ptrCast(self.vtable)).GetFileSize(@as(*const IOfflineFilesFileSysInfo, @ptrCast(self)), copy_, p_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesPinInfo_Value = Guid.initString("5b2b0655-b3fd-497d-adeb-bd156bc8355b");
pub const IID_IOfflineFilesPinInfo = &IID_IOfflineFilesPinInfo_Value;
pub const IOfflineFilesPinInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsPinned: *const fn (
            self: *const IOfflineFilesPinInfo,
            pb_pinned: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPinnedForUser: *const fn (
            self: *const IOfflineFilesPinInfo,
            pb_pinned_for_user: ?*BOOL,
            pb_inherit: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPinnedForUserByPolicy: *const fn (
            self: *const IOfflineFilesPinInfo,
            pb_pinned_for_user: ?*BOOL,
            pb_inherit: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPinnedForComputer: *const fn (
            self: *const IOfflineFilesPinInfo,
            pb_pinned_for_computer: ?*BOOL,
            pb_inherit: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPinnedForFolderRedirection: *const fn (
            self: *const IOfflineFilesPinInfo,
            pb_pinned_for_folder_redirection: ?*BOOL,
            pb_inherit: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isPinned(self: *const T, pb_pinned_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesPinInfo.VTable, @ptrCast(self.vtable)).IsPinned(@as(*const IOfflineFilesPinInfo, @ptrCast(self)), pb_pinned_);
            }
            pub inline fn isPinnedForUser(self: *const T, pb_pinned_for_user_: ?*BOOL, pb_inherit_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesPinInfo.VTable, @ptrCast(self.vtable)).IsPinnedForUser(@as(*const IOfflineFilesPinInfo, @ptrCast(self)), pb_pinned_for_user_, pb_inherit_);
            }
            pub inline fn isPinnedForUserByPolicy(self: *const T, pb_pinned_for_user_: ?*BOOL, pb_inherit_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesPinInfo.VTable, @ptrCast(self.vtable)).IsPinnedForUserByPolicy(@as(*const IOfflineFilesPinInfo, @ptrCast(self)), pb_pinned_for_user_, pb_inherit_);
            }
            pub inline fn isPinnedForComputer(self: *const T, pb_pinned_for_computer_: ?*BOOL, pb_inherit_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesPinInfo.VTable, @ptrCast(self.vtable)).IsPinnedForComputer(@as(*const IOfflineFilesPinInfo, @ptrCast(self)), pb_pinned_for_computer_, pb_inherit_);
            }
            pub inline fn isPinnedForFolderRedirection(self: *const T, pb_pinned_for_folder_redirection_: ?*BOOL, pb_inherit_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesPinInfo.VTable, @ptrCast(self.vtable)).IsPinnedForFolderRedirection(@as(*const IOfflineFilesPinInfo, @ptrCast(self)), pb_pinned_for_folder_redirection_, pb_inherit_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesPinInfo2_Value = Guid.initString("623c58a2-42ed-4ad7-b69a-0f1b30a72d0d");
pub const IID_IOfflineFilesPinInfo2 = &IID_IOfflineFilesPinInfo2_Value;
pub const IOfflineFilesPinInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesPinInfo.VTable,
        IsPartlyPinned: *const fn (
            self: *const IOfflineFilesPinInfo2,
            pb_partly_pinned: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesPinInfo.MethodMixin(T);
            pub inline fn isPartlyPinned(self: *const T, pb_partly_pinned_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesPinInfo2.VTable, @ptrCast(self.vtable)).IsPartlyPinned(@as(*const IOfflineFilesPinInfo2, @ptrCast(self)), pb_partly_pinned_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOfflineFilesTransparentCacheInfo_Value = Guid.initString("bcaf4a01-5b68-4b56-a6a1-8d2786ede8e3");
pub const IID_IOfflineFilesTransparentCacheInfo = &IID_IOfflineFilesTransparentCacheInfo_Value;
pub const IOfflineFilesTransparentCacheInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsTransparentlyCached: *const fn (
            self: *const IOfflineFilesTransparentCacheInfo,
            pb_transparently_cached: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isTransparentlyCached(self: *const T, pb_transparently_cached_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesTransparentCacheInfo.VTable, @ptrCast(self.vtable)).IsTransparentlyCached(@as(*const IOfflineFilesTransparentCacheInfo, @ptrCast(self)), pb_transparently_cached_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesGhostInfo_Value = Guid.initString("2b09d48c-8ab5-464f-a755-a59d92f99429");
pub const IID_IOfflineFilesGhostInfo = &IID_IOfflineFilesGhostInfo_Value;
pub const IOfflineFilesGhostInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsGhosted: *const fn (
            self: *const IOfflineFilesGhostInfo,
            pb_ghosted: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isGhosted(self: *const T, pb_ghosted_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesGhostInfo.VTable, @ptrCast(self.vtable)).IsGhosted(@as(*const IOfflineFilesGhostInfo, @ptrCast(self)), pb_ghosted_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesConnectionInfo_Value = Guid.initString("efb23a09-a867-4be8-83a6-86969a7d0856");
pub const IID_IOfflineFilesConnectionInfo = &IID_IOfflineFilesConnectionInfo_Value;
pub const IOfflineFilesConnectionInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetConnectState: *const fn (
            self: *const IOfflineFilesConnectionInfo,
            p_connect_state: ?*OFFLINEFILES_CONNECT_STATE,
            p_offline_reason: ?*OFFLINEFILES_OFFLINE_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConnectState: *const fn (
            self: *const IOfflineFilesConnectionInfo,
            hwnd_parent: ?HWND,
            dw_flags: u32,
            connect_state: OFFLINEFILES_CONNECT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransitionOnline: *const fn (
            self: *const IOfflineFilesConnectionInfo,
            hwnd_parent: ?HWND,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransitionOffline: *const fn (
            self: *const IOfflineFilesConnectionInfo,
            hwnd_parent: ?HWND,
            dw_flags: u32,
            b_force_open_files_closed: BOOL,
            pb_open_files_prevented_transition: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getConnectState(self: *const T, p_connect_state_: ?*OFFLINEFILES_CONNECT_STATE, p_offline_reason_: ?*OFFLINEFILES_OFFLINE_REASON) HRESULT {
                return @as(*const IOfflineFilesConnectionInfo.VTable, @ptrCast(self.vtable)).GetConnectState(@as(*const IOfflineFilesConnectionInfo, @ptrCast(self)), p_connect_state_, p_offline_reason_);
            }
            pub inline fn setConnectState(self: *const T, hwnd_parent_: ?HWND, dw_flags_: u32, connect_state_: OFFLINEFILES_CONNECT_STATE) HRESULT {
                return @as(*const IOfflineFilesConnectionInfo.VTable, @ptrCast(self.vtable)).SetConnectState(@as(*const IOfflineFilesConnectionInfo, @ptrCast(self)), hwnd_parent_, dw_flags_, connect_state_);
            }
            pub inline fn transitionOnline(self: *const T, hwnd_parent_: ?HWND, dw_flags_: u32) HRESULT {
                return @as(*const IOfflineFilesConnectionInfo.VTable, @ptrCast(self.vtable)).TransitionOnline(@as(*const IOfflineFilesConnectionInfo, @ptrCast(self)), hwnd_parent_, dw_flags_);
            }
            pub inline fn transitionOffline(self: *const T, hwnd_parent_: ?HWND, dw_flags_: u32, b_force_open_files_closed_: BOOL, pb_open_files_prevented_transition_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesConnectionInfo.VTable, @ptrCast(self.vtable)).TransitionOffline(@as(*const IOfflineFilesConnectionInfo, @ptrCast(self)), hwnd_parent_, dw_flags_, b_force_open_files_closed_, pb_open_files_prevented_transition_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesShareInfo_Value = Guid.initString("7bcc43e7-31ce-4ca4-8ccd-1cff2dc494da");
pub const IID_IOfflineFilesShareInfo = &IID_IOfflineFilesShareInfo_Value;
pub const IOfflineFilesShareInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetShareItem: *const fn (
            self: *const IOfflineFilesShareInfo,
            pp_share_item: ?*?*IOfflineFilesShareItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShareCachingMode: *const fn (
            self: *const IOfflineFilesShareInfo,
            p_caching_mode: ?*OFFLINEFILES_CACHING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsShareDfsJunction: *const fn (
            self: *const IOfflineFilesShareInfo,
            pb_is_dfs_junction: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getShareItem(self: *const T, pp_share_item_: ?*?*IOfflineFilesShareItem) HRESULT {
                return @as(*const IOfflineFilesShareInfo.VTable, @ptrCast(self.vtable)).GetShareItem(@as(*const IOfflineFilesShareInfo, @ptrCast(self)), pp_share_item_);
            }
            pub inline fn getShareCachingMode(self: *const T, p_caching_mode_: ?*OFFLINEFILES_CACHING_MODE) HRESULT {
                return @as(*const IOfflineFilesShareInfo.VTable, @ptrCast(self.vtable)).GetShareCachingMode(@as(*const IOfflineFilesShareInfo, @ptrCast(self)), p_caching_mode_);
            }
            pub inline fn isShareDfsJunction(self: *const T, pb_is_dfs_junction_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesShareInfo.VTable, @ptrCast(self.vtable)).IsShareDfsJunction(@as(*const IOfflineFilesShareInfo, @ptrCast(self)), pb_is_dfs_junction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesSuspend_Value = Guid.initString("62c4560f-bc0b-48ca-ad9d-34cb528d99a9");
pub const IID_IOfflineFilesSuspend = &IID_IOfflineFilesSuspend_Value;
pub const IOfflineFilesSuspend = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SuspendRoot: *const fn (
            self: *const IOfflineFilesSuspend,
            b_suspend: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn suspendRoot(self: *const T, b_suspend_: BOOL) HRESULT {
                return @as(*const IOfflineFilesSuspend.VTable, @ptrCast(self.vtable)).SuspendRoot(@as(*const IOfflineFilesSuspend, @ptrCast(self)), b_suspend_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesSuspendInfo_Value = Guid.initString("a457c25b-4e9c-4b04-85af-8932ccd97889");
pub const IID_IOfflineFilesSuspendInfo = &IID_IOfflineFilesSuspendInfo_Value;
pub const IOfflineFilesSuspendInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsSuspended: *const fn (
            self: *const IOfflineFilesSuspendInfo,
            pb_suspended: ?*BOOL,
            pb_suspended_root: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isSuspended(self: *const T, pb_suspended_: ?*BOOL, pb_suspended_root_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesSuspendInfo.VTable, @ptrCast(self.vtable)).IsSuspended(@as(*const IOfflineFilesSuspendInfo, @ptrCast(self)), pb_suspended_, pb_suspended_root_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesSetting_Value = Guid.initString("d871d3f7-f613-48a1-827e-7a34e560fff6");
pub const IID_IOfflineFilesSetting = &IID_IOfflineFilesSetting_Value;
pub const IOfflineFilesSetting = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn (
            self: *const IOfflineFilesSetting,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueType: *const fn (
            self: *const IOfflineFilesSetting,
            p_type: ?*OFFLINEFILES_SETTING_VALUE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreference: *const fn (
            self: *const IOfflineFilesSetting,
            pvar_value: ?*VARIANT,
            dw_scope: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreferenceScope: *const fn (
            self: *const IOfflineFilesSetting,
            pdw_scope: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreference: *const fn (
            self: *const IOfflineFilesSetting,
            pvar_value: ?*const VARIANT,
            dw_scope: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePreference: *const fn (
            self: *const IOfflineFilesSetting,
            dw_scope: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicy: *const fn (
            self: *const IOfflineFilesSetting,
            pvar_value: ?*VARIANT,
            dw_scope: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyScope: *const fn (
            self: *const IOfflineFilesSetting,
            pdw_scope: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IOfflineFilesSetting,
            pvar_value: ?*VARIANT,
            pb_set_by_policy: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const IOfflineFilesSetting.VTable, @ptrCast(self.vtable)).GetName(@as(*const IOfflineFilesSetting, @ptrCast(self)), ppsz_name_);
            }
            pub inline fn getValueType(self: *const T, p_type_: ?*OFFLINEFILES_SETTING_VALUE_TYPE) HRESULT {
                return @as(*const IOfflineFilesSetting.VTable, @ptrCast(self.vtable)).GetValueType(@as(*const IOfflineFilesSetting, @ptrCast(self)), p_type_);
            }
            pub inline fn getPreference(self: *const T, pvar_value_: ?*VARIANT, dw_scope_: u32) HRESULT {
                return @as(*const IOfflineFilesSetting.VTable, @ptrCast(self.vtable)).GetPreference(@as(*const IOfflineFilesSetting, @ptrCast(self)), pvar_value_, dw_scope_);
            }
            pub inline fn getPreferenceScope(self: *const T, pdw_scope_: ?*u32) HRESULT {
                return @as(*const IOfflineFilesSetting.VTable, @ptrCast(self.vtable)).GetPreferenceScope(@as(*const IOfflineFilesSetting, @ptrCast(self)), pdw_scope_);
            }
            pub inline fn setPreference(self: *const T, pvar_value_: ?*const VARIANT, dw_scope_: u32) HRESULT {
                return @as(*const IOfflineFilesSetting.VTable, @ptrCast(self.vtable)).SetPreference(@as(*const IOfflineFilesSetting, @ptrCast(self)), pvar_value_, dw_scope_);
            }
            pub inline fn deletePreference(self: *const T, dw_scope_: u32) HRESULT {
                return @as(*const IOfflineFilesSetting.VTable, @ptrCast(self.vtable)).DeletePreference(@as(*const IOfflineFilesSetting, @ptrCast(self)), dw_scope_);
            }
            pub inline fn getPolicy(self: *const T, pvar_value_: ?*VARIANT, dw_scope_: u32) HRESULT {
                return @as(*const IOfflineFilesSetting.VTable, @ptrCast(self.vtable)).GetPolicy(@as(*const IOfflineFilesSetting, @ptrCast(self)), pvar_value_, dw_scope_);
            }
            pub inline fn getPolicyScope(self: *const T, pdw_scope_: ?*u32) HRESULT {
                return @as(*const IOfflineFilesSetting.VTable, @ptrCast(self.vtable)).GetPolicyScope(@as(*const IOfflineFilesSetting, @ptrCast(self)), pdw_scope_);
            }
            pub inline fn getValue(self: *const T, pvar_value_: ?*VARIANT, pb_set_by_policy_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesSetting.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IOfflineFilesSetting, @ptrCast(self)), pvar_value_, pb_set_by_policy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumOfflineFilesSettings_Value = Guid.initString("729680c4-1a38-47bc-9e5c-02c51562ac30");
pub const IID_IEnumOfflineFilesSettings = &IID_IEnumOfflineFilesSettings_Value;
pub const IEnumOfflineFilesSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumOfflineFilesSettings,
            celt: u32,
            rgelt: [*]?*IOfflineFilesSetting,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumOfflineFilesSettings,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumOfflineFilesSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumOfflineFilesSettings,
            ppenum: ?*?*IEnumOfflineFilesSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*IOfflineFilesSetting, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumOfflineFilesSettings.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumOfflineFilesSettings, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumOfflineFilesSettings.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumOfflineFilesSettings, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumOfflineFilesSettings.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumOfflineFilesSettings, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumOfflineFilesSettings) HRESULT {
                return @as(*const IEnumOfflineFilesSettings.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumOfflineFilesSettings, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOfflineFilesCache_Value = Guid.initString("855d6203-7914-48b9-8d40-4c56f5acffc5");
pub const IID_IOfflineFilesCache = &IID_IOfflineFilesCache_Value;
pub const IOfflineFilesCache = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Synchronize: *const fn (
            self: *const IOfflineFilesCache,
            hwnd_parent: ?HWND,
            rgpsz_paths: [*]?PWSTR,
            c_paths: u32,
            b_async: BOOL,
            dw_sync_control: u32,
            p_i_sync_conflict_handler: ?*IOfflineFilesSyncConflictHandler,
            p_i_progress: ?*IOfflineFilesSyncProgress,
            p_sync_id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItems: *const fn (
            self: *const IOfflineFilesCache,
            rgpsz_paths: [*]?PWSTR,
            c_paths: u32,
            dw_flags: u32,
            b_async: BOOL,
            p_i_progress: ?*IOfflineFilesSimpleProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItemsForUser: *const fn (
            self: *const IOfflineFilesCache,
            psz_user: ?[*:0]const u16,
            rgpsz_paths: [*]?PWSTR,
            c_paths: u32,
            dw_flags: u32,
            b_async: BOOL,
            p_i_progress: ?*IOfflineFilesSimpleProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pin: *const fn (
            self: *const IOfflineFilesCache,
            hwnd_parent: ?HWND,
            rgpsz_paths: [*]?PWSTR,
            c_paths: u32,
            b_deep: BOOL,
            b_async: BOOL,
            dw_pin_control_flags: u32,
            p_i_progress: ?*IOfflineFilesSyncProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unpin: *const fn (
            self: *const IOfflineFilesCache,
            hwnd_parent: ?HWND,
            rgpsz_paths: [*]?PWSTR,
            c_paths: u32,
            b_deep: BOOL,
            b_async: BOOL,
            dw_pin_control_flags: u32,
            p_i_progress: ?*IOfflineFilesSyncProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncryptionStatus: *const fn (
            self: *const IOfflineFilesCache,
            pb_encrypted: ?*BOOL,
            pb_partial: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encrypt: *const fn (
            self: *const IOfflineFilesCache,
            hwnd_parent: ?HWND,
            b_encrypt: BOOL,
            dw_encryption_control_flags: u32,
            b_async: BOOL,
            p_i_progress: ?*IOfflineFilesSyncProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindItem: *const fn (
            self: *const IOfflineFilesCache,
            psz_path: ?[*:0]const u16,
            dw_query_flags: u32,
            pp_item: ?*?*IOfflineFilesItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindItemEx: *const fn (
            self: *const IOfflineFilesCache,
            psz_path: ?[*:0]const u16,
            p_include_file_filter: ?*IOfflineFilesItemFilter,
            p_include_dir_filter: ?*IOfflineFilesItemFilter,
            p_exclude_file_filter: ?*IOfflineFilesItemFilter,
            p_exclude_dir_filter: ?*IOfflineFilesItemFilter,
            dw_query_flags: u32,
            pp_item: ?*?*IOfflineFilesItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItem: *const fn (
            self: *const IOfflineFilesCache,
            psz_path_original: ?[*:0]const u16,
            psz_path_new: ?[*:0]const u16,
            b_replace_if_exists: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocation: *const fn (
            self: *const IOfflineFilesCache,
            ppsz_path: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDiskSpaceInformation: *const fn (
            self: *const IOfflineFilesCache,
            pcb_volume_total: ?*u64,
            pcb_limit: ?*u64,
            pcb_used: ?*u64,
            pcb_unpinned_limit: ?*u64,
            pcb_unpinned_used: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDiskSpaceLimits: *const fn (
            self: *const IOfflineFilesCache,
            cb_limit: u64,
            cb_unpinned_limit: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessAdminPinPolicy: *const fn (
            self: *const IOfflineFilesCache,
            p_pin_progress: ?*IOfflineFilesSyncProgress,
            p_unpin_progress: ?*IOfflineFilesSyncProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSettingObject: *const fn (
            self: *const IOfflineFilesCache,
            psz_setting_name: ?[*:0]const u16,
            pp_setting: ?*?*IOfflineFilesSetting,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSettingObjects: *const fn (
            self: *const IOfflineFilesCache,
            pp_enum: ?*?*IEnumOfflineFilesSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPathCacheable: *const fn (
            self: *const IOfflineFilesCache,
            psz_path: ?[*:0]const u16,
            pb_cacheable: ?*BOOL,
            p_share_caching_mode: ?*OFFLINEFILES_CACHING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn synchronize(self: *const T, hwnd_parent_: ?HWND, rgpsz_paths_: [*]?PWSTR, c_paths_: u32, b_async_: BOOL, dw_sync_control_: u32, p_i_sync_conflict_handler_: ?*IOfflineFilesSyncConflictHandler, p_i_progress_: ?*IOfflineFilesSyncProgress, p_sync_id_: ?*Guid) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).Synchronize(@as(*const IOfflineFilesCache, @ptrCast(self)), hwnd_parent_, rgpsz_paths_, c_paths_, b_async_, dw_sync_control_, p_i_sync_conflict_handler_, p_i_progress_, p_sync_id_);
            }
            pub inline fn deleteItems(self: *const T, rgpsz_paths_: [*]?PWSTR, c_paths_: u32, dw_flags_: u32, b_async_: BOOL, p_i_progress_: ?*IOfflineFilesSimpleProgress) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).DeleteItems(@as(*const IOfflineFilesCache, @ptrCast(self)), rgpsz_paths_, c_paths_, dw_flags_, b_async_, p_i_progress_);
            }
            pub inline fn deleteItemsForUser(self: *const T, psz_user_: ?[*:0]const u16, rgpsz_paths_: [*]?PWSTR, c_paths_: u32, dw_flags_: u32, b_async_: BOOL, p_i_progress_: ?*IOfflineFilesSimpleProgress) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).DeleteItemsForUser(@as(*const IOfflineFilesCache, @ptrCast(self)), psz_user_, rgpsz_paths_, c_paths_, dw_flags_, b_async_, p_i_progress_);
            }
            pub inline fn pin(self: *const T, hwnd_parent_: ?HWND, rgpsz_paths_: [*]?PWSTR, c_paths_: u32, b_deep_: BOOL, b_async_: BOOL, dw_pin_control_flags_: u32, p_i_progress_: ?*IOfflineFilesSyncProgress) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).Pin(@as(*const IOfflineFilesCache, @ptrCast(self)), hwnd_parent_, rgpsz_paths_, c_paths_, b_deep_, b_async_, dw_pin_control_flags_, p_i_progress_);
            }
            pub inline fn unpin(self: *const T, hwnd_parent_: ?HWND, rgpsz_paths_: [*]?PWSTR, c_paths_: u32, b_deep_: BOOL, b_async_: BOOL, dw_pin_control_flags_: u32, p_i_progress_: ?*IOfflineFilesSyncProgress) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).Unpin(@as(*const IOfflineFilesCache, @ptrCast(self)), hwnd_parent_, rgpsz_paths_, c_paths_, b_deep_, b_async_, dw_pin_control_flags_, p_i_progress_);
            }
            pub inline fn getEncryptionStatus(self: *const T, pb_encrypted_: ?*BOOL, pb_partial_: ?*BOOL) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).GetEncryptionStatus(@as(*const IOfflineFilesCache, @ptrCast(self)), pb_encrypted_, pb_partial_);
            }
            pub inline fn encrypt(self: *const T, hwnd_parent_: ?HWND, b_encrypt_: BOOL, dw_encryption_control_flags_: u32, b_async_: BOOL, p_i_progress_: ?*IOfflineFilesSyncProgress) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).Encrypt(@as(*const IOfflineFilesCache, @ptrCast(self)), hwnd_parent_, b_encrypt_, dw_encryption_control_flags_, b_async_, p_i_progress_);
            }
            pub inline fn findItem(self: *const T, psz_path_: ?[*:0]const u16, dw_query_flags_: u32, pp_item_: ?*?*IOfflineFilesItem) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).FindItem(@as(*const IOfflineFilesCache, @ptrCast(self)), psz_path_, dw_query_flags_, pp_item_);
            }
            pub inline fn findItemEx(self: *const T, psz_path_: ?[*:0]const u16, p_include_file_filter_: ?*IOfflineFilesItemFilter, p_include_dir_filter_: ?*IOfflineFilesItemFilter, p_exclude_file_filter_: ?*IOfflineFilesItemFilter, p_exclude_dir_filter_: ?*IOfflineFilesItemFilter, dw_query_flags_: u32, pp_item_: ?*?*IOfflineFilesItem) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).FindItemEx(@as(*const IOfflineFilesCache, @ptrCast(self)), psz_path_, p_include_file_filter_, p_include_dir_filter_, p_exclude_file_filter_, p_exclude_dir_filter_, dw_query_flags_, pp_item_);
            }
            pub inline fn renameItem(self: *const T, psz_path_original_: ?[*:0]const u16, psz_path_new_: ?[*:0]const u16, b_replace_if_exists_: BOOL) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).RenameItem(@as(*const IOfflineFilesCache, @ptrCast(self)), psz_path_original_, psz_path_new_, b_replace_if_exists_);
            }
            pub inline fn getLocation(self: *const T, ppsz_path_: ?*?PWSTR) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).GetLocation(@as(*const IOfflineFilesCache, @ptrCast(self)), ppsz_path_);
            }
            pub inline fn getDiskSpaceInformation(self: *const T, pcb_volume_total_: ?*u64, pcb_limit_: ?*u64, pcb_used_: ?*u64, pcb_unpinned_limit_: ?*u64, pcb_unpinned_used_: ?*u64) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).GetDiskSpaceInformation(@as(*const IOfflineFilesCache, @ptrCast(self)), pcb_volume_total_, pcb_limit_, pcb_used_, pcb_unpinned_limit_, pcb_unpinned_used_);
            }
            pub inline fn setDiskSpaceLimits(self: *const T, cb_limit_: u64, cb_unpinned_limit_: u64) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).SetDiskSpaceLimits(@as(*const IOfflineFilesCache, @ptrCast(self)), cb_limit_, cb_unpinned_limit_);
            }
            pub inline fn processAdminPinPolicy(self: *const T, p_pin_progress_: ?*IOfflineFilesSyncProgress, p_unpin_progress_: ?*IOfflineFilesSyncProgress) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).ProcessAdminPinPolicy(@as(*const IOfflineFilesCache, @ptrCast(self)), p_pin_progress_, p_unpin_progress_);
            }
            pub inline fn getSettingObject(self: *const T, psz_setting_name_: ?[*:0]const u16, pp_setting_: ?*?*IOfflineFilesSetting) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).GetSettingObject(@as(*const IOfflineFilesCache, @ptrCast(self)), psz_setting_name_, pp_setting_);
            }
            pub inline fn enumSettingObjects(self: *const T, pp_enum_: ?*?*IEnumOfflineFilesSettings) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).EnumSettingObjects(@as(*const IOfflineFilesCache, @ptrCast(self)), pp_enum_);
            }
            pub inline fn isPathCacheable(self: *const T, psz_path_: ?[*:0]const u16, pb_cacheable_: ?*BOOL, p_share_caching_mode_: ?*OFFLINEFILES_CACHING_MODE) HRESULT {
                return @as(*const IOfflineFilesCache.VTable, @ptrCast(self.vtable)).IsPathCacheable(@as(*const IOfflineFilesCache, @ptrCast(self)), psz_path_, pb_cacheable_, p_share_caching_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOfflineFilesCache2_Value = Guid.initString("8c075039-1551-4ed9-8781-56705c04d3c0");
pub const IID_IOfflineFilesCache2 = &IID_IOfflineFilesCache2_Value;
pub const IOfflineFilesCache2 = extern struct {
    pub const VTable = extern struct {
        base: IOfflineFilesCache.VTable,
        RenameItemEx: *const fn (
            self: *const IOfflineFilesCache2,
            psz_path_original: ?[*:0]const u16,
            psz_path_new: ?[*:0]const u16,
            b_replace_if_exists: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOfflineFilesCache.MethodMixin(T);
            pub inline fn renameItemEx(self: *const T, psz_path_original_: ?[*:0]const u16, psz_path_new_: ?[*:0]const u16, b_replace_if_exists_: BOOL) HRESULT {
                return @as(*const IOfflineFilesCache2.VTable, @ptrCast(self.vtable)).RenameItemEx(@as(*const IOfflineFilesCache2, @ptrCast(self)), psz_path_original_, psz_path_new_, b_replace_if_exists_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (4)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "cscapi" fn OfflineFilesEnable(
    b_enable: BOOL,
    pb_reboot_required: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cscapi" fn OfflineFilesStart() callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "cscapi" fn OfflineFilesQueryStatus(
    pb_active: ?*BOOL,
    pb_enabled: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows8.0'
pub extern "cscapi" fn OfflineFilesQueryStatusEx(
    pb_active: ?*BOOL,
    pb_enabled: ?*BOOL,
    pb_available: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BYTE_BLOB = @import("../system/com.zig").BYTE_BLOB;
const FILETIME = @import("../foundation.zig").FILETIME;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IUnknown = @import("../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const PWSTR = @import("../foundation.zig").PWSTR;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
